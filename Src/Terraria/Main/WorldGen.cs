// WorldGen

using Microsoft.Xna.Framework;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using GameManager.DataStructures;
using GameManager.Enums;
using GameManager.GameContent.Achievements;
using GameManager.GameContent.Biomes;
using GameManager.GameContent.Events;
using GameManager.GameContent.Generation;
using GameManager.GameContent.Tile_Entities;
using GameManager.Graphics.Capture;
using GameManager.ID;
using GameManager.IO;
using GameManager.Map;
using GameManager;
using GameManager.Utilities;
using GameManager.World.Generation;

namespace GameManager
{
    internal class WorldGen
    {
        private static WorldGenerator _generator;
        public static int a = 0;
        public static int altarCount = 0;
        public static int bestX = 0;
        public static int bestY = 0;
        public static int c = 0;
        public static bool canSpawn;
        public static int co = 0;
        public static int copperBar = 20;
        public static ushort CopperTierOre = 7;
        public static int corruptBG = 0;
        public static bool crimson = false;
        public static int crimsonBG = 0;
        private static int[] DDoorPos = new int[300];
        private static int[] DDoorX = new int[300];
        private static int[] DDoorY = new int[300];
        public static int dEnteranceX = 0;
        public static int desertBG = 0;
        public static bool destroyObject = false;
        private static int dMaxX;
        private static int dMaxY;
        private static int dMinX;
        private static int dMinY;
        private static int[] DPlatX = new int[300];
        private static int[] DPlatY = new int[300];
        public static bool dSurface = false;
        public static int dungeonX;
        public static int dungeonY;
        private static double dxStrength1;
        private static double dxStrength2;
        private static double dyStrength1;
        private static double dyStrength2;
        private static int[] fihX = new int[30];
        private static int[] fihY = new int[30];
        public static bool[] gem = new bool[6];
        public static bool gen = false;

        //[ThreadStatic]
        public static Random genRand = new Random();
        public static int go = 0;
        public static int goldBar = 0x13;
        public static ushort GoldTierOre = 8;
        private static int grassSpread = 0;
        public static int hallowBG = 0;
        private static int heartCount = 0;
        private static Vector2[] heartPos = new Vector2[100];
        private static int hellChest = 0;
        private static int[] hellChestItem = new int[5];
        public static int hiScore = 0;
        private static int houseCount = 0;
        public static bool[] houseTile = new bool[0x1a3];
        public static int iceCount = 0;
        public static int ir = 0;
        public static int ironBar = 0x16;
        public static ushort IronTierOre = 6;
        public static bool IsGeneratingHardMode = false;
        private static int[] JChestX = new int[100];
        private static int[] JChestY = new int[100];
        public static int jungleBG = 0;
        private static int JungleItemCount = 0;
        private static int JungleX = 0;
        private static int lAltarX;
        private static int lAltarY;
        public static int[] larvaX = new int[100];
        public static int[] larvaY = new int[100];
        public static Vector2 lastDungeonHall = Vector2.Zero;
        private static int lastMaxTilesX = 0;
        private static int lastMaxTilesY = 0;
        public static int lavaCount = 0;
        public static int lavaLine;
        public static bool loadBackup = false;
        public static bool loadFailed = false;
        public static bool loadSuccess = false;
        public static int m = 0;
        public static int maxDRooms = 100;
        public static int maxRoomTiles = 750;
        public static int maxTileCount = 0xdac;
        public static int maxWallOut2 = 0x1388;
        public static int[] countX = new int[maxTileCount];
        public static int[] countY = new int[maxTileCount];
        private static int[] dRoomB = new int[maxDRooms];
        private static int[] dRoomL = new int[maxDRooms];
        private static int[] dRoomR = new int[maxDRooms];
        public static int[] dRoomSize = new int[maxDRooms];
        private static int[] dRoomT = new int[maxDRooms];
        private static bool[] dRoomTreasure = new bool[maxDRooms];
        public static int[] dRoomX = new int[maxDRooms];
        public static int[] dRoomY = new int[maxDRooms];
        private static int[] mCaveX = new int[30];
        private static int[] mCaveY = new int[30];
        private static bool mergeDown = false;
        private static bool mergeLeft = false;
        private static bool mergeRight = false;
        private static bool mergeUp = false;
        public static byte mossTile = 0xb3;
        public static int[] mossType = new int[3];
        public static byte mossWall = 0x36;
        private static bool mudWall = false;
        public static bool noLiquidCheck = false;
        public static bool noMapUpdate = false;
        public static bool noTileActions = false;
        private static int numDDoors;
        private static int numDPlats;
        public static int numDRooms = 0;
        private static int numIslandHouses = 0;
        private static int numJChests = 0;
        public static int numLarva = 0;
        private static int numMCaves = 0;
        public static int numRoomTiles;
        public static int numTileCount = 0;
        public static int oceanBG = 0;
        public static int oreTier1 = -1;
        public static int oreTier2 = -1;
        public static int oreTier3 = -1;
        public static int rockCount = 0;
        private static bool roomChair;
        private static bool roomDoor;
        private static bool roomEvil;
        private static bool roomOccupied;
        private static bool roomTable;
        private static bool roomTorch;
        public static int[] roomX = new int[maxRoomTiles];
        public static int roomX1;
        public static int roomX2;
        public static int[] roomY = new int[maxRoomTiles];
        public static int roomY1;
        public static int roomY2;
        public static bool saveLock = false;
        public static int shadowOrbCount = 0;
        public static bool shadowOrbSmashed = false;
        public static int si = 0;
        public static int silverBar = 0x15;
        public static ushort SilverTierOre = 9;
        private static bool[] skyLake = new bool[30];
        public static int snowBG = 0;
        public static int spawnDelay = 0;
        public static bool spawnEye = false;
        public static int spawnHardBoss = 0;
        public static bool spawnMeteor = false;
        public static int spawnNPC = 0;
        public static Point16[] statueList;
        public static List<int> StatuesWithTraps = new List<int>(new int[] { 4, 7, 10, 0x12 });
        public static string statusText = "";
        private static bool stopDrops = false;
        public static byte tBlood = 0;
        public static int tBottom;
        public static byte tEvil = 0;
        public static byte tGood = 0;
        private static int tileCounterMax = 20;
        private static int tileCounterNum = 0;
        private static int[] tileCounterX = new int[tileCounterMax];
        private static int[] tileCounterY = new int[tileCounterMax];
        public static int[] tileCounts = new int[0x1a3];
        public static int tileReframeCount = 0;
        public static int tLeft;
        public static int totalBlood = 0;
        public static int totalBlood2 = 0;
        public static int totalD = 0;
        public static int totalEvil = 0;
        public static int totalEvil2 = 0;
        public static int totalGood = 0;
        public static int totalGood2 = 0;
        public static int totalSolid = 0;
        public static int totalSolid2 = 0;
        public static int totalX = 0;
        public static int treeBG = 0;
        public static int tRight;
        public static int tRooms;
        public static int tTop;
        public static Rectangle UndergroundDesertLocation = Rectangle.Empty;
        public static int waterLine;
        public static bool worldBackup = false;
        public static bool worldCleared = false;
        public static double worldSurfaceLow;

        public static bool AddBuriedChest(Point point, int contain = 0, bool notNearOtherChests = false, int Style = -1)
        {
            return AddBuriedChest(point.X, point.Y, contain, notNearOtherChests, Style);
        }

        public static bool AddBuriedChest(int i, int j, int contain = 0, bool notNearOtherChests = false, int Style = -1)
        {
            bool flag = false;
            bool flag2 = false;
            if (genRand == null)
            {
                genRand = new Random((int)DateTime.Now.Ticks);
            }
            for (int k = j; k < Game1.maxTilesY; k++)
            {
                if (!SolidTile(i, k))
                {
                    continue;
                }
                bool flag3 = false;
                int num2 = i;
                int num3 = k;
                int index = -1;
                int style = 0;
                if ((num3 >= (Game1.worldSurface + 25.0)) || (contain > 0))
                {
                    style = 1;
                    if (((Style == 10) || (contain == 0xd3)) || (((contain == 0xd4) || (contain == 0xd5)) || (contain == 0x2f1)))
                    {
                        style = 10;
                        flag2 = true;
                    }
                }
                if (Style >= 0)
                {
                    style = Style;
                }
                if ((style == 11) || ((((contain == 0) && (num3 >= (Game1.worldSurface + 25.0))) && (num3 <= (Game1.maxTilesY - 0xcd))) && (((Game1.tile[i, k].type == 0x93) || (Game1.tile[i, k].type == 0xa1)) || (Game1.tile[i, k].type == 0xa2))))
                {
                    flag = true;
                    style = 11;
                    switch (genRand.Next(6))
                    {
                        case 0:
                            contain = 670;
                            break;

                        case 1:
                            contain = 0x2d4;
                            break;

                        case 2:
                            contain = 950;
                            break;

                        case 3:
                            contain = 0x527;
                            break;

                        case 4:
                            contain = 0x3db;
                            break;

                        default:
                            contain = 0x62b;
                            break;
                    }
                    if (genRand.Next(20) == 0)
                    {
                        contain = 0x3e5;
                    }
                    if (genRand.Next(50) == 0)
                    {
                        contain = 0x29d;
                    }
                }
                if ((num3 > (Game1.maxTilesY - 0xcd)) && (contain == 0))
                {
                    if (hellChest == hellChestItem[0])
                    {
                        contain = 0x112;
                        style = 4;
                        flag3 = true;
                    }
                    else if (hellChest == hellChestItem[1])
                    {
                        contain = 220;
                        style = 4;
                        flag3 = true;
                    }
                    else if (hellChest == hellChestItem[2])
                    {
                        contain = 0x70;
                        style = 4;
                        flag3 = true;
                    }
                    else if (hellChest == hellChestItem[3])
                    {
                        contain = 0xda;
                        style = 4;
                        flag3 = true;
                    }
                    else
                    {
                        contain = 0xbcb;
                        style = 4;
                        flag3 = true;
                    }
                }
                index = PlaceChest(num2 - 1, num3 - 1, 0x15, notNearOtherChests, style);
                if (index < 0)
                {
                    return false;
                }
                if (flag3)
                {
                    hellChest++;
                    if (hellChest > 4)
                    {
                        hellChest = 0;
                    }
                }
                int num7 = 0;
                while (num7 == 0)
                {
                    if (((style == 0) && (num3 < (Game1.worldSurface + 25.0))) || (contain == 0x350))
                    {
                        if (contain > 0)
                        {
                            Game1.chest[index].item[num7].SetDefaults(contain, false);
                            Game1.chest[index].item[num7].Prefix(-1);
                            if (contain == 0x350)
                            {
                                num7++;
                                Game1.chest[index].item[num7].SetDefaults(0x362, false);
                            }
                            else if (contain == 0x340)
                            {
                                num7++;
                                Game1.chest[index].item[num7].SetDefaults(0x3a5, false);
                            }
                            num7++;
                        }
                        else
                        {
                            switch (genRand.Next(11))
                            {
                                case 0:
                                    Game1.chest[index].item[num7].SetDefaults(280, false);
                                    Game1.chest[index].item[num7].Prefix(-1);
                                    break;

                                case 1:
                                    Game1.chest[index].item[num7].SetDefaults(0x119, false);
                                    Game1.chest[index].item[num7].Prefix(-1);
                                    break;

                                case 2:
                                    Game1.chest[index].item[num7].SetDefaults(0x11c, false);
                                    Game1.chest[index].item[num7].Prefix(-1);
                                    break;

                                case 3:
                                    Game1.chest[index].item[num7].SetDefaults(0x11a, false);
                                    Game1.chest[index].item[num7].stack = genRand.Next(40, 0x4b);
                                    break;

                                case 4:
                                    Game1.chest[index].item[num7].SetDefaults(0x117, false);
                                    Game1.chest[index].item[num7].stack = genRand.Next(70, 150);
                                    break;

                                case 5:
                                    Game1.chest[index].item[num7].SetDefaults(0x11d, false);
                                    Game1.chest[index].item[num7].Prefix(-1);
                                    break;

                                case 6:
                                    Game1.chest[index].item[num7].SetDefaults(0x3b9, false);
                                    Game1.chest[index].item[num7].Prefix(-1);
                                    break;

                                case 7:
                                    Game1.chest[index].item[num7].SetDefaults(0x3b2, false);
                                    Game1.chest[index].item[num7].Prefix(-1);
                                    break;

                                case 8:
                                    Game1.chest[index].item[num7].SetDefaults(0xbfc, false);
                                    Game1.chest[index].item[num7].Prefix(-1);
                                    break;

                                case 9:
                                    Game1.chest[index].item[num7].SetDefaults(0xbfd, false);
                                    Game1.chest[index].item[num7].Prefix(-1);
                                    break;

                                case 10:
                                    Game1.chest[index].item[num7].SetDefaults(0xc0c, false);
                                    Game1.chest[index].item[num7].Prefix(-1);
                                    break;
                            }
                            num7++;
                        }
                        if (genRand.Next(6) == 0)
                        {
                            Game1.chest[index].item[num7].SetDefaults(0xc15, false);
                            Game1.chest[index].item[num7].stack = 1;
                            if (genRand.Next(5) == 0)
                            {
                                Item item1 = Game1.chest[index].item[num7];
                                item1.stack += genRand.Next(2);
                            }
                            if (genRand.Next(10) == 0)
                            {
                                Item item2 = Game1.chest[index].item[num7];
                                item2.stack += genRand.Next(3);
                            }
                            num7++;
                        }
                        if (genRand.Next(3) == 0)
                        {
                            Game1.chest[index].item[num7].SetDefaults(0xa8, false);
                            Game1.chest[index].item[num7].stack = genRand.Next(3, 6);
                            num7++;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            int num9 = genRand.Next(2);
                            int num10 = genRand.Next(8) + 3;
                            switch (num9)
                            {
                                case 0:
                                    Game1.chest[index].item[num7].SetDefaults(copperBar, false);
                                    break;

                                case 1:
                                    Game1.chest[index].item[num7].SetDefaults(ironBar, false);
                                    break;
                            }
                            Game1.chest[index].item[num7].stack = num10;
                            num7++;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            int num11 = genRand.Next(50, 0x65);
                            Game1.chest[index].item[num7].SetDefaults(0x3c5, false);
                            Game1.chest[index].item[num7].stack = num11;
                            num7++;
                        }
                        if (genRand.Next(3) != 0)
                        {
                            int num12 = genRand.Next(2);
                            int num13 = genRand.Next(0x1a) + 0x19;
                            switch (num12)
                            {
                                case 0:
                                    Game1.chest[index].item[num7].SetDefaults(40, false);
                                    break;

                                case 1:
                                    Game1.chest[index].item[num7].SetDefaults(0x2a, false);
                                    break;
                            }
                            Game1.chest[index].item[num7].stack = num13;
                            num7++;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            int num14 = genRand.Next(1);
                            int num15 = genRand.Next(3) + 3;
                            if (num14 == 0)
                            {
                                Game1.chest[index].item[num7].SetDefaults(0x1c, false);
                            }
                            Game1.chest[index].item[num7].stack = num15;
                            num7++;
                        }
                        if (genRand.Next(3) != 0)
                        {
                            Game1.chest[index].item[num7].SetDefaults(0x92e, false);
                            Game1.chest[index].item[num7].stack = genRand.Next(2, 5);
                            num7++;
                        }
                        if (genRand.Next(3) > 0)
                        {
                            int num16 = genRand.Next(6);
                            int num17 = genRand.Next(1, 3);
                            switch (num16)
                            {
                                case 0:
                                    Game1.chest[index].item[num7].SetDefaults(0x124, false);
                                    break;

                                case 1:
                                    Game1.chest[index].item[num7].SetDefaults(0x12a, false);
                                    break;

                                case 2:
                                    Game1.chest[index].item[num7].SetDefaults(0x12b, false);
                                    break;

                                case 3:
                                    Game1.chest[index].item[num7].SetDefaults(290, false);
                                    break;

                                case 4:
                                    Game1.chest[index].item[num7].SetDefaults(0x912, false);
                                    break;

                                case 5:
                                    Game1.chest[index].item[num7].SetDefaults(0x915, false);
                                    break;
                            }
                            Game1.chest[index].item[num7].stack = num17;
                            num7++;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            int num18 = genRand.Next(2);
                            int num19 = genRand.Next(11) + 10;
                            switch (num18)
                            {
                                case 0:
                                    Game1.chest[index].item[num7].SetDefaults(8, false);
                                    break;

                                case 1:
                                    Game1.chest[index].item[num7].SetDefaults(0x1f, false);
                                    break;
                            }
                            Game1.chest[index].item[num7].stack = num19;
                            num7++;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            Game1.chest[index].item[num7].SetDefaults(0x48, false);
                            Game1.chest[index].item[num7].stack = genRand.Next(10, 30);
                            num7++;
                        }
                    }
                    else if (num3 < Game1.rockLayer)
                    {
                        if (contain > 0)
                        {
                            if (contain == 0x340)
                            {
                                Game1.chest[index].item[num7].SetDefaults(0x3a5, false);
                                num7++;
                            }
                            Game1.chest[index].item[num7].SetDefaults(contain, false);
                            Game1.chest[index].item[num7].Prefix(-1);
                            num7++;
                        }
                        else
                        {
                            int num20 = genRand.Next(7);
                            if (genRand.Next(20) == 0)
                            {
                                Game1.chest[index].item[num7].SetDefaults(0x3e5, false);
                                Game1.chest[index].item[num7].Prefix(-1);
                            }
                            else
                            {
                                switch (num20)
                                {
                                    case 0:
                                        Game1.chest[index].item[num7].SetDefaults(0x31, false);
                                        Game1.chest[index].item[num7].Prefix(-1);
                                        break;

                                    case 1:
                                        Game1.chest[index].item[num7].SetDefaults(50, false);
                                        Game1.chest[index].item[num7].Prefix(-1);
                                        break;

                                    case 2:
                                        Game1.chest[index].item[num7].SetDefaults(0x35, false);
                                        Game1.chest[index].item[num7].Prefix(-1);
                                        break;

                                    case 3:
                                        Game1.chest[index].item[num7].SetDefaults(0x36, false);
                                        Game1.chest[index].item[num7].Prefix(-1);
                                        break;

                                    case 4:
                                        Game1.chest[index].item[num7].SetDefaults(0x37, false);
                                        Game1.chest[index].item[num7].Prefix(-1);
                                        break;

                                    case 5:
                                        Game1.chest[index].item[num7].SetDefaults(0x3cf, false);
                                        Game1.chest[index].item[num7].Prefix(-1);
                                        break;

                                    case 6:
                                        Game1.chest[index].item[num7].SetDefaults(930, false);
                                        Game1.chest[index].item[num7].Prefix(-1);
                                        num7++;
                                        Game1.chest[index].item[num7].SetDefaults(0x3a3, false);
                                        Game1.chest[index].item[num7].stack = genRand.Next(0x1a) + 0x19;
                                        break;
                                }
                            }
                            num7++;
                        }
                        if (genRand.Next(3) == 0)
                        {
                            Game1.chest[index].item[num7].SetDefaults(0xa6, false);
                            Game1.chest[index].item[num7].stack = genRand.Next(10, 20);
                            num7++;
                        }
                        if (genRand.Next(5) == 0)
                        {
                            Game1.chest[index].item[num7].SetDefaults(0x34, false);
                            num7++;
                        }
                        if (genRand.Next(3) == 0)
                        {
                            int num21 = genRand.Next(50, 0x65);
                            Game1.chest[index].item[num7].SetDefaults(0x3c5, false);
                            Game1.chest[index].item[num7].stack = num21;
                            num7++;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            int num22 = genRand.Next(2);
                            int num23 = genRand.Next(10) + 5;
                            switch (num22)
                            {
                                case 0:
                                    Game1.chest[index].item[num7].SetDefaults(ironBar, false);
                                    break;

                                case 1:
                                    Game1.chest[index].item[num7].SetDefaults(silverBar, false);
                                    break;
                            }
                            Game1.chest[index].item[num7].stack = num23;
                            num7++;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            int num24 = genRand.Next(2);
                            int num25 = genRand.Next(0x19) + 0x19;
                            switch (num24)
                            {
                                case 0:
                                    Game1.chest[index].item[num7].SetDefaults(40, false);
                                    break;

                                case 1:
                                    Game1.chest[index].item[num7].SetDefaults(0x2a, false);
                                    break;
                            }
                            Game1.chest[index].item[num7].stack = num25;
                            num7++;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            int num26 = genRand.Next(1);
                            int num27 = genRand.Next(3) + 3;
                            if (num26 == 0)
                            {
                                Game1.chest[index].item[num7].SetDefaults(0x1c, false);
                            }
                            Game1.chest[index].item[num7].stack = num27;
                            num7++;
                        }
                        if (genRand.Next(3) > 0)
                        {
                            int num28 = genRand.Next(9);
                            int num29 = genRand.Next(1, 3);
                            switch (num28)
                            {
                                case 0:
                                    Game1.chest[index].item[num7].SetDefaults(0x121, false);
                                    break;

                                case 1:
                                    Game1.chest[index].item[num7].SetDefaults(0x12a, false);
                                    break;

                                case 2:
                                    Game1.chest[index].item[num7].SetDefaults(0x12b, false);
                                    break;

                                case 3:
                                    Game1.chest[index].item[num7].SetDefaults(290, false);
                                    break;

                                case 4:
                                    Game1.chest[index].item[num7].SetDefaults(0x12f, false);
                                    break;

                                case 5:
                                    Game1.chest[index].item[num7].SetDefaults(0x123, false);
                                    break;

                                case 6:
                                    Game1.chest[index].item[num7].SetDefaults(0x130, false);
                                    break;

                                case 7:
                                    Game1.chest[index].item[num7].SetDefaults(0x912, false);
                                    break;

                                case 8:
                                    Game1.chest[index].item[num7].SetDefaults(0x919, false);
                                    break;
                            }
                            Game1.chest[index].item[num7].stack = num29;
                            num7++;
                        }
                        if (genRand.Next(3) != 0)
                        {
                            int num30 = genRand.Next(1, 3);
                            Game1.chest[index].item[num7].SetDefaults(0x92e, false);
                            Game1.chest[index].item[num7].stack = num30;
                            num7++;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            int num31 = genRand.Next(11) + 10;
                            if (style == 11)
                            {
                                Game1.chest[index].item[num7].SetDefaults(0x3ce, false);
                            }
                            else
                            {
                                Game1.chest[index].item[num7].SetDefaults(8, false);
                            }
                            Game1.chest[index].item[num7].stack = num31;
                            num7++;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            Game1.chest[index].item[num7].SetDefaults(0x48, false);
                            Game1.chest[index].item[num7].stack = genRand.Next(50, 90);
                            num7++;
                        }
                    }
                    else if (num3 < (Game1.maxTilesY - 250))
                    {
                        if (contain > 0)
                        {
                            Game1.chest[index].item[num7].SetDefaults(contain, false);
                            Game1.chest[index].item[num7].Prefix(-1);
                            num7++;
                            if (flag && (genRand.Next(5) == 0))
                            {
                                Game1.chest[index].item[num7].SetDefaults(0xc7f, false);
                                num7++;
                            }
                            if (flag2 && (genRand.Next(6) == 0))
                            {
                                Game1.chest[index].item[num7++].SetDefaults(0xd20, false);
                                Game1.chest[index].item[num7++].SetDefaults(0xd21, false);
                            }
                        }
                        else
                        {
                            int num32 = genRand.Next(7);
                            if (genRand.Next(40) == 0)
                            {
                                Game1.chest[index].item[num7].SetDefaults(0x38a, false);
                                Game1.chest[index].item[num7].Prefix(-1);
                            }
                            else if (genRand.Next(15) == 0)
                            {
                                Game1.chest[index].item[num7].SetDefaults(0x3e5, false);
                                Game1.chest[index].item[num7].Prefix(-1);
                            }
                            else
                            {
                                switch (num32)
                                {
                                    case 0:
                                        Game1.chest[index].item[num7].SetDefaults(0x31, false);
                                        Game1.chest[index].item[num7].Prefix(-1);
                                        break;

                                    case 1:
                                        Game1.chest[index].item[num7].SetDefaults(50, false);
                                        Game1.chest[index].item[num7].Prefix(-1);
                                        break;

                                    case 2:
                                        Game1.chest[index].item[num7].SetDefaults(0x35, false);
                                        Game1.chest[index].item[num7].Prefix(-1);
                                        break;

                                    case 3:
                                        Game1.chest[index].item[num7].SetDefaults(0x36, false);
                                        Game1.chest[index].item[num7].Prefix(-1);
                                        break;

                                    case 4:
                                        Game1.chest[index].item[num7].SetDefaults(0x37, false);
                                        Game1.chest[index].item[num7].Prefix(-1);
                                        break;

                                    case 5:
                                        Game1.chest[index].item[num7].SetDefaults(0x3cf, false);
                                        Game1.chest[index].item[num7].Prefix(-1);
                                        break;

                                    case 6:
                                        Game1.chest[index].item[num7].SetDefaults(930, false);
                                        Game1.chest[index].item[num7].Prefix(-1);
                                        num7++;
                                        Game1.chest[index].item[num7].SetDefaults(0x3a3, false);
                                        Game1.chest[index].item[num7].stack = genRand.Next(0x1a) + 0x19;
                                        break;
                                }
                            }
                            num7++;
                        }
                        if (genRand.Next(5) == 0)
                        {
                            Game1.chest[index].item[num7].SetDefaults(0x2b, false);
                            num7++;
                        }
                        if (genRand.Next(3) == 0)
                        {
                            Game1.chest[index].item[num7].SetDefaults(0xa7, false);
                            num7++;
                        }
                        if (genRand.Next(4) == 0)
                        {
                            Game1.chest[index].item[num7].SetDefaults(0x33, false);
                            Game1.chest[index].item[num7].stack = genRand.Next(0x1a) + 0x19;
                            num7++;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            int num33 = genRand.Next(2);
                            int num34 = genRand.Next(8) + 3;
                            switch (num33)
                            {
                                case 0:
                                    Game1.chest[index].item[num7].SetDefaults(goldBar, false);
                                    break;

                                case 1:
                                    Game1.chest[index].item[num7].SetDefaults(silverBar, false);
                                    break;
                            }
                            Game1.chest[index].item[num7].stack = num34;
                            num7++;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            int num35 = genRand.Next(2);
                            int num36 = genRand.Next(0x1a) + 0x19;
                            switch (num35)
                            {
                                case 0:
                                    Game1.chest[index].item[num7].SetDefaults(0x29, false);
                                    break;

                                case 1:
                                    Game1.chest[index].item[num7].SetDefaults(0x117, false);
                                    break;
                            }
                            Game1.chest[index].item[num7].stack = num36;
                            num7++;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            int num37 = genRand.Next(1);
                            int num38 = genRand.Next(3) + 3;
                            if (num37 == 0)
                            {
                                Game1.chest[index].item[num7].SetDefaults(0xbc, false);
                            }
                            Game1.chest[index].item[num7].stack = num38;
                            num7++;
                        }
                        if (genRand.Next(3) > 0)
                        {
                            int num39 = genRand.Next(6);
                            int num40 = genRand.Next(1, 3);
                            switch (num39)
                            {
                                case 0:
                                    Game1.chest[index].item[num7].SetDefaults(0x128, false);
                                    break;

                                case 1:
                                    Game1.chest[index].item[num7].SetDefaults(0x127, false);
                                    break;

                                case 2:
                                    Game1.chest[index].item[num7].SetDefaults(0x12b, false);
                                    break;

                                case 3:
                                    Game1.chest[index].item[num7].SetDefaults(0x12e, false);
                                    break;

                                case 4:
                                    Game1.chest[index].item[num7].SetDefaults(0x12f, false);
                                    break;

                                case 5:
                                    Game1.chest[index].item[num7].SetDefaults(0x131, false);
                                    break;
                            }
                            Game1.chest[index].item[num7].stack = num40;
                            num7++;
                        }
                        if (genRand.Next(3) > 1)
                        {
                            int num41 = genRand.Next(7);
                            int num42 = genRand.Next(1, 3);
                            switch (num41)
                            {
                                case 0:
                                    Game1.chest[index].item[num7].SetDefaults(0x12d, false);
                                    break;

                                case 1:
                                    Game1.chest[index].item[num7].SetDefaults(0x12e, false);
                                    break;

                                case 2:
                                    Game1.chest[index].item[num7].SetDefaults(0x129, false);
                                    break;

                                case 3:
                                    Game1.chest[index].item[num7].SetDefaults(0x130, false);
                                    break;

                                case 4:
                                    Game1.chest[index].item[num7].SetDefaults(0x919, false);
                                    break;

                                case 5:
                                    Game1.chest[index].item[num7].SetDefaults(0x92f, false);
                                    break;

                                case 6:
                                    Game1.chest[index].item[num7].SetDefaults(0x919, false);
                                    break;
                            }
                            Game1.chest[index].item[num7].stack = num42;
                            num7++;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            int num43 = genRand.Next(1, 3);
                            Game1.chest[index].item[num7].SetDefaults(0x92e, false);
                            Game1.chest[index].item[num7].stack = num43;
                            num7++;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            int num44 = genRand.Next(2);
                            int num45 = genRand.Next(15) + 15;
                            switch (num44)
                            {
                                case 0:
                                    if (style == 11)
                                    {
                                        Game1.chest[index].item[num7].SetDefaults(0x3ce, false);
                                    }
                                    else
                                    {
                                        Game1.chest[index].item[num7].SetDefaults(8, false);
                                    }
                                    break;

                                case 1:
                                    Game1.chest[index].item[num7].SetDefaults(0x11a, false);
                                    break;
                            }
                            Game1.chest[index].item[num7].stack = num45;
                            num7++;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            Game1.chest[index].item[num7].SetDefaults(0x49, false);
                            Game1.chest[index].item[num7].stack = genRand.Next(1, 3);
                            num7++;
                        }
                    }
                    else
                    {
                        if (contain > 0)
                        {
                            Game1.chest[index].item[num7].SetDefaults(contain, false);
                            Game1.chest[index].item[num7].Prefix(-1);
                            num7++;
                        }
                        else
                        {
                            switch (genRand.Next(4))
                            {
                                case 0:
                                    Game1.chest[index].item[num7].SetDefaults(0x31, false);
                                    Game1.chest[index].item[num7].Prefix(-1);
                                    break;

                                case 1:
                                    Game1.chest[index].item[num7].SetDefaults(50, false);
                                    Game1.chest[index].item[num7].Prefix(-1);
                                    break;

                                case 2:
                                    Game1.chest[index].item[num7].SetDefaults(0x35, false);
                                    Game1.chest[index].item[num7].Prefix(-1);
                                    break;

                                case 3:
                                    Game1.chest[index].item[num7].SetDefaults(0x36, false);
                                    Game1.chest[index].item[num7].Prefix(-1);
                                    break;
                            }
                            num7++;
                        }
                        if (genRand.Next(3) == 0)
                        {
                            Game1.chest[index].item[num7].SetDefaults(0xa7, false);
                            num7++;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            int num47 = genRand.Next(2);
                            int num48 = genRand.Next(15) + 15;
                            switch (num47)
                            {
                                case 0:
                                    Game1.chest[index].item[num7].SetDefaults(0x75, false);
                                    break;

                                case 1:
                                    Game1.chest[index].item[num7].SetDefaults(goldBar, false);
                                    break;
                            }
                            Game1.chest[index].item[num7].stack = num48;
                            num7++;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            int num49 = genRand.Next(2);
                            int num50 = genRand.Next(0x19) + 50;
                            switch (num49)
                            {
                                case 0:
                                    Game1.chest[index].item[num7].SetDefaults(0x109, false);
                                    break;

                                case 1:
                                    Game1.chest[index].item[num7].SetDefaults(0x116, false);
                                    break;
                            }
                            Game1.chest[index].item[num7].stack = num50;
                            num7++;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            int num51 = genRand.Next(2);
                            int num52 = genRand.Next(6) + 15;
                            switch (num51)
                            {
                                case 0:
                                    Game1.chest[index].item[num7].SetDefaults(0xe2, false);
                                    break;

                                case 1:
                                    Game1.chest[index].item[num7].SetDefaults(0xe3, false);
                                    break;
                            }
                            Game1.chest[index].item[num7].stack = num52;
                            num7++;
                        }
                        if (genRand.Next(4) > 0)
                        {
                            int num53 = genRand.Next(8);
                            int num54 = genRand.Next(1, 3);
                            switch (num53)
                            {
                                case 0:
                                    Game1.chest[index].item[num7].SetDefaults(0x128, false);
                                    break;

                                case 1:
                                    Game1.chest[index].item[num7].SetDefaults(0x127, false);
                                    break;

                                case 2:
                                    Game1.chest[index].item[num7].SetDefaults(0x125, false);
                                    break;

                                case 3:
                                    Game1.chest[index].item[num7].SetDefaults(0x120, false);
                                    break;

                                case 4:
                                    Game1.chest[index].item[num7].SetDefaults(0x126, false);
                                    break;

                                case 5:
                                    Game1.chest[index].item[num7].SetDefaults(0x129, false);
                                    break;

                                case 6:
                                    Game1.chest[index].item[num7].SetDefaults(0x130, false);
                                    break;

                                case 7:
                                    Game1.chest[index].item[num7].SetDefaults(0x913, false);
                                    break;
                            }
                            Game1.chest[index].item[num7].stack = num54;
                            num7++;
                        }
                        if (genRand.Next(3) > 0)
                        {
                            int num55 = genRand.Next(8);
                            int num56 = genRand.Next(1, 3);
                            switch (num55)
                            {
                                case 0:
                                    Game1.chest[index].item[num7].SetDefaults(0x131, false);
                                    break;

                                case 1:
                                    Game1.chest[index].item[num7].SetDefaults(0x12d, false);
                                    break;

                                case 2:
                                    Game1.chest[index].item[num7].SetDefaults(0x12e, false);
                                    break;

                                case 3:
                                    Game1.chest[index].item[num7].SetDefaults(0x120, false);
                                    break;

                                case 4:
                                    Game1.chest[index].item[num7].SetDefaults(300, false);
                                    break;

                                case 5:
                                    Game1.chest[index].item[num7].SetDefaults(0x92f, false);
                                    break;

                                case 6:
                                    Game1.chest[index].item[num7].SetDefaults(0x92c, false);
                                    break;

                                case 7:
                                    Game1.chest[index].item[num7].SetDefaults(0x929, false);
                                    break;
                            }
                            Game1.chest[index].item[num7].stack = num56;
                            num7++;
                        }
                        if (genRand.Next(3) == 0)
                        {
                            int num57 = genRand.Next(1, 3);
                            Game1.chest[index].item[num7].SetDefaults(0x92e, false);
                            Game1.chest[index].item[num7].stack = num57;
                            num7++;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            int num58 = genRand.Next(2);
                            int num59 = genRand.Next(15) + 15;
                            switch (num58)
                            {
                                case 0:
                                    Game1.chest[index].item[num7].SetDefaults(8, false);
                                    break;

                                case 1:
                                    Game1.chest[index].item[num7].SetDefaults(0x11a, false);
                                    break;
                            }
                            Game1.chest[index].item[num7].stack = num59;
                            num7++;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            Game1.chest[index].item[num7].SetDefaults(0x49, false);
                            Game1.chest[index].item[num7].stack = genRand.Next(2, 5);
                            num7++;
                        }
                    }
                    if (num7 > 0)
                    {
                        if ((style == 10) && (genRand.Next(4) == 0))
                        {
                            Game1.chest[index].item[num7].SetDefaults(0x89c, false);
                            num7++;
                        }
                        if ((style == 11) && (genRand.Next(7) == 0))
                        {
                            Game1.chest[index].item[num7].SetDefaults(0x896, false);
                            num7++;
                        }
                        if ((style == 12) && (genRand.Next(2) == 0))
                        {
                            Game1.chest[index].item[num7].SetDefaults(0x894, false);
                            num7++;
                        }
                        if ((style == 13) && (genRand.Next(3) == 0))
                        {
                            Game1.chest[index].item[num7].SetDefaults(0x895, false);
                            num7++;
                        }
                        if (style == 0x10)
                        {
                            Game1.chest[index].item[num7].SetDefaults(0x893, false);
                            num7++;
                        }
                        if (Game1.wallDungeon[Game1.tile[i, k].wall] && (genRand.Next(8) == 0))
                        {
                            Game1.chest[index].item[num7].SetDefaults(0x890, false);
                            num7++;
                        }
                        if (style == 0x10)
                        {
                            if (Game1.rand.Next(5) == 0)
                            {
                                Game1.chest[index].item[num7].SetDefaults(0xacf, false);
                                num7++;
                            }
                            else
                            {
                                Game1.chest[index].item[num7].SetDefaults(0xace, false);
                                Game1.chest[index].item[num7].stack = Game1.rand.Next(3, 8);
                                num7++;
                            }
                        }
                    }
                }
                return true;
            }
            return false;
        }

        private static void AddGenerationPass(string name, WorldGenLegacyMethod method)
        {
            _generator.Append(new PassLegacy(name, method));
        }

        private static void AddGenerationPass(string name, float weight, WorldGenLegacyMethod method)
        {
            _generator.Append(new PassLegacy(name, method, weight));
        }

        public static void AddHellHouses()
        {
            int num57;
            int num58;
            int num59;
            int num60;
            int num61;
            int num62;
            int num63;
            int num64;
            int minValue = (int)(Game1.maxTilesX * 0.25);
            for (int i = minValue; i < (Game1.maxTilesX - minValue); i++)
            {
                int num3 = Game1.maxTilesY - 40;
                while (Game1.tile[i, num3].active() || (Game1.tile[i, num3].liquid > 0))
                {
                    num3--;
                }
                if (Game1.tile[i, num3 + 1].active())
                {
                    ushort tileType = (ushort)genRand.Next(0x4b, 0x4d);
                    byte wallType = 13;
                    if (genRand.Next(5) > 0)
                    {
                        tileType = 0x4b;
                    }
                    if (tileType == 0x4b)
                    {
                        wallType = 14;
                    }
                    HellFort(i, num3, tileType, wallType);
                    i += genRand.Next(30, 130);
                    if (genRand.Next(10) == 0)
                    {
                        i += genRand.Next(0, 200);
                    }
                }
            }
            float num6 = Game1.maxTilesX / 0x1068;
            for (int j = 0; j < (200f * num6); j++)
            {
                int num8 = 0;
                bool flag = false;
                while (!flag)
                {
                    num8++;
                    int num9 = genRand.Next((int)(Game1.maxTilesX * 0.2), (int)(Game1.maxTilesX * 0.8));
                    int num10 = genRand.Next(Game1.maxTilesY - 300, Game1.maxTilesY - 20);
                    if (Game1.tile[num9, num10].active() && ((Game1.tile[num9, num10].type == 0x4b) || (Game1.tile[num9, num10].type == 0x4c)))
                    {
                        int num11 = 0;
                        if (Game1.tile[num9 - 1, num10].wall > 0)
                        {
                            num11 = -1;
                        }
                        else if (Game1.tile[num9 + 1, num10].wall > 0)
                        {
                            num11 = 1;
                        }
                        if (!Game1.tile[num9 + num11, num10].active() && !Game1.tile[num9 + num11, num10 + 1].active())
                        {
                            bool flag2 = false;
                            for (int n = num9 - 8; n < (num9 + 8); n++)
                            {
                                for (int num13 = num10 - 8; num13 < (num10 + 8); num13++)
                                {
                                    if (Game1.tile[n, num13].active() && (Game1.tile[n, num13].type == 4))
                                    {
                                        flag2 = true;
                                        break;
                                    }
                                }
                            }
                            if (!flag2)
                            {
                                PlaceTile(num9 + num11, num10, 4, true, true, -1, 7);
                                flag = true;
                            }
                        }
                    }
                    if (num8 > 0x3e8)
                    {
                        flag = true;
                    }
                }
            }
            float num14 = 4200000f / ((float)Game1.maxTilesX);
            for (int k = 0; k < num14; k++)
            {
                int num16 = genRand.Next(minValue, Game1.maxTilesX - minValue);
                int num17 = genRand.Next(Game1.maxTilesY - 250, Game1.maxTilesY - 20);
                while (((Game1.tile[num16, num17].wall != 13) && (Game1.tile[num16, num17].wall != 14)) || Game1.tile[num16, num17].active())
                {
                    num16 = genRand.Next(minValue, Game1.maxTilesX - minValue);
                    num17 = genRand.Next(Game1.maxTilesY - 250, Game1.maxTilesY - 20);
                }
                if (((Game1.tile[num16, num17].wall == 13) || (Game1.tile[num16, num17].wall == 14)) && !Game1.tile[num16, num17].active())
                {
                    while (!SolidTile(num16, num17) && (num17 < (Game1.maxTilesY - 20)))
                    {
                        num17++;
                    }
                    num17--;
                    int num18 = num16;
                    int num19 = num16;
                    while (!Game1.tile[num18, num17].active() && SolidTile(num18, num17 + 1))
                    {
                        num18--;
                    }
                    num18++;
                    while (!Game1.tile[num19, num17].active() && SolidTile(num19, num17 + 1))
                    {
                        num19++;
                    }
                    num19--;
                    int num20 = num19 - num18;
                    int num21 = (num19 + num18) / 2;
                    if ((!Game1.tile[num21, num17].active() && ((Game1.tile[num21, num17].wall == 13) || (Game1.tile[num21, num17].wall == 14))) && SolidTile(num21, num17 + 1))
                    {
                        int style = 0x10;
                        int num23 = 13;
                        int num24 = 14;
                        int num25 = 0x31;
                        int num26 = 4;
                        int num27 = 8;
                        int num28 = 15;
                        int num29 = 9;
                        int num30 = 10;
                        int num31 = 0x11;
                        int num32 = 0x19;
                        int num33 = 0x19;
                        int num34 = 0x17;
                        int num35 = 0x19;
                        int num36 = genRand.Next(13);
                        int num37 = 0;
                        int num38 = 0;
                        switch (num36)
                        {
                            case 0:
                                num37 = 5;
                                num38 = 4;
                                break;

                            case 1:
                                num37 = 4;
                                num38 = 3;
                                break;

                            case 2:
                                num37 = 3;
                                num38 = 5;
                                break;

                            case 3:
                                num37 = 4;
                                num38 = 6;
                                break;

                            case 4:
                                num37 = 3;
                                num38 = 3;
                                break;

                            case 5:
                                num37 = 5;
                                num38 = 3;
                                break;

                            case 6:
                                num37 = 5;
                                num38 = 4;
                                break;

                            case 7:
                                num37 = 5;
                                num38 = 4;
                                break;

                            case 8:
                                num37 = 5;
                                num38 = 4;
                                break;

                            case 9:
                                num37 = 3;
                                num38 = 5;
                                break;

                            case 10:
                                num37 = 5;
                                num38 = 3;
                                break;

                            case 11:
                                num37 = 2;
                                num38 = 4;
                                break;

                            case 12:
                                num37 = 3;
                                num38 = 3;
                                break;
                        }
                        for (int num39 = num21 - num37; num39 <= (num21 + num37); num39++)
                        {
                            for (int num40 = num17 - num38; num40 <= num17; num40++)
                            {
                                if (Game1.tile[num39, num40].active())
                                {
                                    num36 = -1;
                                    break;
                                }
                            }
                        }
                        if (num20 < (num37 * 1.75))
                        {
                            num36 = -1;
                        }
                        if (num36 == 0)
                        {
                            PlaceTile(num21, num17, 14, true, false, -1, num23);
                            int num41 = genRand.Next(6);
                            if (num41 < 3)
                            {
                                PlaceTile(num21 + num41, num17 - 2, 0x21, true, false, -1, num33);
                            }
                            if (Game1.tile[num21, num17].active())
                            {
                                if (!Game1.tile[num21 - 2, num17].active())
                                {
                                    PlaceTile(num21 - 2, num17, 15, true, false, -1, style);
                                    if (Game1.tile[num21 - 2, num17].active())
                                    {
                                        Tile tile1 = Game1.tile[num21 - 2, num17];
                                        tile1.frameX = (short)(tile1.frameX + 0x12);
                                        Tile tile2 = Game1.tile[num21 - 2, num17 - 1];
                                        tile2.frameX = (short)(tile2.frameX + 0x12);
                                    }
                                }
                                if (!Game1.tile[num21 + 2, num17].active())
                                {
                                    PlaceTile(num21 + 2, num17, 15, true, false, -1, style);
                                }
                            }
                        }
                        else if (num36 == 1)
                        {
                            PlaceTile(num21, num17, 0x12, true, false, -1, num24);
                            int num42 = genRand.Next(4);
                            if (num42 < 2)
                            {
                                PlaceTile(num21 + num42, num17 - 1, 0x21, true, false, -1, num33);
                            }
                            if (Game1.tile[num21, num17].active())
                            {
                                if (genRand.Next(2) == 0)
                                {
                                    if (!Game1.tile[num21 - 1, num17].active())
                                    {
                                        PlaceTile(num21 - 1, num17, 15, true, false, -1, style);
                                        if (Game1.tile[num21 - 1, num17].active())
                                        {
                                            Tile tile3 = Game1.tile[num21 - 1, num17];
                                            tile3.frameX = (short)(tile3.frameX + 0x12);
                                            Tile tile4 = Game1.tile[num21 - 1, num17 - 1];
                                            tile4.frameX = (short)(tile4.frameX + 0x12);
                                        }
                                    }
                                }
                                else if (!Game1.tile[num21 + 2, num17].active())
                                {
                                    PlaceTile(num21 + 2, num17, 15, true, false, -1, style);
                                }
                            }
                        }
                        else if (num36 == 2)
                        {
                            PlaceTile(num21, num17, 0x69, true, false, -1, num25);
                        }
                        else if (num36 == 3)
                        {
                            PlaceTile(num21, num17, 0x65, true, false, -1, num26);
                        }
                        else if (num36 == 4)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                PlaceTile(num21, num17, 15, true, false, -1, style);
                                Tile tile5 = Game1.tile[num21, num17];
                                tile5.frameX = (short)(tile5.frameX + 0x12);
                                Tile tile6 = Game1.tile[num21, num17 - 1];
                                tile6.frameX = (short)(tile6.frameX + 0x12);
                            }
                            else
                            {
                                PlaceTile(num21, num17, 15, true, false, -1, style);
                            }
                        }
                        else if (num36 == 5)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                Place4x2(num21, num17, 0x4f, 1, num27);
                            }
                            else
                            {
                                Place4x2(num21, num17, 0x4f, -1, num27);
                            }
                        }
                        else if (num36 == 6)
                        {
                            PlaceTile(num21, num17, 0x57, true, false, -1, num28);
                        }
                        else if (num36 == 7)
                        {
                            PlaceTile(num21, num17, 0x58, true, false, -1, num29);
                        }
                        else if (num36 == 8)
                        {
                            PlaceTile(num21, num17, 0x59, true, false, -1, num30);
                        }
                        else if (num36 == 9)
                        {
                            PlaceTile(num21, num17, 0x68, true, false, -1, num31);
                        }
                        else if (num36 == 10)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                Place4x2(num21, num17, 90, 1, num35);
                            }
                            else
                            {
                                Place4x2(num21, num17, 90, -1, num35);
                            }
                        }
                        else if (num36 == 11)
                        {
                            PlaceTile(num21, num17, 0x5d, true, false, -1, num34);
                        }
                        else if (num36 == 12)
                        {
                            PlaceTile(num21, num17, 100, true, false, -1, num32);
                        }
                    }
                }
            }
            num14 = 420000f / ((float)Game1.maxTilesX);
            for (int m = 0; m < num14; m++)
            {
                int x = genRand.Next(minValue, Game1.maxTilesX - minValue);
                int y = genRand.Next(Game1.maxTilesY - 250, Game1.maxTilesY - 20);
                while (((Game1.tile[x, y].wall != 13) && (Game1.tile[x, y].wall != 14)) || Game1.tile[x, y].active())
                {
                    x = genRand.Next(minValue, Game1.maxTilesX - minValue);
                    y = genRand.Next(Game1.maxTilesY - 250, Game1.maxTilesY - 20);
                }
                int num46 = x;
                int num47 = x;
                int num48 = y;
                int num49 = y;
                int num50 = 0;
                int num51 = 0;
                for (int num52 = 0; num52 < 2; num52++)
                {
                    num46 = x;
                    num47 = x;
                    while (!Game1.tile[num46, y].active() && ((Game1.tile[num46, y].wall == 13) || (Game1.tile[num46, y].wall == 14)))
                    {
                        num46--;
                    }
                    num46++;
                    while (!Game1.tile[num47, y].active() && ((Game1.tile[num47, y].wall == 13) || (Game1.tile[num47, y].wall == 14)))
                    {
                        num47++;
                    }
                    num47--;
                    x = (num46 + num47) / 2;
                    num48 = y;
                    num49 = y;
                    while (!Game1.tile[x, num48].active() && ((Game1.tile[x, num48].wall == 13) || (Game1.tile[x, num48].wall == 14)))
                    {
                        num48--;
                    }
                    num48++;
                    while (!Game1.tile[x, num49].active() && ((Game1.tile[x, num49].wall == 13) || (Game1.tile[x, num49].wall == 14)))
                    {
                        num49++;
                    }
                    num49--;
                    y = (num48 + num49) / 2;
                }
                num46 = x;
                num47 = x;
                while ((!Game1.tile[num46, y].active() && !Game1.tile[num46, y - 1].active()) && !Game1.tile[num46, y + 1].active())
                {
                    num46--;
                }
                num46++;
                while ((!Game1.tile[num47, y].active() && !Game1.tile[num47, y - 1].active()) && !Game1.tile[num47, y + 1].active())
                {
                    num47++;
                }
                num47--;
                num48 = y;
                num49 = y;
                while ((!Game1.tile[x, num48].active() && !Game1.tile[x - 1, num48].active()) && !Game1.tile[x + 1, num48].active())
                {
                    num48--;
                }
                num48++;
                while ((!Game1.tile[x, num49].active() && !Game1.tile[x - 1, num49].active()) && !Game1.tile[x + 1, num49].active())
                {
                    num49++;
                }
                num49--;
                x = (num46 + num47) / 2;
                y = (num48 + num49) / 2;
                num50 = num47 - num46;
                num51 = num49 - num48;
                if ((num50 > 7) && (num51 > 5))
                {
                    int num53 = 0;
                    if (nearPicture2(x, y))
                    {
                        num53 = -1;
                    }
                    if (num53 == 0)
                    {
                        Vector2 vector = randHellPicture();
                        int type = (int)vector.X;
                        int num55 = (int)vector.Y;
                        if (!nearPicture(x, y))
                        {
                            PlaceTile(x, y, type, true, false, -1, num55);
                        }
                    }
                }
            }
            int[] numArray = new int[] { genRand.Next(0x10, 0x16), genRand.Next(0x10, 0x16), genRand.Next(0x10, 0x16) };
            while (numArray[1] == numArray[0])
            {
                numArray[1] = genRand.Next(0x10, 0x16);
            }
            while ((numArray[2] == numArray[0]) || (numArray[2] == numArray[1]))
            {
                numArray[2] = genRand.Next(0x10, 0x16);
            }
            num14 = 420000f / ((float)Game1.maxTilesX);
            int num56 = 0;
            goto Label_10AD;
        Label_0FAB:
            num64 = num57 - 1;
            while (num64 <= (num57 + num62))
            {
                for (int num65 = num58; num65 <= (num58 + num63); num65++)
                {
                    Tile tile = Game1.tile[num57, num58];
                    if ((num64 >= num57) && (num64 != (num57 + num62)))
                    {
                        goto Label_101E;
                    }
                    if (tile.active())
                    {
                        switch (tile.type)
                        {
                            case 0x2a:
                            case 0x5b:
                            case 10:
                            case 11:
                            case 0x22:
                                goto Label_1019;
                        }
                    }
                    continue;
                Label_1019:
                    num59 = -1;
                    continue;
                Label_101E:
                    if (tile.active())
                    {
                        num59 = -1;
                    }
                }
                num64++;
            }
            switch (num59)
            {
                case 0:
                    PlaceTile(num57, num58, 0x5b, true, false, -1, numArray[genRand.Next(3)]);
                    break;

                case 1:
                    PlaceTile(num57, num58, 0x22, true, false, -1, num60);
                    break;

                case 2:
                    PlaceTile(num57, num58, 0x2a, true, false, -1, num61);
                    break;
            }
        Label_10A7:
            num56++;
        Label_10AD:
            if (num56 < num14)
            {
                do
                {
                    num57 = genRand.Next(minValue, Game1.maxTilesX - minValue);
                    num58 = genRand.Next(Game1.maxTilesY - 250, Game1.maxTilesY - 20);
                }
                while (((Game1.tile[num57, num58].wall != 13) && (Game1.tile[num57, num58].wall != 14)) || Game1.tile[num57, num58].active());
                while (!SolidTile(num57, num58) && (num58 > 10))
                {
                    num58--;
                }
                num58++;
                if ((Game1.tile[num57, num58].wall != 13) && (Game1.tile[num57, num58].wall != 14))
                {
                    goto Label_10A7;
                }
                num59 = genRand.Next(3);
                num60 = 0x20;
                num61 = 0x20;
                switch (num59)
                {
                    case 1:
                        num62 = 3;
                        num63 = 3;
                        goto Label_0FAB;

                    case 2:
                        num62 = 1;
                        num63 = 2;
                        goto Label_0FAB;
                }
                num62 = 1;
                num63 = 3;
                goto Label_0FAB;
            }
        }

        public static bool AddLifeCrystal(int i, int j)
        {
            for (int k = j; k < Game1.maxTilesY; k++)
            {
                if (Game1.tile[i, k].active() && Game1.tileSolid[Game1.tile[i, k].type])
                {
                    int endX = i;
                    int endY = k - 1;
                    if (Game1.tile[endX, endY - 1].lava() || Game1.tile[endX - 1, endY - 1].lava())
                    {
                        return false;
                    }
                    if (!EmptyTileCheck(endX - 1, endX, endY - 1, endY, -1))
                    {
                        return false;
                    }
                    if (Game1.wallDungeon[Game1.tile[endX, endY].wall])
                    {
                        return false;
                    }
                    Tile tile = Game1.tile[endX - 1, endY + 1];
                    Tile tile2 = Game1.tile[endX, endY + 1];
                    if (!tile.nactive() || !Game1.tileSolid[tile.type])
                    {
                        return false;
                    }
                    if (!tile2.nactive() || !Game1.tileSolid[tile2.type])
                    {
                        return false;
                    }
                    if (tile.blockType() != 0)
                    {
                        tile.slope(0);
                        tile.halfBrick(false);
                    }
                    if (tile2.blockType() != 0)
                    {
                        tile2.slope(0);
                        tile2.halfBrick(false);
                    }
                    Game1.tile[endX - 1, endY - 1].active(true);
                    Game1.tile[endX - 1, endY - 1].type = 12;
                    Game1.tile[endX - 1, endY - 1].frameX = 0;
                    Game1.tile[endX - 1, endY - 1].frameY = 0;
                    Game1.tile[endX, endY - 1].active(true);
                    Game1.tile[endX, endY - 1].type = 12;
                    Game1.tile[endX, endY - 1].frameX = 0x12;
                    Game1.tile[endX, endY - 1].frameY = 0;
                    Game1.tile[endX - 1, endY].active(true);
                    Game1.tile[endX - 1, endY].type = 12;
                    Game1.tile[endX - 1, endY].frameX = 0;
                    Game1.tile[endX - 1, endY].frameY = 0x12;
                    Game1.tile[endX, endY].active(true);
                    Game1.tile[endX, endY].type = 12;
                    Game1.tile[endX, endY].frameX = 0x12;
                    Game1.tile[endX, endY].frameY = 0x12;
                    return true;
                }
            }
            return false;
        }

        public static void AddPlants()
        {
            for (int i = 0; i < Game1.maxTilesX; i++)
            {
                for (int j = 1; j < Game1.maxTilesY; j++)
                {
                    if ((Game1.tile[i, j].type == 2) && Game1.tile[i, j].nactive())
                    {
                        if (!Game1.tile[i, j - 1].active())
                        {
                            PlaceTile(i, j - 1, 3, true, false, -1, 0);
                        }
                    }
                    else if ((Game1.tile[i, j].type == 0x17) && Game1.tile[i, j].nactive())
                    {
                        if (!Game1.tile[i, j - 1].active())
                        {
                            PlaceTile(i, j - 1, 0x18, true, false, -1, 0);
                        }
                    }
                    else if (((Game1.tile[i, j].type == 0xc7) && Game1.tile[i, j].nactive()) && !Game1.tile[i, j - 1].active())
                    {
                        PlaceTile(i, j - 1, 0xc9, true, false, -1, 0);
                    }
                }
            }
        }

        public static void AddShadowOrb(int x, int y)
        {
            if (((x >= 10) && (x <= (Game1.maxTilesX - 10))) && ((y >= 10) && (y <= (Game1.maxTilesY - 10))))
            {
                for (int i = x - 1; i < (x + 1); i++)
                {
                    for (int j = y - 1; j < (y + 1); j++)
                    {
                        if (Game1.tile[i, j].active() && (Game1.tile[i, j].type == 0x1f))
                        {
                            return;
                        }
                    }
                }
                short num3 = 0;
                if (crimson)
                {
                    num3 = (short)(num3 + 0x24);
                }
                Game1.tile[x - 1, y - 1].active(true);
                Game1.tile[x - 1, y - 1].type = 0x1f;
                Game1.tile[x - 1, y - 1].frameX = num3;
                Game1.tile[x - 1, y - 1].frameY = 0;
                Game1.tile[x, y - 1].active(true);
                Game1.tile[x, y - 1].type = 0x1f;
                Game1.tile[x, y - 1].frameX = (short)(0x12 + num3);
                Game1.tile[x, y - 1].frameY = 0;
                Game1.tile[x - 1, y].active(true);
                Game1.tile[x - 1, y].type = 0x1f;
                Game1.tile[x - 1, y].frameX = num3;
                Game1.tile[x - 1, y].frameY = 0x12;
                Game1.tile[x, y].active(true);
                Game1.tile[x, y].type = 0x1f;
                Game1.tile[x, y].frameX = (short)(0x12 + num3);
                Game1.tile[x, y].frameY = 0x12;
            }
        }

        public static void AddTrees()
        {
            for (int i = 1; i < (Game1.maxTilesX - 1); i++)
            {
                for (int j = 20; j < Game1.worldSurface; j++)
                {
                    GrowTree(i, j);
                    if (((i < 380) || (i > (Game1.maxTilesX - 380))) && (genRand.Next(3) == 0))
                    {
                        GrowPalmTree(i, j);
                    }
                }
                if (genRand.Next(3) == 0)
                {
                    i++;
                }
                if (genRand.Next(4) == 0)
                {
                    i++;
                }
            }
        }

        public static void AddUpAlignmentCounts(bool clearCounts = false)
        {
            if (clearCounts)
            {
                totalEvil2 = 0;
                totalSolid2 = 0;
                totalGood2 = 0;
                totalBlood2 = 0;
            }
            totalGood2 += ((tileCounts[0xa4] + tileCounts[0x6d]) + tileCounts[0x75]) + tileCounts[0x74];
            totalEvil2 += ((tileCounts[0x17] + tileCounts[0xa3]) + tileCounts[0x70]) + tileCounts[0x19];
            totalBlood2 += ((tileCounts[0xc7] + tileCounts[0xea]) + tileCounts[0xcb]) + tileCounts[200];
            totalSolid2 += (((tileCounts[2] + tileCounts[1]) + tileCounts[60]) + tileCounts[0x35]) + tileCounts[0xa1];
            totalSolid2 += ((tileCounts[0xa4] + tileCounts[0x6d]) + tileCounts[0x75]) + tileCounts[0x74];
            totalSolid2 += ((tileCounts[0x17] + tileCounts[0xa3]) + tileCounts[0x70]) + tileCounts[0x19];
            totalSolid2 += ((tileCounts[0xc7] + tileCounts[0xea]) + tileCounts[0xcb]) + tileCounts[200];
            Array.Clear(tileCounts, 0, tileCounts.Length);
        }

        public static bool AnchorValid(Tile tileCache, AnchorType anchor)
        {
            bool flag = false;
            if (tileCache.nactive())
            {
                if (((((anchor & AnchorType.SolidTile) == AnchorType.SolidTile) && Game1.tileSolid[tileCache.type]) && (!Game1.tileSolidTop[tileCache.type] && !Game1.tileNoAttach[tileCache.type])) && (tileCache.blockType() == 0))
                {
                    flag = true;
                }
                if (((((anchor & AnchorType.SolidBottom) == AnchorType.SolidBottom) && !Game1.tileNoAttach[tileCache.type]) && ((Game1.tileSolid[tileCache.type] && (!Game1.tileSolidTop[tileCache.type] || ((tileCache.type == 0x13) && (tileCache.halfBrick() || tileCache.topSlope())))) || (tileCache.topSlope() || tileCache.halfBrick()))) && (!TileID.Sets.NotReallySolid[tileCache.type] && !tileCache.bottomSlope()))
                {
                    flag = true;
                }
                if (!flag && (((anchor & AnchorType.SolidWithTop) == AnchorType.SolidWithTop) || ((anchor & AnchorType.Table) == AnchorType.Table)))
                {
                    if (tileCache.type == 0x13)
                    {
                        int num = tileCache.frameX / TileObjectData.PlatformFrameWidth();
                        if ((((!tileCache.halfBrick() && (num >= 0)) && (num <= 7)) || ((num >= 12) && (num <= 0x10))) || ((num >= 0x19) && (num <= 0x1a)))
                        {
                            flag = true;
                        }
                    }
                    else if (Game1.tileSolid[tileCache.type] && Game1.tileSolidTop[tileCache.type])
                    {
                        flag = true;
                    }
                }
                if (((!flag && ((anchor & AnchorType.Table) == AnchorType.Table)) && ((tileCache.type != 0x13) && Game1.tileTable[tileCache.type])) && (tileCache.blockType() == 0))
                {
                    flag = true;
                }
                if ((!flag && ((anchor & AnchorType.SolidSide) == AnchorType.SolidSide)) && (Game1.tileSolid[tileCache.type] && !Game1.tileSolidTop[tileCache.type]))
                {
                    switch (tileCache.blockType())
                    {
                        case 4:
                        case 5:
                            return true;
                    }
                }
                return flag;
            }
            if (!flag && ((anchor & AnchorType.EmptyTile) == AnchorType.EmptyTile))
            {
                flag = true;
            }
            return flag;
        }

        public static void BroadcastText(string text, Color color)
        {
            BroadcastText(text, color.R, color.G, color.B);
        }

        public static void BroadcastText(string text, Vector3 color)
        {
            BroadcastText(text, new Color(color));
        }

        public static void BroadcastText(string text, Vector4 color)
        {
            BroadcastText(text, new Color(color));
        }

        public static void BroadcastText(string text, byte r, byte g, byte b)
        {
            if (Game1.netMode == 0)
            {
                Game1.NewText(text, r, g, b, false);
            }
            else if (Game1.netMode == 2)
            {
                NetMessage.SendData(0x19, -1, -1, text, 0xff, (float)r, (float)g, (float)b, 0, 0, 0);
            }
        }

        public static void BroadcastText(string text, int r, int g, int b)
        {
            BroadcastText(text, (byte)r, (byte)g, (byte)b);
        }

        public static void CactusFrame(int i, int j)
        {
            try
            {
                int num = j;
                int num2 = i;
                if (!CheckCactus(i, j))
                {
                    goto Label_011F;
                }
                return;
            Label_0015:
                num++;
                if (Game1.tile[num2, num] == null)
                {
                    return;
                }
                if (!Game1.tile[num2, num].active() || (Game1.tile[num2, num].type != 80))
                {
                    if (((Game1.tile[num2 - 1, num].active() && (Game1.tile[num2 - 1, num].type == 80)) && (Game1.tile[num2 - 1, num - 1].active() && (Game1.tile[num2 - 1, num - 1].type == 80))) && (num2 >= i))
                    {
                        num2--;
                    }
                    if (((Game1.tile[num2 + 1, num].active() && (Game1.tile[num2 + 1, num].type == 80)) && (Game1.tile[num2 + 1, num - 1].active() && (Game1.tile[num2 + 1, num - 1].type == 80))) && (num2 <= i))
                    {
                        num2++;
                    }
                }
            Label_011F:
                if (Game1.tile[num2, num].active() && (Game1.tile[num2, num].type == 80))
                {
                    goto Label_0015;
                }
                num--;
                int num3 = i - num2;
                num2 = i;
                num = j;
                if (Game1.tile[i - 2, j] != null)
                {
                    int type = Game1.tile[i - 2, j].type;
                    if (Game1.tile[i - 1, j] != null)
                    {
                        int num5 = Game1.tile[i - 1, j].type;
                        if (Game1.tile[i + 1, j] != null)
                        {
                            int num6 = Game1.tile[i + 1, j].type;
                            int num7 = Game1.tile[i, j - 1].type;
                            if (num7 == 0xe3)
                            {
                                num7 = 80;
                            }
                            int index = Game1.tile[i, j + 1].type;
                            int num9 = Game1.tile[i - 1, j + 1].type;
                            int num10 = Game1.tile[i + 1, j + 1].type;
                            if (!Game1.tile[i - 1, j].active())
                            {
                                num5 = -1;
                            }
                            if (!Game1.tile[i + 1, j].active())
                            {
                                num6 = -1;
                            }
                            if (!Game1.tile[i, j - 1].active())
                            {
                                num7 = -1;
                            }
                            if (!Game1.tile[i, j + 1].active())
                            {
                                index = -1;
                            }
                            if (!Game1.tile[i - 1, j + 1].active())
                            {
                                num9 = -1;
                            }
                            if (!Game1.tile[i + 1, j + 1].active())
                            {
                                num10 = -1;
                            }
                            short frameX = Game1.tile[i, j].frameX;
                            short frameY = Game1.tile[i, j].frameY;
                            switch (num3)
                            {
                                case 0:
                                    if (num7 == 80)
                                    {
                                        if ((((num5 == 80) && (num6 == 80)) && ((num9 != 80) && (num10 != 80))) && (type != 80))
                                        {
                                            frameX = 90;
                                            frameY = 0x24;
                                        }
                                        else if (((num5 == 80) && (num9 != 80)) && (type != 80))
                                        {
                                            frameX = 0x48;
                                            frameY = 0x24;
                                        }
                                        else if ((num6 == 80) && (num10 != 80))
                                        {
                                            frameX = 0x12;
                                            frameY = 0x24;
                                        }
                                        else if ((index >= 0) && Game1.tileSolid[index])
                                        {
                                            frameX = 0;
                                            frameY = 0x24;
                                        }
                                        else
                                        {
                                            frameX = 0;
                                            frameY = 0x12;
                                        }
                                    }
                                    else if ((((num5 == 80) && (num6 == 80)) && ((num9 != 80) && (num10 != 80))) && (type != 80))
                                    {
                                        frameX = 90;
                                        frameY = 0;
                                    }
                                    else if (((num5 == 80) && (num9 != 80)) && (type != 80))
                                    {
                                        frameX = 0x48;
                                        frameY = 0;
                                    }
                                    else if ((num6 == 80) && (num10 != 80))
                                    {
                                        frameX = 0x12;
                                        frameY = 0;
                                    }
                                    else
                                    {
                                        frameX = 0;
                                        frameY = 0;
                                    }
                                    break;

                                case -1:
                                    if (num6 == 80)
                                    {
                                        if ((num7 != 80) && (index != 80))
                                        {
                                            frameX = 0x6c;
                                            frameY = 0x24;
                                        }
                                        else if (index != 80)
                                        {
                                            frameX = 0x36;
                                            frameY = 0x24;
                                        }
                                        else if (num7 != 80)
                                        {
                                            frameX = 0x36;
                                            frameY = 0;
                                        }
                                        else
                                        {
                                            frameX = 0x36;
                                            frameY = 0x12;
                                        }
                                    }
                                    else if (num7 != 80)
                                    {
                                        frameX = 0x36;
                                        frameY = 0;
                                    }
                                    else
                                    {
                                        frameX = 0x36;
                                        frameY = 0x12;
                                    }
                                    break;

                                case 1:
                                    if (num5 == 80)
                                    {
                                        if ((num7 != 80) && (index != 80))
                                        {
                                            frameX = 0x6c;
                                            frameY = 0x12;
                                        }
                                        else if (index != 80)
                                        {
                                            frameX = 0x24;
                                            frameY = 0x24;
                                        }
                                        else if (num7 != 80)
                                        {
                                            frameX = 0x24;
                                            frameY = 0;
                                        }
                                        else
                                        {
                                            frameX = 0x24;
                                            frameY = 0x12;
                                        }
                                    }
                                    else if (num7 != 80)
                                    {
                                        frameX = 0x24;
                                        frameY = 0;
                                    }
                                    else
                                    {
                                        frameX = 0x24;
                                        frameY = 0x12;
                                    }
                                    break;
                            }
                            if ((frameX != Game1.tile[i, j].frameX) || (frameY != Game1.tile[i, j].frameY))
                            {
                                Game1.tile[i, j].frameX = frameX;
                                Game1.tile[i, j].frameY = frameY;
                                DiamondTileFrame(i, j);
                            }
                        }
                    }
                }
            }
            catch
            {
                Game1.tile[i, j].frameX = 0;
                Game1.tile[i, j].frameY = 0;
            }
        }

        public static bool CanKillTile(int i, int j)
        {
            bool flag;
            return CanKillTile(i, j, out flag);
        }

        public static bool CanKillTile(int i, int j, out bool blockDamaged)
        {
            blockDamaged = false;
            if (((i < 0) || (j < 0)) || ((i >= Game1.maxTilesX) || (j >= Game1.maxTilesY)))
            {
                return false;
            }
            Tile tile = Game1.tile[i, j];
            Tile tile2 = null;
            if (tile == null)
            {
                return false;
            }
            if (!tile.active())
            {
                return false;
            }
            if (j >= 1)
            {
                tile2 = Game1.tile[i, j - 1];
            }
            if ((tile2 != null) && tile2.active())
            {
                int type = tile2.type;
                switch (type)
                {
                    case 0x48:
                    case 0x58:
                    case 0x15:
                    case 0x1a:
                        if (tile.type != type)
                        {
                            return false;
                        }
                        break;

                    case 0x143:
                        if ((tile.type == type) || ((tile2.frameX != 0x42) && (tile2.frameX != 220)))
                        {
                            break;
                        }
                        return false;

                    case 5:
                        if ((((tile.type == type) || (((tile2.frameX == 0x42) && (tile2.frameY >= 0)) && (tile2.frameY <= 0x2c))) || (((tile2.frameX == 0x58) && (tile2.frameY >= 0x42)) && (tile2.frameY <= 110))) || (tile2.frameY >= 0xc6))
                        {
                            break;
                        }
                        return false;
                }
            }
            switch (tile.type)
            {
                case 0x58:
                    if (!Chest.CanDestroyChest(i - ((tile.frameX / 0x12) % 3), j - (tile.frameY / 0x12)))
                    {
                        return false;
                    }
                    break;

                case 0x8a:
                    if (!CheckBoulderChest(i, j))
                    {
                        break;
                    }
                    blockDamaged = true;
                    return false;

                case 0xeb:
                    {
                        int num2 = i - ((tile.frameX % 0x36) / 0x12);
                        for (int k = 0; k < 3; k++)
                        {
                            if (Game1.tile[num2 + k, j - 1].active() && (Game1.tile[num2 + k, j - 1].type == 0x15))
                            {
                                blockDamaged = true;
                                return false;
                            }
                        }
                        break;
                    }
                case 10:
                    if (((tile.type != 10) || (tile.frameY < 0x252)) || (tile.frameY > 0x286))
                    {
                        break;
                    }
                    blockDamaged = true;
                    return false;

                case 0x15:
                    if (!Chest.CanDestroyChest(i - ((tile.frameX / 0x12) % 2), j - (tile.frameY / 0x12)))
                    {
                        return false;
                    }
                    break;
            }
            return true;
        }

        public static bool CanPlaceSink(int x, int y, ushort type, int style)
        {
            if (((x < 5) || (x > (Game1.maxTilesX - 5))) || ((y < 5) || (y > (Game1.maxTilesY - 5))))
            {
                return false;
            }
            bool flag = true;
            x--;
            y--;
            for (int i = 0; i < 2; i++)
            {
                for (int j = 0; j < 2; j++)
                {
                    if (Framing.GetTileSafely(x + i, y + j).active())
                    {
                        flag = false;
                    }
                }
                Tile tileSafely = Framing.GetTileSafely(x + i, y + 2);
                if (!tileSafely.nactive() || !SolidTile(tileSafely))
                {
                    flag = false;
                }
            }
            return flag;
        }

        public static void CaveOpenater(int i, int j)
        {
            Vector2 vector;
            Vector2 vector2;
            double num5 = genRand.Next(7, 12);
            double num6 = num5;
            int num7 = 1;
            if (genRand.Next(2) == 0)
            {
                num7 = -1;
            }
            vector.X = i;
            vector.Y = j;
            int num8 = 100;
            vector2.Y = 0f;
            vector2.X = num7;
            while (num8 > 0)
            {
                if (Game1.tile[(int)vector.X, (int)vector.Y].wall == 0)
                {
                    num8 = 0;
                }
                num8--;
                int num = (int)(vector.X - (num5 * 0.5));
                int maxTilesX = (int)(vector.X + (num5 * 0.5));
                int num2 = (int)(vector.Y - (num5 * 0.5));
                int maxTilesY = (int)(vector.Y + (num5 * 0.5));
                if (num < 0)
                {
                    num = 0;
                }
                if (maxTilesX > Game1.maxTilesX)
                {
                    maxTilesX = Game1.maxTilesX;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                num6 = (num5 * genRand.Next(80, 120)) * 0.01;
                for (int k = num; k < maxTilesX; k++)
                {
                    for (int m = num2; m < maxTilesY; m++)
                    {
                        float num11 = Math.Abs((float)(k - vector.X));
                        float num12 = Math.Abs((float)(m - vector.Y));
                        if (Math.Sqrt((double)((num11 * num11) + (num12 * num12))) < (num6 * 0.4))
                        {
                            Game1.tile[k, m].active(false);
                        }
                    }
                }
                vector += vector2;
                vector2.X += genRand.Next(-10, 11) * 0.05f;
                vector2.Y += genRand.Next(-10, 11) * 0.05f;
                if (vector2.X > (num7 + 0.5f))
                {
                    vector2.X = num7 + 0.5f;
                }
                if (vector2.X < (num7 - 0.5f))
                {
                    vector2.X = num7 - 0.5f;
                }
                if (vector2.Y > 0f)
                {
                    vector2.Y = 0f;
                }
                if (vector2.Y < -0.5)
                {
                    vector2.Y = -0.5f;
                }
            }
        }

        public static void Caverer(int X, int Y)
        {
            switch (genRand.Next(2))
            {
                case 0:
                    {
                        int num2 = genRand.Next(7, 9);
                        float xDir = genRand.Next(100) * 0.01f;
                        float yDir = 1f - xDir;
                        if (genRand.Next(2) == 0)
                        {
                            xDir = -xDir;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            yDir = -yDir;
                        }
                        Vector2 vector = new Vector2((float)X, (float)Y);
                        for (int i = 0; i < num2; i++)
                        {
                            vector = digTunnel(vector.X, vector.Y, xDir, yDir, genRand.Next(6, 20), genRand.Next(4, 9), false);
                            xDir += genRand.Next(-20, 0x15) * 0.1f;
                            yDir += genRand.Next(-20, 0x15) * 0.1f;
                            if (xDir < -1.5)
                            {
                                xDir = -1.5f;
                            }
                            if (xDir > 1.5)
                            {
                                xDir = 1.5f;
                            }
                            if (yDir < -1.5)
                            {
                                yDir = -1.5f;
                            }
                            if (yDir > 1.5)
                            {
                                yDir = 1.5f;
                            }
                            float num6 = genRand.Next(100) * 0.01f;
                            float num7 = 1f - num6;
                            if (genRand.Next(2) == 0)
                            {
                                num6 = -num6;
                            }
                            if (genRand.Next(2) == 0)
                            {
                                num7 = -num7;
                            }
                            Vector2 vector2 = digTunnel(vector.X, vector.Y, num6, num7, genRand.Next(30, 50), genRand.Next(3, 6), false);
                            TileRunner((int)vector2.X, (int)vector2.Y, (double)genRand.Next(10, 20), genRand.Next(5, 10), -1, false, 0f, 0f, false, true);
                        }
                        return;
                    }
                case 1:
                    {
                        int num8 = genRand.Next(15, 30);
                        float num9 = genRand.Next(100) * 0.01f;
                        float num10 = 1f - num9;
                        if (genRand.Next(2) == 0)
                        {
                            num9 = -num9;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            num10 = -num10;
                        }
                        Vector2 vector3 = new Vector2((float)X, (float)Y);
                        for (int j = 0; j < num8; j++)
                        {
                            vector3 = digTunnel(vector3.X, vector3.Y, num9, num10, genRand.Next(5, 15), genRand.Next(2, 6), true);
                            num9 += genRand.Next(-20, 0x15) * 0.1f;
                            num10 += genRand.Next(-20, 0x15) * 0.1f;
                            if (num9 < -1.5)
                            {
                                num9 = -1.5f;
                            }
                            if (num9 > 1.5)
                            {
                                num9 = 1.5f;
                            }
                            if (num10 < -1.5)
                            {
                                num10 = -1.5f;
                            }
                            if (num10 > 1.5)
                            {
                                num10 = 1.5f;
                            }
                        }
                        break;
                    }
            }
        }

        public static void Cavinator(int i, int j, int steps)
        {
            Vector2 vector;
            Vector2 vector2;
            double num5 = genRand.Next(7, 15);
            double num6 = num5;
            int num7 = 1;
            if (genRand.Next(2) == 0)
            {
                num7 = -1;
            }
            vector.X = i;
            vector.Y = j;
            int num8 = genRand.Next(20, 40);
            vector2.Y = genRand.Next(10, 20) * 0.01f;
            vector2.X = num7;
            while (num8 > 0)
            {
                num8--;
                int num = (int)(vector.X - (num5 * 0.5));
                int maxTilesX = (int)(vector.X + (num5 * 0.5));
                int num2 = (int)(vector.Y - (num5 * 0.5));
                int maxTilesY = (int)(vector.Y + (num5 * 0.5));
                if (num < 0)
                {
                    num = 0;
                }
                if (maxTilesX > Game1.maxTilesX)
                {
                    maxTilesX = Game1.maxTilesX;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                num6 = (num5 * genRand.Next(80, 120)) * 0.01;
                for (int k = num; k < maxTilesX; k++)
                {
                    for (int m = num2; m < maxTilesY; m++)
                    {
                        float num11 = Math.Abs((float)(k - vector.X));
                        float num12 = Math.Abs((float)(m - vector.Y));
                        if ((Math.Sqrt((double)((num11 * num11) + (num12 * num12))) < (num6 * 0.4)) && TileID.Sets.CanBeClearedDuringGeneration[Game1.tile[k, m].type])
                        {
                            Game1.tile[k, m].active(false);
                        }
                    }
                }
                vector += vector2;
                vector2.X += genRand.Next(-10, 11) * 0.05f;
                vector2.Y += genRand.Next(-10, 11) * 0.05f;
                if (vector2.X > (num7 + 0.5f))
                {
                    vector2.X = num7 + 0.5f;
                }
                if (vector2.X < (num7 - 0.5f))
                {
                    vector2.X = num7 - 0.5f;
                }
                if (vector2.Y > 2f)
                {
                    vector2.Y = 2f;
                }
                if (vector2.Y < 0f)
                {
                    vector2.Y = 0f;
                }
            }
            if ((steps > 0) && (((int)vector.Y) < (Game1.rockLayer + 50.0)))
            {
                Cavinator((int)vector.X, (int)vector.Y, steps - 1);
            }
        }

        public static void ChasmRunner(int i, int j, int steps, bool makeOrb = false)
        {
            Vector2 vector;
            Vector2 vector2;
            bool flag = false;
            bool flag2 = false;
            bool flag3 = false;
            if (!makeOrb)
            {
                flag2 = true;
            }
            float num5 = steps;
            vector.X = i;
            vector.Y = j;
            vector2.X = genRand.Next(-10, 11) * 0.1f;
            vector2.Y = (genRand.Next(11) * 0.2f) + 0.5f;
            int num6 = 5;
            double num7 = genRand.Next(5) + 7;
            while (num7 > 0.0)
            {
                int num;
                int num2;
                int num3;
                int maxTilesY;
                if (num5 > 0f)
                {
                    num7 += genRand.Next(3);
                    num7 -= genRand.Next(3);
                    if (num7 < 7.0)
                    {
                        num7 = 7.0;
                    }
                    if (num7 > 20.0)
                    {
                        num7 = 20.0;
                    }
                    if ((num5 == 1f) && (num7 < 10.0))
                    {
                        num7 = 10.0;
                    }
                }
                else if (vector.Y > (Game1.worldSurface + 45.0))
                {
                    num7 -= genRand.Next(4);
                }
                if ((vector.Y > Game1.rockLayer) && (num5 > 0f))
                {
                    num5 = 0f;
                }
                num5--;
                if (!flag && (vector.Y > (Game1.worldSurface + 20.0)))
                {
                    flag = true;
                    ChasmRunnerSideways((int)vector.X, (int)vector.Y, -1, genRand.Next(20, 40));
                    ChasmRunnerSideways((int)vector.X, (int)vector.Y, 1, genRand.Next(20, 40));
                }
                if (num5 > num6)
                {
                    num = (int)(vector.X - (num7 * 0.5));
                    num3 = (int)(vector.X + (num7 * 0.5));
                    num2 = (int)(vector.Y - (num7 * 0.5));
                    maxTilesY = (int)(vector.Y + (num7 * 0.5));
                    if (num < 0)
                    {
                        num = 0;
                    }
                    if (num3 > (Game1.maxTilesX - 1))
                    {
                        num3 = Game1.maxTilesX - 1;
                    }
                    if (num2 < 0)
                    {
                        num2 = 0;
                    }
                    if (maxTilesY > Game1.maxTilesY)
                    {
                        maxTilesY = Game1.maxTilesY;
                    }
                    for (int n = num; n < num3; n++)
                    {
                        for (int num9 = num2; num9 < maxTilesY; num9++)
                        {
                            if ((((Math.Abs((float)(n - vector.X)) + Math.Abs((float)(num9 - vector.Y))) < ((num7 * 0.5) * (1.0 + (genRand.Next(-10, 11) * 0.015)))) && (Game1.tile[n, num9].type != 0x1f)) && (Game1.tile[n, num9].type != 0x16))
                            {
                                Game1.tile[n, num9].active(false);
                            }
                        }
                    }
                }
                if ((num5 <= 2f) && (vector.Y < (Game1.worldSurface + 45.0)))
                {
                    num5 = 2f;
                }
                if (num5 <= 0f)
                {
                    if (!flag2)
                    {
                        flag2 = true;
                        AddShadowOrb((int)vector.X, (int)vector.Y);
                    }
                    else if (!flag3)
                    {
                        flag3 = false;
                        bool flag4 = false;
                        int num10 = 0;
                        while (!flag4)
                        {
                            int x = genRand.Next(((int)vector.X) - 0x19, ((int)vector.X) + 0x19);
                            int y = genRand.Next(((int)vector.Y) - 50, (int)vector.Y);
                            if (x < 5)
                            {
                                x = 5;
                            }
                            if (x > (Game1.maxTilesX - 5))
                            {
                                x = Game1.maxTilesX - 5;
                            }
                            if (y < 5)
                            {
                                y = 5;
                            }
                            if (y > (Game1.maxTilesY - 5))
                            {
                                y = Game1.maxTilesY - 5;
                            }
                            if (y > Game1.worldSurface)
                            {
                                Place3x2(x, y, 0x1a, 0);
                                if (Game1.tile[x, y].type == 0x1a)
                                {
                                    flag4 = true;
                                }
                                else
                                {
                                    num10++;
                                    if (num10 >= 0x2710)
                                    {
                                        flag4 = true;
                                    }
                                }
                            }
                            else
                            {
                                flag4 = true;
                            }
                        }
                    }
                }
                vector += vector2;
                vector2.X += genRand.Next(-10, 11) * 0.01f;
                if (vector2.X > 0.3)
                {
                    vector2.X = 0.3f;
                }
                if (vector2.X < -0.3)
                {
                    vector2.X = -0.3f;
                }
                num = (int)(vector.X - (num7 * 1.1));
                num3 = (int)(vector.X + (num7 * 1.1));
                num2 = (int)(vector.Y - (num7 * 1.1));
                maxTilesY = (int)(vector.Y + (num7 * 1.1));
                if (num < 1)
                {
                    num = 1;
                }
                if (num3 > (Game1.maxTilesX - 1))
                {
                    num3 = Game1.maxTilesX - 1;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                for (int k = num; k < num3; k++)
                {
                    for (int num14 = num2; num14 < maxTilesY; num14++)
                    {
                        if ((Math.Abs((float)(k - vector.X)) + Math.Abs((float)(num14 - vector.Y))) < ((num7 * 1.1) * (1.0 + (genRand.Next(-10, 11) * 0.015))))
                        {
                            if ((Game1.tile[k, num14].type != 0x19) && (num14 > (j + genRand.Next(3, 20))))
                            {
                                Game1.tile[k, num14].active(true);
                            }
                            if (steps <= num6)
                            {
                                Game1.tile[k, num14].active(true);
                            }
                            if (Game1.tile[k, num14].type != 0x1f)
                            {
                                Game1.tile[k, num14].type = 0x19;
                            }
                        }
                    }
                }
                for (int m = num; m < num3; m++)
                {
                    for (int num16 = num2; num16 < maxTilesY; num16++)
                    {
                        if ((Math.Abs((float)(m - vector.X)) + Math.Abs((float)(num16 - vector.Y))) < ((num7 * 1.1) * (1.0 + (genRand.Next(-10, 11) * 0.015))))
                        {
                            if (Game1.tile[m, num16].type != 0x1f)
                            {
                                Game1.tile[m, num16].type = 0x19;
                            }
                            if (steps <= num6)
                            {
                                Game1.tile[m, num16].active(true);
                            }
                            if (num16 > (j + genRand.Next(3, 20)))
                            {
                                Game1.tile[m, num16].wall = 3;
                            }
                        }
                    }
                }
            }
        }

        public static void ChasmRunnerSideways(int i, int j, int direction, int steps)
        {
            Vector2 vector;
            Vector2 vector2;
            float num5 = steps;
            vector.X = i;
            vector.Y = j;
            vector2.X = (genRand.Next(10, 0x15) * 0.1f) * direction;
            vector2.Y = genRand.Next(-10, 10) * 0.01f;
            double num6 = genRand.Next(5) + 7;
            while (num6 > 0.0)
            {
                if (num5 > 0f)
                {
                    num6 += genRand.Next(3);
                    num6 -= genRand.Next(3);
                    if (num6 < 7.0)
                    {
                        num6 = 7.0;
                    }
                    if (num6 > 20.0)
                    {
                        num6 = 20.0;
                    }
                    if ((num5 == 1f) && (num6 < 10.0))
                    {
                        num6 = 10.0;
                    }
                }
                else
                {
                    num6 -= genRand.Next(4);
                }
                if ((vector.Y > Game1.rockLayer) && (num5 > 0f))
                {
                    num5 = 0f;
                }
                num5--;
                int num = (int)(vector.X - (num6 * 0.5));
                int num3 = (int)(vector.X + (num6 * 0.5));
                int num2 = (int)(vector.Y - (num6 * 0.5));
                int maxTilesY = (int)(vector.Y + (num6 * 0.5));
                if (num < 0)
                {
                    num = 0;
                }
                if (num3 > (Game1.maxTilesX - 1))
                {
                    num3 = Game1.maxTilesX - 1;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                for (int k = num; k < num3; k++)
                {
                    for (int num8 = num2; num8 < maxTilesY; num8++)
                    {
                        if ((((Math.Abs((float)(k - vector.X)) + Math.Abs((float)(num8 - vector.Y))) < ((num6 * 0.5) * (1.0 + (genRand.Next(-10, 11) * 0.015)))) && (Game1.tile[k, num8].type != 0x1f)) && (Game1.tile[k, num8].type != 0x16))
                        {
                            Game1.tile[k, num8].active(false);
                        }
                    }
                }
                vector += vector2;
                vector2.Y += genRand.Next(-10, 10) * 0.1f;
                if (vector.Y < (j - 20))
                {
                    vector2.Y += genRand.Next(20) * 0.01f;
                }
                if (vector.Y > (j + 20))
                {
                    vector2.Y -= genRand.Next(20) * 0.01f;
                }
                if (vector2.Y < -0.5)
                {
                    vector2.Y = -0.5f;
                }
                if (vector2.Y > 0.5)
                {
                    vector2.Y = 0.5f;
                }
                vector2.X += genRand.Next(-10, 11) * 0.01f;
                if (direction == -1)
                {
                    if (vector2.X > -0.5)
                    {
                        vector2.X = -0.5f;
                    }
                    if (vector2.X < -2f)
                    {
                        vector2.X = -2f;
                    }
                }
                else if (direction == 1)
                {
                    if (vector2.X < 0.5)
                    {
                        vector2.X = 0.5f;
                    }
                    if (vector2.X > 2f)
                    {
                        vector2.X = 2f;
                    }
                }
                num = (int)(vector.X - (num6 * 1.1));
                num3 = (int)(vector.X + (num6 * 1.1));
                num2 = (int)(vector.Y - (num6 * 1.1));
                maxTilesY = (int)(vector.Y + (num6 * 1.1));
                if (num < 1)
                {
                    num = 1;
                }
                if (num3 > (Game1.maxTilesX - 1))
                {
                    num3 = Game1.maxTilesX - 1;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                for (int m = num; m < num3; m++)
                {
                    for (int num10 = num2; num10 < maxTilesY; num10++)
                    {
                        if (((Math.Abs((float)(m - vector.X)) + Math.Abs((float)(num10 - vector.Y))) < ((num6 * 1.1) * (1.0 + (genRand.Next(-10, 11) * 0.015)))) && (Game1.tile[m, num10].wall != 3))
                        {
                            if ((Game1.tile[m, num10].type != 0x19) && (num10 > (j + genRand.Next(3, 20))))
                            {
                                Game1.tile[m, num10].active(true);
                            }
                            Game1.tile[m, num10].active(true);
                            if ((Game1.tile[m, num10].type != 0x1f) && (Game1.tile[m, num10].type != 0x16))
                            {
                                Game1.tile[m, num10].type = 0x19;
                            }
                            if (Game1.tile[m, num10].wall == 2)
                            {
                                Game1.tile[m, num10].wall = 0;
                            }
                        }
                    }
                }
                for (int n = num; n < num3; n++)
                {
                    for (int num12 = num2; num12 < maxTilesY; num12++)
                    {
                        if (((Math.Abs((float)(n - vector.X)) + Math.Abs((float)(num12 - vector.Y))) < ((num6 * 1.1) * (1.0 + (genRand.Next(-10, 11) * 0.015)))) && (Game1.tile[n, num12].wall != 3))
                        {
                            if ((Game1.tile[n, num12].type != 0x1f) && (Game1.tile[n, num12].type != 0x16))
                            {
                                Game1.tile[n, num12].type = 0x19;
                            }
                            Game1.tile[n, num12].active(true);
                            PlaceWall(n, num12, 3, true);
                        }
                    }
                }
            }
            if (genRand.Next(3) == 0)
            {
                int x = (int)vector.X;
                int y = (int)vector.Y;
                while (!Game1.tile[x, y].active())
                {
                    y++;
                }
                TileRunner(x, y, (double)genRand.Next(2, 6), genRand.Next(3, 7), 0x16, false, 0f, 0f, false, true);
            }
        }

        public static void Check1x1(int x, int y, int type)
        {
            if ((Game1.tile[x, y + 1] != null) && !SolidTileAllowBottomSlope(x, y + 1))
            {
                KillTile(x, y, false, false, false);
            }
        }

        public static void Check1x2(int x, int j, ushort type)
        {
            if (!destroyObject)
            {
                int num = j;
                bool flag = true;
                if (Game1.tile[x, num] == null)
                {
                    Game1.tile[x, num] = new Tile();
                }
                if (Game1.tile[x, num + 1] == null)
                {
                    Game1.tile[x, num + 1] = new Tile();
                }
                int frameY = Game1.tile[x, num].frameY;
                int num3 = 0;
                while (frameY >= 40)
                {
                    frameY -= 40;
                    num3++;
                }
                if (frameY == 0x12)
                {
                    num--;
                }
                if (Game1.tile[x, num] == null)
                {
                    Game1.tile[x, num] = new Tile();
                }
                if (((Game1.tile[x, num].frameY == (40 * num3)) && (Game1.tile[x, num + 1].frameY == ((40 * num3) + 0x12))) && ((Game1.tile[x, num].type == type) && (Game1.tile[x, num + 1].type == type)))
                {
                    flag = false;
                }
                if (Game1.tile[x, num + 2] == null)
                {
                    Game1.tile[x, num + 2] = new Tile();
                }
                if (!SolidTileAllowBottomSlope(x, num + 2) && (Game1.tile[x, num + 2].type != 0x13))
                {
                    flag = true;
                }
                if (Game1.tile[x, num].type == 20)
                {
                    int num4 = Game1.tile[x, num].frameX / 0x36;
                    int num5 = Game1.tile[x, num + 2].type;
                    int num6 = -1;
                    switch (num5)
                    {
                        case 2:
                            num6 = 0;
                            break;

                        case 0x93:
                            num6 = 1;
                            break;

                        case 60:
                            num6 = 2;
                            break;

                        case 0x17:
                            num6 = 3;
                            break;

                        case 0xc7:
                            num6 = 4;
                            break;

                        case 0x6d:
                            num6 = 5;
                            break;

                        case 0x35:
                            num6 = 6;
                            break;

                        case 0x74:
                            num6 = 7;
                            break;

                        case 0xea:
                            num6 = 8;
                            break;

                        case 0x70:
                            num6 = 9;
                            break;

                        default:
                            flag = true;
                            break;
                    }
                    if (!flag && (num4 != num6))
                    {
                        int num7 = 0x36 * num6;
                        num7 += genRand.Next(3) * 0x12;
                        Game1.tile[x, num].frameX = (short)num7;
                        Game1.tile[x, num + 1].frameX = (short)num7;
                    }
                }
                if (flag)
                {
                    destroyObject = true;
                    if (Game1.tile[x, num].type == type)
                    {
                        KillTile(x, num, false, false, false);
                    }
                    if (Game1.tile[x, num + 1].type == type)
                    {
                        KillTile(x, num + 1, false, false, false);
                    }
                    if (type == 0xd8)
                    {
                        Item.NewItem(x * 0x10, num * 0x10, 0x20, 0x20, 970 + num3, 1, false, 0, false);
                    }
                    if (type == 0x152)
                    {
                        Item.NewItem(x * 0x10, num * 0x10, 0x20, 0x20, 0xab2, 1, false, 0, false);
                    }
                    if (type == 390)
                    {
                        Item.NewItem(x * 0x10, num * 0x10, 0x10, 0x20, 0xcb5, 1, false, 0, false);
                    }
                    if (type == 15)
                    {
                        int num8;
                        if ((num3 >= 0x12) && (num3 <= 0x17))
                        {
                            num8 = (0x6a7 + num3) - 0x12;
                        }
                        else if (num3 == 5)
                        {
                            num8 = 0x326;
                        }
                        else if (num3 == 6)
                        {
                            num8 = 0x327;
                        }
                        else if (num3 == 7)
                        {
                            num8 = 0x328;
                        }
                        else if (num3 == 8)
                        {
                            num8 = 0x329;
                        }
                        else if (num3 == 9)
                        {
                            num8 = 810;
                        }
                        else if (num3 == 10)
                        {
                            num8 = 0x33a;
                        }
                        else if (num3 == 11)
                        {
                            num8 = 0x393;
                        }
                        else if (num3 == 13)
                        {
                            num8 = 0x574;
                        }
                        else if (num3 == 14)
                        {
                            num8 = 0x577;
                        }
                        else if (num3 == 15)
                        {
                            num8 = 0x57a;
                        }
                        else if (num3 == 12)
                        {
                            num8 = 0x477;
                        }
                        else if (num3 == 4)
                        {
                            num8 = 630;
                        }
                        else if (num3 == 3)
                        {
                            num8 = 0x275;
                        }
                        else if (num3 == 2)
                        {
                            num8 = 0x274;
                        }
                        else if (num3 == 0x11)
                        {
                            num8 = 0x5e5;
                        }
                        else if (num3 == 1)
                        {
                            num8 = 0x166;
                        }
                        else if (num3 == 0x18)
                        {
                            num8 = 0x700;
                        }
                        else if (num3 == 0x19)
                        {
                            num8 = 0x716;
                        }
                        else if (num3 == 0x10)
                        {
                            num8 = 0x5b3;
                        }
                        else if (num3 == 0x1a)
                        {
                            num8 = 0x785;
                        }
                        else if (num3 == 0x1b)
                        {
                            num8 = 0x8b4;
                        }
                        else if (num3 == 0x1c)
                        {
                            num8 = 0x8f0;
                        }
                        else if (num3 == 0x1d)
                        {
                            num8 = 0x9dc;
                        }
                        else if (num3 == 30)
                        {
                            num8 = 0x9fd;
                        }
                        else if (num3 == 0x1f)
                        {
                            num8 = 0xa0c;
                        }
                        else if (num3 == 0x20)
                        {
                            num8 = 0xafc;
                        }
                        else if (num3 == 0x21)
                        {
                            num8 = 0xc66;
                        }
                        else if (num3 == 0x22)
                        {
                            num8 = 0xc68;
                        }
                        else if (num3 == 0x23)
                        {
                            num8 = 0xc67;
                        }
                        else
                        {
                            num8 = 0x22;
                        }
                        Item.NewItem(x * 0x10, num * 0x10, 0x20, 0x20, num8, 1, false, 0, false);
                    }
                    else if (type == 0x86)
                    {
                        if (num3 == 1)
                        {
                            Item.NewItem(x * 0x10, num * 0x10, 0x20, 0x20, 0x4c4, 1, false, 0, false);
                        }
                        else
                        {
                            Item.NewItem(x * 0x10, num * 0x10, 0x20, 0x20, 0x20d, 1, false, 0, false);
                        }
                    }
                    destroyObject = false;
                }
            }
        }

        public static void Check1x2Top(int x, int j, ushort type)
        {
            if (!destroyObject)
            {
                int num = j;
                bool flag = true;
                int num2 = Game1.tile[x, num].frameY / 0x12;
                int num3 = 0;
                while (num2 >= 2)
                {
                    num2 -= 2;
                    num3++;
                }
                num -= num2;
                num2 = num3 * 0x24;
                if (Game1.tile[x, num] == null)
                {
                    Game1.tile[x, num] = new Tile();
                }
                if (Game1.tile[x, num + 1] == null)
                {
                    Game1.tile[x, num + 1] = new Tile();
                }
                if (Game1.tile[x, num] == null)
                {
                    Game1.tile[x, num] = new Tile();
                }
                if (((Game1.tile[x, num].frameY == num2) && (Game1.tile[x, num + 1].frameY == (num2 + 0x12))) && ((Game1.tile[x, num].type == type) && (Game1.tile[x, num + 1].type == type)))
                {
                    flag = false;
                }
                if (Game1.tile[x, num - 1] == null)
                {
                    Game1.tile[x, num - 1] = new Tile();
                }
                if ((!Game1.tile[x, num - 1].nactive() || !Game1.tileSolid[Game1.tile[x, num - 1].type]) || Game1.tileSolidTop[Game1.tile[x, num - 1].type])
                {
                    flag = true;
                }
                if (flag)
                {
                    destroyObject = true;
                    if (Game1.tile[x, num].type == type)
                    {
                        KillTile(x, num, false, false, false);
                    }
                    if (Game1.tile[x, num + 1].type == type)
                    {
                        KillTile(x, num + 1, false, false, false);
                    }
                    if (type != 0x2a)
                    {
                        if (type == 270)
                        {
                            Item.NewItem(x * 0x10, num * 0x10, 0x20, 0x20, 0x7c9, 1, false, 0, false);
                        }
                        else if (type == 0x10f)
                        {
                            Item.NewItem(x * 0x10, num * 0x10, 0x20, 0x20, 0x7d5, 1, false, 0, false);
                        }
                    }
                    else
                    {
                        int num4 = 0;
                        switch (num3)
                        {
                            case 0:
                                num4 = 0x88;
                                break;

                            case 7:
                                num4 = 0x597;
                                break;

                            case 8:
                                num4 = 0x710;
                                break;

                            case 9:
                                num4 = 0x743;
                                break;

                            default:
                                if (num3 < 10)
                                {
                                    num4 = 0x56d + num3;
                                }
                                else if (num3 == 10)
                                {
                                    num4 = 0x7f0;
                                }
                                else if (num3 == 11)
                                {
                                    num4 = 0x7f1;
                                }
                                else if (num3 == 12)
                                {
                                    num4 = 0x7f2;
                                }
                                else if (num3 == 13)
                                {
                                    num4 = 0x7f3;
                                }
                                else if (num3 == 14)
                                {
                                    num4 = 0x7f4;
                                }
                                else if (num3 == 15)
                                {
                                    num4 = 0x7f5;
                                }
                                else if (num3 == 0x10)
                                {
                                    num4 = 0x7f6;
                                }
                                else if (num3 == 0x11)
                                {
                                    num4 = 0x7f7;
                                }
                                else if (num3 == 0x12)
                                {
                                    num4 = 0x7f8;
                                }
                                else if (num3 == 0x13)
                                {
                                    num4 = 0x7f9;
                                }
                                else if (num3 == 20)
                                {
                                    num4 = 0x7fa;
                                }
                                else if (num3 == 0x15)
                                {
                                    num4 = 0x7fb;
                                }
                                else if ((num3 >= 0x16) && (num3 <= 0x19))
                                {
                                    num4 = (0x861 + num3) - 0x16;
                                }
                                else if (num3 == 0x1a)
                                {
                                    num4 = 0x8b2;
                                }
                                else if (num3 == 0x1b)
                                {
                                    num4 = 0x9e2;
                                }
                                else if (num3 == 0x1c)
                                {
                                    num4 = 0x9f2;
                                }
                                else if (num3 == 0x1d)
                                {
                                    num4 = 0xa04;
                                }
                                else if (num3 == 30)
                                {
                                    num4 = 0xa13;
                                }
                                else if (num3 == 0x1f)
                                {
                                    num4 = 0xa51;
                                }
                                else if (num3 == 0x20)
                                {
                                    num4 = 0xa52;
                                }
                                else if (num3 == 0x21)
                                {
                                    num4 = 0xb04;
                                }
                                else if (num3 == 0x22)
                                {
                                    num4 = 0xc42;
                                }
                                else if (num3 == 0x23)
                                {
                                    num4 = 0xc44;
                                }
                                else if (num3 == 0x24)
                                {
                                    num4 = 0xc43;
                                }
                                break;
                        }
                        Item.NewItem(x * 0x10, num * 0x10, 0x20, 0x20, num4, 1, false, 0, false);
                    }
                    destroyObject = false;
                }
            }
        }

        public static void Check1xX(int x, int j, byte type)
        {
            if (!destroyObject)
            {
                int frameX = Game1.tile[x, j].frameX;
                int num2 = 3;
                if (type == 0x5c)
                {
                    num2 = 6;
                }
                int frameY = Game1.tile[x, j].frameY;
                int num4 = 0;
                while (frameY >= (0x12 * num2))
                {
                    frameY -= 0x12 * num2;
                    num4++;
                }
                int num5 = j - (frameY / 0x12);
                bool flag = false;
                for (int i = 0; i < num2; i++)
                {
                    if (Game1.tile[x, num5 + i] == null)
                    {
                        Game1.tile[x, num5 + i] = new Tile();
                    }
                    if (!Game1.tile[x, num5 + i].active())
                    {
                        flag = true;
                    }
                    else if (Game1.tile[x, num5 + i].type != type)
                    {
                        flag = true;
                    }
                    else if (Game1.tile[x, num5 + i].frameY != ((i * 0x12) + ((num4 * num2) * 0x12)))
                    {
                        flag = true;
                    }
                    else if (Game1.tile[x, num5 + i].frameX != frameX)
                    {
                        flag = true;
                    }
                }
                if (Game1.tile[x, num5 + num2] == null)
                {
                    Game1.tile[x, num5 + num2] = new Tile();
                }
                if (!SolidTileAllowBottomSlope(x, num5 + num2))
                {
                    flag = true;
                }
                if (flag)
                {
                    destroyObject = true;
                    for (int k = 0; k < num2; k++)
                    {
                        if (Game1.tile[x, num5 + k].type == type)
                        {
                            KillTile(x, num5 + k, false, false, false);
                        }
                    }
                    if (type == 0x5c)
                    {
                        Item.NewItem(x * 0x10, j * 0x10, 0x20, 0x20, 0x155, 1, false, 0, false);
                    }
                    if (type == 0x5d)
                    {
                        int num8 = 0;
                        if (num4 == 0)
                        {
                            num8 = 0x156;
                        }
                        else if ((num4 >= 1) && (num4 <= 10))
                        {
                            num8 = (0x822 + num4) - 1;
                        }
                        else if ((num4 >= 11) && (num4 <= 0x10))
                        {
                            num8 = (0x851 + num4) - 11;
                        }
                        else if (num4 == 0x11)
                        {
                            num8 = 0x8b1;
                        }
                        else if (num4 == 0x12)
                        {
                            num8 = 0x9e5;
                        }
                        else if (num4 == 0x13)
                        {
                            num8 = 0x9f3;
                        }
                        else if (num4 == 20)
                        {
                            num8 = 0xa03;
                        }
                        else if (num4 == 0x15)
                        {
                            num8 = 0xa12;
                        }
                        else if (num4 == 0x16)
                        {
                            num8 = 0xa53;
                        }
                        else if (num4 == 0x17)
                        {
                            num8 = 0xa54;
                        }
                        else if (num4 == 0x18)
                        {
                            num8 = 0xa55;
                        }
                        else if (num4 == 0x19)
                        {
                            num8 = 0xa56;
                        }
                        else if (num4 == 0x1a)
                        {
                            num8 = 0xa57;
                        }
                        else if (num4 == 0x1b)
                        {
                            num8 = 0xb03;
                        }
                        else if (num4 == 0x1c)
                        {
                            num8 = 0xc3f;
                        }
                        else if (num4 == 0x1d)
                        {
                            num8 = 0xc41;
                        }
                        else if (num4 == 30)
                        {
                            num8 = 0xc40;
                        }
                        Item.NewItem(x * 0x10, j * 0x10, 0x20, 0x20, num8, 1, false, 0, false);
                    }
                    destroyObject = false;
                }
            }
        }

        public static void Check2x1(int i, int y, ushort type)
        {
            if (!destroyObject)
            {
                int num = i;
                bool flag = true;
                if (Game1.tile[num, y] == null)
                {
                    Game1.tile[num, y] = new Tile();
                }
                int num2 = Game1.tile[num, y].frameX / 0x12;
                int num3 = num2 >> 1;
                num2 = num2 % 2;
                num -= num2;
                if (Game1.tile[num, y] == null)
                {
                    Game1.tile[num, y] = new Tile();
                }
                if (Game1.tile[num + 1, y] == null)
                {
                    Game1.tile[num + 1, y] = new Tile();
                }
                if (Game1.tile[num, y + 1] == null)
                {
                    Game1.tile[num, y + 1] = new Tile();
                }
                if (Game1.tile[num + 1, y + 1] == null)
                {
                    Game1.tile[num + 1, y + 1] = new Tile();
                }
                if (((Game1.tile[num + 1, y].frameX == (Game1.tile[num, y].frameX + 0x12)) && (Game1.tile[num, y].type == type)) && (Game1.tile[num + 1, y].type == type))
                {
                    flag = false;
                }
                if ((type == 0x1d) || (type == 0x67))
                {
                    if (!Game1.tile[num, y + 1].active() || !Game1.tileTable[Game1.tile[num, y + 1].type])
                    {
                        flag = true;
                    }
                    if (!Game1.tile[num + 1, y + 1].active() || !Game1.tileTable[Game1.tile[num + 1, y + 1].type])
                    {
                        flag = true;
                    }
                }
                else
                {
                    if (!SolidTileAllowBottomSlope(num, y + 1))
                    {
                        flag = true;
                    }
                    if (!SolidTileAllowBottomSlope(num + 1, y + 1))
                    {
                        flag = true;
                    }
                }
                if ((((type == 0xb9) && (Game1.tile[num, y].frameX >= 0x558)) && ((Game1.tile[num, y].frameX <= 0x5b2) && (Game1.tile[num, y + 1].type != 2))) && (Game1.tile[num + 1, y + 1].type != 2))
                {
                    Tile tile1 = Game1.tile[num, y];
                    tile1.frameX = (short)(tile1.frameX - 0x558);
                    Tile tile2 = Game1.tile[num + 1, y];
                    tile2.frameX = (short)(tile2.frameX - 0x558);
                }
                if (flag)
                {
                    int frameX = Game1.tile[num, y].frameX;
                    if (!Game1.tile[num, y].active())
                    {
                        frameX = Game1.tile[num + 1, y].frameX;
                    }
                    destroyObject = true;
                    if (Game1.tile[num, y].type == type)
                    {
                        KillTile(num, y, false, false, false);
                    }
                    if (Game1.tile[num + 1, y].type == type)
                    {
                        KillTile(num + 1, y, false, false, false);
                    }
                    if (type == 0x10)
                    {
                        if (num3 == 1)
                        {
                            Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x2cc, 1, false, 0, false);
                        }
                        else
                        {
                            Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x23, 1, false, 0, false);
                        }
                    }
                    if (type == 0x12)
                    {
                        int num5 = 0x24;
                        if ((num3 >= 1) && (num3 <= 3))
                        {
                            num5 = 0x27a + num3;
                        }
                        else if ((num3 >= 4) && (num3 <= 8))
                        {
                            num5 = 0x327 + num3;
                        }
                        else if (num3 == 9)
                        {
                            num5 = 0x394;
                        }
                        else if (num3 == 10)
                        {
                            num5 = 0x479;
                        }
                        else if (num3 == 11)
                        {
                            num5 = 0x576;
                        }
                        else if (num3 == 12)
                        {
                            num5 = 0x579;
                        }
                        else if (num3 == 13)
                        {
                            num5 = 0x57c;
                        }
                        else if (num3 == 14)
                        {
                            num5 = 0x5b5;
                        }
                        else if (num3 == 15)
                        {
                            num5 = 0x5e7;
                        }
                        else if (num3 == 0x10)
                        {
                            num5 = 0x703;
                        }
                        else if (num3 == 0x11)
                        {
                            num5 = 0x719;
                        }
                        else if (num3 == 0x12)
                        {
                            num5 = 0x8b5;
                        }
                        else if (num3 == 0x13)
                        {
                            num5 = 0x8cb;
                        }
                        else if (num3 == 20)
                        {
                            num5 = 0x8cc;
                        }
                        else if (num3 == 0x15)
                        {
                            num5 = 0x8cd;
                        }
                        else if (num3 == 0x16)
                        {
                            num5 = 0x9e6;
                        }
                        else if (num3 == 0x17)
                        {
                            num5 = 0x2a1;
                        }
                        else if (num3 == 0x18)
                        {
                            num5 = 0xa47;
                        }
                        else if (num3 == 0x19)
                        {
                            num5 = 0xa48;
                        }
                        else if (num3 == 0x1a)
                        {
                            num5 = 0xa49;
                        }
                        else if (num3 == 0x1b)
                        {
                            num5 = 0xb0a;
                        }
                        else if (num3 == 0x1c)
                        {
                            num5 = 0xc54;
                        }
                        else if (num3 == 0x1d)
                        {
                            num5 = 0xc56;
                        }
                        else if (num3 == 30)
                        {
                            num5 = 0xc55;
                        }
                        Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, num5, 1, false, 0, false);
                    }
                    if (type == 0xb9)
                    {
                        if ((frameX >= 0x240) && (frameX <= 610))
                        {
                            Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x47, genRand.Next(10, 100), false, 0, false);
                            Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x47, genRand.Next(20, 100), false, 0, false);
                            if (genRand.Next(3) != 0)
                            {
                                Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x47, genRand.Next(10, 100), false, 0, false);
                            }
                            if (genRand.Next(3) != 0)
                            {
                                Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x47, genRand.Next(20, 100), false, 0, false);
                            }
                            if (genRand.Next(2) == 0)
                            {
                                Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x47, genRand.Next(10, 100), false, 0, false);
                            }
                            if (genRand.Next(2) == 0)
                            {
                                Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x47, genRand.Next(20, 100), false, 0, false);
                            }
                            if (genRand.Next(3) == 0)
                            {
                                Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x47, genRand.Next(10, 100), false, 0, false);
                            }
                            if (genRand.Next(3) == 0)
                            {
                                Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x47, genRand.Next(20, 100), false, 0, false);
                            }
                            if (genRand.Next(4) == 0)
                            {
                                Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x47, genRand.Next(10, 100), false, 0, false);
                            }
                            if (genRand.Next(4) == 0)
                            {
                                Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x47, genRand.Next(20, 100), false, 0, false);
                            }
                            if (genRand.Next(5) == 0)
                            {
                                Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x47, genRand.Next(10, 100), false, 0, false);
                            }
                            if (genRand.Next(5) == 0)
                            {
                                Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x47, genRand.Next(20, 100), false, 0, false);
                            }
                        }
                        if ((frameX >= 0x264) && (frameX <= 0x286))
                        {
                            Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x48, genRand.Next(10, 100), false, 0, false);
                            if (genRand.Next(2) == 0)
                            {
                                Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x48, genRand.Next(20, 100), false, 0, false);
                            }
                            if (genRand.Next(3) == 0)
                            {
                                Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x48, genRand.Next(30, 100), false, 0, false);
                            }
                        }
                        if ((frameX >= 0x288) && (frameX <= 0x2aa))
                        {
                            Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x49, genRand.Next(1, 6), false, 0, false);
                            if (genRand.Next(2) == 0)
                            {
                                Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x49, genRand.Next(2, 6), false, 0, false);
                            }
                            if (genRand.Next(3) == 0)
                            {
                                Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x49, genRand.Next(3, 6), false, 0, false);
                            }
                        }
                        if ((frameX >= 0x2ac) && (frameX <= 0x2ce))
                        {
                            Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0xb5, genRand.Next(1, 4), false, 0, false);
                        }
                        if ((frameX >= 720) && (frameX <= 0x2f2))
                        {
                            Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 180, genRand.Next(1, 4), false, 0, false);
                        }
                        if ((frameX >= 0x2f4) && (frameX <= 790))
                        {
                            Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0xb1, genRand.Next(1, 4), false, 0, false);
                        }
                        if ((frameX >= 0x318) && (frameX <= 0x33a))
                        {
                            Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0xb3, genRand.Next(1, 4), false, 0, false);
                        }
                        if ((frameX >= 0x33c) && (frameX <= 0x35e))
                        {
                            Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0xb2, genRand.Next(1, 4), false, 0, false);
                        }
                        if ((frameX >= 0x360) && (frameX <= 0x382))
                        {
                            Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0xb6, genRand.Next(1, 4), false, 0, false);
                        }
                    }
                    if (type == 0x1d)
                    {
                        Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x57, 1, false, 0, false);
                        Game1.PlaySound(13, i * 0x10, y * 0x10, 1);
                    }
                    if (type == 0x67)
                    {
                        int num6 = 0x164;
                        switch (num3)
                        {
                            case 1:
                                num6 = 0x8bb;
                                break;

                            case 2:
                                num6 = 0x8c2;
                                break;

                            case 3:
                                num6 = 0x8c3;
                                break;
                        }
                        Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, num6, 1, false, 0, false);
                        Game1.PlaySound(13, i * 0x10, y * 0x10, 1);
                    }
                    else if (type == 0x86)
                    {
                        if (num3 == 1)
                        {
                            Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x4c4, 1, false, 0, false);
                        }
                        else
                        {
                            Item.NewItem(num * 0x10, y * 0x10, 0x20, 0x20, 0x20d, 1, false, 0, false);
                        }
                    }
                    destroyObject = false;
                    SquareTileFrame(num, y, true);
                    SquareTileFrame(num + 1, y, true);
                }
            }
        }

        public static void Check2x2(int i, int j, int type)
        {
            if (!destroyObject)
            {
                bool flag = false;
                int num = 0;
                int num2 = (Game1.tile[i, j].frameX / 0x12) * -1;
                if (num2 < -1)
                {
                    num2 += 2;
                    num = 0x24;
                }
                num2 += i;
                int num3 = (type == 0xac) ? 0x26 : 0x24;
                int frameY = Game1.tile[i, j].frameY;
                int num5 = 0;
                while (frameY >= num3)
                {
                    frameY -= num3;
                    num5++;
                }
                int num6 = j - (frameY / 0x12);
                for (int k = num2; k < (num2 + 2); k++)
                {
                    for (int m = num6; m < (num6 + 2); m++)
                    {
                        Tile tileSafely = Framing.GetTileSafely(k, m);
                        if ((!tileSafely.active() || (tileSafely.type != type)) || ((tileSafely.frameX != (((k - num2) * 0x12) + num)) || (tileSafely.frameY != (((m - num6) * 0x12) + (num5 * num3)))))
                        {
                            flag = true;
                        }
                    }
                    if ((type == 0x5f) || (type == 0x7e))
                    {
                        Framing.GetTileSafely(k, num6 - 1);
                        if ((!Game1.tile[k, num6 - 1].active() || !Game1.tileSolid[Game1.tile[k, num6 - 1].type]) || Game1.tileSolidTop[Game1.tile[k, num6 - 1].type])
                        {
                            flag = true;
                        }
                    }
                    else if ((type != 0x8a) && (type != 0x84))
                    {
                        Tile tile2 = Framing.GetTileSafely(k, num6 + 2);
                        if (!tile2.active() || (!Game1.tileSolid[tile2.type] && !Game1.tileTable[tile2.type]))
                        {
                            flag = true;
                        }
                        if (tile2.halfBrick())
                        {
                            flag = true;
                        }
                    }
                }
                if (type == 0x8a)
                {
                    ushort num9 = Game1.tile[num2, num6 - 1].type;
                    ushort num10 = Game1.tile[num2 + 1, num6 - 1].type;
                    if ((((((num9 != 0x15) && (num10 != 0x15)) && (num9 != 0x58)) && (num10 != 0x58)) && !SolidTileAllowBottomSlope(num2, num6 + 2)) && !SolidTileAllowBottomSlope(num2 + 1, num6 + 2))
                    {
                        flag = true;
                    }
                }
                else if (type == 0x84)
                {
                    flag = false;
                    num6 = (Game1.tile[i, j].frameY / 0x12) * -1;
                    num6 += j;
                    num = 0;
                    num2 = (Game1.tile[i, j].frameX / 0x12) * -1;
                    while (num2 < -1)
                    {
                        num2 += 2;
                        num += 0x24;
                    }
                    num2 += i;
                    for (int n = num2; n < (num2 + 2); n++)
                    {
                        for (int num12 = num6; num12 < (num6 + 2); num12++)
                        {
                            if (Game1.tile[n, num12] == null)
                            {
                                Game1.tile[n, num12] = new Tile();
                            }
                            if ((!Game1.tile[n, num12].active() || (Game1.tile[n, num12].type != type)) || ((Game1.tile[n, num12].frameX != (((n - num2) * 0x12) + num)) || (Game1.tile[n, num12].frameY != ((num12 - num6) * 0x12))))
                            {
                                flag = true;
                            }
                        }
                    }
                    if (Game1.tile[num2, num6 + 2] == null)
                    {
                        Game1.tile[num2, num6 + 2] = new Tile();
                    }
                    if (Game1.tile[num2 + 1, num6 + 2] == null)
                    {
                        Game1.tile[num2 + 1, num6 + 2] = new Tile();
                    }
                    bool flag3 = false;
                    ushort index = Game1.tile[num2, num6 + 2].type;
                    ushort num14 = Game1.tile[num2 + 1, num6 + 2].type;
                    if (!Game1.tile[num2, num6 + 2].active() || (!Game1.tileSolid[index] && !Game1.tileSolidTop[index]))
                    {
                        flag3 = true;
                    }
                    if (!Game1.tile[num2 + 1, num6 + 2].active() || (!Game1.tileSolid[num14] && !Game1.tileSolidTop[num14]))
                    {
                        flag3 = true;
                    }
                    if (flag3)
                    {
                        if (((Game1.tile[num2, num6].wall < 1) || (Game1.tile[num2 + 1, num6].wall < 1)) || ((Game1.tile[num2, num6 + 1].wall < 1) || (Game1.tile[num2 + 1, num6 + 1].wall < 1)))
                        {
                            flag = true;
                        }
                        else if (num < 0x48)
                        {
                            for (int num15 = num2; num15 < (num2 + 2); num15++)
                            {
                                for (int num16 = num6; num16 < (num6 + 2); num16++)
                                {
                                    Tile tile1 = Game1.tile[num15, num16];
                                    tile1.frameX = (short)(tile1.frameX + 0x48);
                                }
                            }
                        }
                    }
                    else if (num >= 0x48)
                    {
                        for (int num17 = num2; num17 < (num2 + 2); num17++)
                        {
                            for (int num18 = num6; num18 < (num6 + 2); num18++)
                            {
                                Tile tile3 = Game1.tile[num17, num18];
                                tile3.frameX = (short)(tile3.frameX - 0x48);
                            }
                        }
                    }
                }
                if (flag)
                {
                    destroyObject = true;
                    for (int num19 = num2; num19 < (num2 + 2); num19++)
                    {
                        for (int num20 = num6; num20 < (num6 + 2); num20++)
                        {
                            if ((Game1.tile[num19, num20].type == type) && Game1.tile[num19, num20].active())
                            {
                                KillTile(num19, num20, false, false, false);
                            }
                        }
                    }
                    int num21 = 0;
                    if (type == 360)
                    {
                        num21 = 0xc00;
                    }
                    if ((type >= 0x120) && (type <= 0x127))
                    {
                        num21 = (0x882 + type) - 0x120;
                    }
                    if ((type >= 0x13c) && (type <= 0x13e))
                    {
                        num21 = (0x987 + type) - 0x13c;
                    }
                    if (type == 0x55)
                    {
                        num21 = 0x141;
                    }
                    if (type == 0x5e)
                    {
                        num21 = 0x160;
                    }
                    if (type == 0x5f)
                    {
                        num21 = 0x158;
                    }
                    if (type == 0x60)
                    {
                        num21 = 0x159;
                    }
                    if (type == 0x61)
                    {
                        num21 = 0x15a;
                    }
                    if (type == 0x62)
                    {
                        num21 = 0x15b;
                    }
                    if (type == 0x63)
                    {
                        num21 = 0x15c;
                    }
                    if (type == 0x14f)
                    {
                        num21 = 0xa8c;
                    }
                    if (type == 0x19b)
                    {
                        num21 = 0xdd9;
                    }
                    if (type == 100)
                    {
                        if (num5 == 0)
                        {
                            num21 = 0x15d;
                        }
                        else if ((num5 >= 1) && (num5 <= 12))
                        {
                            num21 = (0x82c + num5) - 1;
                        }
                        else if ((num5 >= 13) && (num5 <= 0x10))
                        {
                            num21 = (0x865 + num5) - 13;
                        }
                        else if (num5 == 0x11)
                        {
                            num21 = 0x8b3;
                        }
                        else if (num5 == 0x12)
                        {
                            num21 = 0x9da;
                        }
                        else if (num5 == 0x13)
                        {
                            num21 = 0x9ed;
                        }
                        else if (num5 == 20)
                        {
                            num21 = 0x9fb;
                        }
                        else if (num5 == 0x15)
                        {
                            num21 = 0xa0a;
                        }
                        else if (num5 == 0x16)
                        {
                            num21 = 0xa68;
                        }
                        else if (num5 == 0x17)
                        {
                            num21 = 0xa69;
                        }
                        else if (num5 == 0x18)
                        {
                            num21 = 0xa6a;
                        }
                        else if (num5 == 0x19)
                        {
                            num21 = 0xa6b;
                        }
                        else if (num5 == 0x1a)
                        {
                            num21 = 0xa6c;
                        }
                        else if (num5 == 0x1b)
                        {
                            num21 = 0xb09;
                        }
                        else if (num5 == 0x1c)
                        {
                            num21 = 0xc60;
                        }
                        else if (num5 == 0x1d)
                        {
                            num21 = 0xc62;
                        }
                        else if (num5 == 30)
                        {
                            num21 = 0xc61;
                        }
                    }
                    if (type == 0xad)
                    {
                        num21 = 0x2ca;
                    }
                    if (type == 0x7d)
                    {
                        num21 = 0x1e7;
                    }
                    if (type == 0x11f)
                    {
                        num21 = 0x881;
                    }
                    if (type == 0x7e)
                    {
                        num21 = 0x1e8;
                    }
                    if (type == 0x84)
                    {
                        num21 = 0x201;
                    }
                    if (type == 0x8e)
                    {
                        num21 = 0x245;
                    }
                    if (type == 0x8f)
                    {
                        num21 = 0x246;
                    }
                    if (type == 0x11a)
                    {
                        num21 = 250;
                    }
                    if (type == 0x13f)
                    {
                        num21 = 0x9ba;
                    }
                    if (type == 0xac)
                    {
                        num21 = 0xb0b + num5;
                        switch (num5)
                        {
                            case 0x1d:
                                num21 = 0xc4b;
                                break;

                            case 30:
                                num21 = 0xc4d;
                                break;

                            case 0x1f:
                                num21 = 0xc4c;
                                break;
                        }
                    }
                    if (num21 != 0)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, num21, 1, false, 0, false);
                    }
                    if (((type == 0x8a) && !gen) && (Game1.netMode != 1))
                    {
                        Projectile.NewProjectile((num2 * 0x10) + 15.5f, (float)((num6 * 0x10) + 0x10), 0f, 0f, 0x63, 70, 10f, Game1.myPlayer, 0f, 0f);
                    }
                    destroyObject = false;
                    for (int num22 = num2 - 1; num22 < (num2 + 3); num22++)
                    {
                        for (int num23 = num6 - 1; num23 < (num6 + 3); num23++)
                        {
                            TileFrame(num22, num23, false, false);
                        }
                    }
                }
            }
        }

        public static void Check2x2Style(int i, int j, int type)
        {
            if (!destroyObject)
            {
                bool flag = false;
                int num = j;
                int num2 = Game1.tile[i, j].frameY / 0x12;
                while (num2 > 1)
                {
                    num2 -= 2;
                }
                num -= num2;
                int num3 = Game1.tile[i, j].frameX / 0x12;
                int num4 = 0;
                while (num3 > 1)
                {
                    num3 -= 2;
                    num4++;
                }
                num3 = i - num3;
                int num5 = num4 * 0x24;
                for (int k = num3; k < (num3 + 2); k++)
                {
                    for (int m = num; m < (num + 2); m++)
                    {
                        if (Game1.tile[k, m] == null)
                        {
                            Game1.tile[k, m] = new Tile();
                        }
                        if ((!Game1.tile[k, m].active() || (Game1.tile[k, m].type != type)) || (Game1.tile[k, m].frameX != (((k - num3) * 0x12) + num5)))
                        {
                            flag = true;
                        }
                    }
                    if (!SolidTileAllowBottomSlope(k, num + 2))
                    {
                        flag = true;
                    }
                }
                if (flag)
                {
                    int frameX = Game1.tile[i, j].frameX;
                    destroyObject = true;
                    for (int n = num3; n < (num3 + 2); n++)
                    {
                        for (int num10 = num; num10 < (num + 2); num10++)
                        {
                            if (Game1.tile[n, num10] == null)
                            {
                                Game1.tile[n, num10] = new Tile();
                            }
                            if ((Game1.tile[n, num10].type == type) && Game1.tile[n, num10].active())
                            {
                                KillTile(n, num10, false, false, false);
                            }
                        }
                    }
                    if (type == 0xfe)
                    {
                        if (frameX >= 0x48)
                        {
                            if (frameX < 0x6c)
                            {
                                if (genRand.Next(2) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x6bd, genRand.Next(1, 3), false, 0, false);
                                }
                            }
                            else if (frameX < 0x90)
                            {
                                Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x6bd, genRand.Next(2, 6), false, 0, false);
                            }
                            else
                            {
                                Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x6bd, genRand.Next(5, 11), false, 0, false);
                                if (Game1.halloween && (genRand.Next(200) == 0))
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x707, 1, false, 0, false);
                                }
                            }
                        }
                    }
                    else if (type == 0x60)
                    {
                        switch (num4)
                        {
                            case 0:
                                Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x159, 1, false, 0, false);
                                break;

                            case 1:
                                Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x6ff, 1, false, 0, false);
                                break;
                        }
                    }
                    destroyObject = false;
                    for (int num11 = num3 - 1; num11 < (num3 + 3); num11++)
                    {
                        for (int num12 = num - 1; num12 < (num + 3); num12++)
                        {
                            TileFrame(num11, num12, false, false);
                        }
                    }
                }
            }
        }

        public static void Check2x3Wall(int x, int y)
        {
            if (destroyObject)
            {
                return;
            }
            bool flag = false;
            int type = Game1.tile[x, y].type;
            int num2 = 0;
            int num3 = Game1.tile[x, y].frameX / 0x12;
            while (num3 >= 2)
            {
                num3 -= 2;
                num2++;
            }
            int num4 = x - num3;
            int num5 = y - (Game1.tile[x, y].frameY / 0x12);
            num3 = num2 * 0x24;
            for (int i = num4; i < (num4 + 2); i++)
            {
                for (int k = num5; k < (num5 + 3); k++)
                {
                    if (((Game1.tile[i, k].type != type) || !Game1.tile[i, k].active()) || (((Game1.tile[i, k].wall <= 0) || (Game1.tile[i, k].frameX != (num3 + ((i - num4) * 0x12)))) || (Game1.tile[i, k].frameY != ((k - num5) * 0x12))))
                    {
                        flag = true;
                        break;
                    }
                }
            }
            if (!flag)
            {
                return;
            }
            destroyObject = true;
            for (int j = num4; j < (num4 + 2); j++)
            {
                for (int m = num5; m < (num5 + 3); m++)
                {
                    if ((Game1.tile[j, m].type == type) && Game1.tile[j, m].active())
                    {
                        KillTile(j, m, false, false, false);
                    }
                }
            }
            if (type == 0xf5)
            {
                switch (num2)
                {
                    case 6:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x629, 1, false, 0, false);
                        goto Label_01EA;

                    case 5:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x5d7, 1, false, 0, false);
                        goto Label_01EA;
                }
                Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x5c2 + num2, 1, false, 0, false);
            }
        Label_01EA:
            destroyObject = false;
        }

        public static void Check2xX(int i, int j, ushort type)
        {
            if (!destroyObject)
            {
                int num = i;
                int frameX = Game1.tile[i, j].frameX;
                while (frameX >= 0x24)
                {
                    frameX -= 0x24;
                }
                if (frameX == 0x12)
                {
                    num--;
                }
                if (Game1.tile[num, j] == null)
                {
                    Game1.tile[num, j] = new Tile();
                }
                int num3 = Game1.tile[num, j].frameY / 0x12;
                int num4 = 3;
                if (type == 0x68)
                {
                    num4 = 5;
                }
                if (type == 0xcf)
                {
                    num4 = 4;
                }
                int num5 = 0;
                while (num3 >= num4)
                {
                    num3 -= num4;
                    num5 += num4 * 0x12;
                }
                int y = j - num3;
                if ((type == 410) && (num5 != 0))
                {
                    num5 += 2;
                }
                if (Game1.tile[num, y] == null)
                {
                    Game1.tile[num, y] = new Tile();
                }
                int num7 = Game1.tile[num, j].frameX;
                bool flag = false;
                for (int k = 0; k < num4; k++)
                {
                    if (Game1.tile[num, y + k] == null)
                    {
                        Game1.tile[num, y + k] = new Tile();
                    }
                    if (!Game1.tile[num, y + k].active())
                    {
                        flag = true;
                    }
                    else if (Game1.tile[num, y + k].type != type)
                    {
                        flag = true;
                    }
                    else if (Game1.tile[num, y + k].frameY != ((k * 0x12) + num5))
                    {
                        flag = true;
                    }
                    else if (Game1.tile[num, y + k].frameX != num7)
                    {
                        flag = true;
                    }
                    if (Game1.tile[num + 1, y + k] == null)
                    {
                        Game1.tile[num + 1, y + k] = new Tile();
                    }
                    if (!Game1.tile[num + 1, y + k].active())
                    {
                        flag = true;
                    }
                    else if (Game1.tile[num + 1, y + k].type != type)
                    {
                        flag = true;
                    }
                    else if (Game1.tile[num + 1, y + k].frameY != ((k * 0x12) + num5))
                    {
                        flag = true;
                    }
                    else if (Game1.tile[num + 1, y + k].frameX != (num7 + 0x12))
                    {
                        flag = true;
                    }
                }
                if (!SolidTileAllowBottomSlope(num, y + num4))
                {
                    flag = true;
                }
                if (!SolidTileAllowBottomSlope(num + 1, y + num4))
                {
                    flag = true;
                }
                if (flag)
                {
                    destroyObject = true;
                    for (int m = 0; m < num4; m++)
                    {
                        if (Game1.tile[num, y + m].type == type)
                        {
                            KillTile(num, y + m, false, false, false);
                        }
                        if (Game1.tile[num + 1, y + m].type == type)
                        {
                            KillTile(num + 1, y + m, false, false, false);
                        }
                    }
                    if (type == 0x68)
                    {
                        int num10 = num7 / 0x24;
                        int num11 = 0;
                        if ((num10 >= 1) && (num10 <= 5))
                        {
                            num11 = (0x8bd + num10) - 1;
                        }
                        else if (num10 == 6)
                        {
                            num11 = 0xa00;
                        }
                        else if (num10 == 7)
                        {
                            num11 = 0xa0f;
                        }
                        else if ((num10 >= 8) && (num10 <= 0x17))
                        {
                            num11 = (0xa1f + num10) - 8;
                        }
                        else if (num10 == 0x18)
                        {
                            num11 = 0xaf9;
                        }
                        else if (num10 == 0x19)
                        {
                            num11 = 0xc36;
                        }
                        else if (num10 == 0x1a)
                        {
                            num11 = 0xc38;
                        }
                        else if (num10 == 0x1b)
                        {
                            num11 = 0xc37;
                        }
                        else
                        {
                            num11 = 0x167;
                        }
                        Item.NewItem(num * 0x10, j * 0x10, 0x20, 0x20, num11, 1, false, 0, false);
                    }
                    if (type == 0x69)
                    {
                        int num12 = num7 / 0x24;
                        switch (num12)
                        {
                            case 0:
                                num12 = 360;
                                break;

                            case 1:
                                num12 = 0x34;
                                break;

                            case 0x2b:
                                num12 = 0x480;
                                break;

                            case 0x2c:
                                num12 = 0x481;
                                break;

                            case 0x2d:
                                num12 = 0x482;
                                break;

                            case 0x2e:
                                num12 = 0x580;
                                break;

                            case 0x2f:
                                num12 = 0x581;
                                break;

                            case 0x30:
                                num12 = 0x582;
                                break;

                            case 0x31:
                                num12 = 0x5b6;
                                break;

                            case 50:
                                num12 = 0xa70;
                                break;

                            default:
                                num12 = (0x1b6 + num12) - 2;
                                break;
                        }
                        Item.NewItem(num * 0x10, j * 0x10, 0x20, 0x20, num12, 1, false, 0, false);
                    }
                    if (type == 0x164)
                    {
                        Item.NewItem(num * 0x10, j * 0x10, 0x20, 0x20, 0xbf8, 1, false, 0, false);
                    }
                    if (type == 0x151)
                    {
                        int num13 = num7 / 0x24;
                        Item.NewItem(num * 0x10, j * 0x10, 0x20, 0x20, 0xa8e + num13, 1, false, 0, false);
                    }
                    if (type == 0xcf)
                    {
                        int num14 = num7 / 0x24;
                        switch (num14)
                        {
                            case 0:
                                num14 = 0x38d;
                                break;

                            case 1:
                                num14 = 910;
                                break;

                            default:
                                if ((num14 >= 2) && (num14 <= 7))
                                {
                                    num14 = 0x3aa + num14;
                                }
                                break;
                        }
                        Item.NewItem(num * 0x10, j * 0x10, 0x20, 0x20, num14, 1, false, 0, false);
                    }
                    if (type == 410)
                    {
                        int num15 = num7 / 0x24;
                        Item.NewItem(num * 0x10, j * 0x10, 0x20, 0x20, num15 + 0xdd0, 1, false, 0, false);
                    }
                    if (type == 320)
                    {
                        Item.NewItem(num * 0x10, j * 0x10, 0x20, 0x20, 0x9c0, 1, false, 0, false);
                    }
                    if (type == 0x15d)
                    {
                        Item.NewItem(num * 0x10, j * 0x10, 0x20, 0x20, 470, 1, false, 0, false);
                    }
                    if (type == 0x17a)
                    {
                        Item.NewItem(num * 0x10, j * 0x10, 0x20, 0x30, 0xc82, 1, false, 0, false);
                        TETrainingDummy.Kill(num, y);
                    }
                    destroyObject = false;
                }
            }
        }

        public static void Check3x1(int i, int j, int type)
        {
            if (!destroyObject)
            {
                bool flag = false;
                int num = Game1.tile[i, j].frameX / 0x12;
                int num2 = 0;
                while (num > 2)
                {
                    num -= 3;
                    num2++;
                }
                num = i - num;
                int num3 = num2 * 0x36;
                for (int k = num; k < (num + 3); k++)
                {
                    int num5 = j;
                    if (Game1.tile[k, num5] == null)
                    {
                        Game1.tile[k, num5] = new Tile();
                    }
                    if ((!Game1.tile[k, num5].active() || (Game1.tile[k, num5].type != type)) || ((Game1.tile[k, num5].frameX != (((k - num) * 0x12) + num3)) || (Game1.tile[k, num5].frameY != 0)))
                    {
                        flag = true;
                    }
                    if (Game1.tile[k, num5 - 1].active() && (Game1.tile[k, num5 - 1].type == 0x15))
                    {
                        return;
                    }
                    if (!SolidTileAllowBottomSlope(k, num5 + 1))
                    {
                        flag = true;
                    }
                }
                if (flag)
                {
                    short frameX = Game1.tile[i, j].frameX;
                    destroyObject = true;
                    if (type == 0xeb)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x4ef, 1, false, 0, false);
                    }
                    for (int m = num; m < (num + 3); m++)
                    {
                        int num7 = j;
                        if (Game1.tile[m, num7] == null)
                        {
                            Game1.tile[m, num7] = new Tile();
                        }
                        if ((Game1.tile[m, num7].type == type) && Game1.tile[m, num7].active())
                        {
                            KillTile(m, num7, false, false, false);
                        }
                    }
                    destroyObject = false;
                    for (int n = num - 1; n < (num + 4); n++)
                    {
                        int num9 = j;
                        TileFrame(n, num9, false, false);
                    }
                }
            }
        }

        public static void Check3x2(int i, int j, int type)
        {
            if (!destroyObject)
            {
                bool flag = false;
                bool flag2 = false;
                int num = j;
                int num2 = 0x24;
                int num3 = Game1.tile[i, j].frameY / num2;
                int num4 = Game1.tile[i, j].frameY % num2;
                num -= num4 / 0x12;
                int num5 = Game1.tile[i, j].frameX / 0x12;
                int num6 = 0;
                while (num5 > 2)
                {
                    num5 -= 3;
                    num6++;
                }
                num5 = i - num5;
                int num7 = num6 * 0x36;
                if ((type == 14) && (num6 == 0x19))
                {
                    flag2 = true;
                }
                int num8 = num + 2;
                if (flag2)
                {
                    num8--;
                }
                for (int k = num5; k < (num5 + 3); k++)
                {
                    for (int m = num; m < num8; m++)
                    {
                        if (Game1.tile[k, m] == null)
                        {
                            Game1.tile[k, m] = new Tile();
                        }
                        if ((!Game1.tile[k, m].active() || (Game1.tile[k, m].type != type)) || ((Game1.tile[k, m].frameX != (((k - num5) * 0x12) + num7)) || (Game1.tile[k, m].frameY != (((m - num) * 0x12) + (num3 * 0x24)))))
                        {
                            flag = true;
                        }
                    }
                    if ((((type == 0x11d) || (type == 0x11e)) || ((type == 0x12a) || (type == 0x12b))) || (((type == 310) || (type == 0x153)) || ((type >= 0x169) && (type <= 0x16c))))
                    {
                        if ((!SolidTileAllowBottomSlope(k, num8) && ((!Game1.tile[k, num8].nactive() || !Game1.tileSolidTop[Game1.tile[k, num8].type]) || (Game1.tile[k, num8].frameY != 0))) && (!Game1.tile[k, num8].active() || (Game1.tile[k, num8].type != 0x13)))
                        {
                            flag = true;
                        }
                    }
                    else if (!SolidTileAllowBottomSlope(k, num8) && (!Game1.tile[k, num8].active() || (Game1.tile[k, num8].type != 0x13)))
                    {
                        flag = true;
                    }
                }
                if ((((type == 0xbb) && (Game1.tile[num5, num].frameX >= 0x2f4)) && ((Game1.tile[num5, num].frameX <= 900) && (Game1.tile[num5, num + 2].type != 2))) && ((Game1.tile[num5 + 1, num + 2].type != 2) && (Game1.tile[num5 + 2, num + 2].type != 2)))
                {
                    Tile tile1 = Game1.tile[num5, num];
                    tile1.frameX = (short)(tile1.frameX - 0x17a);
                    Tile tile2 = Game1.tile[num5 + 1, num];
                    tile2.frameX = (short)(tile2.frameX - 0x17a);
                    Tile tile3 = Game1.tile[num5 + 2, num];
                    tile3.frameX = (short)(tile3.frameX - 0x17a);
                    Tile tile4 = Game1.tile[num5, num + 1];
                    tile4.frameX = (short)(tile4.frameX - 0x17a);
                    Tile tile5 = Game1.tile[num5 + 1, num + 1];
                    tile5.frameX = (short)(tile5.frameX - 0x17a);
                    Tile tile6 = Game1.tile[num5 + 2, num + 1];
                    tile6.frameX = (short)(tile6.frameX - 0x17a);
                    Game1.tile[num5, num].type = 0xba;
                    Game1.tile[num5 + 1, num].type = 0xba;
                    Game1.tile[num5 + 2, num].type = 0xba;
                    Game1.tile[num5, num + 1].type = 0xba;
                    Game1.tile[num5 + 1, num + 1].type = 0xba;
                    Game1.tile[num5 + 2, num + 1].type = 0xba;
                }
                if (flag)
                {
                    int frameX = Game1.tile[i, j].frameX;
                    destroyObject = true;
                    num8 = num + 3;
                    if (flag2)
                    {
                        num8--;
                    }
                    for (int n = num5; n < (num5 + 3); n++)
                    {
                        for (int num13 = num; num13 < (num + 3); num13++)
                        {
                            if (Game1.tile[n, num13] == null)
                            {
                                Game1.tile[n, num13] = new Tile();
                            }
                            if ((Game1.tile[n, num13].type == type) && Game1.tile[n, num13].active())
                            {
                                KillTile(n, num13, false, false, false);
                            }
                        }
                    }
                    if (type == 14)
                    {
                        int num14;
                        if ((num6 >= 1) && (num6 <= 3))
                        {
                            num14 = 0x27d + num6;
                        }
                        else if ((num6 >= 15) && (num6 <= 20))
                        {
                            num14 = 0x6a2 + num6;
                        }
                        else if ((num6 >= 4) && (num6 <= 7))
                        {
                            num14 = 0x337 + num6;
                        }
                        else if (num6 == 8)
                        {
                            num14 = 0x395;
                        }
                        else if (num6 == 9)
                        {
                            num14 = 0x478;
                        }
                        else if (num6 == 10)
                        {
                            num14 = 0x575;
                        }
                        else if (num6 == 11)
                        {
                            num14 = 0x578;
                        }
                        else if (num6 == 12)
                        {
                            num14 = 0x57b;
                        }
                        else if (num6 == 13)
                        {
                            num14 = 0x5b4;
                        }
                        else if (num6 == 14)
                        {
                            num14 = 0x5e6;
                        }
                        else if (num6 == 0x17)
                        {
                            num14 = 0x786;
                        }
                        else if (num6 == 0x15)
                        {
                            num14 = 0x702;
                        }
                        else if (num6 == 0x16)
                        {
                            num14 = 0x718;
                        }
                        else if (num6 == 0x18)
                        {
                            num14 = 0x8c8;
                        }
                        else if (num6 == 0x19)
                        {
                            num14 = 0x8d3;
                        }
                        else if (num6 == 0x1a)
                        {
                            num14 = 0x9e4;
                        }
                        else if (num6 == 0x1b)
                        {
                            num14 = 0x9f6;
                        }
                        else if (num6 == 0x1c)
                        {
                            num14 = 0x2a5;
                        }
                        else if (num6 == 0x1d)
                        {
                            num14 = 0xa17;
                        }
                        else if (num6 == 30)
                        {
                            num14 = 0xab7;
                        }
                        else if (num6 == 0x1f)
                        {
                            num14 = 0xb08;
                        }
                        else if (num6 == 0x20)
                        {
                            num14 = 0xc51;
                        }
                        else if (num6 == 0x21)
                        {
                            num14 = 0xc53;
                        }
                        else if (num6 == 0x22)
                        {
                            num14 = 0xc52;
                        }
                        else
                        {
                            num14 = 0x20;
                        }
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, num14, 1, false, 0, false);
                    }
                    else if (type == 0x72)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x18e, 1, false, 0, false);
                    }
                    else if (type == 0x1a)
                    {
                        if (!noTileActions && !IsGeneratingHardMode)
                        {
                            SmashAltar(i, j);
                        }
                    }
                    else if (type == 0x12a)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x88e, 1, false, 0, false);
                    }
                    else if (type == 0x12b)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x88f, 1, false, 0, false);
                    }
                    else if ((type >= 0x169) && (type <= 0x16c))
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, (0xc01 + type) - 0x169, 1, false, 0, false);
                    }
                    else if ((type >= 0x187) && (type <= 0x18a))
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x30, 0x20, (0xcb6 + type) - 0x187, 1, false, 0, false);
                    }
                    else if (type == 0x11d)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x87e, 1, false, 0, false);
                    }
                    else if (type == 0x11e)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x87f, 1, false, 0, false);
                    }
                    else if (type == 310)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x89f, 1, false, 0, false);
                    }
                    else if (type == 0x153)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0xab5, 1, false, 0, false);
                    }
                    else if (type == 0xd9)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x3e3, 1, false, 0, false);
                    }
                    else if (type == 0xda)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x3e4, 1, false, 0, false);
                    }
                    else if (type == 0xdb)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x3e5, 1, false, 0, false);
                    }
                    else if (type == 220)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x3e6, 1, false, 0, false);
                    }
                    else if (type == 0x179)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0xc7e, 1, false, 0, false);
                    }
                    else if (type == 0xe4)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x460, 1, false, 0, false);
                    }
                    else if (type == 0x195)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0xd24, 1, false, 0, false);
                    }
                    else if (type == 0xd7)
                    {
                        if (num6 == 0)
                        {
                            Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x3c6, 1, false, 0, false);
                        }
                        else
                        {
                            Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, (0xbe6 + num6) - 1, 1, false, 0, false);
                        }
                    }
                    else if (type == 0xf4)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x5a9, 1, false, 0, false);
                    }
                    else if (type == 0x11)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x21, 1, false, 0, false);
                    }
                    else if (type == 0x4d)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0xdd, 1, false, 0, false);
                    }
                    else if (type == 0x56)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x14c, 1, false, 0, false);
                    }
                    else if (type == 0xed)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x50c, 1, false, 0, false);
                    }
                    else if (type == 0x57)
                    {
                        int num15;
                        if ((num6 >= 1) && (num6 <= 3))
                        {
                            num15 = 640 + num6;
                        }
                        else if (num6 == 4)
                        {
                            num15 = 0x397;
                        }
                        else if ((num6 >= 5) && (num6 <= 7))
                        {
                            num15 = (0x8c5 + num6) - 5;
                        }
                        else if ((num6 >= 8) && (num6 <= 10))
                        {
                            num15 = (0x8ce + num6) - 8;
                        }
                        else if ((num6 >= 11) && (num6 <= 20))
                        {
                            num15 = (0x948 + num6) - 11;
                        }
                        else if (num6 == 0x15)
                        {
                            num15 = 0x9e3;
                        }
                        else if (num6 == 0x16)
                        {
                            num15 = 0x9f4;
                        }
                        else if (num6 == 0x17)
                        {
                            num15 = 0xa05;
                        }
                        else if (num6 == 0x18)
                        {
                            num15 = 0xa14;
                        }
                        else if (num6 == 0x19)
                        {
                            num15 = 0xa6f;
                        }
                        else if (num6 == 0x1a)
                        {
                            num15 = 0xb05;
                        }
                        else if (num6 == 0x1b)
                        {
                            num15 = 0xc45;
                        }
                        else if (num6 == 0x1c)
                        {
                            num15 = 0xc47;
                        }
                        else if (num6 == 0x1d)
                        {
                            num15 = 0xc46;
                        }
                        else
                        {
                            num15 = 0x14d;
                        }
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, num15, 1, false, 0, false);
                    }
                    else if (type == 0x58)
                    {
                        int num16;
                        if ((num6 >= 1) && (num6 <= 3))
                        {
                            num16 = 0x286 + num6;
                        }
                        else if (num6 == 4)
                        {
                            num16 = 0x396;
                        }
                        else if ((num6 >= 5) && (num6 <= 15))
                        {
                            num16 = (0x952 + num6) - 5;
                        }
                        else if (num6 == 0x10)
                        {
                            num16 = 0x9e1;
                        }
                        else if (num6 == 0x11)
                        {
                            num16 = 0x9f1;
                        }
                        else if (num6 == 0x12)
                        {
                            num16 = 0xa02;
                        }
                        else if (num6 == 0x13)
                        {
                            num16 = 0xa11;
                        }
                        else if (num6 == 20)
                        {
                            num16 = 0xa4d;
                        }
                        else if (num6 == 0x15)
                        {
                            num16 = 0xa4e;
                        }
                        else if (num6 == 0x16)
                        {
                            num16 = 0xa4f;
                        }
                        else if (num6 == 0x17)
                        {
                            num16 = 0xa50;
                        }
                        else if (num6 == 0x18)
                        {
                            num16 = 0xb00;
                        }
                        else if (num6 == 0x19)
                        {
                            num16 = 0xc3c;
                        }
                        else if (num6 == 0x1a)
                        {
                            num16 = 0xc3e;
                        }
                        else if (num6 == 0x1b)
                        {
                            num16 = 0xc3d;
                        }
                        else
                        {
                            num16 = 0x14e;
                        }
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, num16, 1, false, 0, false);
                    }
                    else if (type == 0x59)
                    {
                        int num17;
                        if ((num6 >= 1) && (num6 <= 20))
                        {
                            num17 = (0x95d + num6) - 1;
                        }
                        else if (num6 == 0x15)
                        {
                            num17 = 0x9d9;
                        }
                        else if (num6 == 0x16)
                        {
                            num17 = 0x9df;
                        }
                        else if (num6 == 0x17)
                        {
                            num17 = 0x9eb;
                        }
                        else if (num6 == 0x18)
                        {
                            num17 = 0x35a;
                        }
                        else if (num6 == 0x19)
                        {
                            num17 = 0xa16;
                        }
                        else if (num6 == 0x1a)
                        {
                            num17 = 0xa4a;
                        }
                        else if (num6 == 0x1b)
                        {
                            num17 = 0xa4b;
                        }
                        else if (num6 == 0x1c)
                        {
                            num17 = 0xa4c;
                        }
                        else if (num6 == 0x1d)
                        {
                            num17 = 0xb07;
                        }
                        else if (num6 == 30)
                        {
                            num17 = 0xc4e;
                        }
                        else if (num6 == 0x1f)
                        {
                            num17 = 0xc50;
                        }
                        else if (num6 == 0x20)
                        {
                            num17 = 0xc4f;
                        }
                        else
                        {
                            num17 = 0x14f;
                        }
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, num17, 1, false, 0, false);
                    }
                    else if (type == 0x85)
                    {
                        if (frameX >= 0x36)
                        {
                            Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x4c5, 1, false, 0, false);
                        }
                        else
                        {
                            Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x20c, 1, false, 0, false);
                        }
                    }
                    else if (type == 0xba)
                    {
                        if (frameX >= 0x360)
                        {
                            if (frameX <= 0x3ba)
                            {
                                Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x47, genRand.Next(20, 100), false, 0, false);
                                Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x47, genRand.Next(30, 100), false, 0, false);
                                Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x47, genRand.Next(40, 100), false, 0, false);
                                if (genRand.Next(3) != 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x47, genRand.Next(20, 100), false, 0, false);
                                }
                                if (genRand.Next(3) != 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x47, genRand.Next(30, 100), false, 0, false);
                                }
                                if (genRand.Next(3) != 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x47, genRand.Next(40, 100), false, 0, false);
                                }
                                if (genRand.Next(2) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x47, genRand.Next(20, 100), false, 0, false);
                                }
                                if (genRand.Next(2) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x47, genRand.Next(30, 100), false, 0, false);
                                }
                                if (genRand.Next(2) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x47, genRand.Next(40, 100), false, 0, false);
                                }
                                if (genRand.Next(3) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x47, genRand.Next(20, 100), false, 0, false);
                                }
                                if (genRand.Next(3) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x47, genRand.Next(30, 100), false, 0, false);
                                }
                                if (genRand.Next(3) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x47, genRand.Next(40, 100), false, 0, false);
                                }
                                if (genRand.Next(4) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x47, genRand.Next(20, 100), false, 0, false);
                                }
                                if (genRand.Next(4) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x47, genRand.Next(30, 100), false, 0, false);
                                }
                                if (genRand.Next(4) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x47, genRand.Next(40, 100), false, 0, false);
                                }
                                if (genRand.Next(5) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x47, genRand.Next(20, 100), false, 0, false);
                                }
                                if (genRand.Next(5) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x47, genRand.Next(30, 100), false, 0, false);
                                }
                                if (genRand.Next(5) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x47, genRand.Next(40, 100), false, 0, false);
                                }
                            }
                            else if (frameX <= 0x426)
                            {
                                Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x48, genRand.Next(10, 100), false, 0, false);
                                if (genRand.Next(2) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x48, genRand.Next(20, 100), false, 0, false);
                                }
                                if (genRand.Next(3) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x48, genRand.Next(30, 100), false, 0, false);
                                }
                                if (genRand.Next(4) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x48, genRand.Next(40, 100), false, 0, false);
                                }
                                if (genRand.Next(5) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x48, genRand.Next(50, 100), false, 0, false);
                                }
                            }
                            else if (frameX <= 0x492)
                            {
                                Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x49, genRand.Next(1, 7), false, 0, false);
                                if (genRand.Next(2) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x49, genRand.Next(2, 7), false, 0, false);
                                }
                                if (genRand.Next(3) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x49, genRand.Next(3, 7), false, 0, false);
                                }
                                if (genRand.Next(4) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x49, genRand.Next(4, 7), false, 0, false);
                                }
                                if (genRand.Next(5) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x49, genRand.Next(5, 7), false, 0, false);
                                }
                            }
                        }
                    }
                    else if (((type == 0xbb) && (frameX >= 0x396)) && (frameX <= 970))
                    {
                        if (Game1.rand.Next(10) == 0)
                        {
                            Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0xd28, 1, false, 0, false);
                        }
                        else
                        {
                            Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x3dd, 1, false, 0, false);
                        }
                    }
                    destroyObject = false;
                    for (int num18 = num5 - 1; num18 < (num5 + 4); num18++)
                    {
                        for (int num19 = num - 1; num19 < (num + 4); num19++)
                        {
                            TileFrame(num18, num19, false, false);
                        }
                    }
                }
            }
        }

        public static void Check3x2Wall(int x, int y)
        {
            if (destroyObject)
            {
                return;
            }
            bool flag = false;
            int type = Game1.tile[x, y].type;
            int num2 = 0;
            int num3 = Game1.tile[x, y].frameY / 0x12;
            while (num3 >= 2)
            {
                num3 -= 2;
                num2++;
            }
            int num4 = y - num3;
            int num5 = x - (Game1.tile[x, y].frameX / 0x12);
            num3 = num2 * 0x24;
            for (int i = num5; i < (num5 + 3); i++)
            {
                for (int k = num4; k < (num4 + 2); k++)
                {
                    if (((Game1.tile[i, k].type != type) || !Game1.tile[i, k].active()) || (((Game1.tile[i, k].wall <= 0) || (Game1.tile[i, k].frameY != (num3 + ((k - num4) * 0x12)))) || (Game1.tile[i, k].frameX != ((i - num5) * 0x12))))
                    {
                        flag = true;
                        break;
                    }
                }
            }
            if (!flag)
            {
                return;
            }
            destroyObject = true;
            for (int j = num5; j < (num5 + 3); j++)
            {
                for (int m = num4; m < (num4 + 2); m++)
                {
                    if ((Game1.tile[j, m].type == type) && Game1.tile[j, m].active())
                    {
                        KillTile(j, m, false, false, false);
                    }
                }
            }
            if (type == 0xf6)
            {
                switch (num2)
                {
                    case 0x10:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x605, 1, false, 0, false);
                        goto Label_0211;

                    case 0x11:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x606, 1, false, 0, false);
                        goto Label_0211;

                    case 0x12:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x774, 1, false, 0, false);
                        goto Label_0211;
                }
                Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x5c7 + num2, 1, false, 0, false);
            }
        Label_0211:
            destroyObject = false;
        }

        public static void Check3x3(int i, int j, int type)
        {
            if (!destroyObject)
            {
                bool flag = false;
                int num = i;
                int num2 = j;
                num = Game1.tile[i, j].frameX / 0x12;
                int num3 = 0;
                while (num >= 3)
                {
                    num3++;
                    num -= 3;
                }
                int num4 = i - num;
                int num5 = 0x36 * num3;
                int num6 = Game1.tile[i, j].frameY / 0x36;
                int num7 = (Game1.tile[i, j].frameY % 0x36) / 0x12;
                if (num >= 3)
                {
                    num -= 3;
                }
                num = i - num;
                num2 -= num7;
                for (int k = num; k < (num + 3); k++)
                {
                    for (int m = num2; m < (num2 + 3); m++)
                    {
                        if (Game1.tile[k, m] == null)
                        {
                            Game1.tile[k, m] = new Tile();
                        }
                        if ((!Game1.tile[k, m].active() || (Game1.tile[k, m].type != type)) || ((Game1.tile[k, m].frameX != (((k - num4) * 0x12) + num5)) || (Game1.tile[k, m].frameY != (((m - num2) * 0x12) + (num6 * 0x36)))))
                        {
                            flag = true;
                        }
                    }
                }
                if ((((((type == 0x6a) || (type == 0xd4)) || ((type == 0xdb) || (type == 220))) || (((type == 0xe4) || (type == 0xe7)) || ((type == 0xf3) || (type == 0xf7)))) || ((type == 0x11b) || ((type >= 300) && (type <= 0x134)))) || (((type == 0x162) || (type == 0x163)) || ((type == 0x196) || (type == 0x19c))))
                {
                    for (int n = num; n < (num + 3); n++)
                    {
                        if (Game1.tile[n, num2 + 3] == null)
                        {
                            Game1.tile[n, num2 + 3] = new Tile();
                        }
                        if (!SolidTileAllowBottomSlope(n, num2 + 3) && (!Game1.tile[n, num2 + 3].active() || (Game1.tile[n, num2 + 3].type != 0x13)))
                        {
                            flag = true;
                            break;
                        }
                    }
                }
                else
                {
                    if (Game1.tile[num + 1, num2 - 1] == null)
                    {
                        Game1.tile[num + 1, num2 - 1] = new Tile();
                    }
                    if ((!Game1.tile[num + 1, num2 - 1].nactive() || !Game1.tileSolid[Game1.tile[num + 1, num2 - 1].type]) || Game1.tileSolidTop[Game1.tile[num + 1, num2 - 1].type])
                    {
                        flag = true;
                    }
                }
                if (flag)
                {
                    destroyObject = true;
                    for (int num11 = num; num11 < (num + 3); num11++)
                    {
                        for (int num12 = num2; num12 < (num2 + 3); num12++)
                        {
                            if ((Game1.tile[num11, num12].type == type) && Game1.tile[num11, num12].active())
                            {
                                KillTile(num11, num12, false, false, false);
                            }
                        }
                    }
                    if (type == 0x6a)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x16b, 1, false, 0, false);
                    }
                    else if (type == 0xf3)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x596, 1, false, 0, false);
                    }
                    else if (type == 0xd4)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x3b7, 1, false, 0, false);
                    }
                    else if (type == 0xdb)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x3e5, 1, false, 0, false);
                    }
                    else if (type == 220)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x3e6, 1, false, 0, false);
                    }
                    else if (type == 0xe4)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x460, 1, false, 0, false);
                    }
                    else if (type == 0xf7)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x60f, 1, false, 0, false);
                    }
                    else if (type == 0x11b)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x87c, 1, false, 0, false);
                    }
                    else if ((type >= 300) && (type <= 0x132))
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, (0x890 + type) - 300, 1, false, 0, false);
                    }
                    else if (type == 0x133)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x89b, 1, false, 0, false);
                    }
                    else if (type == 0x134)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x89c, 1, false, 0, false);
                    }
                    else if (type == 0x196)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0xd25, 1, false, 0, false);
                    }
                    else if (type == 0x162)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0xbb7, 1, false, 0, false);
                    }
                    else if (type == 0x163)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0xbb8, 1, false, 0, false);
                    }
                    else if (type == 0x19c)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0xddd, 1, false, 0, false);
                    }
                    else if (type == 0xe7)
                    {
                        int num13 = ((i + 1) * 0x10) + 8;
                        int num14 = j * 0x10;
                        Gore.NewGore(new Vector2((float)num13, (float)num14), new Vector2(), 300, 1f);
                        Gore.NewGore(new Vector2((float)num13, (float)(num14 + 8)), new Vector2(), 0x12d, 1f);
                        Gore.NewGore(new Vector2((float)num13, (float)(num14 + 0x10)), new Vector2(), 0x12e, 1f);
                        float num15 = i * 0x10;
                        float num16 = j * 0x10;
                        float num17 = -1f;
                        int plr = 0;
                        for (int num19 = 0; num19 < 0xff; num19++)
                        {
                            if (Game1.player[num19].active && !Game1.player[num19].dead)
                            {
                                float introduced26 = Math.Abs((float)(Game1.player[num19].position.X - num15));
                                float num20 = introduced26 + Math.Abs((float)(Game1.player[num19].position.Y - num16));
                                if ((num20 < num17) || (num17 == -1f))
                                {
                                    plr = num19;
                                    num17 = num20;
                                }
                            }
                        }
                        NPC.SpawnOnPlayer(plr, 0xde);
                    }
                    destroyObject = false;
                    for (int num21 = num - 1; num21 < (num + 4); num21++)
                    {
                        for (int num22 = num2 - 1; num22 < (num2 + 4); num22++)
                        {
                            TileFrame(num21, num22, false, false);
                        }
                    }
                }
            }
        }

        public static void Check3x3Wall(int x, int y)
        {
            if (destroyObject)
            {
                return;
            }
            bool flag = false;
            int type = Game1.tile[x, y].type;
            int num2 = 0;
            int num3 = 0;
            int num4 = Game1.tile[x, y].frameX / 0x12;
            while (num4 >= 3)
            {
                num4 -= 3;
                num2++;
            }
            int num5 = x - num4;
            int num6 = Game1.tile[x, y].frameY / 0x12;
            while (num6 >= 3)
            {
                num6 -= 3;
                num3++;
            }
            int num7 = y - num6;
            num6 = num3 * 0x36;
            num4 = num2 * 0x36;
            for (int i = num5; i < (num5 + 3); i++)
            {
                for (int k = num7; k < (num7 + 3); k++)
                {
                    if (((Game1.tile[i, k].type != type) || !Game1.tile[i, k].active()) || (((Game1.tile[i, k].wall <= 0) || (Game1.tile[i, k].frameX != (num4 + ((i - num5) * 0x12)))) || (Game1.tile[i, k].frameY != (num6 + ((k - num7) * 0x12)))))
                    {
                        flag = true;
                        break;
                    }
                }
            }
            if (!flag)
            {
                return;
            }
            destroyObject = true;
            for (int j = num5; j < (num5 + 3); j++)
            {
                for (int m = num7; m < (num7 + 3); m++)
                {
                    if ((Game1.tile[j, m].type == type) && Game1.tile[j, m].active())
                    {
                        KillTile(j, m, false, false, false);
                    }
                }
            }
            num2 += num3 * 0x24;
            if (type == 240)
            {
                switch (num2)
                {
                    case 0x25:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x740, 1, false, 0, false);
                        goto Label_0555;

                    case 0x24:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x73f, 1, false, 0, false);
                        goto Label_0555;

                    case 0x26:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x7a8, 1, false, 0, false);
                        goto Label_0555;

                    case 0x27:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x7a9, 1, false, 0, false);
                        goto Label_0555;

                    case 40:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x7aa, 1, false, 0, false);
                        goto Label_0555;

                    case 0x21:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x626, 1, false, 0, false);
                        goto Label_0555;

                    case 0x22:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x627, 1, false, 0, false);
                        goto Label_0555;

                    case 0x23:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x628, 1, false, 0, false);
                        goto Label_0555;

                    case 0x12:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x58b, 1, false, 0, false);
                        goto Label_0555;

                    case 0x13:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x58c, 1, false, 0, false);
                        goto Label_0555;

                    case 20:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x593, 1, false, 0, false);
                        goto Label_0555;

                    case 0x15:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x594, 1, false, 0, false);
                        goto Label_0555;

                    case 0x36:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x9b9, 1, false, 0, false);
                        goto Label_0555;

                    case 0x37:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0xa1d, 1, false, 0, false);
                        goto Label_0555;

                    case 0x38:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0xd1d, 1, false, 0, false);
                        goto Label_0555;

                    case 0x39:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0xd1e, 1, false, 0, false);
                        goto Label_0555;

                    case 0x3a:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0xd1f, 1, false, 0, false);
                        goto Label_0555;

                    case 0x3b:
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0xe0b, 1, false, 0, false);
                        goto Label_0555;
                }
                if ((num2 >= 0x29) && (num2 <= 0x2d))
                {
                    Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, (0x842 + num2) - 0x29, 1, false, 0, false);
                }
                else if ((num2 >= 0x2e) && (num2 <= 0x35))
                {
                    Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, (0x98a + num2) - 0x2e, 1, false, 0, false);
                }
                else if ((num2 >= 0x16) && (num2 <= 0x19))
                {
                    Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, (0x5a0 + num2) - 0x16, 1, false, 0, false);
                }
                else if ((num2 >= 0x1a) && (num2 <= 0x1d))
                {
                    Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, (0x5d8 + num2) - 0x1a, 1, false, 0, false);
                }
                else if ((num2 >= 30) && (num2 <= 0x20))
                {
                    Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, (0x602 + num2) - 30, 1, false, 0, false);
                }
                else
                {
                    Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x550 + num2, 1, false, 0, false);
                }
            }
        Label_0555:
            destroyObject = false;
        }

        public static void Check3x4(int i, int j, int type)
        {
            if (!destroyObject)
            {
                bool flag = false;
                int num = i;
                int num2 = j;
                int num3 = 0;
                int num4 = Game1.tile[i, j].frameX / 0x12;
                while (num4 >= 3)
                {
                    num3++;
                    num4 -= 3;
                }
                num -= num4;
                num2 += (Game1.tile[i, j].frameY / 0x12) * -1;
                for (int k = num; k < (num + 3); k++)
                {
                    for (int m = num2; m < (num2 + 4); m++)
                    {
                        if (Game1.tile[k, m] == null)
                        {
                            Game1.tile[k, m] = new Tile();
                        }
                        if ((!Game1.tile[k, m].active() || (Game1.tile[k, m].type != type)) || ((Game1.tile[k, m].frameX != ((num3 * 0x36) + ((k - num) * 0x12))) || (Game1.tile[k, m].frameY != ((m - num2) * 0x12))))
                        {
                            flag = true;
                        }
                    }
                    if (Game1.tile[k, num2 + 4] == null)
                    {
                        Game1.tile[k, num2 + 4] = new Tile();
                    }
                    if (!SolidTileAllowBottomSlope(k, num2 + 4))
                    {
                        flag = true;
                    }
                }
                if (flag)
                {
                    destroyObject = true;
                    for (int n = num; n < (num + 3); n++)
                    {
                        for (int num8 = num2; num8 < (num2 + 4); num8++)
                        {
                            if ((Game1.tile[n, num8].type == type) && Game1.tile[n, num8].active())
                            {
                                KillTile(n, num8, false, false, false);
                            }
                        }
                    }
                    if (type != 0x65)
                    {
                        if (type == 0x66)
                        {
                            Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x163, 1, false, 0, false);
                        }
                    }
                    else
                    {
                        int num9;
                        switch (num3)
                        {
                            case 1:
                                num9 = 0x586;
                                break;

                            case 2:
                                num9 = 0x587;
                                break;

                            case 3:
                                num9 = 0x588;
                                break;

                            case 4:
                                num9 = 0x5b7;
                                break;

                            case 5:
                                num9 = 0x5e8;
                                break;

                            case 6:
                                num9 = 0x7e4;
                                break;

                            case 7:
                                num9 = 0x7e5;
                                break;

                            case 8:
                                num9 = 0x7e6;
                                break;

                            case 9:
                                num9 = 0x7e7;
                                break;

                            case 10:
                                num9 = 0x7e8;
                                break;

                            case 11:
                                num9 = 0x7e9;
                                break;

                            case 12:
                                num9 = 0x7ea;
                                break;

                            case 13:
                                num9 = 0x7eb;
                                break;

                            case 14:
                                num9 = 0x7ec;
                                break;

                            case 15:
                                num9 = 0x7ed;
                                break;

                            case 0x10:
                                num9 = 0x7ee;
                                break;

                            case 0x11:
                                num9 = 0x7ef;
                                break;

                            default:
                                if ((num3 >= 0x12) && (num3 <= 0x15))
                                {
                                    num9 = (0x857 + num3) - 0x12;
                                }
                                else if (num3 == 0x16)
                                {
                                    num9 = 0x8b9;
                                }
                                else if (num3 == 0x17)
                                {
                                    num9 = 0x9e8;
                                }
                                else if (num3 == 0x18)
                                {
                                    num9 = 0x9ec;
                                }
                                else if (num3 == 0x19)
                                {
                                    num9 = 0x9fa;
                                }
                                else if (num3 == 0x1a)
                                {
                                    num9 = 0xa09;
                                }
                                else if (num3 == 0x1b)
                                {
                                    num9 = 0xa6e;
                                }
                                else if (num3 == 0x1c)
                                {
                                    num9 = 0xb01;
                                }
                                else if (num3 == 0x1d)
                                {
                                    num9 = 0xc5d;
                                }
                                else if (num3 == 30)
                                {
                                    num9 = 0xc5f;
                                }
                                else if (num3 == 0x1f)
                                {
                                    num9 = 0xc5e;
                                }
                                else
                                {
                                    num9 = 0x162;
                                }
                                break;
                        }
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, num9, 1, false, 0, false);
                    }
                    destroyObject = false;
                    for (int num10 = num - 1; num10 < (num + 4); num10++)
                    {
                        for (int num11 = num2 - 1; num11 < (num2 + 4); num11++)
                        {
                            TileFrame(num10, num11, false, false);
                        }
                    }
                }
            }
        }

        public static void Check4x2(int i, int j, int type)
        {
            if (!destroyObject)
            {
                bool flag = false;
                int num = i;
                num += (Game1.tile[i, j].frameX / 0x12) * -1;
                if (((type == 0x4f) || (type == 90)) && (Game1.tile[i, j].frameX >= 0x48))
                {
                    num += 4;
                }
                int num2 = Game1.tile[i, j].frameY / 0x12;
                int num3 = 0;
                while (num2 > 1)
                {
                    num2 -= 2;
                    num3++;
                }
                num2 = j - num2;
                for (int k = num; k < (num + 4); k++)
                {
                    for (int m = num2; m < (num2 + 2); m++)
                    {
                        int num6 = (k - num) * 0x12;
                        if (((type == 0x4f) || (type == 90)) && (Game1.tile[i, j].frameX >= 0x48))
                        {
                            num6 = ((k - num) + 4) * 0x12;
                        }
                        if (Game1.tile[k, m] == null)
                        {
                            Game1.tile[k, m] = new Tile();
                        }
                        if ((!Game1.tile[k, m].active() || (Game1.tile[k, m].type != type)) || ((Game1.tile[k, m].frameX != num6) || (Game1.tile[k, m].frameY != (((m - num2) * 0x12) + (num3 * 0x24)))))
                        {
                            flag = true;
                        }
                    }
                    if (Game1.tile[k, num2 + 2] == null)
                    {
                        Game1.tile[k, num2 + 2] = new Tile();
                    }
                    if (!SolidTileAllowBottomSlope(k, num2 + 2) && (!Game1.tile[k, num2 + 2].active() || (Game1.tile[k, num2 + 2].type != 0x13)))
                    {
                        flag = true;
                    }
                }
                if (flag)
                {
                    destroyObject = true;
                    for (int n = num; n < (num + 4); n++)
                    {
                        for (int num8 = num2; num8 < (num2 + 3); num8++)
                        {
                            if ((Game1.tile[n, num8].type == type) && Game1.tile[n, num8].active())
                            {
                                KillTile(n, num8, false, false, false);
                            }
                        }
                    }
                    if (type == 0x4f)
                    {
                        int num9 = 0;
                        switch (num3)
                        {
                            case 0:
                                num9 = 0xe0;
                                break;

                            case 4:
                                num9 = 920;
                                break;

                            default:
                                if ((num3 >= 9) && (num3 <= 12))
                                {
                                    num9 = 0x6ae + num3;
                                }
                                else if ((num3 >= 5) && (num3 <= 8))
                                {
                                    num9 = 0x5b9 + num3;
                                }
                                else if ((num3 >= 13) && (num3 <= 0x12))
                                {
                                    num9 = (0x812 + num3) - 13;
                                }
                                else if (num3 == 0x13)
                                {
                                    num9 = 0x85b;
                                }
                                else if (num3 == 20)
                                {
                                    num9 = 0x85c;
                                }
                                else if (num3 == 0x15)
                                {
                                    num9 = 0x8b7;
                                }
                                else if (num3 == 0x16)
                                {
                                    num9 = 0x9d8;
                                }
                                else if (num3 == 0x17)
                                {
                                    num9 = 0x9ea;
                                }
                                else if (num3 == 0x18)
                                {
                                    num9 = 0x9f9;
                                }
                                else if (num3 == 0x19)
                                {
                                    num9 = 0xa08;
                                }
                                else if (num3 == 0x1a)
                                {
                                    num9 = 0xa6d;
                                }
                                else if (num3 == 0x1b)
                                {
                                    num9 = 0xafb;
                                }
                                else if (num3 == 0x1c)
                                {
                                    num9 = 0xc5a;
                                }
                                else if (num3 == 0x1d)
                                {
                                    num9 = 0xc5c;
                                }
                                else if (num3 == 30)
                                {
                                    num9 = 0xc5b;
                                }
                                else
                                {
                                    num9 = num3 + 0x283;
                                }
                                break;
                        }
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, num9, 1, false, 0, false);
                    }
                    if (type == 90)
                    {
                        int num10 = 0;
                        if (num3 == 0)
                        {
                            num10 = 0x150;
                        }
                        else if ((num3 >= 1) && (num3 <= 10))
                        {
                            num10 = (0x818 + num3) - 1;
                        }
                        else if ((num3 >= 11) && (num3 <= 15))
                        {
                            num10 = (0x84c + num3) - 11;
                        }
                        else if (num3 == 0x10)
                        {
                            num10 = 0x8b8;
                        }
                        else if (num3 == 0x11)
                        {
                            num10 = 0x9d7;
                        }
                        else if (num3 == 0x12)
                        {
                            num10 = 0x9e9;
                        }
                        else if (num3 == 0x13)
                        {
                            num10 = 0x9f8;
                        }
                        else if (num3 == 20)
                        {
                            num10 = 0xa07;
                        }
                        else if (num3 == 0x15)
                        {
                            num10 = 0xa62;
                        }
                        else if (num3 == 0x16)
                        {
                            num10 = 0xa63;
                        }
                        else if (num3 == 0x17)
                        {
                            num10 = 0xa64;
                        }
                        else if (num3 == 0x18)
                        {
                            num10 = 0xa65;
                        }
                        else if (num3 == 0x19)
                        {
                            num10 = 0xa66;
                        }
                        else if (num3 == 0x1a)
                        {
                            num10 = 0xa67;
                        }
                        else if (num3 == 0x1b)
                        {
                            num10 = 0xafa;
                        }
                        else if (num3 == 0x1c)
                        {
                            num10 = 0xc57;
                        }
                        else if (num3 == 0x1d)
                        {
                            num10 = 0xc59;
                        }
                        else if (num3 == 30)
                        {
                            num10 = 0xc58;
                        }
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, num10, 1, false, 0, false);
                    }
                    destroyObject = false;
                    for (int num11 = num - 1; num11 < (num + 4); num11++)
                    {
                        for (int num12 = num2 - 1; num12 < (num2 + 4); num12++)
                        {
                            TileFrame(num11, num12, false, false);
                        }
                    }
                }
            }
        }

        public static void Check4x3Wall(int x, int y)
        {
            if (!destroyObject)
            {
                bool flag = false;
                int type = Game1.tile[x, y].type;
                int num2 = 0;
                int num3 = Game1.tile[x, y].frameY / 0x12;
                while (num3 >= 3)
                {
                    num3 -= 3;
                    num2++;
                }
                int num4 = y - num3;
                int num5 = x - (Game1.tile[x, y].frameX / 0x12);
                num3 = num2 * 0x36;
                for (int i = num5; i < (num5 + 4); i++)
                {
                    for (int j = num4; j < (num4 + 3); j++)
                    {
                        if (((Game1.tile[i, j].type != type) || !Game1.tile[i, j].active()) || (((Game1.tile[i, j].wall <= 0) || (Game1.tile[i, j].frameY != (num3 + ((j - num4) * 0x12)))) || (Game1.tile[i, j].frameX != ((i - num5) * 0x12))))
                        {
                            flag = true;
                            break;
                        }
                    }
                }
                if (flag)
                {
                    destroyObject = true;
                    for (int k = num5; k < (num5 + 4); k++)
                    {
                        for (int m = num4; m < (num4 + 3); m++)
                        {
                            if ((Game1.tile[k, m].type == type) && Game1.tile[k, m].active())
                            {
                                KillTile(k, m, false, false, false);
                            }
                        }
                    }
                    if (type == 0xf1)
                    {
                        Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x589, 1, false, 0, false);
                    }
                    destroyObject = false;
                }
            }
        }

        public static void Check6x3(int i, int j, int type)
        {
            if (!destroyObject)
            {
                bool flag = false;
                int num = i;
                int num2 = j;
                num += (Game1.tile[i, j].frameX / 0x12) * -1;
                num2 += (Game1.tile[i, j].frameY / 0x12) * -1;
                for (int k = num; k < (num + 6); k++)
                {
                    for (int m = num2; m < (num2 + 3); m++)
                    {
                        int num5 = (k - num) * 0x12;
                        if (Game1.tile[k, m] == null)
                        {
                            Game1.tile[k, m] = new Tile();
                        }
                        if ((!Game1.tile[k, m].active() || (Game1.tile[k, m].type != type)) || ((Game1.tile[k, m].frameX != num5) || (Game1.tile[k, m].frameY != ((m - num2) * 0x12))))
                        {
                            flag = true;
                        }
                    }
                    if (Game1.tile[k, num2 + 3] == null)
                    {
                        Game1.tile[k, num2 + 3] = new Tile();
                    }
                    if (!SolidTileAllowBottomSlope(k, num2 + 3) && ((!Game1.tile[k, num2 + 3].nactive() || !Game1.tileSolidTop[Game1.tile[k, num2 + 3].type]) || (Game1.tile[k, num2 + 3].frameY != 0)))
                    {
                        flag = true;
                    }
                }
                if (flag)
                {
                    destroyObject = true;
                    for (int n = num; n < (num + 6); n++)
                    {
                        for (int num7 = num2; num7 < (num2 + 3); num7++)
                        {
                            if ((Game1.tile[n, num7].type == type) && Game1.tile[n, num7].active())
                            {
                                KillTile(n, num7, false, false, false);
                            }
                        }
                    }
                    if (type == 0x113)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x872, 1, false, 0, false);
                    }
                    if (type == 0x19d)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0xded, 1, false, 0, false);
                    }
                    if (type == 0x19e)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0xdee, 1, false, 0, false);
                    }
                    if (type == 0x114)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x873, 1, false, 0, false);
                    }
                    if (type == 0x115)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x874, 1, false, 0, false);
                    }
                    if (type == 0x116)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x875, 1, false, 0, false);
                    }
                    if (type == 0x117)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x876, 1, false, 0, false);
                    }
                    if (type == 280)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x877, 1, false, 0, false);
                    }
                    if (type == 0x119)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x878, 1, false, 0, false);
                    }
                    if (type == 0x128)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x88a, 1, false, 0, false);
                    }
                    if (type == 0x129)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x88b, 1, false, 0, false);
                    }
                    if (type == 0x135)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x89e, 1, false, 0, false);
                    }
                    if (type == 0x166)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0xbfe, 1, false, 0, false);
                    }
                    if (type == 0x167)
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0xbff, 1, false, 0, false);
                    }
                    destroyObject = false;
                    for (int num8 = num - 1; num8 < (num + 7); num8++)
                    {
                        for (int num9 = num2 - 1; num9 < (num2 + 4); num9++)
                        {
                            TileFrame(num8, num9, false, false);
                        }
                    }
                }
            }
        }

        public static void Check6x4Wall(int x, int y)
        {
            if (!destroyObject)
            {
                bool flag = false;
                int type = Game1.tile[x, y].type;
                int num2 = 0;
                int num3 = Game1.tile[x, y].frameY / 0x12;
                int num4 = Game1.tile[x, y].frameX / 0x12;
                num2 = (0x1b * (num4 / 6)) + (num3 >> 2);
                num3 = num3 % 4;
                num4 = num4 % 6;
                int num5 = y - num3;
                int num6 = x - ((Game1.tile[x, y].frameX / 0x12) % 6);
                num3 = (num2 % 0x1b) * 0x48;
                num4 = (num2 / 0x1b) * 0x6c;
                for (int i = num6; i < (num6 + 6); i++)
                {
                    for (int j = num5; j < (num5 + 4); j++)
                    {
                        if (((Game1.tile[i, j].type != type) || !Game1.tile[i, j].active()) || (((Game1.tile[i, j].wall <= 0) || (Game1.tile[i, j].frameY != (num3 + ((j - num5) * 0x12)))) || (Game1.tile[i, j].frameX != (num4 + ((i - num6) * 0x12)))))
                        {
                            flag = true;
                            break;
                        }
                    }
                }
                if (flag)
                {
                    destroyObject = true;
                    for (int k = num6; k < (num6 + 6); k++)
                    {
                        for (int m = num5; m < (num5 + 4); m++)
                        {
                            if ((Game1.tile[k, m].type == type) && Game1.tile[k, m].active())
                            {
                                KillTile(k, m, false, false, false);
                            }
                        }
                    }
                    if (type == 0xf2)
                    {
                        if (num2 == 30)
                        {
                            Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0xbb3, 1, false, 0, false);
                        }
                        else if ((num2 >= 0x1f) && (num2 <= 0x23))
                        {
                            Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, (0xbef + num2) - 0x1f, 1, false, 0, false);
                        }
                        else if ((num2 >= 0x1b) && (num2 <= 0x1d))
                        {
                            Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, (0xb31 + num2) - 0x1b, 1, false, 0, false);
                        }
                        else if (num2 == 0x24)
                        {
                            Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0xe0c, 1, false, 0, false);
                        }
                        else if (num2 == 0x1a)
                        {
                            Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x9c1, 1, false, 0, false);
                        }
                        else if (num2 == 0x19)
                        {
                            Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x9bf, 1, false, 0, false);
                        }
                        else if (num2 >= 0x16)
                        {
                            Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, (0x8e9 + num2) - 0x16, 1, false, 0, false);
                        }
                        else if (num2 >= 0x11)
                        {
                            Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, (0x736 + num2) - 0x11, 1, false, 0, false);
                        }
                        else if (num2 == 0x10)
                        {
                            Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x625, 1, false, 0, false);
                        }
                        else if (num2 >= 13)
                        {
                            Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, (0x5dc + num2) - 13, 1, false, 0, false);
                        }
                        else if (num2 >= 6)
                        {
                            Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, (0x599 + num2) - 6, 1, false, 0, false);
                        }
                        else
                        {
                            Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x58d + num2, 1, false, 0, false);
                        }
                    }
                    destroyObject = false;
                }
            }
        }

        public static void CheckAlch(int x, int y)
        {
            if (Game1.tile[x, y] == null)
            {
                Game1.tile[x, y] = new Tile();
            }
            if (Game1.tile[x, y + 1] == null)
            {
                Game1.tile[x, y + 1] = new Tile();
            }
            bool flag = false;
            if (!Game1.tile[x, y + 1].active())
            {
                flag = true;
            }
            if (Game1.tile[x, y + 1].halfBrick())
            {
                flag = true;
            }
            int num = Game1.tile[x, y].frameX / 0x12;
            Game1.tile[x, y].frameY = 0;
            if (!flag)
            {
                switch (num)
                {
                    case 0:
                        if (((Game1.tile[x, y + 1].type != 0x6d) && (Game1.tile[x, y + 1].type != 2)) && ((Game1.tile[x, y + 1].type != 0x4e) && (Game1.tile[x, y + 1].type != 380)))
                        {
                            flag = true;
                        }
                        if ((Game1.tile[x, y].liquid > 0) && Game1.tile[x, y].lava())
                        {
                            flag = true;
                        }
                        break;

                    case 1:
                        if (((Game1.tile[x, y + 1].type != 60) && (Game1.tile[x, y + 1].type != 0x4e)) && (Game1.tile[x, y + 1].type != 380))
                        {
                            flag = true;
                        }
                        if ((Game1.tile[x, y].liquid > 0) && Game1.tile[x, y].lava())
                        {
                            flag = true;
                        }
                        break;

                    case 2:
                        if (((Game1.tile[x, y + 1].type != 0) && (Game1.tile[x, y + 1].type != 0x3b)) && ((Game1.tile[x, y + 1].type != 0x4e) && (Game1.tile[x, y + 1].type != 380)))
                        {
                            flag = true;
                        }
                        if ((Game1.tile[x, y].liquid > 0) && Game1.tile[x, y].lava())
                        {
                            flag = true;
                        }
                        break;

                    case 3:
                        if ((((Game1.tile[x, y + 1].type != 0xc7) && (Game1.tile[x, y + 1].type != 0xcb)) && ((Game1.tile[x, y + 1].type != 0x17) && (Game1.tile[x, y + 1].type != 0x19))) && ((Game1.tile[x, y + 1].type != 0x4e) && (Game1.tile[x, y + 1].type != 380)))
                        {
                            flag = true;
                        }
                        if ((Game1.tile[x, y].liquid > 0) && Game1.tile[x, y].lava())
                        {
                            flag = true;
                        }
                        break;

                    case 4:
                        if (((Game1.tile[x, y + 1].type != 0x35) && (Game1.tile[x, y + 1].type != 0x4e)) && ((Game1.tile[x, y + 1].type != 380) && (Game1.tile[x, y + 1].type != 0x74)))
                        {
                            flag = true;
                        }
                        if ((Game1.tile[x, y].liquid > 0) && Game1.tile[x, y].lava())
                        {
                            flag = true;
                        }
                        break;

                    case 5:
                        if (((Game1.tile[x, y + 1].type != 0x39) && (Game1.tile[x, y + 1].type != 0x4e)) && (Game1.tile[x, y + 1].type != 380))
                        {
                            flag = true;
                        }
                        if ((Game1.tile[x, y].liquid > 0) && !Game1.tile[x, y].lava())
                        {
                            flag = true;
                        }
                        if ((((Game1.tile[x, y].type != 0x52) && Game1.tile[x, y].lava()) && ((Game1.tile[x, y].type != 0x52) && Game1.tile[x, y].lava())) && (Game1.netMode != 1))
                        {
                            if (Game1.tile[x, y].liquid > 0x10)
                            {
                                if (Game1.tile[x, y].type == 0x53)
                                {
                                    Game1.tile[x, y].type = 0x54;
                                    if (Game1.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, x, y, 1);
                                    }
                                }
                            }
                            else if (Game1.tile[x, y].type == 0x54)
                            {
                                Game1.tile[x, y].type = 0x53;
                                if (Game1.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, x, y, 1);
                                }
                            }
                        }
                        break;

                    case 6:
                        if ((((Game1.tile[x, y + 1].type != 0x4e) && (Game1.tile[x, y + 1].type != 380)) && ((Game1.tile[x, y + 1].type != 0x93) && (Game1.tile[x, y + 1].type != 0xa1))) && (((Game1.tile[x, y + 1].type != 0xa3) && (Game1.tile[x, y + 1].type != 0xa4)) && (Game1.tile[x, y + 1].type != 200)))
                        {
                            flag = true;
                        }
                        if ((Game1.tile[x, y].liquid > 0) && Game1.tile[x, y].lava())
                        {
                            flag = true;
                        }
                        break;
                }
            }
            if (flag)
            {
                KillTile(x, y, false, false, false);
            }
        }

        public static void CheckBanner(int x, int j, byte type)
        {
            if (!destroyObject)
            {
                int num = Game1.tile[x, j].frameY / 0x12;
                int num2 = 0;
                while (num >= 3)
                {
                    num -= 3;
                    num2++;
                }
                num = j - num;
                int frameX = Game1.tile[x, j].frameX;
                bool flag = false;
                for (int i = 0; i < 3; i++)
                {
                    if (Game1.tile[x, num + i] == null)
                    {
                        Game1.tile[x, num + i] = new Tile();
                    }
                    if (!Game1.tile[x, num + i].active())
                    {
                        flag = true;
                    }
                    else if (Game1.tile[x, num + i].type != type)
                    {
                        flag = true;
                    }
                    else if (Game1.tile[x, num + i].frameY != ((i * 0x12) + ((num2 * 0x12) * 3)))
                    {
                        flag = true;
                    }
                    else if (Game1.tile[x, num + i].frameX != frameX)
                    {
                        flag = true;
                    }
                }
                if (Game1.tile[x, num - 1] == null)
                {
                    Game1.tile[x, num - 1] = new Tile();
                }
                if (!Game1.tile[x, num - 1].nactive())
                {
                    flag = true;
                }
                if ((((!Game1.tile[x, num - 1].topSlope() && !Game1.tile[x, num - 1].halfBrick()) && !Game1.tileSolid[Game1.tile[x, num - 1].type]) || (Game1.tileSolidTop[Game1.tile[x, num - 1].type] && ((Game1.tile[x, num - 1].type != 0x13) || (!Game1.tile[x, num - 1].halfBrick() && !Game1.tile[x, num - 1].topSlope())))) || (TileID.Sets.NotReallySolid[Game1.tile[x, num - 1].type] || Game1.tile[x, num - 1].bottomSlope()))
                {
                    flag = true;
                }
                if (flag)
                {
                    destroyObject = true;
                    for (int k = 0; k < 3; k++)
                    {
                        if (Game1.tile[x, num + k].type == type)
                        {
                            KillTile(x, num + k, false, false, false);
                        }
                    }
                    if (type == 0x5b)
                    {
                        int num6 = frameX / 0x12;
                        num6 += num2 * 0x6f;
                        if (num6 >= 270)
                        {
                            Item.NewItem(x * 0x10, (num + 1) * 0x10, 0x20, 0x20, 0xcfb + num6, 1, false, 0, false);
                        }
                        else if (num6 >= 0xcf)
                        {
                            Item.NewItem(x * 0x10, (num + 1) * 0x10, 0x20, 0x20, 0xc6f + num6, 1, false, 0, false);
                        }
                        else if (num6 >= 0x6d)
                        {
                            Item.NewItem(x * 0x10, (num + 1) * 0x10, 0x20, 0x20, 0xae4 + num6, 1, false, 0, false);
                        }
                        else if (num6 >= 0x16)
                        {
                            Item.NewItem(x * 0x10, (num + 1) * 0x10, 0x20, 0x20, 0x639 + num6, 1, false, 0, false);
                        }
                        else if ((num6 >= 10) && (num6 <= 15))
                        {
                            Item.NewItem(x * 0x10, (num + 1) * 0x10, 0x20, 0x20, 0x5a1 + num6, 1, false, 0, false);
                        }
                        else if ((num6 >= 0x10) && (num6 <= 0x15))
                        {
                            Item.NewItem(x * 0x10, (num + 1) * 0x10, 0x20, 0x20, 0x5a8 + num6, 1, false, 0, false);
                        }
                        else if ((num6 >= 7) && (num6 <= 9))
                        {
                            Item.NewItem(x * 0x10, (num + 1) * 0x10, 0x20, 0x20, 0x346 + num6, 1, false, 0, false);
                        }
                        else if ((num6 >= 4) && (num6 <= 6))
                        {
                            Item.NewItem(x * 0x10, (num + 1) * 0x10, 0x20, 0x20, 0x311 + num6, 1, false, 0, false);
                        }
                        else
                        {
                            Item.NewItem(x * 0x10, (num + 1) * 0x10, 0x20, 0x20, 0x151 + num6, 1, false, 0, false);
                        }
                    }
                    destroyObject = false;
                }
            }
        }

        public static bool CheckBoulderChest(int i, int j)
        {
            int num = (Game1.tile[i, j].frameX / 0x12) * -1;
            if (num < -1)
            {
                num += 2;
            }
            num += i;
            int frameY = Game1.tile[i, j].frameY;
            while (frameY >= 0x24)
            {
                frameY -= 0x24;
            }
            frameY = j - (frameY / 0x12);
            if (((Game1.tile[num, frameY - 1].type != 0x15) && (Game1.tile[num + 1, frameY - 1].type != 0x15)) && ((Game1.tile[num, frameY - 1].type != 0x58) && (Game1.tile[num + 1, frameY - 1].type != 0x58)))
            {
                return false;
            }
            return true;
        }

        public static bool CheckCactus(int i, int j)
        {
            int num = j;
            int num2 = i;
            while (((Game1.tile[num2, num] != null) && Game1.tile[num2, num].active()) && (Game1.tile[num2, num].type == 80))
            {
                num++;
                if (Game1.tile[num2, num] == null)
                {
                    return false;
                }
                if (!Game1.tile[num2, num].active() || (Game1.tile[num2, num].type != 80))
                {
                    if ((((Game1.tile[num2 - 1, num] != null) && Game1.tile[num2 - 1, num].active()) && ((Game1.tile[num2 - 1, num].type == 80) && (Game1.tile[num2 - 1, num - 1] != null))) && ((Game1.tile[num2 - 1, num - 1].active() && (Game1.tile[num2 - 1, num - 1].type == 80)) && (num2 >= i)))
                    {
                        num2--;
                    }
                    if ((((Game1.tile[num2 + 1, num] != null) && Game1.tile[num2 + 1, num].active()) && ((Game1.tile[num2 + 1, num].type == 80) && (Game1.tile[num2 + 1, num - 1] != null))) && ((Game1.tile[num2 + 1, num - 1].active() && (Game1.tile[num2 + 1, num - 1].type == 80)) && (num2 <= i)))
                    {
                        num2++;
                    }
                }
            }
            if (((!Game1.tile[num2, num].nactive() || Game1.tile[num2, num].halfBrick()) || (Game1.tile[num2, num].slope() != 0)) || (((Game1.tile[num2, num].type != 0x35) && (Game1.tile[num2, num].type != 0x70)) && ((Game1.tile[num2, num].type != 0x74) && (Game1.tile[num2, num].type != 0xea))))
            {
                KillTile(i, j, false, false, false);
                return true;
            }
            if (i != num2)
            {
                if (((!Game1.tile[i, j + 1].active() || (Game1.tile[i, j + 1].type != 80)) && (!Game1.tile[i - 1, j].active() || (Game1.tile[i - 1, j].type != 80))) && (!Game1.tile[i + 1, j].active() || (Game1.tile[i + 1, j].type != 80)))
                {
                    KillTile(i, j, false, false, false);
                    return true;
                }
            }
            else if ((i == num2) && (!Game1.tile[i, j + 1].active() || ((((Game1.tile[i, j + 1].type != 80) && (Game1.tile[i, j + 1].type != 0x35)) && ((Game1.tile[i, j + 1].type != 0x70) && (Game1.tile[i, j + 1].type != 0x74))) && (Game1.tile[i, j + 1].type != 0xea))))
            {
                KillTile(i, j, false, false, false);
                return true;
            }
            return false;
        }

        public static void CheckCannon(int i, int j, int type)
        {
            if (!destroyObject)
            {
                bool flag = false;
                int num = Game1.tile[i, j].frameX / 0x12;
                int num2 = 0;
                while (num >= 4)
                {
                    num2++;
                    num -= 4;
                }
                num = i - num;
                int num3 = Game1.tile[i, j].frameY / 0x12;
                int num4 = 0;
                while (num3 >= 3)
                {
                    num4 += 0x36;
                    num3 -= 3;
                }
                num3 = j - num3;
                int num5 = 0x48 * num2;
                for (int k = num; k < (num + 4); k++)
                {
                    int num7 = num4;
                    for (int m = num3; m < (num3 + 3); m++)
                    {
                        if (Game1.tile[k, m] == null)
                        {
                            Game1.tile[k, m] = new Tile();
                        }
                        if ((!Game1.tile[k, m].active() || (Game1.tile[k, m].type != type)) || ((Game1.tile[k, m].frameX != num5) || (Game1.tile[k, m].frameY != num7)))
                        {
                            flag = true;
                        }
                        num7 += 0x12;
                    }
                    if (Game1.tile[k, num3 + 3] == null)
                    {
                        Game1.tile[k, num3 + 3] = new Tile();
                    }
                    if ((!SolidTileAllowBottomSlope(k, num3 + 3) && (k != num)) && (k != (num + 3)))
                    {
                        flag = true;
                    }
                    num5 += 0x12;
                }
                if (flag)
                {
                    destroyObject = true;
                    for (int n = num; n < (num + 4); n++)
                    {
                        for (int num10 = num3; num10 < (num3 + 3); num10++)
                        {
                            if ((Game1.tile[n, num10].type == type) && Game1.tile[n, num10].active())
                            {
                                KillTile(n, num10, false, false, false);
                            }
                        }
                    }
                    int num11 = 0x3a0;
                    switch (num2)
                    {
                        case 1:
                            num11 = 0x539;
                            break;

                        case 2:
                            num11 = 0xd29;
                            break;
                    }
                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, num11, 1, false, 0, false);
                    destroyObject = false;
                    for (int num12 = num; num12 < (num + 4); num12++)
                    {
                        for (int num13 = num3; num13 < (num3 + 3); num13++)
                        {
                            TileFrame(num12, num13, false, false);
                        }
                    }
                }
            }
        }

        public static void CheckChand(int i, int j, int type)
        {
            if (!destroyObject)
            {
                bool flag = false;
                int num = i;
                int num2 = j;
                num = Game1.tile[i, j].frameX / 0x12;
                int num3 = 0;
                while (num >= 3)
                {
                    num3++;
                    num -= 3;
                }
                int num4 = i - num;
                int num5 = 0x36 * num3;
                if (num >= 3)
                {
                    num -= 3;
                }
                num = i - num;
                num2 = Game1.tile[i, j].frameY / 0x12;
                int num6 = 0;
                while (num2 >= 3)
                {
                    num6++;
                    num2 -= 3;
                }
                int num7 = 0x36 * num6;
                if (num2 >= 3)
                {
                    num2 -= 3;
                }
                num2 = j - num2;
                for (int k = num; k < (num + 3); k++)
                {
                    for (int m = num2; m < (num2 + 3); m++)
                    {
                        if (Game1.tile[k, m] == null)
                        {
                            Game1.tile[k, m] = new Tile();
                        }
                        if ((!Game1.tile[k, m].active() || (Game1.tile[k, m].type != type)) || ((Game1.tile[k, m].frameX != (((k - num4) * 0x12) + num5)) || (Game1.tile[k, m].frameY != (((m - num2) * 0x12) + num7))))
                        {
                            flag = true;
                        }
                    }
                }
                if (Game1.tile[num + 1, num2 - 1] == null)
                {
                    Game1.tile[num + 1, num2 - 1] = new Tile();
                }
                if ((!Game1.tile[num + 1, num2 - 1].nactive() || !Game1.tileSolid[Game1.tile[num + 1, num2 - 1].type]) || Game1.tileSolidTop[Game1.tile[num + 1, num2 - 1].type])
                {
                    flag = true;
                }
                if (flag)
                {
                    destroyObject = true;
                    for (int n = num; n < (num + 3); n++)
                    {
                        for (int num11 = num2; num11 < (num2 + 3); num11++)
                        {
                            if ((Game1.tile[n, num11].type == type) && Game1.tile[n, num11].active())
                            {
                                KillTile(n, num11, false, false, false);
                            }
                        }
                    }
                    if (type == 0x22)
                    {
                        int num12;
                        switch (num6)
                        {
                            case 1:
                                num12 = 0x6b;
                                break;

                            case 2:
                                num12 = 0x6c;
                                break;

                            case 3:
                                num12 = 710;
                                break;

                            case 4:
                                num12 = 0x2c7;
                                break;

                            case 5:
                                num12 = 0x2c8;
                                break;

                            case 6:
                                num12 = 0x714;
                                break;

                            default:
                                if ((num6 >= 7) && (num6 <= 0x11))
                                {
                                    num12 = (0x807 + num6) - 7;
                                }
                                else if ((num6 >= 0x12) && (num6 <= 0x15))
                                {
                                    num12 = (0x85d + num6) - 0x12;
                                }
                                else if (num6 == 0x16)
                                {
                                    num12 = 0x8b0;
                                }
                                else if (num6 == 0x17)
                                {
                                    num12 = 0x9dd;
                                }
                                else if (num6 == 0x18)
                                {
                                    num12 = 0x9ef;
                                }
                                else if (num6 == 0x19)
                                {
                                    num12 = 0x9fe;
                                }
                                else if (num6 == 0x1a)
                                {
                                    num12 = 0xa0d;
                                }
                                else if (num6 == 0x1b)
                                {
                                    num12 = 0xa5c;
                                }
                                else if (num6 == 0x1c)
                                {
                                    num12 = 0xa5d;
                                }
                                else if (num6 == 0x1d)
                                {
                                    num12 = 0xa5e;
                                }
                                else if (num6 == 30)
                                {
                                    num12 = 0xa5f;
                                }
                                else if (num6 == 0x1f)
                                {
                                    num12 = 0xa60;
                                }
                                else if (num6 == 0x20)
                                {
                                    num12 = 0xa61;
                                }
                                else if (num6 == 0x21)
                                {
                                    num12 = 0xafd;
                                }
                                else if (num6 == 0x22)
                                {
                                    num12 = 0xc69;
                                }
                                else if (num6 == 0x23)
                                {
                                    num12 = 0xc6b;
                                }
                                else if (num6 == 0x24)
                                {
                                    num12 = 0xc6a;
                                }
                                else
                                {
                                    num12 = 0x6a;
                                }
                                break;
                        }
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, num12, 1, false, 0, false);
                    }
                    destroyObject = false;
                    for (int num13 = num - 1; num13 < (num + 4); num13++)
                    {
                        for (int num14 = num2 - 1; num14 < (num2 + 4); num14++)
                        {
                            TileFrame(num13, num14, false, false);
                        }
                    }
                }
            }
        }

        public static void CheckChest(int i, int j, int type)
        {
            if (!destroyObject)
            {
                bool flag = false;
                int num = 0;
                int num2 = j;
                num += Game1.tile[i, j].frameX / 0x12;
                num2 += (Game1.tile[i, j].frameY / 0x12) * -1;
                while (num > 1)
                {
                    num -= 2;
                }
                num *= -1;
                num += i;
                for (int k = num; k < (num + 2); k++)
                {
                    for (int m = num2; m < (num2 + 2); m++)
                    {
                        if (Game1.tile[k, m] == null)
                        {
                            Game1.tile[k, m] = new Tile();
                        }
                        int num5 = Game1.tile[k, m].frameX / 0x12;
                        while (num5 > 1)
                        {
                            num5 -= 2;
                        }
                        if ((!Game1.tile[k, m].active() || (Game1.tile[k, m].type != type)) || ((num5 != (k - num)) || (Game1.tile[k, m].frameY != ((m - num2) * 0x12))))
                        {
                            flag = true;
                        }
                    }
                    if (Game1.tile[k, num2 + 2] == null)
                    {
                        Game1.tile[k, num2 + 2] = new Tile();
                    }
                    if (!Game1.tile[k, num2 + 2].active() || !Game1.tileSolid[Game1.tile[k, num2 + 2].type])
                    {
                        flag = true;
                    }
                }
                if (flag)
                {
                    int index = Game1.tile[i, j].frameX / 0x24;
                    int num7 = Chest.chestItemSpawn[index];
                    destroyObject = true;
                    for (int n = num; n < (num + 2); n++)
                    {
                        for (int num9 = num2; num9 < (num2 + 3); num9++)
                        {
                            if ((Game1.tile[n, num9].type == type) && Game1.tile[n, num9].active())
                            {
                                Chest.DestroyChest(n, num9);
                                KillTile(n, num9, false, false, false);
                            }
                        }
                    }
                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, num7, 1, false, 0, false);
                    destroyObject = false;
                    if ((Game1.tile[num, num2 + 2].type == 0x8a) || (Game1.tile[num + 1, num2 + 2].type == 0x8a))
                    {
                        SquareTileFrame(num, num2 + 2, true);
                    }
                }
            }
        }

        public static bool CheckConditions(int type)
        {
            if (type != 160)
            {
                return true;
            }
            if (roomY2 > Game1.worldSurface)
            {
                return false;
            }
            int num = 0;
            int num2 = ((roomX1 - ((Game1.zoneX / 2) / 0x10)) - 1) - Lighting.offScreenTiles;
            int num3 = ((roomX2 + ((Game1.zoneX / 2) / 0x10)) + 1) + Lighting.offScreenTiles;
            int num4 = ((roomY1 - ((Game1.zoneY / 2) / 0x10)) - 1) - Lighting.offScreenTiles;
            int maxTilesX = ((roomY2 + ((Game1.zoneY / 2) / 0x10)) + 1) + Lighting.offScreenTiles;
            if (num2 < 0)
            {
                num2 = 0;
            }
            if (num3 >= Game1.maxTilesX)
            {
                num3 = Game1.maxTilesX - 1;
            }
            if (num4 < 0)
            {
                num4 = 0;
            }
            if (maxTilesX > Game1.maxTilesX)
            {
                maxTilesX = Game1.maxTilesX;
            }
            for (int i = num2 + 1; i < num3; i++)
            {
                for (int j = num4 + 2; j < (maxTilesX + 2); j++)
                {
                    if (Game1.tile[i, j].active() && (((Game1.tile[i, j].type == 70) || (Game1.tile[i, j].type == 0x47)) || (Game1.tile[i, j].type == 0x48)))
                    {
                        num++;
                    }
                }
            }
            return (num >= 100);
        }

        public static void CheckDye(int x, int y)
        {
            switch ((Game1.tile[x, y].frameX / 0x22))
            {
                case 7:
                    if (!SolidTile(x, y - 1))
                    {
                        KillTile(x, y, false, false, false);
                        return;
                    }
                    break;

                case 6:
                    if (!Game1.tile[x, y + 1].nactive() || (Game1.tile[x, y + 1].type != 80))
                    {
                        KillTile(x, y, false, false, false);
                        return;
                    }
                    break;

                default:
                    if (!SolidTile(x, y + 1))
                    {
                        KillTile(x, y, false, false, false);
                    }
                    break;
            }
        }

        public static void CheckJunglePlant(int i, int j, int type)
        {
            if (!destroyObject)
            {
                if (((Game1.tile[i, j].frameY >= 0x24) || (Game1.tile[i, j].type == 0xec)) || (Game1.tile[i, j].type == 0xee))
                {
                    bool flag = false;
                    int num = Game1.tile[i, j].frameX / 0x12;
                    int num2 = 0;
                    while (num > 1)
                    {
                        num -= 2;
                        num2++;
                    }
                    num = i - num;
                    int num3 = 0x24;
                    if ((type == 0xec) || (type == 0xee))
                    {
                        num3 = 0;
                    }
                    int num4 = Game1.tile[i, j].frameY / 0x12;
                    while (num4 > 1)
                    {
                        num4 -= 2;
                    }
                    num4 = j - num4;
                    int num5 = num2 * 0x24;
                    for (int k = num; k < (num + 2); k++)
                    {
                        for (int m = num4; m < (num4 + 2); m++)
                        {
                            if (Game1.tile[k, m] == null)
                            {
                                Game1.tile[k, m] = new Tile();
                            }
                            if ((!Game1.tile[k, m].active() || (Game1.tile[k, m].type != type)) || ((Game1.tile[k, m].frameX != (((k - num) * 0x12) + num5)) || (Game1.tile[k, m].frameY != (((m - num4) * 0x12) + num3))))
                            {
                                flag = true;
                            }
                        }
                        if (Game1.tile[k, num4 + 2] == null)
                        {
                            Game1.tile[k, num4 + 2] = new Tile();
                        }
                        if (!SolidTile(k, num4 + 2) || (Game1.tile[k, num4 + 2].type != 60))
                        {
                            flag = true;
                        }
                    }
                    if (flag)
                    {
                        if (type == 0xee)
                        {
                            float num8 = i * 0x10;
                            float num9 = j * 0x10;
                            float num10 = -1f;
                            int plr = 0;
                            for (int num12 = 0; num12 < 0xff; num12++)
                            {
                                float introduced25 = Math.Abs((float)(Game1.player[num12].position.X - num8));
                                float num13 = introduced25 + Math.Abs((float)(Game1.player[num12].position.Y - num9));
                                if ((num13 < num10) || (num10 == -1f))
                                {
                                    plr = num12;
                                    num10 = num13;
                                }
                            }
                            if ((num10 / 16f) < 50f)
                            {
                                NPC.SpawnOnPlayer(plr, 0x106);
                            }
                        }
                        if (type == 0xec)
                        {
                            Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x50b, 1, false, 0, false);
                        }
                        short frameX = Game1.tile[i, j].frameX;
                        destroyObject = true;
                        for (int n = num; n < (num + 2); n++)
                        {
                            for (int num15 = num4; num15 < (num4 + 2); num15++)
                            {
                                if (Game1.tile[n, num15] == null)
                                {
                                    Game1.tile[n, num15] = new Tile();
                                }
                                if ((Game1.tile[n, num15].type == type) && Game1.tile[n, num15].active())
                                {
                                    KillTile(n, num15, false, false, false);
                                }
                            }
                        }
                    }
                }
                else
                {
                    bool flag2 = false;
                    int num16 = j;
                    num16 += (Game1.tile[i, j].frameY / 0x12) * -1;
                    int num17 = Game1.tile[i, j].frameX / 0x12;
                    int num18 = 0;
                    while (num17 > 2)
                    {
                        num17 -= 3;
                        num18++;
                    }
                    num17 = i - num17;
                    int num19 = num18 * 0x36;
                    for (int num20 = num17; num20 < (num17 + 3); num20++)
                    {
                        for (int num21 = num16; num21 < (num16 + 2); num21++)
                        {
                            if (Game1.tile[num20, num21] == null)
                            {
                                Game1.tile[num20, num21] = new Tile();
                            }
                            if ((!Game1.tile[num20, num21].active() || (Game1.tile[num20, num21].type != type)) || ((Game1.tile[num20, num21].frameX != (((num20 - num17) * 0x12) + num19)) || (Game1.tile[num20, num21].frameY != ((num21 - num16) * 0x12))))
                            {
                                flag2 = true;
                            }
                        }
                        if (Game1.tile[num20, num16 + 2] == null)
                        {
                            Game1.tile[num20, num16 + 2] = new Tile();
                        }
                        if (!SolidTile(num20, num16 + 2) || (Game1.tile[num20, num16 + 2].type != 60))
                        {
                            flag2 = true;
                        }
                    }
                    if (flag2)
                    {
                        short num24 = Game1.tile[i, j].frameX;
                        destroyObject = true;
                        for (int num22 = num17; num22 < (num17 + 3); num22++)
                        {
                            for (int num23 = num16; num23 < (num16 + 3); num23++)
                            {
                                if (Game1.tile[num22, num23] == null)
                                {
                                    Game1.tile[num22, num23] = new Tile();
                                }
                                if ((Game1.tile[num22, num23].type == type) && Game1.tile[num22, num23].active())
                                {
                                    KillTile(num22, num23, false, false, false);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void CheckMan(int i, int j)
        {
            if (!destroyObject)
            {
                int num = i;
                int num2 = j - (Game1.tile[i, j].frameY / 0x12);
                int frameX = Game1.tile[i, j].frameX;
                while (frameX >= 100)
                {
                    frameX -= 100;
                }
                while (frameX >= 0x24)
                {
                    frameX -= 0x24;
                }
                num -= frameX / 0x12;
                bool flag = false;
                for (int k = 0; k <= 1; k++)
                {
                    for (int m = 0; m <= 2; m++)
                    {
                        int num6 = num + k;
                        int num7 = num2 + m;
                        int num8 = Game1.tile[num6, num7].frameX;
                        while (num8 >= 100)
                        {
                            num8 -= 100;
                        }
                        if (num8 >= 0x24)
                        {
                            num8 -= 0x24;
                        }
                        if ((!Game1.tile[num6, num7].active() || (Game1.tile[num6, num7].type != 0x80)) || ((Game1.tile[num6, num7].frameY != (m * 0x12)) || (num8 != (k * 0x12))))
                        {
                            flag = true;
                        }
                    }
                }
                if (!SolidTileAllowBottomSlope(num, num2 + 3) || !SolidTileAllowBottomSlope(num + 1, num2 + 3))
                {
                    flag = true;
                }
                if (flag)
                {
                    destroyObject = true;
                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x1f2, 1, false, 0, false);
                    for (int n = 0; n <= 1; n++)
                    {
                        for (int num10 = 0; num10 <= 2; num10++)
                        {
                            int num11 = num + n;
                            int num12 = num2 + num10;
                            if (Game1.tile[num11, num12].active() && (Game1.tile[num11, num12].type == 0x80))
                            {
                                KillTile(num11, num12, false, false, false);
                            }
                        }
                    }
                    destroyObject = false;
                }
            }
        }

        public static void CheckMB(int i, int j, int type)
        {
            int num11;
            if (destroyObject)
            {
                return;
            }
            bool flag = false;
            int num = i;
            int num2 = j;
            int num3 = 0;
            int num4 = Game1.tile[i, j].frameY / 0x12;
            while (num4 >= 2)
            {
                num3++;
                num4 -= 2;
            }
            int num5 = Game1.tile[i, j].frameX / 0x12;
            int num6 = 0;
            if (num5 >= 2)
            {
                num5 -= 2;
                num6++;
            }
            num = i - num5;
            num2 = j - num4;
            for (int k = num; k < (num + 2); k++)
            {
                for (int n = num2; n < (num2 + 2); n++)
                {
                    if (Game1.tile[k, n] == null)
                    {
                        Game1.tile[k, n] = new Tile();
                    }
                    if ((!Game1.tile[k, n].active() || (Game1.tile[k, n].type != type)) || ((Game1.tile[k, n].frameX != (((k - num) * 0x12) + (num6 * 0x24))) || (Game1.tile[k, n].frameY != (((n - num2) * 0x12) + (num3 * 0x24)))))
                    {
                        flag = true;
                    }
                }
                if (!Game1.tile[k, num2 + 2].nactive())
                {
                    flag = true;
                }
                else if (!Game1.tileSolid[Game1.tile[k, num2 + 2].type] && !Game1.tileTable[Game1.tile[k, num2 + 2].type])
                {
                    flag = true;
                }
            }
            if (!flag)
            {
                return;
            }
            destroyObject = true;
            for (int m = num; m < (num + 2); m++)
            {
                for (int num10 = num2; num10 < (num2 + 3); num10++)
                {
                    if ((Game1.tile[m, num10].type == type) && Game1.tile[m, num10].active())
                    {
                        KillTile(m, num10, false, false, false);
                    }
                }
            }
            if (type == 0x23)
            {
                Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x715, 1, false, 0, false);
            }
            else
            {
                switch (num3)
                {
                    case 0x1c:
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x7ab, 1, false, 0, false);
                        goto Label_03BE;

                    case 0x1d:
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x7ac, 1, false, 0, false);
                        goto Label_03BE;

                    case 30:
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x7ad, 1, false, 0, false);
                        goto Label_03BE;

                    case 0x1f:
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0xab6, 1, false, 0, false);
                        goto Label_03BE;

                    case 0x20:
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0xbe4, 1, false, 0, false);
                        goto Label_03BE;

                    case 0x21:
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0xca3, 1, false, 0, false);
                        goto Label_03BE;

                    case 0x22:
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0xca4, 1, false, 0, false);
                        goto Label_03BE;

                    case 0x23:
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0xca5, 1, false, 0, false);
                        goto Label_03BE;

                    case 0x24:
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0xd2a, 1, false, 0, false);
                        goto Label_03BE;

                    case 0x25:
                        Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0xd2b, 1, false, 0, false);
                        goto Label_03BE;
                }
                if (num3 >= 13)
                {
                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, (0x63c + num3) - 13, 1, false, 0, false);
                }
                else
                {
                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x232 + num3, 1, false, 0, false);
                }
            }
        Label_03BE:
            num11 = num - 1;
            while (num11 < (num + 3))
            {
                for (int num12 = num2 - 1; num12 < (num2 + 3); num12++)
                {
                    TileFrame(num11, num12, false, false);
                }
                num11++;
            }
            destroyObject = false;
        }

        public static void CheckOnTable1x1(int x, int y, int type)
        {
            if ((Game1.tile[x, y + 1] != null) && ((!Game1.tile[x, y + 1].active() || !Game1.tileTable[Game1.tile[x, y + 1].type]) || (Game1.tile[x, y + 1].topSlope() || Game1.tile[x, y + 1].halfBrick())))
            {
                if (type == 0x4e)
                {
                    if (!SolidTile2(x, y + 1))
                    {
                        KillTile(x, y, false, false, false);
                    }
                }
                else
                {
                    KillTile(x, y, false, false, false);
                }
            }
        }

        public static void CheckOrb(int i, int j, int type)
        {
            int frameX = Game1.tile[i, j].frameX;
            bool flag = false;
            if (frameX >= 0x24)
            {
                flag = true;
            }
            if (!destroyObject)
            {
                int num2 = i;
                int num3 = j;
                if ((Game1.tile[i, j].frameX == 0) || (Game1.tile[i, j].frameX == 0x24))
                {
                    num2 = i;
                }
                else
                {
                    num2 = i - 1;
                }
                if (Game1.tile[i, j].frameY == 0)
                {
                    num3 = j;
                }
                else
                {
                    num3 = j - 1;
                }
                for (int k = 0; k < 2; k++)
                {
                    Tile tile;
                    for (int m = 0; m < 2; m++)
                    {
                        tile = Game1.tile[num2 + k, num3 + m];
                        if ((tile != null) && (!tile.nactive() || (tile.type != type)))
                        {
                            destroyObject = true;
                            break;
                        }
                    }
                    if (destroyObject)
                    {
                        break;
                    }
                    if (type == 12)
                    {
                        tile = Game1.tile[num2 + k, num3 + 2];
                        if ((tile != null) && ((!tile.nactive() || !Game1.tileSolid[tile.type]) || (tile.blockType() != 0)))
                        {
                            destroyObject = true;
                            break;
                        }
                    }
                }
                if (destroyObject)
                {
                    for (int n = num2; n < (num2 + 2); n++)
                    {
                        for (int num7 = num3; num7 < (num3 + 2); num7++)
                        {
                            if (Game1.tile[n, num7].type == type)
                            {
                                KillTile(n, num7, false, false, false);
                            }
                        }
                    }
                    if ((Game1.netMode != 1) && !noTileActions)
                    {
                        if (type == 12)
                        {
                            Item.NewItem(num2 * 0x10, num3 * 0x10, 0x20, 0x20, 0x1d, 1, false, 0, false);
                        }
                        else if (type == 0x1f)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                spawnMeteor = true;
                            }
                            if (flag)
                            {
                                int num8 = Game1.rand.Next(5);
                                if (!shadowOrbSmashed)
                                {
                                    num8 = 0;
                                }
                                if (num8 == 0)
                                {
                                    Item.NewItem(num2 * 0x10, num3 * 0x10, 0x20, 0x20, 800, 1, false, -1, false);
                                    int stack = genRand.Next(100, 0x65);
                                    Item.NewItem(num2 * 0x10, num3 * 0x10, 0x20, 0x20, 0x61, stack, false, 0, false);
                                }
                                else if (num8 == 1)
                                {
                                    Item.NewItem(num2 * 0x10, num3 * 0x10, 0x20, 0x20, 0x4e8, 1, false, -1, false);
                                }
                                else if (num8 == 2)
                                {
                                    Item.NewItem(num2 * 0x10, num3 * 0x10, 0x20, 0x20, 0x322, 1, false, -1, false);
                                }
                                else if (num8 == 3)
                                {
                                    Item.NewItem(num2 * 0x10, num3 * 0x10, 0x20, 0x20, 0xbf6, 1, false, -1, false);
                                }
                                else if (num8 == 4)
                                {
                                    Item.NewItem(num2 * 0x10, num3 * 0x10, 0x20, 0x20, 0x50a, 1, false, -1, false);
                                }
                            }
                            else
                            {
                                int num10 = Game1.rand.Next(5);
                                if (!shadowOrbSmashed)
                                {
                                    num10 = 0;
                                }
                                if (num10 == 0)
                                {
                                    Item.NewItem(num2 * 0x10, num3 * 0x10, 0x20, 0x20, 0x60, 1, false, -1, false);
                                    int num11 = genRand.Next(100, 0x65);
                                    Item.NewItem(num2 * 0x10, num3 * 0x10, 0x20, 0x20, 0x61, num11, false, 0, false);
                                }
                                else if (num10 == 1)
                                {
                                    Item.NewItem(num2 * 0x10, num3 * 0x10, 0x20, 0x20, 0x40, 1, false, -1, false);
                                }
                                else if (num10 == 2)
                                {
                                    Item.NewItem(num2 * 0x10, num3 * 0x10, 0x20, 0x20, 0xa2, 1, false, -1, false);
                                }
                                else if (num10 == 3)
                                {
                                    Item.NewItem(num2 * 0x10, num3 * 0x10, 0x20, 0x20, 0x73, 1, false, -1, false);
                                }
                                else if (num10 == 4)
                                {
                                    Item.NewItem(num2 * 0x10, num3 * 0x10, 0x20, 0x20, 0x6f, 1, false, -1, false);
                                }
                            }
                            shadowOrbSmashed = true;
                            shadowOrbCount++;
                            if (shadowOrbCount >= 3)
                            {
                                shadowOrbCount = 0;
                                float num12 = num2 * 0x10;
                                float num13 = num3 * 0x10;
                                float num14 = -1f;
                                int plr = 0;
                                for (int num16 = 0; num16 < 0xff; num16++)
                                {
                                    float introduced20 = Math.Abs((float)(Game1.player[num16].position.X - num12));
                                    float num17 = introduced20 + Math.Abs((float)(Game1.player[num16].position.Y - num13));
                                    if ((num17 < num14) || (num14 == -1f))
                                    {
                                        plr = num16;
                                        num14 = num17;
                                    }
                                }
                                if (flag)
                                {
                                    NPC.SpawnOnPlayer(plr, 0x10a);
                                }
                                else
                                {
                                    NPC.SpawnOnPlayer(plr, 13);
                                }
                            }
                            else
                            {
                                string newText = Lang.misc[10];
                                if (shadowOrbCount == 2)
                                {
                                    newText = Lang.misc[11];
                                }
                                if (Game1.netMode == 0)
                                {
                                    Game1.NewText(newText, 50, 0xff, 130, false);
                                }
                                else if (Game1.netMode == 2)
                                {
                                    NetMessage.SendData(0x19, -1, -1, newText, 0xff, 50f, 255f, 130f, 0, 0, 0);
                                }
                            }
                            AchievementsHelper.NotifyProgressionEvent(7);
                        }
                    }
                    if (flag)
                    {
                        Game1.PlaySound(4, i * 0x10, j * 0x10, 1);
                    }
                    else
                    {
                        Game1.PlaySound(13, i * 0x10, j * 0x10, 1);
                    }
                    destroyObject = false;
                }
            }
        }

        public static void CheckPalmTree(int i, int j)
        {
            int num = -1;
            int num2 = -1;
            int type = Game1.tile[i, j].type;
            int frameX = Game1.tile[i, j].frameX;
            int frameY = Game1.tile[i, j].frameY;
            if ((Game1.tile[i, j - 1] != null) && Game1.tile[i, j - 1].active())
            {
                num = Game1.tile[i, j - 1].type;
            }
            if ((Game1.tile[i, j + 1] != null) && Game1.tile[i, j + 1].active())
            {
                num2 = Game1.tile[i, j + 1].type;
            }
            if (num2 == 0x35)
            {
                num2 = 0x35;
            }
            if (num2 == 0xea)
            {
                num2 = 0x35;
            }
            if (num2 == 0x74)
            {
                num2 = 0x35;
            }
            if (num2 == 0x70)
            {
                num2 = 0x35;
            }
            if ((num2 != 0x35) && (num2 != type))
            {
                KillTile(i, j, false, false, false);
            }
            if (((Game1.tile[i, j].frameX == 0x42) || (Game1.tile[i, j].frameX == 220)) && (num2 != 0x35))
            {
                KillTile(i, j, false, false, false);
            }
            if ((num != type) && (Game1.tile[i, j].frameX <= 0x2c))
            {
                Game1.tile[i, j].frameX = (short)(genRand.Next(7, 10) * 0x16);
            }
            else if ((num != type) && (Game1.tile[i, j].frameX == 0x42))
            {
                Game1.tile[i, j].frameX = 220;
            }
            if (((Game1.tile[i, j].frameX != frameX) && (Game1.tile[i, j].frameY != frameY)) && ((frameX >= 0) && (frameY >= 0)))
            {
                TileFrame(i - 1, j, false, false);
                TileFrame(i + 1, j, false, false);
                TileFrame(i, j - 1, false, false);
                TileFrame(i, j + 1, false, false);
            }
        }

        public static void CheckPile(int i, int y)
        {
            int num = i;
            if (Game1.tile[num, y] == null)
            {
                Game1.tile[num, y] = new Tile();
            }
            if (Game1.tile[num + 1, y] == null)
            {
                Game1.tile[num + 1, y] = new Tile();
            }
            if (Game1.tile[num, y + 1] == null)
            {
                Game1.tile[num, y + 1] = new Tile();
            }
            if (Game1.tile[num + 1, y + 1] == null)
            {
                Game1.tile[num + 1, y + 1] = new Tile();
            }
            if (Game1.tile[num, y].frameY == 0x12)
            {
                Check2x1(num, y, Game1.tile[num, y].type);
            }
            else if (!SolidTile(num, y + 1))
            {
                KillTile(num, y, false, false, false);
            }
        }

        public static void CheckPot(int i, int j, int type = 0x1c)
        {
            if (!destroyObject)
            {
                bool flag = false;
                int num = 0;
                int num2 = j;
                num += Game1.tile[i, j].frameX / 0x12;
                while (num > 1)
                {
                    num -= 2;
                }
                num *= -1;
                num += i;
                int num3 = Game1.tile[i, j].frameY / 0x12;
                int num4 = 0;
                while (num3 > 1)
                {
                    num3 -= 2;
                    num4++;
                }
                num2 -= num3;
                for (int k = num; k < (num + 2); k++)
                {
                    for (int m = num2; m < (num2 + 2); m++)
                    {
                        if (Game1.tile[k, m] == null)
                        {
                            Game1.tile[k, m] = new Tile();
                        }
                        int num7 = Game1.tile[k, m].frameX / 0x12;
                        while (num7 > 1)
                        {
                            num7 -= 2;
                        }
                        if ((!Game1.tile[k, m].active() || (Game1.tile[k, m].type != type)) || ((num7 != (k - num)) || (Game1.tile[k, m].frameY != (((m - num2) * 0x12) + (num4 * 0x24)))))
                        {
                            flag = true;
                        }
                    }
                    if (Game1.tile[k, num2 + 2] == null)
                    {
                        Game1.tile[k, num2 + 2] = new Tile();
                    }
                    if (!SolidTile2(k, num2 + 2))
                    {
                        flag = true;
                    }
                }
                if (flag)
                {
                    destroyObject = true;
                    if ((num4 >= 7) && (num4 <= 9))
                    {
                        Game1.PlaySound(6, i * 0x10, j * 0x10, 1);
                    }
                    else if ((num4 >= 0x10) && (num4 <= 0x18))
                    {
                        Game1.PlaySound(4, i * 0x10, j * 0x10, 1);
                    }
                    else
                    {
                        Game1.PlaySound(13, i * 0x10, j * 0x10, 1);
                    }
                    for (int n = num; n < (num + 2); n++)
                    {
                        for (int num9 = num2; num9 < (num2 + 2); num9++)
                        {
                            if ((Game1.tile[n, num9].type == type) && Game1.tile[n, num9].active())
                            {
                                KillTile(n, num9, false, false, false);
                            }
                        }
                    }
                    float num10 = 1f;
                    switch (num4)
                    {
                        case 0:
                            Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), 0x33, 1f);
                            Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), 0x34, 1f);
                            Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), 0x35, 1f);
                            break;

                        case 1:
                            Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), 0xa6, 1f);
                            Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), 0xa7, 1f);
                            Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), 0xa8, 1f);
                            break;

                        case 2:
                            Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), 0xa9, 1f);
                            Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), 170, 1f);
                            Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), 0xab, 1f);
                            break;

                        case 3:
                            Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), 0xac, 1f);
                            Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), 0xad, 1f);
                            Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), 0xae, 1f);
                            break;

                        default:
                            if ((num4 >= 4) && (num4 <= 6))
                            {
                                Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), 0xc5, 1f);
                                Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), 0xc6, 1f);
                                num10 = 1.25f;
                            }
                            else if ((num4 >= 7) && (num4 <= 9))
                            {
                                Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), 0xc7, 1f);
                                Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), 200, 1f);
                                num10 = 1.75f;
                            }
                            else if ((num4 >= 10) && (num4 <= 12))
                            {
                                Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), 0xc9, 1f);
                                Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), 0xca, 1f);
                                num10 = 1.9f;
                            }
                            else if ((num4 >= 13) && (num4 <= 15))
                            {
                                Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), 0xcb, 1f);
                                Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), 0xcc, 1f);
                                num10 = 2.1f;
                            }
                            else if ((num4 >= 0x10) && (num4 <= 0x12))
                            {
                                num10 = 1.6f;
                            }
                            else if ((num4 >= 0x13) && (num4 <= 0x15))
                            {
                                num10 = 3.5f;
                            }
                            else if ((num4 >= 0x16) && (num4 <= 0x18))
                            {
                                num10 = 1.6f;
                            }
                            else if ((num4 >= 0x19) && (num4 <= 0x1b))
                            {
                                num10 = 10f;
                                Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), genRand.Next(0xd9, 220), 1f);
                                Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), genRand.Next(0xd9, 220), 1f);
                            }
                            else if ((num4 >= 0x1c) && (num4 <= 30))
                            {
                                Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), genRand.Next(0x13b, 0x13d), 1f);
                                Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), new Vector2(), genRand.Next(0x13b, 0x13d), 1f);
                                if (Game1.hardMode)
                                {
                                    num10 = 4f;
                                }
                            }
                            else if ((num4 >= 0x1f) && (num4 <= 0x21))
                            {
                                int num11 = genRand.Next(2, 5);
                                for (int num12 = 0; num12 < num11; num12++)
                                {
                                    Vector2 velocity = new Vector2();
                                    Gore.NewGore(new Vector2((float)(i * 0x10), (float)(j * 0x10)), velocity, 0x2ba + genRand.Next(6), 1f);
                                }
                                num10 = 2f;
                            }
                            break;
                    }
                    num10 = ((num10 * 2f) + 1f) / 3f;
                    int maxValue = (int)(250f / ((num10 + 1f) / 2f));
                    if (Game1.rand.Next(maxValue) == 0)
                    {
                        if (Game1.netMode != 1)
                        {
                            Projectile.NewProjectile((float)((i * 0x10) + 0x10), (float)((j * 0x10) + 0x10), 0f, -12f, 0x206, 0, 0f, Game1.myPlayer, 0f, 0f);
                        }
                    }
                    else if (((genRand.Next(40) == 0) && Game1.wallDungeon[Game1.tile[i, j].wall]) && (j > Game1.worldSurface))
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x147, 1, false, 0, false);
                    }
                    else if ((genRand.Next(0x2d) == 0) || ((Game1.rand.Next(0x2d) == 0) && Game1.expertMode))
                    {
                        if (j < Game1.worldSurface)
                        {
                            int num14 = genRand.Next(10);
                            switch (num14)
                            {
                                case 0:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x124, 1, false, 0, false);
                                    break;

                                case 1:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x12a, 1, false, 0, false);
                                    break;

                                case 2:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x12b, 1, false, 0, false);
                                    break;

                                case 3:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 290, 1, false, 0, false);
                                    break;

                                case 4:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x912, 1, false, 0, false);
                                    break;

                                case 5:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x914, 1, false, 0, false);
                                    break;

                                case 6:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x915, 1, false, 0, false);
                                    break;
                            }
                            if (num14 >= 7)
                            {
                                Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x92e, 1, false, 0, false);
                            }
                        }
                        else if (j < Game1.rockLayer)
                        {
                            int num15 = genRand.Next(11);
                            switch (num15)
                            {
                                case 0:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x121, 1, false, 0, false);
                                    break;

                                case 1:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x12a, 1, false, 0, false);
                                    break;

                                case 2:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x12b, 1, false, 0, false);
                                    break;

                                case 3:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 290, 1, false, 0, false);
                                    break;

                                case 4:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x12f, 1, false, 0, false);
                                    break;

                                case 5:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x123, 1, false, 0, false);
                                    break;

                                case 6:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x130, 1, false, 0, false);
                                    break;

                                case 7:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x912, 1, false, 0, false);
                                    break;

                                case 8:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x919, 1, false, 0, false);
                                    break;
                            }
                            if (num15 >= 9)
                            {
                                Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x92e, 1, false, 0, false);
                            }
                        }
                        else if (j < (Game1.maxTilesY - 200))
                        {
                            switch (genRand.Next(15))
                            {
                                case 0:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x128, 1, false, 0, false);
                                    break;

                                case 1:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x127, 1, false, 0, false);
                                    break;

                                case 2:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x12b, 1, false, 0, false);
                                    break;

                                case 3:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x12e, 1, false, 0, false);
                                    break;

                                case 4:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x12f, 1, false, 0, false);
                                    break;

                                case 5:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x131, 1, false, 0, false);
                                    break;

                                case 6:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x12d, 1, false, 0, false);
                                    break;

                                case 7:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x12e, 1, false, 0, false);
                                    break;

                                case 8:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x129, 1, false, 0, false);
                                    break;

                                case 9:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x130, 1, false, 0, false);
                                    break;

                                case 10:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x912, 1, false, 0, false);
                                    break;

                                case 11:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x913, 1, false, 0, false);
                                    break;

                                case 12:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x917, 1, false, 0, false);
                                    break;

                                case 13:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x919, 1, false, 0, false);
                                    break;

                                case 14:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x92e, 1, false, 0, false);
                                    break;
                            }
                        }
                        else
                        {
                            switch (genRand.Next(14))
                            {
                                case 0:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x128, 1, false, 0, false);
                                    break;

                                case 1:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x127, 1, false, 0, false);
                                    break;

                                case 2:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x125, 1, false, 0, false);
                                    break;

                                case 3:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x120, 1, false, 0, false);
                                    break;

                                case 4:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x126, 1, false, 0, false);
                                    break;

                                case 5:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x129, 1, false, 0, false);
                                    break;

                                case 6:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x130, 1, false, 0, false);
                                    break;

                                case 7:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x131, 1, false, 0, false);
                                    break;

                                case 8:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x12d, 1, false, 0, false);
                                    break;

                                case 9:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x12e, 1, false, 0, false);
                                    break;

                                case 10:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x120, 1, false, 0, false);
                                    break;

                                case 11:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 300, 1, false, 0, false);
                                    break;

                                case 12:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x913, 1, false, 0, false);
                                    break;

                                case 13:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x916, 1, false, 0, false);
                                    break;
                            }
                        }
                    }
                    else if ((Game1.netMode == 2) && (Game1.rand.Next(30) == 0))
                    {
                        Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0xbb5, 1, false, 0, false);
                    }
                    else
                    {
                        int num18 = Game1.rand.Next(8);
                        if (Game1.expertMode)
                        {
                            num18--;
                        }
                        if ((num18 == 0) && (Game1.player[Player.FindClosest(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10)].statLife < Game1.player[Player.FindClosest(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10)].statLifeMax2))
                        {
                            Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x3a, 1, false, 0, false);
                            if (Game1.rand.Next(2) == 0)
                            {
                                Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x3a, 1, false, 0, false);
                            }
                            if (Game1.expertMode)
                            {
                                if (Game1.rand.Next(2) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x3a, 1, false, 0, false);
                                }
                                if (Game1.rand.Next(2) == 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x3a, 1, false, 0, false);
                                }
                            }
                        }
                        else if ((num18 == 1) && (Game1.player[Player.FindClosest(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10)].statMana < Game1.player[Player.FindClosest(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10)].statManaMax2))
                        {
                            Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0xb8, 1, false, 0, false);
                        }
                        else if (num18 == 2)
                        {
                            int stack = Game1.rand.Next(2, 6);
                            if (Game1.expertMode)
                            {
                                stack += Game1.rand.Next(1, 7);
                            }
                            if (Game1.tile[i, j].liquid > 0)
                            {
                                Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x11a, stack, false, 0, false);
                            }
                            else
                            {
                                Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 8, stack, false, 0, false);
                            }
                        }
                        else if (num18 == 3)
                        {
                            int num20 = Game1.rand.Next(10, 0x15);
                            int num21 = 40;
                            if ((j < Game1.rockLayer) && (genRand.Next(2) == 0))
                            {
                                if (Game1.hardMode)
                                {
                                    num21 = 0xa8;
                                }
                                else
                                {
                                    num21 = 0x2a;
                                }
                            }
                            if (j > (Game1.maxTilesY - 200))
                            {
                                num21 = 0x109;
                            }
                            else if (Game1.hardMode)
                            {
                                if (Game1.rand.Next(2) == 0)
                                {
                                    num21 = 0x116;
                                }
                                else
                                {
                                    num21 = 0x2f;
                                }
                            }
                            Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, num21, num20, false, 0, false);
                        }
                        else if (num18 == 4)
                        {
                            int num22 = 0x1c;
                            if ((j > (Game1.maxTilesY - 200)) || Game1.hardMode)
                            {
                                num22 = 0xbc;
                            }
                            int num23 = 1;
                            if (Game1.expertMode && (Game1.rand.Next(3) != 0))
                            {
                                num23++;
                            }
                            Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, num22, num23, false, 0, false);
                        }
                        else if ((num18 == 5) && (j > Game1.rockLayer))
                        {
                            int num24 = Game1.rand.Next(4) + 1;
                            if (Game1.expertMode)
                            {
                                num24 += Game1.rand.Next(4);
                            }
                            Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0xa6, num24, false, 0, false);
                        }
                        else if (((num18 == 5) || (num18 == 6)) && ((j < (Game1.maxTilesY - 200)) && !Game1.hardMode))
                        {
                            int num25 = Game1.rand.Next(20, 0x29);
                            Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x3c5, num25, false, 0, false);
                        }
                        else
                        {
                            float num26 = 200 + genRand.Next(-100, 0x65);
                            if (j < Game1.worldSurface)
                            {
                                num26 *= 0.5f;
                            }
                            else if (j < Game1.rockLayer)
                            {
                                num26 *= 0.75f;
                            }
                            else if (j > (Game1.maxTilesY - 250))
                            {
                                num26 *= 1.25f;
                            }
                            num26 *= 1f + (Game1.rand.Next(-20, 0x15) * 0.01f);
                            if (Game1.rand.Next(4) == 0)
                            {
                                num26 *= 1f + (Game1.rand.Next(5, 11) * 0.01f);
                            }
                            if (Game1.rand.Next(8) == 0)
                            {
                                num26 *= 1f + (Game1.rand.Next(10, 0x15) * 0.01f);
                            }
                            if (Game1.rand.Next(12) == 0)
                            {
                                num26 *= 1f + (Game1.rand.Next(20, 0x29) * 0.01f);
                            }
                            if (Game1.rand.Next(0x10) == 0)
                            {
                                num26 *= 1f + (Game1.rand.Next(40, 0x51) * 0.01f);
                            }
                            if (Game1.rand.Next(20) == 0)
                            {
                                num26 *= 1f + (Game1.rand.Next(50, 0x65) * 0.01f);
                            }
                            if (Game1.expertMode)
                            {
                                num26 *= 2.5f;
                            }
                            if (Game1.expertMode && (Game1.rand.Next(2) == 0))
                            {
                                num26 *= 1.25f;
                            }
                            if (Game1.expertMode && (Game1.rand.Next(3) == 0))
                            {
                                num26 *= 1.5f;
                            }
                            if (Game1.expertMode && (Game1.rand.Next(4) == 0))
                            {
                                num26 *= 1.75f;
                            }
                            num26 *= num10;
                            if (NPC.downedBoss1)
                            {
                                num26 *= 1.1f;
                            }
                            if (NPC.downedBoss2)
                            {
                                num26 *= 1.1f;
                            }
                            if (NPC.downedBoss3)
                            {
                                num26 *= 1.1f;
                            }
                            if (NPC.downedMechBoss1)
                            {
                                num26 *= 1.1f;
                            }
                            if (NPC.downedMechBoss2)
                            {
                                num26 *= 1.1f;
                            }
                            if (NPC.downedMechBoss3)
                            {
                                num26 *= 1.1f;
                            }
                            if (NPC.downedPlantBoss)
                            {
                                num26 *= 1.1f;
                            }
                            if (NPC.downedQueenBee)
                            {
                                num26 *= 1.1f;
                            }
                            if (NPC.downedGolemBoss)
                            {
                                num26 *= 1.1f;
                            }
                            if (NPC.downedPirates)
                            {
                                num26 *= 1.1f;
                            }
                            if (NPC.downedGoblins)
                            {
                                num26 *= 1.1f;
                            }
                            if (NPC.downedFrost)
                            {
                                num26 *= 1.1f;
                            }
                            while (((int)num26) > 0)
                            {
                                if (num26 > 1000000f)
                                {
                                    int num27 = (int)(num26 / 1000000f);
                                    if ((num27 > 50) && (Game1.rand.Next(2) == 0))
                                    {
                                        num27 /= Game1.rand.Next(3) + 1;
                                    }
                                    if (Game1.rand.Next(2) == 0)
                                    {
                                        num27 /= Game1.rand.Next(3) + 1;
                                    }
                                    num26 -= 0xf4240 * num27;
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x4a, num27, false, 0, false);
                                }
                                else
                                {
                                    if (num26 > 10000f)
                                    {
                                        int num28 = (int)(num26 / 10000f);
                                        if ((num28 > 50) && (Game1.rand.Next(2) == 0))
                                        {
                                            num28 /= Game1.rand.Next(3) + 1;
                                        }
                                        if (Game1.rand.Next(2) == 0)
                                        {
                                            num28 /= Game1.rand.Next(3) + 1;
                                        }
                                        num26 -= 0x2710 * num28;
                                        Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x49, num28, false, 0, false);
                                        continue;
                                    }
                                    if (num26 > 100f)
                                    {
                                        int num29 = (int)(num26 / 100f);
                                        if ((num29 > 50) && (Game1.rand.Next(2) == 0))
                                        {
                                            num29 /= Game1.rand.Next(3) + 1;
                                        }
                                        if (Game1.rand.Next(2) == 0)
                                        {
                                            num29 /= Game1.rand.Next(3) + 1;
                                        }
                                        num26 -= 100 * num29;
                                        Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x48, num29, false, 0, false);
                                        continue;
                                    }
                                    int num30 = (int)num26;
                                    if ((num30 > 50) && (Game1.rand.Next(2) == 0))
                                    {
                                        num30 /= Game1.rand.Next(3) + 1;
                                    }
                                    if (Game1.rand.Next(2) == 0)
                                    {
                                        num30 /= Game1.rand.Next(4) + 1;
                                    }
                                    if (num30 < 1)
                                    {
                                        num30 = 1;
                                    }
                                    num26 -= num30;
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x47, num30, false, 0, false);
                                }
                            }
                        }
                    }
                    destroyObject = false;
                }
            }
        }

        public static bool CheckPound(int i, int j)
        {
            if (Game1.tile[i, j] == null)
            {
                Game1.tile[i, j] = new Tile();
            }
            if (Game1.tile[i, j - 1] == null)
            {
                Game1.tile[i, j - 1] = new Tile();
            }
            if (Game1.tile[i, j + 1] == null)
            {
                Game1.tile[i, j + 1] = new Tile();
            }
            switch (Game1.tile[i, j].type)
            {
                case 0x89:
                case 0x8a:
                case 0x30:
                case 10:
                case 0x183:
                case 0x184:
                case 0xe8:
                case 380:
                    return false;
            }
            if (gen)
            {
                if (Game1.tile[i, j].type == 190)
                {
                    return false;
                }
                if (Game1.tile[i, j].type == 30)
                {
                    return false;
                }
            }
            if (Game1.tile[i, j - 1].active())
            {
                switch (Game1.tile[i, j - 1].type)
                {
                    case 0x1a:
                    case 0x48:
                    case 5:
                    case 0x15:
                    case 0xed:
                    case 0x143:
                    case 0x4d:
                    case 0x58:
                        return false;
                }
            }
            return true;
        }

        public static void CheckRoom(int x, int y)
        {
            if (canSpawn)
            {
                if (((x < 10) || (y < 10)) || ((x >= (Game1.maxTilesX - 10)) || (y >= (lastMaxTilesY - 10))))
                {
                    canSpawn = false;
                }
                else
                {
                    for (int i = 0; i < numRoomTiles; i++)
                    {
                        if ((roomX[i] == x) && (roomY[i] == y))
                        {
                            return;
                        }
                    }
                    roomX[numRoomTiles] = x;
                    roomY[numRoomTiles] = y;
                    numRoomTiles++;
                    if (numRoomTiles >= maxRoomTiles)
                    {
                        canSpawn = false;
                    }
                    else
                    {
                        if (Game1.tile[x, y].nactive())
                        {
                            houseTile[Game1.tile[x, y].type] = true;
                            if (Game1.tileSolid[Game1.tile[x, y].type])
                            {
                                return;
                            }
                            if ((Game1.tile[x, y].type == 11) && ((Game1.tile[x, y].frameX == 0) || (Game1.tile[x, y].frameX == 0x36)))
                            {
                                return;
                            }
                            if (Game1.tile[x, y].type == 0x185)
                            {
                                return;
                            }
                            if ((Game1.tile[x, y].type == 0x182) && (((Game1.tile[x, y].frameX < 0x24) && (Game1.tile[x, y].frameY == 0x12)) || ((Game1.tile[x, y].frameX >= 0x24) && (Game1.tile[x, y].frameY == 0))))
                            {
                                return;
                            }
                        }
                        if (x < roomX1)
                        {
                            roomX1 = x;
                        }
                        if (x > roomX2)
                        {
                            roomX2 = x;
                        }
                        if (y < roomY1)
                        {
                            roomY1 = y;
                        }
                        if (y > roomY2)
                        {
                            roomY2 = y;
                        }
                        bool flag = false;
                        bool flag2 = false;
                        for (int j = -2; j < 3; j++)
                        {
                            if (Game1.wallHouse[Game1.tile[x + j, y].wall])
                            {
                                flag = true;
                            }
                            if (Game1.tile[x + j, y].nactive() && (Game1.tileSolid[Game1.tile[x + j, y].type] || TileID.Sets.HousingWalls[Game1.tile[x + j, y].type]))
                            {
                                flag = true;
                            }
                            if (Game1.wallHouse[Game1.tile[x, y + j].wall])
                            {
                                flag2 = true;
                            }
                            if (Game1.tile[x, y + j].nactive() && (Game1.tileSolid[Game1.tile[x, y + j].type] || TileID.Sets.HousingWalls[Game1.tile[x, y + j].type]))
                            {
                                flag2 = true;
                            }
                        }
                        if (!flag || !flag2)
                        {
                            canSpawn = false;
                        }
                        else
                        {
                            for (int k = x - 1; k < (x + 2); k++)
                            {
                                for (int m = y - 1; m < (y + 2); m++)
                                {
                                    if (((k != x) || (m != y)) && canSpawn)
                                    {
                                        CheckRoom(k, m);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void CheckSign(int x, int y, ushort type)
        {
            if (!destroyObject)
            {
                int num = x - 2;
                int num2 = x + 3;
                int num3 = y - 2;
                int num4 = y + 3;
                if ((((num >= 0) && (num2 <= Game1.maxTilesX)) && (num3 >= 0)) && (num4 <= Game1.maxTilesY))
                {
                    bool flag = false;
                    for (int i = num; i < num2; i++)
                    {
                        for (int k = num3; k < num4; k++)
                        {
                            if (Game1.tile[i, k] == null)
                            {
                                Game1.tile[i, k] = new Tile();
                            }
                        }
                    }
                    int num7 = Game1.tile[x, y].frameX / 0x12;
                    int num8 = Game1.tile[x, y].frameY / 0x12;
                    num7 = num7 % 2;
                    int num9 = x - num7;
                    int num10 = y - num8;
                    int num11 = (Game1.tile[num9, num10].frameX / 0x12) / 2;
                    int num12 = Game1.tile[x, y].frameX / 0x12;
                    int num13 = 0;
                    while (num12 > 1)
                    {
                        num12 -= 2;
                        num13++;
                    }
                    num = num9;
                    num2 = num9 + 2;
                    num3 = num10;
                    num4 = num10 + 2;
                    num7 = 0;
                    for (int j = num; j < num2; j++)
                    {
                        num8 = 0;
                        for (int m = num3; m < num4; m++)
                        {
                            if (!Game1.tile[j, m].active() || (Game1.tile[j, m].type != type))
                            {
                                flag = true;
                                break;
                            }
                            if (((Game1.tile[j, m].frameX / 0x12) != (num7 + (num11 * 2))) || ((Game1.tile[j, m].frameY / 0x12) != num8))
                            {
                                flag = true;
                                break;
                            }
                            num8++;
                        }
                        num7++;
                    }
                    if (!flag)
                    {
                        if (type == 0x55)
                        {
                            if ((Game1.tile[num9, num10 + 2].active() && (Game1.tileSolid[Game1.tile[num9, num10 + 2].type] || Game1.tileSolidTop[Game1.tile[num9, num10 + 2].type])) && (Game1.tile[num9 + 1, num10 + 2].active() && (Game1.tileSolid[Game1.tile[num9 + 1, num10 + 2].type] || Game1.tileSolidTop[Game1.tile[num9 + 1, num10 + 2].type])))
                            {
                                num11 = num13;
                            }
                            else
                            {
                                flag = true;
                            }
                        }
                        else if ((Game1.tile[num9, num10 + 2].active() && (Game1.tileSolid[Game1.tile[num9, num10 + 2].type] || (Game1.tileSolidTop[Game1.tile[num9, num10 + 2].type] && !Game1.tileNoAttach[Game1.tile[num9, num10 + 2].type]))) && (Game1.tile[num9 + 1, num10 + 2].active() && (Game1.tileSolid[Game1.tile[num9 + 1, num10 + 2].type] || (Game1.tileSolidTop[Game1.tile[num9 + 1, num10 + 2].type] && !Game1.tileNoAttach[Game1.tile[num9 + 1, num10 + 2].type]))))
                        {
                            num11 = 0;
                        }
                        else if (((Game1.tile[num9, num10 - 1].nactive() && Game1.tileSolid[Game1.tile[num9, num10 - 1].type]) && (!Game1.tileSolidTop[Game1.tile[num9, num10 - 1].type] && !Game1.tileNoAttach[Game1.tile[num9, num10 - 1].type])) && ((Game1.tile[num9 + 1, num10 - 1].nactive() && Game1.tileSolid[Game1.tile[num9 + 1, num10 - 1].type]) && (!Game1.tileSolidTop[Game1.tile[num9 + 1, num10 - 1].type] && !Game1.tileNoAttach[Game1.tile[num9 + 1, num10 - 1].type])))
                        {
                            num11 = 1;
                        }
                        else if (((Game1.tile[num9 - 1, num10].nactive() && Game1.tileSolid[Game1.tile[num9 - 1, num10].type]) && (!Game1.tileSolidTop[Game1.tile[num9 - 1, num10].type] && !Game1.tileNoAttach[Game1.tile[num9 - 1, num10].type])) && ((Game1.tile[num9 - 1, num10 + 1].nactive() && Game1.tileSolid[Game1.tile[num9 - 1, num10 + 1].type]) && (!Game1.tileSolidTop[Game1.tile[num9 - 1, num10 + 1].type] && !Game1.tileNoAttach[Game1.tile[num9 - 1, num10 + 1].type])))
                        {
                            num11 = 2;
                        }
                        else if (((Game1.tile[num9 + 2, num10].nactive() && Game1.tileSolid[Game1.tile[num9 + 2, num10].type]) && (!Game1.tileSolidTop[Game1.tile[num9 + 2, num10].type] && !Game1.tileNoAttach[Game1.tile[num9 + 2, num10].type])) && ((Game1.tile[num9 + 2, num10 + 1].nactive() && Game1.tileSolid[Game1.tile[num9 + 2, num10 + 1].type]) && (!Game1.tileSolidTop[Game1.tile[num9 + 2, num10 + 1].type] && !Game1.tileNoAttach[Game1.tile[num9 + 2, num10 + 1].type])))
                        {
                            num11 = 3;
                        }
                        else if (((Game1.tile[num9, num10].wall > 0) && (Game1.tile[num9 + 1, num10].wall > 0)) && ((Game1.tile[num9, num10 + 1].wall > 0) && (Game1.tile[num9 + 1, num10 + 1].wall > 0)))
                        {
                            num11 = 4;
                        }
                        else
                        {
                            flag = true;
                        }
                    }
                    if (flag)
                    {
                        if (type == 0x18b)
                        {
                            int num16 = TEItemFrame.Find(num9, num10);
                            if ((num16 != -1) && (((TEItemFrame)TileEntity.ByID[num16]).item.stack > 0))
                            {
                                ((TEItemFrame)TileEntity.ByID[num16]).DropItem();
                                if (Game1.netMode != 2)
                                {
                                    Game1.blockMouse = true;
                                }
                                return;
                            }
                        }
                        destroyObject = true;
                        for (int n = num; n < num2; n++)
                        {
                            for (int num18 = num3; num18 < num4; num18++)
                            {
                                if (Game1.tile[n, num18].type == type)
                                {
                                    KillTile(n, num18, false, false, false);
                                }
                            }
                        }
                        if (type != 0x18b)
                        {
                            Sign.KillSign(num9, num10);
                        }
                        if (type == 0x55)
                        {
                            int num19 = 0x141;
                            if ((num13 >= 6) && (num13 <= 10))
                            {
                                num19 = (0xc9d + num13) - 6;
                            }
                            else if ((num13 >= 1) && (num13 <= 5))
                            {
                                num19 = (0x495 + num13) - 1;
                            }
                            Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, num19, 1, false, 0, false);
                        }
                        else if (type == 0x18b)
                        {
                            Item.NewItem(num9 * 0x10, num10 * 0x10, 0x20, 0x20, 0xcc6, 1, false, 0, false);
                            TEItemFrame.Kill(num9, num10);
                        }
                        else
                        {
                            Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0xab, 1, false, 0, false);
                        }
                        destroyObject = false;
                    }
                    else
                    {
                        int num20 = 0x24 * num11;
                        for (int num21 = 0; num21 < 2; num21++)
                        {
                            for (int num22 = 0; num22 < 2; num22++)
                            {
                                Game1.tile[num9 + num21, num10 + num22].active(true);
                                Game1.tile[num9 + num21, num10 + num22].type = type;
                                Game1.tile[num9 + num21, num10 + num22].frameX = (short)(num20 + (0x12 * num21));
                                Game1.tile[num9 + num21, num10 + num22].frameY = (short)(0x12 * num22);
                            }
                        }
                    }
                }
            }
        }

        public static void CheckSunflower(int i, int j, int type = 0x1b)
        {
            if (!destroyObject)
            {
                bool flag = false;
                int num = 0;
                int num2 = j;
                num += Game1.tile[i, j].frameX / 0x12;
                num2 += (Game1.tile[i, j].frameY / 0x12) * -1;
                while (num > 1)
                {
                    num -= 2;
                }
                num *= -1;
                num += i;
                for (int k = num; k < (num + 2); k++)
                {
                    for (int m = num2; m < (num2 + 4); m++)
                    {
                        if (Game1.tile[k, m] == null)
                        {
                            Game1.tile[k, m] = new Tile();
                        }
                        int num5 = Game1.tile[k, m].frameX / 0x12;
                        while (num5 > 1)
                        {
                            num5 -= 2;
                        }
                        if ((!Game1.tile[k, m].nactive() || (Game1.tile[k, m].type != type)) || ((num5 != (k - num)) || (Game1.tile[k, m].frameY != ((m - num2) * 0x12))))
                        {
                            flag = true;
                        }
                    }
                    if (Game1.tile[k, num2 + 4] == null)
                    {
                        Game1.tile[k, num2 + 4] = new Tile();
                    }
                    if (!Game1.tile[k, num2 + 4].nactive() || ((Game1.tile[k, num2 + 4].type != 2) && (Game1.tile[k, num2 + 4].type != 0x6d)))
                    {
                        flag = true;
                    }
                    if (!SolidTile(k, num2 + 4))
                    {
                        flag = true;
                    }
                }
                if (flag)
                {
                    destroyObject = true;
                    for (int n = num; n < (num + 2); n++)
                    {
                        for (int num7 = num2; num7 < (num2 + 4); num7++)
                        {
                            if ((Game1.tile[n, num7].type == type) && Game1.tile[n, num7].active())
                            {
                                KillTile(n, num7, false, false, false);
                            }
                        }
                    }
                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x3f, 1, false, 0, false);
                    destroyObject = false;
                }
            }
        }

        public static void CheckSuper(int x, int y, int type)
        {
            if (!destroyObject)
            {
                Tile tile = Game1.tile[x, y];
                int style = 0;
                if (type == 0x178)
                {
                    style = tile.frameX / 0x24;
                }
                TileObjectData data = TileObjectData.GetTileData(type, style, 0);
                bool styleHorizontal = data.StyleHorizontal;
                int width = data.Width;
                int height = data.Height;
                int num4 = x;
                int num5 = y;
                num4 -= (tile.frameX / 0x12) % width;
                num5 -= (tile.frameY / 0x12) % height;
                int num6 = 0;
                int num7 = 0;
                if (styleHorizontal)
                {
                    num6 = tile.frameX / data.CoordinateFullWidth;
                }
                else
                {
                    num7 = tile.frameY / data.CoordinateFullHeight;
                }
                bool flag2 = false;
                bool flag3 = false;
                if (type == 0x178)
                {
                    flag2 = true;
                }
                for (int i = 0; i < width; i++)
                {
                    Tile tileSafely;
                    for (int j = 0; j < height; j++)
                    {
                        tileSafely = Framing.GetTileSafely(num4 + i, num5 + j);
                        if ((!tileSafely.active() || (tileSafely.type != type)) || ((tileSafely.frameX != ((num6 * data.CoordinateFullWidth) + (i * (data.CoordinateWidth + 2)))) || (tileSafely.frameY != ((num7 * data.CoordinateFullHeight) + (j * (data.CoordinateHeights[0] + 2))))))
                        {
                            flag3 = true;
                        }
                    }
                    if (flag2)
                    {
                        tileSafely = Framing.GetTileSafely(num4 + i, num5 + height);
                        if (!tileSafely.active() || (!Game1.tileSolid[tileSafely.type] && !Game1.tileTable[tileSafely.type]))
                        {
                            flag3 = true;
                        }
                        if (tileSafely.halfBrick())
                        {
                            flag3 = true;
                        }
                    }
                }
                if (flag3)
                {
                    destroyObject = true;
                    for (int k = 0; k < width; k++)
                    {
                        for (int n = 0; n < height; n++)
                        {
                            if ((Game1.tile[num4 + k, num5 + n].type == type) && Game1.tile[num4 + k, num5 + n].active())
                            {
                                KillTile(num4 + k, num5 + n, false, false, false);
                            }
                        }
                    }
                    int num12 = 0;
                    if (type == 0x178)
                    {
                        if (style > 2)
                        {
                            num12 = (0xc83 + style) - 3;
                        }
                        else
                        {
                            num12 = 0x91e + style;
                        }
                    }
                    if (num12 != 0)
                    {
                        Item.NewItem(num4 * 0x10, num5 * 0x10, data.CoordinateFullWidth, data.CoordinateFullHeight, num12, 1, false, 0, false);
                    }
                    destroyObject = false;
                    for (int m = -1; m < (width + 1); m++)
                    {
                        for (int num14 = -1; num14 < (height + 1); num14++)
                        {
                            TileFrame(num4 + m, num5 + num14, false, false);
                        }
                    }
                }
            }
        }

        public static void CheckTallGate(int x, int y, int type)
        {
            if (!destroyObject)
            {
                bool flag = false;
                Tile tileSafely = Framing.GetTileSafely(x, y);
                Point point = new Point(tileSafely.frameX / 0x12, 0);
                TileObjectData data = TileObjectData.GetTileData(type, point.X, 0);
                point.Y = tileSafely.frameY / data.CoordinateFullHeight;
                int width = data.Width;
                int height = data.Height;
                int index = 0;
                int num4 = tileSafely.frameY % data.CoordinateFullHeight;
                while ((index < height) && ((num4 - data.CoordinateHeights[index]) >= 0))
                {
                    num4 -= data.CoordinateHeights[index];
                    index++;
                }
                int coordinateFullHeight = data.CoordinateFullHeight;
                y -= index;
                int num5 = point.Y * data.CoordinateFullHeight;
                for (int i = 0; i < height; i++)
                {
                    tileSafely = Framing.GetTileSafely(x, y + i);
                    if ((tileSafely.frameX != (point.X * data.CoordinateFullWidth)) || (tileSafely.frameY != num5))
                    {
                        flag = true;
                        break;
                    }
                    num5 += data.CoordinateHeights[i] + data.CoordinatePadding;
                }
                if (flag || !CheckTileAnchors(x, y, width, height, 2, AnchorType.SolidTile))
                {
                    destroyObject = true;
                    for (int j = x; j < (x + width); j++)
                    {
                        for (int m = y; m < (y + height); m++)
                        {
                            KillTile(j, m, false, false, false);
                        }
                    }
                    int num9 = 0xca8;
                    if (point.Y == 0)
                    {
                        num9 = 0xca8;
                    }
                    Item.NewItem(x * 0x10, y * 0x10, width * 0x10, height * 0x10, num9, 1, false, 0, false);
                    for (int k = x - 1; k < ((x + width) + 1); k++)
                    {
                        for (int n = y - 1; n < ((y + height) + 1); n++)
                        {
                            TileFrame(k, n, false, false);
                        }
                    }
                    destroyObject = false;
                }
            }
        }

        public static void CheckTight(int x, int j)
        {
            if (Game1.tile[x, j] != null)
            {
                int num = j;
                if (Game1.tile[x, num].frameY == 0x48)
                {
                    if (Game1.tile[x, num - 1] == null)
                    {
                        Game1.tile[x, num - 1] = new Tile();
                    }
                    if (Game1.tile[x, num] == null)
                    {
                        Game1.tile[x, num] = new Tile();
                    }
                    if (Game1.tile[x, num + 1] == null)
                    {
                        Game1.tile[x, num + 1] = new Tile();
                    }
                    bool flag = false;
                    if (!SolidTile(x, num - 1))
                    {
                        flag = true;
                    }
                    if (!flag)
                    {
                        TightBiome(x, num);
                    }
                    else if (Game1.tile[x, num].type == Game1.tile[x, j].type)
                    {
                        KillTile(x, num, false, false, false);
                    }
                }
                else if (Game1.tile[x, num].frameY == 90)
                {
                    if (Game1.tile[x, num - 1] == null)
                    {
                        Game1.tile[x, num - 1] = new Tile();
                    }
                    if (Game1.tile[x, num] == null)
                    {
                        Game1.tile[x, num] = new Tile();
                    }
                    if (Game1.tile[x, num + 1] == null)
                    {
                        Game1.tile[x, num + 1] = new Tile();
                    }
                    bool flag2 = false;
                    if (!SolidTile(x, num + 1))
                    {
                        flag2 = true;
                    }
                    if (!flag2)
                    {
                        TightBiome(x, num);
                    }
                    else if (Game1.tile[x, num].type == Game1.tile[x, j].type)
                    {
                        KillTile(x, num, false, false, false);
                    }
                }
                else if (Game1.tile[x, num].frameY >= 0x24)
                {
                    if (Game1.tile[x, num].frameY == 0x36)
                    {
                        num--;
                    }
                    if (Game1.tile[x, num] == null)
                    {
                        Game1.tile[x, num] = new Tile();
                    }
                    if (Game1.tile[x, num + 1] == null)
                    {
                        Game1.tile[x, num + 1] = new Tile();
                    }
                    if (Game1.tile[x, num + 2] == null)
                    {
                        Game1.tile[x, num + 2] = new Tile();
                    }
                    bool flag3 = false;
                    if (!SolidTile(x, num + 2))
                    {
                        flag3 = true;
                    }
                    if (Game1.tile[x, num + 1].type != Game1.tile[x, num].type)
                    {
                        flag3 = true;
                    }
                    if (Game1.tile[x, num + 1].frameX != Game1.tile[x, num].frameX)
                    {
                        flag3 = true;
                    }
                    if (!flag3)
                    {
                        TightBiome(x, num);
                    }
                    else
                    {
                        if (Game1.tile[x, num].type == Game1.tile[x, j].type)
                        {
                            KillTile(x, num, false, false, false);
                        }
                        if (Game1.tile[x, num + 1].type == Game1.tile[x, j].type)
                        {
                            KillTile(x, num + 1, false, false, false);
                        }
                    }
                }
                else
                {
                    if (Game1.tile[x, num].frameY == 0x12)
                    {
                        num--;
                    }
                    if (Game1.tile[x, num - 1] == null)
                    {
                        Game1.tile[x, num - 1] = new Tile();
                    }
                    if (Game1.tile[x, num] == null)
                    {
                        Game1.tile[x, num] = new Tile();
                    }
                    if (Game1.tile[x, num + 1] == null)
                    {
                        Game1.tile[x, num + 1] = new Tile();
                    }
                    bool flag4 = false;
                    if (!SolidTile(x, num - 1))
                    {
                        flag4 = true;
                    }
                    if (Game1.tile[x, num + 1].type != Game1.tile[x, num].type)
                    {
                        flag4 = true;
                    }
                    if (Game1.tile[x, num + 1].frameX != Game1.tile[x, num].frameX)
                    {
                        flag4 = true;
                    }
                    if (flag4)
                    {
                        if (Game1.tile[x, num].type == Game1.tile[x, j].type)
                        {
                            KillTile(x, num, false, false, false);
                        }
                        if (Game1.tile[x, num + 1].type == Game1.tile[x, j].type)
                        {
                            KillTile(x, num + 1, false, false, false);
                        }
                    }
                    else
                    {
                        TightBiome(x, num);
                    }
                }
            }
        }

        public static bool CheckTileAnchors(int sx, int sy, int w, int h, int mode, AnchorType anchor)
        {
            if ((mode & 1) == 1)
            {
                for (int i = sy; i < (sy + h); i++)
                {
                    if (!AnchorValid(Framing.GetTileSafely(sx - 1, i), anchor))
                    {
                        return false;
                    }
                    if (!AnchorValid(Framing.GetTileSafely(sx + w, i), anchor))
                    {
                        return false;
                    }
                }
            }
            if ((mode & 2) == 2)
            {
                for (int j = sx; j < (sx + w); j++)
                {
                    if (!AnchorValid(Framing.GetTileSafely(j, sy - 1), anchor))
                    {
                        return false;
                    }
                    if (!AnchorValid(Framing.GetTileSafely(j, sy + h), anchor))
                    {
                        return false;
                    }
                }
            }
            return true;
        }

        public static bool CheckTileFrames(int type, int sx, int sy, int w, int h, int styleX, int frameXinc, int styleY, int frameYinc)
        {
            for (int i = 0; i < w; i++)
            {
                for (int j = 0; j < h; j++)
                {
                    Tile tileSafely = Framing.GetTileSafely(sx + i, sy + j);
                    if ((!tileSafely.active() || (tileSafely.type != type)) || ((tileSafely.frameX != (((styleX * w) * frameXinc) + (i * frameXinc))) || (tileSafely.frameY != (((styleY * h) * frameYinc) + (j * frameYinc)))))
                    {
                        return false;
                    }
                }
            }
            return true;
        }

        public static void CheckTrapDoor(int x, int y, int type)
        {
            if (!destroyObject)
            {
                bool flag = false;
                int w = 0;
                int h = 0;
                Point point = new Point();
                if (type == 0x183)
                {
                    w = 2;
                    h = 1;
                    point = GetTopLeftAndStyles(ref x, ref y, w, h, 0x12, 0x12);
                    flag = (flag || !CheckTileFrames(type, x, y, w, h, point.X, 0x12, point.Y, 0x12)) || !CheckTileAnchors(x, y, w, h, 1, AnchorType.SolidTile);
                }
                if (type == 0x182)
                {
                    w = 2;
                    h = 2;
                    point = GetTopLeftAndStyles(ref x, ref y, w, h, 0x12, 0x12);
                    flag = flag || !CheckTileFrames(type, x, y, w, h, point.X, 0x12, point.Y, 0x12);
                    if (point.X == 0)
                    {
                        flag = flag || !CheckTileAnchors(x, y + 1, w, 1, 1, AnchorType.SolidTile);
                    }
                    else if (point.X == 1)
                    {
                        flag = flag || !CheckTileAnchors(x, y, w, 1, 1, AnchorType.SolidTile);
                    }
                }
                if (flag)
                {
                    destroyObject = true;
                    for (int i = x; i < (x + w); i++)
                    {
                        for (int k = y; k < (y + h); k++)
                        {
                            KillTile(i, k, false, false, false);
                        }
                    }
                    int num5 = 0xca7;
                    if (point.Y == 0)
                    {
                        num5 = 0xca7;
                    }
                    Item.NewItem(x * 0x10, y * 0x10, w * 0x10, h * 0x10, num5, 1, false, 0, false);
                    for (int j = x - 1; j < ((x + w) + 1); j++)
                    {
                        for (int m = y - 1; m < ((y + h) + 1); m++)
                        {
                            TileFrame(j, m, false, false);
                        }
                    }
                    destroyObject = false;
                }
            }
        }

        public static void CheckTree(int i, int j)
        {
            int num = -1;
            int num2 = -1;
            int num3 = -1;
            int num4 = -1;
            int type = Game1.tile[i, j].type;
            int frameX = Game1.tile[i, j].frameX;
            int frameY = Game1.tile[i, j].frameY;
            if ((Game1.tile[i - 1, j] != null) && Game1.tile[i - 1, j].active())
            {
                num2 = Game1.tile[i - 1, j].type;
            }
            if ((Game1.tile[i + 1, j] != null) && Game1.tile[i + 1, j].active())
            {
                num3 = Game1.tile[i + 1, j].type;
            }
            if ((Game1.tile[i, j - 1] != null) && Game1.tile[i, j - 1].active())
            {
                num = Game1.tile[i, j - 1].type;
            }
            if ((Game1.tile[i, j + 1] != null) && Game1.tile[i, j + 1].active())
            {
                num4 = Game1.tile[i, j + 1].type;
            }
            if ((Game1.tile[i - 1, j - 1] != null) && Game1.tile[i - 1, j - 1].active())
            {
                ushort num1 = Game1.tile[i - 1, j - 1].type;
            }
            if ((Game1.tile[i + 1, j - 1] != null) && Game1.tile[i + 1, j - 1].active())
            {
                ushort num8 = Game1.tile[i + 1, j - 1].type;
            }
            if ((Game1.tile[i - 1, j + 1] != null) && Game1.tile[i - 1, j + 1].active())
            {
                ushort num9 = Game1.tile[i - 1, j + 1].type;
            }
            if ((Game1.tile[i + 1, j + 1] != null) && Game1.tile[i + 1, j + 1].active())
            {
                ushort num10 = Game1.tile[i + 1, j + 1].type;
            }
            switch (num4)
            {
                case 0x17:
                    num4 = 2;
                    break;

                case 60:
                    num4 = 2;
                    break;

                case 70:
                    num4 = 2;
                    break;

                case 0x6d:
                    num4 = 2;
                    break;

                case 0x93:
                    num4 = 2;
                    break;

                case 0xc7:
                    num4 = 2;
                    break;
            }
            if (((num4 != 2) && (num4 != type)) && ((((Game1.tile[i, j].frameX == 0) && (Game1.tile[i, j].frameY <= 130)) || ((Game1.tile[i, j].frameX == 0x16) && (Game1.tile[i, j].frameY <= 130))) || ((Game1.tile[i, j].frameX == 0x2c) && (Game1.tile[i, j].frameY <= 130))))
            {
                KillTile(i, j, false, false, false);
            }
            if (((Game1.tile[i, j].frameX >= 0x16) && (Game1.tile[i, j].frameX <= 0x2c)) && ((Game1.tile[i, j].frameY >= 0x84) && (Game1.tile[i, j].frameY <= 0xb0)))
            {
                if (num4 != 2)
                {
                    KillTile(i, j, false, false, false);
                }
                else if (((Game1.tile[i, j].frameX != 0x16) || (num2 != type)) && ((Game1.tile[i, j].frameX != 0x2c) || (num3 != type)))
                {
                    KillTile(i, j, false, false, false);
                }
            }
            else if (((((Game1.tile[i, j].frameX == 0x58) && (Game1.tile[i, j].frameY >= 0)) && (Game1.tile[i, j].frameY <= 0x2c)) || (((Game1.tile[i, j].frameX == 0x42) && (Game1.tile[i, j].frameY >= 0x42)) && (Game1.tile[i, j].frameY <= 130))) || ((((Game1.tile[i, j].frameX == 110) && (Game1.tile[i, j].frameY >= 0x42)) && (Game1.tile[i, j].frameY <= 110)) || (((Game1.tile[i, j].frameX == 0x84) && (Game1.tile[i, j].frameY >= 0)) && (Game1.tile[i, j].frameY <= 0xb0))))
            {
                if ((num2 == type) && (num3 == type))
                {
                    if (Game1.tile[i, j].frameNumber() == 0)
                    {
                        Game1.tile[i, j].frameX = 110;
                        Game1.tile[i, j].frameY = 0x42;
                    }
                    if (Game1.tile[i, j].frameNumber() == 1)
                    {
                        Game1.tile[i, j].frameX = 110;
                        Game1.tile[i, j].frameY = 0x58;
                    }
                    if (Game1.tile[i, j].frameNumber() == 2)
                    {
                        Game1.tile[i, j].frameX = 110;
                        Game1.tile[i, j].frameY = 110;
                    }
                }
                else if (num2 == type)
                {
                    if (Game1.tile[i, j].frameNumber() == 0)
                    {
                        Game1.tile[i, j].frameX = 0x58;
                        Game1.tile[i, j].frameY = 0;
                    }
                    if (Game1.tile[i, j].frameNumber() == 1)
                    {
                        Game1.tile[i, j].frameX = 0x58;
                        Game1.tile[i, j].frameY = 0x16;
                    }
                    if (Game1.tile[i, j].frameNumber() == 2)
                    {
                        Game1.tile[i, j].frameX = 0x58;
                        Game1.tile[i, j].frameY = 0x2c;
                    }
                }
                else if (num3 == type)
                {
                    if (Game1.tile[i, j].frameNumber() == 0)
                    {
                        Game1.tile[i, j].frameX = 0x42;
                        Game1.tile[i, j].frameY = 0x42;
                    }
                    if (Game1.tile[i, j].frameNumber() == 1)
                    {
                        Game1.tile[i, j].frameX = 0x42;
                        Game1.tile[i, j].frameY = 0x58;
                    }
                    if (Game1.tile[i, j].frameNumber() == 2)
                    {
                        Game1.tile[i, j].frameX = 0x42;
                        Game1.tile[i, j].frameY = 110;
                    }
                }
                else
                {
                    if (Game1.tile[i, j].frameNumber() == 0)
                    {
                        Game1.tile[i, j].frameX = 0;
                        Game1.tile[i, j].frameY = 0;
                    }
                    if (Game1.tile[i, j].frameNumber() == 1)
                    {
                        Game1.tile[i, j].frameX = 0;
                        Game1.tile[i, j].frameY = 0x16;
                    }
                    if (Game1.tile[i, j].frameNumber() == 2)
                    {
                        Game1.tile[i, j].frameX = 0;
                        Game1.tile[i, j].frameY = 0x2c;
                    }
                }
            }
            if (((Game1.tile[i, j].frameY >= 0x84) && (Game1.tile[i, j].frameY <= 0xb0)) && (((Game1.tile[i, j].frameX == 0) || (Game1.tile[i, j].frameX == 0x42)) || (Game1.tile[i, j].frameX == 0x58)))
            {
                if (num4 != 2)
                {
                    KillTile(i, j, false, false, false);
                }
                if ((num2 != type) && (num3 != type))
                {
                    if (Game1.tile[i, j].frameNumber() == 0)
                    {
                        Game1.tile[i, j].frameX = 0;
                        Game1.tile[i, j].frameY = 0;
                    }
                    if (Game1.tile[i, j].frameNumber() == 1)
                    {
                        Game1.tile[i, j].frameX = 0;
                        Game1.tile[i, j].frameY = 0x16;
                    }
                    if (Game1.tile[i, j].frameNumber() == 2)
                    {
                        Game1.tile[i, j].frameX = 0;
                        Game1.tile[i, j].frameY = 0x2c;
                    }
                }
                else if (num2 != type)
                {
                    if (Game1.tile[i, j].frameNumber() == 0)
                    {
                        Game1.tile[i, j].frameX = 0;
                        Game1.tile[i, j].frameY = 0x84;
                    }
                    if (Game1.tile[i, j].frameNumber() == 1)
                    {
                        Game1.tile[i, j].frameX = 0;
                        Game1.tile[i, j].frameY = 0x9a;
                    }
                    if (Game1.tile[i, j].frameNumber() == 2)
                    {
                        Game1.tile[i, j].frameX = 0;
                        Game1.tile[i, j].frameY = 0xb0;
                    }
                }
                else if (num3 != type)
                {
                    if (Game1.tile[i, j].frameNumber() == 0)
                    {
                        Game1.tile[i, j].frameX = 0x42;
                        Game1.tile[i, j].frameY = 0x84;
                    }
                    if (Game1.tile[i, j].frameNumber() == 1)
                    {
                        Game1.tile[i, j].frameX = 0x42;
                        Game1.tile[i, j].frameY = 0x9a;
                    }
                    if (Game1.tile[i, j].frameNumber() == 2)
                    {
                        Game1.tile[i, j].frameX = 0x42;
                        Game1.tile[i, j].frameY = 0xb0;
                    }
                }
                else
                {
                    if (Game1.tile[i, j].frameNumber() == 0)
                    {
                        Game1.tile[i, j].frameX = 0x58;
                        Game1.tile[i, j].frameY = 0x84;
                    }
                    if (Game1.tile[i, j].frameNumber() == 1)
                    {
                        Game1.tile[i, j].frameX = 0x58;
                        Game1.tile[i, j].frameY = 0x9a;
                    }
                    if (Game1.tile[i, j].frameNumber() == 2)
                    {
                        Game1.tile[i, j].frameX = 0x58;
                        Game1.tile[i, j].frameY = 0xb0;
                    }
                }
            }
            if (((Game1.tile[i, j].frameX == 0x42) && (((Game1.tile[i, j].frameY == 0) || (Game1.tile[i, j].frameY == 0x16)) || (Game1.tile[i, j].frameY == 0x2c))) || ((Game1.tile[i, j].frameX == 0x2c) && (((Game1.tile[i, j].frameY == 0xc6) || (Game1.tile[i, j].frameY == 220)) || (Game1.tile[i, j].frameY == 0xf2))))
            {
                if (num3 != type)
                {
                    KillTile(i, j, false, false, false);
                }
            }
            else if (((Game1.tile[i, j].frameX == 0x58) && (((Game1.tile[i, j].frameY == 0x42) || (Game1.tile[i, j].frameY == 0x58)) || (Game1.tile[i, j].frameY == 110))) || ((Game1.tile[i, j].frameX == 0x42) && (((Game1.tile[i, j].frameY == 0xc6) || (Game1.tile[i, j].frameY == 220)) || (Game1.tile[i, j].frameY == 0xf2))))
            {
                if (num2 != type)
                {
                    KillTile(i, j, false, false, false);
                }
            }
            else if ((num4 == -1) || (num4 == 0x17))
            {
                KillTile(i, j, false, false, false);
            }
            else if (((num != type) && (Game1.tile[i, j].frameY < 0xc6)) && (((Game1.tile[i, j].frameX != 0x16) && (Game1.tile[i, j].frameX != 0x2c)) || (Game1.tile[i, j].frameY < 0x84)))
            {
                if ((num2 == type) || (num3 == type))
                {
                    if (num4 == type)
                    {
                        if ((num2 == type) && (num3 == type))
                        {
                            if (Game1.tile[i, j].frameNumber() == 0)
                            {
                                Game1.tile[i, j].frameX = 0x84;
                                Game1.tile[i, j].frameY = 0x84;
                            }
                            if (Game1.tile[i, j].frameNumber() == 1)
                            {
                                Game1.tile[i, j].frameX = 0x84;
                                Game1.tile[i, j].frameY = 0x9a;
                            }
                            if (Game1.tile[i, j].frameNumber() == 2)
                            {
                                Game1.tile[i, j].frameX = 0x84;
                                Game1.tile[i, j].frameY = 0xb0;
                            }
                        }
                        else if (num2 == type)
                        {
                            if (Game1.tile[i, j].frameNumber() == 0)
                            {
                                Game1.tile[i, j].frameX = 0x84;
                                Game1.tile[i, j].frameY = 0;
                            }
                            if (Game1.tile[i, j].frameNumber() == 1)
                            {
                                Game1.tile[i, j].frameX = 0x84;
                                Game1.tile[i, j].frameY = 0x16;
                            }
                            if (Game1.tile[i, j].frameNumber() == 2)
                            {
                                Game1.tile[i, j].frameX = 0x84;
                                Game1.tile[i, j].frameY = 0x2c;
                            }
                        }
                        else if (num3 == type)
                        {
                            if (Game1.tile[i, j].frameNumber() == 0)
                            {
                                Game1.tile[i, j].frameX = 0x84;
                                Game1.tile[i, j].frameY = 0x42;
                            }
                            if (Game1.tile[i, j].frameNumber() == 1)
                            {
                                Game1.tile[i, j].frameX = 0x84;
                                Game1.tile[i, j].frameY = 0x58;
                            }
                            if (Game1.tile[i, j].frameNumber() == 2)
                            {
                                Game1.tile[i, j].frameX = 0x84;
                                Game1.tile[i, j].frameY = 110;
                            }
                        }
                    }
                    else if ((num2 == type) && (num3 == type))
                    {
                        if (Game1.tile[i, j].frameNumber() == 0)
                        {
                            Game1.tile[i, j].frameX = 0x9a;
                            Game1.tile[i, j].frameY = 0x84;
                        }
                        if (Game1.tile[i, j].frameNumber() == 1)
                        {
                            Game1.tile[i, j].frameX = 0x9a;
                            Game1.tile[i, j].frameY = 0x9a;
                        }
                        if (Game1.tile[i, j].frameNumber() == 2)
                        {
                            Game1.tile[i, j].frameX = 0x9a;
                            Game1.tile[i, j].frameY = 0xb0;
                        }
                    }
                    else if (num2 == type)
                    {
                        if (Game1.tile[i, j].frameNumber() == 0)
                        {
                            Game1.tile[i, j].frameX = 0x9a;
                            Game1.tile[i, j].frameY = 0;
                        }
                        if (Game1.tile[i, j].frameNumber() == 1)
                        {
                            Game1.tile[i, j].frameX = 0x9a;
                            Game1.tile[i, j].frameY = 0x16;
                        }
                        if (Game1.tile[i, j].frameNumber() == 2)
                        {
                            Game1.tile[i, j].frameX = 0x9a;
                            Game1.tile[i, j].frameY = 0x2c;
                        }
                    }
                    else if (num3 == type)
                    {
                        if (Game1.tile[i, j].frameNumber() == 0)
                        {
                            Game1.tile[i, j].frameX = 0x9a;
                            Game1.tile[i, j].frameY = 0x42;
                        }
                        if (Game1.tile[i, j].frameNumber() == 1)
                        {
                            Game1.tile[i, j].frameX = 0x9a;
                            Game1.tile[i, j].frameY = 0x58;
                        }
                        if (Game1.tile[i, j].frameNumber() == 2)
                        {
                            Game1.tile[i, j].frameX = 0x9a;
                            Game1.tile[i, j].frameY = 110;
                        }
                    }
                }
                else
                {
                    if (Game1.tile[i, j].frameNumber() == 0)
                    {
                        Game1.tile[i, j].frameX = 110;
                        Game1.tile[i, j].frameY = 0;
                    }
                    if (Game1.tile[i, j].frameNumber() == 1)
                    {
                        Game1.tile[i, j].frameX = 110;
                        Game1.tile[i, j].frameY = 0x16;
                    }
                    if (Game1.tile[i, j].frameNumber() == 2)
                    {
                        Game1.tile[i, j].frameX = 110;
                        Game1.tile[i, j].frameY = 0x2c;
                    }
                }
            }
            if (((Game1.tile[i, j].frameX != frameX) && (Game1.tile[i, j].frameY != frameY)) && ((frameX >= 0) && (frameY >= 0)))
            {
                TileFrame(i - 1, j, false, false);
                TileFrame(i + 1, j, false, false);
                TileFrame(i, j - 1, false, false);
                TileFrame(i, j + 1, false, false);
            }
        }

        public static bool checkUnderground(int x, int y)
        {
            try
            {
                int num = 120;
                int num2 = 80;
                int num3 = 3;
                if (y > (Game1.worldSurface + num2))
                {
                    return true;
                }
                if (y < (Game1.worldSurface / 2.0))
                {
                    return false;
                }
                int num4 = y - num2;
                int num5 = x - (num / 2);
                int num6 = 0;
                if (num5 < 0)
                {
                    num5 = 0;
                }
                if (num5 >= (Game1.maxTilesX - num))
                {
                    num5 = (Game1.maxTilesX - num) - 1;
                }
                for (int i = num5; i < (num5 + num); i++)
                {
                    for (int j = num4; j < (num4 + num3); j++)
                    {
                        if (SolidTile(i, j) || (Game1.tile[x, y].wall > 0))
                        {
                            num6++;
                        }
                    }
                }
                if (num6 >= ((num * num3) * 0.8))
                {
                    return true;
                }
            }
            catch
            {
            }
            return false;
        }

        public static void CheckWeaponsRack(int i, int j)
        {
            if (!destroyObject)
            {
                int num = i;
                int num2 = j - (Game1.tile[i, j].frameY / 0x12);
                int frameX = Game1.tile[i, j].frameX;
                int num4 = 0;
                while (frameX >= 0x1388)
                {
                    frameX -= 0x1388;
                    num4++;
                }
                if (num4 != 0)
                {
                    frameX = (num4 - 1) * 0x12;
                }
                frameX = frameX % 0x36;
                num -= frameX / 0x12;
                bool flag = false;
                for (int k = 0; k < 3; k++)
                {
                    for (int m = 0; m < 3; m++)
                    {
                        int num7 = num + k;
                        int num8 = num2 + m;
                        int num9 = Game1.tile[num7, num8].frameX;
                        int num10 = 0;
                        while (num9 >= 0x1388)
                        {
                            num9 -= 0x1388;
                            num10++;
                        }
                        if (num10 != 0)
                        {
                            num9 = (num10 - 1) * 0x12;
                        }
                        num9 = num9 % 0x36;
                        if ((!Game1.tile[num7, num8].active() || (Game1.tile[num7, num8].type != 0x14e)) || (((Game1.tile[num7, num8].wall <= 0) || (Game1.tile[num7, num8].frameY != (m * 0x12))) || (num9 != (k * 0x12))))
                        {
                            flag = true;
                        }
                    }
                }
                if (flag)
                {
                    destroyObject = true;
                    Item.NewItem(i * 0x10, j * 0x10, 0x30, 0x30, 0xa8b, 1, false, 0, false);
                    for (int n = 0; n < 3; n++)
                    {
                        for (int num12 = 0; num12 < 3; num12++)
                        {
                            int num13 = num + n;
                            int num14 = num2 + num12;
                            if (Game1.tile[num13, num14].active() && (Game1.tile[num13, num14].type == 0x14e))
                            {
                                KillTile(num13, num14, false, false, false);
                            }
                        }
                    }
                    destroyObject = false;
                }
            }
        }

        public static void CheckWoman(int i, int j)
        {
            if (!destroyObject)
            {
                int num = i;
                int num2 = j - (Game1.tile[i, j].frameY / 0x12);
                int frameX = Game1.tile[i, j].frameX;
                while (frameX >= 100)
                {
                    frameX -= 100;
                }
                while (frameX >= 0x24)
                {
                    frameX -= 0x24;
                }
                num -= frameX / 0x12;
                bool flag = false;
                for (int k = 0; k <= 1; k++)
                {
                    for (int m = 0; m <= 2; m++)
                    {
                        int num6 = num + k;
                        int num7 = num2 + m;
                        int num8 = Game1.tile[num6, num7].frameX;
                        while (num8 >= 100)
                        {
                            num8 -= 100;
                        }
                        if (num8 >= 0x24)
                        {
                            num8 -= 0x24;
                        }
                        if ((!Game1.tile[num6, num7].active() || (Game1.tile[num6, num7].type != 0x10d)) || ((Game1.tile[num6, num7].frameY != (m * 0x12)) || (num8 != (k * 0x12))))
                        {
                            flag = true;
                        }
                    }
                }
                if (!SolidTileAllowBottomSlope(num, num2 + 3) || !SolidTileAllowBottomSlope(num + 1, num2 + 3))
                {
                    flag = true;
                }
                if (flag)
                {
                    destroyObject = true;
                    Item.NewItem(i * 0x10, j * 0x10, 0x20, 0x20, 0x7c5, 1, false, 0, false);
                    for (int n = 0; n <= 1; n++)
                    {
                        for (int num10 = 0; num10 <= 2; num10++)
                        {
                            int num11 = num + n;
                            int num12 = num2 + num10;
                            if (Game1.tile[num11, num12].active() && (Game1.tile[num11, num12].type == 0x10d))
                            {
                                KillTile(num11, num12, false, false, false);
                            }
                        }
                    }
                    destroyObject = false;
                }
            }
        }

        public static void CheckXmasTree(int x, int y)
        {
            if (!destroyObject)
            {
                int num = x;
                int num2 = y;
                if (Game1.tile[x, y].frameX < 10)
                {
                    num -= Game1.tile[x, y].frameX;
                    num2 -= Game1.tile[x, y].frameY;
                }
                bool flag = false;
                int num3 = 0;
                for (int i = num; i < (num + 4); i++)
                {
                    int num5 = 0;
                    for (int j = num2; j < (num2 + 8); j++)
                    {
                        if (Game1.tile[i, j].active() && (Game1.tile[i, j].type == 0xab))
                        {
                            if (((num3 != 0) && (num5 != 0)) && ((Game1.tile[i, j].frameX != num3) && (Game1.tile[i, j].frameY != num5)))
                            {
                                flag = true;
                            }
                        }
                        else
                        {
                            flag = true;
                        }
                        num5++;
                    }
                    num3++;
                    if (((i > num) && (i < (num + 3))) && !SolidTile2(i, num2 + 8))
                    {
                        flag = true;
                    }
                }
                if (flag)
                {
                    destroyObject = true;
                    for (int k = num; k < (num + 4); k++)
                    {
                        for (int m = num2; m < (num2 + 8); m++)
                        {
                            if (Game1.tile[k, m].type == 0xab)
                            {
                                KillTile(k, m, false, false, false);
                            }
                        }
                    }
                    Item.NewItem(x * 0x10, y * 0x10, 0x20, 0x20, 0x751, 1, false, 0, false);
                    destroyObject = false;
                }
            }
        }

        public static int checkXmasTreeDrop(int x, int y, int obj)
        {
            int num = x;
            int num2 = y;
            if (Game1.tile[x, y].frameX < 10)
            {
                num -= Game1.tile[x, y].frameX;
                num2 -= Game1.tile[x, y].frameY;
            }
            int num3 = 0;
            if ((Game1.tile[num, num2].frameY & 1) == 1)
            {
                num3++;
            }
            if ((Game1.tile[num, num2].frameY & 2) == 2)
            {
                num3 += 2;
            }
            if ((Game1.tile[num, num2].frameY & 4) == 4)
            {
                num3 += 4;
            }
            int num4 = 0;
            if ((Game1.tile[num, num2].frameY & 8) == 8)
            {
                num4++;
            }
            if ((Game1.tile[num, num2].frameY & 0x10) == 0x10)
            {
                num4 += 2;
            }
            if ((Game1.tile[num, num2].frameY & 0x20) == 0x20)
            {
                num4 += 4;
            }
            int num5 = 0;
            if ((Game1.tile[num, num2].frameY & 0x40) == 0x40)
            {
                num5++;
            }
            if ((Game1.tile[num, num2].frameY & 0x80) == 0x80)
            {
                num5 += 2;
            }
            if ((Game1.tile[num, num2].frameY & 0x100) == 0x100)
            {
                num5 += 4;
            }
            if ((Game1.tile[num, num2].frameY & 0x200) == 0x200)
            {
                num5 += 8;
            }
            int num6 = 0;
            if ((Game1.tile[num, num2].frameY & 0x400) == 0x400)
            {
                num6++;
            }
            if ((Game1.tile[num, num2].frameY & 0x800) == 0x800)
            {
                num6 += 2;
            }
            if ((Game1.tile[num, num2].frameY & 0x1000) == 0x1000)
            {
                num6 += 4;
            }
            if ((Game1.tile[num, num2].frameY & 0x2000) == 0x2000)
            {
                num6 += 8;
            }
            if ((obj == 0) && (num3 > 0))
            {
                return num3;
            }
            if ((obj == 1) && (num4 > 0))
            {
                return num4;
            }
            if ((obj == 2) && (num5 > 0))
            {
                return num5;
            }
            if ((obj == 3) && (num6 > 0))
            {
                return num6;
            }
            return -1;
        }

        public static bool Chlorophyte(int i, int j)
        {
            int num = 40;
            int num2 = 130;
            int num3 = 0x23;
            int num4 = 0x55;
            if (j < Game1.rockLayer)
            {
                num /= 2;
                num2 /= 2;
                num3 = (int)(num3 * 1.5);
                num4 = (int)(num4 * 1.5);
            }
            int num5 = 0;
            for (int k = i - num3; k < (i + num3); k++)
            {
                for (int n = j - num3; n < (j + num3); n++)
                {
                    if (((k < (Game1.maxTilesX - 10)) && (k > 10)) && (Game1.tile[k, n].active() && (Game1.tile[k, n].type == 0xd3)))
                    {
                        num5++;
                    }
                }
            }
            if (num5 > num)
            {
                return false;
            }
            num5 = 0;
            for (int m = i - num4; m < (i + num4); m++)
            {
                for (int num9 = j - num4; num9 < (j + num4); num9++)
                {
                    if (((m < (Game1.maxTilesX - 10)) && (m > 10)) && (Game1.tile[m, num9].active() && (Game1.tile[m, num9].type == 0xd3)))
                    {
                        num5++;
                    }
                }
            }
            if (num5 > num2)
            {
                return false;
            }
            return true;
        }

        public static void clearWorld()
        {
            CombatText.clearAll();
            NPC.ResetKillCount();
            Game1.checkXMas();
            Game1.checkHalloween();
            if (Game1.mapReady)
            {
                for (int num = 0; num < lastMaxTilesX; num++)
                {
                    float single1 = ((float)num) / ((float)lastMaxTilesX);
                    Game1.statusText = Lang.gen[0x41];
                }
                Game1.Map.Clear();
            }
            NPC.MoonLordCountdown = 0;
            Game1.pumpkinMoon = false;
            Game1.clearMap = true;
            Game1.mapTime = 0;
            Game1.updateMap = false;
            Game1.mapReady = false;
            Game1.refreshMap = false;
            Game1.eclipse = false;
            Game1.slimeRain = false;
            Game1.slimeRainTime = 0.0;
            Game1.sundialCooldown = 0;
            Game1.fastForwardTime = false;
            Game1.UpdateSundial();
            NPC.waveKills = 0f;
            spawnHardBoss = 0;
            totalSolid2 = 0;
            totalGood2 = 0;
            totalEvil2 = 0;
            totalBlood2 = 0;
            totalSolid = 0;
            totalGood = 0;
            totalEvil = 0;
            totalBlood = 0;
            WorldFile.ResetTemps();
            Game1.maxRaining = 0f;
            totalX = 0;
            totalD = 0;
            tEvil = 0;
            tBlood = 0;
            tGood = 0;
            spawnEye = false;
            spawnNPC = 0;
            shadowOrbCount = 0;
            altarCount = 0;
            oreTier1 = -1;
            oreTier2 = -1;
            oreTier3 = -1;
            Game1.cloudBGActive = 0f;
            Game1.raining = false;
            Game1.hardMode = false;
            Game1.helpText = 0;
            Game1.dungeonX = 0;
            Game1.dungeonY = 0;
            NPC.downedBoss1 = false;
            NPC.downedBoss2 = false;
            NPC.downedBoss3 = false;
            NPC.downedQueenBee = false;
            NPC.downedSlimeKing = false;
            NPC.downedMechBossAny = false;
            NPC.downedMechBoss1 = false;
            NPC.downedMechBoss2 = false;
            NPC.downedMechBoss3 = false;
            NPC.downedFishron = false;
            NPC.downedMartians = false;
            NPC.downedAncientCultist = false;
            NPC.downedMoonlord = false;
            NPC.downedHalloweenKing = false;
            NPC.downedHalloweenTree = false;
            NPC.downedChristmasIceQueen = false;
            NPC.downedChristmasSantank = false;
            NPC.downedChristmasTree = false;
            NPC.downedTowerSolar = NPC.downedTowerVortex = NPC.downedTowerNebula = NPC.downedTowerStardust = NPC.LunarApocalypseIsUp = false;
            NPC.TowerActiveSolar = NPC.TowerActiveVortex = NPC.TowerActiveNebula = NPC.TowerActiveStardust = false;
            NPC.downedPlantBoss = false;
            NPC.savedStylist = false;
            NPC.savedGoblin = false;
            NPC.savedWizard = false;
            NPC.savedMech = false;
            NPC.downedGoblins = false;
            NPC.downedClown = false;
            NPC.downedFrost = false;
            NPC.downedPirates = false;
            NPC.savedAngler = false;
            NPC.downedMartians = false;
            NPC.downedGolemBoss = false;
            NPC.savedTaxCollector = false;
            shadowOrbSmashed = false;
            spawnMeteor = false;
            stopDrops = false;
            Game1.invasionDelay = 0;
            Game1.invasionType = 0;
            Game1.invasionSize = 0;
            Game1.invasionWarn = 0;
            Game1.invasionX = 0.0;
            Game1.invasionSizeStart = 0;
            Game1.treeX[0] = Game1.maxTilesX;
            Game1.treeX[1] = Game1.maxTilesX;
            Game1.treeX[2] = Game1.maxTilesX;
            Game1.treeStyle[0] = 0;
            Game1.treeStyle[1] = 0;
            Game1.treeStyle[2] = 0;
            Game1.treeStyle[3] = 0;
            noLiquidCheck = false;
            Liquid.numLiquid = 0;
            LiquidBuffer.numLiquidBuffer = 0;
            if (((Game1.netMode == 1) || (lastMaxTilesX > Game1.maxTilesX)) || (lastMaxTilesY > Game1.maxTilesY))
            {
                for (int num2 = 0; num2 < lastMaxTilesX; num2++)
                {
                    float num3 = ((float)num2) / ((float)lastMaxTilesX);
                    Game1.statusText = string.Concat(new object[] { Lang.gen[0x2e], " ", (int)((num3 * 100f) + 1f), "%" });
                    for (int num4 = 0; num4 < lastMaxTilesY; num4++)
                    {
                        Game1.tile[num2, num4] = null;
                    }
                }
            }
            lastMaxTilesX = Game1.maxTilesX;
            lastMaxTilesY = Game1.maxTilesY;
            if (Game1.netMode != 2)
            {
                Game1.sectionManager = new WorldSections(Game1.maxTilesX / 200, Game1.maxTilesY / 150);
            }
            if (Game1.netMode != 1)
            {
                for (int num5 = 0; num5 < Game1.maxTilesX; num5++)
                {
                    float num6 = ((float)num5) / ((float)Game1.maxTilesX);
                    Game1.statusText = string.Concat(new object[] { Lang.gen[0x2f], " ", (int)((num6 * 100f) + 1f), "%" });
                    for (int num7 = 0; num7 < Game1.maxTilesY; num7++)
                    {
                        if (Game1.tile[num5, num7] == null)
                        {
                            Game1.tile[num5, num7] = new Tile();
                        }
                        else
                        {
                            Game1.tile[num5, num7].ClearEverything();
                        }
                    }
                }
            }
            for (int i = 0; i < 0x1770; i++)
            {
                Game1.dust[i] = new Dust();
            }
            for (int j = 0; j < 500; j++)
            {
                Game1.gore[j] = new Gore();
            }
            for (int k = 0; k < 400; k++)
            {
                Game1.item[k] = new Item();
                Game1.itemLockoutTime[k] = 0;
            }
            for (int m = 0; m < 200; m++)
            {
                Game1.npc[m] = new NPC();
            }
            for (int n = 0; n < 0x3e8; n++)
            {
                Game1.projectile[n] = new Projectile();
            }
            for (int num13 = 0; num13 < 0x3e8; num13++)
            {
                Game1.chest[num13] = null;
            }
            for (int num14 = 0; num14 < 0x3e8; num14++)
            {
                Game1.sign[num14] = null;
            }
            for (int num15 = 0; num15 < Liquid.resLiquid; num15++)
            {
                Game1.liquid[num15] = new Liquid();
            }
            for (int num16 = 0; num16 < 0x2710; num16++)
            {
                Game1.liquidBuffer[num16] = new LiquidBuffer();
            }
            setWorldSize();
            worldCleared = true;
        }

        public static bool CloseDoor(int i, int j, bool forced = false)
        {
            int num = 0;
            int num2 = i;
            int y = j;
            if (Game1.tile[i, j] == null)
            {
                Game1.tile[i, j] = new Tile();
            }
            int frameX = Game1.tile[i, j].frameX;
            if (Game1.tile[i, j].type != 11)
            {
                return false;
            }
            int frameY = Game1.tile[i, j].frameY;
            for (int k = 0; frameY >= 0x36; k++)
            {
                frameY -= 0x36;
            }
            y = j - (frameY / 0x12);
            switch (frameX)
            {
                case 0:
                    num2 = i;
                    num = 1;
                    break;

                case 0x12:
                    num2 = i - 1;
                    num = 1;
                    break;

                case 0x24:
                    num2 = i + 1;
                    num = -1;
                    break;

                case 0x36:
                    num2 = i;
                    num = -1;
                    break;
            }
            int num7 = num2;
            if (num == -1)
            {
                num7 = num2 - 1;
            }
            if (!forced)
            {
                for (int num8 = y; num8 < (y + 3); num8++)
                {
                    if (!Collision.EmptyTile(num2, num8, true))
                    {
                        return false;
                    }
                }
            }
            for (int m = num7; m < (num7 + 2); m++)
            {
                for (int num10 = y; num10 < (y + 3); num10++)
                {
                    if (m == num2)
                    {
                        if (Game1.tile[m, num10] == null)
                        {
                            Game1.tile[m, num10] = new Tile();
                        }
                        Game1.tile[m, num10].type = 10;
                        Game1.tile[m, num10].frameX = (short)(genRand.Next(3) * 0x12);
                    }
                    else
                    {
                        if (Game1.tile[m, num10] == null)
                        {
                            Game1.tile[m, num10] = new Tile();
                        }
                        Game1.tile[m, num10].active(false);
                    }
                }
            }
            if ((Game1.netMode != 1) && Wiring.running)
            {
                Wiring.SkipWire(num2, y);
                Wiring.SkipWire(num2, y + 1);
                Wiring.SkipWire(num2, y + 2);
            }
            for (int n = num2 - 1; n <= (num2 + 1); n++)
            {
                for (int num12 = y - 1; num12 <= (y + 2); num12++)
                {
                    TileFrame(n, num12, false, false);
                }
            }
            Game1.PlaySound(9, i * 0x10, j * 0x10, 1);
            return true;
        }

        public static void CloudIsland(int i, int j)
        {
            Vector2 vector;
            Vector2 vector2;
            int num;
            int num2;
            int maxTilesX;
            int maxTilesY;
            int num20;
            double num5 = genRand.Next(100, 150);
            double num6 = num5;
            float num7 = genRand.Next(20, 30);
            int num8 = i;
            int num9 = i;
            int num10 = i;
            int num11 = j;
            vector.X = i;
            vector.Y = j;
            vector2.X = genRand.Next(-20, 0x15) * 0.2f;
            while ((vector2.X > -2f) && (vector2.X < 2f))
            {
                vector2.X = genRand.Next(-20, 0x15) * 0.2f;
            }
            vector2.Y = genRand.Next(-20, -10) * 0.02f;
            while ((num5 > 0.0) && (num7 > 0f))
            {
                num5 -= genRand.Next(4);
                num7--;
                num = (int)(vector.X - (num5 * 0.5));
                maxTilesX = (int)(vector.X + (num5 * 0.5));
                num2 = (int)(vector.Y - (num5 * 0.5));
                maxTilesY = (int)(vector.Y + (num5 * 0.5));
                if (num < 0)
                {
                    num = 0;
                }
                if (maxTilesX > Game1.maxTilesX)
                {
                    maxTilesX = Game1.maxTilesX;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                num6 = (num5 * genRand.Next(80, 120)) * 0.01;
                float y = vector.Y + 1f;
                for (int num13 = num; num13 < maxTilesX; num13++)
                {
                    if (genRand.Next(2) == 0)
                    {
                        y += genRand.Next(-1, 2);
                    }
                    if (y < vector.Y)
                    {
                        y = vector.Y;
                    }
                    if (y > (vector.Y + 2f))
                    {
                        y = vector.Y + 2f;
                    }
                    for (int num14 = num2; num14 < maxTilesY; num14++)
                    {
                        if (num14 > y)
                        {
                            float num15 = Math.Abs((float)(num13 - vector.X));
                            float num16 = Math.Abs((float)(num14 - vector.Y)) * 3f;
                            if (Math.Sqrt((double)((num15 * num15) + (num16 * num16))) < (num6 * 0.4))
                            {
                                if (num13 < num8)
                                {
                                    num8 = num13;
                                }
                                if (num13 > num9)
                                {
                                    num9 = num13;
                                }
                                if (num14 < num10)
                                {
                                    num10 = num14;
                                }
                                if (num14 > num11)
                                {
                                    num11 = num14;
                                }
                                Game1.tile[num13, num14].active(true);
                                Game1.tile[num13, num14].type = 0xbd;
                                SquareTileFrame(num13, num14, true);
                            }
                        }
                    }
                }
                vector += vector2;
                vector2.X += genRand.Next(-20, 0x15) * 0.05f;
                if (vector2.X > 1f)
                {
                    vector2.X = 1f;
                }
                if (vector2.X < -1f)
                {
                    vector2.X = -1f;
                }
                if (vector2.Y > 0.2)
                {
                    vector2.Y = -0.2f;
                }
                if (vector2.Y < -0.2)
                {
                    vector2.Y = -0.2f;
                }
            }
            int num18 = num8;
            for (num18 += genRand.Next(5); num18 < num9; num18 += genRand.Next(num20, (int)(num20 * 1.5)))
            {
                int num19 = num11;
                while (!Game1.tile[num18, num19].active())
                {
                    num19--;
                }
                num19 += genRand.Next(-3, 4);
                num20 = genRand.Next(4, 8);
                int num21 = 0xbd;
                if (genRand.Next(4) == 0)
                {
                    num21 = 0xc4;
                }
                for (int num22 = num18 - num20; num22 <= (num18 + num20); num22++)
                {
                    for (int num23 = num19 - num20; num23 <= (num19 + num20); num23++)
                    {
                        if (num23 > num10)
                        {
                            float num24 = Math.Abs((int)(num22 - num18));
                            float num25 = Math.Abs((int)(num23 - num19)) * 2;
                            if (Math.Sqrt((double)((num24 * num24) + (num25 * num25))) < (num20 + genRand.Next(2)))
                            {
                                Game1.tile[num22, num23].active(true);
                                Game1.tile[num22, num23].type = (ushort)num21;
                                SquareTileFrame(num22, num23, true);
                            }
                        }
                    }
                }
            }
            num5 = genRand.Next(80, 0x5f);
            num6 = num5;
            num7 = genRand.Next(10, 15);
            vector.X = i;
            vector.Y = num10;
            vector2.X = genRand.Next(-20, 0x15) * 0.2f;
            while ((vector2.X > -2f) && (vector2.X < 2f))
            {
                vector2.X = genRand.Next(-20, 0x15) * 0.2f;
            }
            vector2.Y = genRand.Next(-20, -10) * 0.02f;
            while ((num5 > 0.0) && (num7 > 0f))
            {
                num5 -= genRand.Next(4);
                num7--;
                num = (int)(vector.X - (num5 * 0.5));
                maxTilesX = (int)(vector.X + (num5 * 0.5));
                num2 = num10 - 1;
                maxTilesY = (int)(vector.Y + (num5 * 0.5));
                if (num < 0)
                {
                    num = 0;
                }
                if (maxTilesX > Game1.maxTilesX)
                {
                    maxTilesX = Game1.maxTilesX;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                num6 = (num5 * genRand.Next(80, 120)) * 0.01;
                float num27 = vector.Y + 1f;
                for (int num28 = num; num28 < maxTilesX; num28++)
                {
                    if (genRand.Next(2) == 0)
                    {
                        num27 += genRand.Next(-1, 2);
                    }
                    if (num27 < vector.Y)
                    {
                        num27 = vector.Y;
                    }
                    if (num27 > (vector.Y + 2f))
                    {
                        num27 = vector.Y + 2f;
                    }
                    for (int num29 = num2; num29 < maxTilesY; num29++)
                    {
                        if (num29 > num27)
                        {
                            float num30 = Math.Abs((float)(num28 - vector.X));
                            float num31 = Math.Abs((float)(num29 - vector.Y)) * 3f;
                            if ((Math.Sqrt((double)((num30 * num30) + (num31 * num31))) < (num6 * 0.4)) && (Game1.tile[num28, num29].type == 0xbd))
                            {
                                Game1.tile[num28, num29].type = 0;
                                SquareTileFrame(num28, num29, true);
                            }
                        }
                    }
                }
                vector += vector2;
                vector2.X += genRand.Next(-20, 0x15) * 0.05f;
                if (vector2.X > 1f)
                {
                    vector2.X = 1f;
                }
                if (vector2.X < -1f)
                {
                    vector2.X = -1f;
                }
                if (vector2.Y > 0.2)
                {
                    vector2.Y = -0.2f;
                }
                if (vector2.Y < -0.2)
                {
                    vector2.Y = -0.2f;
                }
            }
            int num33 = num8;
            num33 += genRand.Next(5);
            while (num33 < num9)
            {
                int num34 = num11;
                while ((!Game1.tile[num33, num34].active() || (Game1.tile[num33, num34].type != 0)) && (num33 < num9))
                {
                    num34--;
                    if (num34 < num10)
                    {
                        num34 = num11;
                        num33 += genRand.Next(1, 4);
                    }
                }
                if (num33 < num9)
                {
                    num34 += genRand.Next(0, 4);
                    int minValue = genRand.Next(2, 5);
                    int num36 = 0xbd;
                    for (int num37 = num33 - minValue; num37 <= (num33 + minValue); num37++)
                    {
                        for (int num38 = num34 - minValue; num38 <= (num34 + minValue); num38++)
                        {
                            if (num38 > num10)
                            {
                                float num39 = Math.Abs((int)(num37 - num33));
                                float num40 = Math.Abs((int)(num38 - num34)) * 2;
                                if (Math.Sqrt((double)((num39 * num39) + (num40 * num40))) < minValue)
                                {
                                    Game1.tile[num37, num38].type = (ushort)num36;
                                    SquareTileFrame(num37, num38, true);
                                }
                            }
                        }
                    }
                    num33 += genRand.Next(minValue, (int)(minValue * 1.5));
                }
            }
            for (int k = num8 - 20; k <= (num9 + 20); k++)
            {
                for (int num43 = num10 - 20; num43 <= (num11 + 20); num43++)
                {
                    bool flag = true;
                    for (int num44 = k - 1; num44 <= (k + 1); num44++)
                    {
                        for (int num45 = num43 - 1; num45 <= (num43 + 1); num45++)
                        {
                            if (!Game1.tile[num44, num45].active())
                            {
                                flag = false;
                            }
                        }
                    }
                    if (flag)
                    {
                        Game1.tile[k, num43].wall = 0x49;
                        SquareWallFrame(k, num43, true);
                    }
                }
            }
            for (int m = num8; m <= num9; m++)
            {
                int num47 = num10 - 10;
                while (!Game1.tile[m, num47 + 1].active())
                {
                    num47++;
                }
                if ((num47 < num11) && (Game1.tile[m, num47 + 1].type == 0xbd))
                {
                    if (genRand.Next(10) == 0)
                    {
                        int num48 = genRand.Next(1, 3);
                        for (int num49 = m - num48; num49 <= (m + num48); num49++)
                        {
                            if (Game1.tile[num49, num47].type == 0xbd)
                            {
                                Game1.tile[num49, num47].active(false);
                                Game1.tile[num49, num47].liquid = 0xff;
                                Game1.tile[num49, num47].lava(false);
                                SquareTileFrame(m, num47, true);
                            }
                            if (Game1.tile[num49, num47 + 1].type == 0xbd)
                            {
                                Game1.tile[num49, num47 + 1].active(false);
                                Game1.tile[num49, num47 + 1].liquid = 0xff;
                                Game1.tile[num49, num47 + 1].lava(false);
                                SquareTileFrame(m, num47 + 1, true);
                            }
                            if (((num49 > (m - num48)) && (num49 < (m + 2))) && (Game1.tile[num49, num47 + 2].type == 0xbd))
                            {
                                Game1.tile[num49, num47 + 2].active(false);
                                Game1.tile[num49, num47 + 2].liquid = 0xff;
                                Game1.tile[num49, num47 + 2].lava(false);
                                SquareTileFrame(m, num47 + 2, true);
                            }
                        }
                    }
                    if (genRand.Next(5) == 0)
                    {
                        Game1.tile[m, num47].liquid = 0xff;
                    }
                    Game1.tile[m, num47].lava(false);
                    SquareTileFrame(m, num47, true);
                }
            }
            int num50 = genRand.Next(4);
            for (int n = 0; n <= num50; n++)
            {
                int num52 = genRand.Next(num8 - 5, num9 + 5);
                int num53 = num10 - genRand.Next(20, 40);
                int num54 = genRand.Next(4, 8);
                int num55 = 0xbd;
                if (genRand.Next(2) == 0)
                {
                    num55 = 0xc4;
                }
                for (int num56 = num52 - num54; num56 <= (num52 + num54); num56++)
                {
                    for (int num57 = num53 - num54; num57 <= (num53 + num54); num57++)
                    {
                        float num58 = Math.Abs((int)(num56 - num52));
                        float num59 = Math.Abs((int)(num57 - num53)) * 2;
                        if (Math.Sqrt((double)((num58 * num58) + (num59 * num59))) < (num54 + genRand.Next(-1, 2)))
                        {
                            Game1.tile[num56, num57].active(true);
                            Game1.tile[num56, num57].type = (ushort)num55;
                            SquareTileFrame(num56, num57, true);
                        }
                    }
                }
                for (int num61 = (num52 - num54) + 2; num61 <= ((num52 + num54) - 2); num61++)
                {
                    int num62 = num53 - num54;
                    while (!Game1.tile[num61, num62].active())
                    {
                        num62++;
                    }
                    Game1.tile[num61, num62].active(false);
                    Game1.tile[num61, num62].liquid = 0xff;
                    SquareTileFrame(num61, num62, true);
                }
            }
        }

        public static void CloudLake(int i, int j)
        {
            Vector2 vector;
            Vector2 vector2;
            int num;
            int num2;
            int maxTilesX;
            int maxTilesY;
            int num20;
            double num5 = genRand.Next(100, 150);
            double num6 = num5;
            float num7 = genRand.Next(20, 30);
            int num8 = i;
            int num9 = i;
            int num10 = i;
            int num11 = j;
            vector.X = i;
            vector.Y = j;
            vector2.X = genRand.Next(-20, 0x15) * 0.2f;
            while ((vector2.X > -2f) && (vector2.X < 2f))
            {
                vector2.X = genRand.Next(-20, 0x15) * 0.2f;
            }
            vector2.Y = genRand.Next(-20, -10) * 0.02f;
            while ((num5 > 0.0) && (num7 > 0f))
            {
                num5 -= genRand.Next(4);
                num7--;
                num = (int)(vector.X - (num5 * 0.5));
                maxTilesX = (int)(vector.X + (num5 * 0.5));
                num2 = (int)(vector.Y - (num5 * 0.5));
                maxTilesY = (int)(vector.Y + (num5 * 0.5));
                if (num < 0)
                {
                    num = 0;
                }
                if (maxTilesX > Game1.maxTilesX)
                {
                    maxTilesX = Game1.maxTilesX;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                num6 = (num5 * genRand.Next(80, 120)) * 0.01;
                float y = vector.Y + 1f;
                for (int num13 = num; num13 < maxTilesX; num13++)
                {
                    if (genRand.Next(2) == 0)
                    {
                        y += genRand.Next(-1, 2);
                    }
                    if (y < vector.Y)
                    {
                        y = vector.Y;
                    }
                    if (y > (vector.Y + 2f))
                    {
                        y = vector.Y + 2f;
                    }
                    for (int num14 = num2; num14 < maxTilesY; num14++)
                    {
                        if (num14 > y)
                        {
                            float num15 = Math.Abs((float)(num13 - vector.X));
                            float num16 = Math.Abs((float)(num14 - vector.Y)) * 3f;
                            if (Math.Sqrt((double)((num15 * num15) + (num16 * num16))) < (num6 * 0.4))
                            {
                                if (num13 < num8)
                                {
                                    num8 = num13;
                                }
                                if (num13 > num9)
                                {
                                    num9 = num13;
                                }
                                if (num14 < num10)
                                {
                                    num10 = num14;
                                }
                                if (num14 > num11)
                                {
                                    num11 = num14;
                                }
                                Game1.tile[num13, num14].active(true);
                                Game1.tile[num13, num14].type = 0xbd;
                                SquareTileFrame(num13, num14, true);
                            }
                        }
                    }
                }
                vector += vector2;
                vector2.X += genRand.Next(-20, 0x15) * 0.05f;
                if (vector2.X > 1f)
                {
                    vector2.X = 1f;
                }
                if (vector2.X < -1f)
                {
                    vector2.X = -1f;
                }
                if (vector2.Y > 0.2)
                {
                    vector2.Y = -0.2f;
                }
                if (vector2.Y < -0.2)
                {
                    vector2.Y = -0.2f;
                }
            }
            int num18 = num8;
            for (num18 += genRand.Next(5); num18 < num9; num18 += genRand.Next(num20, (int)(num20 * 1.5)))
            {
                int num19 = num11;
                while (!Game1.tile[num18, num19].active())
                {
                    num19--;
                }
                num19 += genRand.Next(-3, 4);
                num20 = genRand.Next(4, 8);
                int num21 = 0xbd;
                if (genRand.Next(4) == 0)
                {
                    num21 = 0xc4;
                }
                for (int num22 = num18 - num20; num22 <= (num18 + num20); num22++)
                {
                    for (int num23 = num19 - num20; num23 <= (num19 + num20); num23++)
                    {
                        if (num23 > num10)
                        {
                            float num24 = Math.Abs((int)(num22 - num18));
                            float num25 = Math.Abs((int)(num23 - num19)) * 2;
                            if (Math.Sqrt((double)((num24 * num24) + (num25 * num25))) < (num20 + genRand.Next(2)))
                            {
                                Game1.tile[num22, num23].active(true);
                                Game1.tile[num22, num23].type = (ushort)num21;
                                SquareTileFrame(num22, num23, true);
                            }
                        }
                    }
                }
            }
            num5 = genRand.Next(80, 0x5f);
            num6 = num5;
            num7 = genRand.Next(10, 15);
            vector.X = i;
            vector.Y = num10;
            vector2.X = genRand.Next(-20, 0x15) * 0.2f;
            while ((vector2.X > -2f) && (vector2.X < 2f))
            {
                vector2.X = genRand.Next(-20, 0x15) * 0.2f;
            }
            vector2.Y = genRand.Next(-20, -10) * 0.02f;
            while ((num5 > 0.0) && (num7 > 0f))
            {
                num5 -= genRand.Next(4);
                num7--;
                num = (int)(vector.X - (num5 * 0.5));
                maxTilesX = (int)(vector.X + (num5 * 0.5));
                num2 = num10 - 1;
                maxTilesY = (int)(vector.Y + (num5 * 0.5));
                if (num < 0)
                {
                    num = 0;
                }
                if (maxTilesX > Game1.maxTilesX)
                {
                    maxTilesX = Game1.maxTilesX;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                num6 = (num5 * genRand.Next(80, 120)) * 0.01;
                float num27 = vector.Y + 1f;
                for (int num28 = num; num28 < maxTilesX; num28++)
                {
                    if (genRand.Next(2) == 0)
                    {
                        num27 += genRand.Next(-1, 2);
                    }
                    if (num27 < vector.Y)
                    {
                        num27 = vector.Y;
                    }
                    if (num27 > (vector.Y + 2f))
                    {
                        num27 = vector.Y + 2f;
                    }
                    for (int num29 = num2; num29 < maxTilesY; num29++)
                    {
                        if (num29 > num27)
                        {
                            float num30 = Math.Abs((float)(num28 - vector.X));
                            float num31 = Math.Abs((float)(num29 - vector.Y)) * 3f;
                            if ((Math.Sqrt((double)((num30 * num30) + (num31 * num31))) < (num6 * 0.4)) && (Game1.tile[num28, num29].type == 0xbd))
                            {
                                Game1.tile[num28, num29].active(false);
                                Game1.tile[num28, num29].liquid = 0xff;
                                Game1.tile[num28, num29].honey(false);
                                Game1.tile[num28, num29].lava(false);
                            }
                        }
                    }
                }
                vector += vector2;
                vector2.X += genRand.Next(-20, 0x15) * 0.05f;
                if (vector2.X > 1f)
                {
                    vector2.X = 1f;
                }
                if (vector2.X < -1f)
                {
                    vector2.X = -1f;
                }
                if (vector2.Y > 0.2)
                {
                    vector2.Y = -0.2f;
                }
                if (vector2.Y < -0.2)
                {
                    vector2.Y = -0.2f;
                }
            }
            for (int k = num8 - 20; k <= (num9 + 20); k++)
            {
                for (int num34 = num10 - 20; num34 <= (num11 + 20); num34++)
                {
                    bool flag = true;
                    for (int num35 = k - 1; num35 <= (k + 1); num35++)
                    {
                        for (int num36 = num34 - 1; num36 <= (num34 + 1); num36++)
                        {
                            if (!Game1.tile[num35, num36].active())
                            {
                                flag = false;
                            }
                        }
                    }
                    if (flag)
                    {
                        Game1.tile[k, num34].wall = 0x49;
                    }
                }
            }
            for (int m = num8; m <= num9; m++)
            {
                int num38 = num10 - 10;
                while (!Game1.tile[m, num38 + 1].active())
                {
                    num38++;
                }
                if ((num38 < num11) && (Game1.tile[m, num38 + 1].type == 0xbd))
                {
                    if (genRand.Next(10) == 0)
                    {
                        int num39 = genRand.Next(1, 3);
                        for (int num40 = m - num39; num40 <= (m + num39); num40++)
                        {
                            if (Game1.tile[num40, num38].type == 0xbd)
                            {
                                Game1.tile[num40, num38].active(false);
                                Game1.tile[num40, num38].liquid = 0xff;
                                Game1.tile[num40, num38].lava(false);
                                SquareTileFrame(m, num38, true);
                            }
                            if (Game1.tile[num40, num38 + 1].type == 0xbd)
                            {
                                Game1.tile[num40, num38 + 1].active(false);
                                Game1.tile[num40, num38 + 1].liquid = 0xff;
                                Game1.tile[num40, num38 + 1].lava(false);
                                SquareTileFrame(m, num38 + 1, true);
                            }
                            if (((num40 > (m - num39)) && (num40 < (m + 2))) && (Game1.tile[num40, num38 + 2].type == 0xbd))
                            {
                                Game1.tile[num40, num38 + 2].active(false);
                                Game1.tile[num40, num38 + 2].liquid = 0xff;
                                Game1.tile[num40, num38 + 2].lava(false);
                                SquareTileFrame(m, num38 + 2, true);
                            }
                        }
                    }
                    if (genRand.Next(5) == 0)
                    {
                        Game1.tile[m, num38].liquid = 0xff;
                    }
                    Game1.tile[m, num38].lava(false);
                    SquareTileFrame(m, num38, true);
                }
            }
            int num41 = genRand.Next(1, 4);
            for (int n = 0; n <= num41; n++)
            {
                int num43 = genRand.Next(num8 - 5, num9 + 5);
                int num44 = num10 - genRand.Next(20, 40);
                int num45 = genRand.Next(4, 8);
                int num46 = 0xbd;
                if (genRand.Next(4) != 0)
                {
                    num46 = 0xc4;
                }
                for (int num47 = num43 - num45; num47 <= (num43 + num45); num47++)
                {
                    for (int num48 = num44 - num45; num48 <= (num44 + num45); num48++)
                    {
                        float num49 = Math.Abs((int)(num47 - num43));
                        float num50 = Math.Abs((int)(num48 - num44)) * 2;
                        if (Math.Sqrt((double)((num49 * num49) + (num50 * num50))) < (num45 + genRand.Next(-1, 2)))
                        {
                            Game1.tile[num47, num48].active(true);
                            Game1.tile[num47, num48].type = (ushort)num46;
                            SquareTileFrame(num47, num48, true);
                        }
                    }
                }
                for (int num52 = (num43 - num45) + 2; num52 <= ((num43 + num45) - 2); num52++)
                {
                    int num53 = num44 - num45;
                    while (!Game1.tile[num52, num53].active())
                    {
                        num53++;
                    }
                    Game1.tile[num52, num53].active(false);
                    Game1.tile[num52, num53].liquid = 0xff;
                    SquareTileFrame(num52, num53, true);
                }
            }
        }

        public static void Convert(int i, int j, int conversionType, int size = 4)
        {
            for (int k = i - size; k <= (i + size); k++)
            {
                for (int m = j - size; m <= (j + size); m++)
                {
                    if (InWorld(k, m, 1) && ((Math.Abs((int)(k - i)) + Math.Abs((int)(m - j))) < 6))
                    {
                        int type = Game1.tile[k, m].type;
                        int wall = Game1.tile[k, m].wall;
                        if (conversionType == 4)
                        {
                            if ((type <= 0x1a3) && (wall <= 0xe1))
                            {
                                if (WallID.Sets.Conversion.Grass[wall] && (wall != 0x51))
                                {
                                    Game1.tile[k, m].wall = 0x51;
                                    SquareWallFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (WallID.Sets.Conversion.Stone[wall] && (wall != 0x53))
                                {
                                    Game1.tile[k, m].wall = 0x53;
                                    SquareWallFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (WallID.Sets.Conversion.HardenedSand[wall] && (wall != 0xda))
                                {
                                    Game1.tile[k, m].wall = 0xda;
                                    SquareWallFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (WallID.Sets.Conversion.Sandstone[wall] && (wall != 0xdd))
                                {
                                    Game1.tile[k, m].wall = 0xdd;
                                    SquareWallFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                if ((Game1.tileMoss[type] || TileID.Sets.Conversion.Stone[type]) && (type != 0xcb))
                                {
                                    Game1.tile[k, m].type = 0xcb;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (TileID.Sets.Conversion.Grass[type] && (type != 0xc7))
                                {
                                    Game1.tile[k, m].type = 0xc7;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (TileID.Sets.Conversion.Ice[type] && (type != 200))
                                {
                                    Game1.tile[k, m].type = 200;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (TileID.Sets.Conversion.Sand[type] && (type != 0xea))
                                {
                                    Game1.tile[k, m].type = 0xea;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (TileID.Sets.Conversion.HardenedSand[type] && (type != 0x18f))
                                {
                                    Game1.tile[k, m].type = 0x18f;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (TileID.Sets.Conversion.Sandstone[type] && (type != 0x191))
                                {
                                    Game1.tile[k, m].type = 0x191;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (TileID.Sets.Conversion.Thorn[type] && (type != 0x160))
                                {
                                    Game1.tile[k, m].type = 0x160;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                if ((type == 0x3b) && (((Game1.tile[k - 1, m].type == 0xc7) || (Game1.tile[k + 1, m].type == 0xc7)) || ((Game1.tile[k, m - 1].type == 0xc7) || (Game1.tile[k, m + 1].type == 0xc7))))
                                {
                                    Game1.tile[k, m].type = 0;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                            }
                        }
                        else if (conversionType == 2)
                        {
                            if ((type <= 0x1a3) && (wall <= 0xe1))
                            {
                                if (WallID.Sets.Conversion.Grass[wall] && (wall != 70))
                                {
                                    Game1.tile[k, m].wall = 70;
                                    SquareWallFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (WallID.Sets.Conversion.Stone[wall] && (wall != 0x1c))
                                {
                                    Game1.tile[k, m].wall = 0x1c;
                                    SquareWallFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (WallID.Sets.Conversion.HardenedSand[wall] && (wall != 0xdb))
                                {
                                    Game1.tile[k, m].wall = 0xdb;
                                    SquareWallFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (WallID.Sets.Conversion.Sandstone[wall] && (wall != 0xde))
                                {
                                    Game1.tile[k, m].wall = 0xde;
                                    SquareWallFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                if ((Game1.tileMoss[type] || TileID.Sets.Conversion.Stone[type]) && (type != 0x75))
                                {
                                    Game1.tile[k, m].type = 0x75;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (TileID.Sets.Conversion.Grass[type] && (type != 0x6d))
                                {
                                    Game1.tile[k, m].type = 0x6d;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (TileID.Sets.Conversion.Ice[type] && (type != 0xa4))
                                {
                                    Game1.tile[k, m].type = 0xa4;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (TileID.Sets.Conversion.Sand[type] && (type != 0x74))
                                {
                                    Game1.tile[k, m].type = 0x74;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (TileID.Sets.Conversion.HardenedSand[type] && (type != 0x192))
                                {
                                    Game1.tile[k, m].type = 0x192;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (TileID.Sets.Conversion.Sandstone[type] && (type != 0x193))
                                {
                                    Game1.tile[k, m].type = 0x193;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (TileID.Sets.Conversion.Thorn[type])
                                {
                                    KillTile(k, m, false, false, false);
                                    if (Game1.netMode == 1)
                                    {
                                        NetMessage.SendData(0x11, -1, -1, "", 0, (float)k, (float)m, 0f, 0, 0, 0);
                                    }
                                }
                                if ((type == 0x3b) && (((Game1.tile[k - 1, m].type == 0x6d) || (Game1.tile[k + 1, m].type == 0x6d)) || ((Game1.tile[k, m - 1].type == 0x6d) || (Game1.tile[k, m + 1].type == 0x6d))))
                                {
                                    Game1.tile[k, m].type = 0;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                            }
                        }
                        else if (conversionType == 1)
                        {
                            if ((type <= 0x1a3) && (wall <= 0xe1))
                            {
                                if (WallID.Sets.Conversion.Grass[wall] && (wall != 0x45))
                                {
                                    Game1.tile[k, m].wall = 0x45;
                                    SquareWallFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (WallID.Sets.Conversion.Stone[wall] && (wall != 3))
                                {
                                    Game1.tile[k, m].wall = 3;
                                    SquareWallFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (WallID.Sets.Conversion.HardenedSand[wall] && (wall != 0xd9))
                                {
                                    Game1.tile[k, m].wall = 0xd9;
                                    SquareWallFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (WallID.Sets.Conversion.Sandstone[wall] && (wall != 220))
                                {
                                    Game1.tile[k, m].wall = 220;
                                    SquareWallFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                if ((Game1.tileMoss[type] || TileID.Sets.Conversion.Stone[type]) && (type != 0x19))
                                {
                                    Game1.tile[k, m].type = 0x19;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (TileID.Sets.Conversion.Grass[type] && (type != 0x17))
                                {
                                    Game1.tile[k, m].type = 0x17;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (TileID.Sets.Conversion.Ice[type] && (type != 0xa3))
                                {
                                    Game1.tile[k, m].type = 0xa3;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (TileID.Sets.Conversion.Sand[type] && (type != 0x70))
                                {
                                    Game1.tile[k, m].type = 0x70;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (TileID.Sets.Conversion.HardenedSand[type] && (type != 0x18e))
                                {
                                    Game1.tile[k, m].type = 0x18e;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (TileID.Sets.Conversion.Sandstone[type] && (type != 400))
                                {
                                    Game1.tile[k, m].type = 400;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                else if (TileID.Sets.Conversion.Thorn[type] && (type != 0x20))
                                {
                                    Game1.tile[k, m].type = 0x20;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                                if ((type == 0x3b) && (((Game1.tile[k - 1, m].type == 0x17) || (Game1.tile[k + 1, m].type == 0x17)) || ((Game1.tile[k, m - 1].type == 0x17) || (Game1.tile[k, m + 1].type == 0x17))))
                                {
                                    Game1.tile[k, m].type = 0;
                                    SquareTileFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 1);
                                }
                            }
                        }
                        else if (conversionType == 3)
                        {
                            if ((Game1.tile[k, m].wall == 0x40) || (Game1.tile[k, m].wall == 15))
                            {
                                Game1.tile[k, m].wall = 80;
                                SquareWallFrame(k, m, true);
                                NetMessage.SendTileSquare(-1, k, m, 3);
                            }
                            if (Game1.tile[k, m].type == 60)
                            {
                                Game1.tile[k, m].type = 70;
                                SquareTileFrame(k, m, true);
                                NetMessage.SendTileSquare(-1, k, m, 3);
                            }
                            else if (TileID.Sets.Conversion.Thorn[type])
                            {
                                KillTile(k, m, false, false, false);
                                if (Game1.netMode == 1)
                                {
                                    NetMessage.SendData(0x11, -1, -1, "", 0, (float)k, (float)m, 0f, 0, 0, 0);
                                }
                            }
                        }
                        else
                        {
                            if (((Game1.tile[k, m].wall == 0x45) || (Game1.tile[k, m].wall == 70)) || (Game1.tile[k, m].wall == 0x51))
                            {
                                if (m < Game1.worldSurface)
                                {
                                    if (genRand.Next(10) == 0)
                                    {
                                        Game1.tile[k, m].wall = 0x41;
                                    }
                                    else
                                    {
                                        Game1.tile[k, m].wall = 0x3f;
                                    }
                                }
                                else
                                {
                                    Game1.tile[k, m].wall = 0x40;
                                }
                                SquareWallFrame(k, m, true);
                                NetMessage.SendTileSquare(-1, k, m, 1);
                            }
                            else if (((Game1.tile[k, m].wall == 3) || (Game1.tile[k, m].wall == 0x1c)) || (Game1.tile[k, m].wall == 0x53))
                            {
                                Game1.tile[k, m].wall = 1;
                                SquareWallFrame(k, m, true);
                                NetMessage.SendTileSquare(-1, k, m, 1);
                            }
                            else if (Game1.tile[k, m].wall == 80)
                            {
                                if ((m < ((Game1.worldSurface + 4.0) + genRand.Next(3))) || (m > ((((Game1.maxTilesY + Game1.rockLayer) / 2.0) - 3.0) + genRand.Next(3))))
                                {
                                    Game1.tile[k, m].wall = 15;
                                    SquareWallFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 3);
                                }
                                else
                                {
                                    Game1.tile[k, m].wall = 0x40;
                                    SquareWallFrame(k, m, true);
                                    NetMessage.SendTileSquare(-1, k, m, 3);
                                }
                            }
                            else if (WallID.Sets.Conversion.HardenedSand[wall] && (wall != 0xd8))
                            {
                                Game1.tile[k, m].wall = 0xd8;
                                SquareWallFrame(k, m, true);
                                NetMessage.SendTileSquare(-1, k, m, 1);
                            }
                            else if (WallID.Sets.Conversion.Sandstone[wall] && (wall != 0xbb))
                            {
                                Game1.tile[k, m].wall = 0xbb;
                                SquareWallFrame(k, m, true);
                                NetMessage.SendTileSquare(-1, k, m, 1);
                            }
                            if (((Game1.tile[k, m].type == 0x17) || (Game1.tile[k, m].type == 0x6d)) || (Game1.tile[k, m].type == 0xc7))
                            {
                                Game1.tile[k, m].type = 2;
                                SquareTileFrame(k, m, true);
                                NetMessage.SendTileSquare(-1, k, m, 1);
                            }
                            else if (((Game1.tile[k, m].type == 0x75) || (Game1.tile[k, m].type == 0x19)) || (Game1.tile[k, m].type == 0xcb))
                            {
                                Game1.tile[k, m].type = 1;
                                SquareTileFrame(k, m, true);
                                NetMessage.SendTileSquare(-1, k, m, 1);
                            }
                            else if (((Game1.tile[k, m].type == 0x70) || (Game1.tile[k, m].type == 0x74)) || (Game1.tile[k, m].type == 0xea))
                            {
                                Game1.tile[k, m].type = 0x35;
                                SquareTileFrame(k, m, true);
                                NetMessage.SendTileSquare(-1, k, m, 1);
                            }
                            else if (((Game1.tile[k, m].type == 0x18e) || (Game1.tile[k, m].type == 0x192)) || (Game1.tile[k, m].type == 0x18f))
                            {
                                Game1.tile[k, m].type = 0x18d;
                                SquareTileFrame(k, m, true);
                                NetMessage.SendTileSquare(-1, k, m, 1);
                            }
                            else if (((Game1.tile[k, m].type == 400) || (Game1.tile[k, m].type == 0x193)) || (Game1.tile[k, m].type == 0x191))
                            {
                                Game1.tile[k, m].type = 0x18c;
                                SquareTileFrame(k, m, true);
                                NetMessage.SendTileSquare(-1, k, m, 1);
                            }
                            else if (((Game1.tile[k, m].type == 0xa4) || (Game1.tile[k, m].type == 0xa3)) || (Game1.tile[k, m].type == 200))
                            {
                                Game1.tile[k, m].type = 0xa1;
                                SquareTileFrame(k, m, true);
                                NetMessage.SendTileSquare(-1, k, m, 1);
                            }
                            else if (Game1.tile[k, m].type == 70)
                            {
                                Game1.tile[k, m].type = 60;
                                SquareTileFrame(k, m, true);
                                NetMessage.SendTileSquare(-1, k, m, 1);
                            }
                            else if ((Game1.tile[k, m].type == 0x20) || (Game1.tile[k, m].type == 0x160))
                            {
                                KillTile(k, m, false, false, false);
                                if (Game1.netMode == 1)
                                {
                                    NetMessage.SendData(0x11, -1, -1, "", 0, (float)k, (float)m, 0f, 0, 0, 0);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static int countDirtTiles(int x, int y)
        {
            numTileCount = 0;
            nextDirtCount(x, y);
            return numTileCount;
        }

        public static int countTiles(int x, int y, bool jungle = false, bool lavaOk = false)
        {
            numTileCount = 0;
            lavaCount = 0;
            iceCount = 0;
            rockCount = 0;
            nextCount(x, y, jungle, lavaOk);
            return numTileCount;
        }

        public static void CountTiles(int X)
        {
            if (X == 0)
            {
                totalEvil = totalEvil2;
                totalBlood = totalBlood2;
                totalSolid = totalSolid2;
                totalGood = totalGood2;
                tGood = (byte)Math.Round((double)((((float)totalGood) / ((float)totalSolid)) * 100f));
                tEvil = (byte)Math.Round((double)((((float)totalEvil) / ((float)totalSolid)) * 100f));
                tBlood = (byte)Math.Round((double)((((float)totalBlood) / ((float)totalSolid)) * 100f));
                if ((tGood == 0) && (totalGood > 0))
                {
                    tGood = 1;
                }
                if ((tEvil == 0) && (totalEvil > 0))
                {
                    tEvil = 1;
                }
                if ((tBlood == 0) && (totalBlood > 0))
                {
                    tBlood = 1;
                }
                if (Game1.netMode == 2)
                {
                    NetMessage.SendData(0x39, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
                }
                totalEvil2 = 0;
                totalSolid2 = 0;
                totalGood2 = 0;
                totalBlood2 = 0;
            }
            ushort type = 0;
            ushort index = 0;
            int num3 = 0;
            int num5 = 0;
            int maxTilesY = 0;
            do
            {
                int num4;
                int num6;
                if (num5 == 0)
                {
                    num6 = 0;
                    maxTilesY = (int)(Game1.worldSurface + 1.0);
                    num4 = 5;
                }
                else
                {
                    num6 = maxTilesY;
                    maxTilesY = Game1.maxTilesY;
                    num4 = 1;
                }
                for (int i = num6; i < maxTilesY; i++)
                {
                    Tile tile = Game1.tile[X, i];
                    if (tile == null)
                    {
                        tile = Game1.tile[X, i] = new Tile();
                    }
                    type = tile.type;
                    if ((type != 0) || tile.active())
                    {
                        if (type == index)
                        {
                            num3 += num4;
                        }
                        else
                        {
                            tileCounts[index] += num3;
                            index = type;
                            num3 = num4;
                        }
                    }
                }
                tileCounts[index] += num3;
                num3 = 0;
                num5++;
            }
            while (num5 < 2);
            AddUpAlignmentCounts(false);
        }

        public static void CreateNewWorld(GenerationProgress progress = null)
        {
            //RnD
            //ThreadPool.QueueUserWorkItem(new WaitCallback(worldGenCallBack), progress);
            worldGenCallBack(default);
        }

        public static void CrimEnt(Vector2 position, int crimDir)
        {
            Vector2 vector = Vector2.Zero;
            float num = 0f;
            float num2 = genRand.Next(6, 11);
            bool flag = true;
            vector = new Vector2(2f, genRand.Next(-20, 0) * 0.01f)
            {
                X = vector.X * -crimDir
            };
            while (flag)
            {
                num++;
                if (num >= 20f)
                {
                    flag = false;
                }
                num2 += Game1.rand.Next(-10, 11) * 0.02f;
                if (num2 < 6f)
                {
                    num2 = 6f;
                }
                if (num2 > 10f)
                {
                    num2 = 10f;
                }
                for (int i = (int)(position.X - (num2 / 2f)); i < (position.X + (num2 / 2f)); i++)
                {
                    for (int j = (int)(position.Y - (num2 / 2f)); j < (position.Y + (num2 / 2f)); j++)
                    {
                        float num5 = Math.Abs((float)(i - position.X));
                        float num6 = Math.Abs((float)(j - position.Y));
                        if (((Math.Sqrt((double)((num5 * num5) + (num6 * num6))) < (num2 * 0.5)) && Game1.tile[i, j].active()) && (Game1.tile[i, j].type == 0xcb))
                        {
                            Game1.tile[i, j].active(false);
                            flag = true;
                            num = 0f;
                        }
                    }
                }
                position += vector;
            }
        }

        public static void CrimStart(int i, int j)
        {
            int crimDir = 1;
            heartCount = 0;
            crimson = true;
            int num2 = i;
            int worldSurface = j;
            if (worldSurface > Game1.worldSurface)
            {
                worldSurface = (int)Game1.worldSurface;
            }
            while (!SolidTile(num2, worldSurface))
            {
                worldSurface++;
            }
            int num4 = num2;
            int num5 = worldSurface;
            Vector2 position = new Vector2((float)num2, (float)worldSurface);
            Vector2 vector2 = new Vector2(genRand.Next(-20, 0x15) * 0.1f, genRand.Next(20, 0xc9) * 0.01f);
            if (vector2.X < 0f)
            {
                crimDir = -1;
            }
            float num6 = genRand.Next(15, 0x1a);
            bool flag = true;
            int num7 = 0;
            while (flag)
            {
                num6 += Game1.rand.Next(-50, 0x33) * 0.01f;
                if (num6 < 15f)
                {
                    num6 = 15f;
                }
                if (num6 > 25f)
                {
                    num6 = 25f;
                }
                for (int num8 = (int)(position.X - (num6 / 2f)); num8 < (position.X + (num6 / 2f)); num8++)
                {
                    for (int num9 = (int)(position.Y - (num6 / 2f)); num9 < (position.Y + (num6 / 2f)); num9++)
                    {
                        if (num9 > num5)
                        {
                            if ((Math.Abs((float)(num8 - position.X)) + Math.Abs((float)(num9 - position.Y))) < (num6 * 0.3))
                            {
                                Game1.tile[num8, num9].active(false);
                                Game1.tile[num8, num9].wall = 0x53;
                            }
                            else if (((Math.Abs((float)(num8 - position.X)) + Math.Abs((float)(num9 - position.Y))) < (num6 * 0.8)) && (Game1.tile[num8, num9].wall != 0x53))
                            {
                                Game1.tile[num8, num9].active(true);
                                Game1.tile[num8, num9].type = 0xcb;
                                if ((Math.Abs((float)(num8 - position.X)) + Math.Abs((float)(num9 - position.Y))) < (num6 * 0.6))
                                {
                                    Game1.tile[num8, num9].wall = 0x53;
                                }
                            }
                        }
                        else if (((Math.Abs((float)(num8 - position.X)) + Math.Abs((float)(num9 - position.Y))) < (num6 * 0.3)) && Game1.tile[num8, num9].active())
                        {
                            Game1.tile[num8, num9].active(false);
                            Game1.tile[num8, num9].wall = 0x53;
                        }
                    }
                }
                if (position.X > (num4 + 50))
                {
                    num7 = -100;
                }
                if (position.X < (num4 - 50))
                {
                    num7 = 100;
                }
                if (num7 < 0)
                {
                    vector2.X -= genRand.Next(20, 0x33) * 0.01f;
                }
                else if (num7 > 0)
                {
                    vector2.X += genRand.Next(20, 0x33) * 0.01f;
                }
                else
                {
                    vector2.X += genRand.Next(-50, 0x33) * 0.01f;
                }
                vector2.Y += genRand.Next(-50, 0x33) * 0.01f;
                if (vector2.Y < 0.25)
                {
                    vector2.Y = 0.25f;
                }
                if (vector2.Y > 2f)
                {
                    vector2.Y = 2f;
                }
                if (vector2.X < -2f)
                {
                    vector2.X = -2f;
                }
                if (vector2.X > 2f)
                {
                    vector2.X = 2f;
                }
                position += vector2;
                if (position.Y > (Game1.worldSurface + 100.0))
                {
                    flag = false;
                }
            }
            num6 = genRand.Next(40, 0x37);
            for (int k = 0; k < 50; k++)
            {
                int num11 = ((int)position.X) + genRand.Next(-20, 0x15);
                int num12 = ((int)position.Y) + genRand.Next(-20, 0x15);
                for (int num13 = num11 - ((int)(num6 / 2f)); num13 < (num11 + (num6 / 2f)); num13++)
                {
                    for (int num14 = num12 - ((int)(num6 / 2f)); num14 < (num12 + (num6 / 2f)); num14++)
                    {
                        float num15 = Math.Abs((int)(num13 - num11));
                        float num16 = Math.Abs((int)(num14 - num12));
                        float num17 = 1f + (genRand.Next(-20, 0x15) * 0.01f);
                        float num18 = 1f + (genRand.Next(-20, 0x15) * 0.01f);
                        num15 *= num17;
                        num16 *= num18;
                        double num19 = Math.Sqrt((double)((num15 * num15) + (num16 * num16)));
                        if (num19 < (num6 * 0.25))
                        {
                            Game1.tile[num13, num14].active(false);
                            Game1.tile[num13, num14].wall = 0x53;
                        }
                        else if ((num19 < (num6 * 0.4)) && (Game1.tile[num13, num14].wall != 0x53))
                        {
                            Game1.tile[num13, num14].active(true);
                            Game1.tile[num13, num14].type = 0xcb;
                            if (num19 < (num6 * 0.35))
                            {
                                Game1.tile[num13, num14].wall = 0x53;
                            }
                        }
                    }
                }
            }
            int num20 = genRand.Next(5, 9);
            Vector2[] vectorArray = new Vector2[num20];
            for (int m = 0; m < num20; m++)
            {
                int x = (int)position.X;
                int y = (int)position.Y;
                int num24 = 0;
                bool flag2 = true;
                Vector2 velocity = new Vector2(genRand.Next(-20, 0x15) * 0.15f, genRand.Next(0, 0x15) * 0.15f);
                while (flag2)
                {
                    velocity = new Vector2(genRand.Next(-20, 0x15) * 0.15f, genRand.Next(0, 0x15) * 0.15f);
                    goto Label_06EE;
                Label_06BE:
                    velocity = new Vector2(genRand.Next(-20, 0x15) * 0.15f, genRand.Next(0, 0x15) * 0.15f);
                Label_06EE:
                    float introduced65 = Math.Abs(velocity.X);
                    if ((introduced65 + Math.Abs(velocity.Y)) < 1.5)
                    {
                        goto Label_06BE;
                    }
                    flag2 = false;
                    for (int num25 = 0; num25 < m; num25++)
                    {
                        if (((vector2.X > (vectorArray[num25].X - 0.75)) && (vector2.X < (vectorArray[num25].X + 0.75))) && ((vector2.Y > (vectorArray[num25].Y - 0.75)) && (vector2.Y < (vectorArray[num25].Y + 0.75))))
                        {
                            flag2 = true;
                            num24++;
                            break;
                        }
                    }
                    if (num24 > 0x2710)
                    {
                        break;
                    }
                }
                vectorArray[m] = velocity;
                CrimVein(new Vector2((float)x, (float)y), velocity);
            }
            for (int n = 0; n < heartCount; n++)
            {
                num6 = genRand.Next(0x10, 0x15);
                int num27 = (int)heartPos[n].X;
                int num28 = (int)heartPos[n].Y;
                for (int num29 = num27 - ((int)(num6 / 2f)); num29 < (num27 + (num6 / 2f)); num29++)
                {
                    for (int num30 = num28 - ((int)(num6 / 2f)); num30 < (num28 + (num6 / 2f)); num30++)
                    {
                        float num31 = Math.Abs((int)(num29 - num27));
                        float num32 = Math.Abs((int)(num30 - num28));
                        if (Math.Sqrt((double)((num31 * num31) + (num32 * num32))) < (num6 * 0.4))
                        {
                            Game1.tile[num29, num30].active(true);
                            Game1.tile[num29, num30].type = 0xcb;
                            Game1.tile[num29, num30].wall = 0x53;
                        }
                    }
                }
            }
            for (int num34 = 0; num34 < heartCount; num34++)
            {
                num6 = genRand.Next(10, 14);
                int num35 = (int)heartPos[num34].X;
                int num36 = (int)heartPos[num34].Y;
                for (int num37 = num35 - ((int)(num6 / 2f)); num37 < (num35 + (num6 / 2f)); num37++)
                {
                    for (int num38 = num36 - ((int)(num6 / 2f)); num38 < (num36 + (num6 / 2f)); num38++)
                    {
                        float num39 = Math.Abs((int)(num37 - num35));
                        float num40 = Math.Abs((int)(num38 - num36));
                        if (Math.Sqrt((double)((num39 * num39) + (num40 * num40))) < (num6 * 0.3))
                        {
                            Game1.tile[num37, num38].active(false);
                            Game1.tile[num37, num38].wall = 0x53;
                        }
                    }
                }
            }
            for (int num42 = 0; num42 < heartCount; num42++)
            {
                AddShadowOrb((int)heartPos[num42].X, (int)heartPos[num42].Y);
            }
            int maxTilesX = Game1.maxTilesX;
            int num44 = 0;
            position.X = num4;
            position.Y = num5;
            num6 = genRand.Next(0x19, 0x23);
            float num45 = genRand.Next(0, 6);
            for (int num46 = 0; num46 < 50; num46++)
            {
                if (num45 > 0f)
                {
                    float num47 = genRand.Next(10, 30) * 0.01f;
                    num45 -= num47;
                    position.Y -= num47;
                }
                int num48 = ((int)position.X) + genRand.Next(-2, 3);
                int num49 = ((int)position.Y) + genRand.Next(-2, 3);
                for (int num50 = num48 - ((int)(num6 / 2f)); num50 < (num48 + (num6 / 2f)); num50++)
                {
                    for (int num51 = num49 - ((int)(num6 / 2f)); num51 < (num49 + (num6 / 2f)); num51++)
                    {
                        float num52 = Math.Abs((int)(num50 - num48));
                        float num53 = Math.Abs((int)(num51 - num49));
                        float num54 = 1f + (genRand.Next(-20, 0x15) * 0.005f);
                        float num55 = 1f + (genRand.Next(-20, 0x15) * 0.005f);
                        num52 *= num54;
                        num53 *= num55;
                        double num56 = Math.Sqrt((double)((num52 * num52) + (num53 * num53)));
                        if (num56 < ((num6 * 0.2) * (genRand.Next(90, 0x6f) * 0.01)))
                        {
                            Game1.tile[num50, num51].active(false);
                            Game1.tile[num50, num51].wall = 0x53;
                        }
                        else if (num56 < (num6 * 0.45))
                        {
                            if (num50 < maxTilesX)
                            {
                                maxTilesX = num50;
                            }
                            if (num50 > num44)
                            {
                                num44 = num50;
                            }
                            if (Game1.tile[num50, num51].wall != 0x53)
                            {
                                Game1.tile[num50, num51].active(true);
                                Game1.tile[num50, num51].type = 0xcb;
                                if (num56 < (num6 * 0.35))
                                {
                                    Game1.tile[num50, num51].wall = 0x53;
                                }
                            }
                        }
                    }
                }
            }
            for (int num57 = maxTilesX; num57 <= num44; num57++)
            {
                int num58 = num5;
                while (((Game1.tile[num57, num58].type == 0xcb) && Game1.tile[num57, num58].active()) || (Game1.tile[num57, num58].wall == 0x53))
                {
                    num58++;
                }
                int num59 = genRand.Next(15, 20);
                while ((!Game1.tile[num57, num58].active() && (num59 > 0)) && (Game1.tile[num57, num58].wall != 0x53))
                {
                    num59--;
                    Game1.tile[num57, num58].type = 0xcb;
                    Game1.tile[num57, num58].active(true);
                    num58++;
                }
            }
            CrimEnt(position, crimDir);
        }

        public static void CrimVein(Vector2 position, Vector2 velocity)
        {
            float num = genRand.Next(15, 0x1a);
            bool flag = true;
            Vector2 vector = velocity;
            Vector2 vector2 = position;
            int num2 = genRand.Next(100, 150);
            if (velocity.Y < 0f)
            {
                num2 -= 0x19;
            }
            while (flag)
            {
                num += Game1.rand.Next(-50, 0x33) * 0.02f;
                if (num < 15f)
                {
                    num = 15f;
                }
                if (num > 25f)
                {
                    num = 25f;
                }
                for (int i = (int)(position.X - (num / 2f)); i < (position.X + (num / 2f)); i++)
                {
                    for (int j = (int)(position.Y - (num / 2f)); j < (position.Y + (num / 2f)); j++)
                    {
                        float num5 = Math.Abs((float)(i - position.X));
                        float num6 = Math.Abs((float)(j - position.Y));
                        double num7 = Math.Sqrt((double)((num5 * num5) + (num6 * num6)));
                        if (num7 < (num * 0.2))
                        {
                            Game1.tile[i, j].active(false);
                            Game1.tile[i, j].wall = 0x53;
                        }
                        else if ((num7 < (num * 0.5)) && (Game1.tile[i, j].wall != 0x53))
                        {
                            Game1.tile[i, j].active(true);
                            Game1.tile[i, j].type = 0xcb;
                            if (num7 < (num * 0.4))
                            {
                                Game1.tile[i, j].wall = 0x53;
                            }
                        }
                    }
                }
                velocity.X += genRand.Next(-50, 0x33) * 0.05f;
                velocity.Y += genRand.Next(-50, 0x33) * 0.05f;
                if (velocity.Y < (vector.Y - 0.75))
                {
                    velocity.Y = vector.Y - 0.75f;
                }
                if (velocity.Y > (vector.Y + 0.75))
                {
                    velocity.Y = vector.Y + 0.75f;
                }
                if (velocity.X < (vector.X - 0.75))
                {
                    velocity.X = vector.X - 0.75f;
                }
                if (velocity.X > (vector.X + 0.75))
                {
                    velocity.X = vector.X + 0.75f;
                }
                position += velocity;
                if ((Math.Abs((float)(position.X - vector2.X)) + Math.Abs((float)(position.Y - vector2.Y))) > num2)
                {
                    flag = false;
                }
            }
            heartPos[heartCount] = position;
            heartCount++;
        }

        public static void DestroyHeart(int i, int j)
        {
            destroyObject = true;
            for (int k = i; k < (i + 2); k++)
            {
                for (int m = j; m < (j + 2); m++)
                {
                    if ((k < Game1.maxTilesX) && (m < Game1.maxTilesY))
                    {
                        Tile tile = Game1.tile[k, m];
                        if (tile.active() && (tile.type == 12))
                        {
                            KillTile(k, m, false, false, false);
                        }
                    }
                }
            }
            destroyObject = false;
        }

        public static void DiamondTileFrame(int i, int j)
        {
            TileFrame(i - 1, j, false, false);
            TileFrame(i, j - 1, false, false);
            TileFrame(i, j + 1, false, false);
            TileFrame(i + 1, j, false, false);
        }

        public static Vector2 digTunnel(float X, float Y, float xDir, float yDir, int Steps, int Size, bool Wet = false)
        {
            float num = X;
            float num2 = Y;
            try
            {
                float num3 = 0f;
                float num4 = 0f;
                int num5 = Steps;
                float num6 = Size;
                num = MathHelper.Clamp(num, num6 + 1f, (Game1.maxTilesX - num6) - 1f);
                num2 = MathHelper.Clamp(num2, num6 + 1f, (Game1.maxTilesY - num6) - 1f);
                for (int i = 0; i < num5; i++)
                {
                    for (int j = (int)(num - num6); j <= (num + num6); j++)
                    {
                        for (int k = (int)(num2 - num6); k <= (num2 + num6); k++)
                        {
                            if ((Math.Abs((float)(j - num)) + Math.Abs((float)(k - num2))) < (num6 * (1.0 + (genRand.Next(-10, 11) * 0.005))))
                            {
                                Game1.tile[j, k].active(false);
                                if (Wet)
                                {
                                    Game1.tile[j, k].liquid = 0xff;
                                }
                            }
                        }
                    }
                    num6 += genRand.Next(-50, 0x33) * 0.03f;
                    if (num6 < (Size * 0.6))
                    {
                        num6 = Size * 0.6f;
                    }
                    if (num6 > (Size * 2))
                    {
                        num6 = Size * 2f;
                    }
                    num3 += genRand.Next(-20, 0x15) * 0.01f;
                    num4 += genRand.Next(-20, 0x15) * 0.01f;
                    if (num3 < -1f)
                    {
                        num3 = -1f;
                    }
                    if (num3 > 1f)
                    {
                        num3 = 1f;
                    }
                    if (num4 < -1f)
                    {
                        num4 = -1f;
                    }
                    if (num4 > 1f)
                    {
                        num4 = 1f;
                    }
                    num += (xDir + num3) * 0.6f;
                    num2 += (yDir + num4) * 0.6f;
                }
            }
            catch
            {
            }
            return new Vector2(num, num2);
        }

        public static void DirtyRockRunner(int i, int j)
        {
            Vector2 vector;
            Vector2 vector2;
            double num5 = genRand.Next(2, 6);
            float num6 = genRand.Next(5, 50);
            float num7 = num6;
            vector.X = i;
            vector.Y = j;
            vector2.X = genRand.Next(-10, 11) * 0.1f;
            vector2.Y = genRand.Next(-10, 11) * 0.1f;
            while ((num5 > 0.0) && (num7 > 0f))
            {
                double num8 = num5 * (num7 / num6);
                num7--;
                int num = (int)(vector.X - (num8 * 0.5));
                int maxTilesX = (int)(vector.X + (num8 * 0.5));
                int num2 = (int)(vector.Y - (num8 * 0.5));
                int maxTilesY = (int)(vector.Y + (num8 * 0.5));
                if (num < 0)
                {
                    num = 0;
                }
                if (maxTilesX > Game1.maxTilesX)
                {
                    maxTilesX = Game1.maxTilesX;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                for (int k = num; k < maxTilesX; k++)
                {
                    for (int m = num2; m < maxTilesY; m++)
                    {
                        if (((Math.Abs((float)(k - vector.X)) + Math.Abs((float)(m - vector.Y))) < ((num5 * 0.5) * (1.0 + (genRand.Next(-10, 11) * 0.015)))) && (Game1.tile[k, m].wall == 2))
                        {
                            Game1.tile[k, m].wall = 0x3b;
                        }
                    }
                }
                vector += vector2;
                vector2.X += genRand.Next(-10, 11) * 0.05f;
                if (vector2.X > 1f)
                {
                    vector2.X = 1f;
                }
                if (vector2.X < -1f)
                {
                    vector2.X = -1f;
                }
                vector2.Y += genRand.Next(-10, 11) * 0.05f;
                if (vector2.Y > 1f)
                {
                    vector2.Y = 1f;
                }
                if (vector2.Y < -1f)
                {
                    vector2.Y = -1f;
                }
            }
        }

        public static void DropDoorItem(int x, int y, int doorStyle)
        {
            int type = 0;
            if (doorStyle == 0)
            {
                type = 0x19;
            }
            else if (doorStyle == 9)
            {
                type = 0x345;
            }
            else if (doorStyle == 10)
            {
                type = 0x390;
            }
            else if (doorStyle == 12)
            {
                type = 0x471;
            }
            else if (doorStyle == 13)
            {
                type = 0x472;
            }
            else if (doorStyle == 14)
            {
                type = 0x473;
            }
            else if (doorStyle == 15)
            {
                type = 0x474;
            }
            else if (doorStyle == 0x10)
            {
                type = 0x583;
            }
            else if (doorStyle == 0x11)
            {
                type = 0x584;
            }
            else if (doorStyle == 0x12)
            {
                type = 0x585;
            }
            else if (doorStyle == 0x13)
            {
                type = 0x5b2;
            }
            else if ((doorStyle >= 20) && (doorStyle <= 0x17))
            {
                type = (0x6ad + doorStyle) - 20;
            }
            else if (doorStyle == 0x18)
            {
                type = 0x701;
            }
            else if (doorStyle == 0x19)
            {
                type = 0x717;
            }
            else if (doorStyle == 0x1a)
            {
                type = 0x784;
            }
            else if (doorStyle == 0x1b)
            {
                type = 0x7fc;
            }
            else if (doorStyle == 0x1c)
            {
                type = 0x8d9;
            }
            else if (doorStyle == 0x1d)
            {
                type = 0x9e0;
            }
            else if (doorStyle == 30)
            {
                type = 0xa01;
            }
            else if (doorStyle == 0x1f)
            {
                type = 0xa10;
            }
            else if (doorStyle == 0x20)
            {
                type = 0xaff;
            }
            else if (doorStyle == 0x21)
            {
                type = 0xc39;
            }
            else if (doorStyle == 0x22)
            {
                type = 0xc3b;
            }
            else if (doorStyle == 0x23)
            {
                type = 0xc3a;
            }
            else if ((doorStyle >= 4) && (doorStyle <= 8))
            {
                type = 0x32c + doorStyle;
            }
            else if (doorStyle != 11)
            {
                type = 0x289 + doorStyle;
            }
            if (type != 0)
            {
                Item.NewItem(x * 0x10, y * 0x10, 0x10, 0x10, type, 1, false, 0, false);
            }
        }

        public static void dropMeteor()
        {
            bool flag = true;
            if (Game1.netMode != 1)
            {
                for (int i = 0; i < 0xff; i++)
                {
                    if (Game1.player[i].active)
                    {
                        flag = false;
                        break;
                    }
                }
                int num2 = 0;
                float num3 = Game1.maxTilesX / 0x1068;
                int num4 = (int)(400f * num3);
                for (int j = 5; j < (Game1.maxTilesX - 5); j++)
                {
                    for (int k = 5; k < Game1.worldSurface; k++)
                    {
                        if (Game1.tile[j, k].active() && (Game1.tile[j, k].type == 0x25))
                        {
                            num2++;
                            if (num2 > num4)
                            {
                                return;
                            }
                        }
                    }
                }
                float num7 = 600f;
                while (!flag)
                {
                    float num8 = Game1.maxTilesX * 0.08f;
                    int num9 = Game1.rand.Next(150, Game1.maxTilesX - 150);
                    while ((num9 > (Game1.spawnTileX - num8)) && (num9 < (Game1.spawnTileX + num8)))
                    {
                        num9 = Game1.rand.Next(150, Game1.maxTilesX - 150);
                    }
                    for (int m = (int)(Game1.worldSurface * 0.3); m < Game1.maxTilesY; m++)
                    {
                        if (Game1.tile[num9, m].active() && Game1.tileSolid[Game1.tile[num9, m].type])
                        {
                            int num11 = 0;
                            int num12 = 15;
                            for (int n = num9 - num12; n < (num9 + num12); n++)
                            {
                                for (int num14 = m - num12; num14 < (m + num12); num14++)
                                {
                                    if (SolidTile(n, num14))
                                    {
                                        num11++;
                                        if ((Game1.tile[n, num14].type == 0xbd) || (Game1.tile[n, num14].type == 0xca))
                                        {
                                            num11 -= 100;
                                        }
                                    }
                                    else if (Game1.tile[n, num14].liquid > 0)
                                    {
                                        num11--;
                                    }
                                }
                            }
                            if (num11 >= num7)
                            {
                                if (!meteor(num9, m))
                                {
                                }
                            }
                            else
                            {
                                num7 -= 0.5f;
                            }
                            break;
                        }
                    }
                    if (num7 < 100f)
                    {
                        return;
                    }
                }
            }
        }

        public static void dropXmasTree(int x, int y, int obj)
        {
            int num = x;
            int num2 = y;
            if (Game1.tile[x, y].frameX < 10)
            {
                num -= Game1.tile[x, y].frameX;
                num2 -= Game1.tile[x, y].frameY;
            }
            int num3 = 0;
            if ((Game1.tile[num, num2].frameY & 1) == 1)
            {
                num3++;
            }
            if ((Game1.tile[num, num2].frameY & 2) == 2)
            {
                num3 += 2;
            }
            if ((Game1.tile[num, num2].frameY & 4) == 4)
            {
                num3 += 4;
            }
            int num4 = 0;
            if ((Game1.tile[num, num2].frameY & 8) == 8)
            {
                num4++;
            }
            if ((Game1.tile[num, num2].frameY & 0x10) == 0x10)
            {
                num4 += 2;
            }
            if ((Game1.tile[num, num2].frameY & 0x20) == 0x20)
            {
                num4 += 4;
            }
            int num5 = 0;
            if ((Game1.tile[num, num2].frameY & 0x40) == 0x40)
            {
                num5++;
            }
            if ((Game1.tile[num, num2].frameY & 0x80) == 0x80)
            {
                num5 += 2;
            }
            if ((Game1.tile[num, num2].frameY & 0x100) == 0x100)
            {
                num5 += 4;
            }
            if ((Game1.tile[num, num2].frameY & 0x200) == 0x200)
            {
                num5 += 8;
            }
            int num6 = 0;
            if ((Game1.tile[num, num2].frameY & 0x400) == 0x400)
            {
                num6++;
            }
            if ((Game1.tile[num, num2].frameY & 0x800) == 0x800)
            {
                num6 += 2;
            }
            if ((Game1.tile[num, num2].frameY & 0x1000) == 0x1000)
            {
                num6 += 4;
            }
            if ((Game1.tile[num, num2].frameY & 0x2000) == 0x2000)
            {
                num6 += 8;
            }
            if ((obj == 0) && (num3 > 0))
            {
                int number = Item.NewItem(x * 0x10, y * 0x10, 0x10, 0x10, (0x752 + num3) - 1, 1, false, 0, false);
                if (Game1.netMode == 1)
                {
                    NetMessage.SendData(0x15, -1, -1, "", number, 1f, 0f, 0f, 0, 0, 0);
                }
            }
            else if ((obj == 1) && (num4 > 0))
            {
                int num8 = Item.NewItem(x * 0x10, y * 0x10, 0x10, 0x10, (0x756 + num4) - 1, 1, false, 0, false);
                if (Game1.netMode == 1)
                {
                    NetMessage.SendData(0x15, -1, -1, "", num8, 1f, 0f, 0f, 0, 0, 0);
                }
            }
            else if ((obj == 2) && (num5 > 0))
            {
                int num9 = Item.NewItem(x * 0x10, y * 0x10, 0x10, 0x10, (0x75c + num5) - 1, 1, false, 0, false);
                if (Game1.netMode == 1)
                {
                    NetMessage.SendData(0x15, -1, -1, "", num9, 1f, 0f, 0f, 0, 0, 0);
                }
            }
            else if ((obj == 3) && (num6 > 0))
            {
                int num10 = Item.NewItem(x * 0x10, y * 0x10, 0x10, 0x10, (0x767 + num6) - 1, 1, false, 0, false);
                if (Game1.netMode == 1)
                {
                    NetMessage.SendData(0x15, -1, -1, "", num10, 1f, 0f, 0f, 0, 0, 0);
                }
            }
        }

        public static void DungeonEnt(int i, int j, ushort tileType, int wallType)
        {
            Vector2 vector;
            int num = 60;
            for (int k = i - num; k < (i + num); k++)
            {
                for (int num3 = j - num; num3 < (j + num); num3++)
                {
                    Game1.tile[k, num3].liquid = 0;
                    Game1.tile[k, num3].lava(false);
                }
            }
            double num8 = dxStrength1;
            double num9 = dyStrength1;
            vector.X = i;
            vector.Y = j - (((float)num9) / 2f);
            dMinY = (int)vector.Y;
            int num10 = 1;
            if (i > (Game1.maxTilesX / 2))
            {
                num10 = -1;
            }
            int num4 = ((int)(vector.X - (num8 * 0.60000002384185791))) - genRand.Next(2, 5);
            int maxTilesX = ((int)(vector.X + (num8 * 0.60000002384185791))) + genRand.Next(2, 5);
            int num5 = ((int)(vector.Y - (num9 * 0.60000002384185791))) - genRand.Next(2, 5);
            int maxTilesY = ((int)(vector.Y + (num9 * 0.60000002384185791))) + genRand.Next(8, 0x10);
            if (num4 < 0)
            {
                num4 = 0;
            }
            if (maxTilesX > Game1.maxTilesX)
            {
                maxTilesX = Game1.maxTilesX;
            }
            if (num5 < 0)
            {
                num5 = 0;
            }
            if (maxTilesY > Game1.maxTilesY)
            {
                maxTilesY = Game1.maxTilesY;
            }
            for (int m = num4; m < maxTilesX; m++)
            {
                for (int num12 = num5; num12 < maxTilesY; num12++)
                {
                    Game1.tile[m, num12].liquid = 0;
                    if (Game1.tile[m, num12].wall != wallType)
                    {
                        Game1.tile[m, num12].wall = 0;
                        if (((m > (num4 + 1)) && (m < (maxTilesX - 2))) && ((num12 > (num5 + 1)) && (num12 < (maxTilesY - 2))))
                        {
                            Game1.tile[m, num12].wall = (byte)wallType;
                        }
                        Game1.tile[m, num12].active(true);
                        Game1.tile[m, num12].type = tileType;
                    }
                }
            }
            int num13 = num4;
            int num14 = (num4 + 5) + genRand.Next(4);
            int num15 = (num5 - 3) - genRand.Next(3);
            int num16 = num5;
            for (int n = num13; n < num14; n++)
            {
                for (int num18 = num15; num18 < num16; num18++)
                {
                    if (Game1.tile[n, num18].wall != wallType)
                    {
                        Game1.tile[n, num18].active(true);
                        Game1.tile[n, num18].type = tileType;
                    }
                }
            }
            num13 = (maxTilesX - 5) - genRand.Next(4);
            num14 = maxTilesX;
            num15 = (num5 - 3) - genRand.Next(3);
            num16 = num5;
            for (int num19 = num13; num19 < num14; num19++)
            {
                for (int num20 = num15; num20 < num16; num20++)
                {
                    if (Game1.tile[num19, num20].wall != wallType)
                    {
                        Game1.tile[num19, num20].active(true);
                        Game1.tile[num19, num20].type = tileType;
                    }
                }
            }
            int num21 = 1 + genRand.Next(2);
            int num22 = 2 + genRand.Next(4);
            int num23 = 0;
            for (int num24 = num4; num24 < maxTilesX; num24++)
            {
                for (int num25 = num5 - num21; num25 < num5; num25++)
                {
                    if (Game1.tile[num24, num25].wall != wallType)
                    {
                        Game1.tile[num24, num25].active(true);
                        Game1.tile[num24, num25].type = tileType;
                    }
                }
                num23++;
                if (num23 >= num22)
                {
                    num24 += num22;
                    num23 = 0;
                }
            }
            for (int num26 = num4; num26 < maxTilesX; num26++)
            {
                for (int num27 = maxTilesY; num27 < Game1.worldSurface; num27++)
                {
                    if (!Game1.wallDungeon[Game1.tile[num26, num27].wall])
                    {
                        Game1.tile[num26, num27].active(true);
                        Game1.tile[num26, num27].type = tileType;
                    }
                    Game1.tile[num26, num27].wall = (byte)wallType;
                }
            }
            num4 = (int)(vector.X - (num8 * 0.60000002384185791));
            maxTilesX = (int)(vector.X + (num8 * 0.60000002384185791));
            num5 = (int)(vector.Y - (num9 * 0.60000002384185791));
            maxTilesY = (int)(vector.Y + (num9 * 0.60000002384185791));
            if (num4 < 0)
            {
                num4 = 0;
            }
            if (maxTilesX > Game1.maxTilesX)
            {
                maxTilesX = Game1.maxTilesX;
            }
            if (num5 < 0)
            {
                num5 = 0;
            }
            if (maxTilesY > Game1.maxTilesY)
            {
                maxTilesY = Game1.maxTilesY;
            }
            for (int num28 = num4; num28 < maxTilesX; num28++)
            {
                for (int num29 = num5; num29 < maxTilesY; num29++)
                {
                    Game1.tile[num28, num29].wall = (byte)wallType;
                }
            }
            num4 = (int)((vector.X - (num8 * 0.6)) - 1.0);
            maxTilesX = (int)((vector.X + (num8 * 0.6)) + 1.0);
            num5 = (int)((vector.Y - (num9 * 0.6)) - 1.0);
            maxTilesY = (int)((vector.Y + (num9 * 0.6)) + 1.0);
            if (num4 < 0)
            {
                num4 = 0;
            }
            if (maxTilesX > Game1.maxTilesX)
            {
                maxTilesX = Game1.maxTilesX;
            }
            if (num5 < 0)
            {
                num5 = 0;
            }
            if (maxTilesY > Game1.maxTilesY)
            {
                maxTilesY = Game1.maxTilesY;
            }
            for (int num30 = num4; num30 < maxTilesX; num30++)
            {
                for (int num31 = num5; num31 < maxTilesY; num31++)
                {
                    Game1.tile[num30, num31].wall = (byte)wallType;
                }
            }
            num4 = (int)(vector.X - (num8 * 0.5));
            maxTilesX = (int)(vector.X + (num8 * 0.5));
            num5 = (int)(vector.Y - (num9 * 0.5));
            maxTilesY = (int)(vector.Y + (num9 * 0.5));
            if (num4 < 0)
            {
                num4 = 0;
            }
            if (maxTilesX > Game1.maxTilesX)
            {
                maxTilesX = Game1.maxTilesX;
            }
            if (num5 < 0)
            {
                num5 = 0;
            }
            if (maxTilesY > Game1.maxTilesY)
            {
                maxTilesY = Game1.maxTilesY;
            }
            for (int num32 = num4; num32 < maxTilesX; num32++)
            {
                for (int num33 = num5; num33 < maxTilesY; num33++)
                {
                    Game1.tile[num32, num33].active(false);
                    Game1.tile[num32, num33].wall = (byte)wallType;
                }
            }
            int x = (int)vector.X;
            int num35 = maxTilesY;
            for (int num36 = 0; num36 < 20; num36++)
            {
                x = ((int)vector.X) - num36;
                if (!Game1.tile[x, num35].active() && Game1.wallDungeon[Game1.tile[x, num35].wall])
                {
                    DPlatX[numDPlats] = x;
                    DPlatY[numDPlats] = num35;
                    numDPlats++;
                    break;
                }
                x = ((int)vector.X) + num36;
                if (!Game1.tile[x, num35].active() && Game1.wallDungeon[Game1.tile[x, num35].wall])
                {
                    DPlatX[numDPlats] = x;
                    DPlatY[numDPlats] = num35;
                    numDPlats++;
                    break;
                }
            }
            vector.X += (((float)num8) * 0.6f) * num10;
            vector.Y += ((float)num9) * 0.5f;
            num8 = dxStrength2;
            num9 = dyStrength2;
            vector.X += (((float)num8) * 0.55f) * num10;
            vector.Y -= ((float)num9) * 0.5f;
            num4 = ((int)(vector.X - (num8 * 0.60000002384185791))) - genRand.Next(1, 3);
            maxTilesX = ((int)(vector.X + (num8 * 0.60000002384185791))) + genRand.Next(1, 3);
            num5 = ((int)(vector.Y - (num9 * 0.60000002384185791))) - genRand.Next(1, 3);
            maxTilesY = ((int)(vector.Y + (num9 * 0.60000002384185791))) + genRand.Next(6, 0x10);
            if (num4 < 0)
            {
                num4 = 0;
            }
            if (maxTilesX > Game1.maxTilesX)
            {
                maxTilesX = Game1.maxTilesX;
            }
            if (num5 < 0)
            {
                num5 = 0;
            }
            if (maxTilesY > Game1.maxTilesY)
            {
                maxTilesY = Game1.maxTilesY;
            }
            for (int num37 = num4; num37 < maxTilesX; num37++)
            {
                for (int num38 = num5; num38 < maxTilesY; num38++)
                {
                    if (Game1.tile[num37, num38].wall != wallType)
                    {
                        bool flag = true;
                        if (num10 < 0)
                        {
                            if (num37 < (vector.X - (num8 * 0.5)))
                            {
                                flag = false;
                            }
                        }
                        else if (num37 > ((vector.X + (num8 * 0.5)) - 1.0))
                        {
                            flag = false;
                        }
                        if (flag)
                        {
                            Game1.tile[num37, num38].wall = 0;
                            Game1.tile[num37, num38].active(true);
                            Game1.tile[num37, num38].type = tileType;
                        }
                    }
                }
            }
            for (int num39 = num4; num39 < maxTilesX; num39++)
            {
                for (int num40 = maxTilesY; num40 < Game1.worldSurface; num40++)
                {
                    if (!Game1.wallDungeon[Game1.tile[num39, num40].wall])
                    {
                        Game1.tile[num39, num40].active(true);
                        Game1.tile[num39, num40].type = tileType;
                    }
                    Game1.tile[num39, num40].wall = (byte)wallType;
                }
            }
            num4 = (int)(vector.X - (num8 * 0.5));
            maxTilesX = (int)(vector.X + (num8 * 0.5));
            num13 = num4;
            if (num10 < 0)
            {
                num13++;
            }
            num14 = (num13 + 5) + genRand.Next(4);
            num15 = (num5 - 3) - genRand.Next(3);
            num16 = num5;
            for (int num41 = num13; num41 < num14; num41++)
            {
                for (int num42 = num15; num42 < num16; num42++)
                {
                    if (Game1.tile[num41, num42].wall != wallType)
                    {
                        Game1.tile[num41, num42].active(true);
                        Game1.tile[num41, num42].type = tileType;
                    }
                }
            }
            num13 = (maxTilesX - 5) - genRand.Next(4);
            num14 = maxTilesX;
            num15 = (num5 - 3) - genRand.Next(3);
            num16 = num5;
            for (int num43 = num13; num43 < num14; num43++)
            {
                for (int num44 = num15; num44 < num16; num44++)
                {
                    if (Game1.tile[num43, num44].wall != wallType)
                    {
                        Game1.tile[num43, num44].active(true);
                        Game1.tile[num43, num44].type = tileType;
                    }
                }
            }
            num21 = 1 + genRand.Next(2);
            num22 = 2 + genRand.Next(4);
            num23 = 0;
            if (num10 < 0)
            {
                maxTilesX++;
            }
            for (int num45 = num4 + 1; num45 < (maxTilesX - 1); num45++)
            {
                for (int num46 = num5 - num21; num46 < num5; num46++)
                {
                    if (Game1.tile[num45, num46].wall != wallType)
                    {
                        Game1.tile[num45, num46].active(true);
                        Game1.tile[num45, num46].type = tileType;
                    }
                }
                num23++;
                if (num23 >= num22)
                {
                    num45 += num22;
                    num23 = 0;
                }
            }
            num4 = (int)(vector.X - (num8 * 0.6));
            maxTilesX = (int)(vector.X + (num8 * 0.6));
            num5 = (int)(vector.Y - (num9 * 0.6));
            maxTilesY = (int)(vector.Y + (num9 * 0.6));
            if (num4 < 0)
            {
                num4 = 0;
            }
            if (maxTilesX > Game1.maxTilesX)
            {
                maxTilesX = Game1.maxTilesX;
            }
            if (num5 < 0)
            {
                num5 = 0;
            }
            if (maxTilesY > Game1.maxTilesY)
            {
                maxTilesY = Game1.maxTilesY;
            }
            for (int num47 = num4; num47 < maxTilesX; num47++)
            {
                for (int num48 = num5; num48 < maxTilesY; num48++)
                {
                    Game1.tile[num47, num48].wall = 0;
                }
            }
            num4 = (int)(vector.X - (num8 * 0.5));
            maxTilesX = (int)(vector.X + (num8 * 0.5));
            num5 = (int)(vector.Y - (num9 * 0.5));
            maxTilesY = (int)(vector.Y + (num9 * 0.5));
            if (num4 < 0)
            {
                num4 = 0;
            }
            if (maxTilesX > Game1.maxTilesX)
            {
                maxTilesX = Game1.maxTilesX;
            }
            if (num5 < 0)
            {
                num5 = 0;
            }
            if (maxTilesY > Game1.maxTilesY)
            {
                maxTilesY = Game1.maxTilesY;
            }
            for (int num49 = num4; num49 < maxTilesX; num49++)
            {
                for (int num50 = num5; num50 < maxTilesY; num50++)
                {
                    Game1.tile[num49, num50].active(false);
                    Game1.tile[num49, num50].wall = 0;
                }
            }
            for (int num51 = num4; num51 < maxTilesX; num51++)
            {
                if (!Game1.tile[num51, maxTilesY].active())
                {
                    Game1.tile[num51, maxTilesY].active(true);
                    Game1.tile[num51, maxTilesY].type = 0x13;
                    if (wallType == 7)
                    {
                        Game1.tile[num51, maxTilesY].frameY = 0x6c;
                    }
                    if (wallType == 8)
                    {
                        Game1.tile[num51, maxTilesY].frameY = 0x90;
                    }
                    if (wallType == 9)
                    {
                        Game1.tile[num51, maxTilesY].frameY = 0x7e;
                    }
                }
            }
            Game1.dungeonX = (int)vector.X;
            Game1.dungeonY = maxTilesY;
            int index = NPC.NewNPC((Game1.dungeonX * 0x10) + 8, Game1.dungeonY * 0x10, 0x25, 0, 0f, 0f, 0f, 0f, 0xff);
            Game1.npc[index].homeless = false;
            Game1.npc[index].homeTileX = Game1.dungeonX;
            Game1.npc[index].homeTileY = Game1.dungeonY;
            if (num10 == 1)
            {
                int num53 = 0;
                for (int num54 = maxTilesX; num54 < (maxTilesX + 50); num54++)
                {
                    num53++;
                    for (int num55 = maxTilesY + num53; num55 < (maxTilesY + 50); num55++)
                    {
                        if (!Game1.wallDungeon[Game1.tile[num54, num55].wall])
                        {
                            Game1.tile[num54, num55].active(true);
                            Game1.tile[num54, num55].type = tileType;
                        }
                    }
                }
            }
            else
            {
                int num56 = 0;
                for (int num57 = num4; num57 > (num4 - 50); num57--)
                {
                    num56++;
                    for (int num58 = maxTilesY + num56; num58 < (maxTilesY + 50); num58++)
                    {
                        if (!Game1.wallDungeon[Game1.tile[num57, num58].wall])
                        {
                            Game1.tile[num57, num58].active(true);
                            Game1.tile[num57, num58].type = tileType;
                        }
                    }
                }
            }
            num21 = 1 + genRand.Next(2);
            num22 = 2 + genRand.Next(4);
            num23 = 0;
            num4 = (int)(vector.X - (num8 * 0.5));
            maxTilesX = (int)(vector.X + (num8 * 0.5));
            num4 += 2;
            maxTilesX -= 2;
            for (int num59 = num4; num59 < maxTilesX; num59++)
            {
                for (int num60 = num5; num60 < maxTilesY; num60++)
                {
                    PlaceWall(num59, num60, wallType, true);
                }
                num23++;
                if (num23 >= num22)
                {
                    num59 += num22 * 2;
                    num23 = 0;
                }
            }
            vector.X -= (((float)num8) * 0.6f) * num10;
            vector.Y += ((float)num9) * 0.5f;
            num8 = 15.0;
            num9 = 3.0;
            vector.Y -= ((float)num9) * 0.5f;
            num4 = (int)(vector.X - (num8 * 0.5));
            maxTilesX = (int)(vector.X + (num8 * 0.5));
            num5 = (int)(vector.Y - (num9 * 0.5));
            maxTilesY = (int)(vector.Y + (num9 * 0.5));
            if (num4 < 0)
            {
                num4 = 0;
            }
            if (maxTilesX > Game1.maxTilesX)
            {
                maxTilesX = Game1.maxTilesX;
            }
            if (num5 < 0)
            {
                num5 = 0;
            }
            if (maxTilesY > Game1.maxTilesY)
            {
                maxTilesY = Game1.maxTilesY;
            }
            for (int num61 = num4; num61 < maxTilesX; num61++)
            {
                for (int num62 = num5; num62 < maxTilesY; num62++)
                {
                    Game1.tile[num61, num62].active(false);
                }
            }
            if (num10 < 0)
            {
                vector.X--;
            }
            PlaceTile((int)vector.X, ((int)vector.Y) + 1, 10, true, false, -1, 13);
        }

        public static void DungeonHalls(int i, int j, ushort tileType, int wallType, bool forceX = false)
        {
            Vector2 vector;
            Vector2 zero = Vector2.Zero;
            double num5 = genRand.Next(4, 6);
            double num6 = num5;
            Vector2 vector3 = Vector2.Zero;
            Vector2 vector4 = Vector2.Zero;
            int num7 = 1;
            vector.X = i;
            vector.Y = j;
            int num8 = genRand.Next(0x23, 80);
            if (forceX)
            {
                num8 += 20;
                lastDungeonHall = Vector2.Zero;
            }
            else if (genRand.Next(5) == 0)
            {
                num5 *= 2.0;
                num8 /= 2;
            }
            bool flag = false;
            bool flag2 = false;
            bool flag3 = true;
            bool flag4 = false;
            while (!flag)
            {
                flag4 = false;
                if (flag3 && !forceX)
                {
                    bool flag5 = true;
                    bool flag6 = true;
                    bool flag7 = true;
                    bool flag8 = true;
                    int num9 = num8;
                    bool flag9 = false;
                    for (int k = j; k > (j - num9); k--)
                    {
                        int num11 = i;
                        if (Game1.tile[num11, k].wall == wallType)
                        {
                            if (!flag9)
                            {
                                continue;
                            }
                            flag5 = false;
                            break;
                        }
                        flag9 = true;
                    }
                    flag9 = false;
                    for (int m = j; m < (j + num9); m++)
                    {
                        int num13 = i;
                        if (Game1.tile[num13, m].wall == wallType)
                        {
                            if (!flag9)
                            {
                                continue;
                            }
                            flag6 = false;
                            break;
                        }
                        flag9 = true;
                    }
                    flag9 = false;
                    for (int n = i; n > (i - num9); n--)
                    {
                        int num15 = j;
                        if (Game1.tile[n, num15].wall == wallType)
                        {
                            if (!flag9)
                            {
                                continue;
                            }
                            flag7 = false;
                            break;
                        }
                        flag9 = true;
                    }
                    flag9 = false;
                    for (int num16 = i; num16 < (i + num9); num16++)
                    {
                        int num17 = j;
                        if (Game1.tile[num16, num17].wall == wallType)
                        {
                            if (!flag9)
                            {
                                continue;
                            }
                            flag8 = false;
                            break;
                        }
                        flag9 = true;
                    }
                    if ((!flag7 && !flag8) && (!flag5 && !flag6))
                    {
                        if (genRand.Next(2) == 0)
                        {
                            num7 = -1;
                        }
                        else
                        {
                            num7 = 1;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            flag4 = true;
                        }
                    }
                    else
                    {
                        int num18 = genRand.Next(4);
                        do
                        {
                            num18 = genRand.Next(4);
                        }
                        while ((((num18 != 0) || !flag5) && ((num18 != 1) || !flag6)) && (((num18 != 2) || !flag7) && ((num18 != 3) || !flag8)));
                        if (num18 == 0)
                        {
                            num7 = -1;
                        }
                        else if (num18 == 1)
                        {
                            num7 = 1;
                        }
                        else
                        {
                            flag4 = true;
                            if (num18 == 2)
                            {
                                num7 = -1;
                            }
                            else
                            {
                                num7 = 1;
                            }
                        }
                    }
                }
                else
                {
                    if (genRand.Next(2) == 0)
                    {
                        num7 = -1;
                    }
                    else
                    {
                        num7 = 1;
                    }
                    if (genRand.Next(2) == 0)
                    {
                        flag4 = true;
                    }
                }
                flag3 = false;
                if (forceX)
                {
                    flag4 = true;
                }
                if (flag4)
                {
                    vector3.Y = 0f;
                    vector3.X = num7;
                    vector4.Y = 0f;
                    vector4.X = -num7;
                    zero.Y = 0f;
                    zero.X = num7;
                    if (genRand.Next(3) == 0)
                    {
                        if (genRand.Next(2) == 0)
                        {
                            zero.Y = -0.2f;
                        }
                        else
                        {
                            zero.Y = 0.2f;
                        }
                    }
                }
                else
                {
                    num5++;
                    zero.Y = num7;
                    zero.X = 0f;
                    vector3.X = 0f;
                    vector3.Y = num7;
                    vector4.X = 0f;
                    vector4.Y = -num7;
                    if (genRand.Next(3) != 0)
                    {
                        flag2 = true;
                        if (genRand.Next(2) == 0)
                        {
                            zero.X = genRand.Next(10, 20) * 0.1f;
                        }
                        else
                        {
                            zero.X = -genRand.Next(10, 20) * 0.1f;
                        }
                    }
                    else if (genRand.Next(2) == 0)
                    {
                        if (genRand.Next(2) == 0)
                        {
                            zero.X = genRand.Next(20, 40) * 0.01f;
                        }
                        else
                        {
                            zero.X = -genRand.Next(20, 40) * 0.01f;
                        }
                    }
                    else
                    {
                        num8 /= 2;
                    }
                }
                if (lastDungeonHall != vector4)
                {
                    flag = true;
                }
            }
            int num19 = 0;
            if (!forceX)
            {
                if (vector.X > (lastMaxTilesX - 200))
                {
                    num7 = -1;
                    vector3.Y = 0f;
                    vector3.X = num7;
                    zero.Y = 0f;
                    zero.X = num7;
                    if (genRand.Next(3) == 0)
                    {
                        if (genRand.Next(2) == 0)
                        {
                            zero.Y = -0.2f;
                        }
                        else
                        {
                            zero.Y = 0.2f;
                        }
                    }
                }
                else if (vector.X < 200f)
                {
                    num7 = 1;
                    vector3.Y = 0f;
                    vector3.X = num7;
                    zero.Y = 0f;
                    zero.X = num7;
                    if (genRand.Next(3) == 0)
                    {
                        if (genRand.Next(2) == 0)
                        {
                            zero.Y = -0.2f;
                        }
                        else
                        {
                            zero.Y = 0.2f;
                        }
                    }
                }
                else if (vector.Y > (lastMaxTilesY - 300))
                {
                    num7 = -1;
                    num5++;
                    zero.Y = num7;
                    zero.X = 0f;
                    vector3.X = 0f;
                    vector3.Y = num7;
                    if (genRand.Next(2) == 0)
                    {
                        if (genRand.Next(2) == 0)
                        {
                            zero.X = genRand.Next(20, 50) * 0.01f;
                        }
                        else
                        {
                            zero.X = -genRand.Next(20, 50) * 0.01f;
                        }
                    }
                }
                else if (vector.Y < (Game1.rockLayer + 100.0))
                {
                    num7 = 1;
                    num5++;
                    zero.Y = num7;
                    zero.X = 0f;
                    vector3.X = 0f;
                    vector3.Y = num7;
                    if (genRand.Next(3) != 0)
                    {
                        flag2 = true;
                        if (genRand.Next(2) == 0)
                        {
                            zero.X = genRand.Next(10, 20) * 0.1f;
                        }
                        else
                        {
                            zero.X = -genRand.Next(10, 20) * 0.1f;
                        }
                    }
                    else if (genRand.Next(2) == 0)
                    {
                        if (genRand.Next(2) == 0)
                        {
                            zero.X = genRand.Next(20, 50) * 0.01f;
                        }
                        else
                        {
                            zero.X = genRand.Next(20, 50) * 0.01f;
                        }
                    }
                }
                else if ((vector.X < (Game1.maxTilesX / 2)) && (vector.X > (Game1.maxTilesX * 0.25)))
                {
                    num7 = -1;
                    vector3.Y = 0f;
                    vector3.X = num7;
                    zero.Y = 0f;
                    zero.X = num7;
                    if (genRand.Next(3) == 0)
                    {
                        if (genRand.Next(2) == 0)
                        {
                            zero.Y = -0.2f;
                        }
                        else
                        {
                            zero.Y = 0.2f;
                        }
                    }
                }
                else if ((vector.X > (Game1.maxTilesX / 2)) && (vector.X < (Game1.maxTilesX * 0.75)))
                {
                    num7 = 1;
                    vector3.Y = 0f;
                    vector3.X = num7;
                    zero.Y = 0f;
                    zero.X = num7;
                    if (genRand.Next(3) == 0)
                    {
                        if (genRand.Next(2) == 0)
                        {
                            zero.Y = -0.2f;
                        }
                        else
                        {
                            zero.Y = 0.2f;
                        }
                    }
                }
            }
            if (vector3.Y == 0f)
            {
                DDoorX[numDDoors] = (int)vector.X;
                DDoorY[numDDoors] = (int)vector.Y;
                DDoorPos[numDDoors] = 0;
                numDDoors++;
            }
            else
            {
                DPlatX[numDPlats] = (int)vector.X;
                DPlatY[numDPlats] = (int)vector.Y;
                numDPlats++;
            }
            lastDungeonHall = vector3;
            float introduced39 = Math.Abs(zero.X);
            if ((introduced39 > Math.Abs(zero.Y)) && (genRand.Next(3) != 0))
            {
                num5 = (int)(((float)num6) * (genRand.Next(110, 150) * 0.01));
            }
            while (num8 > 0)
            {
                num19++;
                if ((vector3.X > 0f) && (vector.X > (Game1.maxTilesX - 100)))
                {
                    num8 = 0;
                }
                else if ((vector3.X < 0f) && (vector.X < 100f))
                {
                    num8 = 0;
                }
                else if ((vector3.Y > 0f) && (vector.Y > (Game1.maxTilesY - 100)))
                {
                    num8 = 0;
                }
                else if ((vector3.Y < 0f) && (vector.Y < (Game1.rockLayer + 50.0)))
                {
                    num8 = 0;
                }
                num8--;
                int num = ((int)((vector.X - num5) - 4.0)) - genRand.Next(6);
                int maxTilesX = ((int)((vector.X + num5) + 4.0)) + genRand.Next(6);
                int num2 = ((int)((vector.Y - num5) - 4.0)) - genRand.Next(6);
                int maxTilesY = ((int)((vector.Y + num5) + 4.0)) + genRand.Next(6);
                if (num < 0)
                {
                    num = 0;
                }
                if (maxTilesX > Game1.maxTilesX)
                {
                    maxTilesX = Game1.maxTilesX;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                for (int num20 = num; num20 < maxTilesX; num20++)
                {
                    for (int num21 = num2; num21 < maxTilesY; num21++)
                    {
                        if (num20 < dMinX)
                        {
                            dMinX = num20;
                        }
                        if (num20 > dMaxX)
                        {
                            dMaxX = num20;
                        }
                        if (num21 > dMaxY)
                        {
                            dMaxY = num21;
                        }
                        Game1.tile[num20, num21].liquid = 0;
                        if (!Game1.wallDungeon[Game1.tile[num20, num21].wall])
                        {
                            Game1.tile[num20, num21].active(true);
                            Game1.tile[num20, num21].type = tileType;
                        }
                    }
                }
                for (int num22 = num + 1; num22 < (maxTilesX - 1); num22++)
                {
                    for (int num23 = num2 + 1; num23 < (maxTilesY - 1); num23++)
                    {
                        Game1.tile[num22, num23].wall = (byte)wallType;
                    }
                }
                int num24 = 0;
                if ((zero.Y == 0f) && (genRand.Next(((int)num5) + 1) == 0))
                {
                    num24 = genRand.Next(1, 3);
                }
                else if ((zero.X == 0f) && (genRand.Next(((int)num5) - 1) == 0))
                {
                    num24 = genRand.Next(1, 3);
                }
                else if (genRand.Next(((int)num5) * 3) == 0)
                {
                    num24 = genRand.Next(1, 3);
                }
                num = ((int)(vector.X - (num5 * 0.5))) - num24;
                maxTilesX = ((int)(vector.X + (num5 * 0.5))) + num24;
                num2 = ((int)(vector.Y - (num5 * 0.5))) - num24;
                maxTilesY = ((int)(vector.Y + (num5 * 0.5))) + num24;
                if (num < 0)
                {
                    num = 0;
                }
                if (maxTilesX > Game1.maxTilesX)
                {
                    maxTilesX = Game1.maxTilesX;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                for (int num25 = num; num25 < maxTilesX; num25++)
                {
                    for (int num26 = num2; num26 < maxTilesY; num26++)
                    {
                        Game1.tile[num25, num26].active(false);
                        Game1.tile[num25, num26].wall = (byte)wallType;
                    }
                }
                vector += zero;
                if (flag2 && (num19 > genRand.Next(10, 20)))
                {
                    num19 = 0;
                    zero.X *= -1f;
                }
            }
            dungeonX = (int)vector.X;
            dungeonY = (int)vector.Y;
            if (vector3.Y == 0f)
            {
                DDoorX[numDDoors] = (int)vector.X;
                DDoorY[numDDoors] = (int)vector.Y;
                DDoorPos[numDDoors] = 0;
                numDDoors++;
            }
            else
            {
                DPlatX[numDPlats] = (int)vector.X;
                DPlatY[numDPlats] = (int)vector.Y;
                numDPlats++;
            }
        }

        public static void DungeonRoom(int i, int j, ushort tileType, int wallType)
        {
            double num = (double)WorldGen.genRand.Next(15, 30);
            Vector2 value;
            value.X = (float)WorldGen.genRand.Next(-10, 11) * 0.1f;
            value.Y = (float)WorldGen.genRand.Next(-10, 11) * 0.1f;
            Vector2 value2;
            value2.X = (float)i;
            value2.Y = (float)j - (float)num / 2f;
            int k = WorldGen.genRand.Next(10, 20);
            double num2 = (double)value2.X;
            double num3 = (double)value2.X;
            double num4 = (double)value2.Y;
            double num5 = (double)value2.Y;
            while (k > 0)
            {
                k--;
                int num6 = (int)((double)value2.X - num * 0.800000011920929 - 5.0);
                int num7 = (int)((double)value2.X + num * 0.800000011920929 + 5.0);
                int num8 = (int)((double)value2.Y - num * 0.800000011920929 - 5.0);
                int num9 = (int)((double)value2.Y + num * 0.800000011920929 + 5.0);
                if (num6 < 0)
                {
                    num6 = 0;
                }
                if (num7 > Game1.maxTilesX)
                {
                    num7 = Game1.maxTilesX;
                }
                if (num8 < 0)
                {
                    num8 = 0;
                }
                if (num9 > Game1.maxTilesY)
                {
                    num9 = Game1.maxTilesY;
                }
                for (int l = num6; l < num7; l++)
                {
                    for (int m = num8; m < num9; m++)
                    {
                        if (l < WorldGen.dMinX)
                        {
                            WorldGen.dMinX = l;
                        }
                        if (l > WorldGen.dMaxX)
                        {
                            WorldGen.dMaxX = l;
                        }
                        if (m > WorldGen.dMaxY)
                        {
                            WorldGen.dMaxY = m;
                        }
                        Game1.tile[l, m].liquid = 0;
                        if (!Game1.wallDungeon[(int)Game1.tile[l, m].wall])
                        {
                            Game1.tile[l, m].active(true);
                            Game1.tile[l, m].type = tileType;
                        }
                    }
                }
                for (int n = num6 + 1; n < num7 - 1; n++)
                {
                    for (int num10 = num8 + 1; num10 < num9 - 1; num10++)
                    {
                        Game1.tile[n, num10].wall = (byte)wallType;
                    }
                }
                num6 = (int)((double)value2.X - num * 0.5);
                num7 = (int)((double)value2.X + num * 0.5);
                num8 = (int)((double)value2.Y - num * 0.5);
                num9 = (int)((double)value2.Y + num * 0.5);
                if (num6 < 0)
                {
                    num6 = 0;
                }
                if (num7 > Game1.maxTilesX)
                {
                    num7 = Game1.maxTilesX;
                }
                if (num8 < 0)
                {
                    num8 = 0;
                }
                if (num9 > Game1.maxTilesY)
                {
                    num9 = Game1.maxTilesY;
                }
                if ((double)num6 < num2)
                {
                    num2 = (double)num6;
                }
                if ((double)num7 > num3)
                {
                    num3 = (double)num7;
                }
                if ((double)num8 < num4)
                {
                    num4 = (double)num8;
                }
                if ((double)num9 > num5)
                {
                    num5 = (double)num9;
                }
                for (int num11 = num6; num11 < num7; num11++)
                {
                    for (int num12 = num8; num12 < num9; num12++)
                    {
                        Game1.tile[num11, num12].active(false);
                        Game1.tile[num11, num12].wall = (byte)wallType;
                    }
                }
                value2 += value;
                value.X += (float)WorldGen.genRand.Next(-10, 11) * 0.05f;
                value.Y += (float)WorldGen.genRand.Next(-10, 11) * 0.05f;
                if (value.X > 1f)
                {
                    value.X = 1f;
                }
                if (value.X < -1f)
                {
                    value.X = -1f;
                }
                if (value.Y > 1f)
                {
                    value.Y = 1f;
                }
                if (value.Y < -1f)
                {
                    value.Y = -1f;
                }
            }

            dRoomX[numDRooms] = (int)value2.X;
            dRoomY[numDRooms] = (int)value2.Y;
            dRoomSize[numDRooms] = (int)num;
            dRoomL[numDRooms] = (int)num2;
            dRoomR[numDRooms] = (int)num3;
            dRoomT[numDRooms] = (int)num4;
            dRoomB[numDRooms] = (int)num5;
            dRoomTreasure[numDRooms] = false;
            numDRooms++;
        }

        public static void DungeonStairs(int i, int j, ushort tileType, int wallType)
        {
            Vector2 vector;
            Vector2 zero = Vector2.Zero;
            double num5 = genRand.Next(5, 9);
            int num6 = 1;
            vector.X = i;
            vector.Y = j;
            int num7 = genRand.Next(10, 30);
            if (i > dEnteranceX)
            {
                num6 = -1;
            }
            else
            {
                num6 = 1;
            }
            if (i > (Game1.maxTilesX - 400))
            {
                num6 = -1;
            }
            else if (i < 400)
            {
                num6 = 1;
            }
            zero.Y = -1f;
            zero.X = num6;
            if (genRand.Next(3) != 0)
            {
                zero.X *= 1f + (genRand.Next(0, 200) * 0.01f);
            }
            else if (genRand.Next(3) == 0)
            {
                zero.X *= genRand.Next(50, 0x4c) * 0.01f;
            }
            else if (genRand.Next(6) == 0)
            {
                zero.Y *= 2f;
            }
            if (((dungeonX < (Game1.maxTilesX / 2)) && (zero.X < 0f)) && (zero.X < 0.5))
            {
                zero.X = -0.5f;
            }
            if (((dungeonX > (Game1.maxTilesX / 2)) && (zero.X > 0f)) && (zero.X > 0.5))
            {
                zero.X = -0.5f;
            }
            while (num7 > 0)
            {
                num7--;
                int num = ((int)((vector.X - num5) - 4.0)) - genRand.Next(6);
                int maxTilesX = ((int)((vector.X + num5) + 4.0)) + genRand.Next(6);
                int num2 = (int)((vector.Y - num5) - 4.0);
                int maxTilesY = ((int)((vector.Y + num5) + 4.0)) + genRand.Next(6);
                if (num < 0)
                {
                    num = 0;
                }
                if (maxTilesX > Game1.maxTilesX)
                {
                    maxTilesX = Game1.maxTilesX;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                int num8 = 1;
                if (vector.X > (Game1.maxTilesX / 2))
                {
                    num8 = -1;
                }
                int num9 = (int)((vector.X + ((((float)dxStrength1) * 0.6f) * num8)) + (((float)dxStrength2) * num8));
                int num10 = (int)(dyStrength2 * 0.5);
                if (((vector.Y < (Game1.worldSurface - 5.0)) && (Game1.tile[num9, ((int)((vector.Y - num5) - 6.0)) + num10].wall == 0)) && ((Game1.tile[num9, ((int)((vector.Y - num5) - 7.0)) + num10].wall == 0) && (Game1.tile[num9, ((int)((vector.Y - num5) - 8.0)) + num10].wall == 0)))
                {
                    dSurface = true;
                    TileRunner(num9, ((int)((vector.Y - num5) - 6.0)) + num10, (double)genRand.Next(0x19, 0x23), genRand.Next(10, 20), -1, false, 0f, -1f, false, true);
                }
                for (int k = num; k < maxTilesX; k++)
                {
                    for (int num12 = num2; num12 < maxTilesY; num12++)
                    {
                        Game1.tile[k, num12].liquid = 0;
                        if (!Game1.wallDungeon[Game1.tile[k, num12].wall])
                        {
                            Game1.tile[k, num12].wall = 0;
                            Game1.tile[k, num12].active(true);
                            Game1.tile[k, num12].type = tileType;
                        }
                    }
                }
                for (int m = num + 1; m < (maxTilesX - 1); m++)
                {
                    for (int num14 = num2 + 1; num14 < (maxTilesY - 1); num14++)
                    {
                        Game1.tile[m, num14].wall = (byte)wallType;
                    }
                }
                int num15 = 0;
                if (genRand.Next((int)num5) == 0)
                {
                    num15 = genRand.Next(1, 3);
                }
                num = ((int)(vector.X - (num5 * 0.5))) - num15;
                maxTilesX = ((int)(vector.X + (num5 * 0.5))) + num15;
                num2 = ((int)(vector.Y - (num5 * 0.5))) - num15;
                maxTilesY = ((int)(vector.Y + (num5 * 0.5))) + num15;
                if (num < 0)
                {
                    num = 0;
                }
                if (maxTilesX > Game1.maxTilesX)
                {
                    maxTilesX = Game1.maxTilesX;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                for (int n = num; n < maxTilesX; n++)
                {
                    for (int num17 = num2; num17 < maxTilesY; num17++)
                    {
                        Game1.tile[n, num17].active(false);
                        PlaceWall(n, num17, wallType, true);
                    }
                }
                if (dSurface)
                {
                    num7 = 0;
                }
                vector += zero;
                if (vector.Y < Game1.worldSurface)
                {
                    zero.Y *= 0.98f;
                }
            }
            dungeonX = (int)vector.X;
            dungeonY = (int)vector.Y;
        }

        public static bool EmptyTileCheck(int startX, int endX, int startY, int endY, int ignoreID = -1)
        {
            if (startX < 0)
            {
                return false;
            }
            if (endX >= Game1.maxTilesX)
            {
                return false;
            }
            if (startY < 0)
            {
                return false;
            }
            if (endY >= Game1.maxTilesY)
            {
                return false;
            }
            for (int i = startX; i < (endX + 1); i++)
            {
                for (int j = startY; j < (endY + 1); j++)
                {
                    if (!Game1.tile[i, j].active())
                    {
                        continue;
                    }
                    if (ignoreID == -1)
                    {
                        return false;
                    }
                    if (ignoreID == 11)
                    {
                        if (Game1.tile[i, j].type != 11)
                        {
                            return false;
                        }
                        continue;
                    }
                    if (ignoreID == 0x47)
                    {
                        if (Game1.tile[i, j].type != 0x47)
                        {
                            return false;
                        }
                        continue;
                    }
                    if (ignoreID == 20)
                    {
                        switch (Game1.tile[i, j].type)
                        {
                            case 3:
                            case 20:
                            case 0x18:
                            case 0x3d:
                            case 0x3e:
                            case 0x20:
                            case 0x45:
                            case 0x47:
                            case 0x49:
                            case 0x4a:
                            case 0x52:
                            case 0x53:
                            case 0x54:
                            case 110:
                            case 0x71:
                            case 0xc9:
                            case 0xe9:
                            case 0x160:
                                {
                                    continue;
                                }
                        }
                        return false;
                    }
                }
            }
            return true;
        }

        public static void EveryTileFrame()
        {
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            noLiquidCheck = true;
            noTileActions = true;
            for (int i = 0; i < Game1.maxTilesX; i++)
            {
                float num2 = ((float)i) / ((float)Game1.maxTilesX);
                Game1.statusText = string.Concat(new object[] { Lang.gen[0x37], " ", (int)((num2 * 100f) + 1f), "%" });
                for (int j = 0; j < Game1.maxTilesY; j++)
                {
                    if (Game1.tile[i, j].active())
                    {
                        TileFrame(i, j, true, false);
                    }
                    if (Game1.tile[i, j].wall > 0)
                    {
                        Framing.WallFrame(i, j, true);
                    }
                }
            }
            noLiquidCheck = false;
            noTileActions = false;
            long elapsedMilliseconds = stopwatch.ElapsedMilliseconds;
        }

        public static void ExplodeMine(int i, int j)
        {
            ushort type = Game1.tile[i, j].type;
            KillTile(i, j, false, false, true);
            NetMessage.SendTileSquare(-1, i, j, 1);
            Projectile.NewProjectile((float)((i * 0x10) + 8), (float)((j * 0x10) + 8), 0f, 0f, 0xa4, 250, 10f, Game1.myPlayer, 0f, 0f);
        }

        public static void FixChand(int i, int j)
        {
            int num = 0;
            int type = Game1.tile[i, j].type;
            if (Game1.tile[i, j].active())
            {
                switch (type)
                {
                    case 0x23:
                        num = 1;
                        break;

                    case 0x24:
                        num = 2;
                        break;

                    case 170:
                        num = 3;
                        break;

                    case 0xab:
                        num = 4;
                        break;

                    case 0xac:
                        num = 5;
                        break;
                }
            }
            if (num > 0)
            {
                int num3 = i;
                int num4 = j;
                num3 = Game1.tile[i, j].frameX / 0x12;
                while (num3 >= 3)
                {
                    num3 -= 3;
                }
                if (num3 >= 3)
                {
                    num3 -= 3;
                }
                num3 = i - num3;
                num4 += (Game1.tile[i, j].frameY / 0x12) * -1;
                for (int k = num3; k < (num3 + 3); k++)
                {
                    for (int m = num4; m < (num4 + 3); m++)
                    {
                        if (Game1.tile[k, m] == null)
                        {
                            Game1.tile[k, m] = new Tile();
                        }
                        if (Game1.tile[k, m].active() && (Game1.tile[k, m].type == type))
                        {
                            Game1.tile[k, m].type = 0x22;
                            Game1.tile[k, m].frameY = (short)(Game1.tile[k, m].frameY + (num * 0x36));
                        }
                    }
                }
            }
        }

        public static void FixChands()
        {
            for (int i = 5; i < (Game1.maxTilesX - 5); i++)
            {
                for (int j = 5; j < (Game1.maxTilesY - 5); j++)
                {
                    if (Game1.tile[i, j].active())
                    {
                        int type = Game1.tile[i, j].type;
                        if (Game1.tile[i, j].active() && (((type == 0x23) || (type == 0x24)) || (((type == 170) || (type == 0xab)) || (type == 0xac))))
                        {
                            FixChand(i, j);
                        }
                    }
                }
            }
        }

        public static void FixHeart(int i, int j)
        {
            if (((i < 40) || (i >= (Game1.maxTilesX - 40))) || ((j < 40) || (j >= (Game1.maxTilesY - 40))))
            {
                DestroyHeart(i, j);
            }
            else
            {
                Tile tile = Game1.tile[i, j + 2];
                Tile tile2 = Game1.tile[i + 1, j + 2];
                if ((tile.active() && !Game1.tileSolid[tile.type]) && Game1.tileCut[tile.type])
                {
                    KillTile(i, j + 2, false, false, false);
                }
                if ((tile2.active() && !Game1.tileSolid[tile2.type]) && Game1.tileCut[tile2.type])
                {
                    KillTile(i + 1, j + 2, false, false, false);
                }
                if (!tile.active())
                {
                    if (!tile2.active())
                    {
                        DestroyHeart(i, j);
                        return;
                    }
                    if (Game1.tileSolid[tile2.type])
                    {
                        tile.type = tile2.type;
                        tile.active(true);
                    }
                }
                if (!tile2.active() && Game1.tileSolid[tile.type])
                {
                    tile2.type = tile.type;
                    tile2.active(true);
                }
                if ((!tile.nactive() || !Game1.tileSolid[tile.type]) || (!tile2.nactive() || !Game1.tileSolid[tile2.type]))
                {
                    DestroyHeart(i, j);
                }
                else
                {
                    if (tile.blockType() != 0)
                    {
                        tile.slope(0);
                        tile.halfBrick(false);
                    }
                    if (tile2.blockType() != 0)
                    {
                        tile2.slope(0);
                        tile2.halfBrick(false);
                    }
                }
            }
        }

        public static void FixHearts()
        {
            for (int i = 0; i < Game1.maxTilesX; i++)
            {
                for (int j = 0; j < Game1.maxTilesY; j++)
                {
                    Tile tile = Game1.tile[i, j];
                    if ((tile.active() && (tile.type == 12)) && ((tile.frameX == 0) && (tile.frameY == 0)))
                    {
                        FixHeart(i, j);
                    }
                }
            }
        }

        public static void FixSunflower(int i, int j)
        {
            if (Game1.tile[i, j].type == 0x1b)
            {
                int num = 0;
                int num2 = j;
                num += Game1.tile[i, j].frameX / 0x12;
                num2 += (Game1.tile[i, j].frameY / 0x12) * -1;
                while (num > 1)
                {
                    num -= 2;
                }
                num *= -1;
                num += i;
                int num3 = genRand.Next(3) * 0x24;
                int num4 = 0;
                for (int k = num; k < (num + 2); k++)
                {
                    for (int m = num2; m < (num2 + 4); m++)
                    {
                        Game1.tile[k, m].frameX = (short)(num4 + num3);
                    }
                    num4 += 0x12;
                }
            }
        }

        public static void FixSunflowers()
        {
            for (int i = 5; i < (Game1.maxTilesX - 5); i++)
            {
                for (int j = 5; j < Game1.worldSurface; j++)
                {
                    if (Game1.tile[i, j].active() && (Game1.tile[i, j].type == 0x1b))
                    {
                        FixSunflower(i, j);
                    }
                }
            }
        }

        public static void FloatingIsland(int i, int j)
        {
            Vector2 vector;
            Vector2 vector2;
            double num5 = genRand.Next(80, 120);
            double num6 = num5;
            float num7 = genRand.Next(20, 0x19);
            vector.X = i;
            vector.Y = j;
            vector2.X = genRand.Next(-20, 0x15) * 0.2f;
            while ((vector2.X > -2f) && (vector2.X < 2f))
            {
                vector2.X = genRand.Next(-20, 0x15) * 0.2f;
            }
            vector2.Y = genRand.Next(-20, -10) * 0.02f;
            while ((num5 > 0.0) && (num7 > 0f))
            {
                num5 -= genRand.Next(4);
                num7--;
                int num = (int)(vector.X - (num5 * 0.5));
                int maxTilesX = (int)(vector.X + (num5 * 0.5));
                int num2 = (int)(vector.Y - (num5 * 0.5));
                int maxTilesY = (int)(vector.Y + (num5 * 0.5));
                if (num < 0)
                {
                    num = 0;
                }
                if (maxTilesX > Game1.maxTilesX)
                {
                    maxTilesX = Game1.maxTilesX;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                num6 = (num5 * genRand.Next(80, 120)) * 0.01;
                float y = vector.Y + 1f;
                for (int k = num; k < maxTilesX; k++)
                {
                    if (genRand.Next(2) == 0)
                    {
                        y += genRand.Next(-1, 2);
                    }
                    if (y < vector.Y)
                    {
                        y = vector.Y;
                    }
                    if (y > (vector.Y + 2f))
                    {
                        y = vector.Y + 2f;
                    }
                    for (int n = num2; n < maxTilesY; n++)
                    {
                        if (n > y)
                        {
                            float num11 = Math.Abs((float)(k - vector.X));
                            float num12 = Math.Abs((float)(n - vector.Y)) * 2f;
                            if (Math.Sqrt((double)((num11 * num11) + (num12 * num12))) < (num6 * 0.4))
                            {
                                Game1.tile[k, n].active(true);
                                if (Game1.tile[k, n].type == 0x3b)
                                {
                                    Game1.tile[k, n].type = 0;
                                }
                            }
                        }
                    }
                }
                num = (int)(vector.X - (num5 * 0.4));
                maxTilesX = (int)(vector.X + (num5 * 0.4));
                num2 = (int)(vector.Y - (num5 * 0.4));
                maxTilesY = (int)(vector.Y + (num5 * 0.4));
                if (num < 0)
                {
                    num = 0;
                }
                if (maxTilesX > Game1.maxTilesX)
                {
                    maxTilesX = Game1.maxTilesX;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                num6 = (num5 * genRand.Next(80, 120)) * 0.01;
                for (int m = num; m < maxTilesX; m++)
                {
                    for (int num15 = num2; num15 < maxTilesY; num15++)
                    {
                        if (num15 > (vector.Y + 2f))
                        {
                            float num16 = Math.Abs((float)(m - vector.X));
                            float num17 = Math.Abs((float)(num15 - vector.Y)) * 2f;
                            if (Math.Sqrt((double)((num16 * num16) + (num17 * num17))) < (num6 * 0.4))
                            {
                                Game1.tile[m, num15].wall = 2;
                            }
                        }
                    }
                }
                vector += vector2;
                vector2.Y += genRand.Next(-10, 11) * 0.05f;
                if (vector2.X > 1f)
                {
                    vector2.X = 1f;
                }
                if (vector2.X < -1f)
                {
                    vector2.X = -1f;
                }
                if (vector2.Y > 0.2)
                {
                    vector2.Y = -0.2f;
                }
                if (vector2.Y < -0.2)
                {
                    vector2.Y = -0.2f;
                }
            }
        }

        public static void gemCave(int x, int y)
        {
            countTiles(x, y, false, false);
            for (int i = 0; i < 6; i++)
            {
                gem[i] = false;
            }
            gem[genRand.Next(6)] = true;
            for (int j = 0; j < 6; j++)
            {
                if (genRand.Next(6) == 0)
                {
                    gem[j] = true;
                }
            }
            Spread.Gem(x, y);
        }

        public static void generateWorld(int seed = -1, GenerationProgress customProgressObject = null)
        {
            int i2;
            _generator = new WorldGenerator();
            if (seed > 0)
            {
                genRand = new Random(seed);
            }
            else
            {
                genRand = new Random((int)DateTime.Now.Ticks);
            }
            MicroBiome.ResetAll();
            StructureMap structures = new StructureMap();
            double worldSurface = 0.0;
            WorldGen.worldSurfaceLow = 0.0;
            double worldSurfaceHigh = 0.0;
            double rockLayer = 0.0;
            double rockLayerLow = 0.0;
            double rockLayerHigh = 0.0;
            int copper = 7;
            int iron = 6;
            int silver = 9;
            int gold = 8;
            int dungeonSide = 0;
            ushort jungleHut = (ushort)genRand.Next(5);
            int howFar = 0;
            int[] PyrX = null;
            int[] PyrY = null;
            int numPyr = 0;
            int[] snowMinX = new int[Game1.maxTilesY];
            int[] snowMaxX = new int[Game1.maxTilesY];
            int snowTop = 0;
            int snowBottom = 0;
            float dub2 = 0f;
            int skyLakes = 1;
            if (Game1.maxTilesX > 0x1f40)
            {
                skyLakes++;
            }
            if (Game1.maxTilesX > 0x1770)
            {
                skyLakes++;
            }
            for (int num = 0; num < hellChestItem.Length; num++)
            {
                bool flag = true;
                while (flag)
                {
                    flag = false;
                    hellChestItem[num] = genRand.Next(hellChestItem.Length);
                    for (int num2 = 0; num2 < num; num2++)
                    {
                        if (hellChestItem[num2] == hellChestItem[num])
                        {
                            flag = true;
                        }
                    }
                }
            }
            AddGenerationPass("Reset", delegate(GenerationProgress progress)
            {
                noTileActions = true;
                progress.Message = "";
                SetupStatueList();
                RandomizeWeather();
                Game1.cloudAlpha = 0f;
                Game1.maxRaining = 0f;
                WorldFile.tempMaxRain = 0f;
                Game1.raining = false;
                heartCount = 0;
                Game1.checkXMas();
                Game1.checkHalloween();
                gen = true;
                ResetGenerator();
                numLarva = 0;
                int num = 0x15180;
                Game1.slimeRainTime = -genRand.Next(num * 2, num * 3);
                Game1.cloudBGActive = -genRand.Next(0x21c0, 0x15180);
                CopperTierOre = 7;
                IronTierOre = 6;
                SilverTierOre = 9;
                GoldTierOre = 8;
                copperBar = 20;
                ironBar = 0x16;
                silverBar = 0x15;
                goldBar = 0x13;
                if (genRand.Next(2) == 0)
                {
                    copper = 0xa6;
                    copperBar = 0x2bf;
                    CopperTierOre = 0xa6;
                }
                if (genRand.Next(2) == 0)
                {
                    iron = 0xa7;
                    ironBar = 0x2c0;
                    IronTierOre = 0xa7;
                }
                if (genRand.Next(2) == 0)
                {
                    silver = 0xa8;
                    silverBar = 0x2c1;
                    SilverTierOre = 0xa8;
                }
                if (genRand.Next(2) == 0)
                {
                    gold = 0xa9;
                    goldBar = 0x2c2;
                    GoldTierOre = 0xa9;
                }
                crimson = genRand.Next(2) == 0;
                if (jungleHut == 0)
                {
                    jungleHut = 0x77;
                }
                else if (jungleHut == 1)
                {
                    jungleHut = 120;
                }
                else if (jungleHut == 2)
                {
                    jungleHut = 0x9e;
                }
                else if (jungleHut == 3)
                {
                    jungleHut = 0xaf;
                }
                else if (jungleHut == 4)
                {
                    jungleHut = 0x2d;
                }
                Game1.worldID = genRand.Next(0x7fffffff);
                RandomizeTreeStyle();
                RandomizeCaveBackgrounds();
                RandomizeBackgrounds();
                RandomizeMoonState();
                dungeonSide = (genRand.Next(2) == 0) ? -1 : 1;
            });
            AddGenerationPass("Terrain", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0];
                int num = 0;
                int num2 = 0;
                worldSurface = Game1.maxTilesY * 0.3;
                worldSurface *= genRand.Next(90, 110) * 0.005;
                rockLayer = worldSurface + (Game1.maxTilesY * 0.2);
                rockLayer *= genRand.Next(90, 110) * 0.01;
                WorldGen.worldSurfaceLow = worldSurface;
                worldSurfaceHigh = worldSurface;
                rockLayerLow = rockLayer;
                rockLayerHigh = rockLayer;
                for (int i = 0; i < Game1.maxTilesX; i++)
                {
                    float num4 = ((float)i) / ((float)Game1.maxTilesX);
                    progress.Set(num4);
                    if (worldSurface < WorldGen.worldSurfaceLow)
                    {
                        WorldGen.worldSurfaceLow = worldSurface;
                    }
                    if (worldSurface > worldSurfaceHigh)
                    {
                        worldSurfaceHigh = worldSurface;
                    }
                    if (rockLayer < rockLayerLow)
                    {
                        rockLayerLow = rockLayer;
                    }
                    if (rockLayer > rockLayerHigh)
                    {
                        rockLayerHigh = rockLayer;
                    }
                    if (num2 <= 0)
                    {
                        num = genRand.Next(0, 5);
                        num2 = genRand.Next(5, 40);
                        if (num == 0)
                        {
                            num2 *= (int)(genRand.Next(5, 30) * 0.2);
                        }
                    }
                    num2--;
                    if (((i > (Game1.maxTilesX * 0.43)) && (i < (Game1.maxTilesX * 0.57))) && (num >= 3))
                    {
                        num = genRand.Next(3);
                    }
                    if ((i > (Game1.maxTilesX * 0.47)) && (i < (Game1.maxTilesX * 0.53)))
                    {
                        num = 0;
                    }
                    if (num == 0)
                    {
                        while (genRand.Next(0, 7) == 0)
                        {
                            worldSurface += genRand.Next(-1, 2);
                        }
                    }
                    else if (num == 1)
                    {
                        while (genRand.Next(0, 4) == 0)
                        {
                            worldSurface--;
                        }
                        while (genRand.Next(0, 10) == 0)
                        {
                            worldSurface++;
                        }
                    }
                    else if (num == 2)
                    {
                        while (genRand.Next(0, 4) == 0)
                        {
                            worldSurface++;
                        }
                        while (genRand.Next(0, 10) == 0)
                        {
                            worldSurface--;
                        }
                    }
                    else if (num == 3)
                    {
                        while (genRand.Next(0, 2) == 0)
                        {
                            worldSurface--;
                        }
                        while (genRand.Next(0, 6) == 0)
                        {
                            worldSurface++;
                        }
                    }
                    else if (num == 4)
                    {
                        while (genRand.Next(0, 2) == 0)
                        {
                            worldSurface++;
                        }
                        while (genRand.Next(0, 5) == 0)
                        {
                            worldSurface--;
                        }
                    }
                    if (worldSurface < (Game1.maxTilesY * 0.17))
                    {
                        worldSurface = Game1.maxTilesY * 0.17;
                        num2 = 0;
                    }
                    else if (worldSurface > (Game1.maxTilesY * 0.3))
                    {
                        worldSurface = Game1.maxTilesY * 0.3;
                        num2 = 0;
                    }
                    if (((i < 0x113) || (i > (Game1.maxTilesX - 0x113))) && (worldSurface > (Game1.maxTilesY * 0.25)))
                    {
                        worldSurface = Game1.maxTilesY * 0.25;
                        num2 = 1;
                    }
                    while (genRand.Next(0, 3) == 0)
                    {
                        rockLayer += genRand.Next(-2, 3);
                    }
                    if (rockLayer < (worldSurface + (Game1.maxTilesY * 0.05)))
                    {
                        rockLayer++;
                    }
                    if (rockLayer > (worldSurface + (Game1.maxTilesY * 0.35)))
                    {
                        rockLayer--;
                    }
                    for (int j = 0; j < worldSurface; j++)
                    {
                        Game1.tile[i, j].active(false);
                        Game1.tile[i, j].frameX = -1;
                        Game1.tile[i, j].frameY = -1;
                    }
                    for (int k = (int)worldSurface; k < Game1.maxTilesY; k++)
                    {
                        if (k < rockLayer)
                        {
                            Game1.tile[i, k].active(true);
                            Game1.tile[i, k].type = 0;
                            Game1.tile[i, k].frameX = -1;
                            Game1.tile[i, k].frameY = -1;
                        }
                        else
                        {
                            Game1.tile[i, k].active(true);
                            Game1.tile[i, k].type = 1;
                            Game1.tile[i, k].frameX = -1;
                            Game1.tile[i, k].frameY = -1;
                        }
                    }
                }
                Game1.worldSurface = worldSurfaceHigh + 25.0;
                Game1.rockLayer = rockLayerHigh;
                double num7 = ((int)((Game1.rockLayer - Game1.worldSurface) / 6.0)) * 6;
                Game1.rockLayer = Game1.worldSurface + num7;
                waterLine = (((int)Game1.rockLayer) + Game1.maxTilesY) / 2;
                waterLine += genRand.Next(-100, 20);
                lavaLine = waterLine + genRand.Next(50, 80);
            });
            AddGenerationPass("Tunnels", delegate(GenerationProgress progress)
            {
                for (int i = 0; i < ((int)(Game1.maxTilesX * 0.0015)); i++)
                {
                    int[] numArray = new int[10];
                    int[] numArray2 = new int[10];
                    int num2 = genRand.Next(450, Game1.maxTilesX - 450);
                    int num3 = 0;
                    int index = 0;
                    goto Label_0084;
                Label_003A:
                    num3++;
                Label_0040:
                    if (!Game1.tile[num2, num3].active())
                    {
                        goto Label_003A;
                    }
                    numArray[index] = num2;
                    numArray2[index] = num3 - genRand.Next(11, 0x10);
                    num2 += genRand.Next(5, 11);
                    index++;
                Label_0084:
                    if (index < 10)
                    {
                        goto Label_0040;
                    }
                    for (int j = 0; j < 10; j++)
                    {
                        TileRunner(numArray[j], numArray2[j], (double)genRand.Next(5, 8), genRand.Next(6, 9), 0, true, -2f, -0.3f, false, true);
                        TileRunner(numArray[j], numArray2[j], (double)genRand.Next(5, 8), genRand.Next(6, 9), 0, true, 2f, -0.3f, false, true);
                    }
                }
            });
            AddGenerationPass("Sand", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[1];
                int num = genRand.Next((int)(Game1.maxTilesX * 0.0008), (int)(Game1.maxTilesX * 0.0025)) + 2;
                PyrX = new int[num];
                PyrY = new int[num];
                for (int i = 0; i < num; i++)
                {
                    int num3 = genRand.Next(Game1.maxTilesX);
                    while ((num3 > (Game1.maxTilesX * 0.4f)) && (num3 < (Game1.maxTilesX * 0.6f)))
                    {
                        num3 = genRand.Next(Game1.maxTilesX);
                    }
                    int num4 = genRand.Next(0x23, 90);
                    if (i == 1)
                    {
                        float num5 = Game1.maxTilesX / 0x1068;
                        num4 += (int)(genRand.Next(20, 40) * num5);
                    }
                    if (genRand.Next(3) == 0)
                    {
                        num4 *= 2;
                    }
                    if (i == 1)
                    {
                        num4 *= 2;
                    }
                    int num6 = num3 - num4;
                    num4 = genRand.Next(0x23, 90);
                    if (genRand.Next(3) == 0)
                    {
                        num4 *= 2;
                    }
                    if (i == 1)
                    {
                        num4 *= 2;
                    }
                    int maxTilesX = num3 + num4;
                    if (num6 < 0)
                    {
                        num6 = 0;
                    }
                    if (maxTilesX > Game1.maxTilesX)
                    {
                        maxTilesX = Game1.maxTilesX;
                    }
                    switch (i)
                    {
                        case 0:
                            num6 = 0;
                            maxTilesX = genRand.Next(260, 300);
                            if (dungeonSide == 1)
                            {
                                maxTilesX += 40;
                            }
                            break;

                        case 2:
                            num6 = Game1.maxTilesX - genRand.Next(260, 300);
                            maxTilesX = Game1.maxTilesX;
                            if (dungeonSide == -1)
                            {
                                num6 -= 40;
                            }
                            break;
                    }
                    int num8 = genRand.Next(50, 100);
                    for (int k = num6; k < maxTilesX; k++)
                    {
                        if (genRand.Next(2) == 0)
                        {
                            num8 += genRand.Next(-1, 2);
                            if (num8 < 50)
                            {
                                num8 = 50;
                            }
                            if (num8 > 100)
                            {
                                num8 = 100;
                            }
                        }
                        for (int m = 0; m < Game1.worldSurface; m++)
                        {
                            if (Game1.tile[k, m].active())
                            {
                                if ((k == ((num6 + maxTilesX) / 2)) && (genRand.Next(6) == 0))
                                {
                                    PyrX[numPyr] = k;
                                    PyrY[numPyr] = m;
                                    numPyr++;
                                }
                                int num11 = num8;
                                if ((k - num6) < num11)
                                {
                                    num11 = k - num6;
                                }
                                if ((maxTilesX - k) < num11)
                                {
                                    num11 = maxTilesX - k;
                                }
                                num11 += genRand.Next(5);
                                for (int n = m; n < (m + num11); n++)
                                {
                                    if ((k > (num6 + genRand.Next(5))) && (k < (maxTilesX - genRand.Next(5))))
                                    {
                                        Game1.tile[k, n].type = 0x35;
                                    }
                                }
                                break;
                            }
                        }
                    }
                }
                for (int j = 0; j < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 8E-06)); j++)
                {
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)Game1.worldSurface, (int)Game1.rockLayer), (double)genRand.Next(15, 70), genRand.Next(20, 130), 0x35, false, 0f, 0f, false, true);
                }
            });
            AddGenerationPass("Mount Caves", delegate(GenerationProgress progress)
            {
                numMCaves = 0;
                progress.Message = Lang.gen[2];
                for (int i = 0; i < ((int)(Game1.maxTilesX * 0.0008)); i++)
                {
                    int num2 = 0;
                    bool flag = false;
                    bool flag2 = false;
                    int num3 = genRand.Next((int)(Game1.maxTilesX * 0.25), (int)(Game1.maxTilesX * 0.75));
                    while (!flag2)
                    {
                        flag2 = true;
                        while ((num3 > ((Game1.maxTilesX / 2) - 100)) && (num3 < ((Game1.maxTilesX / 2) + 100)))
                        {
                            num3 = genRand.Next((int)(Game1.maxTilesX * 0.25), (int)(Game1.maxTilesX * 0.75));
                        }
                        for (int j = 0; j < numMCaves; j++)
                        {
                            if ((num3 > (mCaveX[j] - 50)) && (num3 < (mCaveX[j] + 50)))
                            {
                                num2++;
                                flag2 = false;
                                break;
                            }
                        }
                        if (num2 >= 200)
                        {
                            flag = true;
                            break;
                        }
                    }
                    if (!flag)
                    {
                        for (int k = 0; k < Game1.worldSurface; k++)
                        {
                            if (Game1.tile[num3, k].active())
                            {
                                for (int m = num3 - 50; m < (num3 + 50); m++)
                                {
                                    for (int n = k - 0x19; n < (k + 0x19); n++)
                                    {
                                        if (Game1.tile[m, n].active() && (((Game1.tile[m, n].type == 0x35) || (Game1.tile[m, n].type == 0x97)) || (Game1.tile[m, n].type == 0x112)))
                                        {
                                            flag = true;
                                        }
                                    }
                                }
                                if (!flag)
                                {
                                    Mountinater(num3, k);
                                    mCaveX[numMCaves] = num3;
                                    mCaveY[numMCaves] = k;
                                    numMCaves++;
                                    break;
                                }
                            }
                        }
                    }
                }
            });
            AddGenerationPass("Dirt Wall Backgrounds", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[3];
                for (int i = 1; i < (Game1.maxTilesX - 1); i++)
                {
                    byte num2 = 2;
                    float num3 = ((float)i) / ((float)Game1.maxTilesX);
                    progress.Set(num3);
                    bool flag = false;
                    howFar += genRand.Next(-1, 2);
                    if (howFar < 0)
                    {
                        howFar = 0;
                    }
                    if (howFar > 10)
                    {
                        howFar = 10;
                    }
                    for (int j = 0; j < (Game1.worldSurface + 10.0); j++)
                    {
                        if (j > (Game1.worldSurface + howFar))
                        {
                            break;
                        }
                        if (Game1.tile[i, j].active())
                        {
                            if (Game1.tile[i, j].type == 0x93)
                            {
                                num2 = 40;
                            }
                            else
                            {
                                num2 = 2;
                            }
                        }
                        if (flag && (Game1.tile[i, j].wall != 0x40))
                        {
                            Game1.tile[i, j].wall = num2;
                        }
                        if (((Game1.tile[i, j].active() && Game1.tile[i - 1, j].active()) && (Game1.tile[i + 1, j].active() && Game1.tile[i, j + 1].active())) && (Game1.tile[i - 1, j + 1].active() && Game1.tile[i + 1, j + 1].active()))
                        {
                            flag = true;
                        }
                    }
                }
            });
            AddGenerationPass("Rocks In Dirt", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[4];
                for (int i = 0; i < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 0.00015)); i++)
                {
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next(0, ((int)WorldGen.worldSurfaceLow) + 1), (double)genRand.Next(4, 15), genRand.Next(5, 40), 1, false, 0f, 0f, false, true);
                }
                for (int j = 0; j < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 0.0002)); j++)
                {
                    int num3 = genRand.Next(0, Game1.maxTilesX);
                    int num4 = genRand.Next((int)WorldGen.worldSurfaceLow, ((int)worldSurfaceHigh) + 1);
                    if (!Game1.tile[num3, num4 - 10].active())
                    {
                        num4 = genRand.Next((int)WorldGen.worldSurfaceLow, ((int)worldSurfaceHigh) + 1);
                    }
                    TileRunner(num3, num4, (double)genRand.Next(4, 10), genRand.Next(5, 30), 1, false, 0f, 0f, false, true);
                }
                for (int k = 0; k < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 0.0045)); k++)
                {
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)worldSurfaceHigh, ((int)rockLayerHigh) + 1), (double)genRand.Next(2, 7), genRand.Next(2, 0x17), 1, false, 0f, 0f, false, true);
                }
            });
            AddGenerationPass("Dirt In Rocks", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[5];
                for (int i = 0; i < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 0.005)); i++)
                {
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)rockLayerLow, Game1.maxTilesY), (double)genRand.Next(2, 6), genRand.Next(2, 40), 0, false, 0f, 0f, false, true);
                }
            });
            AddGenerationPass("Clay", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[6];
                for (int i = 0; i < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 2E-05)); i++)
                {
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next(0, (int)WorldGen.worldSurfaceLow), (double)genRand.Next(4, 14), genRand.Next(10, 50), 40, false, 0f, 0f, false, true);
                }
                for (int j = 0; j < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 5E-05)); j++)
                {
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)WorldGen.worldSurfaceLow, ((int)worldSurfaceHigh) + 1), (double)genRand.Next(8, 14), genRand.Next(15, 0x2d), 40, false, 0f, 0f, false, true);
                }
                for (int k = 0; k < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 2E-05)); k++)
                {
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)worldSurfaceHigh, ((int)rockLayerHigh) + 1), (double)genRand.Next(8, 15), genRand.Next(5, 50), 40, false, 0f, 0f, false, true);
                }
                for (int m = 5; m < (Game1.maxTilesX - 5); m++)
                {
                    for (int n = 1; n < (Game1.worldSurface - 1.0); n++)
                    {
                        if (Game1.tile[m, n].active())
                        {
                            for (int num6 = n; num6 < (n + 5); num6++)
                            {
                                if (Game1.tile[m, num6].type == 40)
                                {
                                    Game1.tile[m, num6].type = 0;
                                }
                            }
                            break;
                        }
                    }
                }
            });
            AddGenerationPass("Small Holes", delegate(GenerationProgress progress)
            {
                i2 = 0;
                progress.Message = Lang.gen[7];
                for (int i = 0; i < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 0.0015)); i++)
                {
                    float num2 = (float)(((double)i) / ((Game1.maxTilesX * Game1.maxTilesY) * 0.0015));
                    progress.Set(num2);
                    int type = -1;
                    if (genRand.Next(5) == 0)
                    {
                        type = -2;
                    }
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)worldSurfaceHigh, Game1.maxTilesY), (double)genRand.Next(2, 5), genRand.Next(2, 20), type, false, 0f, 0f, false, true);
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)worldSurfaceHigh, Game1.maxTilesY), (double)genRand.Next(8, 15), genRand.Next(7, 30), type, false, 0f, 0f, false, true);
                }
            });
            AddGenerationPass("Dirt Layer Caves", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[8];
                for (int i = 0; i < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 3E-05)); i++)
                {
                    float num2 = (float)(((double)i) / ((Game1.maxTilesX * Game1.maxTilesY) * 3E-05));
                    progress.Set(num2);
                    if (rockLayerHigh <= Game1.maxTilesY)
                    {
                        int type = -1;
                        if (genRand.Next(6) == 0)
                        {
                            type = -2;
                        }
                        TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)WorldGen.worldSurfaceLow, ((int)rockLayerHigh) + 1), (double)genRand.Next(5, 15), genRand.Next(30, 200), type, false, 0f, 0f, false, true);
                    }
                }
            });
            AddGenerationPass("Rock Layer Caves", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[9];
                for (int i = 0; i < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 0.00013)); i++)
                {
                    float num2 = (float)(((double)i) / ((Game1.maxTilesX * Game1.maxTilesY) * 0.00013));
                    progress.Set(num2);
                    if (rockLayerHigh <= Game1.maxTilesY)
                    {
                        int type = -1;
                        if (genRand.Next(10) == 0)
                        {
                            type = -2;
                        }
                        TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)rockLayerHigh, Game1.maxTilesY), (double)genRand.Next(6, 20), genRand.Next(50, 300), type, false, 0f, 0f, false, true);
                    }
                }
            });
            AddGenerationPass("Surface Caves", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[10];
                for (int i = 0; i < ((int)(Game1.maxTilesX * 0.002)); i++)
                {
                    i2 = genRand.Next(0, Game1.maxTilesX);
                    while ((i2 > (Game1.maxTilesX * 0.45)) && (i2 < (Game1.maxTilesX * 0.55)))
                    {
                        i2 = genRand.Next(0, Game1.maxTilesX);
                    }
                    for (int num2 = 0; num2 < worldSurfaceHigh; num2++)
                    {
                        if (Game1.tile[i2, num2].active())
                        {
                            TileRunner(i2, num2, (double)genRand.Next(3, 6), genRand.Next(5, 50), -1, false, genRand.Next(-10, 11) * 0.1f, 1f, false, true);
                            break;
                        }
                    }
                }
                for (int j = 0; j < ((int)(Game1.maxTilesX * 0.0007)); j++)
                {
                    i2 = genRand.Next(0, Game1.maxTilesX);
                    while ((i2 > (Game1.maxTilesX * 0.43)) && (i2 < (Game1.maxTilesX * 0.58)))
                    {
                        i2 = genRand.Next(0, Game1.maxTilesX);
                    }
                    for (int num4 = 0; num4 < worldSurfaceHigh; num4++)
                    {
                        if (Game1.tile[i2, num4].active())
                        {
                            TileRunner(i2, num4, (double)genRand.Next(10, 15), genRand.Next(50, 130), -1, false, genRand.Next(-10, 11) * 0.1f, 2f, false, true);
                            break;
                        }
                    }
                }
                for (int k = 0; k < ((int)(Game1.maxTilesX * 0.0003)); k++)
                {
                    i2 = genRand.Next(0, Game1.maxTilesX);
                    while ((i2 > (Game1.maxTilesX * 0.4)) && (i2 < (Game1.maxTilesX * 0.6)))
                    {
                        i2 = genRand.Next(0, Game1.maxTilesX);
                    }
                    for (int num6 = 0; num6 < worldSurfaceHigh; num6++)
                    {
                        if (Game1.tile[i2, num6].active())
                        {
                            TileRunner(i2, num6, (double)genRand.Next(12, 0x19), genRand.Next(150, 500), -1, false, genRand.Next(-10, 11) * 0.1f, 4f, false, true);
                            TileRunner(i2, num6, (double)genRand.Next(8, 0x11), genRand.Next(60, 200), -1, false, genRand.Next(-10, 11) * 0.1f, 2f, false, true);
                            TileRunner(i2, num6, (double)genRand.Next(5, 13), genRand.Next(40, 170), -1, false, genRand.Next(-10, 11) * 0.1f, 2f, false, true);
                            break;
                        }
                    }
                }
                for (int m = 0; m < ((int)(Game1.maxTilesX * 0.0004)); m++)
                {
                    i2 = genRand.Next(0, Game1.maxTilesX);
                    while ((i2 > (Game1.maxTilesX * 0.4)) && (i2 < (Game1.maxTilesX * 0.6)))
                    {
                        i2 = genRand.Next(0, Game1.maxTilesX);
                    }
                    for (int num8 = 0; num8 < worldSurfaceHigh; num8++)
                    {
                        if (Game1.tile[i2, num8].active())
                        {
                            TileRunner(i2, num8, (double)genRand.Next(7, 12), genRand.Next(150, 250), -1, false, 0f, 1f, true, true);
                            break;
                        }
                    }
                }
                float num9 = Game1.maxTilesX / 0x1068;
                for (int n = 0; n < (5f * num9); n++)
                {
                    try
                    {
                        Caverer(genRand.Next(100, Game1.maxTilesX - 100), genRand.Next((int)Game1.rockLayer, Game1.maxTilesY - 400));
                    }
                    catch
                    {
                    }
                }
            });
            AddGenerationPass("Slush Check", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x38];
                snowTop = (int)Game1.worldSurface;
                int num = genRand.Next(Game1.maxTilesX);
                if (dungeonSide != 1)
                {
                    while ((num < (Game1.maxTilesX * 0.3f)) || (num > (Game1.maxTilesX * 0.45f)))
                    {
                        num = genRand.Next(Game1.maxTilesX);
                    }
                }
                else
                {
                    while ((num < (Game1.maxTilesX * 0.55f)) || (num > (Game1.maxTilesX * 0.7f)))
                    {
                        num = genRand.Next(Game1.maxTilesX);
                    }
                }
                int num2 = genRand.Next(50, 90);
                float num3 = Game1.maxTilesX / 0x1068;
                num2 += (int)(genRand.Next(20, 40) * num3);
                num2 += (int)(genRand.Next(20, 40) * num3);
                int num4 = num - num2;
                num2 = genRand.Next(50, 90) + ((int)(genRand.Next(20, 40) * num3));
                num2 += (int)(genRand.Next(20, 40) * num3);
                int maxTilesX = num + num2;
                if (num4 < 0)
                {
                    num4 = 0;
                }
                if (maxTilesX > Game1.maxTilesX)
                {
                    maxTilesX = Game1.maxTilesX;
                }
                int num6 = 10;
                for (int i = 0; i <= (lavaLine - 140); i++)
                {
                    num4 += genRand.Next(-4, 4);
                    maxTilesX += genRand.Next(-3, 5);
                    snowMinX[i] = num4;
                    snowMaxX[i] = maxTilesX;
                    for (int j = num4; j < maxTilesX; j++)
                    {
                        if (i < (lavaLine - 140))
                        {
                            if (Game1.tile[j, i].wall == 2)
                            {
                                Game1.tile[j, i].wall = 40;
                            }
                            int type = Game1.tile[j, i].type;
                            switch (type)
                            {
                                case 0:
                                case 2:
                                case 0x17:
                                case 40:
                                case 0x35:
                                    {
                                        Game1.tile[j, i].type = 0x93;
                                        continue;
                                    }
                            }
                            if (type == 1)
                            {
                                Game1.tile[j, i].type = 0xa1;
                            }
                        }
                        else
                        {
                            num6 += genRand.Next(-3, 4);
                            if (genRand.Next(3) == 0)
                            {
                                num6 += genRand.Next(-4, 5);
                                if (genRand.Next(3) == 0)
                                {
                                    num6 += genRand.Next(-6, 7);
                                }
                            }
                            if (num6 < 0)
                            {
                                num6 = genRand.Next(3);
                            }
                            else if (num6 > 50)
                            {
                                num6 = 50 - genRand.Next(3);
                            }
                            for (int k = i; k < (i + num6); k++)
                            {
                                if (Game1.tile[j, k].wall == 2)
                                {
                                    Game1.tile[j, k].wall = 40;
                                }
                                int num11 = Game1.tile[j, k].type;
                                switch (num11)
                                {
                                    case 0:
                                    case 2:
                                    case 0x17:
                                    case 40:
                                    case 0x35:
                                        Game1.tile[j, k].type = 0x93;
                                        break;

                                    default:
                                        if (num11 == 1)
                                        {
                                            Game1.tile[j, k].type = 0xa1;
                                        }
                                        break;
                                }
                            }
                        }
                    }
                    if (snowBottom < i)
                    {
                        snowBottom = i;
                    }
                }
            });
            AddGenerationPass("Grass", delegate(GenerationProgress progress)
            {
                for (int i = 0; i < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 0.002)); i++)
                {
                    int num = genRand.Next(1, Game1.maxTilesX - 1);
                    int num2 = genRand.Next((int)WorldGen.worldSurfaceLow, (int)worldSurfaceHigh);
                    if (num2 >= Game1.maxTilesY)
                    {
                        num2 = Game1.maxTilesY - 2;
                    }
                    if (((Game1.tile[num - 1, num2].active() && (Game1.tile[num - 1, num2].type == 0)) && (Game1.tile[num + 1, num2].active() && (Game1.tile[num + 1, num2].type == 0))) && ((Game1.tile[num, num2 - 1].active() && (Game1.tile[num, num2 - 1].type == 0)) && (Game1.tile[num, num2 + 1].active() && (Game1.tile[num, num2 + 1].type == 0))))
                    {
                        Game1.tile[num, num2].active(true);
                        Game1.tile[num, num2].type = 2;
                    }
                    num = genRand.Next(1, Game1.maxTilesX - 1);
                    num2 = genRand.Next(0, (int)WorldGen.worldSurfaceLow);
                    if (num2 >= Game1.maxTilesY)
                    {
                        num2 = Game1.maxTilesY - 2;
                    }
                    if (((Game1.tile[num - 1, num2].active() && (Game1.tile[num - 1, num2].type == 0)) && (Game1.tile[num + 1, num2].active() && (Game1.tile[num + 1, num2].type == 0))) && ((Game1.tile[num, num2 - 1].active() && (Game1.tile[num, num2 - 1].type == 0)) && (Game1.tile[num, num2 + 1].active() && (Game1.tile[num, num2 + 1].type == 0))))
                    {
                        Game1.tile[num, num2].active(true);
                        Game1.tile[num, num2].type = 2;
                    }
                }
            });
            AddGenerationPass("Jungle", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[11];
                float num = Game1.maxTilesX / 0x1068;
                num *= 1.5f;
                int i = 0;
                float num3 = genRand.Next(15, 30) * 0.01f;
                if (dungeonSide == -1)
                {
                    num3 = 1f - num3;
                    i = (int)(Game1.maxTilesX * num3);
                }
                else
                {
                    i = (int)(Game1.maxTilesX * num3);
                }
                int j = (Game1.maxTilesY + ((int)Game1.rockLayer)) / 2;
                i += genRand.Next((int)(-100f * num), (int)(101f * num));
                j += genRand.Next((int)(-100f * num), (int)(101f * num));
                int num5 = i;
                int num8 = j;
                TileRunner(i, j, (double)genRand.Next((int)(250f * num), (int)(500f * num)), genRand.Next(50, 150), 0x3b, false, (float)(dungeonSide * 3), 0f, false, true);
                for (int k = 0; k < (6f * num); k++)
                {
                    TileRunner(i + genRand.Next(-((int)(125f * num)), (int)(125f * num)), j + genRand.Next(-((int)(125f * num)), (int)(125f * num)), (double)genRand.Next(3, 7), genRand.Next(3, 8), genRand.Next(0x3f, 0x41), false, 0f, 0f, false, true);
                }
                mudWall = true;
                progress.Set(0.15f);
                i += genRand.Next((int)(-250f * num), (int)(251f * num));
                j += genRand.Next((int)(-150f * num), (int)(151f * num));
                int num6 = i;
                int num9 = j;
                int num12 = i;
                int num13 = j;
                TileRunner(i, j, (double)genRand.Next((int)(250f * num), (int)(500f * num)), genRand.Next(50, 150), 0x3b, false, 0f, 0f, false, true);
                mudWall = false;
                for (int m = 0; m < (6f * num); m++)
                {
                    TileRunner(i + genRand.Next(-((int)(125f * num)), (int)(125f * num)), j + genRand.Next(-((int)(125f * num)), (int)(125f * num)), (double)genRand.Next(3, 7), genRand.Next(3, 8), genRand.Next(0x41, 0x43), false, 0f, 0f, false, true);
                }
                mudWall = true;
                progress.Set(0.3f);
                i += genRand.Next((int)(-400f * num), (int)(401f * num));
                j += genRand.Next((int)(-150f * num), (int)(151f * num));
                int num7 = i;
                int num10 = j;
                TileRunner(i, j, (double)genRand.Next((int)(250f * num), (int)(500f * num)), genRand.Next(50, 150), 0x3b, false, (float)(dungeonSide * -3), 0f, false, true);
                mudWall = false;
                for (int n = 0; n < (6f * num); n++)
                {
                    TileRunner(i + genRand.Next(-((int)(125f * num)), (int)(125f * num)), j + genRand.Next(-((int)(125f * num)), (int)(125f * num)), (double)genRand.Next(3, 7), genRand.Next(3, 8), genRand.Next(0x43, 0x45), false, 0f, 0f, false, true);
                }
                mudWall = true;
                progress.Set(0.45f);
                i = ((num5 + num6) + num7) / 3;
                j = ((num8 + num9) + num10) / 3;
                TileRunner(i, j, (double)genRand.Next((int)(400f * num), (int)(600f * num)), 0x2710, 0x3b, false, 0f, -20f, true, true);
                JungleRunner(i, j);
                progress.Set(0.6f);
                mudWall = false;
                for (int num16 = 0; num16 < (Game1.maxTilesX / 4); num16++)
                {
                    i = genRand.Next(20, Game1.maxTilesX - 20);
                    j = genRand.Next(((int)worldSurface) + 10, Game1.maxTilesY - 200);
                    while ((Game1.tile[i, j].wall != 0x40) && (Game1.tile[i, j].wall != 15))
                    {
                        i = genRand.Next(20, Game1.maxTilesX - 20);
                        j = genRand.Next(((int)worldSurface) + 10, Game1.maxTilesY - 200);
                    }
                    MudWallRunner(i, j);
                }
                i = num12;
                j = num13;
                for (int num17 = 0; num17 <= (20f * num); num17++)
                {
                    progress.Set((60f + (((float)num17) / num)) * 0.01f);
                    i += genRand.Next((int)(-5f * num), (int)(6f * num));
                    j += genRand.Next((int)(-5f * num), (int)(6f * num));
                    TileRunner(i, j, (double)genRand.Next(40, 100), genRand.Next(300, 500), 0x3b, false, 0f, 0f, false, true);
                }
                for (int num18 = 0; num18 <= (10f * num); num18++)
                {
                    progress.Set((80f + ((((float)num18) / num) * 2f)) * 0.01f);
                    i = num12 + genRand.Next((int)(-600f * num), (int)(600f * num));
                    j = num13 + genRand.Next((int)(-200f * num), (int)(200f * num));
                    while ((((i < 1) || (i >= (Game1.maxTilesX - 1))) || ((j < 1) || (j >= (Game1.maxTilesY - 1)))) || (Game1.tile[i, j].type != 0x3b))
                    {
                        i = num12 + genRand.Next((int)(-600f * num), (int)(600f * num));
                        j = num13 + genRand.Next((int)(-200f * num), (int)(200f * num));
                    }
                    for (int num19 = 0; num19 < (8f * num); num19++)
                    {
                        i += genRand.Next(-30, 0x1f);
                        j += genRand.Next(-30, 0x1f);
                        int type = -1;
                        if (genRand.Next(7) == 0)
                        {
                            type = -2;
                        }
                        TileRunner(i, j, (double)genRand.Next(10, 20), genRand.Next(30, 70), type, false, 0f, 0f, false, true);
                    }
                }
                for (int num21 = 0; num21 <= (300f * num); num21++)
                {
                    i = num12 + genRand.Next((int)(-600f * num), (int)(600f * num));
                    j = num13 + genRand.Next((int)(-200f * num), (int)(200f * num));
                    while ((((i < 1) || (i >= (Game1.maxTilesX - 1))) || ((j < 1) || (j >= (Game1.maxTilesY - 1)))) || (Game1.tile[i, j].type != 0x3b))
                    {
                        i = num12 + genRand.Next((int)(-600f * num), (int)(600f * num));
                        j = num13 + genRand.Next((int)(-200f * num), (int)(200f * num));
                    }
                    TileRunner(i, j, (double)genRand.Next(4, 10), genRand.Next(5, 30), 1, false, 0f, 0f, false, true);
                    if (genRand.Next(4) == 0)
                    {
                        int num22 = genRand.Next(0x3f, 0x45);
                        TileRunner(i + genRand.Next(-1, 2), j + genRand.Next(-1, 2), (double)genRand.Next(3, 7), genRand.Next(4, 8), num22, false, 0f, 0f, false, true);
                    }
                }
            });
            AddGenerationPass("Marble", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[80];
                float num = ((float)(Game1.maxTilesX * Game1.maxTilesY)) / 5040000f;
                int num2 = (int)(genRand.Next(10, 15) * num);
                float num3 = ((float)(Game1.maxTilesX - 160)) / ((float)num2);
                int num4 = 0;
                while (num4 < num2)
                {
                    float num5 = ((float)num4) / ((float)num2);
                    progress.Set(num5);
                    if (Biomes<MarbleBiome>.Place(RandomRectanglePoint(((int)(num5 * (Game1.maxTilesX - 160))) + 80, ((int)rockLayer) + 20, (int)num3, (Game1.maxTilesY - (((int)rockLayer) + 40)) - 200), structures))
                    {
                        num4++;
                    }
                }
            });
            AddGenerationPass("Granite", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x51];
                float num = ((float)Game1.maxTilesX) / 4200f;
                int num2 = (int)(genRand.Next(8, 14) * num);
                float num3 = ((float)(Game1.maxTilesX - 200)) / ((float)num2);
                int num4 = 0;
                while (num4 < num2)
                {
                    float num5 = ((float)num4) / ((float)num2);
                    progress.Set(num5);
                    if (Biomes<GraniteBiome>.Place(RandomRectanglePoint(((int)(num5 * (Game1.maxTilesX - 200))) + 100, ((int)rockLayer) + 20, (int)num3, (Game1.maxTilesY - (((int)rockLayer) + 40)) - 200), structures))
                    {
                        num4++;
                    }
                }
            });
            AddGenerationPass("Mud Caves To Grass", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x4d];
                for (int i = 0; i < Game1.maxTilesX; i++)
                {
                    for (int k = 0; k < Game1.maxTilesY; k++)
                    {
                        if (Game1.tile[i, k].active())
                        {
                            grassSpread = 0;
                            SpreadGrass(i, k, 0x3b, 60, true, 0);
                        }
                        progress.Set(0.2f * (((float)((i * Game1.maxTilesY) + k)) / ((float)(Game1.maxTilesX * Game1.maxTilesY))));
                    }
                }
                for (int j = 10; j < (Game1.maxTilesX - 10); j++)
                {
                    for (int m = 10; m < (Game1.maxTilesY - 10); m++)
                    {
                        if (Game1.tile[j, m].active() && (tileCounter(j, m) < tileCounterMax))
                        {
                            tileCounterKill();
                        }
                        float num6 = ((float)(((j - 10) * (Game1.maxTilesY - 20)) + (m - 10))) / ((float)((Game1.maxTilesX - 20) * (Game1.maxTilesY - 20)));
                        progress.Set(0.2f + (num6 * 0.8f));
                    }
                }
            });
            AddGenerationPass("Full Desert", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x4e];
                int num1 = dungeonSide;
                int maxValue = Game1.maxTilesX / 2;
                int num3 = genRand.Next(maxValue) / 8;
                num3 += maxValue / 8;
                int x = maxValue + (num3 * -num1);
                int num5 = 0;
                while (!Biomes<DesertBiome>.Place(new Point(x, (int)worldSurface), structures))
                {
                    num3 = genRand.Next(maxValue) / 2;
                    num3 += maxValue / 8;
                    x = maxValue + (num3 * -num1);
                    if (++num5 > 0x3e8)
                    {
                        num1 *= -1;
                        num5 = 0;
                    }
                }
            });
            AddGenerationPass("Floating Islands", delegate(GenerationProgress progress)
            {
                numIslandHouses = 0;
                houseCount = 0;
                progress.Message = Lang.gen[12];
                for (int i = 0; i < (((int)(Game1.maxTilesX * 0.0008)) + skyLakes); i++)
                {
                    int num2 = 0x3e8;
                    int num3 = genRand.Next((int)(Game1.maxTilesX * 0.1), (int)(Game1.maxTilesX * 0.9));
                    while (--num2 > 0)
                    {
                        bool flag = true;
                        while ((num3 > ((Game1.maxTilesX / 2) - 80)) && (num3 < ((Game1.maxTilesX / 2) + 80)))
                        {
                            num3 = genRand.Next((int)(Game1.maxTilesX * 0.1), (int)(Game1.maxTilesX * 0.9));
                        }
                        for (int j = 0; j < numIslandHouses; j++)
                        {
                            if ((num3 > (fihX[j] - 180)) && (num3 < (fihX[j] + 180)))
                            {
                                flag = false;
                                break;
                            }
                        }
                        if (flag)
                        {
                            flag = false;
                            int num5 = 0;
                            for (int k = 200; k < Game1.worldSurface; k++)
                            {
                                if (Game1.tile[num3, k].active())
                                {
                                    num5 = k;
                                    flag = true;
                                    break;
                                }
                            }
                            if (flag)
                            {
                                int num7 = Math.Min(genRand.Next(90, num5 - 100), ((int)WorldGen.worldSurfaceLow) - 50);
                                if (i < skyLakes)
                                {
                                    skyLake[numIslandHouses] = true;
                                    CloudLake(num3, num7);
                                }
                                else
                                {
                                    CloudIsland(num3, num7);
                                }
                                fihX[numIslandHouses] = num3;
                                fihY[numIslandHouses] = num7;
                                numIslandHouses++;
                            }
                        }
                    }
                }
            });
            AddGenerationPass("Mushroom Patches", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[13];
                for (int i = 0; i < (Game1.maxTilesX / 500); i++)
                {
                    int num2 = 0;
                    bool flag = true;
                    while (flag)
                    {
                        int num3 = genRand.Next((int)(Game1.maxTilesX * 0.3), (int)(Game1.maxTilesX * 0.7));
                        int num4 = genRand.Next((int)Game1.rockLayer, Game1.maxTilesY - 350);
                        flag = false;
                        int num5 = 60;
                        for (int k = num3 - num5; k < (num3 + num5); k += 3)
                        {
                            for (int m = num4 - num5; m < (num4 + num5); m += 3)
                            {
                                if (((Game1.tile[k, m].type == 0x93) || (Game1.tile[k, m].type == 0xa1)) || (Game1.tile[k, m].type == 0xa2))
                                {
                                    flag = true;
                                    break;
                                }
                                if (UndergroundDesertLocation.Contains(new Point(k, m)))
                                {
                                    flag = true;
                                    break;
                                }
                            }
                        }
                        if (!flag)
                        {
                            ShroomPatch(num3, num4);
                        }
                        num2++;
                        if (num2 > 100)
                        {
                            break;
                        }
                    }
                }
                for (int j = 0; j < Game1.maxTilesX; j++)
                {
                    for (int n = (int)Game1.worldSurface; n < Game1.maxTilesY; n++)
                    {
                        if (Game1.tile[j, n].active())
                        {
                            grassSpread = 0;
                            SpreadGrass(j, n, 0x3b, 70, false, 0);
                            if ((Game1.tile[j, n].type == 70) && (genRand.Next(20) == 0))
                            {
                                int num10;
                                if (genRand.Next(5) == 0)
                                {
                                    num10 = 2;
                                }
                                else
                                {
                                    num10 = 1;
                                }
                                int num11 = genRand.Next(2, 6);
                                int num12 = n - num11;
                                bool flag2 = true;
                                for (int num13 = j - num10; num13 <= (j + num10); num13++)
                                {
                                    if (Game1.tile[num13, num12].active())
                                    {
                                        flag2 = false;
                                    }
                                    if (Game1.tileBrick[Game1.tile[num13, num12 - 1].type])
                                    {
                                        flag2 = false;
                                    }
                                    if (Game1.tileBrick[Game1.tile[num13, num12 + 1].type])
                                    {
                                        flag2 = false;
                                    }
                                }
                                if (Game1.tile[(j - num10) - 1, num12].type == 190)
                                {
                                    flag2 = false;
                                }
                                if (Game1.tile[(j + num10) + 1, num12].type == 190)
                                {
                                    flag2 = false;
                                }
                                for (int num14 = num12; num14 < n; num14++)
                                {
                                    if (Game1.tile[j, num14].active())
                                    {
                                        flag2 = false;
                                    }
                                    if (Game1.tileBrick[Game1.tile[j - 1, num14].type])
                                    {
                                        flag2 = false;
                                    }
                                    if (Game1.tileBrick[Game1.tile[j + 1, num14].type])
                                    {
                                        flag2 = false;
                                    }
                                }
                                if (flag2)
                                {
                                    for (int num15 = j - num10; num15 <= (j + num10); num15++)
                                    {
                                        PlaceTile(num15, num12, 190, true, true, -1, 0);
                                    }
                                    for (int num16 = num12; num16 < n; num16++)
                                    {
                                        PlaceTile(j, num16, 190, true, true, -1, 0);
                                    }
                                }
                            }
                        }
                    }
                }
            });
            AddGenerationPass("Mud To Dirt", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[14];
                for (int i = 0; i < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 0.001)); i++)
                {
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)rockLayerLow, Game1.maxTilesY), (double)genRand.Next(2, 6), genRand.Next(2, 40), 0x3b, false, 0f, 0f, false, true);
                }
            });
            AddGenerationPass("Silt", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[15];
                for (int i = 0; i < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 0.0001)); i++)
                {
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)rockLayerHigh, Game1.maxTilesY), (double)genRand.Next(5, 12), genRand.Next(15, 50), 0x7b, false, 0f, 0f, false, true);
                }
                for (int j = 0; j < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 0.0005)); j++)
                {
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)rockLayerHigh, Game1.maxTilesY), (double)genRand.Next(2, 5), genRand.Next(2, 5), 0x7b, false, 0f, 0f, false, true);
                }
            });
            AddGenerationPass("Shinies", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x10];
                for (int i = 0; i < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 6E-05)); i++)
                {
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)WorldGen.worldSurfaceLow, (int)worldSurfaceHigh), (double)genRand.Next(3, 6), genRand.Next(2, 6), copper, false, 0f, 0f, false, true);
                }
                for (int j = 0; j < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 8E-05)); j++)
                {
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)worldSurfaceHigh, (int)rockLayerHigh), (double)genRand.Next(3, 7), genRand.Next(3, 7), copper, false, 0f, 0f, false, true);
                }
                for (int k = 0; k < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 0.0002)); k++)
                {
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)rockLayerLow, Game1.maxTilesY), (double)genRand.Next(4, 9), genRand.Next(4, 8), copper, false, 0f, 0f, false, true);
                }
                for (int m = 0; m < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 3E-05)); m++)
                {
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)WorldGen.worldSurfaceLow, (int)worldSurfaceHigh), (double)genRand.Next(3, 7), genRand.Next(2, 5), iron, false, 0f, 0f, false, true);
                }
                for (int n = 0; n < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 8E-05)); n++)
                {
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)worldSurfaceHigh, (int)rockLayerHigh), (double)genRand.Next(3, 6), genRand.Next(3, 6), iron, false, 0f, 0f, false, true);
                }
                for (int num6 = 0; num6 < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 0.0002)); num6++)
                {
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)rockLayerLow, Game1.maxTilesY), (double)genRand.Next(4, 9), genRand.Next(4, 8), iron, false, 0f, 0f, false, true);
                }
                for (int num7 = 0; num7 < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 2.6E-05)); num7++)
                {
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)worldSurfaceHigh, (int)rockLayerHigh), (double)genRand.Next(3, 6), genRand.Next(3, 6), silver, false, 0f, 0f, false, true);
                }
                for (int num8 = 0; num8 < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 0.00015)); num8++)
                {
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)rockLayerLow, Game1.maxTilesY), (double)genRand.Next(4, 9), genRand.Next(4, 8), silver, false, 0f, 0f, false, true);
                }
                for (int num9 = 0; num9 < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 0.00017)); num9++)
                {
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next(0, (int)WorldGen.worldSurfaceLow), (double)genRand.Next(4, 9), genRand.Next(4, 8), silver, false, 0f, 0f, false, true);
                }
                for (int num10 = 0; num10 < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 0.00012)); num10++)
                {
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)rockLayerLow, Game1.maxTilesY), (double)genRand.Next(4, 8), genRand.Next(4, 8), gold, false, 0f, 0f, false, true);
                }
                for (int num11 = 0; num11 < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 0.00012)); num11++)
                {
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next(0, ((int)WorldGen.worldSurfaceLow) - 20), (double)genRand.Next(4, 8), genRand.Next(4, 8), gold, false, 0f, 0f, false, true);
                }
                if (crimson)
                {
                    for (int num12 = 0; num12 < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 2E-05)); num12++)
                    {
                        TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)rockLayerLow, Game1.maxTilesY), (double)genRand.Next(2, 4), genRand.Next(3, 6), 0xcc, false, 0f, 0f, false, true);
                    }
                }
                else
                {
                    for (int num13 = 0; num13 < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 2E-05)); num13++)
                    {
                        TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next((int)rockLayerLow, Game1.maxTilesY), (double)genRand.Next(2, 4), genRand.Next(3, 6), 0x16, false, 0f, 0f, false, true);
                    }
                }
            });
            AddGenerationPass("Webs", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x11];
                for (int i = 0; i < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 0.0006)); i++)
                {
                    int num2 = genRand.Next(20, Game1.maxTilesX - 20);
                    int j = genRand.Next((int)worldSurfaceHigh, Game1.maxTilesY - 20);
                    if (i < numMCaves)
                    {
                        num2 = mCaveX[i];
                        j = mCaveY[i];
                    }
                    if (!Game1.tile[num2, j].active() && ((j > Game1.worldSurface) || (Game1.tile[num2, j].wall > 0)))
                    {
                        while (!Game1.tile[num2, j].active() && (j > ((int)WorldGen.worldSurfaceLow)))
                        {
                            j--;
                        }
                        j++;
                        int num4 = 1;
                        if (genRand.Next(2) == 0)
                        {
                            num4 = -1;
                        }
                        while ((!Game1.tile[num2, j].active() && (num2 > 10)) && (num2 < (Game1.maxTilesX - 10)))
                        {
                            num2 += num4;
                        }
                        num2 -= num4;
                        if ((j > Game1.worldSurface) || (Game1.tile[num2, j].wall > 0))
                        {
                            TileRunner(num2, j, (double)genRand.Next(4, 11), genRand.Next(2, 4), 0x33, true, (float)num4, -1f, false, false);
                        }
                    }
                }
            });
            AddGenerationPass("Underworld", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x12];
                progress.Set(0f);
                int num = Game1.maxTilesY - genRand.Next(150, 190);
                for (int i = 0; i < Game1.maxTilesX; i++)
                {
                    num += genRand.Next(-3, 4);
                    if (num < (Game1.maxTilesY - 190))
                    {
                        num = Game1.maxTilesY - 190;
                    }
                    if (num > (Game1.maxTilesY - 160))
                    {
                        num = Game1.maxTilesY - 160;
                    }
                    for (int num3 = (num - 20) - genRand.Next(3); num3 < Game1.maxTilesY; num3++)
                    {
                        if (num3 >= num)
                        {
                            Game1.tile[i, num3].active(false);
                            Game1.tile[i, num3].lava(false);
                            Game1.tile[i, num3].liquid = 0;
                        }
                        else
                        {
                            Game1.tile[i, num3].type = 0x39;
                        }
                    }
                }
                int num4 = Game1.maxTilesY - genRand.Next(40, 70);
                for (int j = 10; j < (Game1.maxTilesX - 10); j++)
                {
                    num4 += genRand.Next(-10, 11);
                    if (num4 > (Game1.maxTilesY - 60))
                    {
                        num4 = Game1.maxTilesY - 60;
                    }
                    if (num4 < (Game1.maxTilesY - 100))
                    {
                        num4 = Game1.maxTilesY - 120;
                    }
                    for (int num6 = num4; num6 < (Game1.maxTilesY - 10); num6++)
                    {
                        if (!Game1.tile[j, num6].active())
                        {
                            Game1.tile[j, num6].lava(true);
                            Game1.tile[j, num6].liquid = 0xff;
                        }
                    }
                }
                for (int k = 0; k < Game1.maxTilesX; k++)
                {
                    if (genRand.Next(50) == 0)
                    {
                        int num8 = Game1.maxTilesY - 0x41;
                        while (!Game1.tile[k, num8].active() && (num8 > (Game1.maxTilesY - 0x87)))
                        {
                            num8--;
                        }
                        TileRunner(genRand.Next(0, Game1.maxTilesX), num8 + genRand.Next(20, 50), (double)genRand.Next(15, 20), 0x3e8, 0x39, true, 0f, (float)genRand.Next(1, 3), true, true);
                    }
                }
                Liquid.QuickWater(-2, -1, -1);
                for (int m = 0; m < Game1.maxTilesX; m++)
                {
                    float num10 = ((float)m) / ((float)(Game1.maxTilesX - 1));
                    progress.Set((num10 / 2f) + 0.5f);
                    if (genRand.Next(13) == 0)
                    {
                        int num11 = Game1.maxTilesY - 0x41;
                        while (((Game1.tile[m, num11].liquid > 0) || Game1.tile[m, num11].active()) && (num11 > (Game1.maxTilesY - 140)))
                        {
                            num11--;
                        }
                        TileRunner(m, num11 - genRand.Next(2, 5), (double)genRand.Next(5, 30), 0x3e8, 0x39, true, 0f, (float)genRand.Next(1, 3), true, true);
                        float num12 = genRand.Next(1, 3);
                        if (genRand.Next(3) == 0)
                        {
                            num12 *= 0.5f;
                        }
                        if (genRand.Next(2) == 0)
                        {
                            TileRunner(m, num11 - genRand.Next(2, 5), (double)((int)(genRand.Next(5, 15) * num12)), (int)(genRand.Next(10, 15) * num12), 0x39, true, 1f, 0.3f, false, true);
                        }
                        if (genRand.Next(2) == 0)
                        {
                            num12 = genRand.Next(1, 3);
                            TileRunner(m, num11 - genRand.Next(2, 5), (double)((int)(genRand.Next(5, 15) * num12)), (int)(genRand.Next(10, 15) * num12), 0x39, true, -1f, 0.3f, false, true);
                        }
                        TileRunner(m + genRand.Next(-10, 10), num11 + genRand.Next(-10, 10), (double)genRand.Next(5, 15), genRand.Next(5, 10), -2, false, (float)genRand.Next(-1, 3), (float)genRand.Next(-1, 3), false, true);
                        if (genRand.Next(3) == 0)
                        {
                            TileRunner(m + genRand.Next(-10, 10), num11 + genRand.Next(-10, 10), (double)genRand.Next(10, 30), genRand.Next(10, 20), -2, false, (float)genRand.Next(-1, 3), (float)genRand.Next(-1, 3), false, true);
                        }
                        if (genRand.Next(5) == 0)
                        {
                            TileRunner(m + genRand.Next(-15, 15), num11 + genRand.Next(-15, 10), (double)genRand.Next(15, 30), genRand.Next(5, 20), -2, false, (float)genRand.Next(-1, 3), (float)genRand.Next(-1, 3), false, true);
                        }
                    }
                }
                for (int n = 0; n < Game1.maxTilesX; n++)
                {
                    TileRunner(genRand.Next(20, Game1.maxTilesX - 20), genRand.Next(Game1.maxTilesY - 180, Game1.maxTilesY - 10), (double)genRand.Next(2, 7), genRand.Next(2, 7), -2, false, 0f, 0f, false, true);
                }
                for (int num14 = 0; num14 < Game1.maxTilesX; num14++)
                {
                    if (!Game1.tile[num14, Game1.maxTilesY - 0x91].active())
                    {
                        Game1.tile[num14, Game1.maxTilesY - 0x91].liquid = 0xff;
                        Game1.tile[num14, Game1.maxTilesY - 0x91].lava(true);
                    }
                    if (!Game1.tile[num14, Game1.maxTilesY - 0x90].active())
                    {
                        Game1.tile[num14, Game1.maxTilesY - 0x90].liquid = 0xff;
                        Game1.tile[num14, Game1.maxTilesY - 0x90].lava(true);
                    }
                }
                for (int num15 = 0; num15 < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 0.0008)); num15++)
                {
                    TileRunner(genRand.Next(0, Game1.maxTilesX), genRand.Next(Game1.maxTilesY - 140, Game1.maxTilesY), (double)genRand.Next(2, 7), genRand.Next(3, 7), 0x3a, false, 0f, 0f, false, true);
                }
                AddHellHouses();
            });
            AddGenerationPass("Lakes", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x13];
                int num = genRand.Next(2, (int)(Game1.maxTilesX * 0.005));
                for (int i = 0; i < num; i++)
                {
                    float num3 = ((float)i) / ((float)num);
                    progress.Set(num3);
                    int num4 = genRand.Next(300, Game1.maxTilesX - 300);
                    while ((num4 > ((Game1.maxTilesX / 2) - 100)) && (num4 < ((Game1.maxTilesX / 2) + 100)))
                    {
                        num4 = genRand.Next(300, Game1.maxTilesX - 300);
                    }
                    int j = ((int)WorldGen.worldSurfaceLow) - 20;
                    while (!Game1.tile[num4, j].active())
                    {
                        j++;
                    }
                    Lakinater(num4, j);
                }
            });
            AddGenerationPass("Dungeon", delegate(GenerationProgress progress)
            {
                int x = 0;
                if (dungeonSide == -1)
                {
                    x = genRand.Next((int)(Game1.maxTilesX * 0.05), (int)(Game1.maxTilesX * 0.2));
                    dungeonSide = -1;
                }
                else
                {
                    x = genRand.Next((int)(Game1.maxTilesX * 0.8), (int)(Game1.maxTilesX * 0.95));
                    dungeonSide = 1;
                }
                int y = ((int)((Game1.worldSurface + Game1.rockLayer) / 2.0)) + genRand.Next(-200, 200);
                MakeDungeon(x, y);
            });
            AddGenerationPass("Corruption", delegate(GenerationProgress progress)
            {
                if (crimson)
                {
                    progress.Message = Lang.gen[0x48];
                    for (int i = 0; i < (Game1.maxTilesX * 0.00045); i++)
                    {
                        float num2 = (float)(((double)i) / (Game1.maxTilesX * 0.00045));
                        progress.Set(num2);
                        bool flag = false;
                        int num3 = 0;
                        int num4 = 0;
                        int num5 = 0;
                        while (!flag)
                        {
                            int num6 = 0;
                            flag = true;
                            int num7 = Game1.maxTilesX / 2;
                            int num8 = 200;
                            if (dungeonSide < 0)
                            {
                                num3 = genRand.Next(600, Game1.maxTilesX - 320);
                            }
                            else
                            {
                                num3 = genRand.Next(320, Game1.maxTilesX - 600);
                            }
                            num4 = (num3 - genRand.Next(200)) - 100;
                            num5 = (num3 + genRand.Next(200)) + 100;
                            if (num4 < 0x11d)
                            {
                                num4 = 0x11d;
                            }
                            if (num5 > (Game1.maxTilesX - 0x11d))
                            {
                                num5 = Game1.maxTilesX - 0x11d;
                            }
                            if ((dungeonSide < 0) && (num4 < 400))
                            {
                                num4 = 400;
                            }
                            else if ((dungeonSide > 0) && (num4 > (Game1.maxTilesX - 400)))
                            {
                                num4 = Game1.maxTilesX - 400;
                            }
                            if ((num3 > (num7 - num8)) && (num3 < (num7 + num8)))
                            {
                                flag = false;
                            }
                            if ((num4 > (num7 - num8)) && (num4 < (num7 + num8)))
                            {
                                flag = false;
                            }
                            if ((num5 > (num7 - num8)) && (num5 < (num7 + num8)))
                            {
                                flag = false;
                            }
                            if ((num3 > UndergroundDesertLocation.X) && (num3 < (UndergroundDesertLocation.X + UndergroundDesertLocation.Width)))
                            {
                                flag = false;
                            }
                            if ((num4 > UndergroundDesertLocation.X) && (num4 < (UndergroundDesertLocation.X + UndergroundDesertLocation.Width)))
                            {
                                flag = false;
                            }
                            if ((num5 > UndergroundDesertLocation.X) && (num5 < (UndergroundDesertLocation.X + UndergroundDesertLocation.Width)))
                            {
                                flag = false;
                            }
                            for (int n = num4; n < num5; n++)
                            {
                                for (int num10 = 0; num10 < ((int)Game1.worldSurface); num10 += 5)
                                {
                                    if (Game1.tile[n, num10].active() && Game1.tileDungeon[Game1.tile[n, num10].type])
                                    {
                                        flag = false;
                                        break;
                                    }
                                    if (!flag)
                                    {
                                        break;
                                    }
                                }
                            }
                            if (((num6 < 200) && (JungleX > num4)) && (JungleX < num5))
                            {
                                num6++;
                                flag = false;
                            }
                        }
                        CrimStart(num3, ((int)WorldGen.worldSurfaceLow) - 10);
                        for (int j = num4; j < num5; j++)
                        {
                            for (int num12 = (int)WorldGen.worldSurfaceLow; num12 < (Game1.worldSurface - 1.0); num12++)
                            {
                                if (Game1.tile[j, num12].active())
                                {
                                    int num13 = num12 + genRand.Next(10, 14);
                                    for (int num14 = num12; num14 < num13; num14++)
                                    {
                                        if (((Game1.tile[j, num14].type == 0x3b) || (Game1.tile[j, num14].type == 60)) && ((j >= (num4 + genRand.Next(5))) && (j < (num5 - genRand.Next(5)))))
                                        {
                                            Game1.tile[j, num14].type = 0;
                                        }
                                    }
                                    break;
                                }
                            }
                        }
                        double num15 = Game1.worldSurface + 40.0;
                        for (int k = num4; k < num5; k++)
                        {
                            num15 += genRand.Next(-2, 3);
                            if (num15 < (Game1.worldSurface + 30.0))
                            {
                                num15 = Game1.worldSurface + 30.0;
                            }
                            if (num15 > (Game1.worldSurface + 50.0))
                            {
                                num15 = Game1.worldSurface + 50.0;
                            }
                            i2 = k;
                            bool flag2 = false;
                            for (int num17 = (int)WorldGen.worldSurfaceLow; num17 < num15; num17++)
                            {
                                if (Game1.tile[i2, num17].active())
                                {
                                    if (((Game1.tile[i2, num17].type == 0x35) && (i2 >= (num4 + genRand.Next(5)))) && (i2 <= (num5 - genRand.Next(5))))
                                    {
                                        Game1.tile[i2, num17].type = 0xea;
                                    }
                                    if (((Game1.tile[i2, num17].type == 0) && (num17 < (Game1.worldSurface - 1.0))) && !flag2)
                                    {
                                        grassSpread = 0;
                                        SpreadGrass(i2, num17, 0, 0xc7, true, 0);
                                    }
                                    flag2 = true;
                                    if (Game1.tile[i2, num17].wall == 0xd8)
                                    {
                                        Game1.tile[i2, num17].wall = 0xda;
                                    }
                                    else if (Game1.tile[i2, num17].wall == 0xbb)
                                    {
                                        Game1.tile[i2, num17].wall = 0xdd;
                                    }
                                    if (Game1.tile[i2, num17].type == 1)
                                    {
                                        if ((i2 >= (num4 + genRand.Next(5))) && (i2 <= (num5 - genRand.Next(5))))
                                        {
                                            Game1.tile[i2, num17].type = 0xcb;
                                        }
                                    }
                                    else if (Game1.tile[i2, num17].type == 2)
                                    {
                                        Game1.tile[i2, num17].type = 0xc7;
                                    }
                                    else if (Game1.tile[i2, num17].type == 0xa1)
                                    {
                                        Game1.tile[i2, num17].type = 200;
                                    }
                                    else if (Game1.tile[i2, num17].type == 0x18c)
                                    {
                                        Game1.tile[i2, num17].type = 0x191;
                                    }
                                    else if (Game1.tile[i2, num17].type == 0x18d)
                                    {
                                        Game1.tile[i2, num17].type = 0x18f;
                                    }
                                }
                            }
                        }
                        int num18 = genRand.Next(10, 15);
                        for (int m = 0; m < num18; m++)
                        {
                            int num20 = 0;
                            bool flag3 = false;
                            int num21 = 0;
                            while (!flag3)
                            {
                                num20++;
                                int x = genRand.Next(num4 - num21, num5 + num21);
                                int y = genRand.Next(((int)Game1.worldSurface) - (num21 / 2), ((int)(Game1.worldSurface + 100.0)) + num21);
                                if (num20 > 100)
                                {
                                    num21++;
                                    num20 = 0;
                                }
                                if (Game1.tile[x, y].active())
                                {
                                    goto Label_076F;
                                }
                                while (!Game1.tile[x, y].active())
                                {
                                    y++;
                                }
                                y--;
                                goto Label_078E;
                            Label_0769:
                                y--;
                            Label_076F:
                                if (Game1.tile[x, y].active() && (y > Game1.worldSurface))
                                {
                                    goto Label_0769;
                                }
                            Label_078E:
                                if ((num21 > 10) || (Game1.tile[x, y + 1].active() && (Game1.tile[x, y + 1].type == 0xcb)))
                                {
                                    Place3x2(x, y, 0x1a, 1);
                                    if (Game1.tile[x, y].type == 0x1a)
                                    {
                                        flag3 = true;
                                    }
                                }
                                if (num21 > 100)
                                {
                                    flag3 = true;
                                }
                            }
                        }
                    }
                }
                else
                {
                    progress.Message = Lang.gen[20];
                    for (int num24 = 0; num24 < (Game1.maxTilesX * 0.00045); num24++)
                    {
                        float num25 = (float)(((double)num24) / (Game1.maxTilesX * 0.00045));
                        progress.Set(num25);
                        bool flag4 = false;
                        int num26 = 0;
                        int num27 = 0;
                        int num28 = 0;
                        while (!flag4)
                        {
                            int num29 = 0;
                            flag4 = true;
                            int num30 = Game1.maxTilesX / 2;
                            int num31 = 200;
                            num26 = genRand.Next(320, Game1.maxTilesX - 320);
                            num27 = (num26 - genRand.Next(200)) - 100;
                            num28 = (num26 + genRand.Next(200)) + 100;
                            if (num27 < 0x11d)
                            {
                                num27 = 0x11d;
                            }
                            if (num28 > (Game1.maxTilesX - 0x11d))
                            {
                                num28 = Game1.maxTilesX - 0x11d;
                            }
                            if ((num26 > (num30 - num31)) && (num26 < (num30 + num31)))
                            {
                                flag4 = false;
                            }
                            if ((num27 > (num30 - num31)) && (num27 < (num30 + num31)))
                            {
                                flag4 = false;
                            }
                            if ((num28 > (num30 - num31)) && (num28 < (num30 + num31)))
                            {
                                flag4 = false;
                            }
                            if ((num26 > UndergroundDesertLocation.X) && (num26 < (UndergroundDesertLocation.X + UndergroundDesertLocation.Width)))
                            {
                                flag4 = false;
                            }
                            if ((num27 > UndergroundDesertLocation.X) && (num27 < (UndergroundDesertLocation.X + UndergroundDesertLocation.Width)))
                            {
                                flag4 = false;
                            }
                            if ((num28 > UndergroundDesertLocation.X) && (num28 < (UndergroundDesertLocation.X + UndergroundDesertLocation.Width)))
                            {
                                flag4 = false;
                            }
                            for (int num32 = num27; num32 < num28; num32++)
                            {
                                for (int num33 = 0; num33 < ((int)Game1.worldSurface); num33 += 5)
                                {
                                    if (Game1.tile[num32, num33].active() && Game1.tileDungeon[Game1.tile[num32, num33].type])
                                    {
                                        flag4 = false;
                                        break;
                                    }
                                    if (!flag4)
                                    {
                                        break;
                                    }
                                }
                            }
                            if (((num29 < 200) && (JungleX > num27)) && (JungleX < num28))
                            {
                                num29++;
                                flag4 = false;
                            }
                        }
                        int num34 = 0;
                        for (int num35 = num27; num35 < num28; num35++)
                        {
                            if (num34 > 0)
                            {
                                num34--;
                            }
                            if ((num35 == num26) || (num34 == 0))
                            {
                                for (int num36 = (int)WorldGen.worldSurfaceLow; num36 < (Game1.worldSurface - 1.0); num36++)
                                {
                                    if (Game1.tile[num35, num36].active() || (Game1.tile[num35, num36].wall > 0))
                                    {
                                        if (num35 == num26)
                                        {
                                            num34 = 20;
                                            ChasmRunner(num35, num36, genRand.Next(150) + 150, true);
                                        }
                                        else if ((genRand.Next(0x23) == 0) && (num34 == 0))
                                        {
                                            num34 = 30;
                                            bool makeOrb = true;
                                            ChasmRunner(num35, num36, genRand.Next(50) + 50, makeOrb);
                                        }
                                        break;
                                    }
                                }
                            }
                            for (int num37 = (int)WorldGen.worldSurfaceLow; num37 < (Game1.worldSurface - 1.0); num37++)
                            {
                                if (Game1.tile[num35, num37].active())
                                {
                                    int num38 = num37 + genRand.Next(10, 14);
                                    for (int num39 = num37; num39 < num38; num39++)
                                    {
                                        if (((Game1.tile[num35, num39].type == 0x3b) || (Game1.tile[num35, num39].type == 60)) && ((num35 >= (num27 + genRand.Next(5))) && (num35 < (num28 - genRand.Next(5)))))
                                        {
                                            Game1.tile[num35, num39].type = 0;
                                        }
                                    }
                                    break;
                                }
                            }
                        }
                        double num40 = Game1.worldSurface + 40.0;
                        for (int num41 = num27; num41 < num28; num41++)
                        {
                            num40 += genRand.Next(-2, 3);
                            if (num40 < (Game1.worldSurface + 30.0))
                            {
                                num40 = Game1.worldSurface + 30.0;
                            }
                            if (num40 > (Game1.worldSurface + 50.0))
                            {
                                num40 = Game1.worldSurface + 50.0;
                            }
                            i2 = num41;
                            bool flag6 = false;
                            for (int num42 = (int)WorldGen.worldSurfaceLow; num42 < num40; num42++)
                            {
                                if (Game1.tile[i2, num42].active())
                                {
                                    if (((Game1.tile[i2, num42].type == 0x35) && (i2 >= (num27 + genRand.Next(5)))) && (i2 <= (num28 - genRand.Next(5))))
                                    {
                                        Game1.tile[i2, num42].type = 0x70;
                                    }
                                    if (((Game1.tile[i2, num42].type == 0) && (num42 < (Game1.worldSurface - 1.0))) && !flag6)
                                    {
                                        grassSpread = 0;
                                        SpreadGrass(i2, num42, 0, 0x17, true, 0);
                                    }
                                    flag6 = true;
                                    if (((Game1.tile[i2, num42].type == 1) && (i2 >= (num27 + genRand.Next(5)))) && (i2 <= (num28 - genRand.Next(5))))
                                    {
                                        Game1.tile[i2, num42].type = 0x19;
                                    }
                                    if (Game1.tile[i2, num42].wall == 0xd8)
                                    {
                                        Game1.tile[i2, num42].wall = 0xd9;
                                    }
                                    else if (Game1.tile[i2, num42].wall == 0xbb)
                                    {
                                        Game1.tile[i2, num42].wall = 220;
                                    }
                                    if (Game1.tile[i2, num42].type == 2)
                                    {
                                        Game1.tile[i2, num42].type = 0x17;
                                    }
                                    if (Game1.tile[i2, num42].type == 0xa1)
                                    {
                                        Game1.tile[i2, num42].type = 0xa3;
                                    }
                                    else if (Game1.tile[i2, num42].type == 0x18c)
                                    {
                                        Game1.tile[i2, num42].type = 400;
                                    }
                                    else if (Game1.tile[i2, num42].type == 0x18d)
                                    {
                                        Game1.tile[i2, num42].type = 0x18e;
                                    }
                                }
                            }
                        }
                        for (int num43 = num27; num43 < num28; num43++)
                        {
                            for (int num44 = 0; num44 < (Game1.maxTilesY - 50); num44++)
                            {
                                if (Game1.tile[num43, num44].active() && (Game1.tile[num43, num44].type == 0x1f))
                                {
                                    int num45 = num43 - 13;
                                    int num46 = num43 + 13;
                                    int num47 = num44 - 13;
                                    int num48 = num44 + 13;
                                    for (int num49 = num45; num49 < num46; num49++)
                                    {
                                        if ((num49 > 10) && (num49 < (Game1.maxTilesX - 10)))
                                        {
                                            for (int num50 = num47; num50 < num48; num50++)
                                            {
                                                if ((((Math.Abs((int)(num49 - num43)) + Math.Abs((int)(num50 - num44))) < (9 + genRand.Next(11))) && (genRand.Next(3) != 0)) && (Game1.tile[num49, num50].type != 0x1f))
                                                {
                                                    Game1.tile[num49, num50].active(true);
                                                    Game1.tile[num49, num50].type = 0x19;
                                                    if ((Math.Abs((int)(num49 - num43)) <= 1) && (Math.Abs((int)(num50 - num44)) <= 1))
                                                    {
                                                        Game1.tile[num49, num50].active(false);
                                                    }
                                                }
                                                if (((Game1.tile[num49, num50].type != 0x1f) && (Math.Abs((int)(num49 - num43)) <= (2 + genRand.Next(3)))) && (Math.Abs((int)(num50 - num44)) <= (2 + genRand.Next(3))))
                                                {
                                                    Game1.tile[num49, num50].active(false);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            });
            AddGenerationPass("Slush", delegate(GenerationProgress progress)
            {
                for (int i = snowTop; i < snowBottom; i++)
                {
                    for (int j = snowMinX[i]; j < snowMaxX[i]; j++)
                    {
                        switch (Game1.tile[j, i].type)
                        {
                            case 0x7b:
                                Game1.tile[j, i].type = 0xe0;
                                break;

                            case 0x3b:
                                {
                                    bool flag = true;
                                    int num4 = 3;
                                    for (int k = j - num4; k <= (j + num4); k++)
                                    {
                                        for (int m = i - num4; m <= (i + num4); m++)
                                        {
                                            if (((Game1.tile[k, m].type == 60) || (Game1.tile[k, m].type == 70)) || ((Game1.tile[k, m].type == 0x47) || (Game1.tile[k, m].type == 0x48)))
                                            {
                                                flag = false;
                                                break;
                                            }
                                        }
                                    }
                                    if (flag)
                                    {
                                        Game1.tile[j, i].type = 0xe0;
                                    }
                                    break;
                                }
                            case 1:
                                Game1.tile[j, i].type = 0xa1;
                                break;
                        }
                    }
                }
            });
            AddGenerationPass("Mud Caves To Grass", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x15];
                for (int i = 0; i < numMCaves; i++)
                {
                    int num2 = mCaveX[i];
                    int j = mCaveY[i];
                    CaveOpenater(num2, j);
                    Cavinator(num2, j, genRand.Next(40, 50));
                }
            });
            AddGenerationPass("Beaches", delegate(GenerationProgress progress)
            {
                int num = 0;
                int num2 = 0;
                int num3 = 20;
                int num4 = Game1.maxTilesX - 20;
                progress.Message = Lang.gen[0x16];
                for (int i = 0; i < 2; i++)
                {
                    int num6 = 0;
                    int maxTilesX = 0;
                    if (i == 0)
                    {
                        num6 = 0;
                        maxTilesX = genRand.Next(0x7d, 200) + 50;
                        if (dungeonSide == 1)
                        {
                            maxTilesX = 0x113;
                        }
                        int num8 = 0;
                        float num9 = 1f;
                        int num10 = 0;
                        while (!Game1.tile[maxTilesX - 1, num10].active())
                        {
                            num10++;
                        }
                        num = num10;
                        num10 += genRand.Next(1, 5);
                        for (int j = maxTilesX - 1; j >= num6; j--)
                        {
                            num8++;
                            if (num8 < 3)
                            {
                                num9 += genRand.Next(10, 20) * 0.2f;
                            }
                            else if (num8 < 6)
                            {
                                num9 += genRand.Next(10, 20) * 0.15f;
                            }
                            else if (num8 < 9)
                            {
                                num9 += genRand.Next(10, 20) * 0.1f;
                            }
                            else if (num8 < 15)
                            {
                                num9 += genRand.Next(10, 20) * 0.07f;
                            }
                            else if (num8 < 50)
                            {
                                num9 += genRand.Next(10, 20) * 0.05f;
                            }
                            else if (num8 < 0x4b)
                            {
                                num9 += genRand.Next(10, 20) * 0.04f;
                            }
                            else if (num8 < 100)
                            {
                                num9 += genRand.Next(10, 20) * 0.03f;
                            }
                            else if (num8 < 0x7d)
                            {
                                num9 += genRand.Next(10, 20) * 0.02f;
                            }
                            else if (num8 < 150)
                            {
                                num9 += genRand.Next(10, 20) * 0.01f;
                            }
                            else if (num8 < 0xaf)
                            {
                                num9 += genRand.Next(10, 20) * 0.005f;
                            }
                            else if (num8 < 200)
                            {
                                num9 += genRand.Next(10, 20) * 0.001f;
                            }
                            else if (num8 < 230)
                            {
                                num9 += genRand.Next(10, 20) * 0.01f;
                            }
                            else if (num8 < 0xeb)
                            {
                                num9 += genRand.Next(10, 20) * 0.05f;
                            }
                            else if (num8 < 240)
                            {
                                num9 += genRand.Next(10, 20) * 0.1f;
                            }
                            else if (num8 < 0xf5)
                            {
                                num9 += genRand.Next(10, 20) * 0.05f;
                            }
                            else if (num8 < 0xff)
                            {
                                num9 += genRand.Next(10, 20) * 0.01f;
                            }
                            if (num8 == 0xeb)
                            {
                                num4 = j;
                            }
                            if (num8 == 0xeb)
                            {
                                num3 = j;
                            }
                            int num12 = genRand.Next(15, 20);
                            for (int k = 0; k < ((num10 + num9) + num12); k++)
                            {
                                if (k < ((num10 + (num9 * 0.75f)) - 3f))
                                {
                                    Game1.tile[j, k].active(false);
                                    if (k > num10)
                                    {
                                        Game1.tile[j, k].liquid = 0xff;
                                    }
                                    else if (k == num10)
                                    {
                                        Game1.tile[j, k].liquid = 0x7f;
                                    }
                                }
                                else if (k > num10)
                                {
                                    Game1.tile[j, k].type = 0x35;
                                    Game1.tile[j, k].active(true);
                                }
                                Game1.tile[j, k].wall = 0;
                            }
                        }
                    }
                    else
                    {
                        num6 = (Game1.maxTilesX - genRand.Next(0x7d, 200)) - 50;
                        maxTilesX = Game1.maxTilesX;
                        if (dungeonSide == -1)
                        {
                            num6 = Game1.maxTilesX - 0x113;
                        }
                        float num14 = 1f;
                        int num15 = 0;
                        int num16 = 0;
                        while (!Game1.tile[num6, num16].active())
                        {
                            num16++;
                        }
                        num2 = num16;
                        num16 += genRand.Next(1, 5);
                        for (int m = num6; m < maxTilesX; m++)
                        {
                            num15++;
                            if (num15 < 3)
                            {
                                num14 += genRand.Next(10, 20) * 0.2f;
                            }
                            else if (num15 < 6)
                            {
                                num14 += genRand.Next(10, 20) * 0.15f;
                            }
                            else if (num15 < 9)
                            {
                                num14 += genRand.Next(10, 20) * 0.1f;
                            }
                            else if (num15 < 15)
                            {
                                num14 += genRand.Next(10, 20) * 0.07f;
                            }
                            else if (num15 < 50)
                            {
                                num14 += genRand.Next(10, 20) * 0.05f;
                            }
                            else if (num15 < 0x4b)
                            {
                                num14 += genRand.Next(10, 20) * 0.04f;
                            }
                            else if (num15 < 100)
                            {
                                num14 += genRand.Next(10, 20) * 0.03f;
                            }
                            else if (num15 < 0x7d)
                            {
                                num14 += genRand.Next(10, 20) * 0.02f;
                            }
                            else if (num15 < 150)
                            {
                                num14 += genRand.Next(10, 20) * 0.01f;
                            }
                            else if (num15 < 0xaf)
                            {
                                num14 += genRand.Next(10, 20) * 0.005f;
                            }
                            else if (num15 < 200)
                            {
                                num14 += genRand.Next(10, 20) * 0.001f;
                            }
                            else if (num15 < 230)
                            {
                                num14 += genRand.Next(10, 20) * 0.01f;
                            }
                            else if (num15 < 0xeb)
                            {
                                num14 += genRand.Next(10, 20) * 0.05f;
                            }
                            else if (num15 < 240)
                            {
                                num14 += genRand.Next(10, 20) * 0.1f;
                            }
                            else if (num15 < 0xf5)
                            {
                                num14 += genRand.Next(10, 20) * 0.05f;
                            }
                            else if (num15 < 0xff)
                            {
                                num14 += genRand.Next(10, 20) * 0.01f;
                            }
                            if (num15 == 0xeb)
                            {
                                num4 = m;
                            }
                            int num18 = genRand.Next(15, 20);
                            for (int n = 0; n < ((num16 + num14) + num18); n++)
                            {
                                if ((n < ((num16 + (num14 * 0.75f)) - 3f)) && (n < (Game1.worldSurface - 2.0)))
                                {
                                    Game1.tile[m, n].active(false);
                                    if (n > num16)
                                    {
                                        Game1.tile[m, n].liquid = 0xff;
                                    }
                                    else if (n == num16)
                                    {
                                        Game1.tile[m, n].liquid = 0x7f;
                                    }
                                }
                                else if (n > num16)
                                {
                                    Game1.tile[m, n].type = 0x35;
                                    Game1.tile[m, n].active(true);
                                }
                                Game1.tile[m, n].wall = 0;
                            }
                        }
                    }
                }
                while (!Game1.tile[num3, num].active())
                {
                    num++;
                }
                num++;
                while (!Game1.tile[num4, num2].active())
                {
                    num2++;
                }
                num2++;
            });
            AddGenerationPass("Gems", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x17];
                for (int i = 0x3f; i <= 0x44; i++)
                {
                    float num2 = 0f;
                    switch (i)
                    {
                        case 0x43:
                            num2 = Game1.maxTilesX * 0.5f;
                            break;

                        case 0x42:
                            num2 = Game1.maxTilesX * 0.45f;
                            break;

                        case 0x3f:
                            num2 = Game1.maxTilesX * 0.3f;
                            break;

                        case 0x41:
                            num2 = Game1.maxTilesX * 0.25f;
                            break;

                        case 0x40:
                            num2 = Game1.maxTilesX * 0.1f;
                            break;

                        case 0x44:
                            num2 = Game1.maxTilesX * 0.05f;
                            break;
                    }
                    num2 *= 0.2f;
                    for (int k = 0; k < num2; k++)
                    {
                        int num4 = genRand.Next(0, Game1.maxTilesX);
                        int num5 = genRand.Next((int)Game1.worldSurface, Game1.maxTilesY);
                        while (Game1.tile[num4, num5].type != 1)
                        {
                            num4 = genRand.Next(0, Game1.maxTilesX);
                            num5 = genRand.Next((int)Game1.worldSurface, Game1.maxTilesY);
                        }
                        TileRunner(num4, num5, (double)genRand.Next(2, 6), genRand.Next(3, 7), i, false, 0f, 0f, false, true);
                    }
                }
                for (int j = 0; j < 2; j++)
                {
                    int num7 = 1;
                    int num8 = 5;
                    int num9 = Game1.maxTilesX - 5;
                    if (j == 1)
                    {
                        num7 = -1;
                        num8 = Game1.maxTilesX - 5;
                        num9 = 5;
                    }
                    for (int m = num8; m != num9; m += num7)
                    {
                        for (int n = 10; n < (Game1.maxTilesY - 10); n++)
                        {
                            if ((Game1.tile[m, n].active() && Game1.tile[m, n + 1].active()) && (Game1.tileSand[Game1.tile[m, n].type] && Game1.tileSand[Game1.tile[m, n + 1].type]))
                            {
                                ushort type = Game1.tile[m, n].type;
                                int num13 = m + num7;
                                int num14 = n + 1;
                                if (!Game1.tile[num13, n].active() && !Game1.tile[num13, n + 1].active())
                                {
                                    while (!Game1.tile[num13, num14].active())
                                    {
                                        num14++;
                                    }
                                    num14--;
                                    Game1.tile[m, n].active(false);
                                    Game1.tile[num13, num14].active(true);
                                    Game1.tile[num13, num14].type = type;
                                }
                            }
                        }
                    }
                }
            });
            AddGenerationPass("Gravitating Sand", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x18];
                for (int i = 0; i < Game1.maxTilesX; i++)
                {
                    float num2 = ((float)i) / ((float)(Game1.maxTilesX - 1));
                    progress.Set(num2);
                    bool flag = false;
                    int num3 = 0;
                    for (int j = Game1.maxTilesY - 1; j > 0; j--)
                    {
                        if (SolidOrSlopedTile(i, j))
                        {
                            ushort type = Game1.tile[i, j].type;
                            if ((flag && (j < ((int)Game1.worldSurface))) && ((j != (num3 - 1)) && TileID.Sets.Falling[type]))
                            {
                                for (int k = j; k < num3; k++)
                                {
                                    Game1.tile[i, k].type = type;
                                    Game1.tile[i, k].active(true);
                                }
                            }
                            flag = true;
                            num3 = j;
                        }
                    }
                }
            });
            AddGenerationPass("Clean Up Dirt", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x19];
                for (int i = 3; i < (Game1.maxTilesX - 3); i++)
                {
                    float num2 = ((float)i) / ((float)Game1.maxTilesX);
                    progress.Set(0.5f * num2);
                    bool flag = true;
                    for (int k = 0; k < Game1.worldSurface; k++)
                    {
                        if (flag)
                        {
                            if (((Game1.tile[i, k].wall == 2) || (Game1.tile[i, k].wall == 40)) || (Game1.tile[i, k].wall == 0x40))
                            {
                                Game1.tile[i, k].wall = 0;
                            }
                            if (((Game1.tile[i, k].type != 0x35) && (Game1.tile[i, k].type != 0x70)) && (Game1.tile[i, k].type != 0xea))
                            {
                                if (((Game1.tile[i - 1, k].wall == 2) || (Game1.tile[i - 1, k].wall == 40)) || (Game1.tile[i - 1, k].wall == 40))
                                {
                                    Game1.tile[i - 1, k].wall = 0;
                                }
                                if ((((Game1.tile[i - 2, k].wall == 2) || (Game1.tile[i - 2, k].wall == 40)) || (Game1.tile[i - 2, k].wall == 40)) && (genRand.Next(2) == 0))
                                {
                                    Game1.tile[i - 2, k].wall = 0;
                                }
                                if ((((Game1.tile[i - 3, k].wall == 2) || (Game1.tile[i - 3, k].wall == 40)) || (Game1.tile[i - 3, k].wall == 40)) && (genRand.Next(2) == 0))
                                {
                                    Game1.tile[i - 3, k].wall = 0;
                                }
                                if (((Game1.tile[i + 1, k].wall == 2) || (Game1.tile[i + 1, k].wall == 40)) || (Game1.tile[i + 1, k].wall == 40))
                                {
                                    Game1.tile[i + 1, k].wall = 0;
                                }
                                if ((((Game1.tile[i + 2, k].wall == 2) || (Game1.tile[i + 2, k].wall == 40)) || (Game1.tile[i + 2, k].wall == 40)) && (genRand.Next(2) == 0))
                                {
                                    Game1.tile[i + 2, k].wall = 0;
                                }
                                if ((((Game1.tile[i + 3, k].wall == 2) || (Game1.tile[i + 3, k].wall == 40)) || (Game1.tile[i + 3, k].wall == 40)) && (genRand.Next(2) == 0))
                                {
                                    Game1.tile[i + 3, k].wall = 0;
                                }
                                if (Game1.tile[i, k].active())
                                {
                                    flag = false;
                                }
                            }
                        }
                        else if (((((Game1.tile[i, k].wall == 0) && (Game1.tile[i, k + 1].wall == 0)) && ((Game1.tile[i, k + 2].wall == 0) && (Game1.tile[i, k + 3].wall == 0))) && (((Game1.tile[i, k + 4].wall == 0) && (Game1.tile[i - 1, k].wall == 0)) && ((Game1.tile[i + 1, k].wall == 0) && (Game1.tile[i - 2, k].wall == 0)))) && ((((Game1.tile[i + 2, k].wall == 0) && !Game1.tile[i, k].active()) && (!Game1.tile[i, k + 1].active() && !Game1.tile[i, k + 2].active())) && !Game1.tile[i, k + 3].active()))
                        {
                            flag = true;
                        }
                    }
                }
                for (int j = Game1.maxTilesX - 5; j >= 5; j--)
                {
                    float num5 = ((float)j) / ((float)Game1.maxTilesX);
                    progress.Set(1f - (0.5f * num5));
                    bool flag2 = true;
                    for (int m = 0; m < Game1.worldSurface; m++)
                    {
                        if (flag2)
                        {
                            if (((Game1.tile[j, m].wall == 2) || (Game1.tile[j, m].wall == 40)) || (Game1.tile[j, m].wall == 0x40))
                            {
                                Game1.tile[j, m].wall = 0;
                            }
                            if (Game1.tile[j, m].type != 0x35)
                            {
                                if (((Game1.tile[j - 1, m].wall == 2) || (Game1.tile[j - 1, m].wall == 40)) || (Game1.tile[j - 1, m].wall == 40))
                                {
                                    Game1.tile[j - 1, m].wall = 0;
                                }
                                if ((((Game1.tile[j - 2, m].wall == 2) || (Game1.tile[j - 2, m].wall == 40)) || (Game1.tile[j - 2, m].wall == 40)) && (genRand.Next(2) == 0))
                                {
                                    Game1.tile[j - 2, m].wall = 0;
                                }
                                if ((((Game1.tile[j - 3, m].wall == 2) || (Game1.tile[j - 3, m].wall == 40)) || (Game1.tile[j - 3, m].wall == 40)) && (genRand.Next(2) == 0))
                                {
                                    Game1.tile[j - 3, m].wall = 0;
                                }
                                if (((Game1.tile[j + 1, m].wall == 2) || (Game1.tile[j + 1, m].wall == 40)) || (Game1.tile[j + 1, m].wall == 40))
                                {
                                    Game1.tile[j + 1, m].wall = 0;
                                }
                                if ((((Game1.tile[j + 2, m].wall == 2) || (Game1.tile[j + 2, m].wall == 40)) || (Game1.tile[j + 2, m].wall == 40)) && (genRand.Next(2) == 0))
                                {
                                    Game1.tile[j + 2, m].wall = 0;
                                }
                                if ((((Game1.tile[j + 3, m].wall == 2) || (Game1.tile[j + 3, m].wall == 40)) || (Game1.tile[j + 3, m].wall == 40)) && (genRand.Next(2) == 0))
                                {
                                    Game1.tile[j + 3, m].wall = 0;
                                }
                                if (Game1.tile[j, m].active())
                                {
                                    flag2 = false;
                                }
                            }
                        }
                        else if (((((Game1.tile[j, m].wall == 0) && (Game1.tile[j, m + 1].wall == 0)) && ((Game1.tile[j, m + 2].wall == 0) && (Game1.tile[j, m + 3].wall == 0))) && (((Game1.tile[j, m + 4].wall == 0) && (Game1.tile[j - 1, m].wall == 0)) && ((Game1.tile[j + 1, m].wall == 0) && (Game1.tile[j - 2, m].wall == 0)))) && ((((Game1.tile[j + 2, m].wall == 0) && !Game1.tile[j, m].active()) && (!Game1.tile[j, m + 1].active() && !Game1.tile[j, m + 2].active())) && !Game1.tile[j, m + 3].active()))
                        {
                            flag2 = true;
                        }
                    }
                }
            });
            AddGenerationPass("Pyramids", delegate(GenerationProgress progress)
            {
                for (int i = 0; i < numPyr; i++)
                {
                    int num2 = PyrX[i];
                    int j = PyrY[i];
                    if ((((num2 > 300) && (num2 < (Game1.maxTilesX - 300))) && ((dungeonSide >= 0) || (num2 >= (dungeonX + (Game1.maxTilesX * 0.15))))) && ((dungeonSide <= 0) || (num2 <= (dungeonX - (Game1.maxTilesX * 0.15)))))
                    {
                        goto Label_0089;
                    }
                    continue;
                Label_0085:
                    j++;
                Label_0089:
                    if (!Game1.tile[num2, j].active() && (j < Game1.worldSurface))
                    {
                        goto Label_0085;
                    }
                    if ((j < Game1.worldSurface) && (Game1.tile[num2, j].type == 0x35))
                    {
                        int maxTilesX = Game1.maxTilesX;
                        for (int k = 0; k < i; k++)
                        {
                            int num6 = Math.Abs((int)(num2 - PyrX[k]));
                            if (num6 < maxTilesX)
                            {
                                maxTilesX = num6;
                            }
                        }
                        if (maxTilesX >= 250)
                        {
                            j--;
                            Pyramid(num2, j);
                        }
                    }
                }
            });
            AddGenerationPass("Dirt Rock Wall Runner", delegate(GenerationProgress progress)
            {
                for (int i = 0; i < Game1.maxTilesX; i++)
                {
                    int num2 = genRand.Next(10, Game1.maxTilesX - 10);
                    int j = genRand.Next(10, (int)Game1.worldSurface);
                    if (Game1.tile[num2, j].wall == 2)
                    {
                        DirtyRockRunner(num2, j);
                    }
                }
            });
            AddGenerationPass("Living Trees", delegate(GenerationProgress progress)
            {
                float num = Game1.maxTilesX / 0x1068;
                int num2 = genRand.Next(0, (int)(3f * num));
                for (int i = 0; i < num2; i++)
                {
                    bool flag = false;
                    int num4 = 0;
                    while (!flag)
                    {
                        num4++;
                        if (num4 > 0x3e8)
                        {
                            flag = true;
                        }
                        int num5 = genRand.Next(300, Game1.maxTilesX - 300);
                        if ((num5 <= ((Game1.maxTilesX / 2) - 100)) || (num5 >= ((Game1.maxTilesX / 2) + 100)))
                        {
                            int j = 0;
                            while (!Game1.tile[num5, j].active() && (j < Game1.worldSurface))
                            {
                                j++;
                            }
                            if (Game1.tile[num5, j].type == 0)
                            {
                                j--;
                                if (j > 150)
                                {
                                    bool flag2 = true;
                                    for (int k = num5 - 50; k < (num5 + 50); k++)
                                    {
                                        for (int m = j - 50; m < (j + 50); m++)
                                        {
                                            if (Game1.tile[k, m].active())
                                            {
                                                switch (Game1.tile[k, m].type)
                                                {
                                                    case 0x29:
                                                    case 0x2b:
                                                    case 0x2c:
                                                    case 0xbd:
                                                    case 0xc4:
                                                        flag2 = false;
                                                        break;
                                                }
                                            }
                                        }
                                    }
                                    if (flag2)
                                    {
                                        flag = GrowLivingTree(num5, j);
                                    }
                                }
                            }
                        }
                    }
                }
                Game1.tileSolid[0xc0] = false;
            });
            AddGenerationPass("Wood Tree Walls", delegate(GenerationProgress progress)
            {
                for (int i = 0x19; i < (Game1.maxTilesX - 0x19); i++)
                {
                    for (int j = 0x19; j < Game1.worldSurface; j++)
                    {
                        if (((Game1.tile[i, j].type == 0xbf) || (Game1.tile[i, j - 1].type == 0xbf)) || (((Game1.tile[i - 1, j].type == 0xbf) || (Game1.tile[i + 1, j].type == 0xbf)) || (Game1.tile[i, j + 1].type == 0xbf)))
                        {
                            bool flag = true;
                            for (int k = i - 1; k <= (i + 1); k++)
                            {
                                for (int m = j - 1; m <= (j + 1); m++)
                                {
                                    if (((k != i) && (m != j)) && ((Game1.tile[k, m].type != 0xbf) && (Game1.tile[k, m].wall != 0x4e)))
                                    {
                                        flag = false;
                                    }
                                }
                            }
                            if (flag)
                            {
                                Game1.tile[i, j].wall = 0x4e;
                            }
                        }
                    }
                }
            });
            AddGenerationPass("Alters", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x1a];
                for (int i = 0; i < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 2E-05)); i++)
                {
                    float num2 = (float)(((double)i) / ((Game1.maxTilesX * Game1.maxTilesY) * 2E-05));
                    progress.Set(num2);
                    bool flag = false;
                    int num3 = 0;
                    while (!flag)
                    {
                        int x = genRand.Next(1, Game1.maxTilesX);
                        int y = (int)(worldSurfaceHigh + 20.0);
                        int style = 0;
                        if (crimson)
                        {
                            style = 1;
                        }
                        Place3x2(x, y, 0x1a, style);
                        if (Game1.tile[x, y].type == 0x1a)
                        {
                            flag = true;
                        }
                        else
                        {
                            num3++;
                            if (num3 >= 0x2710)
                            {
                                flag = true;
                            }
                        }
                    }
                }
            });
            AddGenerationPass("Wet Jungle", delegate(GenerationProgress progress)
            {
                for (int i = 0; i < Game1.maxTilesX; i++)
                {
                    i2 = i;
                    for (int j = (int)WorldGen.worldSurfaceLow; j < (Game1.worldSurface - 1.0); j++)
                    {
                        if (Game1.tile[i2, j].active())
                        {
                            if (Game1.tile[i2, j].type == 60)
                            {
                                Game1.tile[i2, j - 1].liquid = 0xff;
                                Game1.tile[i2, j - 2].liquid = 0xff;
                            }
                            break;
                        }
                    }
                }
            });
            AddGenerationPass("Remove Water From Sand", delegate(GenerationProgress progress)
            {
                for (int i = 400; i < (Game1.maxTilesX - 400); i++)
                {
                    i2 = i;
                    for (int j = (int)WorldGen.worldSurfaceLow; j < (Game1.worldSurface - 1.0); j++)
                    {
                        if (Game1.tile[i2, j].active())
                        {
                            switch (Game1.tile[i2, j].type)
                            {
                                case 0x35:
                                case 0x18c:
                                case 0x18d:
                                case 0x194:
                                case 0x197:
                                    {
                                        int num4 = j;
                                        while (num4 > WorldGen.worldSurfaceLow)
                                        {
                                            num4--;
                                            Game1.tile[i2, num4].liquid = 0;
                                        }
                                        break;
                                    }
                            }
                            break;
                        }
                    }
                }
                Game1.tileSolid[0xc0] = true;
            });
            AddGenerationPass("Jungle Temple", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[70];
                bool flag = true;
                while (flag)
                {
                    int num;
                    int y = genRand.Next((int)Game1.rockLayer, Game1.maxTilesY - 500);
                    if (dungeonSide < 0)
                    {
                        num = genRand.Next((int)(Game1.maxTilesX * 0.6), (int)(Game1.maxTilesX * 0.85));
                    }
                    else
                    {
                        num = genRand.Next((int)(Game1.maxTilesX * 0.15), (int)(Game1.maxTilesX * 0.4));
                    }
                    if (Game1.tile[num, y].active() && (Game1.tile[num, y].type == 60))
                    {
                        flag = false;
                        makeTemple(num, y);
                    }
                }
            });
            AddGenerationPass("Hives", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x47];
                float num = Game1.maxTilesX / 0x1068;
                float num2 = 1 + genRand.Next((int)(5f * num), (int)(8f * num));
                int num3 = 0x2710;
                while ((num2 > 0f) && (num3 > 0))
                {
                    num3--;
                    Point origin = RandomWorldPoint(((int)(Game1.worldSurface + Game1.rockLayer)) >> 1, 20, 300, 20);
                    if (Biomes<HiveBiome>.Place(origin, structures))
                    {
                        num2--;
                        int num4 = genRand.Next(5);
                        int num5 = 0;
                        int num6 = 0x2710;
                        while ((num5 < num4) && (num6 > 0))
                        {
                            float num7 = (genRand.NextFloat() * 60f) + 30f;
                            float num8 = genRand.NextFloat() * 6.283185f;
                            int x = ((int)(Math.Cos((double)num8) * num7)) + origin.X;
                            int y = ((int)(Math.Sin((double)num8) * num7)) + origin.Y;
                            num6--;
                            if (((x > 50) && (x < (Game1.maxTilesX - 50))) && Biomes<HoneyPatchBiome>.Place(x, y, structures))
                            {
                                num5++;
                            }
                        }
                    }
                }
            });
            AddGenerationPass("Jungle Chests", delegate(GenerationProgress progress)
            {
                int num = genRand.Next(40, Game1.maxTilesX - 40);
                int num2 = genRand.Next(((int)(Game1.worldSurface + Game1.rockLayer)) / 2, Game1.maxTilesY - 400);
                float num3 = genRand.Next(7, 12);
                num3 *= Game1.maxTilesX / 0x1068;
                for (int i = 0; i < num3; i++)
                {
                    bool flag = true;
                    while (flag)
                    {
                        num = genRand.Next(40, (Game1.maxTilesX / 2) - 40);
                        if (dungeonSide < 0)
                        {
                            num += Game1.maxTilesX / 2;
                        }
                        num2 = genRand.Next(((int)(Game1.worldSurface + Game1.rockLayer)) / 2, Game1.maxTilesY - 400);
                        if (Game1.tile[num, num2].type == 60)
                        {
                            int num5 = 30;
                            flag = false;
                            for (int j = num - num5; j < (num + num5); j += 3)
                            {
                                for (int k = num2 - num5; k < (num2 + num5); k += 3)
                                {
                                    if (Game1.tile[j, k].active() && (((Game1.tile[j, k].type == 0xe1) || (Game1.tile[j, k].type == 0xe5)) || (((Game1.tile[j, k].type == 0xe2) || (Game1.tile[j, k].type == 0x77)) || (Game1.tile[j, k].type == 120))))
                                    {
                                        flag = false;
                                    }
                                    if ((Game1.tile[j, k].wall == 0x56) || (Game1.tile[j, k].wall == 0x57))
                                    {
                                        flag = false;
                                    }
                                }
                            }
                        }
                        if (!flag)
                        {
                            int num8 = genRand.Next(2, 4);
                            int num9 = genRand.Next(2, 4);
                            int num10 = 0;
                            switch (jungleHut)
                            {
                                case 0x77:
                                    num10 = 0x17;
                                    break;

                                case 120:
                                    num10 = 0x18;
                                    break;

                                case 0x9e:
                                    num10 = 0x2a;
                                    break;

                                case 0xaf:
                                    num10 = 0x2d;
                                    break;

                                case 0x2d:
                                    num10 = 10;
                                    break;
                            }
                            for (int m = (num - num8) - 1; m <= ((num + num8) + 1); m++)
                            {
                                for (int num12 = (num2 - num9) - 1; num12 <= ((num2 + num9) + 1); num12++)
                                {
                                    Game1.tile[m, num12].active(true);
                                    Game1.tile[m, num12].type = jungleHut;
                                    Game1.tile[m, num12].liquid = 0;
                                    Game1.tile[m, num12].lava(false);
                                }
                            }
                            for (int n = num - num8; n <= (num + num8); n++)
                            {
                                for (int num14 = num2 - num9; num14 <= (num2 + num9); num14++)
                                {
                                    Game1.tile[n, num14].active(false);
                                    Game1.tile[n, num14].wall = (byte)num10;
                                }
                            }
                            bool flag2 = false;
                            int num15 = 0;
                            while (!flag2 && (num15 < 100))
                            {
                                num15++;
                                int num16 = genRand.Next(num - num8, (num + num8) + 1);
                                int num17 = genRand.Next(num2 - num9, (num2 + num9) - 2);
                                PlaceTile(num16, num17, 4, true, false, -1, 3);
                                if (Game1.tile[num16, num17].type == 4)
                                {
                                    flag2 = true;
                                }
                            }
                            for (int num18 = (num - num8) - 1; num18 <= ((num + num8) + 1); num18++)
                            {
                                for (int num19 = (num2 + num9) - 2; num19 <= (num2 + num9); num19++)
                                {
                                    Game1.tile[num18, num19].active(false);
                                }
                            }
                            for (int num20 = (num - num8) - 1; num20 <= ((num + num8) + 1); num20++)
                            {
                                for (int num21 = (num2 + num9) - 2; num21 <= ((num2 + num9) - 1); num21++)
                                {
                                    Game1.tile[num20, num21].active(false);
                                }
                            }
                            for (int num22 = (num - num8) - 1; num22 <= ((num + num8) + 1); num22++)
                            {
                                int num23 = 4;
                                int num24 = (num2 + num9) + 2;
                                while ((!Game1.tile[num22, num24].active() && (num24 < Game1.maxTilesY)) && (num23 > 0))
                                {
                                    Game1.tile[num22, num24].active(true);
                                    Game1.tile[num22, num24].type = 0x3b;
                                    num24++;
                                    num23--;
                                }
                            }
                            num8 -= genRand.Next(1, 3);
                            for (int num25 = (num2 - num9) - 2; num8 > -1; num25--)
                            {
                                for (int num26 = (num - num8) - 1; num26 <= ((num + num8) + 1); num26++)
                                {
                                    Game1.tile[num26, num25].active(true);
                                    Game1.tile[num26, num25].type = jungleHut;
                                }
                                num8 -= genRand.Next(1, 3);
                            }
                            JChestX[numJChests] = num;
                            JChestY[numJChests] = num2;
                            numJChests++;
                        }
                    }
                }
                Game1.tileSolid[0x89] = false;
            });
            AddGenerationPass("Smooth World", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[60];
                for (int i = 20; i < (Game1.maxTilesX - 20); i++)
                {
                    float num2 = ((float)i) / ((float)Game1.maxTilesX);
                    progress.Set(num2);
                    for (int k = 20; k < (Game1.maxTilesY - 20); k++)
                    {
                        if ((((Game1.tile[i, k].type != 0x30) && (Game1.tile[i, k].type != 0x89)) && ((Game1.tile[i, k].type != 0xe8) && (Game1.tile[i, k].type != 0xbf))) && ((Game1.tile[i, k].type != 0x97) && (Game1.tile[i, k].type != 0x112)))
                        {
                            if (!Game1.tile[i, k - 1].active())
                            {
                                if (SolidTile(i, k) && TileID.Sets.CanBeClearedDuringGeneration[Game1.tile[i, k].type])
                                {
                                    if ((!Game1.tile[i - 1, k].halfBrick() && !Game1.tile[i + 1, k].halfBrick()) && ((Game1.tile[i - 1, k].slope() == 0) && (Game1.tile[i + 1, k].slope() == 0)))
                                    {
                                        if (SolidTile(i, k + 1))
                                        {
                                            if (((!SolidTile(i - 1, k) && !Game1.tile[i - 1, k + 1].halfBrick()) && (SolidTile(i - 1, k + 1) && SolidTile(i + 1, k))) && !Game1.tile[i + 1, k - 1].active())
                                            {
                                                if (genRand.Next(2) == 0)
                                                {
                                                    SlopeTile(i, k, 2);
                                                }
                                                else
                                                {
                                                    PoundTile(i, k);
                                                }
                                            }
                                            else if (((!SolidTile(i + 1, k) && !Game1.tile[i + 1, k + 1].halfBrick()) && (SolidTile(i + 1, k + 1) && SolidTile(i - 1, k))) && !Game1.tile[i - 1, k - 1].active())
                                            {
                                                if (genRand.Next(2) == 0)
                                                {
                                                    SlopeTile(i, k, 1);
                                                }
                                                else
                                                {
                                                    PoundTile(i, k);
                                                }
                                            }
                                            else if ((SolidTile(i + 1, k + 1) && SolidTile(i - 1, k + 1)) && (!Game1.tile[i + 1, k].active() && !Game1.tile[i - 1, k].active()))
                                            {
                                                PoundTile(i, k);
                                            }
                                            if (SolidTile(i, k))
                                            {
                                                if (((SolidTile(i - 1, k) && SolidTile(i + 1, k + 2)) && (!Game1.tile[i + 1, k].active() && !Game1.tile[i + 1, k + 1].active())) && !Game1.tile[i - 1, k - 1].active())
                                                {
                                                    KillTile(i, k, false, false, false);
                                                }
                                                else if (((SolidTile(i + 1, k) && SolidTile(i - 1, k + 2)) && (!Game1.tile[i - 1, k].active() && !Game1.tile[i - 1, k + 1].active())) && !Game1.tile[i + 1, k - 1].active())
                                                {
                                                    KillTile(i, k, false, false, false);
                                                }
                                                else if ((!Game1.tile[i - 1, k + 1].active() && !Game1.tile[i - 1, k].active()) && (SolidTile(i + 1, k) && SolidTile(i, k + 2)))
                                                {
                                                    if (genRand.Next(5) == 0)
                                                    {
                                                        KillTile(i, k, false, false, false);
                                                    }
                                                    else if (genRand.Next(5) == 0)
                                                    {
                                                        PoundTile(i, k);
                                                    }
                                                    else
                                                    {
                                                        SlopeTile(i, k, 2);
                                                    }
                                                }
                                                else if ((!Game1.tile[i + 1, k + 1].active() && !Game1.tile[i + 1, k].active()) && (SolidTile(i - 1, k) && SolidTile(i, k + 2)))
                                                {
                                                    if (genRand.Next(5) == 0)
                                                    {
                                                        KillTile(i, k, false, false, false);
                                                    }
                                                    else if (genRand.Next(5) == 0)
                                                    {
                                                        PoundTile(i, k);
                                                    }
                                                    else
                                                    {
                                                        SlopeTile(i, k, 1);
                                                    }
                                                }
                                            }
                                        }
                                        if ((SolidTile(i, k) && !Game1.tile[i - 1, k].active()) && !Game1.tile[i + 1, k].active())
                                        {
                                            KillTile(i, k, false, false, false);
                                        }
                                    }
                                }
                                else if ((!Game1.tile[i, k].active() && (Game1.tile[i, k + 1].type != 0x97)) && (Game1.tile[i, k + 1].type != 0x112))
                                {
                                    if ((((Game1.tile[i + 1, k].type != 190) && (Game1.tile[i + 1, k].type != 0x30)) && ((Game1.tile[i + 1, k].type != 0xe8) && SolidTile(i - 1, k + 1))) && ((SolidTile(i + 1, k) && !Game1.tile[i - 1, k].active()) && !Game1.tile[i + 1, k - 1].active()))
                                    {
                                        PlaceTile(i, k, Game1.tile[i, k + 1].type, false, false, -1, 0);
                                        if (genRand.Next(2) == 0)
                                        {
                                            SlopeTile(i, k, 2);
                                        }
                                        else
                                        {
                                            PoundTile(i, k);
                                        }
                                    }
                                    if ((((Game1.tile[i - 1, k].type != 190) && (Game1.tile[i - 1, k].type != 0x30)) && ((Game1.tile[i - 1, k].type != 0xe8) && SolidTile(i + 1, k + 1))) && ((SolidTile(i - 1, k) && !Game1.tile[i + 1, k].active()) && !Game1.tile[i - 1, k - 1].active()))
                                    {
                                        PlaceTile(i, k, Game1.tile[i, k + 1].type, false, false, -1, 0);
                                        if (genRand.Next(2) == 0)
                                        {
                                            SlopeTile(i, k, 1);
                                        }
                                        else
                                        {
                                            PoundTile(i, k);
                                        }
                                    }
                                }
                            }
                            else if (((!Game1.tile[i, k + 1].active() && (genRand.Next(2) == 0)) && (SolidTile(i, k) && !Game1.tile[i - 1, k].halfBrick())) && ((!Game1.tile[i + 1, k].halfBrick() && (Game1.tile[i - 1, k].slope() == 0)) && ((Game1.tile[i + 1, k].slope() == 0) && SolidTile(i, k - 1))))
                            {
                                if ((SolidTile(i - 1, k) && !SolidTile(i + 1, k)) && SolidTile(i - 1, k - 1))
                                {
                                    SlopeTile(i, k, 3);
                                }
                                else if ((SolidTile(i + 1, k) && !SolidTile(i - 1, k)) && SolidTile(i + 1, k - 1))
                                {
                                    SlopeTile(i, k, 4);
                                }
                            }
                        }
                    }
                }
                for (int j = 20; j < (Game1.maxTilesX - 20); j++)
                {
                    for (int m = 20; m < (Game1.maxTilesY - 20); m++)
                    {
                        if (((((genRand.Next(2) == 0) && !Game1.tile[j, m - 1].active()) && ((Game1.tile[j, m].type != 0x89) && (Game1.tile[j, m].type != 0x30))) && (((Game1.tile[j, m].type != 0xe8) && (Game1.tile[j, m].type != 0xbf)) && ((Game1.tile[j, m].type != 0x97) && (Game1.tile[j, m].type != 0x112)))) && ((((Game1.tile[j, m].type != 0x4b) && (Game1.tile[j, m].type != 0x4c)) && (SolidTile(j, m) && (Game1.tile[j - 1, m].type != 0x89))) && (Game1.tile[j + 1, m].type != 0x89)))
                        {
                            if ((SolidTile(j, m + 1) && SolidTile(j + 1, m)) && !Game1.tile[j - 1, m].active())
                            {
                                SlopeTile(j, m, 2);
                            }
                            if ((SolidTile(j, m + 1) && SolidTile(j - 1, m)) && !Game1.tile[j + 1, m].active())
                            {
                                SlopeTile(j, m, 1);
                            }
                        }
                        if ((Game1.tile[j, m].slope() == 1) && !SolidTile(j - 1, m))
                        {
                            SlopeTile(j, m, 0);
                            PoundTile(j, m);
                        }
                        if ((Game1.tile[j, m].slope() == 2) && !SolidTile(j + 1, m))
                        {
                            SlopeTile(j, m, 0);
                            PoundTile(j, m);
                        }
                    }
                }
                Game1.tileSolid[0x89] = true;
                Game1.tileSolid[190] = false;
                Game1.tileSolid[0xc0] = false;
            });
            AddGenerationPass("Settle Liquids", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x1b];
                Liquid.QuickWater(3, -1, -1);
                WaterCheck();
                int num = 0;
                Liquid.quickSettle = true;
                while (num < 10)
                {
                    int num2 = Liquid.numLiquid + LiquidBuffer.numLiquidBuffer;
                    num++;
                    float num3 = 0f;
                    while (Liquid.numLiquid > 0)
                    {
                        float num4 = ((float)(num2 - (Liquid.numLiquid + LiquidBuffer.numLiquidBuffer))) / ((float)num2);
                        if ((Liquid.numLiquid + LiquidBuffer.numLiquidBuffer) > num2)
                        {
                            num2 = Liquid.numLiquid + LiquidBuffer.numLiquidBuffer;
                        }
                        if (num4 > num3)
                        {
                            num3 = num4;
                        }
                        else
                        {
                            num4 = num3;
                        }
                        if (num == 1)
                        {
                            progress.Set((num4 / 3f) + 0.33f);
                        }
                        int num5 = 10;
                        if (num > num5)
                        {
                            num5 = num;
                        }
                        Liquid.UpdateLiquid();
                    }
                    WaterCheck();
                    progress.Set(((num * 0.1f) / 3f) + 0.66f);
                }
                Liquid.quickSettle = false;
                Game1.tileSolid[190] = true;
            });
            AddGenerationPass("Waterfalls", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x45];
                for (int i = 20; i < (Game1.maxTilesX - 20); i++)
                {
                    float num2 = ((float)i) / ((float)Game1.maxTilesX);
                    progress.Set(num2 * 0.5f);
                    for (int k = 20; k < (Game1.maxTilesY - 20); k++)
                    {
                        if (((SolidTile(i, k) && !Game1.tile[i - 1, k].active()) && (SolidTile(i, k + 1) && !Game1.tile[i + 1, k].active())) && ((Game1.tile[i - 1, k].liquid > 0) || (Game1.tile[i + 1, k].liquid > 0)))
                        {
                            bool flag = true;
                            int num4 = genRand.Next(8, 20);
                            int num5 = genRand.Next(8, 20);
                            num4 = k - num4;
                            num5 += k;
                            for (int m = num4; m <= num5; m++)
                            {
                                if (Game1.tile[i, m].halfBrick())
                                {
                                    flag = false;
                                }
                            }
                            if (((Game1.tile[i, k].type == 0x4b) || (Game1.tile[i, k].type == 0x4c)) && (genRand.Next(10) != 0))
                            {
                                flag = false;
                            }
                            if (flag)
                            {
                                PoundTile(i, k);
                            }
                        }
                    }
                }
                for (int j = 20; j < (Game1.maxTilesX - 20); j++)
                {
                    float num8 = ((float)j) / ((float)Game1.maxTilesX);
                    progress.Set((num8 * 0.5f) + 0.5f);
                    for (int n = 20; n < (Game1.maxTilesY - 20); n++)
                    {
                        if (((Game1.tile[j, n].type != 0x30) && (Game1.tile[j, n].type != 0xe8)) && (SolidTile(j, n) && SolidTile(j, n + 1)))
                        {
                            if ((!SolidTile(j + 1, n) && Game1.tile[j - 1, n].halfBrick()) && (Game1.tile[j - 2, n].liquid > 0))
                            {
                                PoundTile(j, n);
                            }
                            if ((!SolidTile(j - 1, n) && Game1.tile[j + 1, n].halfBrick()) && (Game1.tile[j + 2, n].liquid > 0))
                            {
                                PoundTile(j, n);
                            }
                        }
                    }
                }
            });
            AddGenerationPass("Ice", delegate(GenerationProgress progress)
            {
                for (int i = 10; i < (Game1.maxTilesX - 10); i++)
                {
                    for (int j = (int)Game1.worldSurface; j < (Game1.maxTilesY - 100); j++)
                    {
                        if ((Game1.tile[i, j].liquid > 0) && !Game1.tile[i, j].lava())
                        {
                            MakeWateryIceThing(i, j);
                        }
                    }
                }
                Game1.tileSolid[0xe2] = false;
                Game1.tileSolid[0xa2] = false;
            });
            AddGenerationPass("Wall Variety", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x4f];
                float num = ((float)(Game1.maxTilesX * Game1.maxTilesY)) / 5040000f;
                int num2 = (int)(300f * num);
                int num3 = num2;
                ShapeData data = new ShapeData();
                while (num2 > 0)
                {
                    progress.Set(1f - (((float)num2) / ((float)num3)));
                    Point point = RandomWorldPoint((int)worldSurface, 2, 190, 2);
                    Tile tile = Game1.tile[point.X, point.Y];
                    Tile tile2 = Game1.tile[point.X, point.Y - 1];
                    byte type = 0;
                    if ((tile.type == 0x3b) || (tile.type == 60))
                    {
                        type = (byte)(0xcc + genRand.Next(4));
                    }
                    else if ((tile.type == 1) && (tile2.wall == 0))
                    {
                        if (point.Y < rockLayer)
                        {
                            type = (byte)(0xc4 + genRand.Next(4));
                        }
                        else if (point.Y < lavaLine)
                        {
                            type = (byte)(0xd4 + genRand.Next(4));
                        }
                        else
                        {
                            type = (byte)(0xd0 + genRand.Next(4));
                        }
                    }
                    if ((tile.active() && (type != 0)) && !tile2.active())
                    {
                        bool foundInvalidTile = false;
                        bool flag = WorldUtils.Gen(new Point(point.X, point.Y - 1), new ShapeFloodFill(0x3e8), Actions.Chain(new GenAction[] { new Modifiers.IsNotSolid(), new Actions.Blank().Output(data), new Actions.ContinueWrapper(Actions.Chain(new GenAction[] { new Modifiers.IsTouching(true, new ushort[] { 60, 0x93, 0xa1, 0x18c, 0x18d }), new Actions.Custom(delegate (int x, int y, object[] args) {
                            foundInvalidTile = true;
                            return true;
                        }) })) }));
                        if (((data.Count > 50) && flag) && !foundInvalidTile)
                        {
                            //RnD : World
                            //WorldUtils.Gen(new Point(point.X, point.Y), new ModShapes.OuterOutline(data, true, true), 
                            //    new GameManager.World.Generation.Actions.PlaceWall(type, true));
                            num2--;
                        }
                        data.Clear();
                    }
                }
            });
            AddGenerationPass("Traps", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x22];
                for (int i = 0; i < ((int)(Game1.maxTilesX * 0.05)); i++)
                {
                    float num2 = (float)(((double)i) / (Game1.maxTilesX * 0.05));
                    progress.Set(num2);
                    for (int j = 0; j < 0x3e8; j++)
                    {
                        int num4 = genRand.Next(200, Game1.maxTilesX - 200);
                        int num5 = genRand.Next((int)Game1.worldSurface, Game1.maxTilesY - 300);
                        if ((Game1.tile[num4, num5].wall == 0) && placeTrap(num4, num5, -1))
                        {
                            break;
                        }
                    }
                }
            });
            AddGenerationPass("Life Crystals", delegate(GenerationProgress progress)
            {
                dub2 = Game1.maxTilesX / 0x1068;
                progress.Message = Lang.gen[0x1c];
                for (int i = 0; i < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 2E-05)); i++)
                {
                    float num2 = (float)(((double)i) / ((Game1.maxTilesX * Game1.maxTilesY) * 2E-05));
                    progress.Set(num2);
                    bool flag = false;
                    int num3 = 0;
                    while (!flag)
                    {
                        if (AddLifeCrystal(genRand.Next(40, Game1.maxTilesX - 40), genRand.Next((int)(worldSurfaceHigh + 20.0), Game1.maxTilesY - 300)))
                        {
                            flag = true;
                        }
                        else
                        {
                            num3++;
                            if (num3 >= 0x2710)
                            {
                                flag = true;
                            }
                        }
                    }
                }
                Game1.tileSolid[0xe1] = false;
            });
            AddGenerationPass("Statues", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x1d];
                int index = 0;
                int num2 = (int)((statueList.Length * 2) * dub2);
                for (int i = 0; i < num2; i++)
                {
                    if (index >= statueList.Length)
                    {
                        index = 0;
                    }
                    int x = statueList[index].X;
                    int y = statueList[index].Y;
                    float num6 = i / num2;
                    progress.Set(num6);
                    bool flag = false;
                    int num7 = 0;
                    while (!flag)
                    {
                        int num8 = genRand.Next(20, Game1.maxTilesX - 20);
                        int j = genRand.Next((int)(worldSurfaceHigh + 20.0), Game1.maxTilesY - 300);
                        while (!Game1.tile[num8, j].active())
                        {
                            j++;
                        }
                        j--;
                        PlaceTile(num8, j, x, true, true, -1, y);
                        if (Game1.tile[num8, j].active() && (Game1.tile[num8, j].type == x))
                        {
                            flag = true;
                            if (StatuesWithTraps.Contains(index))
                            {
                                PlaceStatueTrap(num8, j);
                            }
                            index++;
                        }
                        else
                        {
                            num7++;
                            if (num7 >= 0x2710)
                            {
                                flag = true;
                            }
                        }
                    }
                }
            });
            AddGenerationPass("Buried Chests", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[30];
                Game1.tileSolid[0xe2] = true;
                Game1.tileSolid[0xa2] = true;
                Game1.tileSolid[0xe1] = true;
                for (int i = 0; i < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 1.6E-05)); i++)
                {
                    float num2 = (float)(((double)i) / ((Game1.maxTilesX * Game1.maxTilesY) * 1.6E-05));
                    progress.Set(num2);
                    bool flag = false;
                    int num3 = 0;
                    while (!flag)
                    {
                        float num4 = genRand.Next((int)(5f * dub2), (int)((8f * dub2) + 1f));
                        int num5 = genRand.Next(20, Game1.maxTilesX - 20);
                        int num6 = genRand.Next((int)(worldSurfaceHigh + 20.0), Game1.maxTilesY - 230);
                        if (i <= num4)
                        {
                            num6 = genRand.Next(Game1.maxTilesY - 200, Game1.maxTilesY - 50);
                        }
                        int num7 = 0;
                        while (Game1.wallDungeon[Game1.tile[num5, num6].wall])
                        {
                            num7++;
                            num5 = genRand.Next(1, Game1.maxTilesX);
                            num6 = genRand.Next((int)(worldSurfaceHigh + 20.0), Game1.maxTilesY - 230);
                            if ((num7 < 0x3e8) && (i <= num4))
                            {
                                num6 = genRand.Next(Game1.maxTilesY - 200, Game1.maxTilesY - 50);
                            }
                        }
                        if (i > num4)
                        {
                            for (int k = 10; k > 0; k--)
                            {
                                int x = genRand.Next(80, Game1.maxTilesX - 80);
                                int y = genRand.Next((int)(worldSurfaceHigh + 20.0), Game1.maxTilesY - 230);
                                if (Biomes<CaveHouseBiome>.Place(x, y, structures))
                                {
                                    flag = true;
                                    break;
                                }
                            }
                        }
                        else if (AddBuriedChest(num5, num6, 0, false, -1))
                        {
                            flag = true;
                        }
                        num3++;
                        if (num3 >= 0x3e8)
                        {
                            flag = true;
                        }
                    }
                }
                int num11 = (int)((2f * (Game1.maxTilesX * Game1.maxTilesY)) / 5040000f);
                for (int j = 0x3e8; (j >= 0) && (num11 >= 0); j--)
                {
                    if (Biomes<CaveHouseBiome>.Place(RandomRectanglePoint(UndergroundDesertLocation), structures))
                    {
                        num11--;
                    }
                }
                Game1.tileSolid[0xe2] = false;
                Game1.tileSolid[0xa2] = false;
                Game1.tileSolid[0xe1] = false;
            });
            AddGenerationPass("Surface Chests", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x1f];
                for (int i = 0; i < ((int)(Game1.maxTilesX * 0.005)); i++)
                {
                    float num2 = (float)(((double)i) / (Game1.maxTilesX * 0.005));
                    progress.Set(num2);
                    bool flag = false;
                    int num3 = 0;
                    while (!flag)
                    {
                        int num4 = genRand.Next(300, Game1.maxTilesX - 300);
                        int j = genRand.Next((int)WorldGen.worldSurfaceLow, (int)Game1.worldSurface);
                        bool flag2 = false;
                        if ((Game1.tile[num4, j].wall == 2) && !Game1.tile[num4, j].active())
                        {
                            flag2 = true;
                        }
                        if (flag2 && AddBuriedChest(num4, j, 0, true, -1))
                        {
                            flag = true;
                        }
                        else
                        {
                            num3++;
                            if (num3 >= 0x7d0)
                            {
                                flag = true;
                            }
                        }
                    }
                }
            });
            AddGenerationPass("Jungle Chests Placement", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x20];
                for (int i = 0; i < numJChests; i++)
                {
                    float num2 = i / numJChests;
                    progress.Set(num2);
                    int nextJungleChestItem = GetNextJungleChestItem();
                    if (!AddBuriedChest(JChestX[i] + genRand.Next(2), JChestY[i], nextJungleChestItem, false, 10))
                    {
                        for (int j = JChestX[i] - 1; j <= (JChestX[i] + 1); j++)
                        {
                            for (int m = JChestY[i]; m <= (JChestY[i] + 2); m++)
                            {
                                KillTile(j, m, false, false, false);
                            }
                        }
                        for (int k = JChestX[i] - 1; k <= (JChestX[i] + 1); k++)
                        {
                            for (int n = JChestY[i]; n <= (JChestY[i] + 3); n++)
                            {
                                if (n < Game1.maxTilesY)
                                {
                                    Game1.tile[k, n].slope(0);
                                    Game1.tile[k, n].halfBrick(false);
                                }
                            }
                        }
                        AddBuriedChest(JChestX[i], JChestY[i], nextJungleChestItem, false, 10);
                    }
                }
            });
            AddGenerationPass("Water Chests", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x21];
                int num = 0;
                for (int i = 0; i < (9f * dub2); i++)
                {
                    bool flag;
                    int num7;
                    int num8;
                    float num3 = ((float)i) / (9f * dub2);
                    progress.Set(num3);
                    int contain = 0;
                    num++;
                    if (genRand.Next(15) == 0)
                    {
                        contain = 0x35f;
                    }
                    else
                    {
                        switch (num)
                        {
                            case 1:
                                contain = 0xba;
                                goto Label_006B;

                            case 2:
                                contain = 0x115;
                                goto Label_006B;
                        }
                        contain = 0xbb;
                        num = 0;
                    }
                Label_006B:
                    flag = false;
                    while (!flag)
                    {
                        int num5 = genRand.Next(1, Game1.maxTilesX);
                        int j = genRand.Next(1, Game1.maxTilesY - 200);
                        while ((Game1.tile[num5, j].liquid < 200) || Game1.tile[num5, j].lava())
                        {
                            num5 = genRand.Next(1, Game1.maxTilesX);
                            j = genRand.Next(1, Game1.maxTilesY - 200);
                        }
                        flag = AddBuriedChest(num5, j, contain, false, 0x11);
                    }
                    for (flag = false; !flag; flag = AddBuriedChest(num7, num8, contain, false, 0x11))
                    {
                        num7 = genRand.Next(1, Game1.maxTilesX);
                        for (num8 = genRand.Next((int)Game1.worldSurface, Game1.maxTilesY - 200); (Game1.tile[num7, num8].liquid < 200) || Game1.tile[num7, num8].lava(); num8 = genRand.Next(1, Game1.maxTilesY - 200))
                        {
                            num7 = genRand.Next(1, Game1.maxTilesX);
                        }
                    }
                }
            });
            AddGenerationPass("Spider Caves", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x40];
                maxTileCount = 0xdac;
                for (int i = 0; i < ((int)(Game1.maxTilesX * 0.005)); i++)
                {
                    float num2 = (float)(((double)i) / (Game1.maxTilesX * 0.005));
                    progress.Set(num2);
                    int num3 = 0;
                    int x = genRand.Next(200, Game1.maxTilesX - 200);
                    int y = genRand.Next(((int)(Game1.worldSurface + Game1.rockLayer)) / 2, Game1.maxTilesY - 230);
                    for (int j = countTiles(x, y, false, true); ((j >= 0xdac) || (j < 500)) && (num3 < 500); j = countTiles(x, y, false, true))
                    {
                        num3++;
                        x = genRand.Next(200, Game1.maxTilesX - 200);
                        y = genRand.Next(((int)Game1.rockLayer) + 30, Game1.maxTilesY - 230);
                    }
                    if (num3 < 500)
                    {
                        Spread.Spider(x, y);
                    }
                }
                Game1.tileSolid[0xa2] = true;
            });
            AddGenerationPass("Gem Caves", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x40];
                maxTileCount = 300;
                for (int i = 0; i < ((int)(Game1.maxTilesX * 0.003)); i++)
                {
                    float num2 = (float)(((double)i) / (Game1.maxTilesX * 0.003));
                    progress.Set(num2);
                    int num3 = 0;
                    int x = genRand.Next(200, Game1.maxTilesX - 200);
                    int y = genRand.Next(((int)Game1.rockLayer) + 30, Game1.maxTilesY - 230);
                    for (int j = countTiles(x, y, false, false); (((j >= 300) || (j < 50)) || (((lavaCount > 0) || (iceCount > 0)) || (rockCount == 0))) && (num3 < 0x3e8); j = countTiles(x, y, false, false))
                    {
                        num3++;
                        x = genRand.Next(200, Game1.maxTilesX - 200);
                        y = genRand.Next(((int)Game1.rockLayer) + 30, Game1.maxTilesY - 230);
                    }
                    if (num3 < 0x3e8)
                    {
                        gemCave(x, y);
                    }
                }
            });
            AddGenerationPass("Moss", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x3d];
                randMoss();
                maxTileCount = 0x9c4;
                for (int i = 0; i < ((int)(Game1.maxTilesX * 0.01)); i++)
                {
                    float num2 = (float)(((double)i) / (Game1.maxTilesX * 0.01));
                    progress.Set(num2);
                    int num3 = 0;
                    int x = genRand.Next(200, Game1.maxTilesX - 200);
                    int y = genRand.Next(((int)(Game1.worldSurface + Game1.rockLayer)) / 2, waterLine);
                    for (int m = countTiles(x, y, false, false); (((m >= 0x9c4) || (m < 10)) || (((lavaCount > 0) || (iceCount > 0)) || (rockCount == 0))) && (num3 < 0x3e8); m = countTiles(x, y, false, false))
                    {
                        num3++;
                        x = genRand.Next(200, Game1.maxTilesX - 200);
                        y = genRand.Next(((int)Game1.rockLayer) + 30, Game1.maxTilesY - 230);
                    }
                    if (num3 < 0x3e8)
                    {
                        setMoss(x, y);
                        Spread.Moss(x, y);
                    }
                }
                for (int j = 0; j < Game1.maxTilesX; j++)
                {
                    int num8 = genRand.Next(50, Game1.maxTilesX - 50);
                    int num9 = genRand.Next(((int)(Game1.worldSurface + Game1.rockLayer)) / 2, lavaLine);
                    if (Game1.tile[num8, num9].type == 1)
                    {
                        setMoss(num8, num9);
                        Game1.tile[num8, num9].type = mossTile;
                    }
                }
                float num10 = Game1.maxTilesX * 0.05f;
                while (num10 > 0f)
                {
                    int num11 = genRand.Next(50, Game1.maxTilesX - 50);
                    int num12 = genRand.Next(((int)(Game1.worldSurface + Game1.rockLayer)) / 2, lavaLine);
                    if ((Game1.tile[num11, num12].type == 1) && ((!Game1.tile[num11 - 1, num12].active() || !Game1.tile[num11 + 1, num12].active()) || (!Game1.tile[num11, num12 - 1].active() || !Game1.tile[num11, num12 + 1].active())))
                    {
                        setMoss(num11, num12);
                        Game1.tile[num11, num12].type = mossTile;
                        num10--;
                    }
                }
                num10 = Game1.maxTilesX * 0.065f;
                while (num10 > 0f)
                {
                    int num13 = genRand.Next(50, Game1.maxTilesX - 50);
                    int num14 = genRand.Next(waterLine, Game1.maxTilesY - 200);
                    if ((Game1.tile[num13, num14].type == 1) && ((!Game1.tile[num13 - 1, num14].active() || !Game1.tile[num13 + 1, num14].active()) || (!Game1.tile[num13, num14 - 1].active() || !Game1.tile[num13, num14 + 1].active())))
                    {
                        int num15 = 0x19;
                        int num16 = 0;
                        for (int n = num13 - num15; n < (num13 + num15); n++)
                        {
                            for (int num18 = num14 - num15; num18 < (num14 + num15); num18++)
                            {
                                if ((Game1.tile[n, num18].liquid > 0) && Game1.tile[n, num18].lava())
                                {
                                    num16++;
                                }
                            }
                        }
                        if (num16 > 20)
                        {
                            Game1.tile[num13, num14].type = 0x17d;
                            num10--;
                        }
                        else
                        {
                            num10 -= 0.002f;
                        }
                    }
                }
                for (int k = 0; k < Game1.maxTilesX; k++)
                {
                    for (int num20 = 0; num20 < Game1.maxTilesY; num20++)
                    {
                        if (Game1.tile[k, num20].active() && Game1.tileMoss[Game1.tile[k, num20].type])
                        {
                            for (int num21 = 0; num21 < 4; num21++)
                            {
                                int num22 = k;
                                int num23 = num20;
                                switch (num21)
                                {
                                    case 0:
                                        num22--;
                                        break;

                                    case 1:
                                        num22++;
                                        break;

                                    case 2:
                                        num23--;
                                        break;

                                    case 3:
                                        num23++;
                                        break;
                                }
                                try
                                {
                                    grassSpread = 0;
                                    SpreadGrass(num22, num23, 1, Game1.tile[k, num20].type, true, 0);
                                }
                                catch
                                {
                                    grassSpread = 0;
                                    SpreadGrass(num22, num23, 1, Game1.tile[k, num20].type, false, 0);
                                }
                            }
                        }
                    }
                }
            });
            AddGenerationPass("Temple", delegate(GenerationProgress progress)
            {
                Game1.tileSolid[0xa2] = false;
                Game1.tileSolid[0xe2] = true;
                templePart2();
                Game1.tileSolid[0xe8] = false;
            });
            AddGenerationPass("Ice Walls", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x3f];
                maxTileCount = 0x5dc;
                for (int i = 0; i < ((int)(Game1.maxTilesX * 0.04)); i++)
                {
                    float num2 = (float)(((double)i) / (Game1.maxTilesX * 0.04));
                    progress.Set(num2 * 0.66f);
                    int num3 = 0;
                    int x = genRand.Next(200, Game1.maxTilesX - 200);
                    int y = genRand.Next(((int)(Game1.worldSurface + Game1.rockLayer)) / 2, Game1.maxTilesY - 220);
                    for (int k = countTiles(x, y, false, true); ((k >= 0x5dc) || (k < 10)) && (num3 < 500); k = countTiles(x, y, false, true))
                    {
                        num3++;
                        x = genRand.Next(200, Game1.maxTilesX - 200);
                        y = genRand.Next(((int)(Game1.worldSurface + Game1.rockLayer)) / 2, Game1.maxTilesY - 220);
                    }
                    if (num3 < 500)
                    {
                        int wallType = genRand.Next(2);
                        if (iceCount > 0)
                        {
                            switch (wallType)
                            {
                                case 0:
                                    wallType = 40;
                                    break;

                                case 1:
                                    wallType = 0x47;
                                    break;
                            }
                        }
                        else if (lavaCount > 0)
                        {
                            wallType = 0x4f;
                        }
                        else
                        {
                            wallType = genRand.Next(4);
                            switch (wallType)
                            {
                                case 0:
                                    wallType = 0x3b;
                                    break;

                                case 1:
                                    wallType = 0x3d;
                                    break;

                                case 2:
                                    wallType = 170;
                                    break;

                                case 3:
                                    wallType = 0xab;
                                    break;
                            }
                        }
                        Spread.Wall(x, y, wallType);
                    }
                }
                maxTileCount = 0x5dc;
                for (int j = 0; j < ((int)(Game1.maxTilesX * 0.02)); j++)
                {
                    float num9 = (float)(((double)j) / (Game1.maxTilesX * 0.02));
                    progress.Set((num9 * 0.34f) + 0.66f);
                    int num10 = 0;
                    int num11 = genRand.Next(200, Game1.maxTilesX - 200);
                    int num12 = genRand.Next((int)Game1.worldSurface, lavaLine);
                    int num13 = 0;
                    if (Game1.tile[num11, num12].wall == 0x40)
                    {
                        num13 = countTiles(num11, num12, true, false);
                    }
                    while (((num13 >= 0x5dc) || (num13 < 10)) && (num10 < 0x3e8))
                    {
                        num10++;
                        num11 = genRand.Next(200, Game1.maxTilesX - 200);
                        num12 = genRand.Next((int)Game1.worldSurface, lavaLine);
                        if (!Game1.wallHouse[Game1.tile[num11, num12].wall])
                        {
                            if (Game1.tile[num11, num12].wall == 0x40)
                            {
                                num13 = countTiles(num11, num12, true, false);
                            }
                            else
                            {
                                num13 = 0;
                            }
                        }
                    }
                    if (num10 < 0x3e8)
                    {
                        Spread.Wall2(num11, num12, 15);
                    }
                }
            });
            AddGenerationPass("Jungle Trees", delegate(GenerationProgress progress)
            {
                for (int i = 0; i < Game1.maxTilesX; i++)
                {
                    for (int j = ((int)Game1.worldSurface) - 1; j < (Game1.maxTilesY - 350); j++)
                    {
                        if (genRand.Next(10) == 0)
                        {
                            GrowUndergroundTree(i, j);
                        }
                    }
                }
            });
            AddGenerationPass("Floating Island Houses", delegate(GenerationProgress progress)
            {
                for (int i = 0; i < numIslandHouses; i++)
                {
                    if (!skyLake[i])
                    {
                        IslandHouse(fihX[i], fihY[i]);
                    }
                }
            });
            AddGenerationPass("Quick Cleanup", delegate(GenerationProgress progress)
            {
                Game1.tileSolid[0x89] = false;
                Game1.tileSolid[130] = false;
                for (int i = 20; i < (Game1.maxTilesX - 20); i++)
                {
                    for (int j = 20; j < (Game1.maxTilesY - 20); j++)
                    {
                        if ((Game1.tile[i, j].type != 0x13) && TileID.Sets.CanBeClearedDuringGeneration[Game1.tile[i, j].type])
                        {
                            if (Game1.tile[i, j].topSlope() || Game1.tile[i, j].halfBrick())
                            {
                                if (!SolidTile(i, j + 1))
                                {
                                    Game1.tile[i, j].active(false);
                                }
                                if ((Game1.tile[i + 1, j].type == 0x89) || (Game1.tile[i - 1, j].type == 0x89))
                                {
                                    Game1.tile[i, j].active(false);
                                }
                            }
                            else if (Game1.tile[i, j].bottomSlope())
                            {
                                if (!SolidTile(i, j - 1))
                                {
                                    Game1.tile[i, j].active(false);
                                }
                                if ((Game1.tile[i + 1, j].type == 0x89) || (Game1.tile[i - 1, j].type == 0x89))
                                {
                                    Game1.tile[i, j].active(false);
                                }
                            }
                        }
                    }
                }
            });
            AddGenerationPass("Pots", delegate(GenerationProgress progress)
            {
                Game1.tileSolid[0x89] = true;
                Game1.tileSolid[130] = true;
                progress.Message = Lang.gen[0x23];
                for (int i = 0; i < ((int)((Game1.maxTilesX * Game1.maxTilesY) * 0.0008)); i++)
                {
                    float num2 = (float)(((double)i) / ((Game1.maxTilesX * Game1.maxTilesY) * 0.0008));
                    progress.Set(num2);
                    bool flag = false;
                    int num3 = 0;
                    while (!flag)
                    {
                        int worldSurfaceLow = genRand.Next((int)worldSurfaceHigh, Game1.maxTilesY - 10);
                        if (num2 > 0.93)
                        {
                            worldSurfaceLow = Game1.maxTilesY - 150;
                        }
                        else if (num2 > 0.75)
                        {
                            worldSurfaceLow = (int)WorldGen.worldSurfaceLow;
                        }
                        int x = genRand.Next(1, Game1.maxTilesX);
                        bool flag2 = false;
                        for (int j = worldSurfaceLow; j < Game1.maxTilesY; j++)
                        {
                            if (!flag2)
                            {
                                if ((Game1.tile[x, j].active() && Game1.tileSolid[Game1.tile[x, j].type]) && !Game1.tile[x, j - 1].lava())
                                {
                                    flag2 = true;
                                }
                            }
                            else
                            {
                                int style = genRand.Next(0, 4);
                                int type = 0;
                                if (j < (Game1.maxTilesY - 5))
                                {
                                    type = Game1.tile[x, j + 1].type;
                                }
                                if (((type == 0x93) || (type == 0xa1)) || (type == 0xa2))
                                {
                                    style = genRand.Next(4, 7);
                                }
                                if (type == 60)
                                {
                                    style = genRand.Next(7, 10);
                                }
                                if (Game1.wallDungeon[Game1.tile[x, j].wall])
                                {
                                    style = genRand.Next(10, 13);
                                }
                                if (((type == 0x29) || (type == 0x2b)) || (type == 0x2c))
                                {
                                    style = genRand.Next(10, 13);
                                }
                                if (((type == 0x16) || (type == 0x17)) || (type == 0x19))
                                {
                                    style = genRand.Next(0x10, 0x13);
                                }
                                if (((type == 0xc7) || (type == 0xcb)) || ((type == 0xcc) || (type == 200)))
                                {
                                    style = genRand.Next(0x16, 0x19);
                                }
                                switch (type)
                                {
                                    case 0x16f:
                                        style = genRand.Next(0x1f, 0x22);
                                        break;

                                    case 0xe2:
                                        style = genRand.Next(0x1c, 0x1f);
                                        break;
                                }
                                if (j > (Game1.maxTilesY - 200))
                                {
                                    style = genRand.Next(13, 0x10);
                                }
                                if (PlacePot(x, j, 0x1c, style))
                                {
                                    flag = true;
                                    continue;
                                }
                                num3++;
                                if (num3 >= 0x2710)
                                {
                                    flag = true;
                                    continue;
                                }
                            }
                        }
                    }
                }
            });
            AddGenerationPass("Hellforge", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x24];
                for (int i = 0; i < (Game1.maxTilesX / 200); i++)
                {
                    float num2 = i / (Game1.maxTilesX / 200);
                    progress.Set(num2);
                    bool flag = false;
                    int num3 = 0;
                    while (!flag)
                    {
                        int num4 = genRand.Next(1, Game1.maxTilesX);
                        int j = genRand.Next(Game1.maxTilesY - 250, Game1.maxTilesY - 5);
                        try
                        {
                            if ((Game1.tile[num4, j].wall == 13) || (Game1.tile[num4, j].wall == 14))
                            {
                                while (!Game1.tile[num4, j].active())
                                {
                                    j++;
                                }
                                j--;
                                PlaceTile(num4, j, 0x4d, false, false, -1, 0);
                                if (Game1.tile[num4, j].type == 0x4d)
                                {
                                    flag = true;
                                }
                                else
                                {
                                    num3++;
                                    if (num3 >= 0x2710)
                                    {
                                        flag = true;
                                    }
                                }
                            }
                            continue;
                        }
                        catch
                        {
                            continue;
                        }
                    }
                }
            });
            AddGenerationPass("Spreading Grass", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x25];
                for (int i = 0; i < Game1.maxTilesX; i++)
                {
                    i2 = i;
                    bool flag = true;
                    for (int j = 0; j < (Game1.worldSurface - 1.0); j++)
                    {
                        if (Game1.tile[i2, j].active())
                        {
                            if (flag && (Game1.tile[i2, j].type == 0))
                            {
                                try
                                {
                                    grassSpread = 0;
                                    SpreadGrass(i2, j, 0, 2, true, 0);
                                }
                                catch
                                {
                                    grassSpread = 0;
                                    SpreadGrass(i2, j, 0, 2, false, 0);
                                }
                            }
                            if (j > worldSurfaceHigh)
                            {
                                break;
                            }
                            flag = false;
                        }
                        else if (Game1.tile[i2, j].wall == 0)
                        {
                            flag = true;
                        }
                    }
                }
            });
            AddGenerationPass("Piles", delegate(GenerationProgress progress)
            {
                Game1.tileSolid[190] = false;
                Game1.tileSolid[0xc4] = false;
                Game1.tileSolid[0xbd] = false;
                Game1.tileSolid[0xca] = false;
                for (int i = 0; i < (Game1.maxTilesX * 0.06); i++)
                {
                    bool flag = false;
                    while (!flag)
                    {
                        int num2 = genRand.Next(0x19, Game1.maxTilesX - 0x19);
                        int num3 = genRand.Next((int)Game1.worldSurface, Game1.maxTilesY - 300);
                        if (!Game1.tile[num2, num3].active())
                        {
                            int type = 0xba;
                            while (!Game1.tile[num2, num3 + 1].active() && (num3 < (Game1.maxTilesY - 5)))
                            {
                                num3++;
                            }
                            int style = genRand.Next(0x16);
                            if ((style >= 0x10) && (style <= 0x16))
                            {
                                style = genRand.Next(0x16);
                            }
                            if ((((Game1.tile[num2, num3 + 1].type == 0) || (Game1.tile[num2, num3 + 1].type == 1)) || Game1.tileMoss[Game1.tile[num2, num3 + 1].type]) && (genRand.Next(5) == 0))
                            {
                                style = genRand.Next(0x17, 0x1d);
                                type = 0xbb;
                            }
                            if ((((num3 > (Game1.maxTilesY - 300)) || Game1.wallDungeon[Game1.tile[num2, num3].wall]) || ((Game1.tile[num2, num3 + 1].type == 30) || (Game1.tile[num2, num3 + 1].type == 0x13))) || ((Game1.tile[num2, num3 + 1].type == 0x19) || (Game1.tile[num2, num3 + 1].type == 0xcb)))
                            {
                                style = genRand.Next(7);
                                type = 0xba;
                            }
                            if (((Game1.tile[num2, num3 + 1].type == 0x93) || (Game1.tile[num2, num3 + 1].type == 0xa1)) || (Game1.tile[num2, num3 + 1].type == 0xa2))
                            {
                                style = genRand.Next(0x1a, 0x20);
                                type = 0xba;
                            }
                            if (Game1.tile[num2, num3 + 1].type == 60)
                            {
                                type = 0xbb;
                                style = genRand.Next(6);
                            }
                            if (((Game1.tile[num2, num3 + 1].type == 0x39) || (Game1.tile[num2, num3 + 1].type == 0x3a)) && (genRand.Next(3) < 2))
                            {
                                type = 0xbb;
                                style = genRand.Next(6, 9);
                            }
                            if (Game1.tile[num2, num3 + 1].type == 0xe2)
                            {
                                type = 0xbb;
                                style = genRand.Next(0x12, 0x17);
                            }
                            if (Game1.tile[num2, num3 + 1].type == 70)
                            {
                                style = genRand.Next(0x20, 0x23);
                                type = 0xba;
                            }
                            if (((type == 0xba) && (style >= 7)) && ((style <= 15) && (genRand.Next(0x4b) == 0)))
                            {
                                type = 0xbb;
                                style = 0x11;
                            }
                            if (Game1.wallDungeon[Game1.tile[num2, num3].wall] && (genRand.Next(3) != 0))
                            {
                                flag = true;
                            }
                            else
                            {
                                PlaceTile(num2, num3, type, true, false, -1, style);
                                if ((Game1.tile[num2, num3].type == 0xba) || (Game1.tile[num2, num3].type == 0xbb))
                                {
                                    flag = true;
                                }
                                if ((flag && (type == 0xba)) && (style <= 7))
                                {
                                    int num6 = genRand.Next(1, 5);
                                    for (int num7 = 0; num7 < num6; num7++)
                                    {
                                        int num8 = num2 + genRand.Next(-10, 11);
                                        int num9 = num3 - genRand.Next(5);
                                        if (!Game1.tile[num8, num9].active())
                                        {
                                            while (!Game1.tile[num8, num9 + 1].active() && (num9 < (Game1.maxTilesY - 5)))
                                            {
                                                num9++;
                                            }
                                            int x = genRand.Next(12, 0x24);
                                            PlaceSmallPile(num8, num9, x, 0, 0xb9);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                for (int j = 0; j < (Game1.maxTilesX * 0.01); j++)
                {
                    bool flag2 = false;
                    while (!flag2)
                    {
                        int num12 = genRand.Next(0x19, Game1.maxTilesX - 0x19);
                        int num13 = genRand.Next(Game1.maxTilesY - 300, Game1.maxTilesY - 10);
                        if (!Game1.tile[num12, num13].active())
                        {
                            int num14 = 0xba;
                            while (!Game1.tile[num12, num13 + 1].active() && (num13 < (Game1.maxTilesY - 5)))
                            {
                                num13++;
                            }
                            int num15 = genRand.Next(0x16);
                            if ((num15 >= 0x10) && (num15 <= 0x16))
                            {
                                num15 = genRand.Next(0x16);
                            }
                            if (((num13 > (Game1.maxTilesY - 300)) || Game1.wallDungeon[Game1.tile[num12, num13].wall]) || ((Game1.tile[num12, num13 + 1].type == 30) || (Game1.tile[num12, num13 + 1].type == 0x13)))
                            {
                                num15 = genRand.Next(7);
                            }
                            if (((Game1.tile[num12, num13 + 1].type == 0x39) || (Game1.tile[num12, num13 + 1].type == 0x3a)) && (genRand.Next(3) < 2))
                            {
                                num14 = 0xbb;
                                num15 = genRand.Next(6, 9);
                            }
                            if (((Game1.tile[num12, num13 + 1].type == 0x93) || (Game1.tile[num12, num13 + 1].type == 0xa1)) || (Game1.tile[num12, num13 + 1].type == 0xa2))
                            {
                                num15 = genRand.Next(0x1a, 0x20);
                            }
                            PlaceTile(num12, num13, num14, true, false, -1, num15);
                            if ((Game1.tile[num12, num13].type == 0xba) || (Game1.tile[num12, num13].type == 0xbb))
                            {
                                flag2 = true;
                            }
                            if ((flag2 && (num14 == 0xba)) && (num15 <= 7))
                            {
                                int num16 = genRand.Next(1, 5);
                                for (int num17 = 0; num17 < num16; num17++)
                                {
                                    int num18 = num12 + genRand.Next(-10, 11);
                                    int num19 = num13 - genRand.Next(5);
                                    if (!Game1.tile[num18, num19].active())
                                    {
                                        while (!Game1.tile[num18, num19 + 1].active() && (num19 < (Game1.maxTilesY - 5)))
                                        {
                                            num19++;
                                        }
                                        int num20 = genRand.Next(12, 0x24);
                                        PlaceSmallPile(num18, num19, num20, 0, 0xb9);
                                    }
                                }
                            }
                        }
                    }
                }
                for (int k = 0; k < (Game1.maxTilesX * 0.003); k++)
                {
                    bool flag3 = false;
                    while (!flag3)
                    {
                        int num22 = 0xba;
                        int num23 = genRand.Next(0x19, Game1.maxTilesX - 0x19);
                        int num24 = genRand.Next(10, (int)Game1.worldSurface);
                        if (!Game1.tile[num23, num24].active())
                        {
                            while (!Game1.tile[num23, num24 + 1].active() && (num24 < (Game1.maxTilesY - 5)))
                            {
                                num24++;
                            }
                            int num25 = genRand.Next(7, 13);
                            if ((((num24 > (Game1.maxTilesY - 300)) || Game1.wallDungeon[Game1.tile[num23, num24].wall]) || ((Game1.tile[num23, num24 + 1].type == 30) || (Game1.tile[num23, num24 + 1].type == 0x13))) || (((Game1.tile[num23, num24 + 1].type == 0x35) || (Game1.tile[num23, num24 + 1].type == 0x19)) || (Game1.tile[num23, num24 + 1].type == 0xcb)))
                            {
                                num25 = -1;
                            }
                            if (((Game1.tile[num23, num24 + 1].type == 0x93) || (Game1.tile[num23, num24 + 1].type == 0xa1)) || (Game1.tile[num23, num24 + 1].type == 0xa2))
                            {
                                num25 = genRand.Next(0x1a, 0x20);
                            }
                            if (((Game1.tile[num23, num24 + 1].type == 2) || (Game1.tile[num23 - 1, num24 + 1].type == 2)) || (Game1.tile[num23 + 1, num24 + 1].type == 2))
                            {
                                num22 = 0xbb;
                                num25 = genRand.Next(14, 0x11);
                            }
                            if ((Game1.tile[num23, num24 + 1].type == 0x97) || (Game1.tile[num23, num24 + 1].type == 0x112))
                            {
                                num22 = 0xba;
                                num25 = genRand.Next(7);
                            }
                            if (num25 >= 0)
                            {
                                PlaceTile(num23, num24, num22, true, false, -1, num25);
                            }
                            if (Game1.tile[num23, num24].type == num22)
                            {
                                flag3 = true;
                            }
                        }
                    }
                }
                for (int m = 0; m < (Game1.maxTilesX * 0.0035); m++)
                {
                    bool flag4 = false;
                    while (!flag4)
                    {
                        int num27 = genRand.Next(0x19, Game1.maxTilesX - 0x19);
                        int num28 = genRand.Next(10, (int)Game1.worldSurface);
                        if (!Game1.tile[num27, num28].active() && (Game1.tile[num27, num28].wall > 0))
                        {
                            int num29 = 0xba;
                            while (!Game1.tile[num27, num28 + 1].active() && (num28 < (Game1.maxTilesY - 5)))
                            {
                                num28++;
                            }
                            int num30 = genRand.Next(7, 13);
                            if (((num28 > (Game1.maxTilesY - 300)) || Game1.wallDungeon[Game1.tile[num27, num28].wall]) || ((Game1.tile[num27, num28 + 1].type == 30) || (Game1.tile[num27, num28 + 1].type == 0x13)))
                            {
                                num30 = -1;
                            }
                            if (Game1.tile[num27, num28 + 1].type == 0x19)
                            {
                                num30 = genRand.Next(7);
                            }
                            if (((Game1.tile[num27, num28 + 1].type == 0x93) || (Game1.tile[num27, num28 + 1].type == 0xa1)) || (Game1.tile[num27, num28 + 1].type == 0xa2))
                            {
                                num30 = genRand.Next(0x1a, 0x20);
                            }
                            if (((Game1.tile[num27, num28 + 1].type == 2) || (Game1.tile[num27 - 1, num28 + 1].type == 2)) || (Game1.tile[num27 + 1, num28 + 1].type == 2))
                            {
                                num29 = 0xbb;
                                num30 = genRand.Next(14, 0x11);
                            }
                            if ((Game1.tile[num27, num28 + 1].type == 0x97) || (Game1.tile[num27, num28 + 1].type == 0x112))
                            {
                                num29 = 0xba;
                                num30 = genRand.Next(7);
                            }
                            if (num30 >= 0)
                            {
                                PlaceTile(num27, num28, num29, true, false, -1, num30);
                            }
                            if (Game1.tile[num27, num28].type == num29)
                            {
                                flag4 = true;
                            }
                            if (flag4 && (num30 <= 7))
                            {
                                int num31 = genRand.Next(1, 5);
                                for (int num32 = 0; num32 < num31; num32++)
                                {
                                    int num33 = num27 + genRand.Next(-10, 11);
                                    int num34 = num28 - genRand.Next(5);
                                    if (!Game1.tile[num33, num34].active())
                                    {
                                        while (!Game1.tile[num33, num34 + 1].active() && (num34 < (Game1.maxTilesY - 5)))
                                        {
                                            num34++;
                                        }
                                        int num35 = genRand.Next(12, 0x24);
                                        PlaceSmallPile(num33, num34, num35, 0, 0xb9);
                                    }
                                }
                            }
                        }
                    }
                }
                for (int n = 0; n < (Game1.maxTilesX * 0.6); n++)
                {
                    bool flag5 = false;
                    while (!flag5)
                    {
                        int num37 = genRand.Next(0x19, Game1.maxTilesX - 0x19);
                        int num38 = genRand.Next((int)Game1.worldSurface, Game1.maxTilesY - 20);
                        if ((Game1.tile[num37, num38].wall == 0x57) && (genRand.Next(2) == 0))
                        {
                            num37 = genRand.Next(0x19, Game1.maxTilesX - 0x19);
                            num38 = genRand.Next((int)Game1.worldSurface, Game1.maxTilesY - 20);
                        }
                        if (!Game1.tile[num37, num38].active())
                        {
                            while (!Game1.tile[num37, num38 + 1].active() && (num38 < (Game1.maxTilesY - 5)))
                            {
                                num38++;
                            }
                            int y = genRand.Next(2);
                            int num40 = genRand.Next(0x24);
                            if ((num40 >= 0x1c) && (num40 <= 0x23))
                            {
                                num40 = genRand.Next(0x24);
                            }
                            if (y == 1)
                            {
                                num40 = genRand.Next(0x19);
                                if ((num40 >= 0x10) && (num40 <= 0x18))
                                {
                                    num40 = genRand.Next(0x19);
                                }
                            }
                            if (num38 > (Game1.maxTilesY - 300))
                            {
                                switch (y)
                                {
                                    case 0:
                                        num40 = genRand.Next(12, 0x1c);
                                        break;

                                    case 1:
                                        num40 = genRand.Next(6, 0x10);
                                        break;
                                }
                            }
                            if (((Game1.wallDungeon[Game1.tile[num37, num38].wall] || (Game1.tile[num37, num38 + 1].type == 30)) || ((Game1.tile[num37, num38 + 1].type == 0x13) || (Game1.tile[num37, num38 + 1].type == 0x19))) || ((Game1.tile[num37, num38 + 1].type == 0xcb) || (Game1.tile[num37, num38].wall == 0x57)))
                            {
                                if ((y == 0) && (num40 < 12))
                                {
                                    num40 += 12;
                                }
                                if ((y == 1) && (num40 < 6))
                                {
                                    num40 += 6;
                                }
                                if ((y == 1) && (num40 >= 0x11))
                                {
                                    num40 -= 10;
                                }
                            }
                            if (((Game1.tile[num37, num38 + 1].type == 0x93) || (Game1.tile[num37, num38 + 1].type == 0xa1)) || (Game1.tile[num37, num38 + 1].type == 0xa2))
                            {
                                if ((y == 0) && (num40 < 12))
                                {
                                    num40 += 0x24;
                                }
                                if ((y == 1) && (num40 >= 20))
                                {
                                    num40 += 6;
                                }
                                if ((y == 1) && (num40 < 6))
                                {
                                    num40 += 0x19;
                                }
                            }
                            if ((Game1.tile[num37, num38 + 1].type == 0x97) || (Game1.tile[num37, num38 + 1].type == 0x112))
                            {
                                switch (y)
                                {
                                    case 0:
                                        num40 = genRand.Next(12, 0x1c);
                                        break;

                                    case 1:
                                        num40 = genRand.Next(12, 0x13);
                                        break;
                                }
                            }
                            if (Game1.wallDungeon[Game1.tile[num37, num38].wall] && (genRand.Next(3) != 0))
                            {
                                flag5 = true;
                            }
                            else
                            {
                                flag5 = PlaceSmallPile(num37, num38, num40, y, 0xb9);
                            }
                            if ((flag5 && (y == 1)) && ((num40 >= 6) && (num40 <= 15)))
                            {
                                int num41 = genRand.Next(1, 5);
                                for (int num42 = 0; num42 < num41; num42++)
                                {
                                    int num43 = num37 + genRand.Next(-10, 11);
                                    int num44 = num38 - genRand.Next(5);
                                    if (!Game1.tile[num43, num44].active())
                                    {
                                        while (!Game1.tile[num43, num44 + 1].active() && (num44 < (Game1.maxTilesY - 5)))
                                        {
                                            num44++;
                                        }
                                        int num45 = genRand.Next(12, 0x24);
                                        PlaceSmallPile(num43, num44, num45, 0, 0xb9);
                                    }
                                }
                            }
                        }
                    }
                }
                for (int num46 = 0; num46 < (Game1.maxTilesX * 0.02f); num46++)
                {
                    bool flag6 = false;
                    while (!flag6)
                    {
                        int num47 = genRand.Next(0x19, Game1.maxTilesX - 0x19);
                        int num48 = genRand.Next(15, (int)Game1.worldSurface);
                        if (!Game1.tile[num47, num48].active())
                        {
                            while (!Game1.tile[num47, num48 + 1].active() && (num48 < (Game1.maxTilesY - 5)))
                            {
                                num48++;
                            }
                            int num49 = genRand.Next(2);
                            int num50 = genRand.Next(11);
                            if (num49 == 1)
                            {
                                num50 = genRand.Next(5);
                            }
                            if (((Game1.tile[num47, num48 + 1].type == 0x93) || (Game1.tile[num47, num48 + 1].type == 0xa1)) || (Game1.tile[num47, num48 + 1].type == 0xa2))
                            {
                                if ((num49 == 0) && (num50 < 12))
                                {
                                    num50 += 0x24;
                                }
                                if ((num49 == 1) && (num50 >= 20))
                                {
                                    num50 += 6;
                                }
                                if ((num49 == 1) && (num50 < 6))
                                {
                                    num50 += 0x19;
                                }
                            }
                            if ((Game1.tile[num47, num48 + 1].type == 2) && (num49 == 1))
                            {
                                num50 = genRand.Next(0x26, 0x29);
                            }
                            if ((Game1.tile[num47, num48 + 1].type == 0x97) || (Game1.tile[num47, num48 + 1].type == 0x112))
                            {
                                switch (num49)
                                {
                                    case 0:
                                        num50 = genRand.Next(12, 0x1c);
                                        break;

                                    case 1:
                                        num50 = genRand.Next(12, 0x13);
                                        break;
                                }
                            }
                            if ((((!Game1.wallDungeon[Game1.tile[num47, num48].wall] && (Game1.tile[num47, num48 + 1].type != 30)) && ((Game1.tile[num47, num48 + 1].type != 0x13) && (Game1.tile[num47, num48 + 1].type != 0x29))) && (((Game1.tile[num47, num48 + 1].type != 0x2b) && (Game1.tile[num47, num48 + 1].type != 0x2c)) && ((Game1.tile[num47, num48 + 1].type != 0x2d) && (Game1.tile[num47, num48 + 1].type != 0x2e)))) && ((((Game1.tile[num47, num48 + 1].type != 0x2f) && (Game1.tile[num47, num48 + 1].type != 0xaf)) && ((Game1.tile[num47, num48 + 1].type != 0xb0) && (Game1.tile[num47, num48 + 1].type != 0xb1))) && (((Game1.tile[num47, num48 + 1].type != 0x35) && (Game1.tile[num47, num48 + 1].type != 0x19)) && (Game1.tile[num47, num48 + 1].type != 0xcb))))
                            {
                                flag6 = PlaceSmallPile(num47, num48, num50, num49, 0xb9);
                            }
                        }
                    }
                }
                for (int num51 = 0; num51 < (Game1.maxTilesX * 0.15f); num51++)
                {
                    bool flag7 = false;
                    while (!flag7)
                    {
                        int num52 = genRand.Next(0x19, Game1.maxTilesX - 0x19);
                        int num53 = genRand.Next(15, (int)Game1.worldSurface);
                        if (!Game1.tile[num52, num53].active() && ((Game1.tile[num52, num53].wall == 2) || (Game1.tile[num52, num53].wall == 40)))
                        {
                            while (!Game1.tile[num52, num53 + 1].active() && (num53 < (Game1.maxTilesY - 5)))
                            {
                                num53++;
                            }
                            int num54 = genRand.Next(2);
                            int num55 = genRand.Next(11);
                            if (num54 == 1)
                            {
                                num55 = genRand.Next(5);
                            }
                            if (((Game1.tile[num52, num53 + 1].type == 0x93) || (Game1.tile[num52, num53 + 1].type == 0xa1)) || (Game1.tile[num52, num53 + 1].type == 0xa2))
                            {
                                if ((num54 == 0) && (num55 < 12))
                                {
                                    num55 += 0x24;
                                }
                                if ((num54 == 1) && (num55 >= 20))
                                {
                                    num55 += 6;
                                }
                                if ((num54 == 1) && (num55 < 6))
                                {
                                    num55 += 0x19;
                                }
                            }
                            if ((Game1.tile[num52, num53 + 1].type == 2) && (num54 == 1))
                            {
                                num55 = genRand.Next(0x26, 0x29);
                            }
                            if ((Game1.tile[num52, num53 + 1].type == 0x97) || (Game1.tile[num52, num53 + 1].type == 0x112))
                            {
                                switch (num54)
                                {
                                    case 0:
                                        num55 = genRand.Next(12, 0x1c);
                                        break;

                                    case 1:
                                        num55 = genRand.Next(12, 0x13);
                                        break;
                                }
                            }
                            if ((((!Game1.wallDungeon[Game1.tile[num52, num53].wall] && (Game1.tile[num52, num53 + 1].type != 30)) && ((Game1.tile[num52, num53 + 1].type != 0x13) && (Game1.tile[num52, num53 + 1].type != 0x29))) && (((Game1.tile[num52, num53 + 1].type != 0x2b) && (Game1.tile[num52, num53 + 1].type != 0x2c)) && ((Game1.tile[num52, num53 + 1].type != 0x2d) && (Game1.tile[num52, num53 + 1].type != 0x2e)))) && ((((Game1.tile[num52, num53 + 1].type != 0x2f) && (Game1.tile[num52, num53 + 1].type != 0xaf)) && ((Game1.tile[num52, num53 + 1].type != 0xb0) && (Game1.tile[num52, num53 + 1].type != 0xb1))) && ((Game1.tile[num52, num53 + 1].type != 0x19) && (Game1.tile[num52, num53 + 1].type != 0xcb))))
                            {
                                flag7 = PlaceSmallPile(num52, num53, num55, num54, 0xb9);
                            }
                        }
                    }
                }
                Game1.tileSolid[190] = true;
                Game1.tileSolid[0xc0] = true;
                Game1.tileSolid[0xc4] = true;
                Game1.tileSolid[0xbd] = true;
                Game1.tileSolid[0xca] = true;
                Game1.tileSolid[0xe1] = true;
            });
            AddGenerationPass("Moss", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x26];
                int num = 8;
                int num2 = 400;
                int num3 = 4;
                int num4 = 0x113;
                for (int i = 0; i < 3; i++)
                {
                    int num6;
                    int num7;
                    int num8;
                    bool flag;
                    switch (i)
                    {
                        case 1:
                            num6 = num2;
                            num7 = Game1.maxTilesX - num2;
                            flag = true;
                            num8 = num;
                            break;

                        case 2:
                            num6 = Game1.maxTilesX - num4;
                            num7 = Game1.maxTilesX - 5;
                            flag = false;
                            num8 = num3;
                            break;

                        default:
                            num6 = 5;
                            num7 = num4;
                            flag = false;
                            num8 = num3;
                            break;
                    }
                    for (int j = num6; j < num7; j++)
                    {
                        if (genRand.Next(num8) == 0)
                        {
                            for (int k = 0; k < (Game1.worldSurface - 1.0); k++)
                            {
                                Tile tile = Game1.tile[j, k];
                                if (tile.active() && (tile.type == 0x35))
                                {
                                    Tile tile2 = Game1.tile[j, k - 1];
                                    if (!tile2.active() && (tile2.wall == 0))
                                    {
                                        if (flag)
                                        {
                                            PlantCactus(j, k);
                                            break;
                                        }
                                        if (((Game1.tile[j, k - 2].liquid == 0xff) && (Game1.tile[j, k - 3].liquid == 0xff)) && (Game1.tile[j, k - 4].liquid == 0xff))
                                        {
                                            if (genRand.Next(2) == 0)
                                            {
                                                PlaceTile(j, k - 1, 0x51, true, false, -1, 0);
                                            }
                                            else
                                            {
                                                PlaceTile(j, k - 1, 0x144, true, false, -1, genRand.Next(2));
                                            }
                                            break;
                                        }
                                        if (Game1.tile[j, k - 2].liquid == 0)
                                        {
                                            PlaceTile(j, k - 1, 0x144, true, false, -1, genRand.Next(2));
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            });
            AddGenerationPass("Spawn Point", delegate(GenerationProgress progress)
            {
                int num = 5;
                bool flag = true;
                while (flag)
                {
                    int num2 = (Game1.maxTilesX / 2) + genRand.Next(-num, num + 1);
                    for (int j = 0; j < Game1.maxTilesY; j++)
                    {
                        if (Game1.tile[num2, j].active())
                        {
                            Game1.spawnTileX = num2;
                            Game1.spawnTileY = j;
                            break;
                        }
                    }
                    flag = false;
                    num++;
                    if (Game1.spawnTileY > Game1.worldSurface)
                    {
                        flag = true;
                    }
                    if (Game1.tile[Game1.spawnTileX, Game1.spawnTileY - 1].liquid > 0)
                    {
                        flag = true;
                    }
                }
                for (int i = 10; Game1.spawnTileY > Game1.worldSurface; i++)
                {
                    int num5 = genRand.Next((Game1.maxTilesX / 2) - i, (Game1.maxTilesX / 2) + i);
                    for (int k = 0; k < Game1.maxTilesY; k++)
                    {
                        if (Game1.tile[num5, k].active())
                        {
                            Game1.spawnTileX = num5;
                            Game1.spawnTileY = k;
                            break;
                        }
                    }
                }
            });
            AddGenerationPass("Grass Wall", delegate(GenerationProgress progress)
            {
                maxTileCount = 0xdac;
                for (int i = 50; i < (Game1.maxTilesX - 50); i++)
                {
                    for (int k = 0; k < (Game1.worldSurface - 10.0); k++)
                    {
                        if (genRand.Next(4) == 0)
                        {
                            bool flag = false;
                            int x = -1;
                            int y = -1;
                            if ((Game1.tile[i, k].active() && (Game1.tile[i, k].type == 2)) && ((Game1.tile[i, k].wall == 2) || (Game1.tile[i, k].wall == 0x3f)))
                            {
                                for (int m = i - 1; m <= (i + 1); m++)
                                {
                                    for (int n = k - 1; n <= (k + 1); n++)
                                    {
                                        if ((Game1.tile[m, n].wall == 0) && !SolidTile(m, n))
                                        {
                                            flag = true;
                                        }
                                    }
                                }
                                if (flag)
                                {
                                    for (int num7 = i - 1; num7 <= (i + 1); num7++)
                                    {
                                        for (int num8 = k - 1; num8 <= (k + 1); num8++)
                                        {
                                            if (((Game1.tile[num7, num8].wall == 2) || (Game1.tile[num7, num8].wall == 15)) && !SolidTile(num7, num8))
                                            {
                                                x = num7;
                                                y = num8;
                                            }
                                        }
                                    }
                                }
                            }
                            if ((flag && (x > -1)) && ((y > -1) && (countDirtTiles(x, y) < maxTileCount)))
                            {
                                try
                                {
                                    Spread.Wall2(x, y, 0x3f);
                                }
                                catch
                                {
                                }
                            }
                        }
                    }
                }
                for (int j = 5; j < (Game1.maxTilesX - 5); j++)
                {
                    for (int num11 = 10; num11 < (Game1.worldSurface - 1.0); num11++)
                    {
                        if ((Game1.tile[j, num11].wall == 0x3f) && (genRand.Next(10) == 0))
                        {
                            Game1.tile[j, num11].wall = 0x41;
                        }
                        if (Game1.tile[j, num11].active() && (Game1.tile[j, num11].type == 0))
                        {
                            bool flag2 = false;
                            for (int num12 = j - 1; num12 <= (j + 1); num12++)
                            {
                                for (int num13 = num11 - 1; num13 <= (num11 + 1); num13++)
                                {
                                    if ((Game1.tile[j, num11].wall == 0x3f) || (Game1.tile[j, num11].wall == 0x41))
                                    {
                                        flag2 = true;
                                        break;
                                    }
                                }
                            }
                            if (flag2)
                            {
                                SpreadGrass(j, num11, 0, 2, true, 0);
                            }
                        }
                    }
                }
            });
            AddGenerationPass("Guide", delegate(GenerationProgress progress)
            {
                int index = NPC.NewNPC(Game1.spawnTileX * 0x10, Game1.spawnTileY * 0x10, 0x16, 0, 0f, 0f, 0f, 0f, 0xff);
                Game1.npc[index].homeTileX = Game1.spawnTileX;
                Game1.npc[index].homeTileY = Game1.spawnTileY;
                Game1.npc[index].direction = 1;
                Game1.npc[index].homeless = true;
            });
            AddGenerationPass("Sunflowers", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x27];
                for (int i = 0; i < (Game1.maxTilesX * 0.002); i++)
                {
                    int num2 = 0;
                    int num3 = 0;
                    int num4 = 0;
                    int num1 = Game1.maxTilesX / 2;
                    num2 = genRand.Next(Game1.maxTilesX);
                    num3 = (num2 - genRand.Next(10)) - 7;
                    num4 = (num2 + genRand.Next(10)) + 7;
                    if (num3 < 0)
                    {
                        num3 = 0;
                    }
                    if (num4 > (Game1.maxTilesX - 1))
                    {
                        num4 = Game1.maxTilesX - 1;
                    }
                    for (int j = num3; j < num4; j++)
                    {
                        for (int k = 1; k < (Game1.worldSurface - 1.0); k++)
                        {
                            if (((Game1.tile[j, k].type == 2) && Game1.tile[j, k].active()) && !Game1.tile[j, k - 1].active())
                            {
                                PlaceTile(j, k - 1, 0x1b, true, false, -1, 0);
                            }
                            if (Game1.tile[j, k].active())
                            {
                                break;
                            }
                        }
                    }
                }
            });
            AddGenerationPass("Planting Trees", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[40];
                for (int i = 0; i < (Game1.maxTilesX * 0.003); i++)
                {
                    int num2 = genRand.Next(50, Game1.maxTilesX - 50);
                    int num3 = genRand.Next(0x19, 50);
                    for (int j = num2 - num3; j < (num2 + num3); j++)
                    {
                        for (int k = 20; k < Game1.worldSurface; k++)
                        {
                            GrowEpicTree(j, k);
                        }
                    }
                }
                AddTrees();
            });
            AddGenerationPass("Herbs", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x29];
                for (int i = 0; i < (Game1.maxTilesX * 1.7); i++)
                {
                    PlantAlch();
                }
            });
            AddGenerationPass("Dye Plants", delegate(GenerationProgress progress)
            {
                for (int i = 0; i < Game1.maxTilesX; i++)
                {
                    plantDye(genRand.Next(100, Game1.maxTilesX - 100), genRand.Next(100, Game1.maxTilesY - 200), false);
                }
                for (int j = 0; j < (Game1.maxTilesX / 8); j++)
                {
                    plantDye(genRand.Next(100, Game1.maxTilesX - 100), genRand.Next(100, Game1.maxTilesY - 200), true);
                }
            });
            AddGenerationPass("Webs And Honey", delegate(GenerationProgress progress)
            {
                for (int i = 100; i < (Game1.maxTilesX - 100); i++)
                {
                    for (int j = (int)Game1.worldSurface; j < (Game1.maxTilesY - 100); j++)
                    {
                        if (Game1.tile[i, j].wall == 0x56)
                        {
                            if (Game1.tile[i, j].liquid > 0)
                            {
                                Game1.tile[i, j].honey(true);
                            }
                            if (genRand.Next(3) == 0)
                            {
                                PlaceTight(i, j, 0xa5, false);
                            }
                        }
                        if (Game1.tile[i, j].wall == 0x3e)
                        {
                            Game1.tile[i, j].liquid = 0;
                            Game1.tile[i, j].lava(false);
                        }
                        if (((Game1.tile[i, j].wall == 0x3e) && !Game1.tile[i, j].active()) && (genRand.Next(10) != 0))
                        {
                            int num3 = genRand.Next(2, 5);
                            int num4 = i - num3;
                            int num5 = i + num3;
                            int num6 = j - num3;
                            int num7 = j + num3;
                            bool flag = false;
                            for (int k = num4; k <= num5; k++)
                            {
                                for (int m = num6; m <= num7; m++)
                                {
                                    if (SolidTile(k, m))
                                    {
                                        flag = true;
                                        break;
                                    }
                                }
                            }
                            if (flag)
                            {
                                PlaceTile(i, j, 0x33, true, false, -1, 0);
                                TileFrame(i, j, false, false);
                            }
                        }
                    }
                }
            });
            AddGenerationPass("Weeds", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x2a];
                if (Game1.halloween)
                {
                    for (int i = 40; i < (Game1.maxTilesX - 40); i++)
                    {
                        for (int j = 50; j < Game1.worldSurface; j++)
                        {
                            if ((Game1.tile[i, j].active() && (Game1.tile[i, j].type == 2)) && (genRand.Next(15) == 0))
                            {
                                PlacePumpkin(i, j - 1);
                                int num3 = genRand.Next(5);
                                for (int k = 0; k < num3; k++)
                                {
                                    GrowPumpkin(i, j - 1, 0xfe);
                                }
                            }
                        }
                    }
                }
                AddPlants();
            });
            AddGenerationPass("Mud Caves To Grass", delegate(GenerationProgress progress)
            {
                for (int i = 0; i < Game1.maxTilesX; i++)
                {
                    for (int j = 0; j < Game1.maxTilesY; j++)
                    {
                        if (Game1.tile[i, j].active())
                        {
                            if (((j >= ((int)Game1.worldSurface)) && (Game1.tile[i, j].type == 70)) && !Game1.tile[i, j - 1].active())
                            {
                                GrowShroom(i, j);
                                if (!Game1.tile[i, j - 1].active())
                                {
                                    PlaceTile(i, j - 1, 0x47, true, false, -1, 0);
                                }
                            }
                            if ((Game1.tile[i, j].type == 60) && !Game1.tile[i, j - 1].active())
                            {
                                PlaceTile(i, j - 1, 0x3d, true, false, -1, 0);
                            }
                        }
                    }
                }
            });
            AddGenerationPass("Jungle Plants", delegate(GenerationProgress progress)
            {
                for (int i = 0; i < (Game1.maxTilesX * 100); i++)
                {
                    int num2 = genRand.Next(40, (Game1.maxTilesX / 2) - 40);
                    if (dungeonSide < 0)
                    {
                        num2 += Game1.maxTilesX / 2;
                    }
                    int num3 = genRand.Next(Game1.maxTilesY - 300);
                    while (!Game1.tile[num2, num3].active() && (num3 < (Game1.maxTilesY - 300)))
                    {
                        num3++;
                    }
                    if (Game1.tile[num2, num3].active() && (Game1.tile[num2, num3].type == 60))
                    {
                        num3--;
                        PlaceJunglePlant(num2, num3, 0xe9, genRand.Next(8), 0);
                        if (Game1.tile[num2, num3].type != 0xe9)
                        {
                            PlaceJunglePlant(num2, num3, 0xe9, genRand.Next(12), 1);
                        }
                    }
                }
            });
            AddGenerationPass("Vines", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x2b];
                for (int i = 0; i < Game1.maxTilesX; i++)
                {
                    int num2 = 0;
                    for (int j = 0; j < Game1.worldSurface; j++)
                    {
                        if ((num2 > 0) && !Game1.tile[i, j].active())
                        {
                            Game1.tile[i, j].active(true);
                            Game1.tile[i, j].type = 0x34;
                            num2--;
                        }
                        else
                        {
                            num2 = 0;
                        }
                        if (((Game1.tile[i, j].active() && !Game1.tile[i, j].bottomSlope()) && ((Game1.tile[i, j].type == 2) || ((Game1.tile[i, j].type == 0xc0) && (genRand.Next(4) == 0)))) && (genRand.Next(5) < 3))
                        {
                            num2 = genRand.Next(1, 10);
                        }
                    }
                    num2 = 0;
                    for (int k = 0; k < Game1.maxTilesY; k++)
                    {
                        if ((num2 > 0) && !Game1.tile[i, k].active())
                        {
                            Game1.tile[i, k].active(true);
                            Game1.tile[i, k].type = 0x3e;
                            num2--;
                        }
                        else
                        {
                            num2 = 0;
                        }
                        if ((Game1.tile[i, k].active() && (Game1.tile[i, k].type == 60)) && (!Game1.tile[i, k].bottomSlope() && (genRand.Next(5) < 3)))
                        {
                            num2 = genRand.Next(1, 10);
                        }
                    }
                    num2 = 0;
                    for (int m = 0; m < Game1.maxTilesY; m++)
                    {
                        if ((num2 > 0) && !Game1.tile[i, m].active())
                        {
                            Game1.tile[i, m].active(true);
                            Game1.tile[i, m].type = 0xcd;
                            num2--;
                        }
                        else
                        {
                            num2 = 0;
                        }
                        if ((Game1.tile[i, m].active() && (Game1.tile[i, m].type == 0xc7)) && (genRand.Next(5) < 3))
                        {
                            num2 = genRand.Next(1, 10);
                        }
                    }
                }
            });
            AddGenerationPass("Flowers", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x2c];
                for (int i = 0; i < (Game1.maxTilesX * 0.005); i++)
                {
                    int num2 = genRand.Next(20, Game1.maxTilesX - 20);
                    int num3 = genRand.Next(5, 15);
                    int num4 = genRand.Next(15, 30);
                    for (int j = 1; j < (Game1.worldSurface - 1.0); j++)
                    {
                        if (Game1.tile[num2, j].active())
                        {
                            for (int k = num2 - num3; k < (num2 + num3); k++)
                            {
                                for (int m = j - num4; m < (j + num4); m++)
                                {
                                    if ((Game1.tile[k, m].type == 3) || (Game1.tile[k, m].type == 0x18))
                                    {
                                        Game1.tile[k, m].frameX = (short)(genRand.Next(6, 8) * 0x12);
                                        if ((Game1.tile[k, m].type == 3) && (genRand.Next(2) == 0))
                                        {
                                            Game1.tile[k, m].frameX = (short)(genRand.Next(9, 11) * 0x12);
                                        }
                                    }
                                }
                            }
                            break;
                        }
                    }
                }
            });
            AddGenerationPass("Mushrooms", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x2d];
                for (int i = 0; i < (Game1.maxTilesX * 0.002); i++)
                {
                    int num2 = genRand.Next(20, Game1.maxTilesX - 20);
                    int num3 = genRand.Next(4, 10);
                    int num4 = genRand.Next(15, 30);
                    for (int j = 1; j < (Game1.worldSurface - 1.0); j++)
                    {
                        if (Game1.tile[num2, j].active())
                        {
                            for (int k = num2 - num3; k < (num2 + num3); k++)
                            {
                                for (int m = j - num4; m < (j + num4); m++)
                                {
                                    if ((Game1.tile[k, m].type == 3) || (Game1.tile[k, m].type == 0x18))
                                    {
                                        Game1.tile[k, m].frameX = 0x90;
                                    }
                                    else if (Game1.tile[k, m].type == 0xc9)
                                    {
                                        Game1.tile[k, m].frameX = 270;
                                    }
                                }
                            }
                            break;
                        }
                    }
                }
            });
            AddGenerationPass("Stalac", delegate(GenerationProgress progress)
            {
                for (int i = 20; i < (Game1.maxTilesX - 20); i++)
                {
                    for (int j = (int)Game1.worldSurface; j < (Game1.maxTilesY - 20); j++)
                    {
                        if (!Game1.tile[i, j].active() && (genRand.Next(5) == 0))
                        {
                            if (((((Game1.tile[i, j - 1].type == 1) || (Game1.tile[i, j - 1].type == 0x93)) || ((Game1.tile[i, j - 1].type == 0xa1) || (Game1.tile[i, j - 1].type == 0x19))) || (((Game1.tile[i, j - 1].type == 0xcb) || Game1.tileStone[Game1.tile[i, j - 1].type]) || Game1.tileMoss[Game1.tile[i, j - 1].type])) && (!Game1.tile[i, j].active() && !Game1.tile[i, j + 1].active()))
                            {
                                Game1.tile[i, j - 1].slope(0);
                            }
                            if (((((Game1.tile[i, j + 1].type == 1) || (Game1.tile[i, j + 1].type == 0x93)) || ((Game1.tile[i, j + 1].type == 0xa1) || (Game1.tile[i, j + 1].type == 0x19))) || (((Game1.tile[i, j + 1].type == 0xcb) || Game1.tileStone[Game1.tile[i, j + 1].type]) || Game1.tileMoss[Game1.tile[i, j + 1].type])) && (!Game1.tile[i, j].active() && !Game1.tile[i, j - 1].active()))
                            {
                                Game1.tile[i, j + 1].slope(0);
                            }
                            PlaceTight(i, j, 0xa5, false);
                        }
                    }
                    for (int k = 5; k < ((int)Game1.worldSurface); k++)
                    {
                        if (((Game1.tile[i, k - 1].type == 0x93) || (Game1.tile[i, k - 1].type == 0xa1)) && (genRand.Next(5) == 0))
                        {
                            if (!Game1.tile[i, k].active() && !Game1.tile[i, k + 1].active())
                            {
                                Game1.tile[i, k - 1].slope(0);
                            }
                            PlaceTight(i, k, 0xa5, false);
                        }
                        if (((Game1.tile[i, k - 1].type == 0x19) || (Game1.tile[i, k - 1].type == 0xcb)) && (genRand.Next(5) == 0))
                        {
                            if (!Game1.tile[i, k].active() && !Game1.tile[i, k + 1].active())
                            {
                                Game1.tile[i, k - 1].slope(0);
                            }
                            PlaceTight(i, k, 0xa5, false);
                        }
                        if (((Game1.tile[i, k + 1].type == 0x19) || (Game1.tile[i, k + 1].type == 0xcb)) && (genRand.Next(5) == 0))
                        {
                            if (!Game1.tile[i, k].active() && !Game1.tile[i, k - 1].active())
                            {
                                Game1.tile[i, k + 1].slope(0);
                            }
                            PlaceTight(i, k, 0xa5, false);
                        }
                    }
                }
            });
            AddGenerationPass("Gems In Ice Biome", delegate(GenerationProgress progress)
            {
                for (int i = 0; i < (Game1.maxTilesX * 0.25); i++)
                {
                    int index = genRand.Next(((int)(Game1.worldSurface + Game1.rockLayer)) / 2, lavaLine);
                    int num3 = genRand.Next(snowMinX[index], snowMaxX[index]);
                    if (Game1.tile[num3, index].active() && (((Game1.tile[num3, index].type == 0x93) || (Game1.tile[num3, index].type == 0xa1)) || ((Game1.tile[num3, index].type == 0xa2) || (Game1.tile[num3, index].type == 0xe0))))
                    {
                        int num4 = genRand.Next(1, 4);
                        int num5 = genRand.Next(1, 4);
                        int num6 = genRand.Next(1, 4);
                        int num7 = genRand.Next(1, 4);
                        int num8 = genRand.Next(12);
                        int style = 0;
                        if (num8 < 3)
                        {
                            style = 0;
                        }
                        else if (num8 < 6)
                        {
                            style = 1;
                        }
                        else if (num8 < 8)
                        {
                            style = 2;
                        }
                        else if (num8 < 10)
                        {
                            style = 3;
                        }
                        else if (num8 < 11)
                        {
                            style = 4;
                        }
                        else
                        {
                            style = 5;
                        }
                        for (int j = num3 - num4; j < (num3 + num5); j++)
                        {
                            for (int k = index - num6; k < (index + num7); k++)
                            {
                                if (!Game1.tile[j, k].active())
                                {
                                    PlaceTile(j, k, 0xb2, true, false, -1, style);
                                }
                            }
                        }
                    }
                }
            });
            AddGenerationPass("Random Gems", delegate(GenerationProgress progress)
            {
                for (int i = 0; i < Game1.maxTilesX; i++)
                {
                    int num2 = genRand.Next(20, Game1.maxTilesX - 20);
                    int j = genRand.Next((int)Game1.rockLayer, Game1.maxTilesY - 300);
                    if ((!Game1.tile[num2, j].active() && !Game1.tile[num2, j].lava()) && (!Game1.wallDungeon[Game1.tile[num2, j].wall] && (Game1.tile[num2, j].wall != 0x1b)))
                    {
                        int num4 = genRand.Next(12);
                        int style = 0;
                        if (num4 < 3)
                        {
                            style = 0;
                        }
                        else if (num4 < 6)
                        {
                            style = 1;
                        }
                        else if (num4 < 8)
                        {
                            style = 2;
                        }
                        else if (num4 < 10)
                        {
                            style = 3;
                        }
                        else if (num4 < 11)
                        {
                            style = 4;
                        }
                        else
                        {
                            style = 5;
                        }
                        PlaceTile(num2, j, 0xb2, true, false, -1, style);
                    }
                }
            });
            AddGenerationPass("Moss Grass", delegate(GenerationProgress progress)
            {
                for (int i = 5; i < (Game1.maxTilesX - 5); i++)
                {
                    for (int j = 5; j < (Game1.maxTilesY - 5); j++)
                    {
                        if (Game1.tile[i, j].active() && Game1.tileMoss[Game1.tile[i, j].type])
                        {
                            for (int k = 0; k < 4; k++)
                            {
                                int num4 = i;
                                int num5 = j;
                                switch (k)
                                {
                                    case 0:
                                        num4--;
                                        break;

                                    case 1:
                                        num4++;
                                        break;

                                    case 2:
                                        num5--;
                                        break;

                                    case 3:
                                        num5++;
                                        break;
                                }
                                if (!Game1.tile[num4, num5].active())
                                {
                                    PlaceTile(num4, num5, 0xb8, true, false, -1, 0);
                                }
                            }
                        }
                    }
                }
            });
            AddGenerationPass("Muds Walls In Jungle", delegate(GenerationProgress progress)
            {
                int num = 0;
                int num2 = 0;
                bool flag = false;
                for (int i = 5; i < (Game1.maxTilesX - 5); i++)
                {
                    for (int m = 0; m < (Game1.worldSurface + 20.0); m++)
                    {
                        if (Game1.tile[i, m].active() && (Game1.tile[i, m].type == 60))
                        {
                            num = i;
                            flag = true;
                            break;
                        }
                    }
                    if (flag)
                    {
                        break;
                    }
                }
                flag = false;
                for (int j = Game1.maxTilesX - 5; j > 5; j--)
                {
                    for (int n = 0; n < (Game1.worldSurface + 20.0); n++)
                    {
                        if (Game1.tile[j, n].active() && (Game1.tile[j, n].type == 60))
                        {
                            num2 = j;
                            flag = true;
                            break;
                        }
                    }
                    if (flag)
                    {
                        break;
                    }
                }
                for (int k = num; k <= num2; k++)
                {
                    for (int num8 = 0; num8 < (Game1.worldSurface + 20.0); num8++)
                    {
                        if (((((k >= (num + 2)) && (k <= (num2 - 2))) || (genRand.Next(2) != 0)) && (((k >= (num + 3)) && (k <= (num2 - 3))) || (genRand.Next(3) != 0))) && ((Game1.tile[k, num8].wall == 2) || (Game1.tile[k, num8].wall == 0x3b)))
                        {
                            Game1.tile[k, num8].wall = 15;
                        }
                    }
                }
            });
            AddGenerationPass("Larva", delegate(GenerationProgress progress)
            {
                for (int i = 0; i < numLarva; i++)
                {
                    int num2 = larvaX[i];
                    int j = larvaY[i];
                    for (int k = num2 - 1; k <= (num2 + 1); k++)
                    {
                        for (int m = j - 2; m <= (j + 1); m++)
                        {
                            if (m != (j + 1))
                            {
                                Game1.tile[k, m].active(false);
                            }
                            else
                            {
                                Game1.tile[k, m].active(true);
                                Game1.tile[k, m].type = 0xe1;
                                Game1.tile[k, m].slope(0);
                                Game1.tile[k, m].halfBrick(false);
                            }
                        }
                    }
                    PlaceTile(num2, j, 0xe7, true, false, -1, 0);
                }
                Game1.tileSolid[0xe8] = true;
                Game1.tileSolid[0xa2] = true;
            });
            AddGenerationPass("Tile Cleanup", delegate(GenerationProgress progress)
            {
                for (int i = 40; i < (Game1.maxTilesX - 40); i++)
                {
                    for (int j = 40; j < (Game1.maxTilesY - 40); j++)
                    {
                        if ((!Game1.tile[i, j].active() && (Game1.tile[i, j].liquid == 0)) && ((genRand.Next(3) != 0) && SolidTile(i, j - 1)))
                        {
                            int num3 = genRand.Next(15, 0x15);
                            for (int k = j - 2; k >= (j - num3); k--)
                            {
                                if (Game1.tile[i, k].liquid >= 0x80)
                                {
                                    int num5 = 0x175;
                                    if (Game1.tile[i, k].lava())
                                    {
                                        num5 = 0x176;
                                    }
                                    else if (Game1.tile[i, k].honey())
                                    {
                                        num5 = 0x177;
                                    }
                                    int maxValue = j - k;
                                    if (genRand.Next(maxValue) <= 1)
                                    {
                                        Game1.tile[i, j].type = (ushort)num5;
                                        Game1.tile[i, j].frameX = 0;
                                        Game1.tile[i, j].frameY = 0;
                                        Game1.tile[i, j].active(true);
                                        break;
                                    }
                                }
                            }
                            if (!Game1.tile[i, j].active())
                            {
                                num3 = genRand.Next(3, 11);
                                for (int m = j + 1; m <= (j + num3); m++)
                                {
                                    if (Game1.tile[i, m].liquid >= 200)
                                    {
                                        int num8 = 0x175;
                                        if (Game1.tile[i, m].lava())
                                        {
                                            num8 = 0x176;
                                        }
                                        else if (Game1.tile[i, m].honey())
                                        {
                                            num8 = 0x177;
                                        }
                                        int num9 = m - j;
                                        if (genRand.Next(num9 * 3) <= 1)
                                        {
                                            Game1.tile[i, j].type = (ushort)num8;
                                            Game1.tile[i, j].frameX = 0;
                                            Game1.tile[i, j].frameY = 0;
                                            Game1.tile[i, j].active(true);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        if (Game1.tile[i, j].type == 0x89)
                        {
                            if (Game1.tile[i, j].frameY <= 0x34)
                            {
                                int num10 = -1;
                                if (Game1.tile[i, j].frameX >= 0x12)
                                {
                                    num10 = 1;
                                }
                                if (Game1.tile[i + num10, j].halfBrick() || (Game1.tile[i + num10, j].slope() != 0))
                                {
                                    Game1.tile[i + num10, j].active(false);
                                }
                            }
                        }
                        else if ((Game1.tile[i, j].type == 0xa2) && (Game1.tile[i, j + 1].liquid == 0))
                        {
                            Game1.tile[i, j].active(false);
                        }
                        if ((Game1.tile[i, j].wall == 13) || (Game1.tile[i, j].wall == 14))
                        {
                            Game1.tile[i, j].liquid = 0;
                        }
                        if (Game1.tile[i, j].type == 0x1f)
                        {
                            int num11 = Game1.tile[i, j].frameX / 0x12;
                            int num12 = 0;
                            int num13 = i;
                            num12 += num11 / 2;
                            num11 = num11 % 2;
                            num13 -= num11;
                            int num14 = Game1.tile[i, j].frameY / 0x12;
                            int num15 = 0;
                            int num16 = j;
                            num15 += num14 / 2;
                            num14 = num14 % 2;
                            num16 -= num14;
                            for (int n = 0; n < 2; n++)
                            {
                                for (int num18 = 0; num18 < 2; num18++)
                                {
                                    int num19 = num13 + n;
                                    int num20 = num16 + num18;
                                    Game1.tile[num19, num20].active(true);
                                    Game1.tile[num19, num20].slope(0);
                                    Game1.tile[num19, num20].halfBrick(false);
                                    Game1.tile[num19, num20].type = 0x1f;
                                    Game1.tile[num19, num20].frameX = (short)((n * 0x12) + (0x24 * num12));
                                    Game1.tile[num19, num20].frameY = (short)((num18 * 0x12) + (0x24 * num15));
                                }
                            }
                        }
                        if (Game1.tile[i, j].type == 12)
                        {
                            int num21 = Game1.tile[i, j].frameX / 0x12;
                            int num22 = 0;
                            int num23 = i;
                            num22 += num21 / 2;
                            num21 = num21 % 2;
                            num23 -= num21;
                            int num24 = Game1.tile[i, j].frameY / 0x12;
                            int num25 = 0;
                            int num26 = j;
                            num25 += num24 / 2;
                            num24 = num24 % 2;
                            num26 -= num24;
                            for (int num27 = 0; num27 < 2; num27++)
                            {
                                for (int num28 = 0; num28 < 2; num28++)
                                {
                                    int num29 = num23 + num27;
                                    int num30 = num26 + num28;
                                    Game1.tile[num29, num30].active(true);
                                    Game1.tile[num29, num30].slope(0);
                                    Game1.tile[num29, num30].halfBrick(false);
                                    Game1.tile[num29, num30].type = 12;
                                    Game1.tile[num29, num30].frameX = (short)((num27 * 0x12) + (0x24 * num22));
                                    Game1.tile[num29, num30].frameY = (short)((num28 * 0x12) + (0x24 * num25));
                                }
                                if (!Game1.tile[num27, j + 2].active())
                                {
                                    Game1.tile[num27, j + 2].active(true);
                                    if (!Game1.tileSolid[Game1.tile[num27, j + 2].type] || Game1.tileSolidTop[Game1.tile[num27, j + 2].type])
                                    {
                                        Game1.tile[num27, j + 2].type = 0;
                                    }
                                }
                                Game1.tile[num27, j + 2].slope(0);
                                Game1.tile[num27, j + 2].halfBrick(false);
                            }
                        }
                        if (Game1.tile[i, j].type == 0x15)
                        {
                            int num31 = Game1.tile[i, j].frameX / 0x12;
                            int num32 = 0;
                            int num33 = i;
                            int num34 = j - (Game1.tile[i, j].frameY / 0x12);
                            while (num31 >= 2)
                            {
                                num32++;
                                num31 -= 2;
                            }
                            num33 -= num31;
                            for (int num35 = 0; num35 < 2; num35++)
                            {
                                for (int num36 = 0; num36 < 2; num36++)
                                {
                                    int num37 = num33 + num35;
                                    int num38 = num34 + num36;
                                    Game1.tile[num37, num38].active(true);
                                    Game1.tile[num37, num38].slope(0);
                                    Game1.tile[num37, num38].halfBrick(false);
                                    Game1.tile[num37, num38].type = 0x15;
                                    Game1.tile[num37, num38].frameX = (short)((num35 * 0x12) + (0x24 * num32));
                                    Game1.tile[num37, num38].frameY = (short)(num36 * 0x12);
                                }
                                if (!Game1.tile[num35, j + 2].active())
                                {
                                    Game1.tile[num35, j + 2].active(true);
                                    if (!Game1.tileSolid[Game1.tile[num35, j + 2].type] || Game1.tileSolidTop[Game1.tile[num35, j + 2].type])
                                    {
                                        Game1.tile[num35, j + 2].type = 0;
                                    }
                                }
                                Game1.tile[num35, j + 2].slope(0);
                                Game1.tile[num35, j + 2].halfBrick(false);
                            }
                        }
                        if (Game1.tile[i, j].type == 0x1c)
                        {
                            int num39 = Game1.tile[i, j].frameX / 0x12;
                            int num40 = 0;
                            int num41 = i;
                            while (num39 >= 2)
                            {
                                num40++;
                                num39 -= 2;
                            }
                            num41 -= num39;
                            int num42 = Game1.tile[i, j].frameY / 0x12;
                            int num43 = 0;
                            int num44 = j;
                            while (num42 >= 2)
                            {
                                num43++;
                                num42 -= 2;
                            }
                            num44 -= num42;
                            for (int num45 = 0; num45 < 2; num45++)
                            {
                                for (int num46 = 0; num46 < 2; num46++)
                                {
                                    int num47 = num41 + num45;
                                    int num48 = num44 + num46;
                                    Game1.tile[num47, num48].active(true);
                                    Game1.tile[num47, num48].slope(0);
                                    Game1.tile[num47, num48].halfBrick(false);
                                    Game1.tile[num47, num48].type = 0x1c;
                                    Game1.tile[num47, num48].frameX = (short)((num45 * 0x12) + (0x24 * num40));
                                    Game1.tile[num47, num48].frameY = (short)((num46 * 0x12) + (0x24 * num43));
                                }
                                if (!Game1.tile[num45, j + 2].active())
                                {
                                    Game1.tile[num45, j + 2].active(true);
                                    if (!Game1.tileSolid[Game1.tile[num45, j + 2].type] || Game1.tileSolidTop[Game1.tile[num45, j + 2].type])
                                    {
                                        Game1.tile[num45, j + 2].type = 0;
                                    }
                                }
                                Game1.tile[num45, j + 2].slope(0);
                                Game1.tile[num45, j + 2].halfBrick(false);
                            }
                        }
                        if (Game1.tile[i, j].type == 0x1a)
                        {
                            int num49 = Game1.tile[i, j].frameX / 0x12;
                            int num50 = 0;
                            int num51 = i;
                            int num52 = j - (Game1.tile[i, j].frameY / 0x12);
                            while (num49 >= 3)
                            {
                                num50++;
                                num49 -= 3;
                            }
                            num51 -= num49;
                            for (int num53 = 0; num53 < 3; num53++)
                            {
                                for (int num54 = 0; num54 < 2; num54++)
                                {
                                    int num55 = num51 + num53;
                                    int num56 = num52 + num54;
                                    Game1.tile[num55, num56].active(true);
                                    Game1.tile[num55, num56].slope(0);
                                    Game1.tile[num55, num56].halfBrick(false);
                                    Game1.tile[num55, num56].type = 0x1a;
                                    Game1.tile[num55, num56].frameX = (short)((num53 * 0x12) + (0x36 * num50));
                                    Game1.tile[num55, num56].frameY = (short)(num54 * 0x12);
                                }
                                if ((!Game1.tile[num51 + num53, num52 + 2].active() || !Game1.tileSolid[Game1.tile[num51 + num53, num52 + 2].type]) || Game1.tileSolidTop[Game1.tile[num51 + num53, num52 + 2].type])
                                {
                                    Game1.tile[num51 + num53, num52 + 2].active(true);
                                    if (!Game1.tileSolid[Game1.tile[num51 + num53, num52 + 2].type] || Game1.tileSolidTop[Game1.tile[num51 + num53, num52 + 2].type])
                                    {
                                        Game1.tile[num51 + num53, num52 + 2].type = 0;
                                    }
                                    if ((Game1.tile[num51 + num53, num52 + 2].slope() > 0) || Game1.tile[num51 + num53, num52 + 2].halfBrick())
                                    {
                                        Game1.tile[num51 + num53, num52 + 2].halfBrick(false);
                                        Game1.tile[num51 + num53, num52 + 2].slope(0);
                                    }
                                }
                                Game1.tile[num51 + num53, num52 + 2].slope(0);
                                Game1.tile[num51 + num53, num52 + 2].halfBrick(false);
                            }
                        }
                    }
                }
            });
            AddGenerationPass("Lihzahrd Altars", delegate(GenerationProgress progress)
            {
                int lAltarX = WorldGen.lAltarX;
                int lAltarY = WorldGen.lAltarY;
                for (int i = 0; i <= 2; i++)
                {
                    for (int j = 0; j <= 1; j++)
                    {
                        int num5 = lAltarX + i;
                        int num6 = lAltarY + j;
                        Game1.tile[num5, num6].active(true);
                        Game1.tile[num5, num6].type = 0xed;
                        Game1.tile[num5, num6].frameX = (short)(i * 0x12);
                        Game1.tile[num5, num6].frameY = (short)(j * 0x12);
                    }
                    Game1.tile[i, lAltarY + 2].active(true);
                    Game1.tile[i, lAltarY + 2].slope(0);
                    Game1.tile[i, lAltarY + 2].halfBrick(false);
                    Game1.tile[i, lAltarY + 2].type = 0xe2;
                }
            });
            AddGenerationPass("Micro Biomes", delegate(GenerationProgress progress)
            {
                progress.Message = Lang.gen[0x4c];
                float num = ((float)(Game1.maxTilesX * Game1.maxTilesY)) / 5040000f;
                float num2 = ((float)Game1.maxTilesX) / 4200f;
                int num3 = (int)(genRand.Next(3, 6) * num);
                int num4 = 0;
                while (num4 < num3)
                {
                    if (Biomes<ThinIceBiome>.Place(RandomWorldPoint(((int)Game1.worldSurface) + 20, 50, 200, 50), structures))
                    {
                        num4++;
                    }
                }
                progress.Set(0.1f);
                int num5 = (int)Math.Ceiling((double)num);
                int num6 = 0;
                while (num6 < num5)
                {
                    Point point;
                    point.Y = ((int)worldSurface) + genRand.Next(50, 100);
                    if (genRand.Next(2) == 0)
                    {
                        point.X = genRand.Next(50, (int)(Game1.maxTilesX * 0.3f));
                    }
                    else
                    {
                        point.X = genRand.Next((int)(Game1.maxTilesX * 0.7f), Game1.maxTilesX - 50);
                    }
                    if (Biomes<EnchantedSwordBiome>.Place(point, structures))
                    {
                        num6++;
                    }
                }
                progress.Set(0.2f);
                int num7 = (int)(genRand.Next(6, 12) * num);
                int num8 = 0;
                while (num8 < num7)
                {
                    if (Biomes<CampsiteBiome>.Place(RandomWorldPoint((int)Game1.worldSurface, 50, 200, 50), structures))
                    {
                        num8++;
                    }
                }
                int num9 = (int)(genRand.Next(14, 30) * num);
                int num10 = 0;
                while (num10 < num9)
                {
                    if (Biomes<MiningExplosivesBiome>.Place(RandomWorldPoint((int)rockLayer, 50, 200, 50), structures))
                    {
                        num10++;
                    }
                }
                progress.Set(0.3f);
                int num11 = (int)(genRand.Next(6, 12) * num2);
                int num12 = 0;
                for (int i = 0; (num12 < num11) && (i < 0x4e20); i++)
                {
                    if (Biomes<MahoganyTreeBiome>.Place(RandomWorldPoint(((int)Game1.worldSurface) + 50, 50, 500, 50), structures))
                    {
                        num12++;
                    }
                }
                progress.Set(0.4f);
                if (!crimson)
                {
                    int num14 = (int)(genRand.Next(1, 3) * num);
                    int num15 = 0;
                    while (num15 < num14)
                    {
                        if (Biomes<CorruptionPitBiome>.Place(RandomWorldPoint((int)Game1.worldSurface, 50, 500, 50), structures))
                        {
                            num15++;
                        }
                    }
                }
                TrackGenerator.Run((int)(10f * num), ((int)(num * 25f)) + 250);
                progress.Set(1f);
            });
            AddGenerationPass("Final Cleanup", delegate(GenerationProgress progress)
            {
                for (int i = 0; i < Game1.maxTilesX; i++)
                {
                    for (int j = 0; j < Game1.maxTilesY; j++)
                    {
                        if (Game1.tile[i, j].active() && (!SolidTile(i, j + 1) || !SolidTile(i, j + 2)))
                        {
                            switch (Game1.tile[i, j].type)
                            {
                                case 0x7b:
                                    Game1.tile[i, j].type = 1;
                                    break;

                                case 0xe0:
                                    Game1.tile[i, j].type = 0x93;
                                    break;

                                case 0xea:
                                    Game1.tile[i, j].type = 0x18f;
                                    break;

                                case 0x35:
                                    goto Label_007A;

                                case 0x70:
                                    goto Label_0092;
                            }
                        }
                        continue;
                    Label_007A:
                        Game1.tile[i, j].type = 0x18d;
                        continue;
                    Label_0092:
                        Game1.tile[i, j].type = 0x18e;
                    }
                }
                noTileActions = false;
                gen = false;
                Game1.AnglerQuestSwap();
            });
            _generator.GenerateWorld(customProgressObject);
            Game1.WorldFileMetadata = FileMetadata.FromCurrentSettings(FileType.World);
        }

        public static void GERunner(int i, int j, float speedX = 0f, float speedY = 0f, bool good = true)
        {
            Vector2 vector;
            Vector2 vector2;
            int num5 = genRand.Next(200, 250);
            float num6 = Game1.maxTilesX / 0x1068;
            num5 = (int)(num5 * num6);
            double num7 = num5;
            vector.X = i;
            vector.Y = j;
            vector2.X = genRand.Next(-10, 11) * 0.1f;
            vector2.Y = genRand.Next(-10, 11) * 0.1f;
            if ((speedX != 0f) || (speedY != 0f))
            {
                vector2.X = speedX;
                vector2.Y = speedY;
            }
            bool flag = true;
            while (flag)
            {
                int num = (int)(vector.X - (num7 * 0.5));
                int maxTilesX = (int)(vector.X + (num7 * 0.5));
                int num2 = (int)(vector.Y - (num7 * 0.5));
                int maxTilesY = (int)(vector.Y + (num7 * 0.5));
                if (num < 0)
                {
                    num = 0;
                }
                if (maxTilesX > Game1.maxTilesX)
                {
                    maxTilesX = Game1.maxTilesX;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                for (int k = num; k < maxTilesX; k++)
                {
                    for (int m = num2; m < maxTilesY; m++)
                    {
                        if ((Math.Abs((float)(k - vector.X)) + Math.Abs((float)(m - vector.Y))) < ((num5 * 0.5) * (1.0 + (genRand.Next(-10, 11) * 0.015))))
                        {
                            if (good)
                            {
                                if ((((Game1.tile[k, m].wall == 0x3f) || (Game1.tile[k, m].wall == 0x41)) || ((Game1.tile[k, m].wall == 0x42) || (Game1.tile[k, m].wall == 0x44))) || ((Game1.tile[k, m].wall == 0x45) || (Game1.tile[k, m].wall == 0x51)))
                                {
                                    Game1.tile[k, m].wall = 70;
                                }
                                else if (Game1.tile[k, m].wall == 0xd8)
                                {
                                    Game1.tile[k, m].wall = 0xdb;
                                }
                                else if (Game1.tile[k, m].wall == 0xbb)
                                {
                                    Game1.tile[k, m].wall = 0xde;
                                }
                                if ((Game1.tile[k, m].wall == 3) || (Game1.tile[k, m].wall == 0x53))
                                {
                                    Game1.tile[k, m].wall = 0x1c;
                                }
                                if (Game1.tile[k, m].type == 2)
                                {
                                    Game1.tile[k, m].type = 0x6d;
                                    SquareTileFrame(k, m, true);
                                }
                                else if (Game1.tile[k, m].type == 1)
                                {
                                    Game1.tile[k, m].type = 0x75;
                                    SquareTileFrame(k, m, true);
                                }
                                else if ((Game1.tile[k, m].type == 0x35) || (Game1.tile[k, m].type == 0x7b))
                                {
                                    Game1.tile[k, m].type = 0x74;
                                    SquareTileFrame(k, m, true);
                                }
                                else if ((Game1.tile[k, m].type == 0x17) || (Game1.tile[k, m].type == 0xc7))
                                {
                                    Game1.tile[k, m].type = 0x6d;
                                    SquareTileFrame(k, m, true);
                                }
                                else if ((Game1.tile[k, m].type == 0x19) || (Game1.tile[k, m].type == 0xcb))
                                {
                                    Game1.tile[k, m].type = 0x75;
                                    SquareTileFrame(k, m, true);
                                }
                                else if ((Game1.tile[k, m].type == 0x70) || (Game1.tile[k, m].type == 0xea))
                                {
                                    Game1.tile[k, m].type = 0x74;
                                    SquareTileFrame(k, m, true);
                                }
                                else if (((Game1.tile[k, m].type == 0xa1) || (Game1.tile[k, m].type == 0xa3)) || (Game1.tile[k, m].type == 200))
                                {
                                    Game1.tile[k, m].type = 0xa4;
                                    SquareTileFrame(k, m, true);
                                }
                                else if (Game1.tile[k, m].type == 0x18c)
                                {
                                    Game1.tile[k, m].type = 0x193;
                                    SquareTileFrame(k, m, true);
                                }
                                else if (Game1.tile[k, m].type == 0x18d)
                                {
                                    Game1.tile[k, m].type = 0x192;
                                    SquareTileFrame(k, m, true);
                                }
                            }
                            else if (crimson)
                            {
                                if (((Game1.tile[k, m].wall == 0x3f) || (Game1.tile[k, m].wall == 0x41)) || ((Game1.tile[k, m].wall == 0x42) || (Game1.tile[k, m].wall == 0x44)))
                                {
                                    Game1.tile[k, m].wall = 0x51;
                                }
                                else if (Game1.tile[k, m].wall == 0xd8)
                                {
                                    Game1.tile[k, m].wall = 0xda;
                                }
                                else if (Game1.tile[k, m].wall == 0xbb)
                                {
                                    Game1.tile[k, m].wall = 0xdd;
                                }
                                if (Game1.tile[k, m].type == 2)
                                {
                                    Game1.tile[k, m].type = 0xc7;
                                    SquareTileFrame(k, m, true);
                                }
                                else if (Game1.tile[k, m].type == 1)
                                {
                                    Game1.tile[k, m].type = 0xcb;
                                    SquareTileFrame(k, m, true);
                                }
                                else if ((Game1.tile[k, m].type == 0x35) || (Game1.tile[k, m].type == 0x7b))
                                {
                                    Game1.tile[k, m].type = 0xea;
                                    SquareTileFrame(k, m, true);
                                }
                                else if (Game1.tile[k, m].type == 0x6d)
                                {
                                    Game1.tile[k, m].type = 0xc7;
                                    SquareTileFrame(k, m, true);
                                }
                                else if (Game1.tile[k, m].type == 0x75)
                                {
                                    Game1.tile[k, m].type = 0xcb;
                                    SquareTileFrame(k, m, true);
                                }
                                else if (Game1.tile[k, m].type == 0x74)
                                {
                                    Game1.tile[k, m].type = 0xea;
                                    SquareTileFrame(k, m, true);
                                }
                                else if ((Game1.tile[k, m].type == 0xa1) || (Game1.tile[k, m].type == 0xa4))
                                {
                                    Game1.tile[k, m].type = 200;
                                    SquareTileFrame(k, m, true);
                                }
                                else if (Game1.tile[k, m].type == 0x18c)
                                {
                                    Game1.tile[k, m].type = 0x191;
                                    SquareTileFrame(k, m, true);
                                }
                                else if (Game1.tile[k, m].type == 0x18d)
                                {
                                    Game1.tile[k, m].type = 0x18f;
                                    SquareTileFrame(k, m, true);
                                }
                            }
                            else
                            {
                                if (((Game1.tile[k, m].wall == 0x3f) || (Game1.tile[k, m].wall == 0x41)) || ((Game1.tile[k, m].wall == 0x42) || (Game1.tile[k, m].wall == 0x44)))
                                {
                                    Game1.tile[k, m].wall = 0x45;
                                }
                                else if (Game1.tile[k, m].wall == 0xd8)
                                {
                                    Game1.tile[k, m].wall = 0xd9;
                                }
                                else if (Game1.tile[k, m].wall == 0xbb)
                                {
                                    Game1.tile[k, m].wall = 220;
                                }
                                if (Game1.tile[k, m].type == 2)
                                {
                                    Game1.tile[k, m].type = 0x17;
                                    SquareTileFrame(k, m, true);
                                }
                                else if (Game1.tile[k, m].type == 1)
                                {
                                    Game1.tile[k, m].type = 0x19;
                                    SquareTileFrame(k, m, true);
                                }
                                else if ((Game1.tile[k, m].type == 0x35) || (Game1.tile[k, m].type == 0x7b))
                                {
                                    Game1.tile[k, m].type = 0x70;
                                    SquareTileFrame(k, m, true);
                                }
                                else if (Game1.tile[k, m].type == 0x6d)
                                {
                                    Game1.tile[k, m].type = 0x17;
                                    SquareTileFrame(k, m, true);
                                }
                                else if (Game1.tile[k, m].type == 0x75)
                                {
                                    Game1.tile[k, m].type = 0x19;
                                    SquareTileFrame(k, m, true);
                                }
                                else if (Game1.tile[k, m].type == 0x74)
                                {
                                    Game1.tile[k, m].type = 0x70;
                                    SquareTileFrame(k, m, true);
                                }
                                else if ((Game1.tile[k, m].type == 0xa1) || (Game1.tile[k, m].type == 0xa4))
                                {
                                    Game1.tile[k, m].type = 0xa3;
                                    SquareTileFrame(k, m, true);
                                }
                                else if (Game1.tile[k, m].type == 0x18c)
                                {
                                    Game1.tile[k, m].type = 400;
                                    SquareTileFrame(k, m, true);
                                }
                                else if (Game1.tile[k, m].type == 0x18d)
                                {
                                    Game1.tile[k, m].type = 0x18e;
                                    SquareTileFrame(k, m, true);
                                }
                            }
                        }
                    }
                }
                vector += vector2;
                vector2.X += genRand.Next(-10, 11) * 0.05f;
                if (vector2.X > (speedX + 1f))
                {
                    vector2.X = speedX + 1f;
                }
                if (vector2.X < (speedX - 1f))
                {
                    vector2.X = speedX - 1f;
                }
                if (((vector.X < -num5) || (vector.Y < -num5)) || ((vector.X > (Game1.maxTilesX + num5)) || (vector.Y > (Game1.maxTilesX + num5))))
                {
                    flag = false;
                }
            }
        }

        public static int GetNextJungleChestItem()
        {
            int num = 0xd3;
            switch ((JungleItemCount % 4))
            {
                case 0:
                    num = 0xd3;
                    break;

                case 1:
                    num = 0xd4;
                    break;

                case 2:
                    num = 0xd5;
                    break;

                case 3:
                    num = 0x3c4;
                    break;
            }
            if (genRand.Next(50) == 0)
            {
                num = 0x2f1;
            }
            else if (genRand.Next(30) == 0)
            {
                num = 0x8f4;
            }
            else if (genRand.Next(20) == 0)
            {
                num = 0xbc9;
            }
            JungleItemCount++;
            return num;
        }

        public static Point GetTopLeftAndStyles(ref int x, ref int y, int w, int h, int frameXinc, int frameYinc)
        {
            Tile tileSafely = Framing.GetTileSafely(x, y);
            Point point = new Point(tileSafely.frameX / (w * frameXinc), tileSafely.frameY / (h * frameYinc));
            if (frameXinc != 0)
            {
                x -= (tileSafely.frameX / frameXinc) % w;
            }
            if (frameYinc != 0)
            {
                y -= (tileSafely.frameY / frameYinc) % h;
            }
            return point;
        }

        public static void GrowAlch(int x, int y)
        {
            if (Game1.tile[x, y].active())
            {
                if ((Game1.tile[x, y].type == 0x52) && (genRand.Next(50) == 0))
                {
                    bool flag = false;
                    if (Game1.tile[x, y].frameX == 0x6c)
                    {
                        if (genRand.Next(3) != 0)
                        {
                            flag = true;
                        }
                    }
                    else
                    {
                        flag = true;
                    }
                    if (flag)
                    {
                        Game1.tile[x, y].type = 0x53;
                        if (Game1.netMode == 2)
                        {
                            NetMessage.SendTileSquare(-1, x, y, 1);
                        }
                        SquareTileFrame(x, y, true);
                    }
                }
                else if ((Game1.dayTime && (Game1.tile[x, y].type == 0x52)) && ((Game1.tile[x, y].frameX == 0) && (genRand.Next(50) == 0)))
                {
                    Game1.tile[x, y].type = 0x53;
                    if (Game1.netMode == 2)
                    {
                        NetMessage.SendTileSquare(-1, x, y, 1);
                    }
                    SquareTileFrame(x, y, true);
                }
                else if ((!Game1.dayTime && (Game1.tile[x, y].type == 0x52)) && ((Game1.tile[x, y].frameX == 0x12) && (genRand.Next(50) == 0)))
                {
                    Game1.tile[x, y].type = 0x53;
                    if (Game1.netMode == 2)
                    {
                        NetMessage.SendTileSquare(-1, x, y, 1);
                    }
                    SquareTileFrame(x, y, true);
                }
                else if ((Game1.tile[x, y].frameX == 0x24) && (genRand.Next(3) != 0))
                {
                    if (Game1.tile[x, y].type != 0x53)
                    {
                        if ((genRand.Next(5) == 0) || (Game1.tile[x, y].type == 0x54))
                        {
                            Game1.tile[x, y].type = 0x53;
                            if (Game1.netMode == 2)
                            {
                                NetMessage.SendTileSquare(-1, x, y, 1);
                            }
                        }
                    }
                    else if (genRand.Next(2) == 0)
                    {
                        Game1.tile[x, y].type = 0x54;
                        if (Game1.netMode == 2)
                        {
                            NetMessage.SendTileSquare(-1, x, y, 1);
                        }
                    }
                }
                else if (((Game1.tile[x, y].frameX == 0x6c) && (Game1.tile[x, y].type == 0x53)) && (genRand.Next(80) == 0))
                {
                    Game1.tile[x, y].type = 0x54;
                    if (Game1.netMode == 2)
                    {
                        NetMessage.SendTileSquare(-1, x, y, 1);
                    }
                    SquareTileFrame(x, y, true);
                }
            }
        }

        public static void GrowCactus(int i, int j)
        {
            int num = j;
            int num2 = i;
            if ((((Game1.tile[i, j].nactive() && !Game1.tile[i, j].halfBrick()) && (Game1.tile[i, j].slope() == 0)) && (Game1.tile[i, j - 1].liquid <= 0)) && ((((Game1.tile[i, j].type == 0x35) || (Game1.tile[i, j].type == 80)) || ((Game1.tile[i, j].type == 0xea) || (Game1.tile[i, j].type == 0x70))) || (Game1.tile[i, j].type == 0x74)))
            {
                if (((Game1.tile[i, j].type == 0x35) || (Game1.tile[i, j].type == 0x70)) || ((Game1.tile[i, j].type == 0x74) || (Game1.tile[i, j].type == 0xea)))
                {
                    if ((!Game1.tile[i, j - 1].active() && !Game1.tile[i - 1, j - 1].active()) && !Game1.tile[i + 1, j - 1].active())
                    {
                        int num3 = 0;
                        int num4 = 0;
                        for (int k = i - 6; k <= (i + 6); k++)
                        {
                            for (int m = j - 3; m <= (j + 1); m++)
                            {
                                try
                                {
                                    if (Game1.tile[k, m].active())
                                    {
                                        if (Game1.tile[k, m].type == 80)
                                        {
                                            num3++;
                                            if (num3 >= 4)
                                            {
                                                return;
                                            }
                                        }
                                        if (((Game1.tile[k, m].type == 0x35) || (Game1.tile[k, m].type == 0x70)) || ((Game1.tile[k, m].type == 0x74) || (Game1.tile[k, m].type == 0xea)))
                                        {
                                            num4++;
                                        }
                                    }
                                }
                                catch
                                {
                                }
                            }
                        }
                        if (num4 > 10)
                        {
                            Game1.tile[i, j - 1].active(true);
                            Game1.tile[i, j - 1].type = 80;
                            if (Game1.netMode == 2)
                            {
                                NetMessage.SendTileSquare(-1, i, j - 1, 1);
                            }
                            SquareTileFrame(num2, num - 1, true);
                        }
                    }
                }
                else if (Game1.tile[i, j].type == 80)
                {
                    while (Game1.tile[num2, num].active() && (Game1.tile[num2, num].type == 80))
                    {
                        num++;
                        if (!Game1.tile[num2, num].active() || (Game1.tile[num2, num].type != 80))
                        {
                            if (((Game1.tile[num2 - 1, num].active() && (Game1.tile[num2 - 1, num].type == 80)) && (Game1.tile[num2 - 1, num - 1].active() && (Game1.tile[num2 - 1, num - 1].type == 80))) && (num2 >= i))
                            {
                                num2--;
                            }
                            if (((Game1.tile[num2 + 1, num].active() && (Game1.tile[num2 + 1, num].type == 80)) && (Game1.tile[num2 + 1, num - 1].active() && (Game1.tile[num2 + 1, num - 1].type == 80))) && (num2 <= i))
                            {
                                num2++;
                            }
                        }
                    }
                    num--;
                    int num7 = num - j;
                    int num8 = i - num2;
                    num2 = i - num8;
                    num = j;
                    int num9 = 11 - num7;
                    int num10 = 0;
                    for (int n = num2 - 2; n <= (num2 + 2); n++)
                    {
                        for (int num12 = num - num9; num12 <= (num + num7); num12++)
                        {
                            if (Game1.tile[n, num12].active() && (Game1.tile[n, num12].type == 80))
                            {
                                num10++;
                            }
                        }
                    }
                    if (num10 < genRand.Next(11, 13))
                    {
                        num2 = i;
                        num = j;
                        if (num8 == 0)
                        {
                            if (num7 != 0)
                            {
                                bool flag = false;
                                bool flag2 = false;
                                if (Game1.tile[num2, num - 1].active() && (Game1.tile[num2, num - 1].type == 80))
                                {
                                    if (((!Game1.tile[num2 - 1, num].active() && !Game1.tile[num2 - 2, num + 1].active()) && (!Game1.tile[num2 - 1, num - 1].active() && !Game1.tile[num2 - 1, num + 1].active())) && !Game1.tile[num2 - 2, num].active())
                                    {
                                        flag = true;
                                    }
                                    if (((!Game1.tile[num2 + 1, num].active() && !Game1.tile[num2 + 2, num + 1].active()) && (!Game1.tile[num2 + 1, num - 1].active() && !Game1.tile[num2 + 1, num + 1].active())) && !Game1.tile[num2 + 2, num].active())
                                    {
                                        flag2 = true;
                                    }
                                }
                                int num13 = genRand.Next(3);
                                if ((num13 != 0) || !flag)
                                {
                                    if ((num13 != 1) || !flag2)
                                    {
                                        if (num7 < genRand.Next(2, 8))
                                        {
                                            if (Game1.tile[num2 - 1, num - 1].active())
                                            {
                                                ushort type = Game1.tile[num2 - 1, num - 1].type;
                                            }
                                            if ((!Game1.tile[num2 + 1, num - 1].active() || (Game1.tile[num2 + 1, num - 1].type != 80)) && !Game1.tile[num2, num - 1].active())
                                            {
                                                Game1.tile[num2, num - 1].active(true);
                                                Game1.tile[num2, num - 1].type = 80;
                                                SquareTileFrame(num2, num - 1, true);
                                                if (Game1.netMode == 2)
                                                {
                                                    NetMessage.SendTileSquare(-1, num2, num - 1, 1);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        Game1.tile[num2 + 1, num].active(true);
                                        Game1.tile[num2 + 1, num].type = 80;
                                        SquareTileFrame(num2 + 1, num, true);
                                        if (Game1.netMode == 2)
                                        {
                                            NetMessage.SendTileSquare(-1, num2 + 1, num, 1);
                                        }
                                    }
                                }
                                else
                                {
                                    Game1.tile[num2 - 1, num].active(true);
                                    Game1.tile[num2 - 1, num].type = 80;
                                    SquareTileFrame(num2 - 1, num, true);
                                    if (Game1.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, num2 - 1, num, 1);
                                    }
                                }
                            }
                            else if (!Game1.tile[num2, num - 1].active())
                            {
                                Game1.tile[num2, num - 1].active(true);
                                Game1.tile[num2, num - 1].type = 80;
                                SquareTileFrame(num2, num - 1, true);
                                if (Game1.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, num2, num - 1, 1);
                                }
                            }
                        }
                        else if (((!Game1.tile[num2, num - 1].active() && !Game1.tile[num2, num - 2].active()) && (!Game1.tile[num2 + num8, num - 1].active() && Game1.tile[num2 - num8, num - 1].active())) && (Game1.tile[num2 - num8, num - 1].type == 80))
                        {
                            Game1.tile[num2, num - 1].active(true);
                            Game1.tile[num2, num - 1].type = 80;
                            SquareTileFrame(num2, num - 1, true);
                            if (Game1.netMode == 2)
                            {
                                NetMessage.SendTileSquare(-1, num2, num - 1, 1);
                            }
                        }
                    }
                }
            }
        }

        public static bool GrowEpicTree(int i, int y)
        {
            int num = y;
            while (Game1.tile[i, num].type == 20)
            {
                num++;
            }
            if ((((Game1.tile[i, num].active() && !Game1.tile[i, num].halfBrick()) && ((Game1.tile[i, num].slope() == 0) && (Game1.tile[i, num].type == 2))) && ((Game1.tile[i, num - 1].wall == 0) && (Game1.tile[i, num - 1].liquid == 0))) && ((Game1.tile[i - 1, num].active() && (((Game1.tile[i - 1, num].type == 2) || (Game1.tile[i - 1, num].type == 0x17)) || ((Game1.tile[i - 1, num].type == 60) || (Game1.tile[i - 1, num].type == 0x6d)))) || (Game1.tile[i + 1, num].active() && (((Game1.tile[i + 1, num].type == 2) || (Game1.tile[i + 1, num].type == 0x17)) || ((Game1.tile[i + 1, num].type == 60) || (Game1.tile[i + 1, num].type == 0x6d))))))
            {
                int num2 = 2;
                if (EmptyTileCheck(i - num2, i + num2, num - 0x37, num - 1, 20))
                {
                    int num3;
                    bool flag = false;
                    bool flag2 = false;
                    int num5 = genRand.Next(20, 30);
                    for (int j = num - num5; j < num; j++)
                    {
                        Game1.tile[i, j].frameNumber((byte)genRand.Next(3));
                        Game1.tile[i, j].active(true);
                        Game1.tile[i, j].type = 5;
                        num3 = genRand.Next(3);
                        int num4 = genRand.Next(10);
                        if ((j == (num - 1)) || (j == (num - num5)))
                        {
                            num4 = 0;
                        }
                        while ((((num4 == 5) || (num4 == 7)) && flag) || (((num4 == 6) || (num4 == 7)) && flag2))
                        {
                            num4 = genRand.Next(10);
                        }
                        flag = false;
                        flag2 = false;
                        if ((num4 == 5) || (num4 == 7))
                        {
                            flag = true;
                        }
                        if ((num4 == 6) || (num4 == 7))
                        {
                            flag2 = true;
                        }
                        if (num4 == 1)
                        {
                            switch (num3)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 0;
                                    Game1.tile[i, j].frameY = 0x42;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 0;
                                    Game1.tile[i, j].frameY = 0x58;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 0;
                                    Game1.tile[i, j].frameY = 110;
                                    break;
                            }
                        }
                        else if (num4 == 2)
                        {
                            switch (num3)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 0x16;
                                    Game1.tile[i, j].frameY = 0;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 0x16;
                                    Game1.tile[i, j].frameY = 0x16;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 0x16;
                                    Game1.tile[i, j].frameY = 0x2c;
                                    break;
                            }
                        }
                        else if (num4 == 3)
                        {
                            switch (num3)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 0x2c;
                                    Game1.tile[i, j].frameY = 0x42;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 0x2c;
                                    Game1.tile[i, j].frameY = 0x58;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 0x2c;
                                    Game1.tile[i, j].frameY = 110;
                                    break;
                            }
                        }
                        else if (num4 == 4)
                        {
                            switch (num3)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 0x16;
                                    Game1.tile[i, j].frameY = 0x42;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 0x16;
                                    Game1.tile[i, j].frameY = 0x58;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 0x16;
                                    Game1.tile[i, j].frameY = 110;
                                    break;
                            }
                        }
                        else if (num4 == 5)
                        {
                            switch (num3)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 0x58;
                                    Game1.tile[i, j].frameY = 0;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 0x58;
                                    Game1.tile[i, j].frameY = 0x16;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 0x58;
                                    Game1.tile[i, j].frameY = 0x2c;
                                    break;
                            }
                        }
                        else if (num4 == 6)
                        {
                            switch (num3)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 0x42;
                                    Game1.tile[i, j].frameY = 0x42;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 0x42;
                                    Game1.tile[i, j].frameY = 0x58;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 0x42;
                                    Game1.tile[i, j].frameY = 110;
                                    break;
                            }
                        }
                        else if (num4 == 7)
                        {
                            switch (num3)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 110;
                                    Game1.tile[i, j].frameY = 0x42;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 110;
                                    Game1.tile[i, j].frameY = 0x58;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 110;
                                    Game1.tile[i, j].frameY = 110;
                                    break;
                            }
                        }
                        else
                        {
                            switch (num3)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 0;
                                    Game1.tile[i, j].frameY = 0;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 0;
                                    Game1.tile[i, j].frameY = 0x16;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 0;
                                    Game1.tile[i, j].frameY = 0x2c;
                                    break;
                            }
                        }
                        if ((num4 == 5) || (num4 == 7))
                        {
                            Game1.tile[i - 1, j].active(true);
                            Game1.tile[i - 1, j].type = 5;
                            num3 = genRand.Next(3);
                            if (genRand.Next(3) < 2)
                            {
                                switch (num3)
                                {
                                    case 0:
                                        Game1.tile[i - 1, j].frameX = 0x2c;
                                        Game1.tile[i - 1, j].frameY = 0xc6;
                                        break;

                                    case 1:
                                        Game1.tile[i - 1, j].frameX = 0x2c;
                                        Game1.tile[i - 1, j].frameY = 220;
                                        break;

                                    case 2:
                                        Game1.tile[i - 1, j].frameX = 0x2c;
                                        Game1.tile[i - 1, j].frameY = 0xf2;
                                        break;
                                }
                            }
                            else
                            {
                                switch (num3)
                                {
                                    case 0:
                                        Game1.tile[i - 1, j].frameX = 0x42;
                                        Game1.tile[i - 1, j].frameY = 0;
                                        break;

                                    case 1:
                                        Game1.tile[i - 1, j].frameX = 0x42;
                                        Game1.tile[i - 1, j].frameY = 0x16;
                                        break;

                                    case 2:
                                        Game1.tile[i - 1, j].frameX = 0x42;
                                        Game1.tile[i - 1, j].frameY = 0x2c;
                                        break;
                                }
                            }
                        }
                        if ((num4 == 6) || (num4 == 7))
                        {
                            Game1.tile[i + 1, j].active(true);
                            Game1.tile[i + 1, j].type = 5;
                            num3 = genRand.Next(3);
                            if (genRand.Next(3) < 2)
                            {
                                switch (num3)
                                {
                                    case 0:
                                        Game1.tile[i + 1, j].frameX = 0x42;
                                        Game1.tile[i + 1, j].frameY = 0xc6;
                                        break;

                                    case 1:
                                        Game1.tile[i + 1, j].frameX = 0x42;
                                        Game1.tile[i + 1, j].frameY = 220;
                                        break;

                                    case 2:
                                        Game1.tile[i + 1, j].frameX = 0x42;
                                        Game1.tile[i + 1, j].frameY = 0xf2;
                                        break;
                                }
                            }
                            else
                            {
                                switch (num3)
                                {
                                    case 0:
                                        Game1.tile[i + 1, j].frameX = 0x58;
                                        Game1.tile[i + 1, j].frameY = 0x42;
                                        break;

                                    case 1:
                                        Game1.tile[i + 1, j].frameX = 0x58;
                                        Game1.tile[i + 1, j].frameY = 0x58;
                                        break;

                                    case 2:
                                        Game1.tile[i + 1, j].frameX = 0x58;
                                        Game1.tile[i + 1, j].frameY = 110;
                                        break;
                                }
                            }
                        }
                    }
                    int num7 = genRand.Next(3);
                    bool flag3 = false;
                    bool flag4 = false;
                    if (((Game1.tile[i - 1, num].active() && !Game1.tile[i - 1, num].halfBrick()) && (Game1.tile[i - 1, num].slope() == 0)) && (((Game1.tile[i - 1, num].type == 2) || (Game1.tile[i - 1, num].type == 0x17)) || ((Game1.tile[i - 1, num].type == 60) || (Game1.tile[i - 1, num].type == 0x6d))))
                    {
                        flag3 = true;
                    }
                    if (((Game1.tile[i + 1, num].active() && !Game1.tile[i + 1, num].halfBrick()) && (Game1.tile[i + 1, num].slope() == 0)) && (((Game1.tile[i + 1, num].type == 2) || (Game1.tile[i + 1, num].type == 0x17)) || ((Game1.tile[i + 1, num].type == 60) || (Game1.tile[i + 1, num].type == 0x6d))))
                    {
                        flag4 = true;
                    }
                    if (!flag3)
                    {
                        switch (num7)
                        {
                            case 0:
                                num7 = 2;
                                break;

                            case 1:
                                num7 = 3;
                                break;
                        }
                    }
                    if (!flag4)
                    {
                        switch (num7)
                        {
                            case 0:
                                num7 = 1;
                                break;

                            case 2:
                                num7 = 3;
                                break;
                        }
                    }
                    if (flag3 && !flag4)
                    {
                        num7 = 2;
                    }
                    if (flag4 && !flag3)
                    {
                        num7 = 1;
                    }
                    if ((num7 == 0) || (num7 == 1))
                    {
                        Game1.tile[i + 1, num - 1].active(true);
                        Game1.tile[i + 1, num - 1].type = 5;
                        switch (genRand.Next(3))
                        {
                            case 0:
                                Game1.tile[i + 1, num - 1].frameX = 0x16;
                                Game1.tile[i + 1, num - 1].frameY = 0x84;
                                break;

                            case 1:
                                Game1.tile[i + 1, num - 1].frameX = 0x16;
                                Game1.tile[i + 1, num - 1].frameY = 0x9a;
                                break;

                            case 2:
                                Game1.tile[i + 1, num - 1].frameX = 0x16;
                                Game1.tile[i + 1, num - 1].frameY = 0xb0;
                                break;
                        }
                    }
                    if ((num7 == 0) || (num7 == 2))
                    {
                        Game1.tile[i - 1, num - 1].active(true);
                        Game1.tile[i - 1, num - 1].type = 5;
                        switch (genRand.Next(3))
                        {
                            case 0:
                                Game1.tile[i - 1, num - 1].frameX = 0x2c;
                                Game1.tile[i - 1, num - 1].frameY = 0x84;
                                break;

                            case 1:
                                Game1.tile[i - 1, num - 1].frameX = 0x2c;
                                Game1.tile[i - 1, num - 1].frameY = 0x9a;
                                break;

                            case 2:
                                Game1.tile[i - 1, num - 1].frameX = 0x2c;
                                Game1.tile[i - 1, num - 1].frameY = 0xb0;
                                break;
                        }
                    }
                    num3 = genRand.Next(3);
                    if (num7 == 0)
                    {
                        switch (num3)
                        {
                            case 0:
                                Game1.tile[i, num - 1].frameX = 0x58;
                                Game1.tile[i, num - 1].frameY = 0x84;
                                break;

                            case 1:
                                Game1.tile[i, num - 1].frameX = 0x58;
                                Game1.tile[i, num - 1].frameY = 0x9a;
                                break;

                            case 2:
                                Game1.tile[i, num - 1].frameX = 0x58;
                                Game1.tile[i, num - 1].frameY = 0xb0;
                                break;
                        }
                    }
                    else if (num7 == 1)
                    {
                        switch (num3)
                        {
                            case 0:
                                Game1.tile[i, num - 1].frameX = 0;
                                Game1.tile[i, num - 1].frameY = 0x84;
                                break;

                            case 1:
                                Game1.tile[i, num - 1].frameX = 0;
                                Game1.tile[i, num - 1].frameY = 0x9a;
                                break;

                            case 2:
                                Game1.tile[i, num - 1].frameX = 0;
                                Game1.tile[i, num - 1].frameY = 0xb0;
                                break;
                        }
                    }
                    else if (num7 == 2)
                    {
                        switch (num3)
                        {
                            case 0:
                                Game1.tile[i, num - 1].frameX = 0x42;
                                Game1.tile[i, num - 1].frameY = 0x84;
                                break;

                            case 1:
                                Game1.tile[i, num - 1].frameX = 0x42;
                                Game1.tile[i, num - 1].frameY = 0x9a;
                                break;

                            case 2:
                                Game1.tile[i, num - 1].frameX = 0x42;
                                Game1.tile[i, num - 1].frameY = 0xb0;
                                break;
                        }
                    }
                    if (genRand.Next(8) != 0)
                    {
                        switch (genRand.Next(3))
                        {
                            case 0:
                                Game1.tile[i, num - num5].frameX = 0x16;
                                Game1.tile[i, num - num5].frameY = 0xc6;
                                break;

                            case 1:
                                Game1.tile[i, num - num5].frameX = 0x16;
                                Game1.tile[i, num - num5].frameY = 220;
                                break;

                            case 2:
                                Game1.tile[i, num - num5].frameX = 0x16;
                                Game1.tile[i, num - num5].frameY = 0xf2;
                                break;
                        }
                    }
                    else
                    {
                        switch (genRand.Next(3))
                        {
                            case 0:
                                Game1.tile[i, num - num5].frameX = 0;
                                Game1.tile[i, num - num5].frameY = 0xc6;
                                break;

                            case 1:
                                Game1.tile[i, num - num5].frameX = 0;
                                Game1.tile[i, num - num5].frameY = 220;
                                break;

                            case 2:
                                Game1.tile[i, num - num5].frameX = 0;
                                Game1.tile[i, num - num5].frameY = 0xf2;
                                break;
                        }
                    }
                    RangeFrame(i - 2, (num - num5) - 1, i + 2, num + 1);
                    if (Game1.netMode == 2)
                    {
                        NetMessage.SendTileSquare(-1, i, num - ((int)(num5 * 0.5)), num5 + 1);
                    }
                    return true;
                }
            }
            return false;
        }

        public static bool GrowLivingTree(int i, int j)
        {
            int index = 0;
            int[] numArray = new int[0x3e8];
            int[] numArray2 = new int[0x3e8];
            int[] numArray3 = new int[0x3e8];
            int[] numArray4 = new int[0x3e8];
            int num2 = 0;
            int[] numArray5 = new int[0x7d0];
            int[] numArray6 = new int[0x7d0];
            bool[] flagArray = new bool[0x7d0];
            if (!SolidTile(i, j + 1))
            {
                return false;
            }
            if (Game1.tile[i, j].active())
            {
                return false;
            }
            int num3 = i - genRand.Next(1, 4);
            int num4 = i + genRand.Next(1, 4);
            if (j < 150)
            {
                return false;
            }
            int num5 = i - 50;
            int num6 = i + 50;
            for (int k = num5; k <= num6; k++)
            {
                for (int num8 = 5; num8 < (j - 5); num8++)
                {
                    if (Game1.tile[k, num8].active())
                    {
                        return false;
                    }
                }
            }
            int num9 = num3;
            int num10 = num4;
            int num11 = num3;
            int num12 = num4;
            int minValue = num4 - num3;
            bool flag = true;
            int num14 = genRand.Next(-10, -5);
            int num15 = genRand.Next(2);
            int num16 = j;
            while (flag)
            {
                num14++;
                if (num14 > genRand.Next(5, 30))
                {
                    num14 = 0;
                    numArray2[index] = num16 + genRand.Next(5);
                    if (genRand.Next(5) == 0)
                    {
                        if (num15 == 0)
                        {
                            num15 = 1;
                        }
                        else
                        {
                            num15 = 0;
                        }
                    }
                    if (num15 == 0)
                    {
                        numArray3[index] = -1;
                        numArray[index] = num3;
                        numArray4[index] = num4 - num3;
                        if (genRand.Next(2) == 0)
                        {
                            num3++;
                        }
                        num9++;
                        num15 = 1;
                    }
                    else
                    {
                        numArray3[index] = 1;
                        numArray[index] = num4;
                        numArray4[index] = num4 - num3;
                        if (genRand.Next(2) == 0)
                        {
                            num4--;
                        }
                        num10--;
                        num15 = 0;
                    }
                    if (num9 == num10)
                    {
                        flag = false;
                    }
                    index++;
                }
                for (int num17 = num3; num17 <= num4; num17++)
                {
                    Game1.tile[num17, num16].type = 0xbf;
                    Game1.tile[num17, num16].active(true);
                    Game1.tile[num17, num16].halfBrick(false);
                }
                num16--;
            }
            for (int m = 0; m < index; m++)
            {
                int num19 = numArray[m] + numArray3[m];
                int num20 = numArray2[m];
                int num21 = (int)(numArray4[m] * (1f + (genRand.Next(20, 30) * 0.1f)));
                Game1.tile[num19, num20 + 1].type = 0xbf;
                Game1.tile[num19, num20 + 1].active(true);
                Game1.tile[num19, num20 + 1].halfBrick(false);
                int num22 = genRand.Next(3, 5);
                while (num21 > 0)
                {
                    num21--;
                    Game1.tile[num19, num20].type = 0xbf;
                    Game1.tile[num19, num20].active(true);
                    Game1.tile[num19, num20].halfBrick(false);
                    if (genRand.Next(10) == 0)
                    {
                        if (genRand.Next(2) == 0)
                        {
                            num20--;
                        }
                        else
                        {
                            num20++;
                        }
                    }
                    else
                    {
                        num19 += numArray3[m];
                    }
                    if (num22 > 0)
                    {
                        num22--;
                    }
                    else if (genRand.Next(2) == 0)
                    {
                        num22 = genRand.Next(2, 5);
                        if (genRand.Next(2) == 0)
                        {
                            Game1.tile[num19, num20].type = 0xbf;
                            Game1.tile[num19, num20].active(true);
                            Game1.tile[num19, num20].halfBrick(false);
                            Game1.tile[num19, num20 - 1].type = 0xbf;
                            Game1.tile[num19, num20 - 1].active(true);
                            Game1.tile[num19, num20 - 1].halfBrick(false);
                            numArray5[num2] = num19;
                            numArray6[num2] = num20;
                            num2++;
                        }
                        else
                        {
                            Game1.tile[num19, num20].type = 0xbf;
                            Game1.tile[num19, num20].active(true);
                            Game1.tile[num19, num20].halfBrick(false);
                            Game1.tile[num19, num20 + 1].type = 0xbf;
                            Game1.tile[num19, num20 + 1].active(true);
                            Game1.tile[num19, num20 + 1].halfBrick(false);
                            numArray5[num2] = num19;
                            numArray6[num2] = num20;
                            num2++;
                        }
                    }
                    if (num21 == 0)
                    {
                        numArray5[num2] = num19;
                        numArray6[num2] = num20;
                        num2++;
                    }
                }
            }
            int num23 = (num3 + num4) / 2;
            int num24 = num16;
            int num25 = genRand.Next(minValue * 3, minValue * 5);
            int num26 = 0;
            int num27 = 0;
            while (num25 > 0)
            {
                Game1.tile[num23, num24].type = 0xbf;
                Game1.tile[num23, num24].active(true);
                Game1.tile[num23, num24].halfBrick(false);
                if (num26 > 0)
                {
                    num26--;
                }
                if (num27 > 0)
                {
                    num27--;
                }
                for (int num28 = -1; num28 < 2; num28++)
                {
                    if (((num28 != 0) && (((num28 < 0) && (num26 == 0)) || ((num28 > 0) && (num27 == 0)))) && (genRand.Next(2) == 0))
                    {
                        int num29 = num23;
                        int num30 = num24;
                        int num31 = genRand.Next(minValue, minValue * 3);
                        if (num28 < 0)
                        {
                            num26 = genRand.Next(3, 5);
                        }
                        if (num28 > 0)
                        {
                            num27 = genRand.Next(3, 5);
                        }
                        int num32 = 0;
                        while (num31 > 0)
                        {
                            num31--;
                            num29 += num28;
                            Game1.tile[num29, num30].type = 0xbf;
                            Game1.tile[num29, num30].active(true);
                            Game1.tile[num29, num30].halfBrick(false);
                            if (num31 == 0)
                            {
                                numArray5[num2] = num29;
                                numArray6[num2] = num30;
                                flagArray[num2] = true;
                                num2++;
                            }
                            if (genRand.Next(5) == 0)
                            {
                                if (genRand.Next(2) == 0)
                                {
                                    num30--;
                                }
                                else
                                {
                                    num30++;
                                }
                                Game1.tile[num29, num30].type = 0xbf;
                                Game1.tile[num29, num30].active(true);
                                Game1.tile[num29, num30].halfBrick(false);
                            }
                            if (num32 > 0)
                            {
                                num32--;
                            }
                            else if (genRand.Next(3) == 0)
                            {
                                num32 = genRand.Next(2, 4);
                                int num33 = num29;
                                int num34 = num30;
                                if (genRand.Next(2) == 0)
                                {
                                    num34--;
                                }
                                else
                                {
                                    num34++;
                                }
                                Game1.tile[num33, num34].type = 0xbf;
                                Game1.tile[num33, num34].active(true);
                                Game1.tile[num33, num34].halfBrick(false);
                                numArray5[num2] = num33;
                                numArray6[num2] = num34;
                                flagArray[num2] = true;
                                num2++;
                            }
                        }
                    }
                }
                numArray5[num2] = num23;
                numArray6[num2] = num24;
                num2++;
                if (genRand.Next(4) == 0)
                {
                    if (genRand.Next(2) == 0)
                    {
                        num23--;
                    }
                    else
                    {
                        num23++;
                    }
                    Game1.tile[num23, num24].type = 0xbf;
                    Game1.tile[num23, num24].active(true);
                    Game1.tile[num23, num24].halfBrick(false);
                }
                num24--;
                num25--;
            }
            for (int n = num11; n <= num12; n++)
            {
                int num36 = genRand.Next(1, 6);
                int num37 = j + 1;
                while (num36 > 0)
                {
                    if (SolidTile(n, num37))
                    {
                        num36--;
                    }
                    Game1.tile[n, num37].type = 0xbf;
                    Game1.tile[n, num37].active(true);
                    Game1.tile[n, num37].halfBrick(false);
                    num37++;
                }
                int num38 = num37;
                for (int num39 = 0; num39 < 2; num39++)
                {
                    num37 = num38;
                    int num40 = (num11 + num12) / 2;
                    int num41 = 0;
                    int num42 = 1;
                    if (n < num40)
                    {
                        num41 = -1;
                    }
                    else
                    {
                        num41 = 1;
                    }
                    if ((n == num40) || ((minValue > 6) && ((n == (num40 - 1)) || (n == (num40 + 1)))))
                    {
                        num41 = 0;
                    }
                    int num43 = num41;
                    int num44 = n;
                    num36 = genRand.Next((int)(minValue * 2.5), minValue * 4);
                    while (num36 > 0)
                    {
                        num36--;
                        num44 += num41;
                        Game1.tile[num44, num37].type = 0xbf;
                        Game1.tile[num44, num37].active(true);
                        Game1.tile[num44, num37].halfBrick(false);
                        num37 += num42;
                        Game1.tile[num44, num37].type = 0xbf;
                        Game1.tile[num44, num37].active(true);
                        Game1.tile[num44, num37].halfBrick(false);
                        if (!Game1.tile[num44, num37 + 1].active())
                        {
                            num41 = 0;
                            num42 = 1;
                        }
                        if (genRand.Next(3) == 0)
                        {
                            if (num43 < 0)
                            {
                                if (num41 == 0)
                                {
                                    num41 = -1;
                                }
                                else
                                {
                                    num41 = 0;
                                }
                            }
                            else if (num43 > 0)
                            {
                                if (num41 == 0)
                                {
                                    num41 = 1;
                                }
                                else
                                {
                                    num41 = 0;
                                }
                            }
                            else
                            {
                                num41 = genRand.Next(-1, 2);
                            }
                        }
                        if (genRand.Next(3) == 0)
                        {
                            if (num42 == 0)
                            {
                                num42 = 1;
                            }
                            else
                            {
                                num42 = 0;
                            }
                        }
                    }
                }
            }
            for (int num45 = 0; num45 < num2; num45++)
            {
                int num46 = (int)(genRand.Next(5, 8) * (1f + (minValue * 0.05f)));
                if (flagArray[num45])
                {
                    num46 = genRand.Next(7, 13);
                }
                int num47 = numArray5[num45] - num46;
                int num48 = numArray5[num45] + num46;
                int num49 = numArray6[num45] - num46;
                int num50 = numArray6[num45] + num46;
                float num51 = 2f - (genRand.Next(5) * 0.1f);
                for (int num52 = num47; num52 <= num48; num52++)
                {
                    for (int num53 = num49; num53 <= num50; num53++)
                    {
                        if ((Game1.tile[num52, num53].type != 0xbf) && ((Math.Abs((int)(numArray5[num45] - num52)) + (Math.Abs((int)(numArray6[num45] - num53)) * num51)) < num46))
                        {
                            Game1.tile[num52, num53].type = 0xc0;
                            Game1.tile[num52, num53].active(true);
                            Game1.tile[num52, num53].halfBrick(false);
                        }
                    }
                }
            }
            if ((minValue >= 4) && (genRand.Next(3) != 0))
            {
                bool flag2 = false;
                int num54 = num11;
                int num55 = num12;
                int num56 = j - 5;
                int num57 = 50;
                int num58 = genRand.Next(400, 700);
                int num59 = 1;
                bool flag3 = true;
                while (num58 > 0)
                {
                    num56++;
                    num58--;
                    num57--;
                    int num60 = (num11 + num12) / 2;
                    int num61 = 0;
                    if ((num56 > j) && (minValue == 4))
                    {
                        num61 = 1;
                    }
                    for (int num62 = num11 - num61; num62 <= (num12 + num61); num62++)
                    {
                        if ((num62 > (num60 - 2)) && (num62 <= (num60 + 1)))
                        {
                            if (Game1.tile[num62, num56].type != 0x13)
                            {
                                Game1.tile[num62, num56].active(false);
                            }
                            Game1.tile[num62, num56].wall = 0x4e;
                            if ((Game1.tile[num62 - 1, num56].wall > 0) || (num56 >= Game1.worldSurface))
                            {
                                Game1.tile[num62 - 1, num56].wall = 0x4e;
                            }
                            if ((Game1.tile[num62 + 1, num56].wall > 0) || (num56 >= Game1.worldSurface))
                            {
                                Game1.tile[num62 + 1, num56].wall = 0x4e;
                            }
                        }
                        else
                        {
                            Game1.tile[num62, num56].type = 0xbf;
                            Game1.tile[num62, num56].active(true);
                            Game1.tile[num62, num56].halfBrick(false);
                        }
                    }
                    num59++;
                    if (num59 >= 6)
                    {
                        num59 = 0;
                        int num63 = genRand.Next(3);
                        if (num63 == 0)
                        {
                            num63 = -1;
                        }
                        if (flag3)
                        {
                            num63 = 2;
                        }
                        if (num63 == 2)
                        {
                            flag3 = false;
                            for (int num64 = num11; num64 <= num12; num64++)
                            {
                                if ((num64 > (num60 - 2)) && (num64 <= (num60 + 1)))
                                {
                                    Game1.tile[num64, num56 + 1].active(false);
                                    PlaceTile(num64, num56 + 1, 0x13, true, false, -1, 0x17);
                                }
                            }
                        }
                        else
                        {
                            num11 += num63;
                            num12 += num63;
                        }
                        if ((num57 <= 0) && !flag2)
                        {
                            flag2 = true;
                            int num65 = genRand.Next(2);
                            if (num65 == 0)
                            {
                                num65 = -1;
                            }
                            int num66 = num56 - 2;
                            int num67 = num56;
                            int num68 = (num11 + num12) / 2;
                            if (num65 < 0)
                            {
                                num68--;
                            }
                            if (num65 > 0)
                            {
                                num68++;
                            }
                            int num69 = genRand.Next(15, 30);
                            int num70 = num68 + num69;
                            if (num65 < 0)
                            {
                                num70 = num68;
                                num68 -= num69;
                            }
                            dMinX = num68;
                            dMaxX = num70;
                            if (num65 < 0)
                            {
                                dMinX -= 40;
                            }
                            else
                            {
                                dMaxX += 40;
                            }
                            bool flag4 = false;
                            for (int num71 = num68; num71 < num70; num71++)
                            {
                                for (int num72 = num56 - 20; num72 < (num56 + 10); num72++)
                                {
                                    if (((Game1.tile[num71, num72].wall == 0) && !Game1.tile[num71, num72].active()) && (num72 < Game1.worldSurface))
                                    {
                                        flag4 = true;
                                    }
                                }
                            }
                            if (!flag4)
                            {
                                for (int num73 = num68; num73 <= num70; num73++)
                                {
                                    for (int num74 = num66 - 2; num74 <= (num67 + 2); num74++)
                                    {
                                        if ((Game1.tile[num73, num74].wall != 0x4e) && (Game1.tile[num73, num74].type != 0x13))
                                        {
                                            Game1.tile[num73, num74].active(true);
                                            Game1.tile[num73, num74].type = 0xbf;
                                            Game1.tile[num73, num74].halfBrick(false);
                                        }
                                        if ((num74 >= num66) && (num74 <= num67))
                                        {
                                            Game1.tile[num73, num74].liquid = 0;
                                            Game1.tile[num73, num74].wall = 0x4e;
                                            Game1.tile[num73, num74].active(false);
                                        }
                                    }
                                }
                                int num75 = ((num11 + num12) / 2) + (3 * num65);
                                int num76 = num56;
                                PlaceTile(num75, num76, 10, true, false, -1, 7);
                                int num77 = genRand.Next(5, 9);
                                int num78 = genRand.Next(4, 6);
                                if (num65 < 0)
                                {
                                    num70 = num68 + num77;
                                    num68 -= num77;
                                }
                                else
                                {
                                    num68 = num70 - num77;
                                    num70 += num77;
                                }
                                num66 = num67 - num78;
                                for (int num79 = num68 - 2; num79 <= (num70 + 2); num79++)
                                {
                                    for (int num80 = num66 - 2; num80 <= (num67 + 2); num80++)
                                    {
                                        if ((Game1.tile[num79, num80].wall != 0x4e) && (Game1.tile[num79, num80].type != 0x13))
                                        {
                                            Game1.tile[num79, num80].active(true);
                                            Game1.tile[num79, num80].type = 0xbf;
                                            Game1.tile[num79, num80].halfBrick(false);
                                        }
                                        if (((num80 >= num66) && (num80 <= num67)) && ((num79 >= num68) && (num79 <= num70)))
                                        {
                                            Game1.tile[num79, num80].liquid = 0;
                                            Game1.tile[num79, num80].wall = 0x4e;
                                            Game1.tile[num79, num80].active(false);
                                        }
                                    }
                                }
                                num75 = num68 - 2;
                                if (num65 < 0)
                                {
                                    num75 = num70 + 2;
                                }
                                PlaceTile(num75, num76, 10, true, false, -1, 7);
                                int num81 = num70;
                                if (num65 < 0)
                                {
                                    num81 = num68;
                                }
                                PlaceTile(num81, num56, 15, true, false, -1, 5);
                                if (num65 < 0)
                                {
                                    Tile tile1 = Game1.tile[num81, num56 - 1];
                                    tile1.frameX = (short)(tile1.frameX + 0x12);
                                    Tile tile2 = Game1.tile[num81, num56];
                                    tile2.frameX = (short)(tile2.frameX + 0x12);
                                }
                                num81 = num70 - 2;
                                if (num65 < 0)
                                {
                                    num81 = num68 + 2;
                                }
                                PlaceTile(num81, num56, 14, true, false, -1, 6);
                                num81 = num70 - 4;
                                if (num65 < 0)
                                {
                                    num81 = num68 + 4;
                                }
                                PlaceTile(num81, num56, 15, true, false, -1, 5);
                                if (num65 > 0)
                                {
                                    Tile tile3 = Game1.tile[num81, num56 - 1];
                                    tile3.frameX = (short)(tile3.frameX + 0x12);
                                    Tile tile4 = Game1.tile[num81, num56];
                                    tile4.frameX = (short)(tile4.frameX + 0x12);
                                }
                                num81 = num70 - 7;
                                if (num65 < 0)
                                {
                                    num81 = num68 + 8;
                                }
                                int contain = genRand.Next(2);
                                contain = 0x340;
                                AddBuriedChest(num81, num56, contain, false, 12);
                            }
                        }
                    }
                    if (num57 <= 0)
                    {
                        bool flag5 = true;
                        for (int num83 = num11; num83 <= num12; num83++)
                        {
                            for (int num84 = num56 + 1; num84 <= (num56 + 4); num84++)
                            {
                                if (SolidTile(num83, num84))
                                {
                                    flag5 = false;
                                }
                            }
                        }
                        if (flag5)
                        {
                            num58 = 0;
                        }
                    }
                }
                num11 = num54;
                num12 = num55;
                int num85 = (num11 + num12) / 2;
                if (genRand.Next(2) == 0)
                {
                    num12 = num85;
                }
                else
                {
                    num11 = num85;
                }
                for (int num86 = num11; num86 <= num12; num86++)
                {
                    for (int num87 = j - 3; num87 <= j; num87++)
                    {
                        Game1.tile[num86, num87].active(false);
                        bool flag6 = true;
                        for (int num88 = num86 - 1; num88 <= (num86 + 1); num88++)
                        {
                            for (int num89 = num87 - 1; num89 <= (num87 + 1); num89++)
                            {
                                if (!Game1.tile[num88, num89].active() && (Game1.tile[num88, num89].wall == 0))
                                {
                                    flag6 = false;
                                }
                            }
                        }
                        if (flag6)
                        {
                            Game1.tile[num86, num87].wall = 0x4e;
                        }
                    }
                }
            }
            return true;
        }

        public static bool GrowPalmTree(int i, int y)
        {
            int num = y;
            while (Game1.tile[i, num].type == 20)
            {
                num++;
            }
            Tile tile = Game1.tile[i, num];
            Tile tile2 = Game1.tile[i, num - 1];
            if ((!tile.active() || tile.halfBrick()) || (tile.slope() != 0))
            {
                return false;
            }
            if ((tile2.wall != 0) || (tile2.liquid != 0))
            {
                return false;
            }
            if (((tile.type != 0x35) && (tile.type != 0xea)) && ((tile.type != 0x74) && (tile.type != 0x70)))
            {
                return false;
            }
            if (!EmptyTileCheck(i - 1, i + 1, num - 30, num - 1, 20))
            {
                return false;
            }
            int num2 = genRand.Next(10, 0x15);
            int num3 = genRand.Next(-8, 9) * 2;
            short num4 = 0;
            for (int j = 0; j < num2; j++)
            {
                tile = Game1.tile[i, (num - 1) - j];
                if (j == 0)
                {
                    tile.active(true);
                    tile.type = 0x143;
                    tile.frameX = 0x42;
                    tile.frameY = 0;
                }
                else if (j == (num2 - 1))
                {
                    tile.active(true);
                    tile.type = 0x143;
                    tile.frameX = (short)(0x16 * genRand.Next(4, 7));
                    tile.frameY = num4;
                }
                else
                {
                    if (num4 != num3)
                    {
                        float num6 = ((float)j) / ((float)num2);
                        bool flag = false;
                        if (num6 < 0.25f)
                        {
                            flag = false;
                        }
                        else if ((num6 < 0.5f) && (genRand.Next(13) == 0))
                        {
                            flag = true;
                        }
                        else if ((num6 < 0.7f) && (genRand.Next(9) == 0))
                        {
                            flag = true;
                        }
                        else if ((num6 < 0.95f) && (genRand.Next(5) == 0))
                        {
                            flag = true;
                        }
                        else
                        {
                            flag = true;
                        }
                        if (flag)
                        {
                            short num7 = (short)Math.Sign(num3);
                            num4 = (short)(num4 + ((short)(num7 * 2)));
                        }
                    }
                    tile.active(true);
                    tile.type = 0x143;
                    tile.frameX = (short)(0x16 * genRand.Next(0, 3));
                    tile.frameY = num4;
                }
            }
            RangeFrame(i - 2, (num - num2) - 1, i + 2, num + 1);
            if (Game1.netMode == 2)
            {
                NetMessage.SendTileSquare(-1, i, num - ((int)(num2 * 0.5)), num2 + 1);
            }
            return true;
        }

        public static void GrowPumpkin(int i, int j, int type)
        {
            if (!destroyObject)
            {
                bool flag = false;
                int tileY = j;
                int num2 = Game1.tile[i, j].frameY / 0x12;
                while (num2 > 1)
                {
                    num2 -= 2;
                }
                tileY -= num2;
                int tileX = Game1.tile[i, j].frameX / 0x12;
                int num4 = 0;
                while (tileX > 1)
                {
                    tileX -= 2;
                    num4++;
                }
                tileX = i - tileX;
                int num5 = num4 * 0x24;
                if (num4 < 4)
                {
                    for (int k = tileX; k < (tileX + 2); k++)
                    {
                        for (int m = tileY; m < (tileY + 2); m++)
                        {
                            if (Game1.tile[k, m] == null)
                            {
                                Game1.tile[k, m] = new Tile();
                            }
                            if ((!Game1.tile[k, m].active() || (Game1.tile[k, m].type != type)) || (Game1.tile[k, m].frameX != (((k - tileX) * 0x12) + num5)))
                            {
                                flag = true;
                            }
                        }
                        if (!SolidTile(k, tileY + 2) || ((Game1.tile[k, tileY + 2].type != 2) && (Game1.tile[k, tileY + 2].type != 0x6d)))
                        {
                            flag = true;
                        }
                    }
                    if (!flag)
                    {
                        for (int n = tileX; n < (tileX + 2); n++)
                        {
                            for (int num9 = tileY; num9 < (tileY + 2); num9++)
                            {
                                if (Game1.tile[n, num9] == null)
                                {
                                    Game1.tile[n, num9] = new Tile();
                                }
                                if ((Game1.tile[n, num9].type == type) && Game1.tile[n, num9].active())
                                {
                                    Tile tile1 = Game1.tile[n, num9];
                                    tile1.frameX = (short)(tile1.frameX + 0x24);
                                }
                            }
                        }
                    }
                    if (Game1.netMode == 2)
                    {
                        NetMessage.SendTileSquare(-1, tileX, tileY, 4);
                    }
                }
            }
        }

        public static void GrowShroom(int i, int y)
        {
            int num = y;
            if (((!Game1.tile[i - 1, num - 1].lava() && !Game1.tile[i - 1, num - 1].lava()) && !Game1.tile[i + 1, num - 1].lava()) && ((((Game1.tile[i, num].nactive() && !Game1.tile[i, num].halfBrick()) && ((Game1.tile[i, num].slope() == 0) && (Game1.tile[i, num].type == 70))) && (((Game1.tile[i, num - 1].wall == 0) && Game1.tile[i - 1, num].active()) && ((Game1.tile[i - 1, num].type == 70) && Game1.tile[i + 1, num].active()))) && ((Game1.tile[i + 1, num].type == 70) && EmptyTileCheck(i - 2, i + 2, num - 13, num - 1, 0x47))))
            {
                int num3 = genRand.Next(4, 11);
                for (int j = num - num3; j < num; j++)
                {
                    Game1.tile[i, j].frameNumber((byte)genRand.Next(3));
                    Game1.tile[i, j].active(true);
                    Game1.tile[i, j].type = 0x48;
                    switch (genRand.Next(3))
                    {
                        case 0:
                            Game1.tile[i, j].frameX = 0;
                            Game1.tile[i, j].frameY = 0;
                            break;

                        case 1:
                            Game1.tile[i, j].frameX = 0;
                            Game1.tile[i, j].frameY = 0x12;
                            break;

                        case 2:
                            Game1.tile[i, j].frameX = 0;
                            Game1.tile[i, j].frameY = 0x24;
                            break;
                    }
                }
                switch (genRand.Next(3))
                {
                    case 0:
                        Game1.tile[i, num - num3].frameX = 0x24;
                        Game1.tile[i, num - num3].frameY = 0;
                        break;

                    case 1:
                        Game1.tile[i, num - num3].frameX = 0x24;
                        Game1.tile[i, num - num3].frameY = 0x12;
                        break;

                    case 2:
                        Game1.tile[i, num - num3].frameX = 0x24;
                        Game1.tile[i, num - num3].frameY = 0x24;
                        break;
                }
                RangeFrame(i - 2, (num - num3) - 1, i + 2, num + 1);
                if (Game1.netMode == 2)
                {
                    NetMessage.SendTileSquare(-1, i, num - ((int)(num3 * 0.5)), num3 + 1);
                }
            }
        }

        public static void GrowSpike(int i, int j, ushort spikeType, ushort landType)
        {
            int num = i;
            int num2 = j;
            int num3 = 0;
            if (Game1.tile[num + 1, num2].active() && (Game1.tile[num + 1, num2].type == spikeType))
            {
                num3++;
            }
            if (Game1.tile[num - 1, num2].active() && (Game1.tile[num - 1, num2].type == spikeType))
            {
                num3++;
            }
            if (Game1.tile[num, num2 + 1].active() && (Game1.tile[num, num2 + 1].type == spikeType))
            {
                num3++;
            }
            if (Game1.tile[num, num2 - 1].active() && (Game1.tile[num, num2 - 1].type == spikeType))
            {
                num3++;
            }
            if ((num3 < 3) || (Game1.tile[i, j].type == landType))
            {
                switch (genRand.Next(4))
                {
                    case 0:
                        num2--;
                        break;

                    case 1:
                        num2++;
                        break;

                    case 2:
                        num--;
                        break;

                    case 3:
                        num++;
                        break;
                }
                if (!Game1.tile[num, num2].active())
                {
                    num3 = 0;
                    if (Game1.tile[num + 1, num2].active() && (Game1.tile[num + 1, num2].type == spikeType))
                    {
                        num3++;
                    }
                    if (Game1.tile[num - 1, num2].active() && (Game1.tile[num - 1, num2].type == spikeType))
                    {
                        num3++;
                    }
                    if (Game1.tile[num, num2 + 1].active() && (Game1.tile[num, num2 + 1].type == spikeType))
                    {
                        num3++;
                    }
                    if (Game1.tile[num, num2 - 1].active() && (Game1.tile[num, num2 - 1].type == spikeType))
                    {
                        num3++;
                    }
                    if (num3 < 2)
                    {
                        int num5 = 7;
                        int num6 = num - num5;
                        int num7 = num + num5;
                        int num8 = num2 - num5;
                        int num9 = num2 + num5;
                        bool flag = false;
                        for (int k = num6; k < num7; k++)
                        {
                            for (int m = num8; m < num9; m++)
                            {
                                if ((((((Math.Abs((int)(k - num)) * 2) + Math.Abs((int)(m - num2))) < 9) && Game1.tile[k, m].active()) && ((Game1.tile[k, m].type == landType) && Game1.tile[k, m - 1].active())) && ((Game1.tile[k, m - 1].type == spikeType) && (Game1.tile[k, m - 1].liquid == 0)))
                                {
                                    flag = true;
                                    break;
                                }
                            }
                        }
                        if (flag)
                        {
                            Game1.tile[num, num2].type = spikeType;
                            Game1.tile[num, num2].active(true);
                            SquareTileFrame(num, num2, true);
                            if (Game1.netMode == 2)
                            {
                                NetMessage.SendTileSquare(-1, num, num2, 3);
                            }
                        }
                    }
                }
            }
        }

        public static void GrowTree(int i, int y)
        {
            int num = y;
            while (Game1.tile[i, num].type == 20)
            {
                num++;
            }
            if (((((Game1.tile[i - 1, num - 1].liquid == 0) && (Game1.tile[i, num - 1].liquid == 0)) && (Game1.tile[i + 1, num - 1].liquid == 0)) || (Game1.tile[i, num].type == 60)) && (((((Game1.tile[i, num].nactive() && !Game1.tile[i, num].halfBrick()) && (Game1.tile[i, num].slope() == 0)) && ((((Game1.tile[i, num].type == 2) || (Game1.tile[i, num].type == 0x17)) || ((Game1.tile[i, num].type == 60) || (Game1.tile[i, num].type == 0x6d))) || (((Game1.tile[i, num].type == 0x93) || (Game1.tile[i, num].type == 0xc7)) || (Game1.tile[i, num].type == 70)))) && (((((Game1.tile[i, num - 1].wall == 0) || (Game1.tile[i, num - 1].wall == 0x6a)) || (Game1.tile[i, num - 1].wall == 0x6b)) || ((Game1.tile[i, num - 1].wall >= 0x8a) && (Game1.tile[i, num - 1].wall <= 0x8d))) || (((Game1.tile[i, num - 1].wall == 0x91) || (Game1.tile[i, num - 1].wall == 150)) || (Game1.tile[i, num - 1].wall == 0x98)))) && ((Game1.tile[i - 1, num].active() && ((((Game1.tile[i - 1, num].type == 2) || (Game1.tile[i - 1, num].type == 0x17)) || ((Game1.tile[i - 1, num].type == 60) || (Game1.tile[i - 1, num].type == 0x6d))) || (((Game1.tile[i - 1, num].type == 0x93) || (Game1.tile[i - 1, num].type == 0xc7)) || (Game1.tile[i - 1, num].type == 70)))) || (Game1.tile[i + 1, num].active() && ((((Game1.tile[i + 1, num].type == 2) || (Game1.tile[i + 1, num].type == 0x17)) || ((Game1.tile[i + 1, num].type == 60) || (Game1.tile[i + 1, num].type == 0x6d))) || (((Game1.tile[i + 1, num].type == 0x93) || (Game1.tile[i + 1, num].type == 0xc7)) || (Game1.tile[i + 1, num].type == 70)))))))
            {
                int num2 = 2;
                int num3 = 0x10;
                if (Game1.tile[i, num].type == 60)
                {
                    num3 += 5;
                }
                if (EmptyTileCheck(i - num2, i + num2, num - num3, num - 1, 20))
                {
                    int num4;
                    bool flag = false;
                    bool flag2 = false;
                    int num6 = genRand.Next(5, num3 + 1);
                    for (int j = num - num6; j < num; j++)
                    {
                        Game1.tile[i, j].frameNumber((byte)genRand.Next(3));
                        Game1.tile[i, j].active(true);
                        Game1.tile[i, j].type = 5;
                        num4 = genRand.Next(3);
                        int num5 = genRand.Next(10);
                        if ((j == (num - 1)) || (j == (num - num6)))
                        {
                            num5 = 0;
                        }
                        while ((((num5 == 5) || (num5 == 7)) && flag) || (((num5 == 6) || (num5 == 7)) && flag2))
                        {
                            num5 = genRand.Next(10);
                        }
                        flag = false;
                        flag2 = false;
                        if ((num5 == 5) || (num5 == 7))
                        {
                            flag = true;
                        }
                        if ((num5 == 6) || (num5 == 7))
                        {
                            flag2 = true;
                        }
                        if (num5 == 1)
                        {
                            switch (num4)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 0;
                                    Game1.tile[i, j].frameY = 0x42;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 0;
                                    Game1.tile[i, j].frameY = 0x58;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 0;
                                    Game1.tile[i, j].frameY = 110;
                                    break;
                            }
                        }
                        else if (num5 == 2)
                        {
                            switch (num4)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 0x16;
                                    Game1.tile[i, j].frameY = 0;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 0x16;
                                    Game1.tile[i, j].frameY = 0x16;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 0x16;
                                    Game1.tile[i, j].frameY = 0x2c;
                                    break;
                            }
                        }
                        else if (num5 == 3)
                        {
                            switch (num4)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 0x2c;
                                    Game1.tile[i, j].frameY = 0x42;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 0x2c;
                                    Game1.tile[i, j].frameY = 0x58;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 0x2c;
                                    Game1.tile[i, j].frameY = 110;
                                    break;
                            }
                        }
                        else if (num5 == 4)
                        {
                            switch (num4)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 0x16;
                                    Game1.tile[i, j].frameY = 0x42;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 0x16;
                                    Game1.tile[i, j].frameY = 0x58;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 0x16;
                                    Game1.tile[i, j].frameY = 110;
                                    break;
                            }
                        }
                        else if (num5 == 5)
                        {
                            switch (num4)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 0x58;
                                    Game1.tile[i, j].frameY = 0;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 0x58;
                                    Game1.tile[i, j].frameY = 0x16;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 0x58;
                                    Game1.tile[i, j].frameY = 0x2c;
                                    break;
                            }
                        }
                        else if (num5 == 6)
                        {
                            switch (num4)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 0x42;
                                    Game1.tile[i, j].frameY = 0x42;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 0x42;
                                    Game1.tile[i, j].frameY = 0x58;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 0x42;
                                    Game1.tile[i, j].frameY = 110;
                                    break;
                            }
                        }
                        else if (num5 == 7)
                        {
                            switch (num4)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 110;
                                    Game1.tile[i, j].frameY = 0x42;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 110;
                                    Game1.tile[i, j].frameY = 0x58;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 110;
                                    Game1.tile[i, j].frameY = 110;
                                    break;
                            }
                        }
                        else
                        {
                            switch (num4)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 0;
                                    Game1.tile[i, j].frameY = 0;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 0;
                                    Game1.tile[i, j].frameY = 0x16;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 0;
                                    Game1.tile[i, j].frameY = 0x2c;
                                    break;
                            }
                        }
                        if ((num5 == 5) || (num5 == 7))
                        {
                            Game1.tile[i - 1, j].active(true);
                            Game1.tile[i - 1, j].type = 5;
                            num4 = genRand.Next(3);
                            if (genRand.Next(3) < 2)
                            {
                                switch (num4)
                                {
                                    case 0:
                                        Game1.tile[i - 1, j].frameX = 0x2c;
                                        Game1.tile[i - 1, j].frameY = 0xc6;
                                        break;

                                    case 1:
                                        Game1.tile[i - 1, j].frameX = 0x2c;
                                        Game1.tile[i - 1, j].frameY = 220;
                                        break;

                                    case 2:
                                        Game1.tile[i - 1, j].frameX = 0x2c;
                                        Game1.tile[i - 1, j].frameY = 0xf2;
                                        break;
                                }
                            }
                            else
                            {
                                switch (num4)
                                {
                                    case 0:
                                        Game1.tile[i - 1, j].frameX = 0x42;
                                        Game1.tile[i - 1, j].frameY = 0;
                                        break;

                                    case 1:
                                        Game1.tile[i - 1, j].frameX = 0x42;
                                        Game1.tile[i - 1, j].frameY = 0x16;
                                        break;

                                    case 2:
                                        Game1.tile[i - 1, j].frameX = 0x42;
                                        Game1.tile[i - 1, j].frameY = 0x2c;
                                        break;
                                }
                            }
                        }
                        if ((num5 == 6) || (num5 == 7))
                        {
                            Game1.tile[i + 1, j].active(true);
                            Game1.tile[i + 1, j].type = 5;
                            num4 = genRand.Next(3);
                            if (genRand.Next(3) < 2)
                            {
                                switch (num4)
                                {
                                    case 0:
                                        Game1.tile[i + 1, j].frameX = 0x42;
                                        Game1.tile[i + 1, j].frameY = 0xc6;
                                        break;

                                    case 1:
                                        Game1.tile[i + 1, j].frameX = 0x42;
                                        Game1.tile[i + 1, j].frameY = 220;
                                        break;

                                    case 2:
                                        Game1.tile[i + 1, j].frameX = 0x42;
                                        Game1.tile[i + 1, j].frameY = 0xf2;
                                        break;
                                }
                            }
                            else
                            {
                                switch (num4)
                                {
                                    case 0:
                                        Game1.tile[i + 1, j].frameX = 0x58;
                                        Game1.tile[i + 1, j].frameY = 0x42;
                                        break;

                                    case 1:
                                        Game1.tile[i + 1, j].frameX = 0x58;
                                        Game1.tile[i + 1, j].frameY = 0x58;
                                        break;

                                    case 2:
                                        Game1.tile[i + 1, j].frameX = 0x58;
                                        Game1.tile[i + 1, j].frameY = 110;
                                        break;
                                }
                            }
                        }
                    }
                    int num8 = genRand.Next(3);
                    bool flag3 = false;
                    bool flag4 = false;
                    if (((Game1.tile[i - 1, num].nactive() && !Game1.tile[i - 1, num].halfBrick()) && (Game1.tile[i - 1, num].slope() == 0)) && ((((Game1.tile[i - 1, num].type == 2) || (Game1.tile[i - 1, num].type == 0x17)) || ((Game1.tile[i - 1, num].type == 60) || (Game1.tile[i - 1, num].type == 0x6d))) || ((Game1.tile[i - 1, num].type == 0x93) || (Game1.tile[i - 1, num].type == 0xc7))))
                    {
                        flag3 = true;
                    }
                    if (((Game1.tile[i + 1, num].nactive() && !Game1.tile[i + 1, num].halfBrick()) && (Game1.tile[i + 1, num].slope() == 0)) && ((((Game1.tile[i + 1, num].type == 2) || (Game1.tile[i + 1, num].type == 0x17)) || ((Game1.tile[i + 1, num].type == 60) || (Game1.tile[i + 1, num].type == 0x6d))) || ((Game1.tile[i + 1, num].type == 0x93) || (Game1.tile[i + 1, num].type == 0xc7))))
                    {
                        flag4 = true;
                    }
                    if (!flag3)
                    {
                        switch (num8)
                        {
                            case 0:
                                num8 = 2;
                                break;

                            case 1:
                                num8 = 3;
                                break;
                        }
                    }
                    if (!flag4)
                    {
                        switch (num8)
                        {
                            case 0:
                                num8 = 1;
                                break;

                            case 2:
                                num8 = 3;
                                break;
                        }
                    }
                    if (flag3 && !flag4)
                    {
                        num8 = 2;
                    }
                    if (flag4 && !flag3)
                    {
                        num8 = 1;
                    }
                    if ((num8 == 0) || (num8 == 1))
                    {
                        Game1.tile[i + 1, num - 1].active(true);
                        Game1.tile[i + 1, num - 1].type = 5;
                        switch (genRand.Next(3))
                        {
                            case 0:
                                Game1.tile[i + 1, num - 1].frameX = 0x16;
                                Game1.tile[i + 1, num - 1].frameY = 0x84;
                                break;

                            case 1:
                                Game1.tile[i + 1, num - 1].frameX = 0x16;
                                Game1.tile[i + 1, num - 1].frameY = 0x9a;
                                break;

                            case 2:
                                Game1.tile[i + 1, num - 1].frameX = 0x16;
                                Game1.tile[i + 1, num - 1].frameY = 0xb0;
                                break;
                        }
                    }
                    if ((num8 == 0) || (num8 == 2))
                    {
                        Game1.tile[i - 1, num - 1].active(true);
                        Game1.tile[i - 1, num - 1].type = 5;
                        switch (genRand.Next(3))
                        {
                            case 0:
                                Game1.tile[i - 1, num - 1].frameX = 0x2c;
                                Game1.tile[i - 1, num - 1].frameY = 0x84;
                                break;

                            case 1:
                                Game1.tile[i - 1, num - 1].frameX = 0x2c;
                                Game1.tile[i - 1, num - 1].frameY = 0x9a;
                                break;

                            case 2:
                                Game1.tile[i - 1, num - 1].frameX = 0x2c;
                                Game1.tile[i - 1, num - 1].frameY = 0xb0;
                                break;
                        }
                    }
                    num4 = genRand.Next(3);
                    if (num8 == 0)
                    {
                        switch (num4)
                        {
                            case 0:
                                Game1.tile[i, num - 1].frameX = 0x58;
                                Game1.tile[i, num - 1].frameY = 0x84;
                                break;

                            case 1:
                                Game1.tile[i, num - 1].frameX = 0x58;
                                Game1.tile[i, num - 1].frameY = 0x9a;
                                break;

                            case 2:
                                Game1.tile[i, num - 1].frameX = 0x58;
                                Game1.tile[i, num - 1].frameY = 0xb0;
                                break;
                        }
                    }
                    else if (num8 == 1)
                    {
                        switch (num4)
                        {
                            case 0:
                                Game1.tile[i, num - 1].frameX = 0;
                                Game1.tile[i, num - 1].frameY = 0x84;
                                break;

                            case 1:
                                Game1.tile[i, num - 1].frameX = 0;
                                Game1.tile[i, num - 1].frameY = 0x9a;
                                break;

                            case 2:
                                Game1.tile[i, num - 1].frameX = 0;
                                Game1.tile[i, num - 1].frameY = 0xb0;
                                break;
                        }
                    }
                    else if (num8 == 2)
                    {
                        switch (num4)
                        {
                            case 0:
                                Game1.tile[i, num - 1].frameX = 0x42;
                                Game1.tile[i, num - 1].frameY = 0x84;
                                break;

                            case 1:
                                Game1.tile[i, num - 1].frameX = 0x42;
                                Game1.tile[i, num - 1].frameY = 0x9a;
                                break;

                            case 2:
                                Game1.tile[i, num - 1].frameX = 0x42;
                                Game1.tile[i, num - 1].frameY = 0xb0;
                                break;
                        }
                    }
                    if (genRand.Next(8) != 0)
                    {
                        switch (genRand.Next(3))
                        {
                            case 0:
                                Game1.tile[i, num - num6].frameX = 0x16;
                                Game1.tile[i, num - num6].frameY = 0xc6;
                                break;

                            case 1:
                                Game1.tile[i, num - num6].frameX = 0x16;
                                Game1.tile[i, num - num6].frameY = 220;
                                break;

                            case 2:
                                Game1.tile[i, num - num6].frameX = 0x16;
                                Game1.tile[i, num - num6].frameY = 0xf2;
                                break;
                        }
                    }
                    else
                    {
                        switch (genRand.Next(3))
                        {
                            case 0:
                                Game1.tile[i, num - num6].frameX = 0;
                                Game1.tile[i, num - num6].frameY = 0xc6;
                                break;

                            case 1:
                                Game1.tile[i, num - num6].frameX = 0;
                                Game1.tile[i, num - num6].frameY = 220;
                                break;

                            case 2:
                                Game1.tile[i, num - num6].frameX = 0;
                                Game1.tile[i, num - num6].frameY = 0xf2;
                                break;
                        }
                    }
                    RangeFrame(i - 2, (num - num6) - 1, i + 2, num + 1);
                    if (Game1.netMode == 2)
                    {
                        NetMessage.SendTileSquare(-1, i, num - ((int)(num6 * 0.5)), num6 + 1);
                    }
                }
            }
        }

        public static void GrowUndergroundTree(int i, int y)
        {
            int num = y;
            if ((Game1.tile[i, num].type == 60) && (((Game1.tile[i, num].nactive() && !Game1.tile[i, num].halfBrick()) && ((Game1.tile[i, num].slope() == 0) && (Game1.tile[i, num].type == 60))) && ((Game1.tile[i - 1, num].active() && (Game1.tile[i - 1, num].type == 60)) || (Game1.tile[i + 1, num].active() && (Game1.tile[i + 1, num].type == 60)))))
            {
                int num2 = 1;
                int num3 = genRand.Next(5, 15);
                int num4 = num3 + 2;
                if (Game1.tile[i, num].type == 60)
                {
                    num4 += 5;
                }
                if (EmptyTileCheck(i - num2, i + num2, num - num4, num - 1, 20))
                {
                    int num5;
                    bool flag = false;
                    bool flag2 = false;
                    for (int j = num - num3; j < num; j++)
                    {
                        Game1.tile[i, j].frameNumber((byte)genRand.Next(3));
                        Game1.tile[i, j].active(true);
                        Game1.tile[i, j].type = 5;
                        num5 = genRand.Next(3);
                        int num6 = genRand.Next(10);
                        if ((j == (num - 1)) || (j == (num - num3)))
                        {
                            num6 = 0;
                        }
                        while ((((num6 == 5) || (num6 == 7)) && flag) || (((num6 == 6) || (num6 == 7)) && flag2))
                        {
                            num6 = genRand.Next(10);
                        }
                        flag = false;
                        flag2 = false;
                        if ((num6 == 5) || (num6 == 7))
                        {
                            flag = true;
                        }
                        if ((num6 == 6) || (num6 == 7))
                        {
                            flag2 = true;
                        }
                        if (num6 == 1)
                        {
                            switch (num5)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 0;
                                    Game1.tile[i, j].frameY = 0x42;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 0;
                                    Game1.tile[i, j].frameY = 0x58;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 0;
                                    Game1.tile[i, j].frameY = 110;
                                    break;
                            }
                        }
                        else if (num6 == 2)
                        {
                            switch (num5)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 0x16;
                                    Game1.tile[i, j].frameY = 0;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 0x16;
                                    Game1.tile[i, j].frameY = 0x16;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 0x16;
                                    Game1.tile[i, j].frameY = 0x2c;
                                    break;
                            }
                        }
                        else if (num6 == 3)
                        {
                            switch (num5)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 0x2c;
                                    Game1.tile[i, j].frameY = 0x42;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 0x2c;
                                    Game1.tile[i, j].frameY = 0x58;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 0x2c;
                                    Game1.tile[i, j].frameY = 110;
                                    break;
                            }
                        }
                        else if (num6 == 4)
                        {
                            switch (num5)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 0x16;
                                    Game1.tile[i, j].frameY = 0x42;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 0x16;
                                    Game1.tile[i, j].frameY = 0x58;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 0x16;
                                    Game1.tile[i, j].frameY = 110;
                                    break;
                            }
                        }
                        else if (num6 == 5)
                        {
                            switch (num5)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 0x58;
                                    Game1.tile[i, j].frameY = 0;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 0x58;
                                    Game1.tile[i, j].frameY = 0x16;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 0x58;
                                    Game1.tile[i, j].frameY = 0x2c;
                                    break;
                            }
                        }
                        else if (num6 == 6)
                        {
                            switch (num5)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 0x42;
                                    Game1.tile[i, j].frameY = 0x42;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 0x42;
                                    Game1.tile[i, j].frameY = 0x58;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 0x42;
                                    Game1.tile[i, j].frameY = 110;
                                    break;
                            }
                        }
                        else if (num6 == 7)
                        {
                            switch (num5)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 110;
                                    Game1.tile[i, j].frameY = 0x42;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 110;
                                    Game1.tile[i, j].frameY = 0x58;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 110;
                                    Game1.tile[i, j].frameY = 110;
                                    break;
                            }
                        }
                        else
                        {
                            switch (num5)
                            {
                                case 0:
                                    Game1.tile[i, j].frameX = 0;
                                    Game1.tile[i, j].frameY = 0;
                                    break;

                                case 1:
                                    Game1.tile[i, j].frameX = 0;
                                    Game1.tile[i, j].frameY = 0x16;
                                    break;

                                case 2:
                                    Game1.tile[i, j].frameX = 0;
                                    Game1.tile[i, j].frameY = 0x2c;
                                    break;
                            }
                        }
                        if ((num6 == 5) || (num6 == 7))
                        {
                            Game1.tile[i - 1, j].active(true);
                            Game1.tile[i - 1, j].type = 5;
                            num5 = genRand.Next(3);
                            if (genRand.Next(3) < 2)
                            {
                                switch (num5)
                                {
                                    case 0:
                                        Game1.tile[i - 1, j].frameX = 0x2c;
                                        Game1.tile[i - 1, j].frameY = 0xc6;
                                        break;

                                    case 1:
                                        Game1.tile[i - 1, j].frameX = 0x2c;
                                        Game1.tile[i - 1, j].frameY = 220;
                                        break;

                                    case 2:
                                        Game1.tile[i - 1, j].frameX = 0x2c;
                                        Game1.tile[i - 1, j].frameY = 0xf2;
                                        break;
                                }
                            }
                            else
                            {
                                switch (num5)
                                {
                                    case 0:
                                        Game1.tile[i - 1, j].frameX = 0x42;
                                        Game1.tile[i - 1, j].frameY = 0;
                                        break;

                                    case 1:
                                        Game1.tile[i - 1, j].frameX = 0x42;
                                        Game1.tile[i - 1, j].frameY = 0x16;
                                        break;

                                    case 2:
                                        Game1.tile[i - 1, j].frameX = 0x42;
                                        Game1.tile[i - 1, j].frameY = 0x2c;
                                        break;
                                }
                            }
                        }
                        if ((num6 == 6) || (num6 == 7))
                        {
                            Game1.tile[i + 1, j].active(true);
                            Game1.tile[i + 1, j].type = 5;
                            num5 = genRand.Next(3);
                            if (genRand.Next(3) < 2)
                            {
                                switch (num5)
                                {
                                    case 0:
                                        Game1.tile[i + 1, j].frameX = 0x42;
                                        Game1.tile[i + 1, j].frameY = 0xc6;
                                        break;

                                    case 1:
                                        Game1.tile[i + 1, j].frameX = 0x42;
                                        Game1.tile[i + 1, j].frameY = 220;
                                        break;

                                    case 2:
                                        Game1.tile[i + 1, j].frameX = 0x42;
                                        Game1.tile[i + 1, j].frameY = 0xf2;
                                        break;
                                }
                            }
                            else
                            {
                                switch (num5)
                                {
                                    case 0:
                                        Game1.tile[i + 1, j].frameX = 0x58;
                                        Game1.tile[i + 1, j].frameY = 0x42;
                                        break;

                                    case 1:
                                        Game1.tile[i + 1, j].frameX = 0x58;
                                        Game1.tile[i + 1, j].frameY = 0x58;
                                        break;

                                    case 2:
                                        Game1.tile[i + 1, j].frameX = 0x58;
                                        Game1.tile[i + 1, j].frameY = 110;
                                        break;
                                }
                            }
                        }
                    }
                    int num8 = genRand.Next(3);
                    bool flag3 = false;
                    bool flag4 = false;
                    if (((Game1.tile[i - 1, num].nactive() && !Game1.tile[i - 1, num].halfBrick()) && (Game1.tile[i - 1, num].slope() == 0)) && (((Game1.tile[i - 1, num].type == 2) || (Game1.tile[i - 1, num].type == 0x17)) || (((Game1.tile[i - 1, num].type == 60) || (Game1.tile[i - 1, num].type == 0x6d)) || (Game1.tile[i - 1, num].type == 0x93))))
                    {
                        flag3 = true;
                    }
                    if (((Game1.tile[i + 1, num].nactive() && !Game1.tile[i + 1, num].halfBrick()) && (Game1.tile[i + 1, num].slope() == 0)) && (((Game1.tile[i + 1, num].type == 2) || (Game1.tile[i + 1, num].type == 0x17)) || (((Game1.tile[i + 1, num].type == 60) || (Game1.tile[i + 1, num].type == 0x6d)) || (Game1.tile[i + 1, num].type == 0x93))))
                    {
                        flag4 = true;
                    }
                    if (!flag3)
                    {
                        switch (num8)
                        {
                            case 0:
                                num8 = 2;
                                break;

                            case 1:
                                num8 = 3;
                                break;
                        }
                    }
                    if (!flag4)
                    {
                        switch (num8)
                        {
                            case 0:
                                num8 = 1;
                                break;

                            case 2:
                                num8 = 3;
                                break;
                        }
                    }
                    if (flag3 && !flag4)
                    {
                        num8 = 2;
                    }
                    if (flag4 && !flag3)
                    {
                        num8 = 1;
                    }
                    if ((num8 == 0) || (num8 == 1))
                    {
                        Game1.tile[i + 1, num - 1].active(true);
                        Game1.tile[i + 1, num - 1].type = 5;
                        switch (genRand.Next(3))
                        {
                            case 0:
                                Game1.tile[i + 1, num - 1].frameX = 0x16;
                                Game1.tile[i + 1, num - 1].frameY = 0x84;
                                break;

                            case 1:
                                Game1.tile[i + 1, num - 1].frameX = 0x16;
                                Game1.tile[i + 1, num - 1].frameY = 0x9a;
                                break;

                            case 2:
                                Game1.tile[i + 1, num - 1].frameX = 0x16;
                                Game1.tile[i + 1, num - 1].frameY = 0xb0;
                                break;
                        }
                    }
                    if ((num8 == 0) || (num8 == 2))
                    {
                        Game1.tile[i - 1, num - 1].active(true);
                        Game1.tile[i - 1, num - 1].type = 5;
                        switch (genRand.Next(3))
                        {
                            case 0:
                                Game1.tile[i - 1, num - 1].frameX = 0x2c;
                                Game1.tile[i - 1, num - 1].frameY = 0x84;
                                break;

                            case 1:
                                Game1.tile[i - 1, num - 1].frameX = 0x2c;
                                Game1.tile[i - 1, num - 1].frameY = 0x9a;
                                break;

                            case 2:
                                Game1.tile[i - 1, num - 1].frameX = 0x2c;
                                Game1.tile[i - 1, num - 1].frameY = 0xb0;
                                break;
                        }
                    }
                    num5 = genRand.Next(3);
                    if (num8 == 0)
                    {
                        switch (num5)
                        {
                            case 0:
                                Game1.tile[i, num - 1].frameX = 0x58;
                                Game1.tile[i, num - 1].frameY = 0x84;
                                break;

                            case 1:
                                Game1.tile[i, num - 1].frameX = 0x58;
                                Game1.tile[i, num - 1].frameY = 0x9a;
                                break;

                            case 2:
                                Game1.tile[i, num - 1].frameX = 0x58;
                                Game1.tile[i, num - 1].frameY = 0xb0;
                                break;
                        }
                    }
                    else if (num8 == 1)
                    {
                        switch (num5)
                        {
                            case 0:
                                Game1.tile[i, num - 1].frameX = 0;
                                Game1.tile[i, num - 1].frameY = 0x84;
                                break;

                            case 1:
                                Game1.tile[i, num - 1].frameX = 0;
                                Game1.tile[i, num - 1].frameY = 0x9a;
                                break;

                            case 2:
                                Game1.tile[i, num - 1].frameX = 0;
                                Game1.tile[i, num - 1].frameY = 0xb0;
                                break;
                        }
                    }
                    else if (num8 == 2)
                    {
                        switch (num5)
                        {
                            case 0:
                                Game1.tile[i, num - 1].frameX = 0x42;
                                Game1.tile[i, num - 1].frameY = 0x84;
                                break;

                            case 1:
                                Game1.tile[i, num - 1].frameX = 0x42;
                                Game1.tile[i, num - 1].frameY = 0x9a;
                                break;

                            case 2:
                                Game1.tile[i, num - 1].frameX = 0x42;
                                Game1.tile[i, num - 1].frameY = 0xb0;
                                break;
                        }
                    }
                    if (genRand.Next(8) != 0)
                    {
                        switch (genRand.Next(3))
                        {
                            case 0:
                                Game1.tile[i, num - num3].frameX = 0x16;
                                Game1.tile[i, num - num3].frameY = 0xc6;
                                break;

                            case 1:
                                Game1.tile[i, num - num3].frameX = 0x16;
                                Game1.tile[i, num - num3].frameY = 220;
                                break;

                            case 2:
                                Game1.tile[i, num - num3].frameX = 0x16;
                                Game1.tile[i, num - num3].frameY = 0xf2;
                                break;
                        }
                    }
                    else
                    {
                        switch (genRand.Next(3))
                        {
                            case 0:
                                Game1.tile[i, num - num3].frameX = 0;
                                Game1.tile[i, num - num3].frameY = 0xc6;
                                break;

                            case 1:
                                Game1.tile[i, num - num3].frameX = 0;
                                Game1.tile[i, num - num3].frameY = 220;
                                break;

                            case 2:
                                Game1.tile[i, num - num3].frameX = 0;
                                Game1.tile[i, num - num3].frameY = 0xf2;
                                break;
                        }
                    }
                    RangeFrame(i - 2, (num - num3) - 1, i + 2, num + 1);
                    if (Game1.netMode == 2)
                    {
                        NetMessage.SendTileSquare(-1, i, num - ((int)(num3 * 0.5)), num3 + 1);
                    }
                }
            }
        }

        public static void hardUpdateWorld(int i, int j)
        {
            if (Game1.hardMode && !Game1.tile[i, j].inActive())
            {
                int type = Game1.tile[i, j].type;
                if (((type == 0x75) || (type == 0xa4)) && ((j > Game1.rockLayer) && (genRand.Next(110) == 0)))
                {
                    int num2 = genRand.Next(4);
                    int num3 = 0;
                    int num4 = 0;
                    switch (num2)
                    {
                        case 0:
                            num3 = -1;
                            break;

                        case 1:
                            num3 = 1;
                            break;

                        default:
                            if (num2 == 0)
                            {
                                num4 = -1;
                            }
                            else
                            {
                                num4 = 1;
                            }
                            break;
                    }
                    if (!Game1.tile[i + num3, j + num4].active())
                    {
                        int num5 = 0;
                        int num6 = 6;
                        for (int k = i - num6; k <= (i + num6); k++)
                        {
                            for (int m = j - num6; m <= (j + num6); m++)
                            {
                                if (Game1.tile[k, m].active() && (Game1.tile[k, m].type == 0x81))
                                {
                                    num5++;
                                }
                            }
                        }
                        if (num5 < 2)
                        {
                            PlaceTile(i + num3, j + num4, 0x81, true, false, -1, 0);
                            NetMessage.SendTileSquare(-1, i + num3, j + num4, 1);
                        }
                    }
                }
                if (j > ((Game1.worldSurface + Game1.rockLayer) / 2.0))
                {
                    if ((type == 60) && (genRand.Next(300) == 0))
                    {
                        int x = i + genRand.Next(-10, 11);
                        int y = j + genRand.Next(-10, 11);
                        if ((((InWorld(x, y, 2) && Game1.tile[x, y].active()) && (Game1.tile[x, y].type == 0x3b)) && (!Game1.tile[x, y - 1].active() || (((Game1.tile[x, y - 1].type != 5) && (Game1.tile[x, y - 1].type != 0xec)) && (Game1.tile[x, y - 1].type != 0xee)))) && Chlorophyte(x, y))
                        {
                            Game1.tile[x, y].type = 0xd3;
                            SquareTileFrame(x, y, true);
                            if (Game1.netMode == 2)
                            {
                                NetMessage.SendTileSquare(-1, x, y, 1);
                            }
                        }
                    }
                    if ((type == 0xd3) && (genRand.Next(3) != 0))
                    {
                        int num11 = i;
                        int num12 = j;
                        switch (genRand.Next(4))
                        {
                            case 0:
                                num11++;
                                break;

                            case 1:
                                num11--;
                                break;

                            case 2:
                                num12++;
                                break;

                            case 3:
                                num12--;
                                break;
                        }
                        if (((InWorld(num11, num12, 2) && Game1.tile[num11, num12].active()) && ((Game1.tile[num11, num12].type == 0x3b) || (Game1.tile[num11, num12].type == 60))) && Chlorophyte(num11, num12))
                        {
                            Game1.tile[num11, num12].type = 0xd3;
                            SquareTileFrame(num11, num12, true);
                            if (Game1.netMode == 2)
                            {
                                NetMessage.SendTileSquare(-1, num11, num12, 1);
                            }
                        }
                        bool flag = true;
                        while (flag)
                        {
                            flag = false;
                            num11 = i + Game1.rand.Next(-5, 6);
                            num12 = j + Game1.rand.Next(-5, 6);
                            if (InWorld(num11, num12, 2) && Game1.tile[num11, num12].active())
                            {
                                if (((Game1.tile[num11, num12].type == 0x17) || (Game1.tile[num11, num12].type == 0xc7)) || ((Game1.tile[num11, num12].type == 2) || (Game1.tile[num11, num12].type == 0x6d)))
                                {
                                    Game1.tile[num11, num12].type = 60;
                                    SquareTileFrame(num11, num12, true);
                                    if (Game1.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, num11, num12, 1);
                                    }
                                    flag = true;
                                }
                                else if (Game1.tile[num11, num12].type == 0)
                                {
                                    Game1.tile[num11, num12].type = 0x3b;
                                    SquareTileFrame(num11, num12, true);
                                    if (Game1.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, num11, num12, 1);
                                    }
                                    flag = true;
                                }
                            }
                        }
                    }
                }
                if (!NPC.downedPlantBoss || (genRand.Next(2) == 0))
                {
                    switch (type)
                    {
                        case 0x17:
                        case 0x19:
                        case 0x20:
                        case 0x70:
                        case 0xa3:
                        case 400:
                        case 0x18e:
                            {
                                bool flag2 = true;
                                while (flag2)
                                {
                                    flag2 = false;
                                    int num14 = i + genRand.Next(-3, 4);
                                    int num15 = j + genRand.Next(-3, 4);
                                    if (Game1.tile[num14, num15 - 1].type != 0x1b)
                                    {
                                        if (Game1.tile[num14, num15].type == 2)
                                        {
                                            if (genRand.Next(2) == 0)
                                            {
                                                flag2 = true;
                                            }
                                            Game1.tile[num14, num15].type = 0x17;
                                            SquareTileFrame(num14, num15, true);
                                            NetMessage.SendTileSquare(-1, num14, num15, 1);
                                        }
                                        else
                                        {
                                            if ((Game1.tile[num14, num15].type == 1) || Game1.tileMoss[Game1.tile[num14, num15].type])
                                            {
                                                if (genRand.Next(2) == 0)
                                                {
                                                    flag2 = true;
                                                }
                                                Game1.tile[num14, num15].type = 0x19;
                                                SquareTileFrame(num14, num15, true);
                                                NetMessage.SendTileSquare(-1, num14, num15, 1);
                                                continue;
                                            }
                                            if (Game1.tile[num14, num15].type == 0x35)
                                            {
                                                if (genRand.Next(2) == 0)
                                                {
                                                    flag2 = true;
                                                }
                                                Game1.tile[num14, num15].type = 0x70;
                                                SquareTileFrame(num14, num15, true);
                                                NetMessage.SendTileSquare(-1, num14, num15, 1);
                                                continue;
                                            }
                                            if (Game1.tile[num14, num15].type == 0x18c)
                                            {
                                                if (genRand.Next(2) == 0)
                                                {
                                                    flag2 = true;
                                                }
                                                Game1.tile[num14, num15].type = 400;
                                                SquareTileFrame(num14, num15, true);
                                                NetMessage.SendTileSquare(-1, num14, num15, 1);
                                                continue;
                                            }
                                            if (Game1.tile[num14, num15].type == 0x18d)
                                            {
                                                if (genRand.Next(2) == 0)
                                                {
                                                    flag2 = true;
                                                }
                                                Game1.tile[num14, num15].type = 0x18e;
                                                SquareTileFrame(num14, num15, true);
                                                NetMessage.SendTileSquare(-1, num14, num15, 1);
                                                continue;
                                            }
                                            if ((Game1.tile[num14, num15].type == 0x3b) && !nearbyChlorophyte(num14, num15))
                                            {
                                                if (genRand.Next(2) == 0)
                                                {
                                                    flag2 = true;
                                                }
                                                Game1.tile[num14, num15].type = 0;
                                                SquareTileFrame(num14, num15, true);
                                                NetMessage.SendTileSquare(-1, num14, num15, 1);
                                                continue;
                                            }
                                            if ((Game1.tile[num14, num15].type == 60) && !nearbyChlorophyte(num14, num15))
                                            {
                                                if (genRand.Next(2) == 0)
                                                {
                                                    flag2 = true;
                                                }
                                                Game1.tile[num14, num15].type = 0x17;
                                                SquareTileFrame(num14, num15, true);
                                                NetMessage.SendTileSquare(-1, num14, num15, 1);
                                                continue;
                                            }
                                            if (Game1.tile[num14, num15].type == 0x45)
                                            {
                                                if (genRand.Next(2) == 0)
                                                {
                                                    flag2 = true;
                                                }
                                                Game1.tile[num14, num15].type = 0x20;
                                                SquareTileFrame(num14, num15, true);
                                                NetMessage.SendTileSquare(-1, num14, num15, 1);
                                                continue;
                                            }
                                            if (Game1.tile[num14, num15].type == 0xa1)
                                            {
                                                if (genRand.Next(2) == 0)
                                                {
                                                    flag2 = true;
                                                }
                                                Game1.tile[num14, num15].type = 0xa3;
                                                SquareTileFrame(num14, num15, true);
                                                NetMessage.SendTileSquare(-1, num14, num15, 1);
                                            }
                                        }
                                    }
                                }
                                break;
                            }
                    }
                    if ((((type == 0xc7) || (type == 200)) || ((type == 0xc9) || (type == 0xcb))) || (((type == 0xcd) || (type == 0xea)) || (((type == 0x160) || (type == 0x191)) || (type == 0x18f))))
                    {
                        bool flag3 = true;
                        while (flag3)
                        {
                            flag3 = false;
                            int num16 = i + genRand.Next(-3, 4);
                            int num17 = j + genRand.Next(-3, 4);
                            if (Game1.tile[num16, num17 - 1].type != 0x1b)
                            {
                                if (Game1.tile[num16, num17].type == 2)
                                {
                                    if (genRand.Next(2) == 0)
                                    {
                                        flag3 = true;
                                    }
                                    Game1.tile[num16, num17].type = 0xc7;
                                    SquareTileFrame(num16, num17, true);
                                    NetMessage.SendTileSquare(-1, num16, num17, 1);
                                }
                                else
                                {
                                    if ((Game1.tile[num16, num17].type == 1) || Game1.tileMoss[Game1.tile[num16, num17].type])
                                    {
                                        if (genRand.Next(2) == 0)
                                        {
                                            flag3 = true;
                                        }
                                        Game1.tile[num16, num17].type = 0xcb;
                                        SquareTileFrame(num16, num17, true);
                                        NetMessage.SendTileSquare(-1, num16, num17, 1);
                                        continue;
                                    }
                                    if (Game1.tile[num16, num17].type == 0x35)
                                    {
                                        if (genRand.Next(2) == 0)
                                        {
                                            flag3 = true;
                                        }
                                        Game1.tile[num16, num17].type = 0xea;
                                        SquareTileFrame(num16, num17, true);
                                        NetMessage.SendTileSquare(-1, num16, num17, 1);
                                        continue;
                                    }
                                    if (Game1.tile[num16, num17].type == 0x18c)
                                    {
                                        if (genRand.Next(2) == 0)
                                        {
                                            flag3 = true;
                                        }
                                        Game1.tile[num16, num17].type = 0x191;
                                        SquareTileFrame(num16, num17, true);
                                        NetMessage.SendTileSquare(-1, num16, num17, 1);
                                        continue;
                                    }
                                    if (Game1.tile[num16, num17].type == 0x18d)
                                    {
                                        if (genRand.Next(2) == 0)
                                        {
                                            flag3 = true;
                                        }
                                        Game1.tile[num16, num17].type = 0x18f;
                                        SquareTileFrame(num16, num17, true);
                                        NetMessage.SendTileSquare(-1, num16, num17, 1);
                                        continue;
                                    }
                                    if ((Game1.tile[num16, num17].type == 0x3b) && !nearbyChlorophyte(num16, num17))
                                    {
                                        if (genRand.Next(2) == 0)
                                        {
                                            flag3 = true;
                                        }
                                        Game1.tile[num16, num17].type = 0;
                                        SquareTileFrame(num16, num17, true);
                                        NetMessage.SendTileSquare(-1, num16, num17, 1);
                                        continue;
                                    }
                                    if ((Game1.tile[num16, num17].type == 60) && !nearbyChlorophyte(num16, num17))
                                    {
                                        if (genRand.Next(2) == 0)
                                        {
                                            flag3 = true;
                                        }
                                        Game1.tile[num16, num17].type = 0xc7;
                                        SquareTileFrame(num16, num17, true);
                                        NetMessage.SendTileSquare(-1, num16, num17, 1);
                                        continue;
                                    }
                                    if (Game1.tile[num16, num17].type == 0x45)
                                    {
                                        if (genRand.Next(2) == 0)
                                        {
                                            flag3 = true;
                                        }
                                        Game1.tile[num16, num17].type = 0x160;
                                        SquareTileFrame(num16, num17, true);
                                        NetMessage.SendTileSquare(-1, num16, num17, 1);
                                        continue;
                                    }
                                    if (Game1.tile[num16, num17].type == 0xa1)
                                    {
                                        if (genRand.Next(2) == 0)
                                        {
                                            flag3 = true;
                                        }
                                        Game1.tile[num16, num17].type = 200;
                                        SquareTileFrame(num16, num17, true);
                                        NetMessage.SendTileSquare(-1, num16, num17, 1);
                                    }
                                }
                            }
                        }
                    }
                    if ((((type == 0x6d) || (type == 110)) || ((type == 0x71) || (type == 0x73))) || (((type == 0x74) || (type == 0x75)) || (((type == 0xa4) || (type == 0x192)) || (type == 0x193))))
                    {
                        bool flag4 = true;
                        while (flag4)
                        {
                            flag4 = false;
                            int num18 = i + genRand.Next(-3, 4);
                            int num19 = j + genRand.Next(-3, 4);
                            if (Game1.tile[num18, num19].type == 2)
                            {
                                if (genRand.Next(2) == 0)
                                {
                                    flag4 = true;
                                }
                                Game1.tile[num18, num19].type = 0x6d;
                                SquareTileFrame(num18, num19, true);
                                NetMessage.SendTileSquare(-1, num18, num19, 1);
                            }
                            else
                            {
                                if ((Game1.tile[num18, num19].type == 1) || Game1.tileMoss[Game1.tile[num18, num19].type])
                                {
                                    if (genRand.Next(2) == 0)
                                    {
                                        flag4 = true;
                                    }
                                    Game1.tile[num18, num19].type = 0x75;
                                    SquareTileFrame(num18, num19, true);
                                    NetMessage.SendTileSquare(-1, num18, num19, 1);
                                    continue;
                                }
                                if (Game1.tile[num18, num19].type == 0x35)
                                {
                                    if (genRand.Next(2) == 0)
                                    {
                                        flag4 = true;
                                    }
                                    Game1.tile[num18, num19].type = 0x74;
                                    SquareTileFrame(num18, num19, true);
                                    NetMessage.SendTileSquare(-1, num18, num19, 1);
                                    continue;
                                }
                                if (Game1.tile[num18, num19].type == 0x18c)
                                {
                                    if (genRand.Next(2) == 0)
                                    {
                                        flag4 = true;
                                    }
                                    Game1.tile[num18, num19].type = 0x193;
                                    SquareTileFrame(num18, num19, true);
                                    NetMessage.SendTileSquare(-1, num18, num19, 1);
                                    continue;
                                }
                                if (Game1.tile[num18, num19].type == 0x18d)
                                {
                                    if (genRand.Next(2) == 0)
                                    {
                                        flag4 = true;
                                    }
                                    Game1.tile[num18, num19].type = 0x192;
                                    SquareTileFrame(num18, num19, true);
                                    NetMessage.SendTileSquare(-1, num18, num19, 1);
                                    continue;
                                }
                                if (Game1.tile[num18, num19].type == 0xa1)
                                {
                                    if (genRand.Next(2) == 0)
                                    {
                                        flag4 = true;
                                    }
                                    Game1.tile[num18, num19].type = 0xa4;
                                    SquareTileFrame(num18, num19, true);
                                    NetMessage.SendTileSquare(-1, num18, num19, 1);
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void HellFort(int i, int j, ushort tileType = 0x4b, byte wallType = 14)
        {
            int[] numArray = new int[5];
            int[] numArray2 = new int[5];
            int[] numArray3 = new int[10];
            int[] numArray4 = new int[10];
            int minValue = 8;
            int maxValue = 20;
            numArray[2] = i - genRand.Next(minValue / 2, maxValue / 2);
            numArray2[2] = i + genRand.Next(minValue / 2, maxValue / 2);
            numArray[3] = numArray2[2];
            numArray2[3] = numArray[3] + genRand.Next(minValue, maxValue);
            numArray[4] = numArray2[3];
            numArray2[4] = numArray[4] + genRand.Next(minValue, maxValue);
            numArray2[1] = numArray[2];
            numArray[1] = numArray2[1] - genRand.Next(minValue, maxValue);
            numArray2[0] = numArray[1];
            numArray[0] = numArray2[0] - genRand.Next(minValue, maxValue);
            minValue = 6;
            maxValue = 12;
            numArray3[3] = j - genRand.Next(minValue, maxValue);
            numArray4[3] = j;
            for (int k = 4; k < 10; k++)
            {
                numArray3[k] = numArray4[k - 1];
                numArray4[k] = numArray3[k] + genRand.Next(minValue, maxValue);
            }
            for (int m = 2; m >= 0; m--)
            {
                numArray4[m] = numArray3[m + 1];
                numArray3[m] = numArray4[m] - genRand.Next(minValue, maxValue);
            }
            bool flag = false;
            bool flag2 = false;
            bool[,] flagArray = new bool[5, 10];
            int num5 = 3;
            int num6 = 3;
            for (int n = 0; n < 2; n++)
            {
                if (genRand.Next(3) == 0)
                {
                    flag = true;
                    int num8 = genRand.Next(10);
                    if (num8 < num5)
                    {
                        num5 = num8;
                    }
                    if (num8 > num6)
                    {
                        num6 = num8;
                    }
                    int num9 = 1;
                    if (genRand.Next(2) == 0)
                    {
                        flagArray[0, num8] = true;
                        flagArray[1, num8] = true;
                        num9 = 0;
                    }
                    else
                    {
                        flagArray[1, num8] = true;
                    }
                    int num10 = genRand.Next(2);
                    if (num10 == 0)
                    {
                        num10 = -1;
                    }
                    int num11 = genRand.Next(10);
                    while (((num11 > 0) && (num8 >= 0)) && (num8 < 10))
                    {
                        flagArray[num9, num8] = true;
                        num8 += num10;
                    }
                }
                if (genRand.Next(3) == 0)
                {
                    flag2 = true;
                    int num12 = genRand.Next(10);
                    if (num12 < num5)
                    {
                        num5 = num12;
                    }
                    if (num12 > num6)
                    {
                        num6 = num12;
                    }
                    int num13 = 3;
                    if (genRand.Next(2) == 0)
                    {
                        flagArray[3, num12] = true;
                        flagArray[4, num12] = true;
                        num13 = 4;
                    }
                    else
                    {
                        flagArray[3, num12] = true;
                    }
                    int num14 = genRand.Next(2);
                    if (num14 == 0)
                    {
                        num14 = -1;
                    }
                    int num15 = genRand.Next(10);
                    while (((num15 > 0) && (num12 >= 0)) && (num12 < 10))
                    {
                        flagArray[num13, num12] = true;
                        num12 += num14;
                    }
                }
            }
            for (int num16 = 0; num16 < 5; num16++)
            {
                int num17 = numArray[num16];
                bool flag3 = false;
                for (int num18 = Game1.maxTilesY - 200; num18 < Game1.maxTilesY; num18++)
                {
                    if (Game1.tile[num17, num18].wall > 0)
                    {
                        flag3 = true;
                    }
                }
                if (flag3)
                {
                    for (int num19 = 0; num19 < 10; num19++)
                    {
                        flagArray[num16, num19] = false;
                    }
                }
            }
            int num20 = genRand.Next(10);
            if (num20 < num5)
            {
                num5 = num20;
            }
            num20 = genRand.Next(10);
            if (num20 > num6)
            {
                num6 = num20;
            }
            if (!flag && !flag2)
            {
                while ((num6 - num5) < 5)
                {
                    num20 = genRand.Next(10);
                    if (num20 < num5)
                    {
                        num5 = num20;
                    }
                    num20 = genRand.Next(10);
                    if (num20 > num6)
                    {
                        num6 = num20;
                    }
                }
            }
            for (int num21 = num5; num21 <= num6; num21++)
            {
                flagArray[2, num21] = true;
            }
            for (int num22 = 0; num22 < 5; num22++)
            {
                for (int num23 = 0; num23 < 10; num23++)
                {
                    if (flagArray[num22, num23] && ((numArray3[num23] < (Game1.maxTilesY - 200)) || (numArray4[num23] > (Game1.maxTilesY - 20))))
                    {
                        flagArray[num22, num23] = false;
                    }
                }
            }
            for (int num24 = 0; num24 < 5; num24++)
            {
                for (int num25 = 0; num25 < 10; num25++)
                {
                    if (flagArray[num24, num25])
                    {
                        for (int num26 = numArray[num24]; num26 <= numArray2[num24]; num26++)
                        {
                            for (int num27 = numArray3[num25]; num27 <= numArray4[num25]; num27++)
                            {
                                Game1.tile[num26, num27].liquid = 0;
                                if (((num26 == numArray[num24]) || (num26 == numArray2[num24])) || ((num27 == numArray3[num25]) || (num27 == numArray4[num25])))
                                {
                                    Game1.tile[num26, num27].active(true);
                                    Game1.tile[num26, num27].type = tileType;
                                    Game1.tile[num26, num27].halfBrick(false);
                                    Game1.tile[num26, num27].slope(0);
                                }
                                else
                                {
                                    Game1.tile[num26, num27].wall = wallType;
                                    Game1.tile[num26, num27].active(false);
                                }
                            }
                        }
                    }
                }
            }
            int style = 0x13;
            int num29 = 13;
            for (int num30 = 0; num30 < 4; num30++)
            {
                bool[] flagArray2 = new bool[10];
                bool flag4 = false;
                for (int num31 = 0; num31 < 10; num31++)
                {
                    if (flagArray[num30, num31] && flagArray[num30 + 1, num31])
                    {
                        flagArray2[num31] = true;
                        flag4 = true;
                    }
                }
                while (flag4)
                {
                    int index = genRand.Next(10);
                    if (flagArray2[index])
                    {
                        flag4 = false;
                        Game1.tile[numArray2[num30], numArray4[index] - 1].active(false);
                        Game1.tile[numArray2[num30], numArray4[index] - 2].active(false);
                        Game1.tile[numArray2[num30], numArray4[index] - 3].active(false);
                        Game1.tile[numArray2[num30], numArray4[index] - 1].wall = wallType;
                        Game1.tile[numArray2[num30], numArray4[index] - 2].wall = wallType;
                        Game1.tile[numArray2[num30], numArray4[index] - 3].wall = wallType;
                        PlaceTile(numArray2[num30], numArray4[index] - 1, 10, true, false, -1, style);
                    }
                }
            }
            for (int num33 = 0; num33 < 5; num33++)
            {
                for (int num34 = 0; num34 < 10; num34++)
                {
                    if (flagArray[num33, num34])
                    {
                        if ((num34 > 0) && flagArray[num33, num34 - 1])
                        {
                            int num35 = genRand.Next(numArray[num33] + 2, numArray2[num33] - 1);
                            int num36 = genRand.Next(numArray[num33] + 2, numArray2[num33] - 1);
                            while (((num36 - num35) < 2) || ((num36 - num35) > 5))
                            {
                                num35 = genRand.Next(numArray[num33] + 2, numArray2[num33] - 1);
                                num36 = genRand.Next(numArray[num33] + 2, numArray2[num33] - 1);
                            }
                            for (int num37 = num35; num37 <= num36; num37++)
                            {
                                Game1.tile[num37, numArray3[num34]].active(false);
                                PlaceTile(num37, numArray3[num34], 0x13, true, true, -1, num29);
                                Game1.tile[num37, numArray3[num34]].wall = wallType;
                            }
                        }
                        if (((num33 < 4) && flagArray[num33 + 1, num34]) && (genRand.Next(3) == 0))
                        {
                            Game1.tile[numArray2[num33], numArray4[num34] - 1].active(false);
                            Game1.tile[numArray2[num33], numArray4[num34] - 2].active(false);
                            Game1.tile[numArray2[num33], numArray4[num34] - 3].active(false);
                            Game1.tile[numArray2[num33], numArray4[num34] - 1].wall = wallType;
                            Game1.tile[numArray2[num33], numArray4[num34] - 2].wall = wallType;
                            Game1.tile[numArray2[num33], numArray4[num34] - 3].wall = wallType;
                            PlaceTile(numArray2[num33], numArray4[num34] - 1, 10, true, false, -1, style);
                        }
                    }
                }
            }
            bool flag5 = false;
            for (int num38 = 0; num38 < 5; num38++)
            {
                bool[] flagArray3 = new bool[10];
                for (int num39 = 0; num39 < 10; num39++)
                {
                    if (flagArray[num38, num39])
                    {
                        flag5 = true;
                        flagArray3[num39] = true;
                    }
                }
                if (flag5)
                {
                    bool flag6 = false;
                    for (int num40 = 0; num40 < 10; num40++)
                    {
                        if (flagArray3[num40])
                        {
                            if (((!Game1.tile[numArray[num38] - 1, numArray4[num40] - 1].active() && !Game1.tile[numArray[num38] - 1, numArray4[num40] - 2].active()) && (!Game1.tile[numArray[num38] - 1, numArray4[num40] - 3].active() && (Game1.tile[numArray[num38] - 1, numArray4[num40] - 1].liquid == 0))) && ((Game1.tile[numArray[num38] - 1, numArray4[num40] - 2].liquid == 0) && (Game1.tile[numArray[num38] - 1, numArray4[num40] - 3].liquid == 0)))
                            {
                                flag6 = true;
                            }
                            else
                            {
                                flagArray3[num40] = false;
                            }
                        }
                    }
                    while (flag6)
                    {
                        int num41 = genRand.Next(10);
                        if (flagArray3[num41])
                        {
                            flag6 = false;
                            Game1.tile[numArray[num38], numArray4[num41] - 1].active(false);
                            Game1.tile[numArray[num38], numArray4[num41] - 2].active(false);
                            Game1.tile[numArray[num38], numArray4[num41] - 3].active(false);
                            PlaceTile(numArray[num38], numArray4[num41] - 1, 10, true, false, -1, style);
                        }
                    }
                    break;
                }
            }
            bool flag7 = false;
            for (int num42 = 4; num42 >= 0; num42--)
            {
                bool[] flagArray4 = new bool[10];
                for (int num43 = 0; num43 < 10; num43++)
                {
                    if (flagArray[num42, num43])
                    {
                        flag7 = true;
                        flagArray4[num43] = true;
                    }
                }
                if (flag7)
                {
                    bool flag8 = false;
                    for (int num44 = 0; num44 < 10; num44++)
                    {
                        if (flagArray4[num44])
                        {
                            if (((!Game1.tile[numArray2[num42] + 1, numArray4[num44] - 1].active() && !Game1.tile[numArray2[num42] + 1, numArray4[num44] - 2].active()) && (!Game1.tile[numArray2[num42] + 1, numArray4[num44] - 3].active() && (Game1.tile[numArray2[num42] + 1, numArray4[num44] - 1].liquid == 0))) && ((Game1.tile[numArray2[num42] + 1, numArray4[num44] - 2].liquid == 0) && (Game1.tile[numArray2[num42] + 1, numArray4[num44] - 3].liquid == 0)))
                            {
                                flag8 = true;
                            }
                            else
                            {
                                flagArray4[num44] = false;
                            }
                        }
                    }
                    while (flag8)
                    {
                        int num45 = genRand.Next(10);
                        if (flagArray4[num45])
                        {
                            flag8 = false;
                            Game1.tile[numArray2[num42], numArray4[num45] - 1].active(false);
                            Game1.tile[numArray2[num42], numArray4[num45] - 2].active(false);
                            Game1.tile[numArray2[num42], numArray4[num45] - 3].active(false);
                            PlaceTile(numArray2[num42], numArray4[num45] - 1, 10, true, false, -1, style);
                        }
                    }
                    break;
                }
            }
            bool flag9 = false;
            for (int num46 = 0; num46 < 10; num46++)
            {
                bool[] flagArray5 = new bool[10];
                for (int num47 = 0; num47 < 5; num47++)
                {
                    if (flagArray[num47, num46])
                    {
                        flag9 = true;
                        flagArray5[num47] = true;
                    }
                }
                if (flag9)
                {
                    bool flag10 = true;
                    while (flag10)
                    {
                        int num48 = genRand.Next(5);
                        if (flagArray5[num48])
                        {
                            int num49 = genRand.Next(numArray[num48] + 2, numArray2[num48] - 1);
                            int num50 = genRand.Next(numArray[num48] + 2, numArray2[num48] - 1);
                            while (((num50 - num49) < 2) || ((num50 - num49) > 5))
                            {
                                num49 = genRand.Next(numArray[num48] + 2, numArray2[num48] - 1);
                                num50 = genRand.Next(numArray[num48] + 2, numArray2[num48] - 1);
                            }
                            for (int num51 = num49; num51 <= num50; num51++)
                            {
                                if (Game1.tile[num51, numArray3[num46] - 1].active() || (Game1.tile[num51, numArray3[num46] - 1].liquid > 0))
                                {
                                    flag10 = false;
                                }
                            }
                            if (flag10)
                            {
                                for (int num52 = num49; num52 <= num50; num52++)
                                {
                                    Game1.tile[num52, numArray3[num46]].active(false);
                                    PlaceTile(num52, numArray3[num46], 0x13, true, true, -1, num29);
                                }
                            }
                            flag10 = false;
                        }
                    }
                    return;
                }
            }
        }

        public static void HellHouse(int i, int j, byte type = 0x4c, byte wall = 13)
        {
            int width = genRand.Next(8, 20);
            int num2 = genRand.Next(1, 3);
            int num3 = genRand.Next(4, 13);
            int num4 = i;
            int num5 = j;
            for (int k = 0; k < num2; k++)
            {
                int height = genRand.Next(5, 9);
                HellRoom(num4, num5, width, height, type, wall);
                num5 -= height;
            }
            num5 = j;
            for (int m = 0; m < num3; m++)
            {
                int num9 = genRand.Next(5, 9);
                num5 += num9;
                HellRoom(num4, num5, width, num9, type, wall);
            }
            for (int n = i - (width / 2); n <= (i + (width / 2)); n++)
            {
                num5 = j;
                while ((num5 < Game1.maxTilesY) && ((Game1.tile[n, num5].active() && ((Game1.tile[n, num5].type == 0x4c) || (Game1.tile[n, num5].type == 0x4b))) || ((Game1.tile[i, num5].wall == 13) || (Game1.tile[i, num5].wall == 14))))
                {
                    num5++;
                }
                int num11 = 6 + genRand.Next(3);
                while ((num5 < Game1.maxTilesY) && !Game1.tile[n, num5].active())
                {
                    num11--;
                    Game1.tile[n, num5].active(true);
                    Game1.tile[n, num5].type = 0x39;
                    num5++;
                    if (num11 <= 0)
                    {
                        break;
                    }
                }
            }
            int minValue = 0;
            int maxValue = 0;
            num5 = j;
            while ((num5 < Game1.maxTilesY) && ((Game1.tile[i, num5].active() && ((Game1.tile[i, num5].type == 0x4c) || (Game1.tile[i, num5].type == 0x4b))) || ((Game1.tile[i, num5].wall == 13) || (Game1.tile[i, num5].wall == 14))))
            {
                num5++;
            }
            num5--;
            maxValue = num5;
            while ((Game1.tile[i, num5].active() && ((Game1.tile[i, num5].type == 0x4c) || (Game1.tile[i, num5].type == 0x4b))) || ((Game1.tile[i, num5].wall == 13) || (Game1.tile[i, num5].wall == 14)))
            {
                num5--;
                if (Game1.tile[i, num5].active() && ((Game1.tile[i, num5].type == 0x4c) || (Game1.tile[i, num5].type == 0x4b)))
                {
                    int num14 = genRand.Next((i - (width / 2)) + 1, (i + (width / 2)) - 1);
                    int num15 = genRand.Next((i - (width / 2)) + 1, (i + (width / 2)) - 1);
                    if (num14 > num15)
                    {
                        int num16 = num14;
                        num14 = num15;
                        num15 = num16;
                    }
                    if (num14 == num15)
                    {
                        if (num14 < i)
                        {
                            num15++;
                        }
                        else
                        {
                            num14--;
                        }
                    }
                    for (int num17 = num14; num17 <= num15; num17++)
                    {
                        if (Game1.tile[num17, num5 - 1].wall == 13)
                        {
                            Game1.tile[num17, num5].wall = 13;
                        }
                        if (Game1.tile[num17, num5 - 1].wall == 14)
                        {
                            Game1.tile[num17, num5].wall = 14;
                        }
                        Game1.tile[num17, num5].type = 0x13;
                        Game1.tile[num17, num5].active(true);
                    }
                    num5--;
                }
            }
            minValue = num5;
            float num18 = (maxValue - minValue) * width;
            float num19 = num18 * 0.02f;
            for (int num20 = 0; num20 < num19; num20++)
            {
                int num21 = genRand.Next(i - (width / 2), (i + (width / 2)) + 1);
                int num22 = genRand.Next(minValue, maxValue);
                int num23 = genRand.Next(3, 8);
                for (int num24 = num21 - num23; num24 <= (num21 + num23); num24++)
                {
                    for (int num25 = num22 - num23; num25 <= (num22 + num23); num25++)
                    {
                        float num26 = Math.Abs((int)(num24 - num21));
                        float num27 = Math.Abs((int)(num25 - num22));
                        if (Math.Sqrt((double)((num26 * num26) + (num27 * num27))) < (num23 * 0.4))
                        {
                            try
                            {
                                if ((Game1.tile[num24, num25].type == 0x4c) || (Game1.tile[num24, num25].type == 0x13))
                                {
                                    Game1.tile[num24, num25].active(false);
                                }
                                Game1.tile[num24, num25].wall = 0;
                            }
                            catch
                            {
                            }
                        }
                    }
                }
            }
        }

        public static void HellRoom(int i, int j, int width, int height, byte type = 0x4c, byte wall = 13)
        {
            if (j <= (Game1.maxTilesY - 40))
            {
                for (int k = i - (width / 2); k <= (i + (width / 2)); k++)
                {
                    for (int n = j - height; n <= j; n++)
                    {
                        try
                        {
                            Game1.tile[k, n].active(true);
                            Game1.tile[k, n].type = type;
                            Game1.tile[k, n].liquid = 0;
                            Game1.tile[k, n].lava(false);
                        }
                        catch
                        {
                        }
                    }
                }
                for (int m = (i - (width / 2)) + 1; m <= ((i + (width / 2)) - 1); m++)
                {
                    for (int num4 = (j - height) + 1; num4 <= (j - 1); num4++)
                    {
                        try
                        {
                            Game1.tile[m, num4].active(false);
                            Game1.tile[m, num4].wall = wall;
                            Game1.tile[m, num4].liquid = 0;
                            Game1.tile[m, num4].lava(false);
                        }
                        catch
                        {
                        }
                    }
                }
            }
        }

        public static Vector2 Hive(int i, int j)
        {
            Vector2 vector;
            Vector2 vector2;
            double num = genRand.Next(12, 0x15);
            double num2 = num;
            float num3 = genRand.Next(10, 0x15);
            vector.X = i;
            vector.Y = j;
            vector2.X = genRand.Next(-10, 11) * 0.2f;
            vector2.Y = genRand.Next(-10, 11) * 0.2f;
            while ((num > 0.0) && (num3 > 0f))
            {
                num = num2 * (1f + (genRand.Next(-20, 20) * 0.01f));
                num3--;
                int num4 = (int)(vector.X - num);
                int num6 = (int)(vector.X + num);
                int num5 = (int)(vector.Y - num);
                int num7 = (int)(vector.Y + num);
                if (num4 < 1)
                {
                    num4 = 1;
                }
                if (num6 > (Game1.maxTilesX - 1))
                {
                    num6 = Game1.maxTilesX - 1;
                }
                if (num5 < 1)
                {
                    num5 = 1;
                }
                if (num7 > (Game1.maxTilesY - 1))
                {
                    num7 = Game1.maxTilesY - 1;
                }
                for (int k = num4; k < num6; k++)
                {
                    for (int m = num5; m < num7; m++)
                    {
                        float num10 = Math.Abs((float)(k - vector.X));
                        float num11 = Math.Abs((float)(m - vector.Y));
                        double num12 = Math.Sqrt((double)((num10 * num10) + (num11 * num11)));
                        if (num12 < ((num2 * 0.4) * (1.0 + (genRand.Next(-10, 11) * 0.005))))
                        {
                            if (genRand.Next(3) == 0)
                            {
                                Game1.tile[k, m].liquid = 0xff;
                            }
                            Game1.tile[k, m].honey(true);
                            Game1.tile[k, m].wall = 0x56;
                            Game1.tile[k, m].active(false);
                            Game1.tile[k, m].halfBrick(false);
                            Game1.tile[k, m].slope(0);
                            SquareWallFrame(k, m, true);
                        }
                        else if (num12 < ((num2 * 0.75) * (1.0 + (genRand.Next(-10, 11) * 0.005))))
                        {
                            Game1.tile[k, m].liquid = 0;
                            if (Game1.tile[k, m].wall != 0x56)
                            {
                                Game1.tile[k, m].active(true);
                                Game1.tile[k, m].halfBrick(false);
                                Game1.tile[k, m].slope(0);
                                Game1.tile[k, m].type = 0xe1;
                            }
                        }
                        if (num12 < ((num2 * 0.6) * (1.0 + (genRand.Next(-10, 11) * 0.005))))
                        {
                            Game1.tile[k, m].wall = 0x56;
                        }
                        SquareWallFrame(k, m, true);
                        SquareTileFrame(k, m, true);
                    }
                }
                vector += vector2;
                num3--;
                vector2.Y += genRand.Next(-10, 11) * 0.05f;
                vector2.X += genRand.Next(-10, 11) * 0.05f;
            }
            return new Vector2(vector.X, vector.Y);
        }

        public static bool InWorld(int x, int y, int fluff = 0)
        {
            return (((x >= fluff) && (x < (Game1.maxTilesX - fluff))) && ((y >= fluff) && (y < (Game1.maxTilesY - fluff))));
        }

        public static void IslandHouse(int i, int j)
        {
            byte num = 0xca;
            byte num2 = 0x52;
            Vector2 vector = new Vector2((float)i, (float)j);
            int num7 = 1;
            if (genRand.Next(2) == 0)
            {
                num7 = -1;
            }
            int num8 = genRand.Next(7, 12);
            int num9 = genRand.Next(5, 7);
            vector.X = i + ((num8 + 2) * num7);
            for (int k = j - 15; k < (j + 30); k++)
            {
                if (Game1.tile[(int)vector.X, k].active())
                {
                    vector.Y = k - 1;
                    break;
                }
            }
            vector.X = i;
            int num3 = (int)((vector.X - num8) - 1f);
            int maxTilesX = (int)((vector.X + num8) + 1f);
            int num4 = (int)((vector.Y - num9) - 1f);
            int maxTilesY = (int)(vector.Y + 2f);
            if (num3 < 0)
            {
                num3 = 0;
            }
            if (maxTilesX > Game1.maxTilesX)
            {
                maxTilesX = Game1.maxTilesX;
            }
            if (num4 < 0)
            {
                num4 = 0;
            }
            if (maxTilesY > Game1.maxTilesY)
            {
                maxTilesY = Game1.maxTilesY;
            }
            for (int m = num3; m <= maxTilesX; m++)
            {
                for (int num12 = num4 - 1; num12 < (maxTilesY + 1); num12++)
                {
                    if ((num12 != (num4 - 1)) || ((m != num3) && (m != maxTilesX)))
                    {
                        Game1.tile[m, num12].active(true);
                        Game1.tile[m, num12].liquid = 0;
                        Game1.tile[m, num12].type = num;
                        Game1.tile[m, num12].wall = 0;
                        Game1.tile[m, num12].halfBrick(false);
                        Game1.tile[m, num12].slope(0);
                    }
                }
            }
            num3 = ((int)vector.X) - num8;
            maxTilesX = ((int)vector.X) + num8;
            num4 = ((int)vector.Y) - num9;
            maxTilesY = (int)(vector.Y + 1f);
            if (num3 < 0)
            {
                num3 = 0;
            }
            if (maxTilesX > Game1.maxTilesX)
            {
                maxTilesX = Game1.maxTilesX;
            }
            if (num4 < 0)
            {
                num4 = 0;
            }
            if (maxTilesY > Game1.maxTilesY)
            {
                maxTilesY = Game1.maxTilesY;
            }
            for (int n = num3; n <= maxTilesX; n++)
            {
                for (int num14 = num4; num14 < maxTilesY; num14++)
                {
                    if (((num14 != num4) || ((n != num3) && (n != maxTilesX))) && (Game1.tile[n, num14].wall == 0))
                    {
                        Game1.tile[n, num14].active(false);
                        Game1.tile[n, num14].wall = num2;
                    }
                }
            }
            int num15 = i + ((num8 + 1) * num7);
            int y = (int)vector.Y;
            for (int num17 = num15 - 2; num17 <= (num15 + 2); num17++)
            {
                Game1.tile[num17, y].active(false);
                Game1.tile[num17, y - 1].active(false);
                Game1.tile[num17, y - 2].active(false);
            }
            PlaceTile(num15, y, 10, true, false, -1, 9);
            num15 = (i + ((num8 + 1) * -num7)) - num7;
            for (int num18 = num4; num18 <= (maxTilesY + 1); num18++)
            {
                Game1.tile[num15, num18].active(true);
                Game1.tile[num15, num18].liquid = 0;
                Game1.tile[num15, num18].type = num;
                Game1.tile[num15, num18].wall = 0;
                Game1.tile[num15, num18].halfBrick(false);
                Game1.tile[num15, num18].slope(0);
            }
            int contain = 0;
            int houseCount = WorldGen.houseCount;
            if (houseCount > 2)
            {
                houseCount = genRand.Next(3);
            }
            switch (houseCount)
            {
                case 0:
                    contain = 0x9f;
                    break;

                case 1:
                    contain = 0x41;
                    break;

                case 2:
                    contain = 0x9e;
                    break;
            }
            AddBuriedChest(i, y - 3, contain, false, 13);
            WorldGen.houseCount++;
            int num21 = (i - (num8 / 2)) + 1;
            int num22 = (i + (num8 / 2)) - 1;
            int num23 = 1;
            if (num8 > 10)
            {
                num23 = 2;
            }
            int num24 = ((num4 + maxTilesY) / 2) - 1;
            for (int num25 = num21 - num23; num25 <= (num21 + num23); num25++)
            {
                for (int num26 = num24 - 1; num26 <= (num24 + 1); num26++)
                {
                    Game1.tile[num25, num26].wall = 0x15;
                }
            }
            for (int num27 = num22 - num23; num27 <= (num22 + num23); num27++)
            {
                for (int num28 = num24 - 1; num28 <= (num24 + 1); num28++)
                {
                    Game1.tile[num27, num28].wall = 0x15;
                }
            }
            int num29 = i + (((num8 / 2) + 1) * -num7);
            PlaceTile(num29, maxTilesY - 1, 14, true, false, -1, 7);
            PlaceTile(num29 - 2, maxTilesY - 1, 15, true, false, 0, 10);
            Tile tile1 = Game1.tile[num29 - 2, maxTilesY - 1];
            tile1.frameX = (short)(tile1.frameX + 0x12);
            Tile tile2 = Game1.tile[num29 - 2, maxTilesY - 2];
            tile2.frameX = (short)(tile2.frameX + 0x12);
            PlaceTile(num29 + 2, maxTilesY - 1, 15, true, false, 0, 10);
            int num30 = num3 + 1;
            int num31 = num4;
            PlaceTile(num30, num31, 0x5b, true, false, -1, genRand.Next(7, 10));
            num30 = maxTilesX - 1;
            num31 = num4;
            PlaceTile(num30, num31, 0x5b, true, false, -1, genRand.Next(7, 10));
            if (num7 > 0)
            {
                num30 = num3;
                num31 = num4 + 1;
            }
            else
            {
                num30 = maxTilesX;
                num31 = num4 + 1;
            }
            PlaceTile(num30, num31, 0x5b, true, false, -1, genRand.Next(7, 10));
        }

        public static void JungleRunner(int i, int j)
        {
            Vector2 vector;
            Vector2 vector2;
            double num5 = genRand.Next(5, 11);
            vector.X = i;
            vector.Y = j;
            vector2.X = genRand.Next(-10, 11) * 0.1f;
            vector2.Y = genRand.Next(10, 20) * 0.1f;
            int num6 = 0;
            bool flag = true;
            while (flag)
            {
                if (vector.Y < Game1.worldSurface)
                {
                    int x = (int)vector.X;
                    int y = (int)vector.Y;
                    if (y < 5)
                    {
                        y = 5;
                    }
                    if (((((Game1.tile[x, y].wall == 0) && !Game1.tile[x, y].active()) && ((Game1.tile[x, y - 3].wall == 0) && !Game1.tile[x, y - 3].active())) && (((Game1.tile[x, y - 1].wall == 0) && !Game1.tile[x, y - 1].active()) && ((Game1.tile[x, y - 4].wall == 0) && !Game1.tile[x, y - 4].active()))) && (((Game1.tile[x, y - 2].wall == 0) && !Game1.tile[x, y - 2].active()) && ((Game1.tile[x, y - 5].wall == 0) && !Game1.tile[x, y - 5].active())))
                    {
                        flag = false;
                    }
                }
                JungleX = (int)vector.X;
                num5 += genRand.Next(-20, 0x15) * 0.1f;
                if (num5 < 5.0)
                {
                    num5 = 5.0;
                }
                if (num5 > 10.0)
                {
                    num5 = 10.0;
                }
                int num = (int)(vector.X - (num5 * 0.5));
                int maxTilesX = (int)(vector.X + (num5 * 0.5));
                int num2 = (int)(vector.Y - (num5 * 0.5));
                int maxTilesY = (int)(vector.Y + (num5 * 0.5));
                if (num < 0)
                {
                    num = 0;
                }
                if (maxTilesX > Game1.maxTilesX)
                {
                    maxTilesX = Game1.maxTilesX;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                for (int k = num; k < maxTilesX; k++)
                {
                    for (int m = num2; m < maxTilesY; m++)
                    {
                        if ((Math.Abs((float)(k - vector.X)) + Math.Abs((float)(m - vector.Y))) < ((num5 * 0.5) * (1.0 + (genRand.Next(-10, 11) * 0.015))))
                        {
                            KillTile(k, m, false, false, false);
                        }
                    }
                }
                num6++;
                if ((num6 > 10) && (genRand.Next(50) < num6))
                {
                    num6 = 0;
                    int num11 = -2;
                    if (genRand.Next(2) == 0)
                    {
                        num11 = 2;
                    }
                    TileRunner((int)vector.X, (int)vector.Y, (double)genRand.Next(3, 20), genRand.Next(10, 100), -1, false, (float)num11, 0f, false, true);
                }
                vector += vector2;
                vector2.Y += genRand.Next(-10, 11) * 0.01f;
                if (vector2.Y > 0f)
                {
                    vector2.Y = 0f;
                }
                if (vector2.Y < -2f)
                {
                    vector2.Y = -2f;
                }
                vector2.X += genRand.Next(-10, 11) * 0.1f;
                if (vector.X < (i - 200))
                {
                    vector2.X += genRand.Next(5, 0x15) * 0.1f;
                }
                if (vector.X > (i + 200))
                {
                    vector2.X -= genRand.Next(5, 0x15) * 0.1f;
                }
                if (vector2.X > 1.5)
                {
                    vector2.X = 1.5f;
                }
                if (vector2.X < -1.5)
                {
                    vector2.X = -1.5f;
                }
            }
        }

        public static void kickOut(int n)
        {
            if (Game1.netMode == 1)
            {
                NetMessage.SendData(60, -1, -1, "", n, 0f, 0f, 0f, 0, 0, 0);
            }
            else
            {
                Game1.npc[n].homeless = true;
            }
        }

        public static void KillTile(int i, int j, bool fail = false, bool effectOnly = false, bool noItem = false)
        {
            if (((i >= 0) && (j >= 0)) && ((i < Game1.maxTilesX) && (j < Game1.maxTilesY)))
            {
                Tile trackCache = Game1.tile[i, j];
                if (trackCache == null)
                {
                    trackCache = new Tile();
                    Game1.tile[i, j] = trackCache;
                }
                if (trackCache.active())
                {
                    if ((j >= 1) && (Game1.tile[i, j - 1] == null))
                    {
                        Game1.tile[i, j - 1] = new Tile();
                    }
                    if (((j >= 1) && Game1.tile[i, j - 1].active()) && (((((Game1.tile[i, j - 1].type == 5) && (trackCache.type != 5)) || ((Game1.tile[i, j - 1].type == 0x143) && (trackCache.type != 0x143))) || (((Game1.tile[i, j - 1].type == 0x15) && (trackCache.type != 0x15)) || ((Game1.tile[i, j - 1].type == 0x143) && (trackCache.type != 0x143)))) || ((((Game1.tile[i, j - 1].type == 0x58) && (trackCache.type != 0x58)) || ((Game1.tile[i, j - 1].type == 0x1a) && (trackCache.type != 0x1a))) || ((Game1.tile[i, j - 1].type == 0x48) && (trackCache.type != 0x48)))))
                    {
                        if (Game1.tile[i, j - 1].type == 5)
                        {
                            if (((((Game1.tile[i, j - 1].frameX != 0x42) || (Game1.tile[i, j - 1].frameY < 0)) || (Game1.tile[i, j - 1].frameY > 0x2c)) && (((Game1.tile[i, j - 1].frameX != 0x58) || (Game1.tile[i, j - 1].frameY < 0x42)) || (Game1.tile[i, j - 1].frameY > 110))) && (Game1.tile[i, j - 1].frameY < 0xc6))
                            {
                                return;
                            }
                        }
                        else if (((Game1.tile[i, j - 1].type != 0x143) || (Game1.tile[i, j - 1].frameX == 0x42)) || (Game1.tile[i, j - 1].frameX == 220))
                        {
                            return;
                        }
                    }
                    if (((trackCache.type == 10) && (trackCache.frameY >= 0x252)) && (trackCache.frameY <= 0x286))
                    {
                        fail = true;
                    }
                    if (trackCache.type == 0x8a)
                    {
                        fail = CheckBoulderChest(i, j);
                    }
                    if (trackCache.type == 0xeb)
                    {
                        int frameX = trackCache.frameX;
                        int num2 = i - ((frameX % 0x36) / 0x12);
                        for (int m = 0; m < 3; m++)
                        {
                            if (Game1.tile[num2 + m, j - 1].active() && (Game1.tile[num2 + m, j - 1].type == 0x15))
                            {
                                fail = true;
                                break;
                            }
                        }
                    }
                    if (!effectOnly && !stopDrops)
                    {
                        if (trackCache.type == 0x7f)
                        {
                            Game1.PlaySound(2, i * 0x10, j * 0x10, 0x1b);
                        }
                        else if ((trackCache.type == 0x93) || (trackCache.type == 0xe0))
                        {
                            Game1.PlaySound(2, i * 0x10, j * 0x10, genRand.Next(0x30, 50));
                        }
                        else if (((trackCache.type == 0xa1) || (trackCache.type == 0xa3)) || ((trackCache.type == 0xa4) || (trackCache.type == 200)))
                        {
                            Game1.PlaySound(2, i * 0x10, j * 0x10, 50);
                        }
                        else if ((trackCache.type == 3) || (trackCache.type == 110))
                        {
                            Game1.PlaySound(6, i * 0x10, j * 0x10, 1);
                            if (trackCache.frameX == 0x90)
                            {
                                Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 5, 1, false, 0, false);
                            }
                        }
                        else if (trackCache.type == 0xfe)
                        {
                            Game1.PlaySound(6, i * 0x10, j * 0x10, 1);
                        }
                        else if (trackCache.type == 0x18)
                        {
                            Game1.PlaySound(6, i * 0x10, j * 0x10, 1);
                            if (trackCache.frameX == 0x90)
                            {
                                Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 60, 1, false, 0, false);
                            }
                        }
                        else if ((((Game1.tileAlch[trackCache.type] || (trackCache.type == 0x180)) || ((trackCache.type == 0xe3) || (trackCache.type == 0x20))) || (((trackCache.type == 0x33) || (trackCache.type == 0x34)) || ((trackCache.type == 0x3d) || (trackCache.type == 0x3e)))) || (((((trackCache.type == 0x45) || (trackCache.type == 0x47)) || ((trackCache.type == 0x49) || (trackCache.type == 0x4a))) || (((trackCache.type == 0x71) || (trackCache.type == 0x73)) || ((trackCache.type == 0xb8) || (trackCache.type == 0xc0)))) || (((trackCache.type == 0xcd) || (trackCache.type == 0xe9)) || ((trackCache.type == 0x160) || (trackCache.type == 0x17e)))))
                        {
                            Game1.PlaySound(6, i * 0x10, j * 0x10, 1);
                        }
                        else if (trackCache.type == 0xc9)
                        {
                            Game1.PlaySound(6, i * 0x10, j * 0x10, 1);
                            if (trackCache.frameX == 270)
                            {
                                Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0xb47, 1, false, 0, false);
                            }
                        }
                        else if (((((((trackCache.type == 1) || (trackCache.type == 6)) || ((trackCache.type == 7) || (trackCache.type == 8))) || (((trackCache.type == 9) || (trackCache.type == 0x16)) || ((trackCache.type == 140) || (trackCache.type == 0x19)))) || ((((trackCache.type == 0x25) || (trackCache.type == 0x26)) || ((trackCache.type == 0x27) || (trackCache.type == 0x29))) || (((trackCache.type == 0x2b) || (trackCache.type == 0x2c)) || ((trackCache.type == 0x2d) || (trackCache.type == 0x2e))))) || (((((trackCache.type == 0x2f) || (trackCache.type == 0x30)) || ((trackCache.type == 0x38) || (trackCache.type == 0x3a))) || (((trackCache.type == 0x3f) || (trackCache.type == 0x40)) || ((trackCache.type == 0x41) || (trackCache.type == 0x42)))) || ((((trackCache.type == 0x43) || (trackCache.type == 0x44)) || ((trackCache.type == 0x4b) || (trackCache.type == 0x4c))) || (((trackCache.type == 0x6b) || (trackCache.type == 0x6c)) || ((trackCache.type == 0x6f) || (trackCache.type == 0x75)))))) || (((((((trackCache.type == 0x76) || (trackCache.type == 0x77)) || ((trackCache.type == 120) || (trackCache.type == 0x79))) || (((trackCache.type == 0x7a) || (trackCache.type == 150)) || ((trackCache.type == 0x97) || (trackCache.type == 0x98)))) || ((((trackCache.type == 0x99) || (trackCache.type == 0x9a)) || ((trackCache.type == 0x9b) || (trackCache.type == 0x9c))) || (((trackCache.type == 160) || (trackCache.type == 0xa1)) || ((trackCache.type == 0xa6) || (trackCache.type == 0xa7))))) || (((((trackCache.type == 0xa8) || (trackCache.type == 0xa9)) || ((trackCache.type == 0xaf) || (trackCache.type == 0xb0))) || (((trackCache.type == 0xb1) || (trackCache.type == 0xcb)) || ((trackCache.type == 0xca) || (trackCache.type == 0xcc)))) || ((((trackCache.type == 0xce) || (trackCache.type == 0xd3)) || ((trackCache.type == 0xdd) || (trackCache.type == 0xde))) || (((trackCache.type == 0xdf) || (trackCache.type == 0xe2)) || ((trackCache.type == 0xf8) || (trackCache.type == 0xf9)))))) || (((((trackCache.type == 250) || (trackCache.type == 0x110)) || ((trackCache.type == 0x111) || (trackCache.type == 0x112))) || (((trackCache.type == 0x11c) || (trackCache.type == 0x145)) || ((trackCache.type == 0x15a) || (trackCache.type == 0x15b)))) || ((((trackCache.type == 0x15c) || (trackCache.type == 350)) || ((trackCache.type == 0x16f) || (trackCache.type == 0x165))) || (((trackCache.type == 0x170) || (trackCache.type == 0x171)) || ((trackCache.type == 370) || (trackCache.type == 0x197)))))))
                        {
                            Game1.PlaySound(0x15, i * 0x10, j * 0x10, 1);
                        }
                        else if ((trackCache.type == 0xe7) || (trackCache.type == 0xc3))
                        {
                            Game1.PlaySound(4, i * 0x10, j * 0x10, 1);
                        }
                        else if ((trackCache.type == 0x1a) && (trackCache.frameX >= 0x36))
                        {
                            Game1.PlaySound(4, i * 0x10, j * 0x10, 1);
                        }
                        else if (trackCache.type == 0x13a)
                        {
                            Game1.PlaySound(2, i * 0x10, j * 0x10, 0x34);
                        }
                        else if ((trackCache.type >= 330) && (trackCache.type <= 0x14d))
                        {
                            Game1.PlaySound(0x12, i * 0x10, j * 0x10, 1);
                        }
                        else if (trackCache.type != 0x8a)
                        {
                            Game1.PlaySound(0, i * 0x10, j * 0x10, 1);
                        }
                        if ((((trackCache.type == 0xa2) || (trackCache.type == 0x181)) || ((trackCache.type == 0x81) || ((trackCache.type == 0xa5) && (trackCache.frameX < 0x36)))) && !fail)
                        {
                            Game1.PlaySound(2, i * 0x10, j * 0x10, 0x1b);
                        }
                    }
                    if ((trackCache.type == 0x80) || (trackCache.type == 0x10d))
                    {
                        int num4 = i;
                        int num5 = trackCache.frameX;
                        int num6 = trackCache.frameX;
                        while (num6 >= 100)
                        {
                            num6 -= 100;
                        }
                        while (num6 >= 0x24)
                        {
                            num6 -= 0x24;
                        }
                        if (num6 == 0x12)
                        {
                            num5 = Game1.tile[i - 1, j].frameX;
                            num4--;
                        }
                        if (num5 >= 100)
                        {
                            int index = 0;
                            while (num5 >= 100)
                            {
                                num5 -= 100;
                                index++;
                            }
                            switch ((Game1.tile[num4, j].frameY / 0x12))
                            {
                                case 0:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, Item.headType[index], 1, false, 0, false);
                                    break;

                                case 1:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, Item.bodyType[index], 1, false, 0, false);
                                    break;

                                case 2:
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, Item.legType[index], 1, false, 0, false);
                                    break;
                            }
                            num5 = Game1.tile[num4, j].frameX;
                            while (num5 >= 100)
                            {
                                num5 -= 100;
                            }
                            Game1.tile[num4, j].frameX = (short)num5;
                        }
                    }
                    if (trackCache.type == 0x14e)
                    {
                        int num9 = i;
                        int num10 = trackCache.frameX;
                        int num11 = trackCache.frameX;
                        int num12 = 0;
                        while (num11 >= 0x1388)
                        {
                            num11 -= 0x1388;
                            num12++;
                        }
                        if (num12 != 0)
                        {
                            num11 = (num12 - 1) * 0x12;
                        }
                        switch ((num11 % 0x36))
                        {
                            case 0x12:
                                num10 = Game1.tile[i - 1, j].frameX;
                                num9--;
                                break;

                            case 0x24:
                                num10 = Game1.tile[i - 2, j].frameX;
                                num9 -= 2;
                                break;
                        }
                        if (num10 >= 0x1388)
                        {
                            int type = num10 % 0x1388;
                            type -= 100;
                            int pre = Game1.tile[num9 + 1, j].frameX;
                            if (pre >= 0x61a8)
                            {
                                pre -= 0x61a8;
                            }
                            else
                            {
                                pre -= 0x2710;
                            }
                            if (Game1.netMode != 1)
                            {
                                Item item = new Item();
                                item.netDefaults(type);
                                item.Prefix(pre);
                                int num15 = Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, type, 1, true, 0, false);
                                item.position = Game1.item[num15].position;
                                Game1.item[num15] = item;
                                NetMessage.SendData(0x15, -1, -1, "", num15, 0f, 0f, 0f, 0, 0, 0);
                            }
                            num10 = Game1.tile[num9, j].frameX;
                            int num16 = 0;
                            while (num10 >= 0x1388)
                            {
                                num10 -= 0x1388;
                                num16++;
                            }
                            if (num16 != 0)
                            {
                                num10 = (num16 - 1) * 0x12;
                            }
                            Game1.tile[num9, j].frameX = (short)num10;
                            Game1.tile[num9 + 1, j].frameX = (short)(num10 + 0x12);
                        }
                    }
                    if (trackCache.type == 0x18b)
                    {
                        int num17 = TEItemFrame.Find(i - ((trackCache.frameX % 0x24) / 0x12), j - ((trackCache.frameY % 0x24) / 0x12));
                        if ((num17 != -1) && (((TEItemFrame)TileEntity.ByID[num17]).item.stack > 0))
                        {
                            ((TEItemFrame)TileEntity.ByID[num17]).DropItem();
                            if (Game1.netMode != 2)
                            {
                                Game1.blockMouse = true;
                            }
                            return;
                        }
                    }
                    int num18 = 10;
                    if (trackCache.type == 0xe7)
                    {
                        num18 = 6;
                    }
                    if (fail)
                    {
                        num18 = 3;
                    }
                    if (trackCache.type == 0x8a)
                    {
                        num18 = 0;
                    }
                    if (trackCache.type == 0x175)
                    {
                        num18 = 0;
                    }
                    if (trackCache.type == 0x176)
                    {
                        num18 = 0;
                    }
                    if (trackCache.type == 0x177)
                    {
                        num18 = 0;
                    }
                    if ((trackCache.type >= 300) && (trackCache.type <= 0x134))
                    {
                        num18 = 0;
                    }
                    if (trackCache.type == 0x7d)
                    {
                        num18 = 0;
                    }
                    if (trackCache.type == 0x11f)
                    {
                        num18 = 0;
                    }
                    if (trackCache.type == 0x162)
                    {
                        num18 = 0;
                    }
                    if (trackCache.type == 0x163)
                    {
                        num18 = 0;
                    }
                    if (trackCache.type == 0x178)
                    {
                        num18 = 0;
                    }
                    for (int k = 0; k < num18; k++)
                    {
                        int num20 = 0;
                        if (trackCache.type == 0xd8)
                        {
                            num20 = -1;
                        }
                        if (trackCache.type == 0x14f)
                        {
                            num20 = -1;
                        }
                        if (trackCache.type == 0x152)
                        {
                            num20 = -1;
                        }
                        if (trackCache.type == 0)
                        {
                            num20 = 0;
                        }
                        if (trackCache.type == 0xc0)
                        {
                            num20 = 3;
                        }
                        if (trackCache.type == 0xd0)
                        {
                            num20 = 0x7e;
                        }
                        else if ((trackCache.type == 0x198) || (trackCache.type == 0x199))
                        {
                            num20 = 0x109;
                        }
                        if (trackCache.type == 0x10)
                        {
                            num20 = 1;
                            if (trackCache.frameX >= 0x24)
                            {
                                num20 = 0x52;
                            }
                        }
                        else if (trackCache.type == 0x19f)
                        {
                            num20 = 6;
                        }
                        else if (trackCache.type == 0x1a0)
                        {
                            num20 = 0x3d;
                        }
                        else if (trackCache.type == 0x1a1)
                        {
                            num20 = 0xf2;
                        }
                        else if (trackCache.type == 0x1a2)
                        {
                            num20 = 0x87;
                        }
                        if ((((((trackCache.type == 1) || (trackCache.type == 0x11)) || ((trackCache.type == 0x26) || (trackCache.type == 0x27))) || (((trackCache.type == 0x29) || (trackCache.type == 0x2b)) || ((trackCache.type == 0x2c) || (trackCache.type == 0x30)))) || (((Game1.tileStone[trackCache.type] || (trackCache.type == 0x55)) || ((trackCache.type == 90) || (trackCache.type == 0x5c))) || (((trackCache.type == 0x60) || (trackCache.type == 0x61)) || ((trackCache.type == 0x63) || (trackCache.type == 0x75))))) || (((((trackCache.type == 130) || (trackCache.type == 0x83)) || ((trackCache.type == 0x84) || (trackCache.type == 0x87))) || (((trackCache.type == 0x87) || (trackCache.type == 0x8e)) || ((trackCache.type == 0x8f) || (trackCache.type == 0x90)))) || ((((trackCache.type == 210) || (trackCache.type == 0xcf)) || ((trackCache.type == 0xeb) || (trackCache.type == 0xf7))) || (((trackCache.type == 0x110) || (trackCache.type == 0x111)) || ((trackCache.type == 0x11b) || (trackCache.type == 410))))))
                        {
                            num20 = 1;
                        }
                        if (trackCache.type == 0x17b)
                        {
                            num20 = 0x101;
                        }
                        if (trackCache.type == 0x137)
                        {
                            num20 = 0xcf;
                        }
                        if (trackCache.type == 0x138)
                        {
                            num20 = 0xd0;
                        }
                        if (trackCache.type == 0x139)
                        {
                            num20 = 0xd1;
                        }
                        if (trackCache.type == 0x68)
                        {
                            num20 = -1;
                        }
                        if (((trackCache.type == 0x5f) || (trackCache.type == 0x62)) || (((trackCache.type == 100) || (trackCache.type == 0xae)) || (trackCache.type == 0xad)))
                        {
                            num20 = 6;
                        }
                        if ((((trackCache.type == 30) || (trackCache.type == 0x56)) || ((trackCache.type == 0x5e) || (trackCache.type == 0x6a))) || (((trackCache.type == 0x72) || (trackCache.type == 0x7c)) || ((trackCache.type == 0x80) || (trackCache.type == 0x10d))))
                        {
                            num20 = 7;
                        }
                        if (trackCache.type == 0x174)
                        {
                            num20 = 0xf2;
                        }
                        if (trackCache.type == 0x173)
                        {
                            num20 = 0xf3;
                        }
                        if (trackCache.type == 0x14e)
                        {
                            num20 = 7;
                        }
                        switch (trackCache.type)
                        {
                            case 0x5d:
                            case 0x8b:
                            case 10:
                            case 11:
                            case 0x57:
                            case 0x59:
                            case 0x13f:
                            case 320:
                            case 0xd1:
                            case 0x182:
                            case 0x183:
                            case 390:
                            case 0x195:
                            case 0x196:
                            case 0x19b:
                            case 0x19c:
                                num20 = -1;
                                break;

                            case 0x197:
                                num20 = 10;
                                break;
                        }
                        if (trackCache.type == 240)
                        {
                            int num21 = trackCache.frameX / 0x36;
                            if (trackCache.frameY >= 0x36)
                            {
                                num21 += 0x24;
                            }
                            num20 = 7;
                            switch (num21)
                            {
                                case 0x10:
                                case 0x11:
                                    num20 = 0x1a;
                                    break;
                            }
                            if ((num21 >= 0x2e) && (num21 <= 0x31))
                            {
                                num20 = -1;
                            }
                        }
                        if (trackCache.type == 0xf1)
                        {
                            num20 = 1;
                        }
                        if (trackCache.type == 0xf2)
                        {
                            num20 = -1;
                        }
                        if (trackCache.type == 0x164)
                        {
                            num20 = -1;
                        }
                        if (trackCache.type == 0x15f)
                        {
                            num20 = -1;
                        }
                        if (trackCache.type == 0xf6)
                        {
                            num20 = -1;
                        }
                        if (trackCache.type == 0x24)
                        {
                            num20 = -1;
                        }
                        if (trackCache.type == 0x16d)
                        {
                            num20 = 0xef;
                        }
                        if (trackCache.type == 0x16e)
                        {
                            num20 = 30;
                        }
                        if ((trackCache.type == 0x165) || (trackCache.type == 0x16f))
                        {
                            num20 = 0xec;
                        }
                        if ((trackCache.type == 0x170) || (trackCache.type == 0x171))
                        {
                            num20 = 240;
                        }
                        if (trackCache.type == 170)
                        {
                            num20 = 0xc4;
                        }
                        if (trackCache.type == 0x13b)
                        {
                            num20 = 0xe1;
                        }
                        if (trackCache.type == 0x15a)
                        {
                            num20 = 0x80;
                        }
                        if (trackCache.type == 0x15b)
                        {
                            num20 = 0x75;
                        }
                        if (trackCache.type == 0x15c)
                        {
                            num20 = 0x2a;
                        }
                        if (trackCache.type == 350)
                        {
                            num20 = 0xe2;
                        }
                        if (trackCache.type == 370)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                num20 = 6;
                            }
                            else
                            {
                                num20 = 0x17;
                            }
                        }
                        if (trackCache.type == 0xab)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                num20 = 0xc4;
                            }
                            else
                            {
                                num20 = -1;
                            }
                        }
                        if (trackCache.type == 0x146)
                        {
                            num20 = 13;
                        }
                        if (trackCache.type == 0x147)
                        {
                            num20 = 13;
                        }
                        if (trackCache.type == 0x159)
                        {
                            num20 = 13;
                        }
                        if (trackCache.type == 0x150)
                        {
                            num20 = 6;
                        }
                        if (trackCache.type == 340)
                        {
                            num20 = 0x4b;
                        }
                        if (trackCache.type == 0x155)
                        {
                            num20 = 0x41;
                        }
                        if (trackCache.type == 0x156)
                        {
                            num20 = 0x87;
                        }
                        if (trackCache.type == 0x157)
                        {
                            num20 = 0xa9;
                        }
                        if (trackCache.type == 0x158)
                        {
                            num20 = 0x9c;
                        }
                        if (trackCache.type == 0x148)
                        {
                            num20 = 13;
                        }
                        if (trackCache.type == 0x149)
                        {
                            num20 = 13;
                        }
                        if (trackCache.type == 330)
                        {
                            num20 = 9;
                        }
                        if (trackCache.type == 0x14b)
                        {
                            num20 = 11;
                        }
                        if (trackCache.type == 0x14c)
                        {
                            num20 = 0x13;
                        }
                        if (trackCache.type == 0x14d)
                        {
                            num20 = 11;
                        }
                        if (trackCache.type == 0x65)
                        {
                            num20 = -1;
                        }
                        if (trackCache.type == 0x13)
                        {
                            int num22 = trackCache.frameY / 0x12;
                            switch (num22)
                            {
                                case 0:
                                case 9:
                                case 10:
                                case 11:
                                case 12:
                                    num20 = 7;
                                    goto Label_183D;

                                case 1:
                                    num20 = 0x4d;
                                    goto Label_183D;

                                case 2:
                                    num20 = 0x4e;
                                    goto Label_183D;

                                case 3:
                                    num20 = 0x4f;
                                    goto Label_183D;

                                case 4:
                                    num20 = 0x1a;
                                    goto Label_183D;

                                case 5:
                                    num20 = 0x7e;
                                    goto Label_183D;

                                case 13:
                                    num20 = 0x6d;
                                    goto Label_183D;

                                case 14:
                                    num20 = 13;
                                    goto Label_183D;
                            }
                            if ((num22 >= 15) || (num22 <= 0x10))
                            {
                                num20 = -1;
                            }
                            else
                            {
                                switch (num22)
                                {
                                    case 0x11:
                                        num20 = 0xd7;
                                        goto Label_183D;

                                    case 0x12:
                                        num20 = 0xd6;
                                        goto Label_183D;
                                }
                                num20 = 1;
                            }
                        }
                    Label_183D:
                        if (trackCache.type == 0x4f)
                        {
                            int num23 = trackCache.frameY / 0x24;
                            switch (num23)
                            {
                                case 0:
                                    num20 = 7;
                                    goto Label_18A0;

                                case 1:
                                    num20 = 0x4d;
                                    goto Label_18A0;

                                case 2:
                                    num20 = 0x4e;
                                    goto Label_18A0;

                                case 3:
                                    num20 = 0x4f;
                                    goto Label_18A0;

                                case 4:
                                    num20 = 0x7e;
                                    goto Label_18A0;

                                case 8:
                                    num20 = 0x6d;
                                    goto Label_18A0;
                            }
                            if (num23 >= 9)
                            {
                                num20 = -1;
                            }
                            else
                            {
                                num20 = 1;
                            }
                        }
                    Label_18A0:
                        if (trackCache.type == 0x12)
                        {
                            int num24 = trackCache.frameX / 0x24;
                            switch (num24)
                            {
                                case 0:
                                    num20 = 7;
                                    goto Label_1970;

                                case 1:
                                    num20 = 0x4d;
                                    goto Label_1970;

                                case 2:
                                    num20 = 0x4e;
                                    goto Label_1970;

                                case 3:
                                    num20 = 0x4f;
                                    goto Label_1970;

                                case 4:
                                    num20 = 0x1a;
                                    goto Label_1970;

                                case 5:
                                    num20 = 40;
                                    goto Label_1970;

                                case 6:
                                    num20 = 5;
                                    goto Label_1970;

                                case 7:
                                    num20 = 0x1a;
                                    goto Label_1970;

                                case 8:
                                    num20 = 4;
                                    goto Label_1970;

                                case 9:
                                    num20 = 0x7e;
                                    goto Label_1970;

                                case 10:
                                    num20 = 0x94;
                                    goto Label_1970;
                            }
                            if (((num24 == 11) || (num24 == 12)) || (num24 == 13))
                            {
                                num20 = 1;
                            }
                            else
                            {
                                switch (num24)
                                {
                                    case 14:
                                        num20 = 0x6d;
                                        goto Label_1970;

                                    case 15:
                                        num20 = 0x7e;
                                        goto Label_1970;
                                }
                                num20 = -1;
                            }
                        }
                    Label_1970:
                        if (((trackCache.type == 14) || (trackCache.type == 0x57)) || (trackCache.type == 0x58))
                        {
                            num20 = -1;
                        }
                        if ((trackCache.type >= 0xff) && (trackCache.type <= 0x105))
                        {
                            int num25 = trackCache.type - 0xff;
                            num20 = 0x56 + num25;
                            if (num25 == 6)
                            {
                                num20 = 0x8a;
                            }
                        }
                        if ((trackCache.type >= 0x106) && (trackCache.type <= 0x10c))
                        {
                            int num26 = trackCache.type - 0x106;
                            num20 = 0x56 + num26;
                            if (num26 == 6)
                            {
                                num20 = 0x8a;
                            }
                        }
                        if (trackCache.type == 0xb2)
                        {
                            int num27 = trackCache.frameX / 0x12;
                            num20 = 0x56 + num27;
                            if (num27 == 6)
                            {
                                num20 = 0x8a;
                            }
                        }
                        if (trackCache.type == 0xba)
                        {
                            if (trackCache.frameX <= 360)
                            {
                                num20 = 0x1a;
                            }
                            else if (trackCache.frameX <= 0x34e)
                            {
                                num20 = 1;
                            }
                            else if (trackCache.frameX <= 0x3ba)
                            {
                                num20 = 9;
                            }
                            else if (trackCache.frameX <= 0x426)
                            {
                                num20 = 11;
                            }
                            else if (trackCache.frameX <= 0x492)
                            {
                                num20 = 10;
                            }
                            else if (trackCache.frameX <= 0x534)
                            {
                                num20 = 0;
                            }
                            else if (trackCache.frameX <= 0x56a)
                            {
                                num20 = 10;
                            }
                            else
                            {
                                num20 = 80;
                            }
                        }
                        if (trackCache.type == 0xbb)
                        {
                            if (trackCache.frameX <= 0x90)
                            {
                                num20 = 1;
                            }
                            else if (trackCache.frameX <= 0x132)
                            {
                                num20 = 0x26;
                            }
                            else if (trackCache.frameX <= 0x1d4)
                            {
                                num20 = 0x24;
                            }
                            else if (trackCache.frameX <= 0x2e2)
                            {
                                num20 = 30;
                            }
                            else if (trackCache.frameX <= 970)
                            {
                                num20 = 1;
                            }
                            else if (trackCache.frameX <= 0x46c)
                            {
                                num20 = 0x94;
                            }
                            else if (trackCache.frameX <= 0x46c)
                            {
                                num20 = 0x9b;
                            }
                            else if (trackCache.frameX <= 0x544)
                            {
                                num20 = 1;
                            }
                            else if (trackCache.frameX <= 0x61c)
                            {
                                num20 = 0;
                            }
                        }
                        if (trackCache.type == 0x69)
                        {
                            num20 = 1;
                            if ((trackCache.frameX >= 0x60c) && (trackCache.frameX <= 0x676))
                            {
                                num20 = 0x94;
                            }
                        }
                        if (trackCache.type == 0x15d)
                        {
                            num20 = 1;
                        }
                        if (trackCache.type == 0x151)
                        {
                            num20 = 1;
                        }
                        if (trackCache.type == 0xef)
                        {
                            switch ((trackCache.frameX / 0x12))
                            {
                                case 0:
                                    num20 = 9;
                                    break;

                                case 1:
                                    num20 = 0x51;
                                    break;

                                case 2:
                                    num20 = 8;
                                    break;

                                case 3:
                                    num20 = 0x52;
                                    break;

                                case 4:
                                    num20 = 11;
                                    break;

                                case 5:
                                    num20 = 0x53;
                                    break;

                                case 6:
                                    num20 = 10;
                                    break;

                                case 7:
                                    num20 = 0x54;
                                    break;

                                case 8:
                                    num20 = 14;
                                    break;

                                case 9:
                                    num20 = 0x17;
                                    break;

                                case 10:
                                    num20 = 0x19;
                                    break;

                                case 11:
                                    num20 = 0x30;
                                    break;

                                case 12:
                                    num20 = 0x90;
                                    break;

                                case 13:
                                    num20 = 0x31;
                                    break;

                                case 14:
                                    num20 = 0x91;
                                    break;

                                case 15:
                                    num20 = 50;
                                    break;

                                case 0x10:
                                    num20 = 0x92;
                                    break;

                                case 0x11:
                                    num20 = 0x80;
                                    break;

                                case 0x12:
                                    num20 = 0x54;
                                    break;

                                case 0x13:
                                    num20 = 0x75;
                                    break;

                                case 20:
                                    num20 = 0x2a;
                                    break;

                                case 0x15:
                                    num20 = -1;
                                    break;

                                case 0x16:
                                    num20 = 0x109;
                                    break;
                            }
                        }
                        if (trackCache.type == 0xb9)
                        {
                            if (trackCache.frameY == 0x12)
                            {
                                int num29 = trackCache.frameX / 0x24;
                                if (num29 < 6)
                                {
                                    num20 = 1;
                                }
                                else if (num29 < 0x10)
                                {
                                    num20 = 0x1a;
                                }
                                else if (num29 == 0x10)
                                {
                                    num20 = 9;
                                }
                                else if (num29 == 0x11)
                                {
                                    num20 = 11;
                                }
                                else if (num29 == 0x12)
                                {
                                    num20 = 10;
                                }
                                else if (num29 == 0x13)
                                {
                                    num20 = 0x56;
                                }
                                else if (num29 == 20)
                                {
                                    num20 = 0x57;
                                }
                                else if (num29 == 0x15)
                                {
                                    num20 = 0x58;
                                }
                                else if (num29 == 0x16)
                                {
                                    num20 = 0x59;
                                }
                                else if (num29 == 0x17)
                                {
                                    num20 = 90;
                                }
                                else if (num29 == 0x18)
                                {
                                    num20 = 0x5b;
                                }
                                else if (num29 < 0x1f)
                                {
                                    num20 = 80;
                                }
                                else if (num29 < 0x21)
                                {
                                    num20 = 7;
                                }
                                else if (num29 < 0x22)
                                {
                                    num20 = 8;
                                }
                                else if (num29 < 0x27)
                                {
                                    num20 = 30;
                                }
                                else if (num29 < 0x2a)
                                {
                                    num20 = 1;
                                }
                            }
                            else
                            {
                                int num30 = trackCache.frameX / 0x12;
                                if (num30 < 6)
                                {
                                    num20 = 1;
                                }
                                else if (num30 < 12)
                                {
                                    num20 = 0;
                                }
                                else if (num30 < 0x1b)
                                {
                                    num20 = 0x1a;
                                }
                                else if (num30 < 0x20)
                                {
                                    num20 = 1;
                                }
                                else if (num30 < 0x23)
                                {
                                    num20 = 0;
                                }
                                else if (num30 < 0x2e)
                                {
                                    num20 = 80;
                                }
                                else if (num30 < 0x34)
                                {
                                    num20 = 30;
                                }
                            }
                        }
                        if (trackCache.type == 0xb8)
                        {
                            int num31 = trackCache.frameX / 0x16;
                            if (num31 == 5)
                            {
                                num20 = 0x102;
                            }
                            else
                            {
                                num20 = 0x5d + num31;
                            }
                        }
                        if (trackCache.type == 0xed)
                        {
                            num20 = 0x94;
                        }
                        if (trackCache.type == 0x9d)
                        {
                            num20 = 0x4d;
                        }
                        if (((trackCache.type == 0x9e) || (trackCache.type == 0xe8)) || (trackCache.type == 0x17f))
                        {
                            num20 = 0x4e;
                        }
                        if (trackCache.type == 0x9f)
                        {
                            num20 = 0x4e;
                        }
                        if (trackCache.type == 15)
                        {
                            num20 = -1;
                        }
                        if (trackCache.type == 0xbf)
                        {
                            num20 = 7;
                        }
                        if (trackCache.type == 5)
                        {
                            num20 = 7;
                            if ((i > 5) && (i < (Game1.maxTilesX - 5)))
                            {
                                int num32 = i;
                                int num33 = j;
                                if ((trackCache.frameX == 0x42) && (trackCache.frameY <= 0x2d))
                                {
                                    num32++;
                                }
                                if (((trackCache.frameX == 0x58) && (trackCache.frameY >= 0x42)) && (trackCache.frameY <= 110))
                                {
                                    num32--;
                                }
                                if (((trackCache.frameX == 0x16) && (trackCache.frameY >= 0x84)) && (trackCache.frameY <= 0xb0))
                                {
                                    num32--;
                                }
                                if (((trackCache.frameX == 0x2c) && (trackCache.frameY >= 0x84)) && (trackCache.frameY <= 0xb0))
                                {
                                    num32++;
                                }
                                if (((trackCache.frameX == 0x2c) && (trackCache.frameY >= 0x84)) && (trackCache.frameY <= 0xb0))
                                {
                                    num32++;
                                }
                                if ((trackCache.frameX == 0x2c) && (trackCache.frameY >= 0xc6))
                                {
                                    num32++;
                                }
                                if ((trackCache.frameX == 0x42) && (trackCache.frameY >= 0xc6))
                                {
                                    num32--;
                                }
                                while ((Game1.tile[num32, num33] != null) && (!Game1.tile[num32, num33].active() || !Game1.tileSolid[Game1.tile[num32, num33].type]))
                                {
                                    num33++;
                                }
                                if (Game1.tile[num32, num33] != null)
                                {
                                    if (Game1.tile[num32, num33].active() && (Game1.tile[num32, num33].type == 0x17))
                                    {
                                        num20 = 0x4d;
                                    }
                                    if (Game1.tile[num32, num33].active() && (Game1.tile[num32, num33].type == 60))
                                    {
                                        num20 = 0x4e;
                                    }
                                    if (Game1.tile[num32, num33].active() && (Game1.tile[num32, num33].type == 70))
                                    {
                                        num20 = 0x1a;
                                    }
                                    if (Game1.tile[num32, num33].active() && (Game1.tile[num32, num33].type == 0x6d))
                                    {
                                        num20 = 0x4f;
                                    }
                                    if (Game1.tile[num32, num33].active() && (Game1.tile[num32, num33].type == 0xc7))
                                    {
                                        num20 = 0x79;
                                    }
                                    if (Game1.tile[num32, num33].active() && (Game1.tile[num32, num33].type == 0x93))
                                    {
                                        num20 = 0x7a;
                                    }
                                }
                            }
                        }
                        if (trackCache.type == 0x143)
                        {
                            num20 = 0xd7;
                            if ((i > 5) && (i < (Game1.maxTilesX - 5)))
                            {
                                int num34 = i;
                                int num35 = j;
                                while ((Game1.tile[num34, num35] != null) && (!Game1.tile[num34, num35].active() || !Game1.tileSolid[Game1.tile[num34, num35].type]))
                                {
                                    num35++;
                                }
                                if (Game1.tile[num34, num35] != null)
                                {
                                    if (Game1.tile[num34, num35].active() && (Game1.tile[num34, num35].type == 0xea))
                                    {
                                        num20 = 0x79;
                                    }
                                    if (Game1.tile[num34, num35].active() && (Game1.tile[num34, num35].type == 0x74))
                                    {
                                        num20 = 0x4f;
                                    }
                                    if (Game1.tile[num34, num35].active() && (Game1.tile[num34, num35].type == 0x70))
                                    {
                                        num20 = 0x4d;
                                    }
                                }
                            }
                        }
                        if (trackCache.type == 0x89)
                        {
                            num20 = 1;
                            int num36 = trackCache.frameY / 0x12;
                            if (num36 > 0)
                            {
                                num20 = 0x94;
                            }
                        }
                        if (trackCache.type == 0xd4)
                        {
                            num20 = -1;
                        }
                        if (trackCache.type == 0xd5)
                        {
                            num20 = 0x81;
                        }
                        if (trackCache.type == 0xd6)
                        {
                            num20 = 1;
                        }
                        if (trackCache.type == 0xd7)
                        {
                            num20 = -6;
                        }
                        if (trackCache.type == 0x145)
                        {
                            num20 = 0x51;
                        }
                        if (trackCache.type == 0xfb)
                        {
                            num20 = 0xbd;
                        }
                        if (trackCache.type == 0xfc)
                        {
                            num20 = 190;
                        }
                        if (trackCache.type == 0xfd)
                        {
                            num20 = 0xbf;
                        }
                        if (trackCache.type == 0xfe)
                        {
                            if (trackCache.frameX < 0x48)
                            {
                                num20 = 3;
                            }
                            else if (trackCache.frameX < 0x6c)
                            {
                                num20 = 3;
                                if (genRand.Next(3) == 0)
                                {
                                    num20 = 0xbd;
                                }
                            }
                            else if (trackCache.frameX < 0x90)
                            {
                                num20 = 3;
                                if (genRand.Next(2) == 0)
                                {
                                    num20 = 0xbd;
                                }
                            }
                            else
                            {
                                num20 = 3;
                                if (genRand.Next(4) != 0)
                                {
                                    num20 = 0xbd;
                                }
                            }
                        }
                        if (trackCache.type == 0x15)
                        {
                            if (trackCache.frameX >= 0x3f0)
                            {
                                num20 = -1;
                            }
                            else if (trackCache.frameX >= 0x264)
                            {
                                num20 = 11;
                            }
                            else if (trackCache.frameX >= 0x240)
                            {
                                num20 = 0x94;
                            }
                            else if (trackCache.frameX >= 540)
                            {
                                num20 = 0x1a;
                            }
                            else if (trackCache.frameX >= 0x1f8)
                            {
                                num20 = 0x7e;
                            }
                            else if (trackCache.frameX >= 0x1d4)
                            {
                                num20 = 0x74;
                            }
                            else if (trackCache.frameX >= 0x1b0)
                            {
                                num20 = 7;
                            }
                            else if (trackCache.frameX >= 0x18c)
                            {
                                num20 = 11;
                            }
                            else if (trackCache.frameX >= 360)
                            {
                                num20 = 10;
                            }
                            else if (trackCache.frameX >= 0x144)
                            {
                                num20 = 0x4f;
                            }
                            else if (trackCache.frameX >= 0x120)
                            {
                                num20 = 0x4e;
                            }
                            else if (trackCache.frameX >= 0xfc)
                            {
                                num20 = 0x4d;
                            }
                            else if (trackCache.frameX >= 0xd8)
                            {
                                num20 = 1;
                            }
                            else if (trackCache.frameX >= 180)
                            {
                                num20 = 7;
                            }
                            else if (trackCache.frameX >= 0x6c)
                            {
                                num20 = 0x25;
                            }
                            else if (trackCache.frameX >= 0x24)
                            {
                                num20 = 10;
                            }
                            else
                            {
                                num20 = 7;
                            }
                        }
                        if (trackCache.type == 2)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                num20 = 0;
                            }
                            else
                            {
                                num20 = 2;
                            }
                        }
                        if (Game1.tileMoss[trackCache.type])
                        {
                            if (trackCache.type == 0x17d)
                            {
                                num20 = 0x102;
                            }
                            else
                            {
                                num20 = (trackCache.type - 0xb3) + 0x5d;
                            }
                        }
                        if (trackCache.type == 0x7f)
                        {
                            num20 = 0x43;
                        }
                        if (trackCache.type == 0x5b)
                        {
                            num20 = -1;
                        }
                        if (trackCache.type == 0xc6)
                        {
                            num20 = 0x6d;
                        }
                        if (trackCache.type == 0x1a)
                        {
                            if (trackCache.frameX >= 0x36)
                            {
                                num20 = 5;
                            }
                            else
                            {
                                num20 = 8;
                            }
                        }
                        if (trackCache.type == 0x22)
                        {
                            num20 = -1;
                        }
                        if (trackCache.type == 6)
                        {
                            num20 = 8;
                        }
                        if (((trackCache.type == 7) || (trackCache.type == 0x2f)) || (trackCache.type == 0x11c))
                        {
                            num20 = 9;
                        }
                        if (((trackCache.type == 8) || (trackCache.type == 0x2d)) || (trackCache.type == 0x66))
                        {
                            num20 = 10;
                        }
                        if (((trackCache.type == 9) || (trackCache.type == 0x2a)) || (((trackCache.type == 0x2e) || (trackCache.type == 0x7e)) || (trackCache.type == 0x88)))
                        {
                            num20 = 11;
                        }
                        if ((trackCache.type == 0xa6) || (trackCache.type == 0xaf))
                        {
                            num20 = 0x51;
                        }
                        if (trackCache.type == 0xa7)
                        {
                            num20 = 0x52;
                        }
                        if ((trackCache.type == 0xa8) || (trackCache.type == 0xb0))
                        {
                            num20 = 0x53;
                        }
                        if ((trackCache.type == 0xa9) || (trackCache.type == 0xb1))
                        {
                            num20 = 0x54;
                        }
                        if (trackCache.type == 0xc7)
                        {
                            num20 = 0x75;
                        }
                        if (trackCache.type == 0xcd)
                        {
                            num20 = 0x7d;
                        }
                        if (trackCache.type == 0xc9)
                        {
                            num20 = 0x7d;
                        }
                        if (trackCache.type == 0xd3)
                        {
                            num20 = 0x80;
                        }
                        if (trackCache.type == 0xe3)
                        {
                            switch ((trackCache.frameX / 0x22))
                            {
                                case 0:
                                case 1:
                                    num20 = 0x1a;
                                    break;

                                case 3:
                                    num20 = 3;
                                    break;

                                case 2:
                                case 4:
                                case 5:
                                case 6:
                                    num20 = 40;
                                    break;

                                case 7:
                                    num20 = 0x75;
                                    break;

                                case 8:
                                    num20 = 0x11;
                                    break;

                                case 9:
                                    num20 = 6;
                                    break;

                                case 10:
                                    num20 = 3;
                                    break;

                                case 11:
                                    num20 = 0x1a;
                                    break;
                            }
                        }
                        if (trackCache.type == 0xcc)
                        {
                            num20 = 0x75;
                            if (genRand.Next(2) == 0)
                            {
                                num20 = 1;
                            }
                        }
                        if (trackCache.type == 0xcb)
                        {
                            num20 = 0x75;
                        }
                        if (trackCache.type == 0xf3)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                num20 = 7;
                            }
                            else
                            {
                                num20 = 13;
                            }
                        }
                        if (trackCache.type == 0xf4)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                num20 = 1;
                            }
                            else
                            {
                                num20 = 13;
                            }
                        }
                        else if ((((trackCache.type >= 0x166) && (trackCache.type <= 0x16c)) || ((trackCache.type >= 0x113) && (trackCache.type <= 0x11a))) || (((((trackCache.type == 0x11d) || (trackCache.type == 0x11e)) || ((trackCache.type >= 0x120) && (trackCache.type <= 0x129))) || ((trackCache.type >= 0x13c) && (trackCache.type <= 0x13e))) || ((((trackCache.type == 0x12a) || (trackCache.type == 0x12b)) || ((trackCache.type == 0x135) || (trackCache.type == 310))) || (((trackCache.type == 0x153) || (trackCache.type == 0x19d)) || (trackCache.type == 0x19e)))))
                        {
                            num20 = 13;
                            if (genRand.Next(3) != 0)
                            {
                                num20 = -1;
                            }
                        }
                        if (trackCache.type == 13)
                        {
                            if (trackCache.frameX >= 90)
                            {
                                num20 = -1;
                            }
                            else
                            {
                                num20 = 13;
                            }
                        }
                        if (trackCache.type == 0xbd)
                        {
                            num20 = 0x10;
                        }
                        if (trackCache.type == 12)
                        {
                            num20 = 12;
                        }
                        if ((trackCache.type == 3) || (trackCache.type == 0x49))
                        {
                            num20 = 3;
                        }
                        if (trackCache.type == 0x36)
                        {
                            num20 = 13;
                        }
                        if ((trackCache.type == 0x16) || (trackCache.type == 140))
                        {
                            num20 = 14;
                        }
                        if (trackCache.type == 0x4e)
                        {
                            num20 = 0x16;
                        }
                        if (trackCache.type == 0x1c)
                        {
                            num20 = 0x16;
                            if ((trackCache.frameY >= 0x48) && (trackCache.frameY <= 90))
                            {
                                num20 = 1;
                            }
                            if ((trackCache.frameY >= 0x90) && (trackCache.frameY <= 0xea))
                            {
                                num20 = 0x30;
                            }
                            if ((trackCache.frameY >= 0xfc) && (trackCache.frameY <= 0x166))
                            {
                                num20 = 0x55;
                            }
                            if ((trackCache.frameY >= 360) && (trackCache.frameY <= 0x1d2))
                            {
                                num20 = 0x1a;
                            }
                            if ((trackCache.frameY >= 0x1d4) && (trackCache.frameY <= 0x23e))
                            {
                                num20 = 0x24;
                            }
                            if ((trackCache.frameY >= 0x240) && (trackCache.frameY <= 790))
                            {
                                num20 = 0x12;
                            }
                            if ((trackCache.frameY >= 0x318) && (trackCache.frameY <= 0x382))
                            {
                                num20 = 5;
                            }
                            if ((trackCache.frameY >= 900) && (trackCache.frameY <= 0x3ee))
                            {
                                num20 = 0;
                            }
                            if ((trackCache.frameY >= 0x3f0) && (trackCache.frameY <= 0x45a))
                            {
                                num20 = 0x94;
                            }
                            if ((trackCache.frameY >= 0x45c) && (trackCache.frameY <= 0x4c6))
                            {
                                num20 = 0xf1;
                            }
                        }
                        if (trackCache.type == 0xa3)
                        {
                            num20 = 0x76;
                        }
                        if (trackCache.type == 0xa4)
                        {
                            num20 = 0x77;
                        }
                        if (trackCache.type == 200)
                        {
                            num20 = 120;
                        }
                        if ((trackCache.type == 0xdd) || (trackCache.type == 0xf8))
                        {
                            num20 = 0x90;
                        }
                        if ((trackCache.type == 0xde) || (trackCache.type == 0xf9))
                        {
                            num20 = 0x91;
                        }
                        if ((trackCache.type == 0xdf) || (trackCache.type == 250))
                        {
                            num20 = 0x92;
                        }
                        if (trackCache.type == 0xe0)
                        {
                            num20 = 0x95;
                        }
                        if (trackCache.type == 0xe1)
                        {
                            num20 = 0x93;
                        }
                        if (trackCache.type == 0xe5)
                        {
                            num20 = 0x99;
                        }
                        if (trackCache.type == 0xe7)
                        {
                            num20 = 0x99;
                            if (genRand.Next(3) == 0)
                            {
                                num20 = 0x1a;
                            }
                        }
                        if (trackCache.type == 0xe2)
                        {
                            num20 = 0x94;
                        }
                        if (trackCache.type == 0x67)
                        {
                            num20 = -1;
                        }
                        if (trackCache.type == 0x1d)
                        {
                            num20 = 0x17;
                        }
                        if (trackCache.type == 40)
                        {
                            num20 = 0x1c;
                        }
                        if (trackCache.type == 0x31)
                        {
                            num20 = 0x1d;
                        }
                        if (trackCache.type == 50)
                        {
                            num20 = 0x16;
                        }
                        if (trackCache.type == 0x33)
                        {
                            num20 = 30;
                        }
                        if ((trackCache.type == 0x34) || (trackCache.type == 0x161))
                        {
                            num20 = 3;
                        }
                        if (((trackCache.type == 0x35) || (trackCache.type == 0x51)) || (((trackCache.type == 0x97) || (trackCache.type == 0xca)) || (trackCache.type == 0x112)))
                        {
                            num20 = 0x20;
                        }
                        if ((trackCache.type == 0x38) || (trackCache.type == 0x98))
                        {
                            num20 = 0x25;
                        }
                        if (trackCache.type == 0x4b)
                        {
                            num20 = 0x6d;
                        }
                        if (((trackCache.type == 0x39) || (trackCache.type == 0x77)) || ((trackCache.type == 0x8d) || (trackCache.type == 0xea)))
                        {
                            num20 = 0x24;
                        }
                        if ((trackCache.type == 0x3b) || (trackCache.type == 120))
                        {
                            num20 = 0x26;
                        }
                        if ((((trackCache.type == 0x3d) || (trackCache.type == 0x3e)) || ((trackCache.type == 0x4a) || (trackCache.type == 80))) || (((trackCache.type == 0xbc) || (trackCache.type == 0xe9)) || ((trackCache.type == 0xec) || (trackCache.type == 0x180))))
                        {
                            num20 = 40;
                        }
                        if (trackCache.type == 0xee)
                        {
                            if (genRand.Next(3) == 0)
                            {
                                num20 = 0xa7;
                            }
                            else
                            {
                                num20 = 0xa6;
                            }
                        }
                        if (trackCache.type == 0x45)
                        {
                            num20 = 7;
                        }
                        if (((trackCache.type == 0x47) || (trackCache.type == 0x48)) || (trackCache.type == 190))
                        {
                            num20 = 0x1a;
                        }
                        if (trackCache.type == 70)
                        {
                            num20 = 0x11;
                        }
                        if (trackCache.type == 0x70)
                        {
                            num20 = 14;
                        }
                        if (trackCache.type == 0x7b)
                        {
                            num20 = 0x35;
                        }
                        if (trackCache.type == 0xa1)
                        {
                            num20 = 80;
                        }
                        if (trackCache.type == 0xce)
                        {
                            num20 = 80;
                        }
                        if (trackCache.type == 0xa2)
                        {
                            num20 = 80;
                        }
                        if (trackCache.type == 0xa5)
                        {
                            if (trackCache.frameX < 0x36)
                            {
                                num20 = 80;
                            }
                            else if (trackCache.frameX >= 0x144)
                            {
                                num20 = 0x75;
                            }
                            else if (trackCache.frameX >= 270)
                            {
                                num20 = 14;
                            }
                            else if (trackCache.frameX >= 0xd8)
                            {
                                num20 = 1;
                            }
                            else if (trackCache.frameX >= 0xa2)
                            {
                                num20 = 0x93;
                            }
                            else if (trackCache.frameX >= 0x6c)
                            {
                                num20 = 30;
                            }
                            else
                            {
                                num20 = 1;
                            }
                        }
                        if (trackCache.type == 0xc1)
                        {
                            num20 = 4;
                        }
                        if (trackCache.type == 0xc2)
                        {
                            num20 = 0x1a;
                        }
                        if (trackCache.type == 0xc3)
                        {
                            num20 = 5;
                        }
                        if (trackCache.type == 0xc4)
                        {
                            num20 = 0x6c;
                        }
                        if (trackCache.type == 0xc5)
                        {
                            num20 = 4;
                        }
                        if (trackCache.type == 0x99)
                        {
                            num20 = 0x1a;
                        }
                        if (trackCache.type == 0x9a)
                        {
                            num20 = 0x20;
                        }
                        if (trackCache.type == 0x9b)
                        {
                            num20 = 2;
                        }
                        if (trackCache.type == 0x9c)
                        {
                            num20 = 1;
                        }
                        if (((trackCache.type == 0x74) || (trackCache.type == 0x76)) || ((trackCache.type == 0x93) || (trackCache.type == 0x94)))
                        {
                            num20 = 0x33;
                        }
                        if (trackCache.type == 0x6d)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                num20 = 0;
                            }
                            else
                            {
                                num20 = 0x2f;
                            }
                        }
                        if (((trackCache.type == 110) || (trackCache.type == 0x71)) || (trackCache.type == 0x73))
                        {
                            num20 = 0x2f;
                        }
                        if ((trackCache.type == 0x6b) || (trackCache.type == 0x79))
                        {
                            num20 = 0x30;
                        }
                        if (((trackCache.type == 0x6c) || (trackCache.type == 0x7a)) || (trackCache.type == 0x92))
                        {
                            num20 = 0x31;
                        }
                        if (((trackCache.type == 0x6f) || (trackCache.type == 0x91)) || (trackCache.type == 150))
                        {
                            num20 = 50;
                        }
                        if (trackCache.type == 0x85)
                        {
                            num20 = 50;
                            if (trackCache.frameX >= 0x36)
                            {
                                num20 = 0x92;
                            }
                        }
                        if (trackCache.type == 0x86)
                        {
                            num20 = 0x31;
                            if (trackCache.frameX >= 0x24)
                            {
                                num20 = 0x91;
                            }
                        }
                        if (trackCache.type == 0x95)
                        {
                            num20 = 0x31;
                        }
                        if (Game1.tileAlch[trackCache.type])
                        {
                            switch ((trackCache.frameX / 0x12))
                            {
                                case 0:
                                    num20 = 3;
                                    break;

                                case 1:
                                    num20 = 3;
                                    break;

                                case 2:
                                    num20 = 7;
                                    break;

                                case 3:
                                    num20 = 0x11;
                                    break;

                                case 4:
                                    num20 = 3;
                                    break;

                                case 5:
                                    num20 = 6;
                                    break;

                                case 6:
                                    num20 = 0xe0;
                                    break;
                            }
                        }
                        if (((trackCache.type == 0x3a) || (trackCache.type == 0x4c)) || (trackCache.type == 0x4d))
                        {
                            if (genRand.Next(2) == 0)
                            {
                                num20 = 6;
                            }
                            else
                            {
                                num20 = 0x19;
                            }
                        }
                        if (trackCache.type == 0x25)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                num20 = 6;
                            }
                            else
                            {
                                num20 = 0x17;
                            }
                        }
                        if (trackCache.type == 0x20)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                num20 = 14;
                            }
                            else
                            {
                                num20 = 0x18;
                            }
                        }
                        if (trackCache.type == 0x160)
                        {
                            if (genRand.Next(3) == 0)
                            {
                                num20 = 5;
                            }
                            else
                            {
                                num20 = 0x7d;
                            }
                        }
                        if ((trackCache.type == 0x17) || (trackCache.type == 0x18))
                        {
                            if (genRand.Next(2) == 0)
                            {
                                num20 = 14;
                            }
                            else
                            {
                                num20 = 0x11;
                            }
                        }
                        if ((trackCache.type == 0x19) || (trackCache.type == 0x1f))
                        {
                            if ((trackCache.type == 0x1f) && (trackCache.frameX >= 0x24))
                            {
                                num20 = 5;
                            }
                            else if (genRand.Next(2) == 0)
                            {
                                num20 = 14;
                            }
                            else
                            {
                                num20 = 1;
                            }
                        }
                        if (trackCache.type == 20)
                        {
                            int num39 = trackCache.frameX / 0x36;
                            switch (num39)
                            {
                                case 1:
                                    num20 = 0x7a;
                                    goto Label_3200;

                                case 2:
                                    num20 = 0x4e;
                                    goto Label_3200;

                                case 3:
                                    num20 = 0x4d;
                                    goto Label_3200;

                                case 4:
                                    num20 = 0x79;
                                    goto Label_3200;

                                case 5:
                                    num20 = 0x4f;
                                    break;
                            }
                            if (num39 == 5)
                            {
                                num20 = 0x4f;
                            }
                            else
                            {
                                num20 = 7;
                            }
                        }
                    Label_3200:
                        if (trackCache.type == 0x1b)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                num20 = 3;
                            }
                            else
                            {
                                num20 = 0x13;
                            }
                        }
                        if (trackCache.type == 0x81)
                        {
                            if (((trackCache.frameX == 0) || (trackCache.frameX == 0x36)) || (trackCache.frameX == 0x6c))
                            {
                                num20 = 0x44;
                            }
                            else if (((trackCache.frameX == 0x12) || (trackCache.frameX == 0x48)) || (trackCache.frameX == 0x7e))
                            {
                                num20 = 0x45;
                            }
                            else
                            {
                                num20 = 70;
                            }
                        }
                        if (trackCache.type == 0x181)
                        {
                            num20 = genRand.Next(0x44, 0x47);
                        }
                        if (trackCache.type == 4)
                        {
                            int num40 = trackCache.frameY / 0x16;
                            switch (num40)
                            {
                                case 0:
                                    num20 = 6;
                                    goto Label_332C;

                                case 8:
                                    num20 = 0x4b;
                                    goto Label_332C;

                                case 9:
                                    num20 = 0x87;
                                    goto Label_332C;

                                case 10:
                                    num20 = 0x9e;
                                    goto Label_332C;

                                case 11:
                                    num20 = 0xa9;
                                    goto Label_332C;

                                case 12:
                                    num20 = 0x9c;
                                    goto Label_332C;

                                case 13:
                                    num20 = 0xea;
                                    goto Label_332C;

                                case 14:
                                    num20 = 0x42;
                                    goto Label_332C;

                                case 15:
                                    num20 = 0xf2;
                                    break;
                            }
                            if (num40 == 15)
                            {
                                num20 = 0xf2;
                            }
                            else
                            {
                                num20 = 0x3a + num40;
                            }
                        }
                    Label_332C:
                        if (trackCache.type == 0x23)
                        {
                            num20 = 0xbd;
                            if ((trackCache.frameX < 0x24) && (genRand.Next(2) == 0))
                            {
                                num20 = 6;
                            }
                        }
                        if (((trackCache.type == 0x22) || (trackCache.type == 0x2a)) && (genRand.Next(2) == 0))
                        {
                            num20 = 6;
                        }
                        if (trackCache.type == 270)
                        {
                            num20 = -1;
                        }
                        if (trackCache.type == 0x10f)
                        {
                            num20 = -1;
                        }
                        if (((trackCache.type == 0x4f) || (trackCache.type == 90)) || (trackCache.type == 0x65))
                        {
                            num20 = -1;
                        }
                        if (((trackCache.type == 0x21) || (trackCache.type == 0x22)) || (((trackCache.type == 0x2a) || (trackCache.type == 0x5d)) || (trackCache.type == 100)))
                        {
                            num20 = -1;
                        }
                        if (trackCache.type == 0x141)
                        {
                            num20 = 0xd6;
                        }
                        if (trackCache.type == 0x142)
                        {
                            num20 = 0xd7;
                        }
                        if (num20 >= 0)
                        {
                            Color color;
                            if ((trackCache.type == 0x160) && (num20 == 5))
                            {
                                color = new Color();
                                int num41 = Dust.NewDust(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10, 5, 0f, 0f, 100, color, 1f);
                                Game1.dust[num41].scale = 1.5f;
                                Game1.dust[num41].noGravity = true;
                                Dust dust1 = Game1.dust[num41];
                                dust1.velocity = (Vector2)(dust1.velocity * 1.65f);
                                Game1.dust[num41].fadeIn = 1.6f;
                            }
                            else if (trackCache.type == 160)
                            {
                                int num42 = Dust.NewDust(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10, 0x42, 0f, 0f, 100, new Color(Game1.DiscoR, Game1.DiscoG, Game1.DiscoB), 0.75f);
                                Game1.dust[num42].noGravity = true;
                            }
                            else if (trackCache.type == 0x143)
                            {
                                int frameY = trackCache.frameY;
                                color = new Color();
                                Dust.NewDust(new Vector2((float)((i * 0x10) + frameY), (float)(j * 0x10)), 0x10, 0x10, num20, 0f, 0f, 0, color, 1f);
                            }
                            else if (trackCache.type == 0x13a)
                            {
                                color = new Color();
                                int num44 = Dust.NewDust(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10, 0xd5, (float)genRand.Next(-2, 3), (float)genRand.Next(-2, 3), 0, color, 1f);
                                Game1.dust[num44].noGravity = true;
                                Game1.dust[num44].fadeIn = (Game1.dust[num44].scale + 1f) + (0.01f * genRand.Next(0, 0x33));
                                Game1.dust[num44].noGravity = true;
                            }
                            else if (trackCache.type == 0xb2)
                            {
                                color = new Color();
                                int num45 = Dust.NewDust(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10, num20, 0f, 0f, 0x4b, color, 0.75f);
                                Game1.dust[num45].noLight = true;
                            }
                            else if ((trackCache.type == 0xc1) || ((trackCache.type == 0x12) && (num20 == 4)))
                            {
                                Dust.NewDust(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10, num20, 0f, 0f, 0x4b, new Color(0, 80, 0xff, 100), 0.75f);
                            }
                            else if (trackCache.type == 0xc5)
                            {
                                Dust.NewDust(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10, num20, 0f, 0f, 0x4b, new Color(0x61, 200, 0xff, 100), 0.75f);
                            }
                            else if (((trackCache.type == 0xb9) && (num20 >= 0x56)) && (num20 <= 0x5b))
                            {
                                color = new Color();
                                int num46 = Dust.NewDust(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10, num20, 0f, 0f, 0x4b, color, 0.75f);
                                Game1.dust[num46].noLight = true;
                            }
                            else if ((trackCache.type == 4) && (num20 == 0x42))
                            {
                                int num47 = Dust.NewDust(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10, num20, 0f, 0f, 0, new Color(((float)Game1.DiscoR) / 255f, ((float)Game1.DiscoG) / 255f, ((float)Game1.DiscoB) / 255f), 1f);
                                Game1.dust[num47].noGravity = true;
                            }
                            else
                            {
                                color = new Color();
                                Dust.NewDust(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10, num20, 0f, 0f, 0, color, 1f);
                            }
                        }
                    }
                    if (!effectOnly)
                    {
                        if (fail)
                        {
                            if (((trackCache.type == 2) || (trackCache.type == 0x17)) || ((trackCache.type == 0x6d) || (trackCache.type == 0xc7)))
                            {
                                trackCache.type = 0;
                            }
                            if ((trackCache.type == 60) || (trackCache.type == 70))
                            {
                                trackCache.type = 0x3b;
                            }
                            if (Game1.tileMoss[trackCache.type])
                            {
                                trackCache.type = 1;
                            }
                            SquareTileFrame(i, j, true);
                        }
                        else
                        {
                            if ((trackCache.type == 0x15) && (Game1.netMode != 1))
                            {
                                int x = trackCache.frameX / 0x12;
                                int y = j - (trackCache.frameY / 0x12);
                                while (x > 1)
                                {
                                    x -= 2;
                                }
                                x = i - x;
                                if (!Chest.DestroyChest(x, y))
                                {
                                    return;
                                }
                            }
                            if ((trackCache.type == 0x58) && (Game1.netMode != 1))
                            {
                                int num50 = trackCache.frameX / 0x12;
                                int num51 = j - (trackCache.frameY / 0x12);
                                num50 = num50 % 3;
                                num50 = i - num50;
                                if (!Chest.DestroyChest(num50, num51))
                                {
                                    return;
                                }
                            }
                            if (((trackCache.type == 0x33) && (trackCache.wall == 0x3e)) && (genRand.Next(4) != 0))
                            {
                                noItem = true;
                            }
                            if ((!noItem && !stopDrops) && (Game1.netMode != 1))
                            {
                                bool flag = false;
                                int maxValue = -1;
                                int num53 = -1;
                                int num54 = -1;
                                if (trackCache.type == 3)
                                {
                                    maxValue = 400;
                                    num53 = 100;
                                    if (trackCache.frameX >= 0x6c)
                                    {
                                        maxValue *= 3;
                                        num53 *= 3;
                                    }
                                }
                                if (trackCache.type == 0x49)
                                {
                                    maxValue = 200;
                                    num53 = 50;
                                    if (trackCache.frameX >= 0x6c)
                                    {
                                        maxValue *= 3;
                                        num53 *= 3;
                                    }
                                }
                                if (trackCache.type == 0x3d)
                                {
                                    num54 = 80;
                                    if (trackCache.frameX >= 0x6c)
                                    {
                                        num54 *= 3;
                                    }
                                }
                                if (trackCache.type == 0x4a)
                                {
                                    num54 = 40;
                                    if (trackCache.frameX >= 0x6c)
                                    {
                                        num54 *= 3;
                                    }
                                }
                                if (trackCache.type == 0x3e)
                                {
                                    num54 = 250;
                                }
                                if (trackCache.type == 0xb9)
                                {
                                    if ((trackCache.frameY == 0) && (trackCache.frameX < 0xd6))
                                    {
                                        maxValue = 6;
                                    }
                                    if ((trackCache.frameY == 0x12) && ((trackCache.frameX < 0xd6) || (trackCache.frameX >= 0x558)))
                                    {
                                        maxValue = 6;
                                    }
                                }
                                else if (trackCache.type == 0xba)
                                {
                                    if ((trackCache.frameX >= 0x17a) && (trackCache.frameX <= 700))
                                    {
                                        maxValue = 6;
                                    }
                                }
                                else if (trackCache.type == 0xbb)
                                {
                                    if ((trackCache.frameX >= 0x2f4) && (trackCache.frameX <= 0x394))
                                    {
                                        maxValue = 6;
                                    }
                                    if (trackCache.frameX <= 0x142)
                                    {
                                        maxValue = 6;
                                    }
                                }
                                else if (trackCache.type == 0xe9)
                                {
                                    num54 = 10;
                                }
                                if (((maxValue > 0) && (NPC.CountNPCS(0x165) < 5)) && (genRand.Next(maxValue) == 0))
                                {
                                    int num55 = 0x165;
                                    if (genRand.Next(NPC.goldCritterChance) == 0)
                                    {
                                        num55 = 0x1c0;
                                    }
                                    int num56 = NPC.NewNPC((i * 0x10) + 10, j * 0x10, num55, 0, 0f, 0f, 0f, 0f, 0xff);
                                    Game1.npc[num56].TargetClosest(true);
                                    Game1.npc[num56].velocity.Y = genRand.Next(-50, -21) * 0.1f;
                                    Game1.npc[num56].velocity.X = (genRand.Next(0, 0x1a) * 0.1f) * -Game1.npc[num56].direction;
                                    NPC npc1 = Game1.npc[num56];
                                    npc1.direction *= -1;
                                    Game1.npc[num56].netUpdate = true;
                                }
                                if (((num53 > 0) && (NPC.CountNPCS(0x179) < 5)) && (genRand.Next(num53) == 0))
                                {
                                    int num57 = 0x179;
                                    if (genRand.Next(NPC.goldCritterChance) == 0)
                                    {
                                        num57 = 0x1be;
                                    }
                                    int num58 = NPC.NewNPC((i * 0x10) + 10, j * 0x10, num57, 0, 0f, 0f, 0f, 0f, 0xff);
                                    Game1.npc[num58].TargetClosest(true);
                                    Game1.npc[num58].velocity.Y = genRand.Next(-50, -21) * 0.1f;
                                    Game1.npc[num58].velocity.X = (genRand.Next(0, 0x1a) * 0.1f) * -Game1.npc[num58].direction;
                                    NPC npc2 = Game1.npc[num58];
                                    npc2.direction *= -1;
                                    Game1.npc[num58].netUpdate = true;
                                }
                                if (((num54 > 0) && (((NPC.CountNPCS(0x1e5) + NPC.CountNPCS(0x1e6)) + NPC.CountNPCS(0x1e7)) < 8)) && (genRand.Next(num54) == 0))
                                {
                                    int num59 = 0x1e5;
                                    if (genRand.Next(4) == 0)
                                    {
                                        num59 = 0x1e6;
                                    }
                                    if (genRand.Next(12) == 0)
                                    {
                                        num59 = 0x1e7;
                                    }
                                    int num60 = NPC.NewNPC((i * 0x10) + 10, j * 0x10, num59, 0, 0f, 0f, 0f, 0f, 0xff);
                                    Game1.npc[num60].TargetClosest(true);
                                    Game1.npc[num60].velocity.Y = genRand.Next(-50, -21) * 0.1f;
                                    Game1.npc[num60].velocity.X = (genRand.Next(0, 0x1a) * 0.1f) * -Game1.npc[num60].direction;
                                    NPC npc3 = Game1.npc[num60];
                                    npc3.direction *= -1;
                                    Game1.npc[num60].netUpdate = true;
                                }
                                int trackItem = 0;
                                int num62 = 0;
                                if (((trackCache.type == 0) || (trackCache.type == 2)) || (trackCache.type == 0x6d))
                                {
                                    trackItem = 2;
                                }
                                else if (trackCache.type == 0x170)
                                {
                                    trackItem = 0xc0e;
                                }
                                else if (trackCache.type == 0x171)
                                {
                                    trackItem = 0xc0f;
                                }
                                else if (trackCache.type == 0x16f)
                                {
                                    trackItem = 0xc09;
                                }
                                else if (trackCache.type == 0x17b)
                                {
                                    trackItem = 0xc8e;
                                }
                                else if (trackCache.type == 0x161)
                                {
                                    trackItem = 0xbb4;
                                }
                                else if (trackCache.type == 0x16d)
                                {
                                    trackItem = 0xc05;
                                }
                                else if (trackCache.type == 0x16e)
                                {
                                    trackItem = 0xc06;
                                }
                                else if (((trackCache.type == 0x34) || (trackCache.type == 0x3e)) && ((genRand.Next(2) == 0) && Game1.player[Player.FindClosest(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10)].cordage))
                                {
                                    trackItem = 0xbb4;
                                }
                                else if (trackCache.type == 0x165)
                                {
                                    trackItem = 0xbfa;
                                }
                                else if (trackCache.type == 1)
                                {
                                    trackItem = 3;
                                }
                                else if ((trackCache.type == 3) || (trackCache.type == 0x49))
                                {
                                    if ((genRand.Next(2) == 0) && (Game1.player[Player.FindClosest(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10)].HasItem(0x119) || Game1.player[Player.FindClosest(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10)].HasItem(0x3da)))
                                    {
                                        trackItem = 0x11b;
                                    }
                                }
                                else if (trackCache.type == 0xe3)
                                {
                                    int num63 = trackCache.frameX / 0x22;
                                    trackItem = 0x453 + num63;
                                    if ((num63 >= 8) && (num63 <= 11))
                                    {
                                        trackItem = (0xd39 + num63) - 8;
                                    }
                                }
                                else if (trackCache.type == 4)
                                {
                                    int num64 = trackCache.frameY / 0x16;
                                    if (num64 == 0)
                                    {
                                        trackItem = 8;
                                    }
                                    else if (num64 == 8)
                                    {
                                        trackItem = 0x20b;
                                    }
                                    else if (num64 == 9)
                                    {
                                        trackItem = 0x3ce;
                                    }
                                    else if (num64 == 10)
                                    {
                                        trackItem = 0x4dd;
                                    }
                                    else if (num64 == 11)
                                    {
                                        trackItem = 0x535;
                                    }
                                    else if (num64 == 12)
                                    {
                                        trackItem = 0x8e2;
                                    }
                                    else if (num64 == 13)
                                    {
                                        trackItem = 0xbbc;
                                    }
                                    else if (num64 == 14)
                                    {
                                        trackItem = 0xbe5;
                                    }
                                    else if (num64 == 15)
                                    {
                                        trackItem = 0xc2a;
                                    }
                                    else
                                    {
                                        trackItem = 0x1aa + num64;
                                    }
                                }
                                else if (trackCache.type == 0xef)
                                {
                                    switch ((trackCache.frameX / 0x12))
                                    {
                                        case 0:
                                            trackItem = 20;
                                            break;

                                        case 1:
                                            trackItem = 0x2bf;
                                            break;

                                        case 2:
                                            trackItem = 0x16;
                                            break;

                                        case 3:
                                            trackItem = 0x2c0;
                                            break;

                                        case 4:
                                            trackItem = 0x15;
                                            break;

                                        case 5:
                                            trackItem = 0x2c1;
                                            break;

                                        case 6:
                                            trackItem = 0x13;
                                            break;

                                        case 7:
                                            trackItem = 0x2c2;
                                            break;

                                        case 8:
                                            trackItem = 0x39;
                                            break;

                                        case 9:
                                            trackItem = 0x75;
                                            break;

                                        case 10:
                                            trackItem = 0xaf;
                                            break;

                                        case 11:
                                            trackItem = 0x17d;
                                            break;

                                        case 12:
                                            trackItem = 0x4a0;
                                            break;

                                        case 13:
                                            trackItem = 0x17e;
                                            break;

                                        case 14:
                                            trackItem = 0x4a7;
                                            break;

                                        case 15:
                                            trackItem = 0x187;
                                            break;

                                        case 0x10:
                                            trackItem = 0x4ae;
                                            break;

                                        case 0x11:
                                            trackItem = 0x3ee;
                                            break;

                                        case 0x12:
                                            trackItem = 0x4c9;
                                            break;

                                        case 0x13:
                                            trackItem = 0x4e9;
                                            break;

                                        case 20:
                                            trackItem = 0x610;
                                            break;

                                        case 0x15:
                                            trackItem = 0xcbd;
                                            break;

                                        case 0x16:
                                            trackItem = 0xd8b;
                                            break;
                                    }
                                }
                                else if (trackCache.type == 380)
                                {
                                    int num66 = trackCache.frameY / 0x12;
                                    trackItem = 0xc8f + num66;
                                }
                                else if (trackCache.type == 0x17f)
                                {
                                    trackItem = 620;
                                }
                                else if (trackCache.type == 0x13b)
                                {
                                    trackItem = 0x983;
                                }
                                else if (trackCache.type == 330)
                                {
                                    trackItem = 0x47;
                                }
                                else if (trackCache.type == 0x14b)
                                {
                                    trackItem = 0x48;
                                }
                                else if (trackCache.type == 0x14c)
                                {
                                    trackItem = 0x49;
                                }
                                else if (trackCache.type == 0x14d)
                                {
                                    trackItem = 0x4a;
                                }
                                else if (trackCache.type != 5)
                                {
                                    if (trackCache.type == 0x143)
                                    {
                                        trackItem = 0x9c8;
                                        if ((trackCache.frameX <= 0x84) && (trackCache.frameX >= 0x58))
                                        {
                                            num62 = 0x1b;
                                        }
                                        int num72 = i;
                                        int num73 = j;
                                        while (!Game1.tile[num72, num73].active() || !Game1.tileSolid[Game1.tile[num72, num73].type])
                                        {
                                            num73++;
                                        }
                                        if (Game1.tile[num72, num73].active())
                                        {
                                            switch (Game1.tile[num72, num73].type)
                                            {
                                                case 0x70:
                                                    trackItem = 0x26b;
                                                    break;

                                                case 0x74:
                                                    trackItem = 0x26d;
                                                    break;

                                                case 0xea:
                                                    trackItem = 0x38f;
                                                    break;
                                            }
                                        }
                                    }
                                    else if (trackCache.type == 0x198)
                                    {
                                        trackItem = 0xd84;
                                    }
                                    else if (trackCache.type == 0x199)
                                    {
                                        trackItem = 0xd85;
                                    }
                                    else if (trackCache.type == 0x19f)
                                    {
                                        trackItem = 0xdf5;
                                    }
                                    else if (trackCache.type == 0x1a0)
                                    {
                                        trackItem = 0xdf6;
                                    }
                                    else if (trackCache.type == 0x1a1)
                                    {
                                        trackItem = 0xdf7;
                                    }
                                    else if (trackCache.type == 0x1a2)
                                    {
                                        trackItem = 0xdf8;
                                    }
                                    else if ((trackCache.type >= 0xff) && (trackCache.type <= 0x105))
                                    {
                                        trackItem = (0x7b2 + trackCache.type) - 0xff;
                                    }
                                    else if ((trackCache.type >= 0x106) && (trackCache.type <= 0x10c))
                                    {
                                        trackItem = (0x7b2 + trackCache.type) - 0x106;
                                    }
                                    else if (trackCache.type == 0xab)
                                    {
                                        if (trackCache.frameX >= 10)
                                        {
                                            dropXmasTree(i, j, 0);
                                            dropXmasTree(i, j, 1);
                                            dropXmasTree(i, j, 2);
                                            dropXmasTree(i, j, 3);
                                        }
                                    }
                                    else if (trackCache.type == 0x144)
                                    {
                                        switch ((trackCache.frameY / 0x16))
                                        {
                                            case 0:
                                                trackItem = 0xa41;
                                                break;

                                            case 1:
                                                trackItem = 0xa42;
                                                break;
                                        }
                                    }
                                    else if (trackCache.type == 0x110)
                                    {
                                        trackItem = 0x540;
                                    }
                                    else if (trackCache.type == 0x111)
                                    {
                                        trackItem = 0x847;
                                    }
                                    else if (trackCache.type == 0x112)
                                    {
                                        trackItem = 0x848;
                                    }
                                    else if (trackCache.type == 0x146)
                                    {
                                        trackItem = 0xa85;
                                        Game1.PlaySound(13, i * 0x10, j * 0x10, 1);
                                    }
                                    else if (trackCache.type == 0x147)
                                    {
                                        trackItem = 0xa86;
                                        Game1.PlaySound(13, i * 0x10, j * 0x10, 1);
                                    }
                                    else if (trackCache.type == 0x159)
                                    {
                                        trackItem = 0xae3;
                                        Game1.PlaySound(13, i * 0x10, j * 0x10, 1);
                                    }
                                    else if (trackCache.type == 0x148)
                                    {
                                        trackItem = 0xa87;
                                        Game1.PlaySound(13, i * 0x10, j * 0x10, 1);
                                    }
                                    else if (trackCache.type == 0x149)
                                    {
                                        trackItem = 0xa89;
                                        Game1.PlaySound(13, i * 0x10, j * 0x10, 1);
                                    }
                                    else if (trackCache.type == 0x15a)
                                    {
                                        trackItem = 0xae8;
                                    }
                                    else if (trackCache.type == 0x15b)
                                    {
                                        trackItem = 0xae9;
                                    }
                                    else if (trackCache.type == 0x15c)
                                    {
                                        trackItem = 0xaea;
                                    }
                                    else if (trackCache.type == 350)
                                    {
                                        trackItem = 0xb2c;
                                    }
                                    else if (trackCache.type == 0x150)
                                    {
                                        trackItem = 0xa8d;
                                    }
                                    else if (trackCache.type == 340)
                                    {
                                        trackItem = 0xabf;
                                    }
                                    else if (trackCache.type == 0x155)
                                    {
                                        trackItem = 0xac0;
                                    }
                                    else if (trackCache.type == 0x156)
                                    {
                                        trackItem = 0xac1;
                                    }
                                    else if (trackCache.type == 0x157)
                                    {
                                        trackItem = 0xac2;
                                    }
                                    else if (trackCache.type == 0x158)
                                    {
                                        trackItem = 0xac3;
                                    }
                                    else if (trackCache.type == 0x15f)
                                    {
                                        trackItem = 0xb34;
                                    }
                                    else if (trackCache.type == 0xfb)
                                    {
                                        trackItem = 0x6bd;
                                    }
                                    else if (trackCache.type == 0xfc)
                                    {
                                        trackItem = 0x6bf;
                                    }
                                    else if (trackCache.type == 0xfd)
                                    {
                                        trackItem = 0x6c1;
                                    }
                                    else if (trackCache.type == 0x145)
                                    {
                                        trackItem = 0xa84;
                                    }
                                    else if (trackCache.type == 370)
                                    {
                                        trackItem = 0xc1c;
                                    }
                                    else if (trackCache.type == 0x18c)
                                    {
                                        trackItem = 0xcc7;
                                    }
                                    else if (trackCache.type == 400)
                                    {
                                        trackItem = 0xccc;
                                    }
                                    else if (trackCache.type == 0x191)
                                    {
                                        trackItem = 0xccd;
                                    }
                                    else if (trackCache.type == 0x193)
                                    {
                                        trackItem = 0xd0b;
                                    }
                                    else if (trackCache.type == 0x18d)
                                    {
                                        trackItem = 0xcc8;
                                    }
                                    else if (trackCache.type == 0x18e)
                                    {
                                        trackItem = 0xcca;
                                    }
                                    else if (trackCache.type == 0x18f)
                                    {
                                        trackItem = 0xccb;
                                    }
                                    else if (trackCache.type == 0x192)
                                    {
                                        trackItem = 0xd0a;
                                    }
                                    else if (trackCache.type == 0x194)
                                    {
                                        trackItem = 0xd13;
                                    }
                                    else if (trackCache.type == 0x197)
                                    {
                                        trackItem = 0xd34;
                                    }
                                    else if (trackCache.type == 170)
                                    {
                                        trackItem = 0x750;
                                    }
                                    else if (trackCache.type == 0x11c)
                                    {
                                        trackItem = 0x87d;
                                    }
                                    else if (trackCache.type == 0xd6)
                                    {
                                        trackItem = 0x55;
                                    }
                                    else if (trackCache.type == 0xd5)
                                    {
                                        trackItem = 0x3c5;
                                    }
                                    else if (trackCache.type == 0xd3)
                                    {
                                        trackItem = 0x3b3;
                                    }
                                    else if (trackCache.type == 6)
                                    {
                                        trackItem = 11;
                                    }
                                    else if (trackCache.type == 7)
                                    {
                                        trackItem = 12;
                                    }
                                    else if (trackCache.type == 8)
                                    {
                                        trackItem = 13;
                                    }
                                    else if (trackCache.type == 9)
                                    {
                                        trackItem = 14;
                                    }
                                    else if (trackCache.type == 0xca)
                                    {
                                        trackItem = 0x338;
                                    }
                                    else if (trackCache.type == 0xea)
                                    {
                                        trackItem = 0x4de;
                                    }
                                    else if (trackCache.type == 0xe2)
                                    {
                                        trackItem = 0x44d;
                                    }
                                    else if (trackCache.type == 0xe0)
                                    {
                                        trackItem = 0x44f;
                                    }
                                    else if (trackCache.type == 0x24)
                                    {
                                        trackItem = 0x74d;
                                    }
                                    else if (trackCache.type == 0x137)
                                    {
                                        trackItem = 0x8d4;
                                    }
                                    else if (trackCache.type == 0x138)
                                    {
                                        trackItem = 0x8d5;
                                    }
                                    else if (trackCache.type == 0x139)
                                    {
                                        trackItem = 0x8d6;
                                    }
                                    else if (trackCache.type == 0xe5)
                                    {
                                        trackItem = 0x465;
                                    }
                                    else if (trackCache.type == 230)
                                    {
                                        trackItem = 0x467;
                                    }
                                    else if (trackCache.type == 0xe1)
                                    {
                                        if (genRand.Next(3) == 0)
                                        {
                                            trackCache.honey(true);
                                            trackCache.liquid = 0xff;
                                        }
                                        else
                                        {
                                            trackItem = 0x464;
                                            if ((Game1.netMode != 1) && (genRand.Next(2) == 0))
                                            {
                                                int num74 = 1;
                                                if (genRand.Next(3) == 0)
                                                {
                                                    num74 = 2;
                                                }
                                                for (int n = 0; n < num74; n++)
                                                {
                                                    int num76 = genRand.Next(210, 0xd4);
                                                    int num77 = NPC.NewNPC((i * 0x10) + 8, (j * 0x10) + 15, num76, 1, 0f, 0f, 0f, 0f, 0xff);
                                                    Game1.npc[num77].velocity.X = genRand.Next(-200, 0xc9) * 0.002f;
                                                    Game1.npc[num77].velocity.Y = genRand.Next(-200, 0xc9) * 0.002f;
                                                    Game1.npc[num77].netUpdate = true;
                                                }
                                            }
                                        }
                                    }
                                    else if (trackCache.type == 0xdd)
                                    {
                                        trackItem = 0x450;
                                    }
                                    else if (trackCache.type == 0xde)
                                    {
                                        trackItem = 0x451;
                                    }
                                    else if (trackCache.type == 0xdf)
                                    {
                                        trackItem = 0x452;
                                    }
                                    else if (trackCache.type == 0xf8)
                                    {
                                        trackItem = 0x635;
                                    }
                                    else if (trackCache.type == 0xf9)
                                    {
                                        trackItem = 0x637;
                                    }
                                    else if (trackCache.type == 250)
                                    {
                                        trackItem = 0x639;
                                    }
                                    else if (trackCache.type == 0xbf)
                                    {
                                        trackItem = 9;
                                    }
                                    else if (trackCache.type == 0xcb)
                                    {
                                        trackItem = 0x344;
                                    }
                                    else if (trackCache.type == 0xcc)
                                    {
                                        trackItem = 880;
                                    }
                                    else if (trackCache.type == 0xa6)
                                    {
                                        trackItem = 0x2bb;
                                    }
                                    else if (trackCache.type == 0xa7)
                                    {
                                        trackItem = 700;
                                    }
                                    else if (trackCache.type == 0xa8)
                                    {
                                        trackItem = 0x2bd;
                                    }
                                    else if (trackCache.type == 0xa9)
                                    {
                                        trackItem = 0x2be;
                                    }
                                    else if (trackCache.type == 0x7b)
                                    {
                                        trackItem = 0x1a8;
                                    }
                                    else if (trackCache.type == 0x7c)
                                    {
                                        trackItem = 480;
                                    }
                                    else if (trackCache.type == 0x9d)
                                    {
                                        trackItem = 0x26b;
                                    }
                                    else if (trackCache.type == 0x9e)
                                    {
                                        trackItem = 620;
                                    }
                                    else if (trackCache.type == 0x9f)
                                    {
                                        trackItem = 0x26d;
                                    }
                                    else if (trackCache.type == 0xa1)
                                    {
                                        trackItem = 0x298;
                                    }
                                    else if (trackCache.type == 0xce)
                                    {
                                        trackItem = 0x373;
                                    }
                                    else if (trackCache.type == 0xe8)
                                    {
                                        trackItem = 0x47e;
                                    }
                                    else if (trackCache.type == 0xc6)
                                    {
                                        trackItem = 0x307;
                                    }
                                    else if (trackCache.type == 0x13a)
                                    {
                                        trackItem = Minecart.GetTrackItem(trackCache);
                                    }
                                    else if (trackCache.type == 0xbd)
                                    {
                                        trackItem = 0x2ef;
                                    }
                                    else if (trackCache.type == 0xc3)
                                    {
                                        trackItem = 0x2fb;
                                    }
                                    else if (trackCache.type == 0xc2)
                                    {
                                        trackItem = 0x2fe;
                                    }
                                    else if (trackCache.type == 0xc1)
                                    {
                                        trackItem = 0x2fa;
                                    }
                                    else if (trackCache.type == 0xc4)
                                    {
                                        trackItem = 0x2fd;
                                    }
                                    else if (trackCache.type == 0xc5)
                                    {
                                        trackItem = 0x2ff;
                                    }
                                    else if (trackCache.type == 0xb2)
                                    {
                                        switch ((trackCache.frameX / 0x12))
                                        {
                                            case 0:
                                                trackItem = 0xb5;
                                                break;

                                            case 1:
                                                trackItem = 180;
                                                break;

                                            case 2:
                                                trackItem = 0xb1;
                                                break;

                                            case 3:
                                                trackItem = 0xb3;
                                                break;

                                            case 4:
                                                trackItem = 0xb2;
                                                break;

                                            case 5:
                                                trackItem = 0xb6;
                                                break;

                                            case 6:
                                                trackItem = 0x3e7;
                                                break;
                                        }
                                    }
                                    else if (trackCache.type == 0x95)
                                    {
                                        if ((trackCache.frameX == 0) || (trackCache.frameX == 0x36))
                                        {
                                            trackItem = 0x254;
                                        }
                                        else if ((trackCache.frameX == 0x12) || (trackCache.frameX == 0x48))
                                        {
                                            trackItem = 0x255;
                                        }
                                        else if ((trackCache.frameX == 0x24) || (trackCache.frameX == 90))
                                        {
                                            trackItem = 0x256;
                                        }
                                    }
                                    else if (trackCache.type == 13)
                                    {
                                        Game1.PlaySound(13, i * 0x10, j * 0x10, 1);
                                        int num79 = trackCache.frameX / 0x12;
                                        if (num79 == 1)
                                        {
                                            trackItem = 0x1c;
                                        }
                                        else if (num79 == 2)
                                        {
                                            trackItem = 110;
                                        }
                                        else if (num79 == 3)
                                        {
                                            trackItem = 350;
                                        }
                                        else if (num79 == 4)
                                        {
                                            trackItem = 0x15f;
                                        }
                                        else if (num79 == 5)
                                        {
                                            trackItem = 0x8ba;
                                        }
                                        else if (num79 == 6)
                                        {
                                            trackItem = 0x8c4;
                                        }
                                        else if (num79 == 7)
                                        {
                                            trackItem = 0x8d1;
                                        }
                                        else if (num79 == 8)
                                        {
                                            trackItem = 0x8d2;
                                        }
                                        else
                                        {
                                            trackItem = 0x1f;
                                        }
                                    }
                                    else if (trackCache.type == 0x13)
                                    {
                                        switch ((trackCache.frameY / 0x12))
                                        {
                                            case 0:
                                                trackItem = 0x5e;
                                                break;

                                            case 1:
                                                trackItem = 0x277;
                                                break;

                                            case 2:
                                                trackItem = 0x278;
                                                break;

                                            case 3:
                                                trackItem = 0x279;
                                                break;

                                            case 4:
                                                trackItem = 0x27a;
                                                break;

                                            case 5:
                                                trackItem = 0x391;
                                                break;

                                            case 6:
                                                trackItem = 0x568;
                                                break;

                                            case 7:
                                                trackItem = 0x569;
                                                break;

                                            case 8:
                                                trackItem = 0x56a;
                                                break;

                                            case 9:
                                                trackItem = 0x56b;
                                                break;

                                            case 10:
                                                trackItem = 0x56c;
                                                break;

                                            case 11:
                                                trackItem = 0x56d;
                                                break;

                                            case 12:
                                                trackItem = 0x58a;
                                                break;

                                            case 13:
                                                trackItem = 0x5b1;
                                                break;

                                            case 14:
                                                trackItem = 0x6a6;
                                                break;

                                            case 15:
                                                trackItem = 0x704;
                                                break;

                                            case 0x10:
                                                trackItem = 0x71a;
                                                break;

                                            case 0x11:
                                                trackItem = 0x9d6;
                                                break;

                                            case 0x12:
                                                trackItem = 0x9f5;
                                                break;

                                            case 0x13:
                                                trackItem = 0xa06;
                                                break;

                                            case 20:
                                                trackItem = 0xa15;
                                                break;

                                            case 0x15:
                                                trackItem = 0xa43;
                                                break;

                                            case 0x16:
                                                trackItem = 0xa44;
                                                break;

                                            case 0x17:
                                                trackItem = 0xa45;
                                                break;

                                            case 0x18:
                                                trackItem = 0xa46;
                                                break;

                                            case 0x19:
                                                trackItem = 0xab8;
                                                break;

                                            case 0x1a:
                                                trackItem = 0xb06;
                                                break;

                                            case 0x1b:
                                                trackItem = 0xc48;
                                                break;

                                            case 0x1c:
                                                trackItem = 0xc4a;
                                                break;

                                            case 0x1d:
                                                trackItem = 0xc49;
                                                break;
                                        }
                                    }
                                    else if (trackCache.type == 0x16)
                                    {
                                        trackItem = 0x38;
                                    }
                                    else if (trackCache.type == 140)
                                    {
                                        trackItem = 0x241;
                                    }
                                    else if (trackCache.type == 0x17)
                                    {
                                        trackItem = 2;
                                    }
                                    else if (trackCache.type == 0x19)
                                    {
                                        trackItem = 0x3d;
                                    }
                                    else if (trackCache.type == 30)
                                    {
                                        trackItem = 9;
                                    }
                                    else if (trackCache.type == 0xbf)
                                    {
                                        trackItem = 9;
                                    }
                                    else if (trackCache.type == 0xd0)
                                    {
                                        trackItem = 0x38f;
                                    }
                                    else if (trackCache.type == 0x21)
                                    {
                                        int num81 = trackCache.frameY / 0x16;
                                        trackItem = 0x69;
                                        if (num81 == 1)
                                        {
                                            trackItem = 0x57d;
                                        }
                                        else if (num81 == 2)
                                        {
                                            trackItem = 0x57e;
                                        }
                                        else if (num81 == 3)
                                        {
                                            trackItem = 0x57f;
                                        }
                                        else if ((num81 >= 4) && (num81 <= 13))
                                        {
                                            trackItem = (0x7fd + num81) - 4;
                                        }
                                        else if ((num81 >= 14) && (num81 <= 0x10))
                                        {
                                            trackItem = (0x869 + num81) - 14;
                                        }
                                        else if (num81 == 0x11)
                                        {
                                            trackItem = 0x8bc;
                                        }
                                        else if (num81 == 0x12)
                                        {
                                            trackItem = 0x9db;
                                        }
                                        else if (num81 == 0x13)
                                        {
                                            trackItem = 0x9ee;
                                        }
                                        else if (num81 == 20)
                                        {
                                            trackItem = 0x9fc;
                                        }
                                        else if (num81 == 0x15)
                                        {
                                            trackItem = 0xa0b;
                                        }
                                        else if (num81 == 0x16)
                                        {
                                            trackItem = 0xa58;
                                        }
                                        else if (num81 == 0x17)
                                        {
                                            trackItem = 0xa59;
                                        }
                                        else if (num81 == 0x18)
                                        {
                                            trackItem = 0xa5a;
                                        }
                                        else if (num81 == 0x19)
                                        {
                                            trackItem = 0xa5b;
                                        }
                                        else if (num81 == 0x1a)
                                        {
                                            trackItem = 0xb02;
                                        }
                                        else if (num81 == 0x1b)
                                        {
                                            trackItem = 0xc63;
                                        }
                                        else if (num81 == 0x1c)
                                        {
                                            trackItem = 0xc65;
                                        }
                                        else if (num81 == 0x1d)
                                        {
                                            trackItem = 0xc64;
                                        }
                                    }
                                    else if (trackCache.type == 0x174)
                                    {
                                        trackItem = 0xc2d;
                                    }
                                    else if (trackCache.type == 0x173)
                                    {
                                        trackItem = 0xc29;
                                    }
                                    else if (trackCache.type == 0xae)
                                    {
                                        trackItem = 0x2c9;
                                    }
                                    else if (trackCache.type == 0x25)
                                    {
                                        trackItem = 0x74;
                                    }
                                    else if (trackCache.type == 0x26)
                                    {
                                        trackItem = 0x81;
                                    }
                                    else if (trackCache.type == 0x27)
                                    {
                                        trackItem = 0x83;
                                    }
                                    else if (trackCache.type == 40)
                                    {
                                        trackItem = 0x85;
                                    }
                                    else if (trackCache.type == 0x29)
                                    {
                                        trackItem = 0x86;
                                    }
                                    else if (trackCache.type == 0x2b)
                                    {
                                        trackItem = 0x89;
                                    }
                                    else if (trackCache.type == 0x2c)
                                    {
                                        trackItem = 0x8b;
                                    }
                                    else if (trackCache.type == 0x2d)
                                    {
                                        trackItem = 0x8d;
                                    }
                                    else if (trackCache.type == 0x2e)
                                    {
                                        trackItem = 0x8f;
                                    }
                                    else if (trackCache.type == 0x2f)
                                    {
                                        trackItem = 0x91;
                                    }
                                    else if (trackCache.type == 0x30)
                                    {
                                        trackItem = 0x93;
                                    }
                                    else if (trackCache.type == 0x31)
                                    {
                                        trackItem = 0x94;
                                    }
                                    else if (trackCache.type == 0x33)
                                    {
                                        trackItem = 150;
                                    }
                                    else if (trackCache.type == 0x35)
                                    {
                                        trackItem = 0xa9;
                                    }
                                    else if (trackCache.type == 0x97)
                                    {
                                        trackItem = 0x25f;
                                    }
                                    else if (trackCache.type == 0x98)
                                    {
                                        trackItem = 0x261;
                                    }
                                    else if (trackCache.type == 0x36)
                                    {
                                        trackItem = 170;
                                        Game1.PlaySound(13, i * 0x10, j * 0x10, 1);
                                    }
                                    else if (trackCache.type == 0x38)
                                    {
                                        trackItem = 0xad;
                                    }
                                    else if (trackCache.type == 0x39)
                                    {
                                        trackItem = 0xac;
                                    }
                                    else if (trackCache.type == 0x3a)
                                    {
                                        trackItem = 0xae;
                                    }
                                    else if (trackCache.type == 60)
                                    {
                                        trackItem = 0xb0;
                                    }
                                    else if (trackCache.type == 70)
                                    {
                                        trackItem = 0xb0;
                                    }
                                    else if (trackCache.type == 0x4b)
                                    {
                                        trackItem = 0xc0;
                                    }
                                    else if (trackCache.type == 0x4c)
                                    {
                                        trackItem = 0xd6;
                                    }
                                    else if (trackCache.type == 0x4e)
                                    {
                                        trackItem = 0xde;
                                    }
                                    else if (trackCache.type == 0x51)
                                    {
                                        trackItem = 0x113;
                                    }
                                    else if (trackCache.type == 80)
                                    {
                                        trackItem = 0x114;
                                    }
                                    else if (trackCache.type == 0xbc)
                                    {
                                        trackItem = 0x114;
                                    }
                                    else if (trackCache.type == 0x6b)
                                    {
                                        trackItem = 0x16c;
                                    }
                                    else if (trackCache.type == 0x6c)
                                    {
                                        trackItem = 0x16d;
                                    }
                                    else if (trackCache.type == 0x6f)
                                    {
                                        trackItem = 0x16e;
                                    }
                                    else if (trackCache.type == 150)
                                    {
                                        trackItem = 0x25c;
                                    }
                                    else if (trackCache.type == 0x70)
                                    {
                                        trackItem = 370;
                                    }
                                    else if (trackCache.type == 0x74)
                                    {
                                        trackItem = 0x198;
                                    }
                                    else if (trackCache.type == 0x75)
                                    {
                                        trackItem = 0x199;
                                    }
                                    else if (trackCache.type == 0x81)
                                    {
                                        trackItem = 0x1f6;
                                    }
                                    else if (trackCache.type == 0x76)
                                    {
                                        trackItem = 0x19c;
                                    }
                                    else if (trackCache.type == 0x77)
                                    {
                                        trackItem = 0x19d;
                                    }
                                    else if (trackCache.type == 120)
                                    {
                                        trackItem = 0x19e;
                                    }
                                    else if (trackCache.type == 0x79)
                                    {
                                        trackItem = 0x19f;
                                    }
                                    else if (trackCache.type == 0x7a)
                                    {
                                        trackItem = 0x1a0;
                                    }
                                    else if (trackCache.type == 0x88)
                                    {
                                        trackItem = 0x21a;
                                    }
                                    else if (trackCache.type == 0x181)
                                    {
                                        trackItem = 0xca2;
                                    }
                                    else if (trackCache.type == 0x89)
                                    {
                                        switch ((trackCache.frameY / 0x12))
                                        {
                                            case 0:
                                                trackItem = 0x21b;
                                                break;

                                            case 1:
                                                trackItem = 0x47a;
                                                break;

                                            case 2:
                                                trackItem = 0x47b;
                                                break;

                                            case 3:
                                                trackItem = 0x47c;
                                                break;

                                            case 4:
                                                trackItem = 0x47d;
                                                break;
                                        }
                                    }
                                    else if (trackCache.type == 0x8d)
                                    {
                                        trackItem = 580;
                                    }
                                    else if (trackCache.type == 0x91)
                                    {
                                        trackItem = 0x24a;
                                    }
                                    else if (trackCache.type == 0x92)
                                    {
                                        trackItem = 0x24f;
                                    }
                                    else if (trackCache.type == 0x93)
                                    {
                                        trackItem = 0x251;
                                    }
                                    else if (trackCache.type == 0x94)
                                    {
                                        trackItem = 0x252;
                                    }
                                    else if (trackCache.type == 0x99)
                                    {
                                        trackItem = 0x263;
                                    }
                                    else if (trackCache.type == 0x9a)
                                    {
                                        trackItem = 0x264;
                                    }
                                    else if (trackCache.type == 0x9b)
                                    {
                                        trackItem = 0x265;
                                    }
                                    else if (trackCache.type == 0x9c)
                                    {
                                        trackItem = 0x266;
                                    }
                                    else if (trackCache.type == 160)
                                    {
                                        trackItem = 0x296;
                                    }
                                    else if (trackCache.type == 0xaf)
                                    {
                                        trackItem = 0x2cd;
                                    }
                                    else if (trackCache.type == 0xb0)
                                    {
                                        trackItem = 0x2ce;
                                    }
                                    else if (trackCache.type == 0xb1)
                                    {
                                        trackItem = 0x2cf;
                                    }
                                    else if (trackCache.type == 0xa3)
                                    {
                                        trackItem = 0x341;
                                    }
                                    else if (trackCache.type == 0xa4)
                                    {
                                        trackItem = 0x342;
                                    }
                                    else if (trackCache.type == 200)
                                    {
                                        trackItem = 0x343;
                                    }
                                    else if (trackCache.type == 210)
                                    {
                                        trackItem = 0x3a9;
                                    }
                                    else if (trackCache.type == 0x87)
                                    {
                                        switch ((trackCache.frameY / 0x12))
                                        {
                                            case 0:
                                                trackItem = 0x211;
                                                break;

                                            case 1:
                                                trackItem = 0x21d;
                                                break;

                                            case 2:
                                                trackItem = 0x21e;
                                                break;

                                            case 3:
                                                trackItem = 0x21f;
                                                break;

                                            case 4:
                                                trackItem = 0x354;
                                                break;

                                            case 5:
                                                trackItem = 0x355;
                                                break;

                                            case 6:
                                                trackItem = 0x47f;
                                                break;
                                        }
                                    }
                                    else if (trackCache.type == 0x90)
                                    {
                                        if (trackCache.frameX == 0)
                                        {
                                            trackItem = 0x247;
                                        }
                                        if (trackCache.frameX == 0x12)
                                        {
                                            trackItem = 0x248;
                                        }
                                        if (trackCache.frameX == 0x24)
                                        {
                                            trackItem = 0x249;
                                        }
                                    }
                                    else if (trackCache.type == 130)
                                    {
                                        trackItem = 0x1ff;
                                    }
                                    else if (trackCache.type == 0x83)
                                    {
                                        trackItem = 0x200;
                                    }
                                    else if ((trackCache.type == 0x3d) || (trackCache.type == 0x4a))
                                    {
                                        if ((trackCache.frameX == 0x90) && (trackCache.type == 0x3d))
                                        {
                                            Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, 0x14b, genRand.Next(2, 4), false, 0, false);
                                        }
                                        else if ((trackCache.frameX == 0xa2) && (trackCache.type == 0x3d))
                                        {
                                            trackItem = 0xdf;
                                        }
                                        else if (((trackCache.frameX >= 0x6c) && (trackCache.frameX <= 0x7e)) && ((trackCache.type == 0x3d) && (genRand.Next(20) == 0)))
                                        {
                                            trackItem = 0xd0;
                                        }
                                        else if (genRand.Next(100) == 0)
                                        {
                                            trackItem = 0xc3;
                                        }
                                    }
                                    else if ((trackCache.type == 0x3b) || (trackCache.type == 60))
                                    {
                                        trackItem = 0xb0;
                                    }
                                    else if (trackCache.type == 190)
                                    {
                                        trackItem = 0xb7;
                                    }
                                    else if ((trackCache.type == 0x47) || (trackCache.type == 0x48))
                                    {
                                        if (genRand.Next(50) == 0)
                                        {
                                            trackItem = 0xc2;
                                        }
                                        else if (genRand.Next(2) == 0)
                                        {
                                            trackItem = 0xb7;
                                        }
                                    }
                                    else if ((trackCache.type >= 0x3f) && (trackCache.type <= 0x44))
                                    {
                                        trackItem = (trackCache.type - 0x3f) + 0xb1;
                                    }
                                    else if (trackCache.type == 50)
                                    {
                                        if (trackCache.frameX == 90)
                                        {
                                            trackItem = 0xa5;
                                        }
                                        else
                                        {
                                            trackItem = 0x95;
                                        }
                                    }
                                    else if (Game1.tileAlch[trackCache.type])
                                    {
                                        if (trackCache.type > 0x52)
                                        {
                                            int num84 = trackCache.frameX / 0x12;
                                            bool flag2 = false;
                                            trackItem = 0x139 + num84;
                                            int num85 = 0x133 + num84;
                                            if (trackCache.type == 0x54)
                                            {
                                                flag2 = true;
                                            }
                                            if ((num84 == 0) && Game1.dayTime)
                                            {
                                                flag2 = true;
                                            }
                                            if ((num84 == 1) && !Game1.dayTime)
                                            {
                                                flag2 = true;
                                            }
                                            if (((num84 == 3) && !Game1.dayTime) && (Game1.bloodMoon || (Game1.moonPhase == 0)))
                                            {
                                                flag2 = true;
                                            }
                                            if ((num84 == 4) && (Game1.raining || (Game1.cloudAlpha > 0f)))
                                            {
                                                flag2 = true;
                                            }
                                            if (((num84 == 5) && !Game1.raining) && (Game1.dayTime && (Game1.time > 40500.0)))
                                            {
                                                flag2 = true;
                                            }
                                            if (num84 == 6)
                                            {
                                                trackItem = 0x936;
                                                num85 = 0x935;
                                            }
                                            int num86 = Player.FindClosest(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10);
                                            if (Game1.player[num86].inventory[Game1.player[num86].selectedItem].itemId == 0xd5)
                                            {
                                                Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, num85, genRand.Next(1, 6), false, 0, false);
                                                Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, trackItem, genRand.Next(1, 3), false, 0, false);
                                                trackItem = -1;
                                            }
                                            else if (flag2)
                                            {
                                                int stack = genRand.Next(1, 4);
                                                Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, num85, stack, false, 0, false);
                                            }
                                        }
                                    }
                                    else if (trackCache.type == 0x141)
                                    {
                                        trackItem = 0x9c7;
                                    }
                                    else if (trackCache.type == 0x142)
                                    {
                                        trackItem = 0x9c8;
                                    }
                                }
                                else
                                {
                                    if ((trackCache.frameX >= 0x16) && (trackCache.frameY >= 0xc6))
                                    {
                                        if (Game1.netMode != 1)
                                        {
                                            if (genRand.Next(2) == 0)
                                            {
                                                int num67 = j;
                                                while ((Game1.tile[i, num67] != null) && ((!Game1.tile[i, num67].active() || !Game1.tileSolid[Game1.tile[i, num67].type]) || Game1.tileSolidTop[Game1.tile[i, num67].type]))
                                                {
                                                    num67++;
                                                }
                                                if (Game1.tile[i, num67] != null)
                                                {
                                                    if (((Game1.tile[i, num67].type == 2) || (Game1.tile[i, num67].type == 0x6d)) || (((Game1.tile[i, num67].type == 0x93) || (Game1.tile[i, num67].type == 0xc7)) || (Game1.tile[i, num67].type == 0x17)))
                                                    {
                                                        trackItem = 9;
                                                        num62 = 0x1b;
                                                    }
                                                    else
                                                    {
                                                        trackItem = 9;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                trackItem = 9;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        trackItem = 9;
                                    }
                                    if (trackItem == 9)
                                    {
                                        int num68 = i;
                                        int num69 = j;
                                        if ((trackCache.frameX == 0x42) && (trackCache.frameY <= 0x2d))
                                        {
                                            num68++;
                                        }
                                        if (((trackCache.frameX == 0x58) && (trackCache.frameY >= 0x42)) && (trackCache.frameY <= 110))
                                        {
                                            num68--;
                                        }
                                        if (((trackCache.frameX == 0x16) && (trackCache.frameY >= 0x84)) && (trackCache.frameY <= 0xb0))
                                        {
                                            num68--;
                                        }
                                        if (((trackCache.frameX == 0x2c) && (trackCache.frameY >= 0x84)) && (trackCache.frameY <= 0xb0))
                                        {
                                            num68++;
                                        }
                                        if ((trackCache.frameX == 0x2c) && (trackCache.frameY >= 0xc6))
                                        {
                                            num68++;
                                        }
                                        if ((trackCache.frameX == 0x42) && (trackCache.frameY >= 0xc6))
                                        {
                                            num68--;
                                        }
                                        while (!Game1.tile[num68, num69].active() || !Game1.tileSolid[Game1.tile[num68, num69].type])
                                        {
                                            num69++;
                                        }
                                        if (Game1.tile[num68, num69].active())
                                        {
                                            switch (Game1.tile[num68, num69].type)
                                            {
                                                case 0x17:
                                                    trackItem = 0x26b;
                                                    break;

                                                case 60:
                                                    trackItem = 620;
                                                    break;

                                                case 70:
                                                    trackItem = 0xb7;
                                                    break;

                                                case 0x6d:
                                                    trackItem = 0x26d;
                                                    break;

                                                case 0x93:
                                                    trackItem = 0x9c7;
                                                    break;

                                                case 0xc7:
                                                    trackItem = 0x38f;
                                                    break;
                                            }
                                        }
                                        int num70 = Player.FindClosest(new Vector2((float)(num68 * 0x10), (float)(num69 * 0x10)), 0x10, 0x10);
                                        int axe = Game1.player[num70].inventory[Game1.player[num70].selectedItem].axe;
                                        if (genRand.Next(200) < axe)
                                        {
                                            flag = true;
                                        }
                                    }
                                }
                                if (trackItem > 0)
                                {
                                    int num88 = 1;
                                    if (flag)
                                    {
                                        num88++;
                                    }
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, trackItem, num88, false, -1, false);
                                }
                                if (num62 > 0)
                                {
                                    Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, num62, 1, false, -1, false);
                                }
                            }
                            if (Game1.netMode == 0)
                            {
                                AchievementsHelper.NotifyTileDestroyed(Game1.player[Game1.myPlayer], trackCache.type);
                            }
                            trackCache.active(false);
                            trackCache.halfBrick(false);
                            trackCache.frameX = -1;
                            trackCache.frameY = -1;
                            trackCache.color(0);
                            trackCache.frameNumber(0);
                            if ((trackCache.type == 0x3a) && (j > (Game1.maxTilesY - 200)))
                            {
                                trackCache.lava(true);
                                trackCache.liquid = 0x80;
                            }
                            else if (trackCache.type == 0x36)
                            {
                                SquareWallFrame(i, j, true);
                            }
                            trackCache.type = 0;
                            trackCache.inActive(false);
                            SquareTileFrame(i, j, true);
                        }
                    }
                }
            }
        }

        public static void KillWall(int i, int j, bool fail = false)
        {
            if (((i >= 0) && (j >= 0)) && ((i < Game1.maxTilesX) && (j < Game1.maxTilesY)))
            {
                Tile tile = Game1.tile[i, j];
                if (tile == null)
                {
                    tile = new Tile();
                    Game1.tile[i, j] = tile;
                }
                if (tile.wall > 0)
                {
                    if (Game1.wallDungeon[tile.wall] && !NPC.downedBoss3)
                    {
                        fail = true;
                    }
                    if ((tile.wall == 0x57) && !NPC.downedGolemBoss)
                    {
                        fail = true;
                    }
                    if ((((tile.wall == 0x15) || (tile.wall == 0xba)) || ((tile.wall == 0x88) || (tile.wall == 0x89))) || (((tile.wall == 0xa8) || (tile.wall == 0xa9)) || (tile.wall == 0xac)))
                    {
                        Game1.PlaySound(13, i * 0x10, j * 0x10, 1);
                    }
                    else if ((tile.wall >= 0x3f) && (tile.wall <= 70))
                    {
                        Game1.PlaySound(6, i * 0x10, j * 0x10, 1);
                    }
                    else
                    {
                        Game1.PlaySound(0, i * 0x10, j * 0x10, 1);
                    }
                    int num = 10;
                    if (fail)
                    {
                        num = 3;
                    }
                    for (int k = 0; k < num; k++)
                    {
                        int type = 0;
                        if (tile.wall == 0x94)
                        {
                            type = -1;
                        }
                        if (((((((tile.wall == 1) || (tile.wall == 5)) || ((tile.wall == 6) || (tile.wall == 7))) || (((tile.wall == 0x6b) || (tile.wall == 8)) || (tile.wall == 9))) || ((tile.wall >= 0x30) && (tile.wall <= 0x35))) || ((tile.wall >= 0x36) && (tile.wall <= 0x3a))) || (tile.wall == 0xb9))
                        {
                            type = 1;
                        }
                        if ((tile.wall >= 0x5e) && (tile.wall <= 0x69))
                        {
                            type = 1;
                        }
                        if (tile.wall == 3)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                type = 14;
                            }
                            else
                            {
                                type = 1;
                            }
                        }
                        if (tile.wall == 0x23)
                        {
                            type = 0x25;
                        }
                        if ((tile.wall == 4) || (tile.wall == 0x6a))
                        {
                            type = 7;
                        }
                        if (tile.wall == 12)
                        {
                            type = 9;
                        }
                        if (tile.wall == 10)
                        {
                            type = 10;
                        }
                        if (tile.wall == 11)
                        {
                            type = 11;
                        }
                        if (tile.wall == 0x15)
                        {
                            type = 13;
                        }
                        if (tile.wall == 0x22)
                        {
                            type = 0x20;
                        }
                        if (tile.wall == 0x91)
                        {
                            type = 8;
                        }
                        if ((tile.wall == 0x16) || (tile.wall == 0x1c))
                        {
                            type = 0x33;
                        }
                        if (tile.wall == 0x17)
                        {
                            type = 0x26;
                        }
                        if (tile.wall == 0x18)
                        {
                            type = 0x24;
                        }
                        if (tile.wall == 0x19)
                        {
                            type = 0x30;
                        }
                        if (((tile.wall == 0xb3) || (tile.wall == 0xb2)) || (tile.wall == 0xb7))
                        {
                            type = 0xec;
                        }
                        if (((tile.wall == 0xb5) || (tile.wall == 180)) || (tile.wall == 0xb8))
                        {
                            type = 240;
                        }
                        if (tile.wall == 0x71)
                        {
                            type = 0xbd;
                        }
                        if (tile.wall == 0x72)
                        {
                            type = 190;
                        }
                        if (tile.wall == 0x73)
                        {
                            type = 0xbf;
                        }
                        if ((tile.wall == 0xb1) || (tile.wall == 13))
                        {
                            type = 0x19;
                        }
                        if (tile.wall == 0xba)
                        {
                            type = genRand.Next(0x44, 0x47);
                        }
                        if (tile.wall == 0x8e)
                        {
                            type = 210;
                        }
                        if (tile.wall == 0x8f)
                        {
                            type = 210;
                        }
                        if (tile.wall == 0xe0)
                        {
                            type = 0x109;
                        }
                        if (tile.wall == 0xad)
                        {
                            type = 0x80;
                        }
                        if (tile.wall == 0xae)
                        {
                            type = 0x75;
                        }
                        if (tile.wall == 0xaf)
                        {
                            type = 0x2a;
                        }
                        if (tile.wall == 0xb0)
                        {
                            type = 0xe2;
                        }
                        if (tile.wall == 0xb6)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                type = 6;
                            }
                            else
                            {
                                type = 0x17;
                            }
                        }
                        if ((tile.wall >= 0x99) && (tile.wall <= 0xa6))
                        {
                            switch (tile.wall)
                            {
                                case 0x99:
                                case 0x9d:
                                    type = 0x8a;
                                    break;

                                case 0x9a:
                                case 0x9e:
                                    type = 0x56;
                                    break;

                                case 0x9b:
                                case 0x9f:
                                    type = 0x5b;
                                    break;

                                case 0x9c:
                                case 160:
                                    type = 0x59;
                                    break;

                                case 0xa1:
                                case 0xa4:
                                    type = 90;
                                    break;

                                case 0xa2:
                                case 0xa5:
                                    type = 0x58;
                                    break;

                                case 0xa3:
                                case 0xa6:
                                    type = 0x57;
                                    break;
                            }
                        }
                        if ((tile.wall == 0x1a) || (tile.wall == 30))
                        {
                            type = 0x31;
                        }
                        if ((tile.wall == 0x1d) || (tile.wall == 0x20))
                        {
                            type = 50;
                        }
                        if (tile.wall == 0x1f)
                        {
                            type = 0x33;
                        }
                        if ((tile.wall == 14) || (tile.wall == 20))
                        {
                            type = 0x6d;
                        }
                        if ((tile.wall >= 0x58) && (tile.wall <= 0x5d))
                        {
                            type = (0x56 + tile.wall) - 0x58;
                            if (tile.wall == 0x5d)
                            {
                                type = genRand.Next(0x58, 0x5e);
                            }
                        }
                        if (tile.wall == 0x21)
                        {
                            type = 14;
                        }
                        if (tile.wall == 0x29)
                        {
                            type = 0x4d;
                        }
                        if (tile.wall == 0x2a)
                        {
                            type = 0x4e;
                        }
                        if (tile.wall == 0x2b)
                        {
                            type = 0x4e;
                        }
                        if (tile.wall == 0x2b)
                        {
                            type = 0x4e;
                        }
                        if (tile.wall == 0x24)
                        {
                            type = 0x1a;
                        }
                        if (tile.wall == 0x25)
                        {
                            type = 0x20;
                        }
                        if (tile.wall == 0x26)
                        {
                            type = 2;
                        }
                        if (tile.wall == 0x27)
                        {
                            type = 1;
                        }
                        if (tile.wall == 40)
                        {
                            type = 0x33;
                        }
                        if (tile.wall == 0x2d)
                        {
                            type = 0x51;
                        }
                        if (tile.wall == 0x2e)
                        {
                            type = 0x53;
                        }
                        if (tile.wall == 0x2f)
                        {
                            type = 0x54;
                        }
                        if (tile.wall == 0x55)
                        {
                            type = 0x7e;
                        }
                        if (tile.wall == 0x3b)
                        {
                            type = 0;
                        }
                        if (tile.wall == 0x3d)
                        {
                            type = 0;
                        }
                        if (tile.wall == 0x3e)
                        {
                            type = 0;
                        }
                        if (tile.wall == 0x3f)
                        {
                            type = 3;
                        }
                        if (tile.wall == 0x41)
                        {
                            type = 3;
                        }
                        if (tile.wall == 0x42)
                        {
                            type = 3;
                        }
                        if (tile.wall == 0x44)
                        {
                            type = 3;
                        }
                        if (tile.wall == 0x40)
                        {
                            type = 40;
                        }
                        if (tile.wall == 0x43)
                        {
                            type = 40;
                        }
                        if (tile.wall == 0x54)
                        {
                            type = 80;
                        }
                        if (tile.wall == 0x47)
                        {
                            type = 80;
                        }
                        if (tile.wall == 60)
                        {
                            type = 3;
                        }
                        if (tile.wall == 0x47)
                        {
                            type = 80;
                        }
                        if (tile.wall == 0xa7)
                        {
                            type = 0x51;
                        }
                        if (tile.wall == 0x93)
                        {
                            type = 0x33;
                        }
                        if (tile.wall == 0x92)
                        {
                            type = 9;
                        }
                        if (tile.wall == 0x6d)
                        {
                            type = 0x90;
                        }
                        if (tile.wall == 110)
                        {
                            type = 0x91;
                        }
                        if (tile.wall == 0x6f)
                        {
                            type = 0x92;
                        }
                        if ((tile.wall == 0x56) || (tile.wall == 0x6c))
                        {
                            type = 0x93;
                        }
                        if (tile.wall == 0x57)
                        {
                            type = 0x94;
                        }
                        if (tile.wall == 0x53)
                        {
                            type = 0x75;
                            if (genRand.Next(2) == 0)
                            {
                                type = 1;
                            }
                        }
                        if (tile.wall == 0x51)
                        {
                            type = 0x7b;
                        }
                        if (tile.wall == 0x88)
                        {
                            type = 13;
                        }
                        if (tile.wall == 0x89)
                        {
                            type = 13;
                        }
                        if (tile.wall == 0xa8)
                        {
                            type = 13;
                        }
                        if (tile.wall == 0xa9)
                        {
                            type = 13;
                        }
                        if (tile.wall == 0xac)
                        {
                            type = 13;
                        }
                        if (tile.wall == 0x48)
                        {
                            type = 40;
                        }
                        if (tile.wall == 0x49)
                        {
                            type = 0x10;
                        }
                        if ((tile.wall == 0x4a) || (tile.wall == 80))
                        {
                            type = 0x1a;
                        }
                        if (tile.wall == 0x90)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                type = 10;
                            }
                            else
                            {
                                type = 0x76;
                            }
                        }
                        if (tile.wall == 0x4b)
                        {
                            type = 0x1a;
                        }
                        if (tile.wall == 0x4c)
                        {
                            type = 4;
                        }
                        if ((tile.wall == 0x4d) || (tile.wall == 0x51))
                        {
                            type = 5;
                        }
                        if (tile.wall == 0x4e)
                        {
                            type = 7;
                        }
                        if (tile.wall == 0x4f)
                        {
                            type = 0x25;
                        }
                        if (tile.wall == 0x52)
                        {
                            type = 0x24;
                        }
                        if (tile.wall == 0x45)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                type = 14;
                            }
                            else
                            {
                                type = 0x11;
                            }
                        }
                        if (tile.wall == 70)
                        {
                            type = 0x2f;
                        }
                        if (tile.wall == 0x1b)
                        {
                            if (genRand.Next(2) == 0)
                            {
                                type = 7;
                            }
                            else
                            {
                                type = 1;
                            }
                        }
                        if (tile.wall == 0x8a)
                        {
                            type = 0x4d;
                        }
                        if (tile.wall == 0x8b)
                        {
                            type = 0x4e;
                        }
                        if (tile.wall == 140)
                        {
                            type = 0x4f;
                        }
                        if (tile.wall == 0x8d)
                        {
                            type = 0x7e;
                        }
                        if ((tile.wall == 0x95) || (tile.wall == 150))
                        {
                            type = 0xd6;
                        }
                        if ((tile.wall == 0x97) || (tile.wall == 0x98))
                        {
                            type = 0xd7;
                        }
                        if (tile.wall == 0x2c)
                        {
                            int index = Dust.NewDust(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10, 0x42, 0f, 0f, 100, new Color(Game1.DiscoR, Game1.DiscoG, Game1.DiscoB), 0.75f);
                            Game1.dust[index].noGravity = true;
                        }
                        else if ((((tile.wall < 0x85) || (tile.wall > 0x87)) && ((tile.wall < 0x74) || (tile.wall > 0x7d))) && ((tile.wall < 0x7e) || (tile.wall > 0x84)))
                        {
                            if (tile.wall == 0x4c)
                            {
                                Dust.NewDust(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10, type, 0f, 0f, 0x4b, new Color(0, 80, 0xff, 100), 0.75f);
                            }
                            else if (type >= 0)
                            {
                                Color newColor = new Color();
                                Dust.NewDust(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10, type, 0f, 0f, 0, newColor, 1f);
                            }
                        }
                    }
                    if (fail)
                    {
                        SquareWallFrame(i, j, true);
                    }
                    else
                    {
                        int num5 = 0;
                        if (tile.wall == 0xa8)
                        {
                            num5 = 0xa88;
                        }
                        if (tile.wall == 0xa9)
                        {
                            num5 = 0xa8a;
                        }
                        if (tile.wall == 0x8e)
                        {
                            num5 = 0x8d7;
                        }
                        if (tile.wall == 0x8f)
                        {
                            num5 = 0x8d8;
                        }
                        if (tile.wall == 0x90)
                        {
                            num5 = 0x8df;
                        }
                        if (tile.wall == 0x95)
                        {
                            num5 = 0x9c9;
                        }
                        if (tile.wall == 150)
                        {
                            num5 = 0x9cb;
                        }
                        if (tile.wall == 0x97)
                        {
                            num5 = 0x9ca;
                        }
                        if (tile.wall == 0x98)
                        {
                            num5 = 0x9cc;
                        }
                        if (tile.wall == 1)
                        {
                            num5 = 0x1a;
                        }
                        if (tile.wall == 4)
                        {
                            num5 = 0x5d;
                        }
                        if (tile.wall == 5)
                        {
                            num5 = 130;
                        }
                        if (tile.wall == 6)
                        {
                            num5 = 0x84;
                        }
                        if (tile.wall == 7)
                        {
                            num5 = 0x87;
                        }
                        if (tile.wall == 8)
                        {
                            num5 = 0x8a;
                        }
                        if (tile.wall == 9)
                        {
                            num5 = 140;
                        }
                        if (tile.wall == 10)
                        {
                            num5 = 0x8e;
                        }
                        if (tile.wall == 11)
                        {
                            num5 = 0x90;
                        }
                        if (tile.wall == 12)
                        {
                            num5 = 0x92;
                        }
                        if (tile.wall == 14)
                        {
                            num5 = 330;
                        }
                        if (tile.wall == 0xe0)
                        {
                            num5 = 0xd90;
                        }
                        if (tile.wall == 0xb1)
                        {
                            num5 = 0xbfb;
                        }
                        if (tile.wall == 0xa7)
                        {
                            num5 = 0xa83;
                        }
                        if (tile.wall == 60)
                        {
                            num5 = 0xe00;
                        }
                        if (tile.wall == 0xb3)
                        {
                            num5 = 0xc0b;
                        }
                        if (tile.wall == 0xb7)
                        {
                            num5 = 0xc0a;
                        }
                        if (tile.wall == 0xb5)
                        {
                            num5 = 0xc11;
                        }
                        if (tile.wall == 0xb8)
                        {
                            num5 = 0xc10;
                        }
                        if (tile.wall == 0xba)
                        {
                            num5 = 0xca6;
                        }
                        if ((tile.wall >= 0x99) && (tile.wall <= 0xa6))
                        {
                            switch (tile.wall)
                            {
                                case 0x99:
                                    num5 = 0xa75;
                                    break;

                                case 0x9a:
                                    num5 = 0xa77;
                                    break;

                                case 0x9b:
                                    num5 = 0xa79;
                                    break;

                                case 0x9c:
                                    num5 = 0xa7b;
                                    break;

                                case 0x9d:
                                    num5 = 0xa76;
                                    break;

                                case 0x9e:
                                    num5 = 0xa78;
                                    break;

                                case 0x9f:
                                    num5 = 0xa7a;
                                    break;

                                case 160:
                                    num5 = 0xa7c;
                                    break;

                                case 0xa1:
                                    num5 = 0xa7e;
                                    break;

                                case 0xa2:
                                    num5 = 0xa80;
                                    break;

                                case 0xa3:
                                    num5 = 0xa82;
                                    break;

                                case 0xa4:
                                    num5 = 0xa7d;
                                    break;

                                case 0xa5:
                                    num5 = 0xa7f;
                                    break;

                                case 0xa6:
                                    num5 = 0xa81;
                                    break;
                            }
                        }
                        if (tile.wall == 0x88)
                        {
                            num5 = 0x879;
                        }
                        if (tile.wall == 0x89)
                        {
                            num5 = 0x87a;
                        }
                        if (tile.wall == 0xac)
                        {
                            num5 = 0xae4;
                        }
                        if (tile.wall == 0x91)
                        {
                            num5 = 0x91d;
                        }
                        if (tile.wall == 0x10)
                        {
                            num5 = 30;
                        }
                        if (tile.wall == 0x11)
                        {
                            num5 = 0x87;
                        }
                        if (tile.wall == 0x12)
                        {
                            num5 = 0x8a;
                        }
                        if (tile.wall == 0x13)
                        {
                            num5 = 140;
                        }
                        if (tile.wall == 20)
                        {
                            num5 = 330;
                        }
                        if (tile.wall == 0x15)
                        {
                            num5 = 0x188;
                        }
                        if ((tile.wall == 0x56) || (tile.wall == 0x6c))
                        {
                            num5 = 0x466;
                        }
                        if (tile.wall == 0xad)
                        {
                            num5 = 0xae5;
                        }
                        if (tile.wall == 0xae)
                        {
                            num5 = 0xae6;
                        }
                        if (tile.wall == 0xaf)
                        {
                            num5 = 0xae7;
                        }
                        if (tile.wall == 0xb0)
                        {
                            num5 = 0xb2d;
                        }
                        if (tile.wall == 0xb6)
                        {
                            num5 = 0xc1d;
                        }
                        if (tile.wall == 0x85)
                        {
                            num5 = 0x86e;
                        }
                        if (tile.wall == 0x86)
                        {
                            num5 = 0x86f;
                        }
                        if (tile.wall == 0x87)
                        {
                            num5 = 0x870;
                        }
                        else if (tile.wall == 0x71)
                        {
                            num5 = 0x6be;
                        }
                        else if (tile.wall == 0x72)
                        {
                            num5 = 0x6c0;
                        }
                        else if (tile.wall == 0x73)
                        {
                            num5 = 0x6c2;
                        }
                        else if (tile.wall == 0x92)
                        {
                            num5 = 0x980;
                        }
                        else if (tile.wall == 0x93)
                        {
                            num5 = 0x981;
                        }
                        else if (tile.wall == 0x94)
                        {
                            num5 = 0x982;
                        }
                        if ((tile.wall >= 0x74) && (tile.wall <= 0x7d))
                        {
                            num5 = (0x79c + tile.wall) - 0x74;
                        }
                        if ((tile.wall >= 0x7e) && (tile.wall <= 0x84))
                        {
                            num5 = (0x7d8 + tile.wall) - 0x7e;
                        }
                        if (tile.wall == 0x16)
                        {
                            num5 = 0x1a1;
                        }
                        if (tile.wall == 0x17)
                        {
                            num5 = 0x1a2;
                        }
                        if (tile.wall == 0x18)
                        {
                            num5 = 0x1a3;
                        }
                        if (tile.wall == 0x19)
                        {
                            num5 = 420;
                        }
                        if (tile.wall == 0x1a)
                        {
                            num5 = 0x1a5;
                        }
                        if (tile.wall == 0x1d)
                        {
                            num5 = 0x24b;
                        }
                        if (tile.wall == 30)
                        {
                            num5 = 0x250;
                        }
                        if (tile.wall == 0x1f)
                        {
                            num5 = 0x253;
                        }
                        if (tile.wall == 0x20)
                        {
                            num5 = 0x25d;
                        }
                        if (tile.wall == 0x21)
                        {
                            num5 = 0x25e;
                        }
                        if (tile.wall == 0x22)
                        {
                            num5 = 0x260;
                        }
                        if (tile.wall == 0x23)
                        {
                            num5 = 610;
                        }
                        if (tile.wall == 0x24)
                        {
                            num5 = 0x267;
                        }
                        if (tile.wall == 0x25)
                        {
                            num5 = 0x268;
                        }
                        if (tile.wall == 0x26)
                        {
                            num5 = 0x269;
                        }
                        if (tile.wall == 0x27)
                        {
                            num5 = 0x26a;
                        }
                        if (tile.wall == 0x29)
                        {
                            num5 = 0x26e;
                        }
                        if (tile.wall == 0x2a)
                        {
                            num5 = 0x26f;
                        }
                        if (tile.wall == 0x2b)
                        {
                            num5 = 0x270;
                        }
                        if (tile.wall == 0x2c)
                        {
                            num5 = 0x297;
                        }
                        if (tile.wall == 0x2d)
                        {
                            num5 = 720;
                        }
                        if (tile.wall == 0x2e)
                        {
                            num5 = 0x2d1;
                        }
                        if (tile.wall == 0x2f)
                        {
                            num5 = 0x2d2;
                        }
                        if (tile.wall == 0x42)
                        {
                            num5 = 0x2e9;
                        }
                        if (tile.wall == 0x43)
                        {
                            num5 = 0x2ea;
                        }
                        if (tile.wall == 0x44)
                        {
                            num5 = 0x2eb;
                        }
                        if (tile.wall == 0x54)
                        {
                            num5 = 0x374;
                        }
                        if (tile.wall == 0x48)
                        {
                            num5 = 750;
                        }
                        if (tile.wall == 0x49)
                        {
                            num5 = 0x2f0;
                        }
                        if (tile.wall == 0x4a)
                        {
                            num5 = 0x2fc;
                        }
                        if (tile.wall == 0x55)
                        {
                            num5 = 0x39f;
                        }
                        if (tile.wall == 0x4b)
                        {
                            num5 = 0x300;
                        }
                        if (tile.wall == 0x4c)
                        {
                            num5 = 0x301;
                        }
                        if (tile.wall == 0x4d)
                        {
                            num5 = 770;
                        }
                        if (tile.wall == 0x52)
                        {
                            num5 = 0x339;
                        }
                        if (tile.wall == 0x1b)
                        {
                            num5 = 0x1df;
                        }
                        if (tile.wall == 0x6a)
                        {
                            num5 = 0x5a7;
                        }
                        if (tile.wall == 0x6b)
                        {
                            num5 = 0x5a8;
                        }
                        if (tile.wall == 0x6d)
                        {
                            num5 = 0x636;
                        }
                        if (tile.wall == 110)
                        {
                            num5 = 0x638;
                        }
                        if (tile.wall == 0x6f)
                        {
                            num5 = 0x63a;
                        }
                        if (tile.wall == 0x4e)
                        {
                            num5 = 0x6bb;
                        }
                        if ((tile.wall == 0x57) || (tile.wall == 0x70))
                        {
                            num5 = 0x44e;
                        }
                        if ((tile.wall == 0x5e) || (tile.wall == 100))
                        {
                            num5 = 0x562;
                        }
                        if ((tile.wall == 0x5f) || (tile.wall == 0x65))
                        {
                            num5 = 0x563;
                        }
                        if ((tile.wall == 0x60) || (tile.wall == 0x66))
                        {
                            num5 = 0x564;
                        }
                        if ((tile.wall == 0x61) || (tile.wall == 0x67))
                        {
                            num5 = 0x565;
                        }
                        if ((tile.wall == 0x62) || (tile.wall == 0x68))
                        {
                            num5 = 0x566;
                        }
                        if ((tile.wall == 0x63) || (tile.wall == 0x69))
                        {
                            num5 = 0x567;
                        }
                        if ((tile.wall >= 0x58) && (tile.wall <= 0x5d))
                        {
                            num5 = (0x4f3 + tile.wall) - 0x58;
                        }
                        if ((tile.wall >= 0x8a) && (tile.wall <= 0x8d))
                        {
                            num5 = (0x8a2 + tile.wall) - 0x8a;
                        }
                        if (num5 > 0)
                        {
                            Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, num5, 1, false, 0, false);
                        }
                        tile.wall = 0;
                        tile.wallColor(0);
                        SquareWallFrame(i, j, true);
                        if (((tile.type >= 0) && (tile.type < 0x1a3)) && TileID.Sets.FramesOnKillWall[tile.type])
                        {
                            TileFrame(i, j, false, false);
                        }
                    }
                }
            }
        }

		public static bool PlaceWire(int i, int j, k_WireFlags type)
		{
			var tile = Game1.tile[i, j];
			if (!tile.k_HasWireFlags(type))
			{
				Game1.PlaySound(0, i * 0x10, j * 0x10, 1);
				tile.k_SetWireFlags(type, true);
				return true;
			}
			return false;
		}

		public static bool KillWire(int i, int j, k_WireFlags type)
		{
			var tile = Game1.tile[i, j];
			if (!tile.k_HasWireFlags(type))
				return false;

			Game1.PlaySound(0, i * 0x10, j * 0x10, 1);
			tile.k_SetWireFlags(type, false);
			if (Game1.netMode != 1)
			{
				int item = ItemID.Wire;
				if (type == k_WireFlags.WIRE_ACTUATOR)
					item = ItemID.Actuator;
				Item.NewItem(i * 0x10, j * 0x10, 0x10, 0x10, item, 1, false, 0, false);
			}
			for (int k = 0; k < 5; k++)
			{
				Color newColor = new Color();
				Dust.NewDust(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10, 50, 0f, 0f, 0, newColor, 1f);
			}
			return true;
		}

		public static void Lakinater(int i, int j)
        {
            Vector2 vector;
            Vector2 vector2;
            double num5 = genRand.Next(0x19, 50);
            double num6 = num5;
            float num7 = genRand.Next(30, 80);
            if (genRand.Next(5) == 0)
            {
                num5 *= 1.5;
                num6 *= 1.5;
                num7 *= 1.2f;
            }
            vector.X = i;
            vector.Y = j - (num7 * 0.3f);
            vector2.X = genRand.Next(-10, 11) * 0.1f;
            vector2.Y = genRand.Next(-20, -10) * 0.1f;
            while ((num5 > 0.0) && (num7 > 0f))
            {
                if ((vector.Y + (num6 * 0.5)) > Game1.worldSurface)
                {
                    num7 = 0f;
                }
                num5 -= genRand.Next(3);
                num7--;
                int num = (int)(vector.X - (num5 * 0.5));
                int maxTilesX = (int)(vector.X + (num5 * 0.5));
                int num2 = (int)(vector.Y - (num5 * 0.5));
                int maxTilesY = (int)(vector.Y + (num5 * 0.5));
                if (num < 0)
                {
                    num = 0;
                }
                if (maxTilesX > Game1.maxTilesX)
                {
                    maxTilesX = Game1.maxTilesX;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                num6 = (num5 * genRand.Next(80, 120)) * 0.01;
                for (int k = num; k < maxTilesX; k++)
                {
                    for (int m = num2; m < maxTilesY; m++)
                    {
                        float num10 = Math.Abs((float)(k - vector.X));
                        float num11 = Math.Abs((float)(m - vector.Y));
                        if (Math.Sqrt((double)((num10 * num10) + (num11 * num11))) < (num6 * 0.4))
                        {
                            if (Game1.tile[k, m].active())
                            {
                                Game1.tile[k, m].liquid = 0xff;
                            }
                            Game1.tile[k, m].active(false);
                        }
                    }
                }
                vector += vector2;
                vector2.X += genRand.Next(-10, 11) * 0.05f;
                vector2.Y += genRand.Next(-10, 11) * 0.05f;
                if (vector2.X > 0.5)
                {
                    vector2.X = 0.5f;
                }
                if (vector2.X < -0.5)
                {
                    vector2.X = -0.5f;
                }
                if (vector2.Y > 1.5)
                {
                    vector2.Y = 1.5f;
                }
                if (vector2.Y < 0.5)
                {
                    vector2.Y = 0.5f;
                }
            }
        }

        public static void LaunchRocket(int x, int y)
        {
            int frameY = Game1.tile[x, y].frameY;
            int num2 = 0;
            while (frameY >= 40)
            {
                frameY -= 40;
                num2++;
            }
            if (frameY == 0x12)
            {
                y--;
            }
            Vector2 vector = new Vector2((float)((x * 0x10) + 8), (float)((y * 0x10) + 4));
            int type = 0xa7 + num2;
            int damage = 150;
            int num5 = 7;
            Projectile.NewProjectile(vector.X, vector.Y + 2f, 0f, -8f, type, damage, (float)num5, Game1.myPlayer, 0f, 0f);
            Game1.tile[x, y].active(false);
            Game1.tile[x, y + 1].active(false);
            NetMessage.SendTileSquare(-1, x - 1, y, 3);
        }

        public static void LaunchRocketSmall(int x, int y)
        {
            if (Game1.tile[x, y].frameX == 0x12)
            {
                x--;
            }
            if (Game1.tile[x, y].frameY == 0x12)
            {
                y--;
            }
            Vector2 vector = new Vector2((float)((x * 0x10) + 0x10), (float)(y * 0x10));
            int type = 0x19f + Game1.rand.Next(4);
            int damage = 0;
            int num3 = 0;
            Projectile.NewProjectile(vector.X, vector.Y + 2f, 0f, -8f, type, damage, (float)num3, Game1.myPlayer, 0f, 0f);
        }

        public static void MakeDungeon(int x, int y)
        {
            ushort num;
            int num2;
            int num3 = genRand.Next(3);
            genRand.Next(3);
            switch (num3)
            {
                case 0:
                    num = 0x29;
                    num2 = 7;
                    break;

                case 1:
                    num = 0x2b;
                    num2 = 8;
                    break;

                default:
                    num = 0x2c;
                    num2 = 9;
                    break;
            }
            numDDoors = 0;
            numDPlats = 0;
            numDRooms = 0;
            WorldGen.dungeonX = x;
            WorldGen.dungeonY = y;
            dMinX = x;
            dMaxX = x;
            dMinY = y;
            dMaxY = y;
            dxStrength1 = genRand.Next(0x19, 30);
            dyStrength1 = genRand.Next(20, 0x19);
            dxStrength2 = genRand.Next(0x23, 50);
            dyStrength2 = genRand.Next(10, 15);
            float num4 = Game1.maxTilesX / 60;
            num4 += genRand.Next(0, (int)(num4 / 3f));
            float num5 = num4;
            int num6 = 5;
            DungeonRoom(WorldGen.dungeonX, WorldGen.dungeonY, num, num2);
            while (num4 > 0f)
            {
                if (WorldGen.dungeonX < dMinX)
                {
                    dMinX = WorldGen.dungeonX;
                }
                if (WorldGen.dungeonX > dMaxX)
                {
                    dMaxX = WorldGen.dungeonX;
                }
                if (WorldGen.dungeonY > dMaxY)
                {
                    dMaxY = WorldGen.dungeonY;
                }
                num4--;
                Game1.statusText = string.Concat(new object[] { Lang.gen[0x3a], " ", (int)(((num5 - num4) / num5) * 60f), "%" });
                if (num6 > 0)
                {
                    num6--;
                }
                if ((num6 == 0) & (genRand.Next(3) == 0))
                {
                    num6 = 5;
                    if (genRand.Next(2) == 0)
                    {
                        int dungeonX = WorldGen.dungeonX;
                        int dungeonY = WorldGen.dungeonY;
                        DungeonHalls(WorldGen.dungeonX, WorldGen.dungeonY, num, num2, false);
                        if (genRand.Next(2) == 0)
                        {
                            DungeonHalls(WorldGen.dungeonX, WorldGen.dungeonY, num, num2, false);
                        }
                        DungeonRoom(WorldGen.dungeonX, WorldGen.dungeonY, num, num2);
                        WorldGen.dungeonX = dungeonX;
                        WorldGen.dungeonY = dungeonY;
                    }
                    else
                    {
                        DungeonRoom(WorldGen.dungeonX, WorldGen.dungeonY, num, num2);
                    }
                }
                else
                {
                    DungeonHalls(WorldGen.dungeonX, WorldGen.dungeonY, num, num2, false);
                }
            }
            DungeonRoom(WorldGen.dungeonX, WorldGen.dungeonY, num, num2);
            int num9 = dRoomX[0];
            int num10 = dRoomY[0];
            for (int i = 0; i < numDRooms; i++)
            {
                if (dRoomY[i] < num10)
                {
                    num9 = dRoomX[i];
                    num10 = dRoomY[i];
                }
            }
            WorldGen.dungeonX = num9;
            WorldGen.dungeonY = num10;
            dEnteranceX = num9;
            dSurface = false;
            num6 = 5;
            while (!dSurface)
            {
                if (num6 > 0)
                {
                    num6--;
                }
                if (((num6 == 0) && (genRand.Next(5) == 0)) && (WorldGen.dungeonY > (Game1.worldSurface + 100.0)))
                {
                    num6 = 10;
                    int num12 = WorldGen.dungeonX;
                    int num13 = WorldGen.dungeonY;
                    DungeonHalls(WorldGen.dungeonX, WorldGen.dungeonY, num, num2, true);
                    DungeonRoom(WorldGen.dungeonX, WorldGen.dungeonY, num, num2);
                    WorldGen.dungeonX = num12;
                    WorldGen.dungeonY = num13;
                }
                DungeonStairs(WorldGen.dungeonX, WorldGen.dungeonY, num, num2);
            }
            DungeonEnt(WorldGen.dungeonX, WorldGen.dungeonY, num, num2);
            Game1.statusText = Lang.gen[0x3a] + " 65%";
            for (int j = 0; j < numDRooms; j++)
            {
                for (int num15 = dRoomL[j]; num15 <= dRoomR[j]; num15++)
                {
                    if (!Game1.tile[num15, dRoomT[j] - 1].active())
                    {
                        DPlatX[numDPlats] = num15;
                        DPlatY[numDPlats] = dRoomT[j] - 1;
                        numDPlats++;
                        break;
                    }
                }
                for (int num16 = dRoomL[j]; num16 <= dRoomR[j]; num16++)
                {
                    if (!Game1.tile[num16, dRoomB[j] + 1].active())
                    {
                        DPlatX[numDPlats] = num16;
                        DPlatY[numDPlats] = dRoomB[j] + 1;
                        numDPlats++;
                        break;
                    }
                }
                for (int num17 = dRoomT[j]; num17 <= dRoomB[j]; num17++)
                {
                    if (!Game1.tile[dRoomL[j] - 1, num17].active())
                    {
                        DDoorX[numDDoors] = dRoomL[j] - 1;
                        DDoorY[numDDoors] = num17;
                        DDoorPos[numDDoors] = -1;
                        numDDoors++;
                        break;
                    }
                }
                for (int num18 = dRoomT[j]; num18 <= dRoomB[j]; num18++)
                {
                    if (!Game1.tile[dRoomR[j] + 1, num18].active())
                    {
                        DDoorX[numDDoors] = dRoomR[j] + 1;
                        DDoorY[numDDoors] = num18;
                        DDoorPos[numDDoors] = 1;
                        numDDoors++;
                        break;
                    }
                }
            }
            Game1.statusText = Lang.gen[0x3a] + " 70%";
            int num19 = 0;
            int num20 = 0x3e8;
            int num21 = 0;
            while (num21 < (Game1.maxTilesX / 100))
            {
                num19++;
                int num22 = genRand.Next(dMinX, dMaxX);
                int num23 = genRand.Next(((int)Game1.worldSurface) + 0x19, dMaxY);
                int num24 = num22;
                if ((Game1.tile[num22, num23].wall == num2) && !Game1.tile[num22, num23].active())
                {
                    int num25 = 1;
                    if (genRand.Next(2) == 0)
                    {
                        num25 = -1;
                    }
                    while (!Game1.tile[num22, num23].active())
                    {
                        num23 += num25;
                    }
                    if ((Game1.tile[num22 - 1, num23].active() && Game1.tile[num22 + 1, num23].active()) && (!Game1.tile[num22 - 1, num23 - num25].active() && !Game1.tile[num22 + 1, num23 - num25].active()))
                    {
                        num21++;
                        int num26 = genRand.Next(5, 13);
                        while ((Game1.tile[num22 - 1, num23].active() && Game1.tile[num22, num23 + num25].active()) && ((Game1.tile[num22, num23].active() && !Game1.tile[num22, num23 - num25].active()) && (num26 > 0)))
                        {
                            Game1.tile[num22, num23].type = 0x30;
                            if (!Game1.tile[num22 - 1, num23 - num25].active() && !Game1.tile[num22 + 1, num23 - num25].active())
                            {
                                Game1.tile[num22, num23 - num25].type = 0x30;
                                Game1.tile[num22, num23 - num25].active(true);
                            }
                            num22--;
                            num26--;
                        }
                        num26 = genRand.Next(5, 13);
                        num22 = num24 + 1;
                        while ((Game1.tile[num22 + 1, num23].active() && Game1.tile[num22, num23 + num25].active()) && ((Game1.tile[num22, num23].active() && !Game1.tile[num22, num23 - num25].active()) && (num26 > 0)))
                        {
                            Game1.tile[num22, num23].type = 0x30;
                            if (!Game1.tile[num22 - 1, num23 - num25].active() && !Game1.tile[num22 + 1, num23 - num25].active())
                            {
                                Game1.tile[num22, num23 - num25].type = 0x30;
                                Game1.tile[num22, num23 - num25].active(true);
                            }
                            num22++;
                            num26--;
                        }
                    }
                }
                if (num19 > num20)
                {
                    num19 = 0;
                    num21++;
                }
            }
            num19 = 0;
            num20 = 0x3e8;
            num21 = 0;
            Game1.statusText = Lang.gen[0x3a] + " 75%";
            while (num21 < (Game1.maxTilesX / 100))
            {
                num19++;
                int num27 = genRand.Next(dMinX, dMaxX);
                int num28 = genRand.Next(((int)Game1.worldSurface) + 0x19, dMaxY);
                int num29 = num28;
                if ((Game1.tile[num27, num28].wall == num2) && !Game1.tile[num27, num28].active())
                {
                    int num30 = 1;
                    if (genRand.Next(2) == 0)
                    {
                        num30 = -1;
                    }
                    while (((num27 > 5) && (num27 < (Game1.maxTilesX - 5))) && !Game1.tile[num27, num28].active())
                    {
                        num27 += num30;
                    }
                    if ((Game1.tile[num27, num28 - 1].active() && Game1.tile[num27, num28 + 1].active()) && (!Game1.tile[num27 - num30, num28 - 1].active() && !Game1.tile[num27 - num30, num28 + 1].active()))
                    {
                        num21++;
                        int num31 = genRand.Next(5, 13);
                        while ((Game1.tile[num27, num28 - 1].active() && Game1.tile[num27 + num30, num28].active()) && ((Game1.tile[num27, num28].active() && !Game1.tile[num27 - num30, num28].active()) && (num31 > 0)))
                        {
                            Game1.tile[num27, num28].type = 0x30;
                            if (!Game1.tile[num27 - num30, num28 - 1].active() && !Game1.tile[num27 - num30, num28 + 1].active())
                            {
                                Game1.tile[num27 - num30, num28].type = 0x30;
                                Game1.tile[num27 - num30, num28].active(true);
                            }
                            num28--;
                            num31--;
                        }
                        num31 = genRand.Next(5, 13);
                        num28 = num29 + 1;
                        while ((Game1.tile[num27, num28 + 1].active() && Game1.tile[num27 + num30, num28].active()) && ((Game1.tile[num27, num28].active() && !Game1.tile[num27 - num30, num28].active()) && (num31 > 0)))
                        {
                            Game1.tile[num27, num28].type = 0x30;
                            if (!Game1.tile[num27 - num30, num28 - 1].active() && !Game1.tile[num27 - num30, num28 + 1].active())
                            {
                                Game1.tile[num27 - num30, num28].type = 0x30;
                                Game1.tile[num27 - num30, num28].active(true);
                            }
                            num28++;
                            num31--;
                        }
                    }
                }
                if (num19 > num20)
                {
                    num19 = 0;
                    num21++;
                }
            }
            Game1.statusText = Lang.gen[0x3a] + " 80%";
            for (int k = 0; k < numDDoors; k++)
            {
                int num33 = DDoorX[k] - 10;
                int num34 = DDoorX[k] + 10;
                int num35 = 100;
                int num36 = 0;
                int num37 = 0;
                int num38 = 0;
                for (int num39 = num33; num39 < num34; num39++)
                {
                    bool flag = true;
                    int num40 = DDoorY[k];
                    while ((num40 > 10) && !Game1.tile[num39, num40].active())
                    {
                        num40--;
                    }
                    if (!Game1.tileDungeon[Game1.tile[num39, num40].type])
                    {
                        flag = false;
                    }
                    num37 = num40;
                    num40 = DDoorY[k];
                    while (!Game1.tile[num39, num40].active())
                    {
                        num40++;
                    }
                    if (!Game1.tileDungeon[Game1.tile[num39, num40].type])
                    {
                        flag = false;
                    }
                    num38 = num40;
                    if ((num38 - num37) >= 3)
                    {
                        int num41 = num39 - 20;
                        int num42 = num39 + 20;
                        int num43 = num38 - 10;
                        int num44 = num38 + 10;
                        for (int num45 = num41; num45 < num42; num45++)
                        {
                            for (int num46 = num43; num46 < num44; num46++)
                            {
                                if (Game1.tile[num45, num46].active() && (Game1.tile[num45, num46].type == 10))
                                {
                                    flag = false;
                                    break;
                                }
                            }
                        }
                        if (flag)
                        {
                            for (int num47 = num38 - 3; num47 < num38; num47++)
                            {
                                for (int num48 = num39 - 3; num48 <= (num39 + 3); num48++)
                                {
                                    if (Game1.tile[num48, num47].active())
                                    {
                                        flag = false;
                                        break;
                                    }
                                }
                            }
                        }
                        if (flag && ((num38 - num37) < 20))
                        {
                            bool flag2 = false;
                            if ((DDoorPos[k] == 0) && ((num38 - num37) < num35))
                            {
                                flag2 = true;
                            }
                            if ((DDoorPos[k] == -1) && (num39 > num36))
                            {
                                flag2 = true;
                            }
                            if ((DDoorPos[k] == 1) && ((num39 < num36) || (num36 == 0)))
                            {
                                flag2 = true;
                            }
                            if (flag2)
                            {
                                num36 = num39;
                                num35 = num38 - num37;
                            }
                        }
                    }
                }
                if (num35 < 20)
                {
                    int num49 = num36;
                    int num50 = DDoorY[k];
                    int num51 = num50;
                    while (!Game1.tile[num49, num50].active())
                    {
                        Game1.tile[num49, num50].active(false);
                        num50++;
                    }
                    while (!Game1.tile[num49, num51].active())
                    {
                        num51--;
                    }
                    num50--;
                    num51++;
                    for (int num52 = num51; num52 < (num50 - 2); num52++)
                    {
                        Game1.tile[num49, num52].active(true);
                        Game1.tile[num49, num52].type = num;
                    }
                    int style = 13;
                    if (genRand.Next(3) == 0)
                    {
                        switch (num2)
                        {
                            case 7:
                                style = 0x10;
                                break;

                            case 8:
                                style = 0x11;
                                break;

                            case 9:
                                style = 0x12;
                                break;
                        }
                    }
                    PlaceTile(num49, num50, 10, true, false, -1, style);
                    num49--;
                    int num54 = num50 - 3;
                    while (!Game1.tile[num49, num54].active())
                    {
                        num54--;
                    }
                    if (((num50 - num54) < ((num50 - num51) + 5)) && Game1.tileDungeon[Game1.tile[num49, num54].type])
                    {
                        for (int num55 = (num50 - 4) - genRand.Next(3); num55 > num54; num55--)
                        {
                            Game1.tile[num49, num55].active(true);
                            Game1.tile[num49, num55].type = num;
                        }
                    }
                    num49 += 2;
                    num54 = num50 - 3;
                    while (!Game1.tile[num49, num54].active())
                    {
                        num54--;
                    }
                    if (((num50 - num54) < ((num50 - num51) + 5)) && Game1.tileDungeon[Game1.tile[num49, num54].type])
                    {
                        for (int num56 = (num50 - 4) - genRand.Next(3); num56 > num54; num56--)
                        {
                            Game1.tile[num49, num56].active(true);
                            Game1.tile[num49, num56].type = num;
                        }
                    }
                    num50++;
                    num49--;
                    Game1.tile[num49 - 1, num50].active(true);
                    Game1.tile[num49 - 1, num50].type = num;
                    Game1.tile[num49 + 1, num50].active(true);
                    Game1.tile[num49 + 1, num50].type = num;
                }
            }
            int[] numArray = new int[3];
            switch (num2)
            {
                case 7:
                    numArray[0] = 7;
                    numArray[1] = 0x5e;
                    numArray[2] = 0x5f;
                    break;

                case 9:
                    numArray[0] = 9;
                    numArray[1] = 0x60;
                    numArray[2] = 0x61;
                    break;

                default:
                    numArray[0] = 8;
                    numArray[1] = 0x62;
                    numArray[2] = 0x63;
                    break;
            }
            for (int m = 0; m < 5; m++)
            {
                for (int num58 = 0; num58 < 3; num58++)
                {
                    int num59 = genRand.Next(40, 240);
                    int num60 = genRand.Next(dMinX, dMaxX);
                    int num61 = genRand.Next(dMinY, dMaxY);
                    for (int num62 = num60 - num59; num62 < (num60 + num59); num62++)
                    {
                        for (int num63 = num61 - num59; num63 < (num61 + num59); num63++)
                        {
                            if (num63 > Game1.worldSurface)
                            {
                                float num64 = Math.Abs((int)(num60 - num62));
                                float num65 = Math.Abs((int)(num61 - num63));
                                if ((Math.Sqrt((double)((num64 * num64) + (num65 * num65))) < (num59 * 0.4)) && Game1.wallDungeon[Game1.tile[num62, num63].wall])
                                {
                                    Spread.WallDungeon(num62, num63, numArray[num58]);
                                }
                            }
                        }
                    }
                }
            }
            Game1.statusText = Lang.gen[0x3a] + " 85%";
            for (int n = 0; n < numDPlats; n++)
            {
                int num68 = DPlatX[n];
                int num69 = DPlatY[n];
                int maxTilesX = Game1.maxTilesX;
                int num71 = 10;
                if (num69 < (Game1.worldSurface + 50.0))
                {
                    num71 = 20;
                }
                for (int num72 = num69 - 5; num72 <= (num69 + 5); num72++)
                {
                    int num73 = num68;
                    int num74 = num68;
                    bool flag3 = false;
                    if (!Game1.tile[num73, num72].active())
                    {
                        goto Label_12E6;
                    }
                    flag3 = true;
                    goto Label_1336;
                Label_12C2:
                    num73--;
                    if (!Game1.tileDungeon[Game1.tile[num73, num72].type])
                    {
                        flag3 = true;
                    }
                Label_12E6:
                    if (!Game1.tile[num73, num72].active())
                    {
                        goto Label_12C2;
                    }
                    while (!Game1.tile[num74, num72].active())
                    {
                        num74++;
                        if (!Game1.tileDungeon[Game1.tile[num74, num72].type])
                        {
                            flag3 = true;
                        }
                    }
                Label_1336:
                    if (!flag3 && ((num74 - num73) <= num71))
                    {
                        bool flag4 = true;
                        int num75 = (num68 - (num71 / 2)) - 2;
                        int num76 = (num68 + (num71 / 2)) + 2;
                        int num77 = num72 - 5;
                        int num78 = num72 + 5;
                        for (int num79 = num75; num79 <= num76; num79++)
                        {
                            for (int num80 = num77; num80 <= num78; num80++)
                            {
                                if (Game1.tile[num79, num80].active() && (Game1.tile[num79, num80].type == 0x13))
                                {
                                    flag4 = false;
                                    break;
                                }
                            }
                        }
                        for (int num81 = num72 + 3; num81 >= (num72 - 5); num81--)
                        {
                            if (Game1.tile[num68, num81].active())
                            {
                                flag4 = false;
                                break;
                            }
                        }
                        if (flag4)
                        {
                            maxTilesX = num72;
                            break;
                        }
                    }
                }
                if ((maxTilesX > (num69 - 10)) && (maxTilesX < (num69 + 10)))
                {
                    int num82 = num68;
                    int num83 = maxTilesX;
                    int num84 = num68 + 1;
                    while (!Game1.tile[num82, num83].active())
                    {
                        Game1.tile[num82, num83].active(true);
                        Game1.tile[num82, num83].type = 0x13;
                        switch (num2)
                        {
                            case 7:
                                Game1.tile[num82, num83].frameY = 0x6c;
                                break;

                            case 8:
                                Game1.tile[num82, num83].frameY = 0x90;
                                break;

                            case 9:
                                Game1.tile[num82, num83].frameY = 0x7e;
                                break;
                        }
                        num82--;
                    }
                    while (!Game1.tile[num84, num83].active())
                    {
                        Game1.tile[num84, num83].active(true);
                        Game1.tile[num84, num83].type = 0x13;
                        switch (num2)
                        {
                            case 7:
                                Game1.tile[num84, num83].frameY = 0x6c;
                                break;

                            case 8:
                                Game1.tile[num84, num83].frameY = 0x90;
                                break;

                            case 9:
                                Game1.tile[num84, num83].frameY = 0x7e;
                                break;
                        }
                        num84++;
                    }
                }
            }
            for (int num85 = 0; num85 < 4; num85++)
            {
                bool flag5 = false;
                while (!flag5)
                {
                    int num86 = genRand.Next(dMinX, dMaxX);
                    int num87 = genRand.Next((int)Game1.worldSurface, dMaxY);
                    if (Game1.wallDungeon[Game1.tile[num86, num87].wall] && !Game1.tile[num86, num87].active())
                    {
                        int contain = 0;
                        int num89 = 0;
                        switch (num85)
                        {
                            case 0:
                                num89 = 0x17;
                                contain = 0x484;
                                break;

                            case 1:
                                if (!crimson)
                                {
                                    num89 = 0x18;
                                    contain = 0x623;
                                }
                                else
                                {
                                    num89 = 0x19;
                                    contain = 0x621;
                                }
                                break;

                            case 2:
                                num89 = 0x1a;
                                contain = 0x4ec;
                                break;

                            case 3:
                                num89 = 0x1b;
                                contain = 0x624;
                                break;
                        }
                        flag5 = AddBuriedChest(num86, num87, contain, false, num89);
                    }
                }
            }
            int[] numArray2 = new int[3];
            numArray2[0] = genRand.Next(9, 13);
            numArray2[1] = genRand.Next(9, 13);
            while (numArray2[1] == numArray2[0])
            {
                numArray2[1] = genRand.Next(9, 13);
            }
            numArray2[2] = genRand.Next(9, 13);
            while ((numArray2[2] == numArray2[0]) || (numArray2[2] == numArray2[1]))
            {
                numArray2[2] = genRand.Next(9, 13);
            }
            Game1.statusText = Lang.gen[0x3a] + " 90%";
            num19 = 0;
            num20 = 0x3e8;
            num21 = 0;
            while (num21 < (Game1.maxTilesX / 20))
            {
                num19++;
                int num90 = genRand.Next(dMinX, dMaxX);
                int num91 = genRand.Next(dMinY, dMaxY);
                bool flag6 = true;
                if (Game1.wallDungeon[Game1.tile[num90, num91].wall] && !Game1.tile[num90, num91].active())
                {
                    int num92 = 1;
                    if (genRand.Next(2) == 0)
                    {
                        num92 = -1;
                    }
                    while (flag6 && !Game1.tile[num90, num91].active())
                    {
                        num90 -= num92;
                        if ((num90 < 5) || (num90 > (Game1.maxTilesX - 5)))
                        {
                            flag6 = false;
                        }
                        else if (Game1.tile[num90, num91].active() && !Game1.tileDungeon[Game1.tile[num90, num91].type])
                        {
                            flag6 = false;
                        }
                    }
                    if (((flag6 && Game1.tile[num90, num91].active()) && (Game1.tileDungeon[Game1.tile[num90, num91].type] && Game1.tile[num90, num91 - 1].active())) && ((Game1.tileDungeon[Game1.tile[num90, num91 - 1].type] && Game1.tile[num90, num91 + 1].active()) && Game1.tileDungeon[Game1.tile[num90, num91 + 1].type]))
                    {
                        num90 += num92;
                        for (int num93 = num90 - 3; num93 <= (num90 + 3); num93++)
                        {
                            for (int num94 = num91 - 3; num94 <= (num91 + 3); num94++)
                            {
                                if (Game1.tile[num93, num94].active() && (Game1.tile[num93, num94].type == 0x13))
                                {
                                    flag6 = false;
                                    break;
                                }
                            }
                        }
                        if (flag6 && ((!Game1.tile[num90, num91 - 1].active() & !Game1.tile[num90, num91 - 2].active()) & !Game1.tile[num90, num91 - 3].active()))
                        {
                            int num95 = num90;
                            int num96 = num90;
                            while (((num95 > dMinX) && (num95 < dMaxX)) && ((!Game1.tile[num95, num91].active() && !Game1.tile[num95, num91 - 1].active()) && !Game1.tile[num95, num91 + 1].active()))
                            {
                                num95 += num92;
                            }
                            num95 = Math.Abs((int)(num90 - num95));
                            bool flag7 = false;
                            if (genRand.Next(2) == 0)
                            {
                                flag7 = true;
                            }
                            if (num95 > 5)
                            {
                                for (int num97 = genRand.Next(1, 4); num97 > 0; num97--)
                                {
                                    Game1.tile[num90, num91].active(true);
                                    Game1.tile[num90, num91].type = 0x13;
                                    if (Game1.tile[num90, num91].wall == numArray[0])
                                    {
                                        Game1.tile[num90, num91].frameY = (short)(0x12 * numArray2[0]);
                                    }
                                    if (Game1.tile[num90, num91].wall == numArray[1])
                                    {
                                        Game1.tile[num90, num91].frameY = (short)(0x12 * numArray2[1]);
                                    }
                                    if (Game1.tile[num90, num91].wall == numArray[2])
                                    {
                                        Game1.tile[num90, num91].frameY = (short)(0x12 * numArray2[2]);
                                    }
                                    if (flag7)
                                    {
                                        PlaceTile(num90, num91 - 1, 50, true, false, -1, 0);
                                        if ((genRand.Next(50) == 0) && (Game1.tile[num90, num91 - 1].type == 50))
                                        {
                                            Game1.tile[num90, num91 - 1].frameX = 90;
                                        }
                                    }
                                    num90 += num92;
                                }
                                num19 = 0;
                                num21++;
                                if (!flag7 && (genRand.Next(2) == 0))
                                {
                                    num90 = num96;
                                    num91--;
                                    int type = 0;
                                    if (genRand.Next(4) == 0)
                                    {
                                        type = 1;
                                    }
                                    if (type == 0)
                                    {
                                        type = 13;
                                    }
                                    else if (type == 1)
                                    {
                                        type = 0x31;
                                    }
                                    PlaceTile(num90, num91, type, true, false, -1, 0);
                                    if (Game1.tile[num90, num91].type == 13)
                                    {
                                        if (genRand.Next(2) == 0)
                                        {
                                            Game1.tile[num90, num91].frameX = 0x12;
                                        }
                                        else
                                        {
                                            Game1.tile[num90, num91].frameX = 0x24;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (num19 > num20)
                {
                    num19 = 0;
                    num21++;
                }
            }
            Game1.statusText = Lang.gen[0x3a] + " 95%";
            int num99 = 1;
            for (int num100 = 0; num100 < numDRooms; num100++)
            {
                int num101 = 0;
                while (num101 < 0x3e8)
                {
                    int num102 = (int)(dRoomSize[num100] * 0.4);
                    int num103 = dRoomX[num100] + genRand.Next(-num102, num102 + 1);
                    int num104 = dRoomY[num100] + genRand.Next(-num102, num102 + 1);
                    int num105 = 0;
                    int num106 = 2;
                    switch (num99)
                    {
                        case 1:
                            num105 = 0x149;
                            break;

                        case 2:
                            num105 = 0x9b;
                            break;

                        case 3:
                            num105 = 0x9c;
                            break;

                        case 4:
                            num105 = 0x9d;
                            break;

                        case 5:
                            num105 = 0xa3;
                            break;

                        case 6:
                            num105 = 0x71;
                            break;

                        case 7:
                            num105 = 0xcf5;
                            break;

                        case 8:
                            num105 = 0x147;
                            num106 = 0;
                            break;

                        default:
                            num105 = 0xa4;
                            num99 = 0;
                            break;
                    }
                    if (num104 < (Game1.worldSurface + 50.0))
                    {
                        num105 = 0x147;
                        num106 = 0;
                    }
                    if ((num105 == 0) && (genRand.Next(2) == 0))
                    {
                        num101 = 0x3e8;
                    }
                    else
                    {
                        if (AddBuriedChest(num103, num104, num105, false, num106))
                        {
                            num101 += 0x3e8;
                            num99++;
                        }
                        num101++;
                    }
                }
            }
            dMinX -= 0x19;
            dMaxX += 0x19;
            dMinY -= 0x19;
            dMaxY += 0x19;
            if (dMinX < 0)
            {
                dMinX = 0;
            }
            if (dMaxX > Game1.maxTilesX)
            {
                dMaxX = Game1.maxTilesX;
            }
            if (dMinY < 0)
            {
                dMinY = 0;
            }
            if (dMaxY > Game1.maxTilesY)
            {
                dMaxY = Game1.maxTilesY;
            }
            num19 = 0;
            num20 = 0x3e8;
            num21 = 0;
            int[] numArray3 = new int[3];
            numArray3[0] = genRand.Next(7);
            numArray3[1] = genRand.Next(7);
            while (numArray3[1] == numArray3[0])
            {
                numArray3[1] = genRand.Next(7);
            }
            numArray3[2] = genRand.Next(7);
            while ((numArray3[2] == numArray3[0]) || (numArray3[2] == numArray3[1]))
            {
                numArray3[2] = genRand.Next(7);
            }
            while (num21 < (Game1.maxTilesX / 150))
            {
                num19++;
                int num107 = genRand.Next(dMinX, dMaxX);
                int num108 = genRand.Next(dMinY, dMaxY);
                if (Game1.wallDungeon[Game1.tile[num107, num108].wall])
                {
                    for (int num109 = num108; num109 > dMinY; num109--)
                    {
                        if (Game1.tile[num107, num109 - 1].active() && (Game1.tile[num107, num109 - 1].type == num))
                        {
                            bool flag8 = false;
                            for (int num110 = num107 - 15; num110 < (num107 + 15); num110++)
                            {
                                for (int num111 = num109 - 15; num111 < (num109 + 15); num111++)
                                {
                                    if ((((num110 > 0) && (num110 < Game1.maxTilesX)) && ((num111 > 0) && (num111 < Game1.maxTilesY))) && (Game1.tile[num110, num111].type == 0x2a))
                                    {
                                        flag8 = true;
                                        break;
                                    }
                                }
                            }
                            if ((Game1.tile[num107 - 1, num109].active() || Game1.tile[num107 + 1, num109].active()) || ((Game1.tile[num107 - 1, num109 + 1].active() || Game1.tile[num107 + 1, num109 + 1].active()) || Game1.tile[num107, num109 + 2].active()))
                            {
                                flag8 = true;
                            }
                            if (!flag8)
                            {
                                int num112 = numArray3[0];
                                if (Game1.tile[num107, num109].wall == numArray[1])
                                {
                                    num112 = numArray3[1];
                                }
                                if (Game1.tile[num107, num109].wall == numArray[2])
                                {
                                    num112 = numArray3[2];
                                }
                                Place1x2Top(num107, num109, 0x2a, num112);
                                if (Game1.tile[num107, num109].type == 0x2a)
                                {
                                    num19 = 0;
                                    num21++;
                                    for (int num113 = 0; num113 < 0x3e8; num113++)
                                    {
                                        int num114 = num107 + genRand.Next(-12, 13);
                                        int num115 = num109 + genRand.Next(3, 0x15);
                                        if (((!Game1.tile[num114, num115].active() && !Game1.tile[num114, num115 + 1].active()) && ((Game1.tile[num114 - 1, num115].type != 0x30) && (Game1.tile[num114 + 1, num115].type != 0x30))) && Collision.CanHit(new Vector2((float)(num114 * 0x10), (float)(num115 * 0x10)), 0x10, 0x10, new Vector2((float)(num107 * 0x10), (float)((num109 * 0x10) + 1)), 0x10, 0x10))
                                        {
                                            if (((SolidTile(num114 - 1, num115) && (Game1.tile[num114 - 1, num115].type != 10)) || (SolidTile(num114 + 1, num115) && (Game1.tile[num114 + 1, num115].type != 10))) || SolidTile(num114, num115 + 1))
                                            {
                                                PlaceTile(num114, num115, 0x88, true, false, -1, 0);
                                            }
                                            if (Game1.tile[num114, num115].active())
                                            {
                                                while ((num114 != num107) || (num115 != num109))
                                                {
                                                    Game1.tile[num114, num115].k_SetWireFlags(k_WireFlags.WIRE_RED, true);
                                                    if (num114 > num107)
                                                    {
                                                        num114--;
                                                    }
                                                    if (num114 < num107)
                                                    {
                                                        num114++;
                                                    }
                                                    Game1.tile[num114, num115].k_SetWireFlags(k_WireFlags.WIRE_RED, true);
													if (num115 > num109)
                                                    {
                                                        num115--;
                                                    }
                                                    if (num115 < num109)
                                                    {
                                                        num115++;
                                                    }
                                                    Game1.tile[num114, num115].k_SetWireFlags(k_WireFlags.WIRE_RED, true);
												}
                                                if (genRand.Next(3) > 0)
                                                {
                                                    Game1.tile[num107, num109].frameX = 0x12;
                                                    Game1.tile[num107, num109 + 1].frameX = 0x12;
                                                }
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        }
                    }
                }
                if (num19 > num20)
                {
                    num21++;
                    num19 = 0;
                }
            }
            num19 = 0;
            num20 = 0x3e8;
            num21 = 0;
            while (num21 < (Game1.maxTilesX / 500))
            {
                num19++;
                int num116 = genRand.Next(dMinX, dMaxX);
                int num117 = genRand.Next(dMinY, dMaxY);
                while (num117 < Game1.worldSurface)
                {
                    num117 = genRand.Next(dMinY, dMaxY);
                }
                if (Game1.wallDungeon[Game1.tile[num116, num117].wall] && placeTrap(num116, num117, 0))
                {
                    num19 = num20;
                }
                if (num19 > num20)
                {
                    num21++;
                    num19 = 0;
                }
            }
            float num118 = (2000f * Game1.maxTilesX) / 4200f;
            int num119 = 1 + (Game1.maxTilesX / 0x1068);
            int num120 = 1 + (Game1.maxTilesX / 0x1068);
            for (int num121 = 0; num121 < num118; num121++)
            {
                if ((num119 > 0) || (num120 > 0))
                {
                    num121--;
                }
                int num122 = genRand.Next(dMinX, dMaxX);
                int num123 = genRand.Next(((int)Game1.worldSurface) + 10, dMaxY);
                while (!Game1.wallDungeon[Game1.tile[num122, num123].wall] || Game1.tile[num122, num123].active())
                {
                    num122 = genRand.Next(dMinX, dMaxX);
                    num123 = genRand.Next(((int)Game1.worldSurface) + 10, dMaxY);
                }
                if (Game1.wallDungeon[Game1.tile[num122, num123].wall] && !Game1.tile[num122, num123].active())
                {
                    while (!SolidTile(num122, num123) && (num123 < (Game1.maxTilesY - 200)))
                    {
                        num123++;
                    }
                    num123--;
                    int num124 = num122;
                    int num125 = num122;
                    while (!Game1.tile[num124, num123].active() && SolidTile(num124, num123 + 1))
                    {
                        num124--;
                    }
                    num124++;
                    while (!Game1.tile[num125, num123].active() && SolidTile(num125, num123 + 1))
                    {
                        num125++;
                    }
                    num125--;
                    int num126 = num125 - num124;
                    int num127 = (num125 + num124) / 2;
                    if ((!Game1.tile[num127, num123].active() && Game1.wallDungeon[Game1.tile[num127, num123].wall]) && (SolidTile(num127, num123 + 1) && (Game1.tile[num127, num123 + 1].type != 0x30)))
                    {
                        int num128 = 13;
                        int num129 = 10;
                        int num130 = 11;
                        int num131 = 1;
                        int num132 = 0x2e;
                        int num133 = 1;
                        int num134 = 5;
                        int num135 = 11;
                        int num136 = 5;
                        int num137 = 6;
                        int num138 = 0x15;
                        int num139 = 0x16;
                        int num140 = 0x18;
                        switch (num2)
                        {
                            case 8:
                                num128 = 14;
                                num129 = 11;
                                num130 = 12;
                                num131 = 2;
                                num132 = 0x2f;
                                num133 = 2;
                                num134 = 6;
                                num135 = 12;
                                num136 = 6;
                                num137 = 7;
                                num138 = 0x16;
                                num139 = 0x17;
                                num140 = 0x19;
                                break;

                            case 9:
                                num128 = 15;
                                num129 = 12;
                                num130 = 13;
                                num131 = 3;
                                num132 = 0x30;
                                num133 = 3;
                                num134 = 7;
                                num135 = 13;
                                num136 = 7;
                                num137 = 8;
                                num138 = 0x17;
                                num139 = 0x18;
                                num140 = 0x1a;
                                break;
                        }
                        if ((Game1.tile[num127, num123].wall >= 0x5e) && (Game1.tile[num127, num123].wall <= 0x69))
                        {
                            num128 = 0x11;
                            num129 = 14;
                            num130 = 15;
                            num131 = -1;
                            num132 = -1;
                            num133 = 5;
                            num134 = -1;
                            num135 = -1;
                            num136 = -1;
                            num137 = -1;
                            num138 = -1;
                            num139 = -1;
                            num140 = -1;
                        }
                        int num141 = genRand.Next(12);
                        if (((num141 == 10) || (num141 == 11)) && (genRand.Next(4) != 0))
                        {
                            num141 = genRand.Next(12);
                        }
                        while (((((num141 == 2) && (num132 == -1)) || ((num141 == 5) && (num134 == -1))) || (((num141 == 6) && (num135 == -1)) || ((num141 == 7) && (num136 == -1)))) || ((((num141 == 8) && (num137 == -1)) || ((num141 == 9) && (num138 == -1))) || (((num141 == 10) && (num139 == -1)) || ((num141 == 11) && (num140 == -1)))))
                        {
                            num141 = genRand.Next(9);
                        }
                        int num142 = 0;
                        int num143 = 0;
                        switch (num141)
                        {
                            case 0:
                                num142 = 5;
                                num143 = 4;
                                break;

                            case 1:
                                num142 = 4;
                                num143 = 3;
                                break;

                            case 2:
                                num142 = 3;
                                num143 = 5;
                                break;

                            case 3:
                                num142 = 4;
                                num143 = 6;
                                break;

                            case 4:
                                num142 = 3;
                                num143 = 3;
                                break;

                            case 5:
                                num142 = 5;
                                num143 = 3;
                                break;

                            case 6:
                                num142 = 5;
                                num143 = 4;
                                break;

                            case 7:
                                num142 = 5;
                                num143 = 4;
                                break;

                            case 8:
                                num142 = 5;
                                num143 = 4;
                                break;

                            case 9:
                                num142 = 5;
                                num143 = 3;
                                break;

                            case 10:
                                num142 = 2;
                                num143 = 4;
                                break;

                            case 11:
                                num142 = 3;
                                num143 = 3;
                                break;
                        }
                        for (int num144 = num127 - num142; num144 <= (num127 + num142); num144++)
                        {
                            for (int num145 = num123 - num143; num145 <= num123; num145++)
                            {
                                if (Game1.tile[num144, num145].active())
                                {
                                    num141 = -1;
                                    break;
                                }
                            }
                        }
                        if (num126 < (num142 * 1.75))
                        {
                            num141 = -1;
                        }
                        if ((num119 > 0) || (num120 > 0))
                        {
                            if (num119 > 0)
                            {
                                PlaceTile(num127, num123, 0x163, true, false, -1, 0);
                                if (Game1.tile[num127, num123].type == 0x163)
                                {
                                    num119--;
                                }
                            }
                            else if (num120 > 0)
                            {
                                PlaceTile(num127, num123, 0x162, true, false, -1, 0);
                                if (Game1.tile[num127, num123].type == 0x162)
                                {
                                    num120--;
                                }
                            }
                        }
                        else
                        {
                            switch (num141)
                            {
                                case 0:
                                    PlaceTile(num127, num123, 14, true, false, -1, num129);
                                    if (Game1.tile[num127, num123].active())
                                    {
                                        if (!Game1.tile[num127 - 2, num123].active())
                                        {
                                            PlaceTile(num127 - 2, num123, 15, true, false, -1, num128);
                                            if (Game1.tile[num127 - 2, num123].active())
                                            {
                                                Tile tile1 = Game1.tile[num127 - 2, num123];
                                                tile1.frameX = (short)(tile1.frameX + 0x12);
                                                Tile tile2 = Game1.tile[num127 - 2, num123 - 1];
                                                tile2.frameX = (short)(tile2.frameX + 0x12);
                                            }
                                        }
                                        if (!Game1.tile[num127 + 2, num123].active())
                                        {
                                            PlaceTile(num127 + 2, num123, 15, true, false, -1, num128);
                                        }
                                    }
                                    for (int num146 = num127 - 1; num146 <= (num127 + 1); num146++)
                                    {
                                        if ((genRand.Next(2) == 0) && !Game1.tile[num146, num123 - 2].active())
                                        {
                                            int num147 = genRand.Next(5);
                                            if (((num131 != -1) && (num147 <= 1)) && !Game1.tileLighted[Game1.tile[num146 - 1, num123 - 2].type])
                                            {
                                                PlaceTile(num146, num123 - 2, 0x21, true, false, -1, num131);
                                            }
                                            if ((num147 == 2) && !Game1.tileLighted[Game1.tile[num146 - 1, num123 - 2].type])
                                            {
                                                PlaceTile(num146, num123 - 2, 0x31, true, false, -1, 0);
                                            }
                                            if (num147 == 3)
                                            {
                                                PlaceTile(num146, num123 - 2, 50, true, false, -1, 0);
                                            }
                                            if (num147 == 4)
                                            {
                                                PlaceTile(num146, num123 - 2, 0x67, true, false, -1, 0);
                                            }
                                        }
                                    }
                                    break;

                                case 1:
                                    PlaceTile(num127, num123, 0x12, true, false, -1, num130);
                                    if (Game1.tile[num127, num123].active())
                                    {
                                        if (genRand.Next(2) == 0)
                                        {
                                            if (!Game1.tile[num127 - 1, num123].active())
                                            {
                                                PlaceTile(num127 - 1, num123, 15, true, false, -1, num128);
                                                if (Game1.tile[num127 - 1, num123].active())
                                                {
                                                    Tile tile3 = Game1.tile[num127 - 1, num123];
                                                    tile3.frameX = (short)(tile3.frameX + 0x12);
                                                    Tile tile4 = Game1.tile[num127 - 1, num123 - 1];
                                                    tile4.frameX = (short)(tile4.frameX + 0x12);
                                                }
                                            }
                                        }
                                        else if (!Game1.tile[num127 + 2, num123].active())
                                        {
                                            PlaceTile(num127 + 2, num123, 15, true, false, -1, num128);
                                        }
                                        for (int num148 = num127; num148 <= (num127 + 1); num148++)
                                        {
                                            if ((genRand.Next(2) == 0) && !Game1.tile[num148, num123 - 1].active())
                                            {
                                                int num149 = genRand.Next(5);
                                                if (((num131 != -1) && (num149 <= 1)) && !Game1.tileLighted[Game1.tile[num148 - 1, num123 - 1].type])
                                                {
                                                    PlaceTile(num148, num123 - 1, 0x21, true, false, -1, num131);
                                                }
                                                if ((num149 == 2) && !Game1.tileLighted[Game1.tile[num148 - 1, num123 - 1].type])
                                                {
                                                    PlaceTile(num148, num123 - 1, 0x31, true, false, -1, 0);
                                                }
                                                if (num149 == 3)
                                                {
                                                    PlaceTile(num148, num123 - 1, 50, true, false, -1, 0);
                                                }
                                                if (num149 == 4)
                                                {
                                                    PlaceTile(num148, num123 - 1, 0x67, true, false, -1, 0);
                                                }
                                            }
                                        }
                                    }
                                    break;

                                case 2:
                                    PlaceTile(num127, num123, 0x69, true, false, -1, num132);
                                    break;

                                case 3:
                                    PlaceTile(num127, num123, 0x65, true, false, -1, num133);
                                    break;

                                case 4:
                                    if (genRand.Next(2) == 0)
                                    {
                                        PlaceTile(num127, num123, 15, true, false, -1, num128);
                                        Tile tile5 = Game1.tile[num127, num123];
                                        tile5.frameX = (short)(tile5.frameX + 0x12);
                                        Tile tile6 = Game1.tile[num127, num123 - 1];
                                        tile6.frameX = (short)(tile6.frameX + 0x12);
                                    }
                                    else
                                    {
                                        PlaceTile(num127, num123, 15, true, false, -1, num128);
                                    }
                                    break;

                                case 5:
                                    if (genRand.Next(2) == 0)
                                    {
                                        Place4x2(num127, num123, 0x4f, 1, num134);
                                    }
                                    else
                                    {
                                        Place4x2(num127, num123, 0x4f, -1, num134);
                                    }
                                    break;

                                case 6:
                                    PlaceTile(num127, num123, 0x57, true, false, -1, num135);
                                    break;

                                case 7:
                                    PlaceTile(num127, num123, 0x58, true, false, -1, num136);
                                    break;

                                case 8:
                                    PlaceTile(num127, num123, 0x59, true, false, -1, num137);
                                    break;

                                case 9:
                                    if (genRand.Next(2) == 0)
                                    {
                                        Place4x2(num127, num123, 90, 1, num138);
                                    }
                                    else
                                    {
                                        Place4x2(num127, num123, 90, -1, num138);
                                    }
                                    break;

                                case 10:
                                    PlaceTile(num127, num123, 0x5d, true, false, -1, num140);
                                    break;

                                case 11:
                                    PlaceTile(num127, num123, 100, true, false, -1, num139);
                                    break;
                            }
                        }
                    }
                }
            }
            num118 = 420000f / ((float)Game1.maxTilesX);
            for (int num150 = 0; num150 < num118; num150++)
            {
                int num151 = genRand.Next(dMinX, dMaxX);
                int num152 = genRand.Next((int)Game1.worldSurface, dMaxY);
                while (!Game1.wallDungeon[Game1.tile[num151, num152].wall] || Game1.tile[num151, num152].active())
                {
                    num151 = genRand.Next(dMinX, dMaxX);
                    num152 = genRand.Next((int)Game1.worldSurface, dMaxY);
                }
                int num153 = num151;
                int num154 = num151;
                int num155 = num152;
                int num156 = num152;
                int num157 = 0;
                int num158 = 0;
                for (int num159 = 0; num159 < 2; num159++)
                {
                    num153 = num151;
                    num154 = num151;
                    while (!Game1.tile[num153, num152].active() && Game1.wallDungeon[Game1.tile[num153, num152].wall])
                    {
                        num153--;
                    }
                    num153++;
                    while (!Game1.tile[num154, num152].active() && Game1.wallDungeon[Game1.tile[num154, num152].wall])
                    {
                        num154++;
                    }
                    num154--;
                    num151 = (num153 + num154) / 2;
                    num155 = num152;
                    num156 = num152;
                    while (!Game1.tile[num151, num155].active() && Game1.wallDungeon[Game1.tile[num151, num155].wall])
                    {
                        num155--;
                    }
                    num155++;
                    while (!Game1.tile[num151, num156].active() && Game1.wallDungeon[Game1.tile[num151, num156].wall])
                    {
                        num156++;
                    }
                    num156--;
                    num152 = (num155 + num156) / 2;
                }
                num153 = num151;
                num154 = num151;
                while ((!Game1.tile[num153, num152].active() && !Game1.tile[num153, num152 - 1].active()) && !Game1.tile[num153, num152 + 1].active())
                {
                    num153--;
                }
                num153++;
                while ((!Game1.tile[num154, num152].active() && !Game1.tile[num154, num152 - 1].active()) && !Game1.tile[num154, num152 + 1].active())
                {
                    num154++;
                }
                num154--;
                num155 = num152;
                num156 = num152;
                while ((!Game1.tile[num151, num155].active() && !Game1.tile[num151 - 1, num155].active()) && !Game1.tile[num151 + 1, num155].active())
                {
                    num155--;
                }
                num155++;
                while ((!Game1.tile[num151, num156].active() && !Game1.tile[num151 - 1, num156].active()) && !Game1.tile[num151 + 1, num156].active())
                {
                    num156++;
                }
                num156--;
                num151 = (num153 + num154) / 2;
                num152 = (num155 + num156) / 2;
                num157 = num154 - num153;
                num158 = num156 - num155;
                if ((num157 > 7) && (num158 > 5))
                {
                    bool[] flagArray = new bool[3];
                    flagArray[0] = true;
                    if ((num157 > (num158 * 3)) && (num157 > 0x15))
                    {
                        flagArray[1] = true;
                    }
                    if ((num158 > (num157 * 3)) && (num158 > 0x15))
                    {
                        flagArray[2] = true;
                    }
                    int index = genRand.Next(3);
                    if (Game1.tile[num151, num152].wall == numArray[0])
                    {
                        index = 0;
                    }
                    while (!flagArray[index])
                    {
                        index = genRand.Next(3);
                    }
                    if (nearPicture2(num151, num152))
                    {
                        index = -1;
                    }
                    if (index == 0)
                    {
                        Vector2 vector = randPictureTile();
                        if (Game1.tile[num151, num152].wall != numArray[0])
                        {
                            vector = randBoneTile();
                        }
                        int num161 = (int)vector.X;
                        int num162 = (int)vector.Y;
                        if (!nearPicture(num151, num152))
                        {
                            PlaceTile(num151, num152, num161, true, false, -1, num162);
                        }
                        continue;
                    }
                    if (index == 1)
                    {
                        Vector2 vector2 = randPictureTile();
                        if (Game1.tile[num151, num152].wall != numArray[0])
                        {
                            vector2 = randBoneTile();
                        }
                        int num163 = (int)vector2.X;
                        int num164 = (int)vector2.Y;
                        if (!Game1.tile[num151, num152].active())
                        {
                            PlaceTile(num151, num152, num163, true, false, -1, num164);
                        }
                        int num165 = num151;
                        int num166 = num152;
                        int num167 = num152;
                        for (int num168 = 0; num168 < 2; num168++)
                        {
                            num151 += 7;
                            num155 = num167;
                            num156 = num167;
                            while ((!Game1.tile[num151, num155].active() && !Game1.tile[num151 - 1, num155].active()) && !Game1.tile[num151 + 1, num155].active())
                            {
                                num155--;
                            }
                            num155++;
                            while ((!Game1.tile[num151, num156].active() && !Game1.tile[num151 - 1, num156].active()) && !Game1.tile[num151 + 1, num156].active())
                            {
                                num156++;
                            }
                            num156--;
                            num167 = (num155 + num156) / 2;
                            vector2 = randPictureTile();
                            if (Game1.tile[num151, num167].wall != numArray[0])
                            {
                                vector2 = randBoneTile();
                            }
                            num163 = (int)vector2.X;
                            num164 = (int)vector2.Y;
                            if ((Math.Abs((int)(num166 - num167)) >= 4) || nearPicture(num151, num167))
                            {
                                break;
                            }
                            PlaceTile(num151, num167, num163, true, false, -1, num164);
                        }
                        num167 = num152;
                        num151 = num165;
                        for (int num169 = 0; num169 < 2; num169++)
                        {
                            num151 -= 7;
                            num155 = num167;
                            num156 = num167;
                            while ((!Game1.tile[num151, num155].active() && !Game1.tile[num151 - 1, num155].active()) && !Game1.tile[num151 + 1, num155].active())
                            {
                                num155--;
                            }
                            num155++;
                            while ((!Game1.tile[num151, num156].active() && !Game1.tile[num151 - 1, num156].active()) && !Game1.tile[num151 + 1, num156].active())
                            {
                                num156++;
                            }
                            num156--;
                            num167 = (num155 + num156) / 2;
                            vector2 = randPictureTile();
                            if (Game1.tile[num151, num167].wall != numArray[0])
                            {
                                vector2 = randBoneTile();
                            }
                            num163 = (int)vector2.X;
                            num164 = (int)vector2.Y;
                            if ((Math.Abs((int)(num166 - num167)) >= 4) || nearPicture(num151, num167))
                            {
                                break;
                            }
                            PlaceTile(num151, num167, num163, true, false, -1, num164);
                        }
                        continue;
                    }
                    if (index == 2)
                    {
                        Vector2 vector3 = randPictureTile();
                        if (Game1.tile[num151, num152].wall != numArray[0])
                        {
                            vector3 = randBoneTile();
                        }
                        int num170 = (int)vector3.X;
                        int num171 = (int)vector3.Y;
                        if (!Game1.tile[num151, num152].active())
                        {
                            PlaceTile(num151, num152, num170, true, false, -1, num171);
                        }
                        int num172 = num152;
                        int num173 = num151;
                        int num174 = num151;
                        for (int num175 = 0; num175 < 3; num175++)
                        {
                            num152 += 7;
                            num153 = num174;
                            num154 = num174;
                            while ((!Game1.tile[num153, num152].active() && !Game1.tile[num153, num152 - 1].active()) && !Game1.tile[num153, num152 + 1].active())
                            {
                                num153--;
                            }
                            num153++;
                            while ((!Game1.tile[num154, num152].active() && !Game1.tile[num154, num152 - 1].active()) && !Game1.tile[num154, num152 + 1].active())
                            {
                                num154++;
                            }
                            num154--;
                            num174 = (num153 + num154) / 2;
                            vector3 = randPictureTile();
                            if (Game1.tile[num174, num152].wall != numArray[0])
                            {
                                vector3 = randBoneTile();
                            }
                            num170 = (int)vector3.X;
                            num171 = (int)vector3.Y;
                            if ((Math.Abs((int)(num173 - num174)) >= 4) || nearPicture(num174, num152))
                            {
                                break;
                            }
                            PlaceTile(num174, num152, num170, true, false, -1, num171);
                        }
                        num174 = num151;
                        num152 = num172;
                        for (int num176 = 0; num176 < 3; num176++)
                        {
                            num152 -= 7;
                            num153 = num174;
                            num154 = num174;
                            while ((!Game1.tile[num153, num152].active() && !Game1.tile[num153, num152 - 1].active()) && !Game1.tile[num153, num152 + 1].active())
                            {
                                num153--;
                            }
                            num153++;
                            while ((!Game1.tile[num154, num152].active() && !Game1.tile[num154, num152 - 1].active()) && !Game1.tile[num154, num152 + 1].active())
                            {
                                num154++;
                            }
                            num154--;
                            num174 = (num153 + num154) / 2;
                            vector3 = randPictureTile();
                            if (Game1.tile[num174, num152].wall != numArray[0])
                            {
                                vector3 = randBoneTile();
                            }
                            num170 = (int)vector3.X;
                            num171 = (int)vector3.Y;
                            if ((Math.Abs((int)(num173 - num174)) >= 4) || nearPicture(num174, num152))
                            {
                                break;
                            }
                            PlaceTile(num174, num152, num170, true, false, -1, num171);
                        }
                    }
                }
            }
            num118 = 840000f / ((float)Game1.maxTilesX);
            for (int num177 = 0; num177 < num118; num177++)
            {
                int num178 = genRand.Next(dMinX, dMaxX);
                int num179 = genRand.Next(dMinY, dMaxY);
                while (!Game1.wallDungeon[Game1.tile[num178, num179].wall] || Game1.tile[num178, num179].active())
                {
                    num178 = genRand.Next(dMinX, dMaxX);
                    num179 = genRand.Next(dMinY, dMaxY);
                }
                while (!SolidTile(num178, num179) && (num179 > 10))
                {
                    num179--;
                }
                num179++;
                if (((Game1.wallDungeon[Game1.tile[num178, num179].wall] && (Game1.tile[num178, num179 - 1].type != 0x30)) && (!Game1.tile[num178, num179].active() && !Game1.tile[num178, num179 + 1].active())) && (!Game1.tile[num178, num179 + 2].active() && !Game1.tile[num178, num179 + 3].active()))
                {
                    bool flag9 = true;
                    for (int num180 = num178 - 1; num180 <= (num178 + 1); num180++)
                    {
                        for (int num181 = num179; num181 <= (num179 + 3); num181++)
                        {
                            if (Game1.tile[num180, num181].active() && (((Game1.tile[num180, num181].type == 10) || (Game1.tile[num180, num181].type == 11)) || (Game1.tile[num180, num181].type == 0x5b)))
                            {
                                flag9 = false;
                            }
                        }
                    }
                    if (flag9)
                    {
                        int num182 = 10;
                        if (Game1.tile[num178, num179].wall == numArray[1])
                        {
                            num182 = 12;
                        }
                        if (Game1.tile[num178, num179].wall == numArray[2])
                        {
                            num182 = 14;
                        }
                        num182 += genRand.Next(2);
                        PlaceTile(num178, num179, 0x5b, true, false, -1, num182);
                    }
                }
            }
        }

        public static void makeTemple(int x, int y)
        {
            Rectangle rectangle3;
            int num100;
            int num101;
            float num106;
            Rectangle[] rectangleArray = new Rectangle[40];
            float num = Game1.maxTilesX / 0x1068;
            int maxValue = genRand.Next((int)(num * 10f), (int)(num * 16f));
            int num3 = 1;
            if (genRand.Next(2) == 0)
            {
                num3 = -1;
            }
            int num4 = num3;
            int num5 = x;
            int num6 = y;
            int num7 = x;
            int num8 = y;
            int num9 = genRand.Next(1, 3);
            int num10 = 0;
            for (int i = 0; i < maxValue; i++)
            {
                num10++;
                int num12 = num3;
                int num13 = num7;
                int num14 = num8;
                bool flag = true;
                int width = 0;
                int height = 0;
                int num17 = -10;
                Rectangle rectangle = new Rectangle(num13 - (width / 2), num14 - (height / 2), width, height);
                while (flag)
                {
                    num13 = num7;
                    num14 = num8;
                    width = genRand.Next(0x19, 50);
                    height = genRand.Next(20, 0x23);
                    if (height > width)
                    {
                        height = width;
                    }
                    if (i == (maxValue - 1))
                    {
                        width = genRand.Next(0x37, 0x41);
                        height = genRand.Next(0x2d, 50);
                        if (height > width)
                        {
                            height = width;
                        }
                        width = (int)(width * 1.6);
                        height = (int)(height * 1.35);
                        num14 += genRand.Next(5, 10);
                    }
                    if (num10 > num9)
                    {
                        num14 += genRand.Next(height + 1, height + 3) + num17;
                        num13 += genRand.Next(-5, 6);
                        num12 = num3 * -1;
                    }
                    else
                    {
                        num13 += (genRand.Next(width + 1, width + 3) + num17) * num12;
                        num14 += genRand.Next(-5, 6);
                    }
                    flag = false;
                    rectangle = new Rectangle(num13 - (width / 2), num14 - (height / 2), width, height);
                    for (int num18 = 0; num18 < i; num18++)
                    {
                        if (rectangle.Intersects(rectangleArray[num18]))
                        {
                            flag = true;
                        }
                        if (genRand.Next(100) == 0)
                        {
                            num17++;
                        }
                    }
                }
                if (num10 > num9)
                {
                    num9++;
                    num10 = 1;
                }
                rectangleArray[i] = rectangle;
                num3 = num12;
                num7 = num13;
                num8 = num14;
            }
            for (int j = 0; j < maxValue; j++)
            {
                for (int num20 = 0; num20 < 2; num20++)
                {
                    for (int num21 = 0; num21 < maxValue; num21++)
                    {
                        for (int num22 = 0; num22 < 2; num22++)
                        {
                            int num23 = rectangleArray[j].X;
                            if (num20 == 1)
                            {
                                num23 += rectangleArray[j].Width - 1;
                            }
                            int num24 = rectangleArray[j].Y;
                            int num25 = num24 + rectangleArray[j].Height;
                            int num26 = rectangleArray[num21].X;
                            if (num22 == 1)
                            {
                                num26 += rectangleArray[num21].Width - 1;
                            }
                            int num27 = rectangleArray[num21].Y;
                            int num28 = num27 + rectangleArray[num21].Height;
                            while (((num23 != num26) || (num24 != num27)) || (num25 != num28))
                            {
                                if (num23 < num26)
                                {
                                    num23++;
                                }
                                if (num23 > num26)
                                {
                                    num23--;
                                }
                                if (num24 < num27)
                                {
                                    num24++;
                                }
                                if (num24 > num27)
                                {
                                    num24--;
                                }
                                if (num25 < num28)
                                {
                                    num25++;
                                }
                                if (num25 > num28)
                                {
                                    num25--;
                                }
                                int num29 = num23;
                                for (int num30 = num24; num30 < num25; num30++)
                                {
                                    Game1.tile[num29, num30].active(true);
                                    Game1.tile[num29, num30].type = 0xe2;
                                    Game1.tile[num29, num30].liquid = 0;
                                    Game1.tile[num29, num30].slope(0);
                                    Game1.tile[num29, num30].halfBrick(false);
                                }
                            }
                        }
                    }
                }
            }
            for (int k = 0; k < maxValue; k++)
            {
                if (genRand.Next(1) == 0)
                {
                    for (int num33 = rectangleArray[k].X; num33 < (rectangleArray[k].X + rectangleArray[k].Width); num33++)
                    {
                        for (int num34 = rectangleArray[k].Y; num34 < (rectangleArray[k].Y + rectangleArray[k].Height); num34++)
                        {
                            Game1.tile[num33, num34].active(true);
                            Game1.tile[num33, num34].type = 0xe2;
                            Game1.tile[num33, num34].liquid = 0;
                            Game1.tile[num33, num34].slope(0);
                            Game1.tile[num33, num34].halfBrick(false);
                        }
                    }
                    int num35 = rectangleArray[k].X;
                    int num36 = num35 + rectangleArray[k].Width;
                    int num37 = rectangleArray[k].Y;
                    int num38 = num37 + rectangleArray[k].Height;
                    num35 += genRand.Next(3, 8);
                    num36 -= genRand.Next(3, 8);
                    num37 += genRand.Next(3, 8);
                    num38 -= genRand.Next(3, 8);
                    int num39 = num35;
                    int num40 = num36;
                    int num41 = num37;
                    int num42 = num38;
                    int num43 = (num35 + num36) / 2;
                    int num44 = (num37 + num38) / 2;
                    for (int num45 = num35; num45 < num36; num45++)
                    {
                        for (int num46 = num37; num46 < num38; num46++)
                        {
                            if (genRand.Next(20) == 0)
                            {
                                num41 += genRand.Next(-1, 2);
                            }
                            if (genRand.Next(20) == 0)
                            {
                                num42 += genRand.Next(-1, 2);
                            }
                            if (genRand.Next(20) == 0)
                            {
                                num39 += genRand.Next(-1, 2);
                            }
                            if (genRand.Next(20) == 0)
                            {
                                num40 += genRand.Next(-1, 2);
                            }
                            if (num39 < num35)
                            {
                                num39 = num35;
                            }
                            if (num40 > num36)
                            {
                                num40 = num36;
                            }
                            if (num41 < num37)
                            {
                                num41 = num37;
                            }
                            if (num42 > num38)
                            {
                                num42 = num38;
                            }
                            if (num39 > num43)
                            {
                                num39 = num43;
                            }
                            if (num40 < num43)
                            {
                                num40 = num43;
                            }
                            if (num41 > num44)
                            {
                                num41 = num44;
                            }
                            if (num42 < num44)
                            {
                                num42 = num44;
                            }
                            if (((num45 >= num39) && ((num45 < num40) & (num46 >= num41))) && (num46 <= num42))
                            {
                                Game1.tile[num45, num46].active(false);
                                Game1.tile[num45, num46].wall = 0x57;
                            }
                        }
                    }
                    for (int num47 = num38; num47 > num37; num47--)
                    {
                        for (int num48 = num36; num48 > num35; num48--)
                        {
                            if (genRand.Next(20) == 0)
                            {
                                num41 += genRand.Next(-1, 2);
                            }
                            if (genRand.Next(20) == 0)
                            {
                                num42 += genRand.Next(-1, 2);
                            }
                            if (genRand.Next(20) == 0)
                            {
                                num39 += genRand.Next(-1, 2);
                            }
                            if (genRand.Next(20) == 0)
                            {
                                num40 += genRand.Next(-1, 2);
                            }
                            if (num39 < num35)
                            {
                                num39 = num35;
                            }
                            if (num40 > num36)
                            {
                                num40 = num36;
                            }
                            if (num41 < num37)
                            {
                                num41 = num37;
                            }
                            if (num42 > num38)
                            {
                                num42 = num38;
                            }
                            if (num39 > num43)
                            {
                                num39 = num43;
                            }
                            if (num40 < num43)
                            {
                                num40 = num43;
                            }
                            if (num41 > num44)
                            {
                                num41 = num44;
                            }
                            if (num42 < num44)
                            {
                                num42 = num44;
                            }
                            if (((num48 >= num39) && ((num48 < num40) & (num47 >= num41))) && (num47 <= num42))
                            {
                                Game1.tile[num48, num47].active(false);
                                Game1.tile[num48, num47].wall = 0x57;
                            }
                        }
                    }
                }
            }
            Vector2 templePath = new Vector2((float)num5, (float)num6);
            for (int m = 0; m < maxValue; m++)
            {
                Rectangle rectangle2 = rectangleArray[m];
                rectangle2.X += 8;
                rectangle2.Y += 8;
                rectangle2.Width -= 0x10;
                rectangle2.Height -= 0x10;
                bool flag2 = true;
                while (flag2)
                {
                    int destX = genRand.Next(rectangle2.X, rectangle2.X + rectangle2.Width);
                    int destY = genRand.Next(rectangle2.Y, rectangle2.Y + rectangle2.Height);
                    templePath = templePather(templePath, destX, destY);
                    if ((templePath.X == destX) && (templePath.Y == destY))
                    {
                        flag2 = false;
                    }
                }
                if (m < (maxValue - 1))
                {
                    if (genRand.Next(3) != 0)
                    {
                        int index = m + 1;
                        if (rectangleArray[index].Y >= (rectangleArray[m].Y + rectangleArray[m].Height))
                        {
                            rectangle2.X = rectangleArray[index].X;
                            if (rectangleArray[index].X < rectangleArray[m].X)
                            {
                                rectangle2.X += (int)(rectangleArray[index].Width * 0.2);
                            }
                            else
                            {
                                rectangle2.X += (int)(rectangleArray[index].Width * 0.8);
                            }
                            rectangle2.Y = rectangleArray[index].Y;
                        }
                        else
                        {
                            rectangle2.X = ((rectangleArray[m].X + (rectangleArray[m].Width / 2)) + (rectangleArray[index].X + (rectangleArray[index].Width / 2))) / 2;
                            rectangle2.Y = rectangleArray[index].Y + ((int)(rectangleArray[index].Height * 0.8));
                        }
                        int num53 = rectangle2.X;
                        int num54 = rectangle2.Y;
                        flag2 = true;
                        while (flag2)
                        {
                            int num55 = genRand.Next(num53 - 6, num53 + 7);
                            int num56 = genRand.Next(num54 - 6, num54 + 7);
                            templePath = templePather(templePath, num55, num56);
                            if ((templePath.X == num55) && (templePath.Y == num56))
                            {
                                flag2 = false;
                            }
                        }
                    }
                    else
                    {
                        int num57 = m + 1;
                        int num58 = ((rectangleArray[m].X + (rectangleArray[m].Width / 2)) + (rectangleArray[num57].X + (rectangleArray[num57].Width / 2))) / 2;
                        int num59 = ((rectangleArray[m].Y + (rectangleArray[m].Height / 2)) + (rectangleArray[num57].Y + (rectangleArray[num57].Height / 2))) / 2;
                        flag2 = true;
                        while (flag2)
                        {
                            int num60 = genRand.Next(num58 - 6, num58 + 7);
                            int num61 = genRand.Next(num59 - 6, num59 + 7);
                            templePath = templePather(templePath, num60, num61);
                            if ((templePath.X == num60) && (templePath.Y == num61))
                            {
                                flag2 = false;
                            }
                        }
                    }
                }
            }
            int num62 = Game1.maxTilesX - 20;
            int num63 = 20;
            int num64 = Game1.maxTilesY - 20;
            int num65 = 20;
            for (int n = 0; n < maxValue; n++)
            {
                if (rectangleArray[n].X < num62)
                {
                    num62 = rectangleArray[n].X;
                }
                if ((rectangleArray[n].X + rectangleArray[n].Width) > num63)
                {
                    num63 = rectangleArray[n].X + rectangleArray[n].Width;
                }
                if (rectangleArray[n].Y < num64)
                {
                    num64 = rectangleArray[n].Y;
                }
                if ((rectangleArray[n].Y + rectangleArray[n].Height) > num65)
                {
                    num65 = rectangleArray[n].Y + rectangleArray[n].Height;
                }
            }
            num62 -= 10;
            num63 += 10;
            num64 -= 10;
            num65 += 10;
            for (int num67 = num62; num67 < num63; num67++)
            {
                for (int num68 = num64; num68 < num65; num68++)
                {
                    outerTempled(num67, num68);
                }
            }
            for (int num69 = num63; num69 >= num62; num69--)
            {
                for (int num70 = num64; num70 < (num65 / 2); num70++)
                {
                    outerTempled(num69, num70);
                }
            }
            for (int num71 = num64; num71 < num65; num71++)
            {
                for (int num72 = num62; num72 < num63; num72++)
                {
                    outerTempled(num72, num71);
                }
            }
            for (int num73 = num65; num73 >= num64; num73--)
            {
                for (int num74 = num62; num74 < num63; num74++)
                {
                    outerTempled(num74, num73);
                }
            }
            num3 = -num4;
            Vector2 vector2 = new Vector2((float)num5, (float)num6);
            int num75 = genRand.Next(2, 5);
            bool flag3 = true;
            int num76 = 0;
            int num77 = genRand.Next(9, 14);
            while (flag3)
            {
                num76++;
                if (num76 >= num77)
                {
                    num76 = 0;
                    vector2.Y--;
                }
                vector2.X += num3;
                int num78 = (int)vector2.X;
                flag3 = false;
                for (int num79 = ((int)vector2.Y) - num75; num79 < (vector2.Y + num75); num79++)
                {
                    if ((Game1.tile[num78, num79].wall == 0x57) || (Game1.tile[num78, num79].active() && (Game1.tile[num78, num79].type == 0xe2)))
                    {
                        flag3 = true;
                    }
                    if (Game1.tile[num78, num79].active() && (Game1.tile[num78, num79].type == 0xe2))
                    {
                        Game1.tile[num78, num79].active(false);
                        Game1.tile[num78, num79].wall = 0x57;
                    }
                }
            }
            int num80 = num5;
            int num81 = num6;
            while (!Game1.tile[num80, num81].active())
            {
                num81++;
            }
            num81 -= 4;
            int num82 = num81;
            while ((Game1.tile[num80, num82].active() && (Game1.tile[num80, num82].type == 0xe2)) || (Game1.tile[num80, num82].wall == 0x57))
            {
                num82--;
            }
            num82 += 2;
            for (int num83 = num80 - 1; num83 <= (num80 + 1); num83++)
            {
                for (int num84 = num82; num84 <= num81; num84++)
                {
                    Game1.tile[num83, num84].active(true);
                    Game1.tile[num83, num84].type = 0xe2;
                    Game1.tile[num83, num84].liquid = 0;
                    Game1.tile[num83, num84].slope(0);
                    Game1.tile[num83, num84].halfBrick(false);
                }
            }
            for (int num85 = num80 - 4; num85 <= (num80 + 4); num85++)
            {
                for (int num86 = num81 - 1; num86 < (num81 + 3); num86++)
                {
                    Game1.tile[num85, num86].active(false);
                    Game1.tile[num85, num86].wall = 0x57;
                }
            }
            for (int num87 = num80 - 1; num87 <= (num80 + 1); num87++)
            {
                for (int num88 = num81 - 5; num88 <= (num81 + 8); num88++)
                {
                    Game1.tile[num87, num88].active(true);
                    Game1.tile[num87, num88].type = 0xe2;
                    Game1.tile[num87, num88].liquid = 0;
                    Game1.tile[num87, num88].slope(0);
                    Game1.tile[num87, num88].halfBrick(false);
                }
            }
            for (int num89 = num80 - 1; num89 <= (num80 + 1); num89++)
            {
                for (int num90 = num81; num90 < (num81 + 3); num90++)
                {
                    Game1.tile[num89, num90].active(false);
                    Game1.tile[num89, num90].wall = 0x57;
                }
            }
            PlaceTile(num80, num81, 10, true, false, -1, 11);
            for (int num91 = num62; num91 < num63; num91++)
            {
                for (int num92 = num64; num92 < num65; num92++)
                {
                    templeCleaner(num91, num92);
                }
            }
            for (int num93 = num65; num93 >= num64; num93--)
            {
                for (int num94 = num63; num94 >= num62; num94--)
                {
                    templeCleaner(num94, num93);
                }
            }
            for (int num95 = num62; num95 < num63; num95++)
            {
                for (int num96 = num64; num96 < num65; num96++)
                {
                    bool flag4 = true;
                    for (int num97 = num95 - 1; num97 <= (num95 + 1); num97++)
                    {
                        for (int num98 = num96 - 1; num98 <= (num96 + 1); num98++)
                        {
                            if ((!Game1.tile[num97, num98].active() || (Game1.tile[num97, num98].type != 0xe2)) && (Game1.tile[num97, num98].wall != 0x57))
                            {
                                flag4 = false;
                                break;
                            }
                        }
                    }
                    if (flag4)
                    {
                        Game1.tile[num95, num96].wall = 0x57;
                    }
                }
            }
            int num99 = 0;
            do
            {
                num99++;
                rectangle3 = rectangleArray[maxValue - 1];
                num100 = rectangle3.X + genRand.Next(rectangle3.Width);
                num101 = rectangle3.Y + genRand.Next(rectangle3.Height);
                PlaceTile(num100, num101, 0xed, false, false, -1, 0);
                if (Game1.tile[num100, num101].type == 0xed)
                {
                    lAltarX = num100 - (Game1.tile[num100, num101].frameX / 0x12);
                    lAltarY = num101 - (Game1.tile[num100, num101].frameY / 0x12);
                    goto Label_1578;
                }
            }
            while (num99 < 0x3e8);
            num100 = rectangle3.X + (rectangle3.Width / 2);
            num101 = rectangle3.Y + (rectangle3.Height / 2);
            num100 += genRand.Next(-10, 11);
            num101 += genRand.Next(-10, 11);
            while (!Game1.tile[num100, num101].active())
            {
                num101++;
            }
            Game1.tile[num100 - 1, num101].active(true);
            Game1.tile[num100 - 1, num101].slope(0);
            Game1.tile[num100 - 1, num101].halfBrick(false);
            Game1.tile[num100 - 1, num101].type = 0xe2;
            Game1.tile[num100, num101].active(true);
            Game1.tile[num100, num101].slope(0);
            Game1.tile[num100, num101].halfBrick(false);
            Game1.tile[num100, num101].type = 0xe2;
            Game1.tile[num100 + 1, num101].active(true);
            Game1.tile[num100 + 1, num101].slope(0);
            Game1.tile[num100 + 1, num101].halfBrick(false);
            Game1.tile[num100 + 1, num101].type = 0xe2;
            num101 -= 2;
            num100--;
            for (int num102 = -1; num102 <= 3; num102++)
            {
                for (int num103 = -1; num103 <= 1; num103++)
                {
                    x = num100 + num102;
                    y = num101 + num103;
                    Game1.tile[x, y].active(false);
                }
            }
            lAltarX = num100;
            lAltarY = num101;
            for (int num104 = 0; num104 <= 2; num104++)
            {
                for (int num105 = 0; num105 <= 1; num105++)
                {
                    x = num100 + num104;
                    y = num101 + num105;
                    Game1.tile[x, y].active(true);
                    Game1.tile[x, y].type = 0xed;
                    Game1.tile[x, y].frameX = (short)(num104 * 0x12);
                    Game1.tile[x, y].frameY = (short)(num105 * 0x12);
                }
            }
        Label_1578:
            num106 = maxValue * 1.1f;
            num106 *= 1f + (genRand.Next(-25, 0x1a) * 0.01f);
            int num107 = 0;
            while (num106 > 0f)
            {
                num107++;
                int num108 = genRand.Next(maxValue);
                int num109 = genRand.Next(rectangleArray[num108].X, rectangleArray[num108].X + rectangleArray[num108].Width);
                int num110 = genRand.Next(rectangleArray[num108].Y, rectangleArray[num108].Y + rectangleArray[num108].Height);
                if ((Game1.tile[num109, num110].wall == 0x57) && !Game1.tile[num109, num110].active())
                {
                    bool flag5 = false;
                    if (genRand.Next(2) == 0)
                    {
                        int num111 = 1;
                        if (genRand.Next(2) == 0)
                        {
                            num111 = -1;
                        }
                        while (!Game1.tile[num109, num110].active())
                        {
                            num110 += num111;
                        }
                        num110 -= num111;
                        int num112 = genRand.Next(2);
                        int num113 = genRand.Next(3, 10);
                        bool flag6 = true;
                        for (int num114 = num109 - num113; num114 < (num109 + num113); num114++)
                        {
                            for (int num115 = num110 - num113; num115 < (num110 + num113); num115++)
                            {
                                if (Game1.tile[num114, num115].active() && (Game1.tile[num114, num115].type == 10))
                                {
                                    flag6 = false;
                                    break;
                                }
                            }
                        }
                        if (flag6)
                        {
                            for (int num116 = num109 - num113; num116 < (num109 + num113); num116++)
                            {
                                for (int num117 = num110 - num113; num117 < (num110 + num113); num117++)
                                {
                                    if ((SolidTile(num116, num117) && (Game1.tile[num116, num117].type != 0xe8)) && !SolidTile(num116, num117 - num111))
                                    {
                                        Game1.tile[num116, num117].type = 0xe8;
                                        flag5 = true;
                                        if (num112 == 0)
                                        {
                                            Game1.tile[num116, num117 - 1].type = 0xe8;
                                            Game1.tile[num116, num117 - 1].active(true);
                                        }
                                        else
                                        {
                                            Game1.tile[num116, num117 + 1].type = 0xe8;
                                            Game1.tile[num116, num117 + 1].active(true);
                                        }
                                        num112++;
                                        if (num112 > 1)
                                        {
                                            num112 = 0;
                                        }
                                    }
                                }
                            }
                        }
                        if (flag5)
                        {
                            num107 = 0;
                            num106--;
                        }
                    }
                    else
                    {
                        int num118 = 1;
                        if (genRand.Next(2) == 0)
                        {
                            num118 = -1;
                        }
                        while (!Game1.tile[num109, num110].active())
                        {
                            num109 += num118;
                        }
                        num109 -= num118;
                        int num119 = genRand.Next(2);
                        int num120 = genRand.Next(3, 10);
                        bool flag7 = true;
                        for (int num121 = num109 - num120; num121 < (num109 + num120); num121++)
                        {
                            for (int num122 = num110 - num120; num122 < (num110 + num120); num122++)
                            {
                                if (Game1.tile[num121, num122].active() && (Game1.tile[num121, num122].type == 10))
                                {
                                    flag7 = false;
                                    break;
                                }
                            }
                        }
                        if (flag7)
                        {
                            for (int num123 = num109 - num120; num123 < (num109 + num120); num123++)
                            {
                                for (int num124 = num110 - num120; num124 < (num110 + num120); num124++)
                                {
                                    if ((SolidTile(num123, num124) && (Game1.tile[num123, num124].type != 0xe8)) && !SolidTile(num123 - num118, num124))
                                    {
                                        Game1.tile[num123, num124].type = 0xe8;
                                        flag5 = true;
                                        if (num119 == 0)
                                        {
                                            Game1.tile[num123 - 1, num124].type = 0xe8;
                                            Game1.tile[num123 - 1, num124].active(true);
                                        }
                                        else
                                        {
                                            Game1.tile[num123 + 1, num124].type = 0xe8;
                                            Game1.tile[num123 + 1, num124].active(true);
                                        }
                                        num119++;
                                        if (num119 > 1)
                                        {
                                            num119 = 0;
                                        }
                                    }
                                }
                            }
                        }
                        if (flag5)
                        {
                            num107 = 0;
                            num106--;
                        }
                    }
                }
                if (num107 > 0x3e8)
                {
                    num107 = 0;
                    num106--;
                }
            }
            tLeft = num62;
            tRight = num63;
            tTop = num64;
            tBottom = num65;
            tRooms = maxValue;
        }

        public static void MakeWateryIceThing(int i, int j)
        {
            if (((Game1.tile[i, j].liquid > 0) && !Game1.tile[i, j].active()) && !Game1.tile[i, j].lava())
            {
                int num = j;
                while (!Game1.tile[i, num].active() && (Game1.tile[i, num].liquid > 0))
                {
                    num++;
                    if (num > (Game1.maxTilesY - 50))
                    {
                        return;
                    }
                }
                if ((Game1.tile[i, num].type == 0x93) || (Game1.tile[i, num].type == 0xa1))
                {
                    num--;
                    while (Game1.tile[i, num].liquid > 0)
                    {
                        num--;
                        if (num < 10)
                        {
                            return;
                        }
                    }
                    if (!Game1.tile[i, num].active())
                    {
                        num++;
                        if (!Game1.tile[i, num].active())
                        {
                            int num2;
                            for (num2 = i; (!Game1.tile[num2, num].active() && (Game1.tile[num2, num].liquid > 0)) && (((Game1.tile[num2, num - 1].liquid == 0) && !Game1.tile[num2, num - 1].active()) && !Game1.tile[num2 - 1, num].halfBrick()); num2--)
                            {
                                PlaceTile(num2, num, 0xa2, true, false, -1, 0);
                            }
                            for (num2 = i + 1; (!Game1.tile[num2, num].active() && (Game1.tile[num2, num].liquid > 0)) && (((Game1.tile[num2, num - 1].liquid == 0) && !Game1.tile[num2, num - 1].active()) && !Game1.tile[num2 + 1, num].halfBrick()); num2++)
                            {
                                PlaceTile(num2, num, 0xa2, true, false, -1, 0);
                            }
                        }
                    }
                }
            }
        }

        public static bool mayanTrap(int x2, int y2)
        {
            int num = 1;
            if (genRand.Next(3) == 0)
            {
                num = 0;
            }
            int i = x2;
            int j = y2;
            while (!SolidTile(i, j))
            {
                j++;
                if (j >= (Game1.maxTilesY - 300))
                {
                    return false;
                }
            }
            if (Game1.tile[i, j].type == 0xe8)
            {
                return false;
            }
            j--;
            if ((Game1.tile[i, j].liquid > 0) && Game1.tile[i, j].lava())
            {
                return false;
            }
            if ((num == -1) && (genRand.Next(20) == 0))
            {
                num = 2;
            }
            else if (num == -1)
            {
                num = genRand.Next(2);
            }
            if (((Game1.tile[i, j].nactive() || Game1.tile[i - 1, j].nactive()) || (Game1.tile[i + 1, j].nactive() || Game1.tile[i, j - 1].nactive())) || ((Game1.tile[i - 1, j - 1].nactive() || Game1.tile[i + 1, j - 1].nactive()) || ((Game1.tile[i, j - 2].nactive() || Game1.tile[i - 1, j - 2].nactive()) || Game1.tile[i + 1, j - 2].nactive())))
            {
                return false;
            }
            if (Game1.tile[i, j + 1].type == 0x30)
            {
                return false;
            }
            if (Game1.tile[i, j + 1].type == 0xe8)
            {
                return false;
            }
            if (num != 0)
            {
                if (num != 1)
                {
                    return false;
                }
                int num18 = i;
                int num19 = j;
                while (!SolidTile(num18, num19))
                {
                    num19--;
                    if (num19 < Game1.worldSurface)
                    {
                        return false;
                    }
                }
                int num20 = Math.Abs((int)(num19 - j));
                if (num20 < 3)
                {
                    return false;
                }
                var num21 = (k_WireFlags)(1 << genRand.Next(3));
                if (Game1.tile[i, j].k_HasWireFlags(k_WireFlags.WIRE_BLUE))
                    num21 = k_WireFlags.WIRE_BLUE;
                else if (Game1.tile[i, j].k_HasWireFlags(k_WireFlags.WIRE_GREEN))
					num21 = k_WireFlags.WIRE_GREEN;
                else if (Game1.tile[i, j].k_HasWireFlags(k_WireFlags.WIRE_RED))
					num21 = k_WireFlags.WIRE_RED;
                int num22 = 3;
                if ((num20 < 0x10) && (genRand.Next(3) != 0))
                {
                    num22 = 4;
                }
                if (Game1.tile[num18, num19].type == 0x87)
                {
                    return false;
                }
                if (Game1.tile[num18, num19].type == 0x89)
                {
                    return false;
                }
                if (Game1.tile[num18, num19].type == 0xe8)
                {
                    return false;
                }
                if (Game1.tile[num18, num19].wall != 0x57)
                {
                    return false;
                }
                PlaceTile(i, j, 0x87, true, true, -1, 6);
                PlaceTile(num18, num19, 0x89, true, true, -1, num22);
                for (int k = 0; k < 2; k++)
                {
                    int num24 = genRand.Next(1, 5);
                    int num25 = num18;
                    int num26 = -1;
                    if (k == 1)
                    {
                        num26 = 1;
                    }
                    while (num24 > 0)
                    {
                        num24--;
                        num25 += num26;
                        if (!SolidTile(num25, num19 - 1) || SolidTile(num25, num19 + 1))
                        {
                            break;
                        }
                        PlaceTile(num25, num19, 0x89, true, true, -1, num22);
						Game1.tile[num25, num19].k_SetWireFlags(num21, true);
                    }
                }
                int num27 = i;
                int num28 = j;
                while ((num27 != num18) || (num28 != num19))
                {
					Game1.tile[num27, num28].k_SetWireFlags(num21, true);
                    if (num27 > num18)
                    {
                        num27--;
                    }
                    if (num27 < num18)
                    {
                        num27++;
                    }
					Game1.tile[num27, num28].k_SetWireFlags(num21, true);
					if (num28 > num19)
                    {
                        num28--;
                    }
                    if (num28 < num19)
                    {
                        num28++;
                    }
					Game1.tile[num27, num28].k_SetWireFlags(num21, true);
				}
                return true;
            }
            int num4 = i;
            int num5 = j;
            num5 -= genRand.Next(3);
            while (!SolidTile(num4, num5))
            {
                num4--;
            }
            int num6 = num4;
            num4 = i;
            while (!SolidTile(num4, num5))
            {
                num4++;
            }
            int num7 = num4;
            int num8 = i - num6;
            int num9 = num7 - i;
            bool flag = false;
            bool flag2 = false;
            if ((num8 > 5) && (num8 < 50))
            {
                flag = true;
            }
            if ((num9 > 5) && (num9 < 50))
            {
                flag2 = true;
            }
            if (flag && !SolidTile(num6, num5 + 1))
            {
                flag = false;
            }
            if (flag2 && !SolidTile(num7, num5 + 1))
            {
                flag2 = false;
            }
            if (flag && (((Game1.tile[num6, num5].type == 10) || (Game1.tile[num6, num5].type == 0x30)) || ((Game1.tile[num6, num5 + 1].type == 10) || (Game1.tile[num6, num5 + 1].type == 0x30))))
            {
                flag = false;
            }
            if (flag2 && (((Game1.tile[num7, num5].type == 10) || (Game1.tile[num7, num5].type == 0x30)) || ((Game1.tile[num7, num5 + 1].type == 10) || (Game1.tile[num7, num5 + 1].type == 0x30))))
            {
                flag2 = false;
            }
            int num10 = 0;
            if (flag && flag2)
            {
                num10 = 1;
                num4 = num6;
                if (genRand.Next(2) == 0)
                {
                    num4 = num7;
                    num10 = -1;
                }
            }
            else if (flag2)
            {
                num4 = num7;
                num10 = -1;
            }
            else if (flag)
            {
                num4 = num6;
                num10 = 1;
            }
            else
            {
                return false;
            }
            if (Game1.tile[num4, num5].wall != 0x57)
            {
                return false;
            }
            if (Game1.tile[num4, num5].type == 190)
            {
                return false;
            }
            if (Game1.tile[num4, num5].type == 0x87)
            {
                return false;
            }
            if (Game1.tile[num4, num5].type == 0x89)
            {
                return false;
            }
            if (Game1.tile[num4, num5].type == 0xe8)
            {
                return false;
            }
            PlaceTile(i, j, 0x87, true, true, -1, 6);
            KillTile(num4, num5, false, false, false);
			var num11 = (k_WireFlags)(1 << genRand.Next(3));
			if (Game1.tile[i, j].k_HasWireFlags(k_WireFlags.WIRE_BLUE))
				num11 = k_WireFlags.WIRE_BLUE;
			else if (Game1.tile[i, j].k_HasWireFlags(k_WireFlags.WIRE_GREEN))
				num11 = k_WireFlags.WIRE_GREEN;
			else if (Game1.tile[i, j].k_HasWireFlags(k_WireFlags.WIRE_RED))
				num11 = k_WireFlags.WIRE_RED;
			int num12 = Math.Abs((int)(num4 - i));
            int style = 1;
            if ((num12 < 10) && (genRand.Next(3) != 0))
            {
                style = 2;
            }
            PlaceTile(num4, num5, 0x89, true, true, -1, style);
            if (num10 == 1)
            {
                Tile tile1 = Game1.tile[num4, num5];
                tile1.frameX = (short)(tile1.frameX + 0x12);
            }
            int num14 = genRand.Next(5);
            int num15 = num5;
            while (num14 > 0)
            {
                num14--;
                num15--;
                if ((!SolidTile(num4, num15) || !SolidTile(num4 - num10, num15)) || SolidTile(num4 + num10, num15))
                {
                    break;
                }
                PlaceTile(num4, num15, 0x89, true, true, -1, style);
                if (num10 == 1)
                {
                    Tile tile2 = Game1.tile[num4, num15];
                    tile2.frameX = (short)(tile2.frameX + 0x12);
                }
				Game1.tile[num4, num15].k_SetWireFlags(num11, true);
            }
            int num16 = i;
            int num17 = j;
            while ((num16 != num4) || (num17 != num5))
            {
				Game1.tile[num16, num17].k_SetWireFlags(num11, true);
				if (num16 > num4)
                {
                    num16--;
                }
                if (num16 < num4)
                {
                    num16++;
                }
				Game1.tile[num16, num17].k_SetWireFlags(num11, true);
				if (num17 > num5)
                {
                    num17--;
                }
                if (num17 < num5)
                {
                    num17++;
                }
				Game1.tile[num16, num17].k_SetWireFlags(num11, true);
			}
            return true;
        }

        public static void MessageLunarApocalypse()
        {
            if (NPC.LunarApocalypseIsUp)
            {
                int num = 0;
                if (!NPC.TowerActiveSolar)
                {
                    num++;
                }
                if (!NPC.TowerActiveVortex)
                {
                    num++;
                }
                if (!NPC.TowerActiveNebula)
                {
                    num++;
                }
                if (!NPC.TowerActiveStardust)
                {
                    num++;
                }
                BroadcastText(Lang.misc[0x2b + num], 0xaf, 0x4b, 0xff);
            }
        }

        public static bool meteor(int i, int j)
        {
            if ((i < 50) || (i > (Game1.maxTilesX - 50)))
            {
                return false;
            }
            if ((j < 50) || (j > (Game1.maxTilesY - 50)))
            {
                return false;
            }
            int num = 0x23;
            Rectangle rectangle = new Rectangle((i - num) * 0x10, (j - num) * 0x10, (num * 2) * 0x10, (num * 2) * 0x10);
            for (int k = 0; k < 0xff; k++)
            {
                if (Game1.player[k].active)
                {
                    Rectangle rectangle2 = new Rectangle(((((int)Game1.player[k].position.X) + (Game1.player[k].width / 2)) - (NPC.sWidth / 2)) - NPC.safeRangeX, ((((int)Game1.player[k].position.Y) + (Game1.player[k].height / 2)) - (NPC.sHeight / 2)) - NPC.safeRangeY, NPC.sWidth + (NPC.safeRangeX * 2), NPC.sHeight + (NPC.safeRangeY * 2));
                    if (rectangle.Intersects(rectangle2))
                    {
                        return false;
                    }
                }
            }
            for (int m = 0; m < 200; m++)
            {
                if (Game1.npc[m].active)
                {
                    Rectangle rectangle3 = new Rectangle((int)Game1.npc[m].position.X, (int)Game1.npc[m].position.Y, Game1.npc[m].width, Game1.npc[m].height);
                    if (rectangle.Intersects(rectangle3))
                    {
                        return false;
                    }
                }
            }
            for (int n = i - num; n < (i + num); n++)
            {
                for (int num5 = j - num; num5 < (j + num); num5++)
                {
                    if (Game1.tile[n, num5].active() && (Game1.tile[n, num5].type == 0x15))
                    {
                        return false;
                    }
                }
            }
            stopDrops = true;
            num = genRand.Next(0x11, 0x17);
            for (int num6 = i - num; num6 < (i + num); num6++)
            {
                for (int num7 = j - num; num7 < (j + num); num7++)
                {
                    if (num7 > ((j + Game1.rand.Next(-2, 3)) - 5))
                    {
                        float num8 = Math.Abs((int)(i - num6));
                        float num9 = Math.Abs((int)(j - num7));
                        float num10 = (float)Math.Sqrt((double)((num8 * num8) + (num9 * num9)));
                        if (num10 < ((num * 0.9) + Game1.rand.Next(-4, 5)))
                        {
                            if (!Game1.tileSolid[Game1.tile[num6, num7].type])
                            {
                                Game1.tile[num6, num7].active(false);
                            }
                            Game1.tile[num6, num7].type = 0x25;
                        }
                    }
                }
            }
            num = genRand.Next(8, 14);
            for (int num11 = i - num; num11 < (i + num); num11++)
            {
                for (int num12 = j - num; num12 < (j + num); num12++)
                {
                    if (num12 > ((j + Game1.rand.Next(-2, 3)) - 4))
                    {
                        float num13 = Math.Abs((int)(i - num11));
                        float num14 = Math.Abs((int)(j - num12));
                        float num15 = (float)Math.Sqrt((double)((num13 * num13) + (num14 * num14)));
                        if (num15 < ((num * 0.8) + Game1.rand.Next(-3, 4)))
                        {
                            Game1.tile[num11, num12].active(false);
                        }
                    }
                }
            }
            num = genRand.Next(0x19, 0x23);
            for (int num16 = i - num; num16 < (i + num); num16++)
            {
                for (int num17 = j - num; num17 < (j + num); num17++)
                {
                    float num18 = Math.Abs((int)(i - num16));
                    float num19 = Math.Abs((int)(j - num17));
                    float num20 = (float)Math.Sqrt((double)((num18 * num18) + (num19 * num19)));
                    if (num20 < (num * 0.7))
                    {
                        if (((Game1.tile[num16, num17].type == 5) || (Game1.tile[num16, num17].type == 0x20)) || (Game1.tile[num16, num17].type == 0x160))
                        {
                            KillTile(num16, num17, false, false, false);
                        }
                        Game1.tile[num16, num17].liquid = 0;
                    }
                    if (Game1.tile[num16, num17].type == 0x25)
                    {
                        if ((!SolidTile(num16 - 1, num17) && !SolidTile(num16 + 1, num17)) && (!SolidTile(num16, num17 - 1) && !SolidTile(num16, num17 + 1)))
                        {
                            Game1.tile[num16, num17].active(false);
                        }
                        else if ((Game1.tile[num16, num17].halfBrick() || Game1.tile[num16 - 1, num17].topSlope()) && !SolidTile(num16, num17 + 1))
                        {
                            Game1.tile[num16, num17].active(false);
                        }
                    }
                    SquareTileFrame(num16, num17, true);
                    SquareWallFrame(num16, num17, true);
                }
            }
            num = genRand.Next(0x17, 0x20);
            for (int num21 = i - num; num21 < (i + num); num21++)
            {
                for (int num22 = j - num; num22 < (j + num); num22++)
                {
                    if (((num22 > ((j + genRand.Next(-3, 4)) - 3)) && Game1.tile[num21, num22].active()) && (Game1.rand.Next(10) == 0))
                    {
                        float num23 = Math.Abs((int)(i - num21));
                        float num24 = Math.Abs((int)(j - num22));
                        float num25 = (float)Math.Sqrt((double)((num23 * num23) + (num24 * num24)));
                        if (num25 < (num * 0.8))
                        {
                            if (((Game1.tile[num21, num22].type == 5) || (Game1.tile[num21, num22].type == 0x20)) || (Game1.tile[num21, num22].type == 0x160))
                            {
                                KillTile(num21, num22, false, false, false);
                            }
                            Game1.tile[num21, num22].type = 0x25;
                            SquareTileFrame(num21, num22, true);
                        }
                    }
                }
            }
            num = genRand.Next(30, 0x26);
            for (int num26 = i - num; num26 < (i + num); num26++)
            {
                for (int num27 = j - num; num27 < (j + num); num27++)
                {
                    if (((num27 > (j + genRand.Next(-2, 3))) && Game1.tile[num26, num27].active()) && (Game1.rand.Next(20) == 0))
                    {
                        float num28 = Math.Abs((int)(i - num26));
                        float num29 = Math.Abs((int)(j - num27));
                        float num30 = (float)Math.Sqrt((double)((num28 * num28) + (num29 * num29)));
                        if (num30 < (num * 0.85))
                        {
                            if (((Game1.tile[num26, num27].type == 5) || (Game1.tile[num26, num27].type == 0x20)) || (Game1.tile[num26, num27].type == 0x160))
                            {
                                KillTile(num26, num27, false, false, false);
                            }
                            Game1.tile[num26, num27].type = 0x25;
                            SquareTileFrame(num26, num27, true);
                        }
                    }
                }
            }
            stopDrops = false;
            if (Game1.netMode == 0)
            {
                Game1.NewText(Lang.gen[0x3b], 50, 0xff, 130, false);
            }
            else if (Game1.netMode == 2)
            {
                NetMessage.SendData(0x19, -1, -1, Lang.gen[0x3b], 0xff, 50f, 255f, 130f, 0, 0, 0);
            }
            if (Game1.netMode != 1)
            {
                NetMessage.SendTileSquare(-1, i, j, 40);
            }
            return true;
        }

        public static void MineHouse(int i, int j)
        {
            if (((i >= 50) && (i <= (Game1.maxTilesX - 50))) && ((j >= 50) && (j <= (Game1.maxTilesY - 50))))
            {
                int num = genRand.Next(6, 12);
                int num2 = genRand.Next(3, 6);
                int num3 = genRand.Next(15, 30);
                int num4 = genRand.Next(15, 30);
                if (!SolidTile(i, j) && (Game1.tile[i, j].wall <= 0))
                {
                    int num5 = j - num;
                    int num6 = j + num2;
                    for (int k = 0; k < 2; k++)
                    {
                        bool flag = true;
                        int num8 = i;
                        int num9 = j;
                        int num10 = -1;
                        int num11 = num3;
                        if (k == 1)
                        {
                            num10 = 1;
                            num11 = num4;
                            num8++;
                        }
                        while (flag)
                        {
                            if ((num9 - num) < num5)
                            {
                                num5 = num9 - num;
                            }
                            if ((num9 + num2) > num6)
                            {
                                num6 = num9 + num2;
                            }
                            for (int num12 = 0; num12 < 2; num12++)
                            {
                                int num13 = num9;
                                bool flag2 = true;
                                int num14 = num;
                                int num15 = -1;
                                if (num12 == 1)
                                {
                                    num13++;
                                    num14 = num2;
                                    num15 = 1;
                                }
                                while (flag2)
                                {
                                    if (((num8 != i) && (Game1.tile[num8 - num10, num13].wall != 0x1b)) && ((SolidTile(num8 - num10, num13) || !Game1.tile[num8 - num10, num13].active()) || (Game1.tile[num8 - num10, num13].halfBrick() || (Game1.tile[num8 - num10, num13].slope() != 0))))
                                    {
                                        Game1.tile[num8 - num10, num13].active(true);
                                        Game1.tile[num8 - num10, num13].type = 30;
                                    }
                                    if ((SolidTile(num8 - 1, num13) || Game1.tile[num8 - 1, num13].halfBrick()) || (Game1.tile[num8 - 1, num13].slope() != 0))
                                    {
                                        Game1.tile[num8 - 1, num13].type = 30;
                                    }
                                    if ((SolidTile(num8 + 1, num13) || Game1.tile[num8 + 1, num13].halfBrick()) || (Game1.tile[num8 + 1, num13].slope() != 0))
                                    {
                                        Game1.tile[num8 + 1, num13].type = 30;
                                    }
                                    if ((SolidTile(num8, num13) || Game1.tile[num8, num13].halfBrick()) || (Game1.tile[num8, num13].slope() != 0))
                                    {
                                        int num16 = 0;
                                        if (SolidTile(num8 - 1, num13))
                                        {
                                            num16++;
                                        }
                                        if (SolidTile(num8 + 1, num13))
                                        {
                                            num16++;
                                        }
                                        if (SolidTile(num8, num13 - 1))
                                        {
                                            num16++;
                                        }
                                        if (SolidTile(num8, num13 + 1))
                                        {
                                            num16++;
                                        }
                                        if (num16 < 2)
                                        {
                                            Game1.tile[num8, num13].active(false);
                                        }
                                        else
                                        {
                                            flag2 = false;
                                            Game1.tile[num8, num13].type = 30;
                                        }
                                    }
                                    else
                                    {
                                        Game1.tile[num8, num13].wall = 0x1b;
                                        Game1.tile[num8, num13].liquid = 0;
                                        Game1.tile[num8, num13].lava(false);
                                    }
                                    num13 += num15;
                                    num14--;
                                    if (num14 <= 0)
                                    {
                                        if (!Game1.tile[num8, num13].active())
                                        {
                                            Game1.tile[num8, num13].active(true);
                                            Game1.tile[num8, num13].type = 30;
                                        }
                                        flag2 = false;
                                    }
                                }
                            }
                            num11--;
                            num8 += num10;
                            if (SolidTile(num8, num9))
                            {
                                int num17 = 0;
                                int num18 = 0;
                                int num19 = num9;
                                bool flag3 = true;
                                while (flag3)
                                {
                                    num19--;
                                    num17++;
                                    if (SolidTile(num8 - num10, num19))
                                    {
                                        num17 = 0x3e7;
                                        flag3 = false;
                                    }
                                    else if (!SolidTile(num8, num19))
                                    {
                                        flag3 = false;
                                    }
                                }
                                num19 = num9;
                                flag3 = true;
                                while (flag3)
                                {
                                    num19++;
                                    num18++;
                                    if (SolidTile(num8 - num10, num19))
                                    {
                                        num18 = 0x3e7;
                                        flag3 = false;
                                    }
                                    else if (!SolidTile(num8, num19))
                                    {
                                        flag3 = false;
                                    }
                                }
                                if (num18 <= num17)
                                {
                                    if (num18 > num2)
                                    {
                                        num11 = 0;
                                    }
                                    else
                                    {
                                        num9 += num18 + 1;
                                    }
                                }
                                else if (num17 > num)
                                {
                                    num11 = 0;
                                }
                                else
                                {
                                    num9 -= num17 + 1;
                                }
                            }
                            if (num11 <= 0)
                            {
                                flag = false;
                            }
                        }
                    }
                    int minValue = (i - num3) - 1;
                    int maxValue = (i + num4) + 2;
                    int num22 = num5 - 1;
                    int num23 = num6 + 2;
                    for (int m = minValue; m < maxValue; m++)
                    {
                        for (int num25 = num22; num25 < num23; num25++)
                        {
                            if ((Game1.tile[m, num25].wall == 0x1b) && !Game1.tile[m, num25].active())
                            {
                                if (((Game1.tile[m - 1, num25].wall != 0x1b) && (m < i)) && !SolidTile(m - 1, num25))
                                {
                                    PlaceTile(m, num25, 30, true, false, -1, 0);
                                    Game1.tile[m, num25].wall = 0;
                                }
                                if (((Game1.tile[m + 1, num25].wall != 0x1b) && (m > i)) && !SolidTile(m + 1, num25))
                                {
                                    PlaceTile(m, num25, 30, true, false, -1, 0);
                                    Game1.tile[m, num25].wall = 0;
                                }
                                for (int num26 = m - 1; num26 <= (m + 1); num26++)
                                {
                                    for (int num27 = num25 - 1; num27 <= (num25 + 1); num27++)
                                    {
                                        if (SolidTile(num26, num27))
                                        {
                                            Game1.tile[num26, num27].type = 30;
                                        }
                                    }
                                }
                            }
                            if (((((Game1.tile[m, num25].type == 30) && (Game1.tile[m - 1, num25].wall == 0x1b)) && (Game1.tile[m + 1, num25].wall == 0x1b)) && ((Game1.tile[m, num25 - 1].wall == 0x1b) || Game1.tile[m, num25 - 1].active())) && ((Game1.tile[m, num25 + 1].wall == 0x1b) || Game1.tile[m, num25 + 1].active()))
                            {
                                Game1.tile[m, num25].active(false);
                                Game1.tile[m, num25].wall = 0x1b;
                            }
                        }
                    }
                    for (int n = minValue; n < maxValue; n++)
                    {
                        for (int num29 = num22; num29 < num23; num29++)
                        {
                            if (Game1.tile[n, num29].type == 30)
                            {
                                if (((Game1.tile[n - 1, num29].wall == 0x1b) && (Game1.tile[n + 1, num29].wall == 0x1b)) && (!Game1.tile[n - 1, num29].active() && !Game1.tile[n + 1, num29].active()))
                                {
                                    Game1.tile[n, num29].active(false);
                                    Game1.tile[n, num29].wall = 0x1b;
                                }
                                if ((((Game1.tile[n, num29 - 1].type != 0x15) && (Game1.tile[n - 1, num29].wall == 0x1b)) && ((Game1.tile[n + 1, num29].type == 30) && (Game1.tile[n + 2, num29].wall == 0x1b))) && (!Game1.tile[n - 1, num29].active() && !Game1.tile[n + 2, num29].active()))
                                {
                                    Game1.tile[n, num29].active(false);
                                    Game1.tile[n, num29].wall = 0x1b;
                                    Game1.tile[n + 1, num29].active(false);
                                    Game1.tile[n + 1, num29].wall = 0x1b;
                                }
                                if (((Game1.tile[n, num29 - 1].wall == 0x1b) && (Game1.tile[n, num29 + 1].wall == 0x1b)) && (!Game1.tile[n, num29 - 1].active() && !Game1.tile[n, num29 + 1].active()))
                                {
                                    Game1.tile[n, num29].active(false);
                                    Game1.tile[n, num29].wall = 0x1b;
                                }
                            }
                        }
                    }
                    for (int num30 = minValue; num30 < maxValue; num30++)
                    {
                        for (int num31 = num23; num31 > num22; num31--)
                        {
                            bool flag4 = false;
                            if (Game1.tile[num30, num31].active() && (Game1.tile[num30, num31].type == 30))
                            {
                                int num32 = -1;
                                for (int num33 = 0; num33 < 2; num33++)
                                {
                                    if (!SolidTile(num30 + num32, num31) && (Game1.tile[num30 + num32, num31].wall == 0))
                                    {
                                        int num34 = 0;
                                        int num35 = num31;
                                        int num36 = num31;
                                        while ((Game1.tile[num30, num35].active() && (Game1.tile[num30, num35].type == 30)) && (!SolidTile(num30 + num32, num35) && (Game1.tile[num30 + num32, num35].wall == 0)))
                                        {
                                            num35--;
                                            num34++;
                                        }
                                        num35++;
                                        int num37 = num35 + 1;
                                        if (num34 > 4)
                                        {
                                            if (genRand.Next(2) == 0)
                                            {
                                                num35 = num36 - 1;
                                                bool flag5 = true;
                                                for (int num38 = num30 - 2; num38 <= (num30 + 2); num38++)
                                                {
                                                    for (int num39 = num35 - 2; num39 <= num35; num39++)
                                                    {
                                                        if ((num38 != num30) && Game1.tile[num38, num39].active())
                                                        {
                                                            flag5 = false;
                                                        }
                                                    }
                                                }
                                                if (flag5)
                                                {
                                                    Game1.tile[num30, num35].active(false);
                                                    Game1.tile[num30, num35 - 1].active(false);
                                                    Game1.tile[num30, num35 - 2].active(false);
                                                    PlaceTile(num30, num35, 10, true, false, -1, 0);
                                                    flag4 = true;
                                                }
                                            }
                                            if (!flag4)
                                            {
                                                for (int num40 = num37; num40 < num36; num40++)
                                                {
                                                    Game1.tile[num30, num40].type = 0x7c;
                                                }
                                            }
                                        }
                                    }
                                    num32 = 1;
                                }
                            }
                            if (flag4)
                            {
                                break;
                            }
                        }
                    }
                    int num41 = genRand.Next(1, 2);
                    if (genRand.Next(4) == 0)
                    {
                        num41 = 0;
                    }
                    if (genRand.Next(6) == 0)
                    {
                        num41++;
                    }
                    if (genRand.Next(10) == 0)
                    {
                        num41++;
                    }
                    for (int num42 = 0; num42 < num41; num42++)
                    {
                        int num43 = 0;
                        int x = genRand.Next(minValue, maxValue);
                        int y = genRand.Next(num22, num23);
                        while (!Game1.wallHouse[Game1.tile[x, y].wall] || Game1.tile[x, y].active())
                        {
                            num43++;
                            if (num43 > 0x3e8)
                            {
                                break;
                            }
                            x = genRand.Next(minValue, maxValue);
                            y = genRand.Next(num22, num23);
                        }
                        if (num43 > 0x3e8)
                        {
                            break;
                        }
                        int num46 = x;
                        int num47 = x;
                        int num48 = y;
                        int num49 = y;
                        int num50 = 0;
                        int num51 = 0;
                        for (int num52 = 0; num52 < 2; num52++)
                        {
                            num46 = x;
                            num47 = x;
                            while (!Game1.tile[num46, y].active() && Game1.wallHouse[Game1.tile[num46, y].wall])
                            {
                                num46--;
                            }
                            num46++;
                            while (!Game1.tile[num47, y].active() && Game1.wallHouse[Game1.tile[num47, y].wall])
                            {
                                num47++;
                            }
                            num47--;
                            i = (num46 + num47) / 2;
                            num48 = y;
                            num49 = y;
                            while (!Game1.tile[x, num48].active() && Game1.wallHouse[Game1.tile[x, num48].wall])
                            {
                                num48--;
                            }
                            num48++;
                            while (!Game1.tile[x, num49].active() && Game1.wallHouse[Game1.tile[x, num49].wall])
                            {
                                num49++;
                            }
                            num49--;
                            y = (num48 + num49) / 2;
                        }
                        num46 = x;
                        num47 = x;
                        while ((!Game1.tile[num46, y].active() && !Game1.tile[num46, y - 1].active()) && !Game1.tile[num46, y + 1].active())
                        {
                            num46--;
                        }
                        num46++;
                        while ((!Game1.tile[num47, y].active() && !Game1.tile[num47, y - 1].active()) && !Game1.tile[num47, y + 1].active())
                        {
                            num47++;
                        }
                        num47--;
                        num48 = y;
                        num49 = y;
                        while ((!Game1.tile[x, num48].active() && !Game1.tile[x - 1, num48].active()) && !Game1.tile[x + 1, num48].active())
                        {
                            num48--;
                        }
                        num48++;
                        while ((!Game1.tile[x, num49].active() && !Game1.tile[x - 1, num49].active()) && !Game1.tile[x + 1, num49].active())
                        {
                            num49++;
                        }
                        num49--;
                        x = (num46 + num47) / 2;
                        y = (num48 + num49) / 2;
                        num50 = num47 - num46;
                        num51 = num49 - num48;
                        if ((num50 > 7) && (num51 > 5))
                        {
                            int num53 = 0;
                            if (nearPicture2(i, y))
                            {
                                num53 = -1;
                            }
                            if (num53 == 0)
                            {
                                Vector2 vector = randHousePicture();
                                int type = (int)vector.X;
                                int style = (int)vector.Y;
                                if (!nearPicture(x, y))
                                {
                                    PlaceTile(x, y, type, true, false, -1, style);
                                }
                            }
                        }
                    }
                    for (int num56 = minValue; num56 < maxValue; num56++)
                    {
                        bool flag6 = true;
                        for (int num57 = num22; num57 < num23; num57++)
                        {
                            for (int num58 = num56 - 3; num58 <= (num56 + 3); num58++)
                            {
                                if (Game1.tile[num58, num57].active() && (!SolidTile(num58, num57) || (Game1.tile[num58, num57].type == 10)))
                                {
                                    flag6 = false;
                                }
                            }
                        }
                        if (flag6)
                        {
                            for (int num59 = num22; num59 < num23; num59++)
                            {
                                if ((Game1.tile[num56, num59].wall == 0x1b) && !Game1.tile[num56, num59].active())
                                {
                                    PlaceTile(num56, num59, 0x7c, true, false, -1, 0);
                                }
                            }
                        }
                        num56 += genRand.Next(4);
                    }
                    for (int num60 = 0; num60 < 4; num60++)
                    {
                        int num61 = genRand.Next(minValue + 2, maxValue - 1);
                        int num62 = genRand.Next(num22 + 2, num23 - 1);
                        while (Game1.tile[num61, num62].wall != 0x1b)
                        {
                            num61 = genRand.Next(minValue + 2, maxValue - 1);
                            num62 = genRand.Next(num22 + 2, num23 - 1);
                        }
                        while (Game1.tile[num61, num62].active())
                        {
                            num62--;
                        }
                        while (!Game1.tile[num61, num62].active())
                        {
                            num62++;
                        }
                        num62--;
                        if (Game1.tile[num61, num62].wall == 0x1b)
                        {
                            if (genRand.Next(3) == 0)
                            {
                                int num63 = genRand.Next(9);
                                switch (num63)
                                {
                                    case 0:
                                        num63 = 14;
                                        break;

                                    case 1:
                                        num63 = 0x10;
                                        break;

                                    case 2:
                                        num63 = 0x12;
                                        break;

                                    case 3:
                                        num63 = 0x56;
                                        break;

                                    case 4:
                                        num63 = 0x57;
                                        break;

                                    case 5:
                                        num63 = 0x5e;
                                        break;

                                    case 6:
                                        num63 = 0x65;
                                        break;

                                    case 7:
                                        num63 = 0x68;
                                        break;

                                    case 8:
                                        num63 = 0x6a;
                                        break;
                                }
                                PlaceTile(num61, num62, num63, true, false, -1, 0);
                            }
                            else
                            {
                                int index = genRand.Next(2, statueList.Length);
                                PlaceTile(num61, num62, statueList[index].X, true, true, -1, statueList[index].Y);
                            }
                        }
                    }
                    for (int num65 = 0; num65 < 40; num65++)
                    {
                        int num66 = genRand.Next(minValue + 2, maxValue - 1);
                        int num67 = genRand.Next(num22 + 2, num23 - 1);
                        while (Game1.tile[num66, num67].wall != 0x1b)
                        {
                            num66 = genRand.Next(minValue + 2, maxValue - 1);
                            num67 = genRand.Next(num22 + 2, num23 - 1);
                        }
                        while (Game1.tile[num66, num67].active())
                        {
                            num67--;
                        }
                        while (!Game1.tile[num66, num67].active())
                        {
                            num67++;
                        }
                        num67--;
                        if ((Game1.tile[num66, num67].wall == 0x1b) && (genRand.Next(2) == 0))
                        {
                            int num68 = genRand.Next(0x16, 0x1a);
                            PlaceTile(num66, num67, 0xba, true, false, -1, num68);
                        }
                    }
                    for (int num69 = 0; num69 < 20; num69++)
                    {
                        int num70 = genRand.Next(minValue + 2, maxValue - 1);
                        int num71 = genRand.Next(num22 + 2, num23 - 1);
                        while (Game1.tile[num70, num71].wall != 0x1b)
                        {
                            num70 = genRand.Next(minValue + 2, maxValue - 1);
                            num71 = genRand.Next(num22 + 2, num23 - 1);
                        }
                        while (Game1.tile[num70, num71].active())
                        {
                            num71--;
                        }
                        while (!Game1.tile[num70, num71].active())
                        {
                            num71++;
                        }
                        num71--;
                        if ((Game1.tile[num70, num71].wall == 0x1b) && (genRand.Next(2) == 0))
                        {
                            int num72 = genRand.Next(0x1f, 0x22);
                            PlaceSmallPile(num70, num71, num72, 1, 0xb9);
                        }
                    }
                    for (int num73 = 0; num73 < 15; num73++)
                    {
                        int num74 = genRand.Next(minValue + 2, maxValue - 1);
                        int num75 = genRand.Next(num22 + 2, num23 - 1);
                        while (Game1.tile[num74, num75].wall != 0x1b)
                        {
                            num74 = genRand.Next(minValue + 2, maxValue - 1);
                            num75 = genRand.Next(num22 + 2, num23 - 1);
                        }
                        while (Game1.tile[num74, num75].active())
                        {
                            num75--;
                        }
                        while ((num75 > 0) && !Game1.tile[num74, num75 - 1].active())
                        {
                            num75--;
                        }
                        if (Game1.tile[num74, num75].wall == 0x1b)
                        {
                            int num76 = 4;
                            int num77 = 0;
                            if (genRand.Next(10) < 9)
                            {
                                num76 = -1;
                            }
                            else
                            {
                                num76 = 0x22;
                                num77 = genRand.Next(6);
                            }
                            if (num76 > 0)
                            {
                                PlaceTile(num74, num75, num76, true, false, -1, num77);
                                if (Game1.tile[num74, num75].type == num76)
                                {
                                    if (num76 == 4)
                                    {
                                        Tile tile1 = Game1.tile[num74, num75];
                                        tile1.frameX = (short)(tile1.frameX + 0x36);
                                    }
                                    else
                                    {
                                        int num79 = num74;
                                        int num80 = num75;
                                        num75 = num80 - ((Game1.tile[num79, num80].frameY % 0x36) / 0x12);
                                        num74 = Game1.tile[num79, num80].frameX / 0x12;
                                        if (num74 > 2)
                                        {
                                            num74 -= 3;
                                        }
                                        num74 = num79 - num74;
                                        short num81 = 0x36;
                                        if (Game1.tile[num74, num75].frameX > 0)
                                        {
                                            num81 = -54;
                                        }
                                        for (int num82 = num74; num82 < (num74 + 3); num82++)
                                        {
                                            for (int num83 = num75; num83 < (num75 + 3); num83++)
                                            {
                                                Tile tile2 = Game1.tile[num82, num83];
                                                tile2.frameX = (short)(tile2.frameX + num81);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void Mountinater(int i, int j)
        {
            Vector2 vector;
            Vector2 vector2;
            double num5 = genRand.Next(80, 120);
            double num6 = num5;
            float num7 = genRand.Next(40, 0x37);
            vector.X = i;
            vector.Y = j + (num7 / 2f);
            vector2.X = genRand.Next(-10, 11) * 0.1f;
            vector2.Y = genRand.Next(-20, -10) * 0.1f;
            while ((num5 > 0.0) && (num7 > 0f))
            {
                num5 -= genRand.Next(4);
                num7--;
                int num = (int)(vector.X - (num5 * 0.5));
                int maxTilesX = (int)(vector.X + (num5 * 0.5));
                int num2 = (int)(vector.Y - (num5 * 0.5));
                int maxTilesY = (int)(vector.Y + (num5 * 0.5));
                if (num < 0)
                {
                    num = 0;
                }
                if (maxTilesX > Game1.maxTilesX)
                {
                    maxTilesX = Game1.maxTilesX;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                num6 = (num5 * genRand.Next(80, 120)) * 0.01;
                for (int k = num; k < maxTilesX; k++)
                {
                    for (int m = num2; m < maxTilesY; m++)
                    {
                        float num10 = Math.Abs((float)(k - vector.X));
                        float num11 = Math.Abs((float)(m - vector.Y));
                        if ((Math.Sqrt((double)((num10 * num10) + (num11 * num11))) < (num6 * 0.4)) && !Game1.tile[k, m].active())
                        {
                            Game1.tile[k, m].active(true);
                            Game1.tile[k, m].type = 0;
                        }
                    }
                }
                vector += vector2;
                vector2.X += genRand.Next(-10, 11) * 0.05f;
                vector2.Y += genRand.Next(-10, 11) * 0.05f;
                if (vector2.X > 0.5)
                {
                    vector2.X = 0.5f;
                }
                if (vector2.X < -0.5)
                {
                    vector2.X = -0.5f;
                }
                if (vector2.Y > -0.5)
                {
                    vector2.Y = -0.5f;
                }
                if (vector2.Y < -1.5)
                {
                    vector2.Y = -1.5f;
                }
            }
        }

        public static bool MoveNPC(int x, int y, int n)
        {
            if (!StartRoomCheck(x, y))
            {
                Game1.NewText(Lang.inter[40], 0xff, 240, 20, false);
                return false;
            }
            if (!RoomNeeds(spawnNPC))
            {
                if (Lang.lang <= 1)
                {
                    int index = 0;
                    string[] strArray = new string[4];
                    if (!roomTorch)
                    {
                        strArray[index] = "a light source";
                        index++;
                    }
                    if (!roomDoor)
                    {
                        strArray[index] = "a door";
                        index++;
                    }
                    if (!roomTable)
                    {
                        strArray[index] = "a table";
                        index++;
                    }
                    if (!roomChair)
                    {
                        strArray[index] = "a chair";
                        index++;
                    }
                    string str = "";
                    for (int i = 0; i < index; i++)
                    {
                        if ((index == 2) && (i == 1))
                        {
                            str = str + " and ";
                        }
                        else if ((i > 0) && (i != (index - 1)))
                        {
                            str = str + ", and ";
                        }
                        else if (i > 0)
                        {
                            str = str + ", ";
                        }
                        str = str + strArray[i];
                    }
                    Game1.NewText("This housing is missing " + str + ".", 0xff, 240, 20, false);
                }
                else
                {
                    Game1.NewText(Lang.inter[0x27], 0xff, 240, 20, false);
                }
                return false;
            }
            ScoreRoom(-1);
            if (hiScore <= 0)
            {
                if (roomOccupied)
                {
                    Game1.NewText(Lang.inter[0x29], 0xff, 240, 20, false);
                }
                else if (roomEvil)
                {
                    Game1.NewText(Lang.inter[0x2a], 0xff, 240, 20, false);
                }
                else
                {
                    Game1.NewText(Lang.inter[40], 0xff, 240, 20, false);
                }
                return false;
            }
            if ((n > 0) && !CheckConditions(Game1.npc[n].type))
            {
                Game1.NewText(Lang.inter[0x37] + " " + Game1.npc[n].name, 0xff, 240, 20, false);
                return false;
            }
            return true;
        }

        public static void moveRoom(int x, int y, int n)
        {
            if (Game1.netMode == 1)
            {
                NetMessage.SendData(60, -1, -1, "", n, (float)x, (float)y, 1f, 0, 0, 0);
            }
            else
            {
                spawnNPC = Game1.npc[n].type;
                Game1.npc[n].homeless = true;
                SpawnNPC(x, y);
            }
        }

        public static void MudWallRunner(int i, int j)
        {
            Vector2 vector;
            Vector2 vector2;
            double num5 = genRand.Next(8, 0x15);
            float num6 = genRand.Next(8, 0x21);
            float num7 = num6;
            vector.X = i;
            vector.Y = j;
            vector2.X = genRand.Next(-10, 11) * 0.1f;
            vector2.Y = genRand.Next(-10, 11) * 0.1f;
            while ((num5 > 0.0) && (num7 > 0f))
            {
                double num8 = num5 * (num7 / num6);
                num7--;
                int num = (int)(vector.X - (num8 * 0.5));
                int maxTilesX = (int)(vector.X + (num8 * 0.5));
                int num2 = (int)(vector.Y - (num8 * 0.5));
                int maxTilesY = (int)(vector.Y + (num8 * 0.5));
                if (num < 0)
                {
                    num = 0;
                }
                if (maxTilesX > Game1.maxTilesX)
                {
                    maxTilesX = Game1.maxTilesX;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                for (int k = num; k < maxTilesX; k++)
                {
                    for (int m = num2; m < maxTilesY; m++)
                    {
                        if (((Math.Abs((float)(k - vector.X)) + Math.Abs((float)(m - vector.Y))) < ((num5 * 0.5) * (1.0 + (genRand.Next(-10, 11) * 0.015)))) && (m > Game1.worldSurface))
                        {
                            Game1.tile[k, m].wall = 0;
                        }
                    }
                }
                vector += vector2;
                vector2.X += genRand.Next(-10, 11) * 0.05f;
                if (vector2.X > 1f)
                {
                    vector2.X = 1f;
                }
                if (vector2.X < -1f)
                {
                    vector2.X = -1f;
                }
                vector2.Y += genRand.Next(-10, 11) * 0.05f;
                if (vector2.Y > 1f)
                {
                    vector2.Y = 1f;
                }
                if (vector2.Y < -1f)
                {
                    vector2.Y = -1f;
                }
            }
        }

        private static bool nearbyChlorophyte(int i, int j)
        {
            float num = 0f;
            int num2 = 15;
            if ((i <= (num2 + 5)) || (i >= ((Game1.maxTilesX - num2) - 5)))
            {
                return false;
            }
            if ((j <= (num2 + 5)) || (j >= ((Game1.maxTilesY - num2) - 5)))
            {
                return false;
            }
            for (int k = i - num2; k < (i + num2); k++)
            {
                for (int m = j - num2; m < (j + num2); m++)
                {
                    if (Game1.tile[k, m].active() && ((Game1.tile[k, m].type == 0xd3) || (Game1.tile[k, m].type == 0x15a)))
                    {
                        num++;
                    }
                }
            }
            return (((num > 0f) && (genRand.Next(20) <= num)) && false);
        }

        public static bool NearFriendlyWall(int x, int y)
        {
            try
            {
                if (((x < 2) || (x >= (Game1.maxTilesX - 2))) || ((y < 2) || (y >= (Game1.maxTilesY - 2))))
                {
                    return true;
                }
                if ((Game1.tile[x, y].wall == 0) || Game1.wallHouse[Game1.tile[x, y].wall])
                {
                    return true;
                }
                if ((Game1.tile[x - 1, y].wall == 0) || Game1.wallHouse[Game1.tile[x - 1, y].wall])
                {
                    return true;
                }
                if ((Game1.tile[x + 1, y].wall == 0) || Game1.wallHouse[Game1.tile[x + 1, y].wall])
                {
                    return true;
                }
                if ((Game1.tile[x, y - 1].wall == 0) || Game1.wallHouse[Game1.tile[x, y - 1].wall])
                {
                    return true;
                }
                if ((Game1.tile[x, y + 1].wall == 0) || Game1.wallHouse[Game1.tile[x, y + 1].wall])
                {
                    return true;
                }
            }
            catch
            {
            }
            return false;
        }

        public static bool nearPicture(int x, int y)
        {
            for (int i = x - 4; i <= (x + 3); i++)
            {
                for (int j = y - 3; j <= (y + 2); j++)
                {
                    if (Game1.tile[i, j].active())
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public static bool nearPicture2(int x, int y)
        {
            if (((Game1.tile[x, y].wall != 7) && (Game1.tile[x, y].wall != 8)) && (Game1.tile[x, y].wall != 9))
            {
                for (int i = x - 8; i <= (x + 8); i++)
                {
                    for (int j = y - 5; j <= (y + 5); j++)
                    {
                        if (Game1.tile[i, j].active() && (((Game1.tile[i, j].type == 240) || (Game1.tile[i, j].type == 0xf1)) || (Game1.tile[i, j].type == 0xf2)))
                        {
                            return true;
                        }
                    }
                }
            }
            else
            {
                for (int k = x - 15; k <= (x + 15); k++)
                {
                    for (int m = y - 10; m <= (y + 10); m++)
                    {
                        if (Game1.tile[k, m].active() && (((Game1.tile[k, m].type == 240) || (Game1.tile[k, m].type == 0xf1)) || (Game1.tile[k, m].type == 0xf2)))
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        public static void nextCount(int x, int y, bool jungle = false, bool lavaOk = false)
        {
            if (numTileCount < maxTileCount)
            {
                if (((x <= 1) || (x >= (Game1.maxTilesX - 1))) || ((y <= 1) || (y >= (Game1.maxTilesY - 1))))
                {
                    numTileCount = maxTileCount;
                }
                else
                {
                    for (int i = 0; i < numTileCount; i++)
                    {
                        if ((countX[i] == x) && (countY[i] == y))
                        {
                            return;
                        }
                    }
                    if (!jungle)
                    {
                        if (Game1.tile[x, y].wall != 0)
                        {
                            numTileCount = maxTileCount;
                            return;
                        }
                        if (!lavaOk)
                        {
                            if (Game1.tile[x, y].lava() && (Game1.tile[x, y].liquid > 0))
                            {
                                lavaCount++;
                                numTileCount = maxTileCount;
                                return;
                            }
                        }
                        else if (Game1.tile[x, y].lava() && (Game1.tile[x, y].liquid > 0))
                        {
                            lavaCount++;
                        }
                    }
                    if (Game1.tile[x, y].active())
                    {
                        if (Game1.tile[x, y].type == 1)
                        {
                            rockCount++;
                        }
                        if ((Game1.tile[x, y].type == 0x93) || (Game1.tile[x, y].type == 0xa1))
                        {
                            iceCount++;
                        }
                    }
                    if (!SolidTile(x, y))
                    {
                        countX[numTileCount] = x;
                        countY[numTileCount] = y;
                        numTileCount++;
                        nextCount(x - 1, y, jungle, lavaOk);
                        nextCount(x + 1, y, jungle, lavaOk);
                        nextCount(x, y - 1, jungle, lavaOk);
                        nextCount(x, y + 1, jungle, lavaOk);
                    }
                }
            }
        }

        public static void nextDirtCount(int x, int y)
        {
            if (numTileCount < maxTileCount)
            {
                if (((x <= 1) || (x >= (Game1.maxTilesX - 1))) || ((y <= 1) || (y >= (Game1.maxTilesY - 1))))
                {
                    numTileCount = maxTileCount;
                }
                else
                {
                    for (int i = 0; i < numTileCount; i++)
                    {
                        if ((countX[i] == x) && (countY[i] == y))
                        {
                            return;
                        }
                    }
                    if (Game1.tile[x, y].active() && ((Game1.tile[x, y].type == 0x93) || (Game1.tile[x, y].type == 0xa1)))
                    {
                        numTileCount = maxTileCount;
                    }
                    else if (((Game1.tile[x, y].wall == 0x4e) || (Game1.tile[x, y].wall == 0x53)) || (Game1.tile[x, y].wall == 3))
                    {
                        numTileCount = maxTileCount;
                    }
                    else if (!SolidTile(x, y) && ((Game1.tile[x, y].wall == 2) || (Game1.tile[x, y].wall == 0x3b)))
                    {
                        countX[numTileCount] = x;
                        countY[numTileCount] = y;
                        numTileCount++;
                        nextDirtCount(x - 1, y);
                        nextDirtCount(x + 1, y);
                        nextDirtCount(x, y - 1);
                        nextDirtCount(x, y + 1);
                        nextDirtCount(x - 1, y - 1);
                        nextDirtCount(x - 1, y + 1);
                        nextDirtCount(x + 1, y - 1);
                        nextDirtCount(x + 1, y + 1);
                        nextDirtCount(x - 2, y);
                        nextDirtCount(x + 2, y);
                    }
                }
            }
        }

        public static bool NextNPC()
        {
            if (CheckConditions(spawnNPC))
            {
                bool flag = false;
                for (int j = 0; j < 200; j++)
                {
                    if (Game1.npc[j].type == spawnNPC)
                    {
                        flag = true;
                    }
                }
                if (flag)
                {
                    return true;
                }
            }
            for (int i = 0; i < 540; i++)
            {
                if (Game1.nextNPC[i] && CheckConditions(i))
                {
                    bool flag2 = false;
                    for (int k = 0; k < 200; k++)
                    {
                        if (Game1.npc[k].type == i)
                        {
                            flag2 = true;
                        }
                    }
                    if (!flag2)
                    {
                        spawnNPC = i;
                        return true;
                    }
                    Game1.nextNPC[i] = false;
                }
            }
            return false;
        }

        public static bool OpenDoor(int i, int j, int direction)
        {
            int num5;
            int y = 0;
            if (Game1.tile[i, j - 1] == null)
            {
                Game1.tile[i, j - 1] = new Tile();
            }
            if (Game1.tile[i, j - 2] == null)
            {
                Game1.tile[i, j - 2] = new Tile();
            }
            if (Game1.tile[i, j + 1] == null)
            {
                Game1.tile[i, j + 1] = new Tile();
            }
            if (Game1.tile[i, j] == null)
            {
                Game1.tile[i, j] = new Tile();
            }
            if (Game1.tile[i, j].type != 10)
            {
                return false;
            }
            if ((Game1.tile[i, j].frameY >= 0x252) && (Game1.tile[i, j].frameY <= 0x286))
            {
                return false;
            }
            int frameY = Game1.tile[i, j].frameY;
            int num3 = 0;
            while (frameY >= 0x36)
            {
                frameY -= 0x36;
                num3++;
            }
            y = j - (frameY / 0x12);
            int x = i;
            byte color = Game1.tile[x, y].color();
            if (Game1.tile[x, y + 1] == null)
            {
                Game1.tile[x, y + 1] = new Tile();
            }
            byte num7 = Game1.tile[x, y + 1].color();
            if (Game1.tile[x, y + 2] == null)
            {
                Game1.tile[x, y + 2] = new Tile();
            }
            byte num8 = Game1.tile[x, y + 2].color();
            short num9 = 0;
            if (direction == -1)
            {
                x = i - 1;
                num9 = 0x24;
                num5 = i - 1;
            }
            else
            {
                x = i;
                num5 = i + 1;
            }
            for (int k = y; k < (y + 3); k++)
            {
                if (Game1.tile[num5, k] == null)
                {
                    Game1.tile[num5, k] = new Tile();
                }
                if (Game1.tile[num5, k].active())
                {
                    if ((((!Game1.tileCut[Game1.tile[num5, k].type] && (Game1.tile[num5, k].type != 3)) && ((Game1.tile[num5, k].type != 0x18) && (Game1.tile[num5, k].type != 0x34))) && (((Game1.tile[num5, k].type != 0x3d) && (Game1.tile[num5, k].type != 0x3e)) && ((Game1.tile[num5, k].type != 0x45) && (Game1.tile[num5, k].type != 0x47)))) && (((Game1.tile[num5, k].type != 0x49) && (Game1.tile[num5, k].type != 0x4a)) && (((Game1.tile[num5, k].type != 110) && (Game1.tile[num5, k].type != 0x71)) && (Game1.tile[num5, k].type != 0x73))))
                    {
                        return false;
                    }
                    KillTile(num5, k, false, false, false);
                }
            }
            if ((Game1.netMode != 1) && Wiring.running)
            {
                Wiring.SkipWire(x, y);
                Wiring.SkipWire(x, y + 1);
                Wiring.SkipWire(x, y + 2);
                Wiring.SkipWire(x + 1, y);
                Wiring.SkipWire(x + 1, y + 1);
                Wiring.SkipWire(x + 1, y + 2);
            }
            int num11 = num3 * 0x36;
            Game1.PlaySound(8, i * 0x10, j * 0x10, 1);
            Game1.tile[x, y].active(true);
            Game1.tile[x, y].type = 11;
            Game1.tile[x, y].frameY = (short)num11;
            Game1.tile[x, y].frameX = num9;
            Game1.tile[x, y].color(color);
            if (Game1.tile[x + 1, y] == null)
            {
                Game1.tile[x + 1, y] = new Tile();
            }
            Game1.tile[x + 1, y].active(true);
            Game1.tile[x + 1, y].type = 11;
            Game1.tile[x + 1, y].frameY = (short)num11;
            Game1.tile[x + 1, y].frameX = (short)(num9 + 0x12);
            Game1.tile[x + 1, y].color(color);
            if (Game1.tile[x, y + 1] == null)
            {
                Game1.tile[x, y + 1] = new Tile();
            }
            Game1.tile[x, y + 1].active(true);
            Game1.tile[x, y + 1].type = 11;
            Game1.tile[x, y + 1].frameY = (short)(num11 + 0x12);
            Game1.tile[x, y + 1].frameX = num9;
            Game1.tile[x, y + 1].color(num7);
            if (Game1.tile[x + 1, y + 1] == null)
            {
                Game1.tile[x + 1, y + 1] = new Tile();
            }
            Game1.tile[x + 1, y + 1].active(true);
            Game1.tile[x + 1, y + 1].type = 11;
            Game1.tile[x + 1, y + 1].frameY = (short)(num11 + 0x12);
            Game1.tile[x + 1, y + 1].frameX = (short)(num9 + 0x12);
            Game1.tile[x + 1, y + 1].color(num7);
            if (Game1.tile[x, y + 2] == null)
            {
                Game1.tile[x, y + 2] = new Tile();
            }
            Game1.tile[x, y + 2].active(true);
            Game1.tile[x, y + 2].type = 11;
            Game1.tile[x, y + 2].frameY = (short)(num11 + 0x24);
            Game1.tile[x, y + 2].frameX = num9;
            Game1.tile[x, y + 2].color(num8);
            if (Game1.tile[x + 1, y + 2] == null)
            {
                Game1.tile[x + 1, y + 2] = new Tile();
            }
            Game1.tile[x + 1, y + 2].active(true);
            Game1.tile[x + 1, y + 2].type = 11;
            Game1.tile[x + 1, y + 2].frameY = (short)(num11 + 0x24);
            Game1.tile[x + 1, y + 2].frameX = (short)(num9 + 0x12);
            Game1.tile[x + 1, y + 2].color(num8);
            for (int m = x - 1; m <= (x + 2); m++)
            {
                for (int n = y - 1; n <= (y + 2); n++)
                {
                    TileFrame(m, n, false, false);
                }
            }
            return true;
        }

        public static void OreRunner(int i, int j, double strength, int steps, ushort type)
        {
            Vector2 vector;
            Vector2 vector2;
            double num5 = strength;
            float num6 = steps;
            vector.X = i;
            vector.Y = j;
            vector2.X = genRand.Next(-10, 11) * 0.1f;
            vector2.Y = genRand.Next(-10, 11) * 0.1f;
            while ((num5 > 0.0) && (num6 > 0f))
            {
                if (((vector.Y < 0f) && (num6 > 0f)) && (type == 0x3b))
                {
                    num6 = 0f;
                }
                num5 = strength * (num6 / ((float)steps));
                num6--;
                int num = (int)(vector.X - (num5 * 0.5));
                int maxTilesX = (int)(vector.X + (num5 * 0.5));
                int num2 = (int)(vector.Y - (num5 * 0.5));
                int maxTilesY = (int)(vector.Y + (num5 * 0.5));
                if (num < 0)
                {
                    num = 0;
                }
                if (maxTilesX > Game1.maxTilesX)
                {
                    maxTilesX = Game1.maxTilesX;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                for (int k = num; k < maxTilesX; k++)
                {
                    for (int m = num2; m < maxTilesY; m++)
                    {
                        if ((((Math.Abs((float)(k - vector.X)) + Math.Abs((float)(m - vector.Y))) < ((strength * 0.5) * (1.0 + (genRand.Next(-10, 11) * 0.015)))) && Game1.tile[k, m].active()) && (((((Game1.tile[k, m].type == 0) || (Game1.tile[k, m].type == 1)) || ((Game1.tile[k, m].type == 0x17) || (Game1.tile[k, m].type == 0x19))) || (((Game1.tile[k, m].type == 40) || (Game1.tile[k, m].type == 0x35)) || ((Game1.tile[k, m].type == 0x39) || (Game1.tile[k, m].type == 0x3b)))) || (((((Game1.tile[k, m].type == 60) || (Game1.tile[k, m].type == 70)) || ((Game1.tile[k, m].type == 0x6d) || (Game1.tile[k, m].type == 0x70))) || (((Game1.tile[k, m].type == 0x74) || (Game1.tile[k, m].type == 0x75)) || ((Game1.tile[k, m].type == 0x93) || (Game1.tile[k, m].type == 0xa1)))) || ((((Game1.tile[k, m].type == 0xa3) || (Game1.tile[k, m].type == 0xa4)) || (Game1.tileMoss[Game1.tile[k, m].type] || (Game1.tile[k, m].type == 0xc7))) || (((Game1.tile[k, m].type == 200) || (Game1.tile[k, m].type == 0xcb)) || (Game1.tile[k, m].type == 0xea))))))
                        {
                            Game1.tile[k, m].type = type;
                            SquareTileFrame(k, m, true);
                            if (Game1.netMode == 2)
                            {
                                NetMessage.SendTileSquare(-1, k, m, 1);
                            }
                        }
                    }
                }
                vector += vector2;
                vector2.X += genRand.Next(-10, 11) * 0.05f;
                if (vector2.X > 1f)
                {
                    vector2.X = 1f;
                }
                if (vector2.X < -1f)
                {
                    vector2.X = -1f;
                }
            }
        }

        public static void outerTempled(int x, int y)
        {
            if (!(Game1.tile[x, y].active() & (Game1.tile[x, y].type == 0xe2)) && (Game1.tile[x, y].wall != 0x57))
            {
                int num = 6;
                for (int i = x - num; i <= (x + num); i++)
                {
                    for (int j = y - num; j <= (y + num); j++)
                    {
                        if (!Game1.tile[i, j].active() && (Game1.tile[i, j].wall == 0x57))
                        {
                            i = x;
                            j = y;
                            Game1.tile[i, j].active(true);
                            Game1.tile[i, j].type = 0xe2;
                            Game1.tile[i, j].liquid = 0;
                            Game1.tile[i, j].slope(0);
                            Game1.tile[i, j].halfBrick(false);
                            return;
                        }
                    }
                }
            }
        }

        public static Color paintColor(int color)
        {
            Color white = Color.White;
            int num = color;
            if ((num == 1) || (num == 13))
            {
                white.R = 0xff;
                white.G = 0;
                white.B = 0;
            }
            if ((num == 2) || (num == 14))
            {
                white.R = 0xff;
                white.G = 0x7f;
                white.B = 0;
            }
            if ((num == 3) || (num == 15))
            {
                white.R = 0xff;
                white.G = 0xff;
                white.B = 0;
            }
            if ((num == 4) || (num == 0x10))
            {
                white.R = 0x7f;
                white.G = 0xff;
                white.B = 0;
            }
            if ((num == 5) || (num == 0x11))
            {
                white.R = 0;
                white.G = 0xff;
                white.B = 0;
            }
            if ((num == 6) || (num == 0x12))
            {
                white.R = 0;
                white.G = 0xff;
                white.B = 0x7f;
            }
            if ((num == 7) || (num == 0x13))
            {
                white.R = 0;
                white.G = 0xff;
                white.B = 0xff;
            }
            if ((num == 8) || (num == 20))
            {
                white.R = 0;
                white.G = 0x7f;
                white.B = 0xff;
            }
            if ((num == 9) || (num == 0x15))
            {
                white.R = 0;
                white.G = 0;
                white.B = 0xff;
            }
            if ((num == 10) || (num == 0x16))
            {
                white.R = 0x7f;
                white.G = 0;
                white.B = 0xff;
            }
            if ((num == 11) || (num == 0x17))
            {
                white.R = 0xff;
                white.G = 0;
                white.B = 0xff;
            }
            if ((num == 12) || (num == 0x18))
            {
                white.R = 0xff;
                white.G = 0;
                white.B = 0x7f;
            }
            switch (num)
            {
                case 0x19:
                    white.R = 0x4b;
                    white.G = 0x4b;
                    white.B = 0x4b;
                    break;

                case 0x1a:
                    white.R = 0xff;
                    white.G = 0xff;
                    white.B = 0xff;
                    break;

                case 0x1b:
                    white.R = 0xaf;
                    white.G = 0xaf;
                    white.B = 0xaf;
                    break;

                case 0x1c:
                    white.R = 0xff;
                    white.G = 0xb2;
                    white.B = 0x7d;
                    break;

                case 0x1d:
                    white.R = 0x19;
                    white.G = 0x19;
                    white.B = 0x19;
                    break;

                case 30:
                    white.R = 200;
                    white.G = 200;
                    white.B = 200;
                    white.A = 150;
                    break;
            }
            return white;
        }

        public static void paintEffect(int x, int y, byte color, byte oldColor)
        {
            int num = color;
            if (color == 0)
            {
                num = oldColor;
            }
            Color newColor = paintColor(num);
            for (int i = 0; i < 10; i++)
            {
                int index = Dust.NewDust(new Vector2((float)(x * 0x10), (float)(y * 0x10)), 0x10, 0x10, 0x8f, 0f, 0f, 50, newColor, 1f);
                if (genRand.Next(2) == 0)
                {
                    Game1.dust[index].noGravity = true;
                    Dust dust1 = Game1.dust[index];
                    dust1.scale *= 1.2f;
                }
                else
                {
                    Dust dust2 = Game1.dust[index];
                    dust2.scale *= 0.5f;
                }
            }
        }

        public static bool paintTile(int x, int y, byte color, bool broadCast = false)
        {
            if ((Game1.tile[x, y] == null) || !Game1.tile[x, y].active())
            {
                return false;
            }
            byte oldColor = Game1.tile[x, y].color();
            Game1.tile[x, y].color(color);
            if (broadCast)
            {
                NetMessage.SendData(0x3f, -1, -1, "", x, (float)y, (float)color, 0f, 0, 0, 0);
            }
            paintEffect(x, y, color, oldColor);
            return true;
        }

        public static bool paintWall(int x, int y, byte color, bool broadCast = false)
        {
            if ((Game1.tile[x, y] == null) || (Game1.tile[x, y].wall == 0))
            {
                return false;
            }
            byte oldColor = Game1.tile[x, y].wallColor();
            Game1.tile[x, y].wallColor(color);
            if (broadCast)
            {
                NetMessage.SendData(0x40, -1, -1, "", x, (float)y, (float)color, 0f, 0, 0, 0);
            }
            paintEffect(x, y, color, oldColor);
            return true;
        }

        public static void Place1x1(int x, int y, int type, int style = 0)
        {
            Tile tile = Game1.tile[x, y];
            if (Game1.tile[x, y] == null)
            {
                tile = new Tile();
                Game1.tile[x, y] = tile;
            }
            if (Game1.tile[x, y + 1] == null)
            {
                Game1.tile[x, y + 1] = new Tile();
            }
            if (type == 0x144)
            {
                if (SolidTile2(x, y + 1) || (Game1.tile[x, y + 1].nactive() && Game1.tileTable[Game1.tile[x, y + 1].type]))
                {
                    tile.active(true);
                    tile.type = (ushort)type;
                    tile.frameX = (short)(0x16 * genRand.Next(2));
                    tile.frameY = (short)(0x16 * style);
                }
            }
            else if (SolidTile2(x, y + 1) && !tile.active())
            {
                tile.active(true);
                tile.type = (ushort)type;
                if (type == 0x144)
                {
                    tile.frameX = (short)(0x16 * genRand.Next(2));
                    tile.frameY = (short)(0x16 * style);
                }
                else if (((type == 0x90) || (type == 0xef)) || (type == 0x24))
                {
                    tile.frameX = (short)(style * 0x12);
                    tile.frameY = 0;
                }
                else
                {
                    tile.frameY = (short)(style * 0x12);
                }
            }
        }

        public static void Place1x2(int x, int y, ushort type, int style)
        {
            short num = 0;
            if (type == 20)
            {
                num = (short)(genRand.Next(3) * 0x12);
            }
            if (Game1.tile[x, y - 1] == null)
            {
                Game1.tile[x, y - 1] = new Tile();
            }
            if (Game1.tile[x, y + 1] == null)
            {
                Game1.tile[x, y + 1] = new Tile();
            }
            if (SolidTile2(x, y + 1) & !Game1.tile[x, y - 1].active())
            {
                short num2 = (short)(style * 40);
                Game1.tile[x, y - 1].active(true);
                Game1.tile[x, y - 1].frameY = num2;
                Game1.tile[x, y - 1].frameX = num;
                Game1.tile[x, y - 1].type = type;
                Game1.tile[x, y].active(true);
                Game1.tile[x, y].frameY = (short)(num2 + 0x12);
                Game1.tile[x, y].frameX = num;
                Game1.tile[x, y].type = type;
            }
        }

        public static void Place1x2Top(int x, int y, ushort type, int style)
        {
            short num = 0;
            if (Game1.tile[x, y - 1] == null)
            {
                Game1.tile[x, y - 1] = new Tile();
            }
            if (Game1.tile[x, y + 1] == null)
            {
                Game1.tile[x, y + 1] = new Tile();
            }
            if ((Game1.tile[x, y - 1].nactive() && Game1.tileSolid[Game1.tile[x, y - 1].type]) && (!Game1.tileSolidTop[Game1.tile[x, y - 1].type] && !Game1.tile[x, y + 1].active()))
            {
                short num2 = (short)(style * 0x24);
                Game1.tile[x, y].active(true);
                Game1.tile[x, y].frameY = num2;
                Game1.tile[x, y].frameX = num;
                Game1.tile[x, y].type = type;
                Game1.tile[x, y + 1].active(true);
                Game1.tile[x, y + 1].frameY = (short)(num2 + 0x12);
                Game1.tile[x, y + 1].frameX = num;
                Game1.tile[x, y + 1].type = type;
            }
        }

        public static void Place1xX(int x, int y, ushort type, int style = 0)
        {
            int num = style * 0x12;
            int num2 = 3;
            if (type == 0x5c)
            {
                num2 = 6;
            }
            bool flag = true;
            for (int i = (y - num2) + 1; i < (y + 1); i++)
            {
                if (Game1.tile[x, i] == null)
                {
                    Game1.tile[x, i] = new Tile();
                }
                if (Game1.tile[x, i].active())
                {
                    flag = false;
                }
                if ((type == 0x5d) && (Game1.tile[x, i].liquid > 0))
                {
                    flag = false;
                }
            }
            if (flag && SolidTile2(x, y + 1))
            {
                for (int j = 0; j < num2; j++)
                {
                    Game1.tile[x, ((y - num2) + 1) + j].active(true);
                    Game1.tile[x, ((y - num2) + 1) + j].frameY = (short)((j * 0x12) + (num2 * num));
                    Game1.tile[x, ((y - num2) + 1) + j].frameX = 0;
                    Game1.tile[x, ((y - num2) + 1) + j].type = type;
                }
            }
        }

        public static void Place2x1(int x, int y, ushort type, int style = 0)
        {
            if (Game1.tile[x, y] == null)
            {
                Game1.tile[x, y] = new Tile();
            }
            if (Game1.tile[x + 1, y] == null)
            {
                Game1.tile[x + 1, y] = new Tile();
            }
            if (Game1.tile[x, y + 1] == null)
            {
                Game1.tile[x, y + 1] = new Tile();
            }
            if (Game1.tile[x + 1, y + 1] == null)
            {
                Game1.tile[x + 1, y + 1] = new Tile();
            }
            bool flag = false;
            if ((((type != 0x1d) && (type != 0x67)) && (SolidTile2(x, y + 1) && SolidTile2(x + 1, y + 1))) && (!Game1.tile[x, y].active() && !Game1.tile[x + 1, y].active()))
            {
                flag = true;
            }
            else if (((type == 0x1d) || (type == 0x67)) && (((Game1.tile[x, y + 1].active() && Game1.tile[x + 1, y + 1].active()) && (Game1.tileTable[Game1.tile[x, y + 1].type] && Game1.tileTable[Game1.tile[x + 1, y + 1].type])) && (!Game1.tile[x, y].active() && !Game1.tile[x + 1, y].active())))
            {
                flag = true;
            }
            if (flag)
            {
                Game1.tile[x, y].active(true);
                Game1.tile[x, y].frameY = 0;
                Game1.tile[x, y].frameX = (short)(0x24 * style);
                Game1.tile[x, y].type = type;
                Game1.tile[x + 1, y].active(true);
                Game1.tile[x + 1, y].frameY = 0;
                Game1.tile[x + 1, y].frameX = (short)((0x24 * style) + 0x12);
                Game1.tile[x + 1, y].type = type;
            }
        }

        public static void Place2x2(int x, int y, ushort type, int style)
        {
            if ((type == 0x5f) || (type == 0x7e))
            {
                y++;
            }
            if (((x >= 5) && (x <= (Game1.maxTilesX - 5))) && ((y >= 5) && (y <= (Game1.maxTilesY - 5))))
            {
                Tile tileSafely;
                if (type == 0xac)
                {
                    if (!CanPlaceSink(x, y, type, style))
                    {
                        return;
                    }
                }
                else
                {
                    for (int j = x - 1; j < (x + 1); j++)
                    {
                        for (int k = y - 1; k < (y + 1); k++)
                        {
                            tileSafely = Framing.GetTileSafely(j, k);
                            if (tileSafely.active())
                            {
                                return;
                            }
                            if ((type == 0x62) && (tileSafely.liquid > 0))
                            {
                                return;
                            }
                        }
                        if ((type == 0x5f) || (type == 0x7e))
                        {
                            tileSafely = Framing.GetTileSafely(j, y - 2);
                            if ((!tileSafely.nactive() || !Game1.tileSolid[tileSafely.type]) || Game1.tileSolidTop[tileSafely.type])
                            {
                                return;
                            }
                        }
                        else if (type != 0x84)
                        {
                            tileSafely = Framing.GetTileSafely(j, y + 1);
                            if (!tileSafely.nactive() || (!SolidTile2(tileSafely) && !Game1.tileTable[tileSafely.type]))
                            {
                                return;
                            }
                        }
                    }
                }
                if (type == 0x84)
                {
                    bool flag = true;
                    if (Game1.tile[x - 1, y + 1] == null)
                    {
                        Game1.tile[x - 1, y + 1] = new Tile();
                    }
                    if (Game1.tile[x, y + 1] == null)
                    {
                        Game1.tile[x, y + 1] = new Tile();
                    }
                    if (!Game1.tile[x - 1, y + 1].nactive() || (!SolidTile2(x - 1, y + 1) && !Game1.tileTable[Game1.tile[x - 1, y + 1].type]))
                    {
                        flag = false;
                    }
                    if (!Game1.tile[x, y + 1].nactive() || (!SolidTile2(x, y + 1) && !Game1.tileTable[Game1.tile[x, y + 1].type]))
                    {
                        flag = false;
                    }
                    if (!flag && (((Game1.tile[x - 1, y - 1].wall < 1) || (Game1.tile[x, y - 1].wall < 1)) || ((Game1.tile[x - 1, y].wall < 1) || (Game1.tile[x - 1, y].wall < 1))))
                    {
                        return;
                    }
                }
                x--;
                y--;
                int num3 = (type == 0xac) ? 0x26 : 0x24;
                for (int i = 0; i < 2; i++)
                {
                    for (int m = 0; m < 2; m++)
                    {
                        tileSafely = Game1.tile[x + i, y + m];
                        tileSafely.active(true);
                        tileSafely.frameX = (short)(i * 0x12);
                        tileSafely.frameY = (short)((style * num3) + (m * 0x12));
                        tileSafely.type = type;
                    }
                }
            }
        }

        public static bool Place2x2Horizontal(int x, int y, ushort type, int Style = 0)
        {
            int num = x - 2;
            int num2 = x + 3;
            int num3 = y - 2;
            int num4 = y + 3;
            if (num >= 0)
            {
                if (num2 > Game1.maxTilesX)
                {
                    return false;
                }
                if (num3 < 0)
                {
                    return false;
                }
                if (num4 > Game1.maxTilesY)
                {
                    return false;
                }
                for (int i = num; i < num2; i++)
                {
                    for (int j = num3; j < num4; j++)
                    {
                        if (Game1.tile[i, j] == null)
                        {
                            Game1.tile[i, j] = new Tile();
                        }
                    }
                }
                int num7 = x;
                int num8 = y;
                int num9 = 0;
                if (SolidTile2(x, y + 1) && SolidTile2(x + 1, y + 1))
                {
                    num8--;
                    num9 = Style;
                    if ((Game1.tile[num7, num8].active() || Game1.tile[num7 + 1, num8].active()) || (Game1.tile[num7, num8 + 1].active() || Game1.tile[num7 + 1, num8 + 1].active()))
                    {
                        return false;
                    }
                    int num10 = 0x24 * num9;
                    for (int k = 0; k < 2; k++)
                    {
                        for (int m = 0; m < 2; m++)
                        {
                            Game1.tile[num7 + k, num8 + m].active(true);
                            Game1.tile[num7 + k, num8 + m].type = type;
                            Game1.tile[num7 + k, num8 + m].frameX = (short)(num10 + (0x12 * k));
                            Game1.tile[num7 + k, num8 + m].frameY = (short)(0x12 * m);
                        }
                    }
                    return true;
                }
            }
            return false;
        }

        public static void Place2x2Style(int x, int y, ushort type, int style = 0)
        {
            if (((x >= 5) && (x <= (Game1.maxTilesX - 5))) && ((y >= 5) && (y <= (Game1.maxTilesY - 5))))
            {
                short num = 0;
                if (type == 0xfe)
                {
                    num = (short)((x % 12) / 2);
                    num = (short)(num * 0x24);
                }
                bool flag = true;
                for (int i = x - 1; i < (x + 1); i++)
                {
                    for (int j = y - 1; j < (y + 1); j++)
                    {
                        if (Game1.tile[i, j] == null)
                        {
                            Game1.tile[i, j] = new Tile();
                        }
                        if (Game1.tile[i, j].active())
                        {
                            flag = false;
                        }
                    }
                    if (Game1.tile[i, y + 1] == null)
                    {
                        Game1.tile[i, y + 1] = new Tile();
                    }
                    if (!SolidTile(i, y + 1))
                    {
                        flag = false;
                    }
                    if (((type == 0xfe) && (Game1.tile[i, y + 1].type != 2)) && (Game1.tile[i, y + 1].type != 0x6d))
                    {
                        flag = false;
                    }
                }
                if (flag)
                {
                    short num4 = (short)(0x24 * style);
                    Game1.tile[x - 1, y - 1].active(true);
                    Game1.tile[x - 1, y - 1].frameY = num;
                    Game1.tile[x - 1, y - 1].frameX = num4;
                    Game1.tile[x - 1, y - 1].type = type;
                    Game1.tile[x, y - 1].active(true);
                    Game1.tile[x, y - 1].frameY = num;
                    Game1.tile[x, y - 1].frameX = (short)(num4 + 0x12);
                    Game1.tile[x, y - 1].type = type;
                    Game1.tile[x - 1, y].active(true);
                    Game1.tile[x - 1, y].frameY = (short)(num + 0x12);
                    Game1.tile[x - 1, y].frameX = num4;
                    Game1.tile[x - 1, y].type = type;
                    Game1.tile[x, y].active(true);
                    Game1.tile[x, y].frameY = (short)(num + 0x12);
                    Game1.tile[x, y].frameX = (short)(num4 + 0x12);
                    Game1.tile[x, y].type = type;
                }
            }
        }

        public static void Place2x3Wall(int x, int y, ushort type, int style)
        {
            int num = x;
            int num2 = y - 1;
            bool flag = true;
            for (int i = num; i < (num + 2); i++)
            {
                for (int j = num2; j < (num2 + 3); j++)
                {
                    if (Game1.tile[i, j].active() || (Game1.tile[i, j].wall == 0))
                    {
                        flag = false;
                        break;
                    }
                }
            }
            if (flag)
            {
                int num5 = style * 0x24;
                int num6 = 0;
                for (int k = num; k < (num + 2); k++)
                {
                    for (int m = num2; m < (num2 + 3); m++)
                    {
                        Game1.tile[k, m].active(true);
                        Game1.tile[k, m].type = type;
                        Game1.tile[k, m].frameX = (short)(num5 + (0x12 * (k - num)));
                        Game1.tile[k, m].frameY = (short)(num6 + (0x12 * (m - num2)));
                    }
                }
            }
        }

        public static void Place2xX(int x, int y, ushort type, int style = 0)
        {
            int num = style * 0x24;
            int num2 = 3;
            if ((type == 0x69) && (style == 0x22))
            {
                type = 0x15d;
                style = 0;
                num = 0;
            }
            if (type == 0x68)
            {
                num2 = 5;
            }
            if (type == 0xcf)
            {
                num2 = 4;
            }
            bool flag = true;
            for (int i = (y - num2) + 1; i < (y + 1); i++)
            {
                if (Game1.tile[x, i] == null)
                {
                    Game1.tile[x, i] = new Tile();
                }
                if (Game1.tile[x, i].active())
                {
                    flag = false;
                }
                if (Game1.tile[x + 1, i] == null)
                {
                    Game1.tile[x + 1, i] = new Tile();
                }
                if (Game1.tile[x + 1, i].active())
                {
                    flag = false;
                }
            }
            if ((flag && SolidTile2(x, y + 1)) && SolidTile2(x + 1, y + 1))
            {
                for (int j = 0; j < num2; j++)
                {
                    Game1.tile[x, ((y - num2) + 1) + j].active(true);
                    Game1.tile[x, ((y - num2) + 1) + j].frameY = (short)(j * 0x12);
                    Game1.tile[x, ((y - num2) + 1) + j].frameX = (short)num;
                    Game1.tile[x, ((y - num2) + 1) + j].type = type;
                    Game1.tile[x + 1, ((y - num2) + 1) + j].active(true);
                    Game1.tile[x + 1, ((y - num2) + 1) + j].frameY = (short)(j * 0x12);
                    Game1.tile[x + 1, ((y - num2) + 1) + j].frameX = (short)(num + 0x12);
                    Game1.tile[x + 1, ((y - num2) + 1) + j].type = type;
                }
            }
        }

        public static void Place3x1(int x, int y, ushort type, int style = 0)
        {
            if (((x >= 5) && (x <= (Game1.maxTilesX - 5))) && ((y >= 5) && (y <= (Game1.maxTilesY - 5))))
            {
                bool flag = true;
                for (int i = x - 1; i < (x + 2); i++)
                {
                    int num2 = y;
                    if (Game1.tile[i, num2] == null)
                    {
                        Game1.tile[i, num2] = new Tile();
                    }
                    if (Game1.tile[i, num2].active())
                    {
                        flag = false;
                    }
                    if (Game1.tile[i, y + 1] == null)
                    {
                        Game1.tile[i, y + 1] = new Tile();
                    }
                    if (!SolidTile2(i, y + 1))
                    {
                        flag = false;
                    }
                }
                if (flag)
                {
                    short num3 = (short)(0x36 * style);
                    Game1.tile[x - 1, y].active(true);
                    Game1.tile[x - 1, y].frameY = 0;
                    Game1.tile[x - 1, y].frameX = num3;
                    Game1.tile[x - 1, y].type = type;
                    Game1.tile[x, y].active(true);
                    Game1.tile[x, y].frameY = 0;
                    Game1.tile[x, y].frameX = (short)(num3 + 0x12);
                    Game1.tile[x, y].type = type;
                    Game1.tile[x + 1, y].active(true);
                    Game1.tile[x + 1, y].frameY = 0;
                    Game1.tile[x + 1, y].frameX = (short)(num3 + 0x24);
                    Game1.tile[x + 1, y].type = type;
                }
            }
        }

        public static void Place3x2(int x, int y, ushort type, int style = 0)
        {
            if (((x >= 5) && (x <= (Game1.maxTilesX - 5))) && ((y >= 5) && (y <= (Game1.maxTilesY - 5))))
            {
                bool flag = false;
                bool flag2 = true;
                if ((type == 14) && (style == 0x19))
                {
                    flag = true;
                }
                int num = y - 1;
                if (flag)
                {
                    num = y;
                }
                for (int i = x - 1; i < (x + 2); i++)
                {
                    for (int j = num; j < (y + 1); j++)
                    {
                        if (Game1.tile[i, j] == null)
                        {
                            Game1.tile[i, j] = new Tile();
                        }
                        if (Game1.tile[i, j].active())
                        {
                            flag2 = false;
                        }
                        if ((type == 0xd7) && (Game1.tile[i, j].liquid > 0))
                        {
                            flag2 = false;
                        }
                    }
                    if (Game1.tile[i, y + 1] == null)
                    {
                        Game1.tile[i, y + 1] = new Tile();
                    }
                    if ((((type == 0x11d) || (type == 0x11e)) || ((type == 0x12a) || (type == 0x12b))) || ((type == 310) || ((type >= 0x169) && (type <= 0x16c))))
                    {
                        if (!SolidTile2(i, y + 1) && ((!Game1.tile[i, y + 1].nactive() || !Game1.tileSolidTop[Game1.tile[i, y + 1].type]) || (Game1.tile[i, y + 1].frameY != 0)))
                        {
                            flag2 = false;
                        }
                    }
                    else if (!SolidTile2(i, y + 1))
                    {
                        flag2 = false;
                    }
                }
                if (type == 0x58)
                {
                    if (Chest.CreateChest(x - 1, y - 1, -1) == -1)
                    {
                        flag2 = false;
                    }
                    else if (Game1.netMode == 1)
                    {
                        NetMessage.SendData(0x22, -1, -1, "", 2, (float)x, (float)y, (float)style, 0, 0, 0);
                    }
                }
                if (flag2)
                {
                    short num5 = (short)(0x36 * style);
                    if (flag)
                    {
                        Game1.tile[x - 1, y].active(true);
                        Game1.tile[x - 1, y].frameY = 0;
                        Game1.tile[x - 1, y].frameX = num5;
                        Game1.tile[x - 1, y].type = type;
                        Game1.tile[x, y].active(true);
                        Game1.tile[x, y].frameY = 0;
                        Game1.tile[x, y].frameX = (short)(num5 + 0x12);
                        Game1.tile[x, y].type = type;
                        Game1.tile[x + 1, y].active(true);
                        Game1.tile[x + 1, y].frameY = 0;
                        Game1.tile[x + 1, y].frameX = (short)(num5 + 0x24);
                        Game1.tile[x + 1, y].type = type;
                    }
                    else
                    {
                        Game1.tile[x - 1, y - 1].active(true);
                        Game1.tile[x - 1, y - 1].frameY = 0;
                        Game1.tile[x - 1, y - 1].frameX = num5;
                        Game1.tile[x - 1, y - 1].type = type;
                        Game1.tile[x, y - 1].active(true);
                        Game1.tile[x, y - 1].frameY = 0;
                        Game1.tile[x, y - 1].frameX = (short)(num5 + 0x12);
                        Game1.tile[x, y - 1].type = type;
                        Game1.tile[x + 1, y - 1].active(true);
                        Game1.tile[x + 1, y - 1].frameY = 0;
                        Game1.tile[x + 1, y - 1].frameX = (short)(num5 + 0x24);
                        Game1.tile[x + 1, y - 1].type = type;
                        Game1.tile[x - 1, y].active(true);
                        Game1.tile[x - 1, y].frameY = 0x12;
                        Game1.tile[x - 1, y].frameX = num5;
                        Game1.tile[x - 1, y].type = type;
                        Game1.tile[x, y].active(true);
                        Game1.tile[x, y].frameY = 0x12;
                        Game1.tile[x, y].frameX = (short)(num5 + 0x12);
                        Game1.tile[x, y].type = type;
                        Game1.tile[x + 1, y].active(true);
                        Game1.tile[x + 1, y].frameY = 0x12;
                        Game1.tile[x + 1, y].frameX = (short)(num5 + 0x24);
                        Game1.tile[x + 1, y].type = type;
                    }
                }
            }
        }

        public static void Place3x2Wall(int x, int y, ushort type, int style)
        {
            int num = x - 1;
            int num2 = y;
            bool flag = true;
            for (int i = num; i < (num + 3); i++)
            {
                for (int j = num2; j < (num2 + 2); j++)
                {
                    if (Game1.tile[i, j].active() || (Game1.tile[i, j].wall == 0))
                    {
                        flag = false;
                        break;
                    }
                }
            }
            if (flag)
            {
                int num5 = 0;
                int num6 = style * 0x24;
                for (int k = num; k < (num + 3); k++)
                {
                    for (int m = num2; m < (num2 + 2); m++)
                    {
                        Game1.tile[k, m].active(true);
                        Game1.tile[k, m].type = type;
                        Game1.tile[k, m].frameX = (short)(num5 + (0x12 * (k - num)));
                        Game1.tile[k, m].frameY = (short)(num6 + (0x12 * (m - num2)));
                    }
                }
            }
        }

        public static void Place3x3(int x, int y, ushort type, int style = 0)
        {
            bool flag = true;
            int num = 0;
            if ((((((type == 0x6a) || (type == 0xd4)) || ((type == 0xdb) || (type == 220))) || (((type == 0xe4) || (type == 0xe7)) || ((type == 0xf3) || (type == 0xf7)))) || ((type == 0x11b) || ((type >= 300) && (type <= 0x134)))) || ((type == 0x162) || (type == 0x163)))
            {
                num = -2;
                for (int i = x - 1; i < (x + 2); i++)
                {
                    for (int k = y - 2; k < (y + 1); k++)
                    {
                        if (Game1.tile[i, k] == null)
                        {
                            Game1.tile[i, k] = new Tile();
                        }
                        if (Game1.tile[i, k].active())
                        {
                            flag = false;
                        }
                    }
                }
                for (int j = x - 1; j < (x + 2); j++)
                {
                    if (Game1.tile[j, y + 1] == null)
                    {
                        Game1.tile[j, y + 1] = new Tile();
                    }
                    if (!SolidTile2(j, y + 1))
                    {
                        flag = false;
                        break;
                    }
                }
            }
            else
            {
                for (int m = x - 1; m < (x + 2); m++)
                {
                    for (int n = y; n < (y + 3); n++)
                    {
                        if (Game1.tile[m, n] == null)
                        {
                            Game1.tile[m, n] = new Tile();
                        }
                        if (Game1.tile[m, n].active())
                        {
                            flag = false;
                        }
                    }
                }
                if (Game1.tile[x, y - 1] == null)
                {
                    Game1.tile[x, y - 1] = new Tile();
                }
                if ((!Game1.tile[x, y - 1].nactive() || !Game1.tileSolid[Game1.tile[x, y - 1].type]) || Game1.tileSolidTop[Game1.tile[x, y - 1].type])
                {
                    flag = false;
                }
            }
            if (flag)
            {
                int num7 = (style * 0x12) * 3;
                Game1.tile[x - 1, y + num].active(true);
                Game1.tile[x - 1, y + num].frameY = 0;
                Game1.tile[x - 1, y + num].frameX = (short)num7;
                Game1.tile[x - 1, y + num].type = type;
                Game1.tile[x, y + num].active(true);
                Game1.tile[x, y + num].frameY = 0;
                Game1.tile[x, y + num].frameX = (short)(num7 + 0x12);
                Game1.tile[x, y + num].type = type;
                Game1.tile[x + 1, y + num].active(true);
                Game1.tile[x + 1, y + num].frameY = 0;
                Game1.tile[x + 1, y + num].frameX = (short)(num7 + 0x24);
                Game1.tile[x + 1, y + num].type = type;
                Game1.tile[x - 1, (y + 1) + num].active(true);
                Game1.tile[x - 1, (y + 1) + num].frameY = 0x12;
                Game1.tile[x - 1, (y + 1) + num].frameX = (short)num7;
                Game1.tile[x - 1, (y + 1) + num].type = type;
                Game1.tile[x, (y + 1) + num].active(true);
                Game1.tile[x, (y + 1) + num].frameY = 0x12;
                Game1.tile[x, (y + 1) + num].frameX = (short)(num7 + 0x12);
                Game1.tile[x, (y + 1) + num].type = type;
                Game1.tile[x + 1, (y + 1) + num].active(true);
                Game1.tile[x + 1, (y + 1) + num].frameY = 0x12;
                Game1.tile[x + 1, (y + 1) + num].frameX = (short)(num7 + 0x24);
                Game1.tile[x + 1, (y + 1) + num].type = type;
                Game1.tile[x - 1, (y + 2) + num].active(true);
                Game1.tile[x - 1, (y + 2) + num].frameY = 0x24;
                Game1.tile[x - 1, (y + 2) + num].frameX = (short)num7;
                Game1.tile[x - 1, (y + 2) + num].type = type;
                Game1.tile[x, (y + 2) + num].active(true);
                Game1.tile[x, (y + 2) + num].frameY = 0x24;
                Game1.tile[x, (y + 2) + num].frameX = (short)(num7 + 0x12);
                Game1.tile[x, (y + 2) + num].type = type;
                Game1.tile[x + 1, (y + 2) + num].active(true);
                Game1.tile[x + 1, (y + 2) + num].frameY = 0x24;
                Game1.tile[x + 1, (y + 2) + num].frameX = (short)(num7 + 0x24);
                Game1.tile[x + 1, (y + 2) + num].type = type;
            }
        }

        public static void Place3x3Wall(int x, int y, ushort type, int style)
        {
            int num = x - 1;
            int num2 = y - 1;
            bool flag = true;
            for (int i = num; i < (num + 3); i++)
            {
                for (int j = num2; j < (num2 + 3); j++)
                {
                    if (Game1.tile[i, j].active() || (Game1.tile[i, j].wall == 0))
                    {
                        flag = false;
                        break;
                    }
                }
            }
            if (flag)
            {
                int num5 = 0;
                while (style > 0x23)
                {
                    num5++;
                    style -= 0x24;
                }
                int num6 = style * 0x36;
                int num7 = num5 * 0x36;
                for (int k = num; k < (num + 3); k++)
                {
                    for (int m = num2; m < (num2 + 3); m++)
                    {
                        Game1.tile[k, m].active(true);
                        Game1.tile[k, m].type = type;
                        Game1.tile[k, m].frameX = (short)(num6 + (0x12 * (k - num)));
                        Game1.tile[k, m].frameY = (short)(num7 + (0x12 * (m - num2)));
                    }
                }
            }
        }

        public static void Place3x4(int x, int y, ushort type, int style)
        {
            if (((x >= 5) && (x <= (Game1.maxTilesX - 5))) && ((y >= 5) && (y <= (Game1.maxTilesY - 5))))
            {
                bool flag = true;
                for (int i = x - 1; i < (x + 2); i++)
                {
                    for (int j = y - 3; j < (y + 1); j++)
                    {
                        if (Game1.tile[i, j] == null)
                        {
                            Game1.tile[i, j] = new Tile();
                        }
                        if (Game1.tile[i, j].active())
                        {
                            flag = false;
                        }
                    }
                    if (Game1.tile[i, y + 1] == null)
                    {
                        Game1.tile[i, y + 1] = new Tile();
                    }
                    if (!SolidTile2(i, y + 1))
                    {
                        flag = false;
                    }
                }
                if (flag)
                {
                    int num3 = style * 0x36;
                    for (int k = -3; k <= 0; k++)
                    {
                        short num5 = (short)((3 + k) * 0x12);
                        Game1.tile[x - 1, y + k].active(true);
                        Game1.tile[x - 1, y + k].frameY = num5;
                        Game1.tile[x - 1, y + k].frameX = (short)num3;
                        Game1.tile[x - 1, y + k].type = type;
                        Game1.tile[x, y + k].active(true);
                        Game1.tile[x, y + k].frameY = num5;
                        Game1.tile[x, y + k].frameX = (short)(num3 + 0x12);
                        Game1.tile[x, y + k].type = type;
                        Game1.tile[x + 1, y + k].active(true);
                        Game1.tile[x + 1, y + k].frameY = num5;
                        Game1.tile[x + 1, y + k].frameX = (short)(num3 + 0x24);
                        Game1.tile[x + 1, y + k].type = type;
                    }
                }
            }
        }

        public static void Place4x2(int x, int y, ushort type, int direction = -1, int style = 0)
        {
            if (((x >= 5) && (x <= (Game1.maxTilesX - 5))) && ((y >= 5) && (y <= (Game1.maxTilesY - 5))))
            {
                bool flag = true;
                for (int i = x - 1; i < (x + 3); i++)
                {
                    for (int j = y - 1; j < (y + 1); j++)
                    {
                        if (Game1.tile[i, j] == null)
                        {
                            Game1.tile[i, j] = new Tile();
                        }
                        if (Game1.tile[i, j].active())
                        {
                            flag = false;
                        }
                    }
                    if (Game1.tile[i, y + 1] == null)
                    {
                        Game1.tile[i, y + 1] = new Tile();
                    }
                    if (!SolidTile2(i, y + 1))
                    {
                        flag = false;
                    }
                }
                short num3 = 0;
                if (direction == 1)
                {
                    num3 = 0x48;
                }
                int num4 = 0x24 * style;
                if (flag)
                {
                    Game1.tile[x - 1, y - 1].active(true);
                    Game1.tile[x - 1, y - 1].frameY = (short)num4;
                    Game1.tile[x - 1, y - 1].frameX = num3;
                    Game1.tile[x - 1, y - 1].type = type;
                    Game1.tile[x, y - 1].active(true);
                    Game1.tile[x, y - 1].frameY = (short)num4;
                    Game1.tile[x, y - 1].frameX = (short)(0x12 + num3);
                    Game1.tile[x, y - 1].type = type;
                    Game1.tile[x + 1, y - 1].active(true);
                    Game1.tile[x + 1, y - 1].frameY = (short)num4;
                    Game1.tile[x + 1, y - 1].frameX = (short)(0x24 + num3);
                    Game1.tile[x + 1, y - 1].type = type;
                    Game1.tile[x + 2, y - 1].active(true);
                    Game1.tile[x + 2, y - 1].frameY = (short)num4;
                    Game1.tile[x + 2, y - 1].frameX = (short)(0x36 + num3);
                    Game1.tile[x + 2, y - 1].type = type;
                    Game1.tile[x - 1, y].active(true);
                    Game1.tile[x - 1, y].frameY = (short)(num4 + 0x12);
                    Game1.tile[x - 1, y].frameX = num3;
                    Game1.tile[x - 1, y].type = type;
                    Game1.tile[x, y].active(true);
                    Game1.tile[x, y].frameY = (short)(num4 + 0x12);
                    Game1.tile[x, y].frameX = (short)(0x12 + num3);
                    Game1.tile[x, y].type = type;
                    Game1.tile[x + 1, y].active(true);
                    Game1.tile[x + 1, y].frameY = (short)(num4 + 0x12);
                    Game1.tile[x + 1, y].frameX = (short)(0x24 + num3);
                    Game1.tile[x + 1, y].type = type;
                    Game1.tile[x + 2, y].active(true);
                    Game1.tile[x + 2, y].frameY = (short)(num4 + 0x12);
                    Game1.tile[x + 2, y].frameX = (short)(0x36 + num3);
                    Game1.tile[x + 2, y].type = type;
                }
            }
        }

        public static void Place4x3Wall(int x, int y, ushort type, int style)
        {
            int num = x - 1;
            int num2 = y - 1;
            bool flag = true;
            for (int i = num; i < (num + 4); i++)
            {
                for (int j = num2; j < (num2 + 3); j++)
                {
                    if (Game1.tile[i, j].active() || (Game1.tile[i, j].wall == 0))
                    {
                        flag = false;
                        break;
                    }
                }
            }
            if (flag)
            {
                int num5 = 0;
                int num6 = style * 0x36;
                for (int k = num; k < (num + 4); k++)
                {
                    for (int m = num2; m < (num2 + 3); m++)
                    {
                        Game1.tile[k, m].active(true);
                        Game1.tile[k, m].type = type;
                        Game1.tile[k, m].frameX = (short)(num5 + (0x12 * (k - num)));
                        Game1.tile[k, m].frameY = (short)(num6 + (0x12 * (m - num2)));
                    }
                }
            }
        }

        public static void Place6x3(int x, int y, ushort type, int direction = -1, int style = 0)
        {
            if (((x >= 5) && (x <= (Game1.maxTilesX - 5))) && ((y >= 5) && (y <= (Game1.maxTilesY - 5))))
            {
                bool flag = true;
                for (int i = x - 3; i < (x + 3); i++)
                {
                    for (int j = y - 2; j <= y; j++)
                    {
                        if (Game1.tile[i, j] == null)
                        {
                            Game1.tile[i, j] = new Tile();
                        }
                        if (Game1.tile[i, j].active())
                        {
                            flag = false;
                        }
                    }
                    if (Game1.tile[i, y + 1] == null)
                    {
                        Game1.tile[i, y + 1] = new Tile();
                    }
                    if (!SolidTile2(i, y + 1) && ((!Game1.tile[i, y + 1].nactive() || !Game1.tileSolidTop[Game1.tile[i, y + 1].type]) || (Game1.tile[i, y + 1].frameY != 0)))
                    {
                        flag = false;
                    }
                }
                if (flag)
                {
                    int num3 = 0;
                    for (int k = x - 3; k < (x + 3); k++)
                    {
                        int num5 = 0;
                        for (int m = y - 2; m <= y; m++)
                        {
                            Game1.tile[k, m].active(true);
                            Game1.tile[k, m].frameY = (short)num5;
                            Game1.tile[k, m].frameX = (short)num3;
                            Game1.tile[k, m].type = type;
                            num5 += 0x12;
                        }
                        num3 += 0x12;
                    }
                }
            }
        }

        public static void Place6x4Wall(int x, int y, ushort type, int style)
        {
            int num = x - 2;
            int num2 = y - 2;
            bool flag = true;
            for (int i = num; i < (num + 6); i++)
            {
                for (int j = num2; j < (num2 + 4); j++)
                {
                    if (Game1.tile[i, j].active() || (Game1.tile[i, j].wall == 0))
                    {
                        flag = false;
                        break;
                    }
                }
            }
            if (flag)
            {
                int num5 = 0;
                int num6 = style * 0x48;
                for (int k = num; k < (num + 6); k++)
                {
                    for (int m = num2; m < (num2 + 4); m++)
                    {
                        Game1.tile[k, m].active(true);
                        Game1.tile[k, m].type = type;
                        Game1.tile[k, m].frameX = (short)(num5 + (0x12 * (k - num)));
                        Game1.tile[k, m].frameY = (short)(num6 + (0x12 * (m - num2)));
                    }
                }
            }
        }

        public static bool PlaceAlch(int x, int y, int style)
        {
            if (Game1.tile[x, y] == null)
            {
                Game1.tile[x, y] = new Tile();
            }
            if (Game1.tile[x, y + 1] == null)
            {
                Game1.tile[x, y + 1] = new Tile();
            }
            if ((!Game1.tile[x, y].active() && Game1.tile[x, y + 1].nactive()) && (!Game1.tile[x, y + 1].halfBrick() && (Game1.tile[x, y + 1].slope() == 0)))
            {
                bool flag = false;
                if (style == 0)
                {
                    if (((Game1.tile[x, y + 1].type != 2) && (Game1.tile[x, y + 1].type != 0x4e)) && ((Game1.tile[x, y + 1].type != 380) && (Game1.tile[x, y + 1].type != 0x6d)))
                    {
                        flag = true;
                    }
                    if (Game1.tile[x, y].liquid > 0)
                    {
                        flag = true;
                    }
                }
                else if (style == 1)
                {
                    if (((Game1.tile[x, y + 1].type != 60) && (Game1.tile[x, y + 1].type != 0x4e)) && (Game1.tile[x, y + 1].type != 380))
                    {
                        flag = true;
                    }
                    if (Game1.tile[x, y].liquid > 0)
                    {
                        flag = true;
                    }
                }
                else if (style == 2)
                {
                    if (((Game1.tile[x, y + 1].type != 0) && (Game1.tile[x, y + 1].type != 0x3b)) && ((Game1.tile[x, y + 1].type != 0x4e) && (Game1.tile[x, y + 1].type != 380)))
                    {
                        flag = true;
                    }
                    if (Game1.tile[x, y].liquid > 0)
                    {
                        flag = true;
                    }
                }
                else if (style == 3)
                {
                    if ((((Game1.tile[x, y + 1].type != 0xcb) && (Game1.tile[x, y + 1].type != 0xc7)) && ((Game1.tile[x, y + 1].type != 0x17) && (Game1.tile[x, y + 1].type != 0x19))) && ((Game1.tile[x, y + 1].type != 0x4e) && (Game1.tile[x, y + 1].type != 380)))
                    {
                        flag = true;
                    }
                    if (Game1.tile[x, y].liquid > 0)
                    {
                        flag = true;
                    }
                }
                else if (style == 4)
                {
                    if (((Game1.tile[x, y + 1].type != 0x35) && (Game1.tile[x, y + 1].type != 0x4e)) && ((Game1.tile[x, y + 1].type != 380) && (Game1.tile[x, y + 1].type != 0x74)))
                    {
                        flag = true;
                    }
                    if ((Game1.tile[x, y].liquid > 0) && Game1.tile[x, y].lava())
                    {
                        flag = true;
                    }
                }
                else if (style == 5)
                {
                    if (((Game1.tile[x, y + 1].type != 0x39) && (Game1.tile[x, y + 1].type != 0x4e)) && (Game1.tile[x, y + 1].type != 380))
                    {
                        flag = true;
                    }
                    if ((Game1.tile[x, y].liquid > 0) && !Game1.tile[x, y].lava())
                    {
                        flag = true;
                    }
                }
                else if (style == 6)
                {
                    if ((((Game1.tile[x, y + 1].type != 0x4e) && (Game1.tile[x, y + 1].type != 380)) && ((Game1.tile[x, y + 1].type != 0x93) && (Game1.tile[x, y + 1].type != 0xa1))) && (((Game1.tile[x, y + 1].type != 0xa3) && (Game1.tile[x, y + 1].type != 0xa4)) && (Game1.tile[x, y + 1].type != 200)))
                    {
                        flag = true;
                    }
                    if ((Game1.tile[x, y].liquid > 0) && Game1.tile[x, y].lava())
                    {
                        flag = true;
                    }
                }
                if (!flag)
                {
                    Game1.tile[x, y].active(true);
                    Game1.tile[x, y].type = 0x52;
                    Game1.tile[x, y].frameX = (short)(0x12 * style);
                    Game1.tile[x, y].frameY = 0;
                    return true;
                }
            }
            return false;
        }

        public static void PlaceBanner(int x, int y, ushort type, int style = 0)
        {
            int num = style * 0x12;
            int num2 = 0;
            if (style >= 90)
            {
                num -= 0x654;
                num2 += 0x36;
            }
            if (Game1.tile[x, y - 1] == null)
            {
                Game1.tile[x, y - 1] = new Tile();
            }
            if (Game1.tile[x, y] == null)
            {
                Game1.tile[x, y] = new Tile();
            }
            if (Game1.tile[x, y + 1] == null)
            {
                Game1.tile[x, y + 1] = new Tile();
            }
            if (Game1.tile[x, y + 2] == null)
            {
                Game1.tile[x, y + 2] = new Tile();
            }
            if (((Game1.tile[x, y - 1].nactive() && Game1.tileSolid[Game1.tile[x, y - 1].type]) && (!Game1.tileSolidTop[Game1.tile[x, y - 1].type] && !Game1.tile[x, y].active())) && (!Game1.tile[x, y + 1].active() && !Game1.tile[x, y + 2].active()))
            {
                Game1.tile[x, y].active(true);
                Game1.tile[x, y].frameY = (short)num2;
                Game1.tile[x, y].frameX = (short)num;
                Game1.tile[x, y].type = type;
                Game1.tile[x, y + 1].active(true);
                Game1.tile[x, y + 1].frameY = (short)(num2 + 0x12);
                Game1.tile[x, y + 1].frameX = (short)num;
                Game1.tile[x, y + 1].type = type;
                Game1.tile[x, y + 2].active(true);
                Game1.tile[x, y + 2].frameY = (short)(num2 + 0x24);
                Game1.tile[x, y + 2].frameX = (short)num;
                Game1.tile[x, y + 2].type = type;
            }
        }

        public static void PlaceCannon(int x, int y, ushort type, int style = 0)
        {
            if (((x >= 5) && (x <= (Game1.maxTilesX - 5))) && ((y >= 5) && (y <= (Game1.maxTilesY - 5))))
            {
                bool flag = true;
                for (int i = x - 1; i < (x + 3); i++)
                {
                    for (int j = y - 2; j < (y + 1); j++)
                    {
                        if (Game1.tile[i, j] == null)
                        {
                            Game1.tile[i, j] = new Tile();
                        }
                        if (Game1.tile[i, j].active())
                        {
                            flag = false;
                        }
                    }
                    if (Game1.tile[i, y + 1] == null)
                    {
                        Game1.tile[i, y + 1] = new Tile();
                    }
                    if ((!SolidTile2(i, y + 1) && (i != (x - 1))) && (i != (x + 2)))
                    {
                        flag = false;
                    }
                }
                int num3 = 0x48 * style;
                int num4 = 0;
                if (flag)
                {
                    Game1.tile[x - 1, y - 2].active(true);
                    Game1.tile[x - 1, y - 2].frameY = (short)num4;
                    Game1.tile[x - 1, y - 2].frameX = (short)num3;
                    Game1.tile[x - 1, y - 2].type = type;
                    Game1.tile[x, y - 2].active(true);
                    Game1.tile[x, y - 2].frameY = (short)num4;
                    Game1.tile[x, y - 2].frameX = (short)(0x12 + num3);
                    Game1.tile[x, y - 2].type = type;
                    Game1.tile[x + 1, y - 2].active(true);
                    Game1.tile[x + 1, y - 2].frameY = (short)num4;
                    Game1.tile[x + 1, y - 2].frameX = (short)(0x24 + num3);
                    Game1.tile[x + 1, y - 2].type = type;
                    Game1.tile[x + 2, y - 2].active(true);
                    Game1.tile[x + 2, y - 2].frameY = (short)num4;
                    Game1.tile[x + 2, y - 2].frameX = (short)(0x36 + num3);
                    Game1.tile[x + 2, y - 2].type = type;
                    Game1.tile[x - 1, y - 1].active(true);
                    Game1.tile[x - 1, y - 1].frameY = (short)(num4 + 0x12);
                    Game1.tile[x - 1, y - 1].frameX = (short)num3;
                    Game1.tile[x - 1, y - 1].type = type;
                    Game1.tile[x, y - 1].active(true);
                    Game1.tile[x, y - 1].frameY = (short)(num4 + 0x12);
                    Game1.tile[x, y - 1].frameX = (short)(0x12 + num3);
                    Game1.tile[x, y - 1].type = type;
                    Game1.tile[x + 1, y - 1].active(true);
                    Game1.tile[x + 1, y - 1].frameY = (short)(num4 + 0x12);
                    Game1.tile[x + 1, y - 1].frameX = (short)(0x24 + num3);
                    Game1.tile[x + 1, y - 1].type = type;
                    Game1.tile[x + 2, y - 1].active(true);
                    Game1.tile[x + 2, y - 1].frameY = (short)(num4 + 0x12);
                    Game1.tile[x + 2, y - 1].frameX = (short)(0x36 + num3);
                    Game1.tile[x + 2, y - 1].type = type;
                    Game1.tile[x - 1, y].active(true);
                    Game1.tile[x - 1, y].frameY = (short)(num4 + 0x24);
                    Game1.tile[x - 1, y].frameX = (short)num3;
                    Game1.tile[x - 1, y].type = type;
                    Game1.tile[x, y].active(true);
                    Game1.tile[x, y].frameY = (short)(num4 + 0x24);
                    Game1.tile[x, y].frameX = (short)(0x12 + num3);
                    Game1.tile[x, y].type = type;
                    Game1.tile[x + 1, y].active(true);
                    Game1.tile[x + 1, y].frameY = (short)(num4 + 0x24);
                    Game1.tile[x + 1, y].frameX = (short)(0x24 + num3);
                    Game1.tile[x + 1, y].type = type;
                    Game1.tile[x + 2, y].active(true);
                    Game1.tile[x + 2, y].frameY = (short)(num4 + 0x24);
                    Game1.tile[x + 2, y].frameX = (short)(0x36 + num3);
                    Game1.tile[x + 2, y].type = type;
                }
            }
        }

        public static void PlaceChand(int x, int y, ushort type, int style = 0)
        {
            bool flag = true;
            int num = 0;
            for (int i = x - 1; i < (x + 2); i++)
            {
                for (int j = y; j < (y + 3); j++)
                {
                    if (Game1.tile[i, j] == null)
                    {
                        Game1.tile[i, j] = new Tile();
                    }
                    if (Game1.tile[i, j].active())
                    {
                        flag = false;
                    }
                }
            }
            if (Game1.tile[x, y - 1] == null)
            {
                Game1.tile[x, y - 1] = new Tile();
            }
            if ((!Game1.tile[x, y - 1].nactive() || !Game1.tileSolid[Game1.tile[x, y - 1].type]) || Game1.tileSolidTop[Game1.tile[x, y - 1].type])
            {
                flag = false;
            }
            if (flag)
            {
                int num4 = 0;
                int num5 = (style * 0x12) * 3;
                Game1.tile[x - 1, y + num].active(true);
                Game1.tile[x - 1, y + num].frameY = (short)num5;
                Game1.tile[x - 1, y + num].frameX = (short)num4;
                Game1.tile[x - 1, y + num].type = type;
                Game1.tile[x, y + num].active(true);
                Game1.tile[x, y + num].frameY = (short)num5;
                Game1.tile[x, y + num].frameX = (short)(num4 + 0x12);
                Game1.tile[x, y + num].type = type;
                Game1.tile[x + 1, y + num].active(true);
                Game1.tile[x + 1, y + num].frameY = (short)num5;
                Game1.tile[x + 1, y + num].frameX = (short)(num4 + 0x24);
                Game1.tile[x + 1, y + num].type = type;
                Game1.tile[x - 1, (y + 1) + num].active(true);
                Game1.tile[x - 1, (y + 1) + num].frameY = (short)(num5 + 0x12);
                Game1.tile[x - 1, (y + 1) + num].frameX = (short)num4;
                Game1.tile[x - 1, (y + 1) + num].type = type;
                Game1.tile[x, (y + 1) + num].active(true);
                Game1.tile[x, (y + 1) + num].frameY = (short)(num5 + 0x12);
                Game1.tile[x, (y + 1) + num].frameX = (short)(num4 + 0x12);
                Game1.tile[x, (y + 1) + num].type = type;
                Game1.tile[x + 1, (y + 1) + num].active(true);
                Game1.tile[x + 1, (y + 1) + num].frameY = (short)(num5 + 0x12);
                Game1.tile[x + 1, (y + 1) + num].frameX = (short)(num4 + 0x24);
                Game1.tile[x + 1, (y + 1) + num].type = type;
                Game1.tile[x - 1, (y + 2) + num].active(true);
                Game1.tile[x - 1, (y + 2) + num].frameY = (short)(num5 + 0x24);
                Game1.tile[x - 1, (y + 2) + num].frameX = (short)num4;
                Game1.tile[x - 1, (y + 2) + num].type = type;
                Game1.tile[x, (y + 2) + num].active(true);
                Game1.tile[x, (y + 2) + num].frameY = (short)(num5 + 0x24);
                Game1.tile[x, (y + 2) + num].frameX = (short)(num4 + 0x12);
                Game1.tile[x, (y + 2) + num].type = type;
                Game1.tile[x + 1, (y + 2) + num].active(true);
                Game1.tile[x + 1, (y + 2) + num].frameY = (short)(num5 + 0x24);
                Game1.tile[x + 1, (y + 2) + num].frameX = (short)(num4 + 0x24);
                Game1.tile[x + 1, (y + 2) + num].type = type;
            }
        }

        public static int PlaceChest(int x, int y, ushort type = 0x15, bool notNearOtherChests = false, int style = 0)
        {
            TileObject obj2;
            int num = -1;
            if (TileObject.CanPlace(x, y, type, style, 1, out obj2, false))
            {
                bool flag = true;
                if (notNearOtherChests && Chest.NearOtherChests(x - 1, y - 1))
                {
                    flag = false;
                }
                if (flag)
                {
                    TileObject.Place(obj2);
                    num = Chest.CreateChest(obj2.xCoord, obj2.yCoord, -1);
                }
            }
            else
            {
                num = -1;
            }
            if ((num != -1) && (Game1.netMode == 1))
            {
                NetMessage.SendData(0x22, -1, -1, "", 0, (float)x, (float)y, (float)style, 0, 0, 0);
            }
            return num;
        }

        public static void PlaceChestDirect(int x, int y, ushort type, int style, int id)
        {
            Chest.CreateChest(x, y - 1, id);
            for (int i = 0; i <= 1; i++)
            {
                for (int j = -1; j <= 0; j++)
                {
                    if (Game1.tile[x + i, y + j] == null)
                    {
                        Game1.tile[x + i, y + j] = new Tile();
                    }
                }
            }
            Game1.tile[x, y - 1].active(true);
            Game1.tile[x, y - 1].frameY = 0;
            Game1.tile[x, y - 1].frameX = (short)(0x24 * style);
            Game1.tile[x, y - 1].type = type;
            Game1.tile[x, y - 1].halfBrick(false);
            Game1.tile[x + 1, y - 1].active(true);
            Game1.tile[x + 1, y - 1].frameY = 0;
            Game1.tile[x + 1, y - 1].frameX = (short)(0x12 + (0x24 * style));
            Game1.tile[x + 1, y - 1].type = type;
            Game1.tile[x + 1, y - 1].halfBrick(false);
            Game1.tile[x, y].active(true);
            Game1.tile[x, y].frameY = 0x12;
            Game1.tile[x, y].frameX = (short)(0x24 * style);
            Game1.tile[x, y].type = type;
            Game1.tile[x, y].halfBrick(false);
            Game1.tile[x + 1, y].active(true);
            Game1.tile[x + 1, y].frameY = 0x12;
            Game1.tile[x + 1, y].frameX = (short)(0x12 + (0x24 * style));
            Game1.tile[x + 1, y].type = type;
            Game1.tile[x + 1, y].halfBrick(false);
        }

        public static bool PlaceDoor(int i, int j, int type, int style = 0)
        {
            int num = 0x36 * style;
            try
            {
                if ((Game1.tile[i, j - 2].nactive() && Game1.tileSolid[Game1.tile[i, j - 2].type]) && SolidTile(i, j + 2))
                {
                    Game1.tile[i, j - 1].active(true);
                    Game1.tile[i, j - 1].type = 10;
                    Game1.tile[i, j - 1].frameY = (short)num;
                    Game1.tile[i, j - 1].frameX = (short)(genRand.Next(3) * 0x12);
                    Game1.tile[i, j].active(true);
                    Game1.tile[i, j].type = 10;
                    Game1.tile[i, j].frameY = (short)(num + 0x12);
                    Game1.tile[i, j].frameX = (short)(genRand.Next(3) * 0x12);
                    Game1.tile[i, j + 1].active(true);
                    Game1.tile[i, j + 1].type = 10;
                    Game1.tile[i, j + 1].frameY = (short)(num + 0x24);
                    Game1.tile[i, j + 1].frameX = (short)(genRand.Next(3) * 0x12);
                    return true;
                }
                return false;
            }
            catch
            {
                return false;
            }
        }

        public static void PlaceDresserDirect(int x, int y, ushort type, int style, int id)
        {
            Chest.CreateChest(x - 1, y - 1, id);
            for (int i = -1; i <= 1; i++)
            {
                for (int j = -1; j <= 0; j++)
                {
                    if (Game1.tile[x + i, y + j] == null)
                    {
                        Game1.tile[x + i, y + j] = new Tile();
                    }
                }
            }
            short num3 = (short)(style * 0x36);
            Game1.tile[x - 1, y - 1].active(true);
            Game1.tile[x - 1, y - 1].frameY = 0;
            Game1.tile[x - 1, y - 1].frameX = num3;
            Game1.tile[x - 1, y - 1].type = type;
            Game1.tile[x, y - 1].active(true);
            Game1.tile[x, y - 1].frameY = 0;
            Game1.tile[x, y - 1].frameX = (short)(num3 + 0x12);
            Game1.tile[x, y - 1].type = type;
            Game1.tile[x + 1, y - 1].active(true);
            Game1.tile[x + 1, y - 1].frameY = 0;
            Game1.tile[x + 1, y - 1].frameX = (short)(num3 + 0x24);
            Game1.tile[x + 1, y - 1].type = type;
            Game1.tile[x - 1, y].active(true);
            Game1.tile[x - 1, y].frameY = 0x12;
            Game1.tile[x - 1, y].frameX = num3;
            Game1.tile[x - 1, y].type = type;
            Game1.tile[x, y].active(true);
            Game1.tile[x, y].frameY = 0x12;
            Game1.tile[x, y].frameX = (short)(num3 + 0x12);
            Game1.tile[x, y].type = type;
            Game1.tile[x + 1, y].active(true);
            Game1.tile[x + 1, y].frameY = 0x12;
            Game1.tile[x + 1, y].frameX = (short)(num3 + 0x24);
            Game1.tile[x + 1, y].type = type;
        }

        public static void PlaceDye(int x, int y, int style)
        {
            bool flag = false;
            if (style == 7)
            {
                if (((Game1.tile[x, y + 1].active() && (Game1.tile[x, y + 1].type != 3)) && ((Game1.tile[x, y + 1].type != 0x33) && (Game1.tile[x, y + 1].type != 0x3d))) && (((Game1.tile[x, y + 1].type != 0x49) && (Game1.tile[x, y + 1].type != 0x4a)) && (Game1.tile[x, y + 1].type != 0xb8)))
                {
                    return;
                }
                if (SolidTile(x, y - 1) && !Game1.tile[x, y + 1].active())
                {
                    flag = true;
                }
            }
            else
            {
                if (((Game1.tile[x, y - 1].active() && (Game1.tile[x, y - 1].type != 3)) && ((Game1.tile[x, y - 1].type != 0x33) && (Game1.tile[x, y - 1].type != 0x3d))) && (((Game1.tile[x, y - 1].type != 0x49) && (Game1.tile[x, y - 1].type != 0x4a)) && (Game1.tile[x, y - 1].type != 0xb8)))
                {
                    return;
                }
                if (style == 6)
                {
                    if ((Game1.tile[x, y + 1].nactive() && (Game1.tile[x, y + 1].type == 80)) && (!Game1.tile[x - 1, y + 1].active() && !Game1.tile[x + 1, y + 1].active()))
                    {
                        flag = true;
                    }
                }
                else if (SolidTile(x, y + 1) && !Game1.tile[x, y - 1].active())
                {
                    if (style == 5)
                    {
                        if (Game1.tile[x, y].liquid == 0xff)
                        {
                            flag = true;
                        }
                    }
                    else if ((style >= 8) && (style <= 11))
                    {
                        flag = true;
                    }
                    else if (Game1.tile[x, y].liquid == 0)
                    {
                        if ((style == 3) || (style == 4))
                        {
                            if (Game1.tile[x, y].wall == 0)
                            {
                                flag = true;
                            }
                        }
                        else
                        {
                            flag = true;
                        }
                    }
                }
            }
            if (flag)
            {
                Game1.tile[x, y].type = 0xe3;
                Game1.tile[x, y].active(true);
                Game1.tile[x, y].halfBrick(false);
                Game1.tile[x, y].slope(0);
                Game1.tile[x, y].frameY = 0;
                Game1.tile[x, y].frameX = (short)(0x22 * style);
            }
        }

        public static void PlaceJunglePlant(int X2, int Y2, ushort type, int styleX, int styleY)
        {
            if (((styleY > 0) || (type == 0xec)) || (type == 0xee))
            {
                int num = Y2;
                int num2 = X2;
                if ((type == 0x5f) || (type == 0x7e))
                {
                    num++;
                }
                if (((X2 >= 5) && (X2 <= (Game1.maxTilesX - 5))) && ((num >= 5) && (num <= (Game1.maxTilesY - 5))))
                {
                    bool flag = true;
                    for (int i = num2 - 1; i < (num2 + 1); i++)
                    {
                        for (int j = num - 1; j < (num + 1); j++)
                        {
                            if (Game1.tile[i, j] == null)
                            {
                                Game1.tile[i, j] = new Tile();
                            }
                            if (((((Game1.tile[i, j].active() && (Game1.tile[i, j].type != 0x3d)) && ((Game1.tile[i, j].type != 0x3e) && (Game1.tile[i, j].type != 0x45))) && ((Game1.tile[i, j].type != 0x4a) && ((type != 0xec) || (Game1.tile[i, j].type != 0xe9)))) && ((type != 0xee) || (Game1.tile[i, j].type != 0xe9))) && ((Game1.tile[i, j].type != 0xb9) || (Game1.tile[i, j].frameY != 0)))
                            {
                                flag = false;
                            }
                            if ((type == 0x62) && (Game1.tile[i, j].liquid > 0))
                            {
                                flag = false;
                            }
                        }
                        if (Game1.tile[i, num + 1] == null)
                        {
                            Game1.tile[i, num + 1] = new Tile();
                        }
                        if (!SolidTile(i, num + 1) || (Game1.tile[i, num + 1].type != 60))
                        {
                            flag = false;
                        }
                    }
                    if (flag)
                    {
                        short num5 = 0x24;
                        if ((type == 0xec) || (type == 0xee))
                        {
                            num5 = 0;
                        }
                        int num6 = styleX;
                        short num7 = (short)(0x24 * num6);
                        Game1.tile[num2 - 1, num - 1].active(true);
                        Game1.tile[num2 - 1, num - 1].frameY = num5;
                        Game1.tile[num2 - 1, num - 1].frameX = num7;
                        Game1.tile[num2 - 1, num - 1].type = type;
                        Game1.tile[num2, num - 1].active(true);
                        Game1.tile[num2, num - 1].frameY = num5;
                        Game1.tile[num2, num - 1].frameX = (short)(0x12 + num7);
                        Game1.tile[num2, num - 1].type = type;
                        Game1.tile[num2 - 1, num].active(true);
                        Game1.tile[num2 - 1, num].frameY = (short)(num5 + 0x12);
                        Game1.tile[num2 - 1, num].frameX = num7;
                        Game1.tile[num2 - 1, num].type = type;
                        Game1.tile[num2, num].active(true);
                        Game1.tile[num2, num].frameY = (short)(num5 + 0x12);
                        Game1.tile[num2, num].frameX = (short)(0x12 + num7);
                        Game1.tile[num2, num].type = type;
                    }
                }
            }
            else
            {
                int num8 = styleX;
                int num9 = X2;
                int num10 = Y2;
                if (((num9 >= 5) && (num9 <= (Game1.maxTilesX - 5))) && ((num10 >= 5) && (num10 <= (Game1.maxTilesY - 5))))
                {
                    bool flag2 = true;
                    for (int k = num9 - 1; k < (num9 + 2); k++)
                    {
                        for (int m = num10 - 1; m < (num10 + 1); m++)
                        {
                            if (Game1.tile[k, m] == null)
                            {
                                Game1.tile[k, m] = new Tile();
                            }
                            if (((Game1.tile[k, m].active() && (Game1.tile[k, m].type != 0x3d)) && ((Game1.tile[k, m].type != 0x3e) && (Game1.tile[k, m].type != 0x45))) && ((Game1.tile[k, m].type != 0x4a) && ((Game1.tile[k, m].type != 0xb9) || (Game1.tile[k, m].frameY != 0))))
                            {
                                flag2 = false;
                            }
                        }
                        if (Game1.tile[k, num10 + 1] == null)
                        {
                            Game1.tile[k, num10 + 1] = new Tile();
                        }
                        if (!SolidTile(k, num10 + 1) || (Game1.tile[k, num10 + 1].type != 60))
                        {
                            flag2 = false;
                        }
                    }
                    if (flag2)
                    {
                        short num13 = (short)(0x36 * num8);
                        Game1.tile[num9 - 1, num10 - 1].active(true);
                        Game1.tile[num9 - 1, num10 - 1].frameY = 0;
                        Game1.tile[num9 - 1, num10 - 1].frameX = num13;
                        Game1.tile[num9 - 1, num10 - 1].type = type;
                        Game1.tile[num9, num10 - 1].active(true);
                        Game1.tile[num9, num10 - 1].frameY = 0;
                        Game1.tile[num9, num10 - 1].frameX = (short)(num13 + 0x12);
                        Game1.tile[num9, num10 - 1].type = type;
                        Game1.tile[num9 + 1, num10 - 1].active(true);
                        Game1.tile[num9 + 1, num10 - 1].frameY = 0;
                        Game1.tile[num9 + 1, num10 - 1].frameX = (short)(num13 + 0x24);
                        Game1.tile[num9 + 1, num10 - 1].type = type;
                        Game1.tile[num9 - 1, num10].active(true);
                        Game1.tile[num9 - 1, num10].frameY = 0x12;
                        Game1.tile[num9 - 1, num10].frameX = num13;
                        Game1.tile[num9 - 1, num10].type = type;
                        Game1.tile[num9, num10].active(true);
                        Game1.tile[num9, num10].frameY = 0x12;
                        Game1.tile[num9, num10].frameX = (short)(num13 + 0x12);
                        Game1.tile[num9, num10].type = type;
                        Game1.tile[num9 + 1, num10].active(true);
                        Game1.tile[num9 + 1, num10].frameY = 0x12;
                        Game1.tile[num9 + 1, num10].frameX = (short)(num13 + 0x24);
                        Game1.tile[num9 + 1, num10].type = type;
                    }
                }
            }
        }

        public static void PlaceMan(int i, int j, int dir)
        {
            for (int k = i; k <= (i + 1); k++)
            {
                for (int m = j - 2; m <= j; m++)
                {
                    if (Game1.tile[k, m].active())
                    {
                        return;
                    }
                }
            }
            if (SolidTile2(i, j + 1) && SolidTile2(i + 1, j + 1))
            {
                byte num3 = 0;
                if (dir == 1)
                {
                    num3 = 0x24;
                }
                Game1.tile[i, j - 2].active(true);
                Game1.tile[i, j - 2].frameY = 0;
                Game1.tile[i, j - 2].frameX = num3;
                Game1.tile[i, j - 2].type = 0x80;
                Game1.tile[i, j - 1].active(true);
                Game1.tile[i, j - 1].frameY = 0x12;
                Game1.tile[i, j - 1].frameX = num3;
                Game1.tile[i, j - 1].type = 0x80;
                Game1.tile[i, j].active(true);
                Game1.tile[i, j].frameY = 0x24;
                Game1.tile[i, j].frameX = num3;
                Game1.tile[i, j].type = 0x80;
                Game1.tile[i + 1, j - 2].active(true);
                Game1.tile[i + 1, j - 2].frameY = 0;
                Game1.tile[i + 1, j - 2].frameX = (byte)(0x12 + num3);
                Game1.tile[i + 1, j - 2].type = 0x80;
                Game1.tile[i + 1, j - 1].active(true);
                Game1.tile[i + 1, j - 1].frameY = 0x12;
                Game1.tile[i + 1, j - 1].frameX = (byte)(0x12 + num3);
                Game1.tile[i + 1, j - 1].type = 0x80;
                Game1.tile[i + 1, j].active(true);
                Game1.tile[i + 1, j].frameY = 0x24;
                Game1.tile[i + 1, j].frameX = (byte)(0x12 + num3);
                Game1.tile[i + 1, j].type = 0x80;
            }
        }

        public static void PlaceMB(int X, int y, ushort type, int style)
        {
            int num = X + 1;
            if (((num >= 5) && (num <= (Game1.maxTilesX - 5))) && ((y >= 5) && (y <= (Game1.maxTilesY - 5))))
            {
                bool flag = true;
                for (int i = num - 1; i < (num + 1); i++)
                {
                    for (int j = y - 1; j < (y + 1); j++)
                    {
                        if (Game1.tile[i, j] == null)
                        {
                            Game1.tile[i, j] = new Tile();
                        }
                        if (Game1.tile[i, j].active())
                        {
                            flag = false;
                        }
                    }
                    if (Game1.tile[i, y + 1] == null)
                    {
                        Game1.tile[i, y + 1] = new Tile();
                    }
                    if ((!Game1.tile[i, y + 1].active() || Game1.tile[i, y + 1].halfBrick()) || (!Game1.tileSolid[Game1.tile[i, y + 1].type] && !Game1.tileTable[Game1.tile[i, y + 1].type]))
                    {
                        flag = false;
                    }
                }
                if (flag)
                {
                    Game1.tile[num - 1, y - 1].active(true);
                    Game1.tile[num - 1, y - 1].frameY = (short)(style * 0x24);
                    Game1.tile[num - 1, y - 1].frameX = 0;
                    Game1.tile[num - 1, y - 1].type = type;
                    Game1.tile[num, y - 1].active(true);
                    Game1.tile[num, y - 1].frameY = (short)(style * 0x24);
                    Game1.tile[num, y - 1].frameX = 0x12;
                    Game1.tile[num, y - 1].type = type;
                    Game1.tile[num - 1, y].active(true);
                    Game1.tile[num - 1, y].frameY = (short)((style * 0x24) + 0x12);
                    Game1.tile[num - 1, y].frameX = 0;
                    Game1.tile[num - 1, y].type = type;
                    Game1.tile[num, y].active(true);
                    Game1.tile[num, y].frameY = (short)((style * 0x24) + 0x12);
                    Game1.tile[num, y].frameX = 0x12;
                    Game1.tile[num, y].type = type;
                }
            }
        }

        public static bool PlaceObject(int x, int y, int type, bool mute = false, int style = 0, int alternate = 0, int random = -1, int direction = -1)
        {
            if (type < 0x1a3)
            {
                TileObject obj2;
                if (!TileObject.CanPlace(x, y, type, style, direction, out obj2, false))
                {
                    return false;
                }
                obj2.random = random;
                if (TileObject.Place(obj2) && !mute)
                {
                    SquareTileFrame(x, y, true);
                    Game1.PlaySound(0, x * 0x10, y * 0x10, 1);
                }
            }
            return false;
        }

        public static void PlaceOnTable1x1(int x, int y, int type, int style = 0)
        {
            bool flag = false;
            if (Game1.tile[x, y] == null)
            {
                Game1.tile[x, y] = new Tile();
            }
            if (Game1.tile[x, y + 1] == null)
            {
                Game1.tile[x, y + 1] = new Tile();
            }
            if ((!Game1.tile[x, y].active() && Game1.tile[x, y + 1].nactive()) && Game1.tileTable[Game1.tile[x, y + 1].type])
            {
                flag = true;
            }
            if ((((type == 0x4e) && !Game1.tile[x, y].active()) && (Game1.tile[x, y + 1].nactive() && Game1.tileSolid[Game1.tile[x, y + 1].type])) && (!Game1.tile[x, y + 1].halfBrick() && (Game1.tile[x, y + 1].slope() == 0)))
            {
                flag = true;
            }
            if (flag)
            {
                Game1.tile[x, y].active(true);
                Game1.tile[x, y].type = (ushort)type;
                if (type == 0x21)
                {
                    Game1.tile[x, y].frameX = 0;
                    Game1.tile[x, y].frameY = (short)(style * 0x16);
                }
                else
                {
                    Game1.tile[x, y].frameX = (short)(style * 0x12);
                    Game1.tile[x, y].frameY = 0;
                }
                if (type == 50)
                {
                    Game1.tile[x, y].frameX = (short)(0x12 * genRand.Next(5));
                }
            }
        }

        public static bool PlacePot(int x, int y, ushort type = 0x1c, int style = 0)
        {
            bool flag = true;
            for (int i = x; i < (x + 2); i++)
            {
                for (int k = y - 1; k < (y + 1); k++)
                {
                    if (Game1.tile[i, k] == null)
                    {
                        Game1.tile[i, k] = new Tile();
                    }
                    if (Game1.tile[i, k].active())
                    {
                        flag = false;
                    }
                }
                if (Game1.tile[i, y + 1] == null)
                {
                    Game1.tile[i, y + 1] = new Tile();
                }
                if ((!Game1.tile[i, y + 1].nactive() || Game1.tile[i, y + 1].halfBrick()) || ((Game1.tile[i, y + 1].slope() != 0) || !Game1.tileSolid[Game1.tile[i, y + 1].type]))
                {
                    flag = false;
                }
            }
            if (!flag)
            {
                return false;
            }
            int num3 = genRand.Next(3) * 0x24;
            for (int j = 0; j < 2; j++)
            {
                for (int m = -1; m < 1; m++)
                {
                    int num6 = (j * 0x12) + num3;
                    int num7 = (m + 1) * 0x12;
                    Game1.tile[x + j, y + m].active(true);
                    Game1.tile[x + j, y + m].frameX = (short)num6;
                    Game1.tile[x + j, y + m].frameY = (short)(num7 + (style * 0x24));
                    Game1.tile[x + j, y + m].type = type;
                    Game1.tile[x + j, y + m].halfBrick(false);
                }
            }
            return true;
        }

        public static void PlacePumpkin(int x, int superY)
        {
            ushort num = 0xfe;
            int num2 = superY;
            int num3 = genRand.Next(6) * 0x24;
            if (((x >= 5) && (x <= (Game1.maxTilesX - 5))) && ((num2 >= 5) && (num2 <= (Game1.maxTilesY - 5))))
            {
                bool flag = true;
                for (int i = x - 1; i < (x + 1); i++)
                {
                    for (int j = num2 - 1; j < (num2 + 1); j++)
                    {
                        if (Game1.tile[i, j] == null)
                        {
                            Game1.tile[i, j] = new Tile();
                        }
                        if (((Game1.tile[i, j].active() && (Game1.tile[i, j].type != 3)) && ((Game1.tile[i, j].type != 0x49) && (Game1.tile[i, j].type != 0x71))) && ((Game1.tile[i, j].type != 110) && ((Game1.tile[i, j].type != 0xb9) || (Game1.tile[i, j].frameY != 0))))
                        {
                            flag = false;
                        }
                        if (Game1.tile[i, j].liquid > 0)
                        {
                            flag = false;
                        }
                    }
                    if (!SolidTile(i, num2 + 1) || ((Game1.tile[i, num2 + 1].type != 2) && (Game1.tile[i, num2 + 1].type != 0x6d)))
                    {
                        flag = false;
                    }
                }
                if (flag)
                {
                    Game1.tile[x - 1, num2 - 1].active(true);
                    Game1.tile[x - 1, num2 - 1].frameY = (short)num3;
                    Game1.tile[x - 1, num2 - 1].frameX = 0;
                    Game1.tile[x - 1, num2 - 1].type = num;
                    Game1.tile[x, num2 - 1].active(true);
                    Game1.tile[x, num2 - 1].frameY = (short)num3;
                    Game1.tile[x, num2 - 1].frameX = 0x12;
                    Game1.tile[x, num2 - 1].type = num;
                    Game1.tile[x - 1, num2].active(true);
                    Game1.tile[x - 1, num2].frameY = (short)(num3 + 0x12);
                    Game1.tile[x - 1, num2].frameX = 0;
                    Game1.tile[x - 1, num2].type = num;
                    Game1.tile[x, num2].active(true);
                    Game1.tile[x, num2].frameY = (short)(num3 + 0x12);
                    Game1.tile[x, num2].frameX = 0x12;
                    Game1.tile[x, num2].type = num;
                }
            }
        }

        public static bool PlaceSign(int x, int y, ushort type, int Style = 0)
        {
            int num = x - 2;
            int num2 = x + 3;
            int num3 = y - 2;
            int num4 = y + 3;
            if (num < 0)
            {
                return false;
            }
            if (num2 > Game1.maxTilesX)
            {
                return false;
            }
            if (num3 < 0)
            {
                return false;
            }
            if (num4 > Game1.maxTilesY)
            {
                return false;
            }
            for (int i = num; i < num2; i++)
            {
                for (int k = num3; k < num4; k++)
                {
                    if (Game1.tile[i, k] == null)
                    {
                        Game1.tile[i, k] = new Tile();
                    }
                }
            }
            int num7 = x;
            int num8 = y;
            int num9 = 0;
            if (type == 0x37)
            {
                if (!SolidTile2(x, y + 1) || !SolidTile2(x + 1, y + 1))
                {
                    if (((!Game1.tile[x, y - 1].nactive() || !Game1.tileSolid[Game1.tile[x, y - 1].type]) || (Game1.tileSolidTop[Game1.tile[x, y - 1].type] || !Game1.tile[x + 1, y - 1].nactive())) || (!Game1.tileSolid[Game1.tile[x + 1, y - 1].type] || Game1.tileSolidTop[Game1.tile[x + 1, y - 1].type]))
                    {
                        if (((!Game1.tile[x - 1, y].nactive() || !Game1.tileSolid[Game1.tile[x - 1, y].type]) || (Game1.tileSolidTop[Game1.tile[x - 1, y].type] || Game1.tileNoAttach[Game1.tile[x - 1, y].type])) || ((!Game1.tile[x - 1, y + 1].nactive() || !Game1.tileSolid[Game1.tile[x - 1, y + 1].type]) || (Game1.tileSolidTop[Game1.tile[x - 1, y + 1].type] || Game1.tileNoAttach[Game1.tile[x - 1, y + 1].type])))
                        {
                            if (((!Game1.tile[x + 1, y].nactive() || !Game1.tileSolid[Game1.tile[x + 1, y].type]) || (Game1.tileSolidTop[Game1.tile[x + 1, y].type] || Game1.tileNoAttach[Game1.tile[x + 1, y].type])) || ((!Game1.tile[x + 1, y + 1].nactive() || !Game1.tileSolid[Game1.tile[x + 1, y + 1].type]) || (Game1.tileSolidTop[Game1.tile[x + 1, y + 1].type] || Game1.tileNoAttach[Game1.tile[x + 1, y + 1].type])))
                            {
                                if (((Game1.tile[num7, num8].wall <= 0) || (Game1.tile[num7 + 1, num8].wall <= 0)) || ((Game1.tile[num7, num8 + 1].wall <= 0) || (Game1.tile[num7 + 1, num8 + 1].wall <= 0)))
                                {
                                    return false;
                                }
                                num9 = 4;
                            }
                            else
                            {
                                num7--;
                                num9 = 3;
                            }
                        }
                        else
                        {
                            num9 = 2;
                        }
                    }
                    else
                    {
                        num9 = 1;
                    }
                }
                else
                {
                    num8--;
                    num9 = 0;
                }
            }
            if ((Game1.tile[num7, num8].active() || Game1.tile[num7 + 1, num8].active()) || (Game1.tile[num7, num8 + 1].active() || Game1.tile[num7 + 1, num8 + 1].active()))
            {
                return false;
            }
            int num10 = 0x24 * num9;
            for (int j = 0; j < 2; j++)
            {
                for (int m = 0; m < 2; m++)
                {
                    Game1.tile[num7 + j, num8 + m].active(true);
                    Game1.tile[num7 + j, num8 + m].type = type;
                    Game1.tile[num7 + j, num8 + m].frameX = (short)(num10 + (0x12 * j));
                    Game1.tile[num7 + j, num8 + m].frameY = (short)(0x12 * m);
                }
            }
            return true;
        }

        public static bool PlaceSmallPile(int i, int j, int X, int Y, ushort type = 0xb9)
        {
            int num = i;
            int num2 = j;
            short num3 = (short)(Y * 0x12);
            short num4 = (short)(X * 0x12);
            if (Game1.tile[num, num2] == null)
            {
                Game1.tile[num, num2] = new Tile();
            }
            if (Game1.tile[num + 1, num2] == null)
            {
                Game1.tile[num + 1, num2] = new Tile();
            }
            if (Game1.tile[num, num2 + 1] == null)
            {
                Game1.tile[num, num2 + 1] = new Tile();
            }
            if (Game1.tile[num + 1, num2 + 1] == null)
            {
                Game1.tile[num + 1, num2 + 1] = new Tile();
            }
            if (!Game1.tile[num, num2].lava())
            {
                if (Y == 1)
                {
                    num4 = (short)(X * 0x24);
                    bool flag = false;
                    if ((SolidTile2(num, num2 + 1) && SolidTile2(num + 1, num2 + 1)) && (!Game1.tile[num, num2].active() && !Game1.tile[num + 1, num2].active()))
                    {
                        flag = true;
                    }
                    if (flag)
                    {
                        Game1.tile[num, num2].active(true);
                        Game1.tile[num, num2].frameY = num3;
                        Game1.tile[num, num2].frameX = num4;
                        Game1.tile[num, num2].type = type;
                        Game1.tile[num + 1, num2].active(true);
                        Game1.tile[num + 1, num2].frameY = num3;
                        Game1.tile[num + 1, num2].frameX = (short)(num4 + 0x12);
                        Game1.tile[num + 1, num2].type = type;
                        return true;
                    }
                }
                else if (SolidTile2(num, num2 + 1) && !Game1.tile[num, num2].active())
                {
                    Game1.tile[num, num2].active(true);
                    Game1.tile[num, num2].frameY = num3;
                    Game1.tile[num, num2].frameX = num4;
                    Game1.tile[num, num2].type = type;
                    return true;
                }
            }
            return false;
        }

        public static void PlaceStatueTrap(int x, int y)
        {
            for (int i = -10; i <= 10; i++)
            {
                for (int j = -10; j <= 10; j++)
                {
                    Tile testTile = Game1.tile[x + i, (y + j) + 1];
                    Tile tile2 = Game1.tile[x + i, y + j];
                    if (!tile2.active() && SolidTile2(testTile))
                    {
                        PlaceTile(x + i, y + j, 0x87, true, false, -1, 0);
                        if (tile2.active() && (tile2.type == 0x87))
                        {
                            WorldUtils.WireLine(new Point(x, y), new Point(x + i, y + j));
                            return;
                        }
                    }
                }
            }
        }

        public static void PlaceSunflower(int x, int y, ushort type = 0x1b)
        {
            if (y <= (Game1.worldSurface - 1.0))
            {
                bool flag = true;
                for (int i = x; i < (x + 2); i++)
                {
                    for (int j = y - 3; j < (y + 1); j++)
                    {
                        if (Game1.tile[i, j] == null)
                        {
                            Game1.tile[i, j] = new Tile();
                        }
                        if (Game1.tile[i, j].active() || (Game1.tile[i, j].wall > 0))
                        {
                            flag = false;
                        }
                    }
                    if (Game1.tile[i, y + 1] == null)
                    {
                        Game1.tile[i, y + 1] = new Tile();
                    }
                    if ((!Game1.tile[i, y + 1].nactive() || Game1.tile[i, y + 1].halfBrick()) || ((Game1.tile[i, y + 1].slope() != 0) || ((Game1.tile[i, y + 1].type != 2) && (Game1.tile[i, y + 1].type != 0x6d))))
                    {
                        flag = false;
                    }
                }
                if (flag)
                {
                    int num3 = genRand.Next(3);
                    for (int k = 0; k < 2; k++)
                    {
                        for (int m = -3; m < 1; m++)
                        {
                            int num6 = (k * 0x12) + (genRand.Next(3) * 0x24);
                            if (m <= -2)
                            {
                                num6 = (k * 0x12) + (num3 * 0x24);
                            }
                            int num7 = (m + 3) * 0x12;
                            Game1.tile[x + k, y + m].active(true);
                            Game1.tile[x + k, y + m].frameX = (short)num6;
                            Game1.tile[x + k, y + m].frameY = (short)num7;
                            Game1.tile[x + k, y + m].type = type;
                        }
                    }
                }
            }
        }

        public static void PlaceTight(int x, int y, ushort type = 0xa5, bool spiders = false)
        {
            if (Game1.tile[x, y - 1] == null)
            {
                Game1.tile[x, y - 1] = new Tile();
            }
            if (Game1.tile[x, y] == null)
            {
                Game1.tile[x, y] = new Tile();
            }
            if (Game1.tile[x, y + 1] == null)
            {
                Game1.tile[x, y + 1] = new Tile();
            }
            if ((SolidTile(x, y - 1) && !Game1.tile[x, y].active()) && !Game1.tile[x, y + 1].active())
            {
                if (spiders)
                {
                    int num = 0x6c + (genRand.Next(3) * 0x12);
                    Game1.tile[x, y].type = type;
                    Game1.tile[x, y].active(true);
                    Game1.tile[x, y].frameX = (short)num;
                    Game1.tile[x, y].frameY = 0;
                    Game1.tile[x, y + 1].type = type;
                    Game1.tile[x, y + 1].active(true);
                    Game1.tile[x, y + 1].frameX = (short)num;
                    Game1.tile[x, y + 1].frameY = 0x12;
                }
                else
                {
                    if (((Game1.tile[x, y - 1].type == 0x93) || (Game1.tile[x, y - 1].type == 0xa1)) || (((Game1.tile[x, y - 1].type == 0xa3) || (Game1.tile[x, y - 1].type == 0xa4)) || (Game1.tile[x, y - 1].type == 200)))
                    {
                        if (genRand.Next(2) == 0)
                        {
                            int num2 = genRand.Next(3) * 0x12;
                            Game1.tile[x, y].type = type;
                            Game1.tile[x, y].active(true);
                            Game1.tile[x, y].frameX = (short)num2;
                            Game1.tile[x, y].frameY = 0x48;
                        }
                        else
                        {
                            int num3 = genRand.Next(3) * 0x12;
                            Game1.tile[x, y].type = type;
                            Game1.tile[x, y].active(true);
                            Game1.tile[x, y].frameX = (short)num3;
                            Game1.tile[x, y].frameY = 0;
                            Game1.tile[x, y + 1].type = type;
                            Game1.tile[x, y + 1].active(true);
                            Game1.tile[x, y + 1].frameX = (short)num3;
                            Game1.tile[x, y + 1].frameY = 0x12;
                        }
                    }
                    if (((Game1.tile[x, y - 1].type == 1) || Game1.tileMoss[Game1.tile[x, y - 1].type]) || (((Game1.tile[x, y - 1].type == 0x75) || (Game1.tile[x, y - 1].type == 0x19)) || (Game1.tile[x, y - 1].type == 0xcb)))
                    {
                        if (genRand.Next(2) == 0)
                        {
                            int num4 = 0x36 + (genRand.Next(3) * 0x12);
                            Game1.tile[x, y].type = type;
                            Game1.tile[x, y].active(true);
                            Game1.tile[x, y].frameX = (short)num4;
                            Game1.tile[x, y].frameY = 0x48;
                        }
                        else
                        {
                            int num5 = 0x36 + (genRand.Next(3) * 0x12);
                            Game1.tile[x, y].type = type;
                            Game1.tile[x, y].active(true);
                            Game1.tile[x, y].frameX = (short)num5;
                            Game1.tile[x, y].frameY = 0;
                            Game1.tile[x, y + 1].type = type;
                            Game1.tile[x, y + 1].active(true);
                            Game1.tile[x, y + 1].frameX = (short)num5;
                            Game1.tile[x, y + 1].frameY = 0x12;
                        }
                    }
                    if (Game1.tile[x, y - 1].type == 0xe1)
                    {
                        int num6 = 0xa2 + (genRand.Next(3) * 0x12);
                        Game1.tile[x, y].type = type;
                        Game1.tile[x, y].active(true);
                        Game1.tile[x, y].frameX = (short)num6;
                        Game1.tile[x, y].frameY = 0x48;
                    }
                    if ((Game1.tile[x, y - 1].type == 0x18c) || (Game1.tile[x, y - 1].type == 0x18d))
                    {
                        if (genRand.Next(2) == 0)
                        {
                            int num7 = 0x17a + (genRand.Next(3) * 0x12);
                            Game1.tile[x, y].type = type;
                            Game1.tile[x, y].active(true);
                            Game1.tile[x, y].frameX = (short)num7;
                            Game1.tile[x, y].frameY = 0x48;
                        }
                        else
                        {
                            int num8 = 0x17a + (genRand.Next(3) * 0x12);
                            Game1.tile[x, y].type = type;
                            Game1.tile[x, y].active(true);
                            Game1.tile[x, y].frameX = (short)num8;
                            Game1.tile[x, y].frameY = 0;
                            Game1.tile[x, y + 1].type = type;
                            Game1.tile[x, y + 1].active(true);
                            Game1.tile[x, y + 1].frameX = (short)num8;
                            Game1.tile[x, y + 1].frameY = 0x12;
                        }
                    }
                    if (Game1.tile[x, y - 1].type == 0x170)
                    {
                        if (genRand.Next(2) == 0)
                        {
                            int num9 = 0x1b0 + (genRand.Next(3) * 0x12);
                            Game1.tile[x, y].type = type;
                            Game1.tile[x, y].active(true);
                            Game1.tile[x, y].frameX = (short)num9;
                            Game1.tile[x, y].frameY = 0x48;
                        }
                        else
                        {
                            int num10 = 0x1b0 + (genRand.Next(3) * 0x12);
                            Game1.tile[x, y].type = type;
                            Game1.tile[x, y].active(true);
                            Game1.tile[x, y].frameX = (short)num10;
                            Game1.tile[x, y].frameY = 0;
                            Game1.tile[x, y + 1].type = type;
                            Game1.tile[x, y + 1].active(true);
                            Game1.tile[x, y + 1].frameX = (short)num10;
                            Game1.tile[x, y + 1].frameY = 0x12;
                        }
                    }
                    if (Game1.tile[x, y - 1].type == 0x16f)
                    {
                        if (genRand.Next(2) == 0)
                        {
                            int num11 = 0x1e6 + (genRand.Next(3) * 0x12);
                            Game1.tile[x, y].type = type;
                            Game1.tile[x, y].active(true);
                            Game1.tile[x, y].frameX = (short)num11;
                            Game1.tile[x, y].frameY = 0x48;
                        }
                        else
                        {
                            int num12 = 0x1e6 + (genRand.Next(3) * 0x12);
                            Game1.tile[x, y].type = type;
                            Game1.tile[x, y].active(true);
                            Game1.tile[x, y].frameX = (short)num12;
                            Game1.tile[x, y].frameY = 0;
                            Game1.tile[x, y + 1].type = type;
                            Game1.tile[x, y + 1].active(true);
                            Game1.tile[x, y + 1].frameX = (short)num12;
                            Game1.tile[x, y + 1].frameY = 0x12;
                        }
                    }
                }
            }
            else
            {
                if (spiders)
                {
                    return;
                }
                if ((SolidTile(x, y + 1) && !Game1.tile[x, y].active()) && !Game1.tile[x, y - 1].active())
                {
                    if (((Game1.tile[x, y + 1].type == 1) || Game1.tileMoss[Game1.tile[x, y + 1].type]) || (((Game1.tile[x, y - 1].type == 0x75) || (Game1.tile[x, y - 1].type == 0x19)) || (Game1.tile[x, y - 1].type == 0xcb)))
                    {
                        if (genRand.Next(2) == 0)
                        {
                            int num13 = 0x36 + (genRand.Next(3) * 0x12);
                            Game1.tile[x, y].type = type;
                            Game1.tile[x, y].active(true);
                            Game1.tile[x, y].frameX = (short)num13;
                            Game1.tile[x, y].frameY = 90;
                        }
                        else
                        {
                            int num14 = 0x36 + (genRand.Next(3) * 0x12);
                            Game1.tile[x, y - 1].type = type;
                            Game1.tile[x, y - 1].active(true);
                            Game1.tile[x, y - 1].frameX = (short)num14;
                            Game1.tile[x, y - 1].frameY = 0x24;
                            Game1.tile[x, y].type = type;
                            Game1.tile[x, y].active(true);
                            Game1.tile[x, y].frameX = (short)num14;
                            Game1.tile[x, y].frameY = 0x36;
                        }
                    }
                    if (Game1.tile[x, y + 1].type == 0xe1)
                    {
                        int num15 = 0xa2 + (genRand.Next(3) * 0x12);
                        Game1.tile[x, y].type = type;
                        Game1.tile[x, y].active(true);
                        Game1.tile[x, y].frameX = (short)num15;
                        Game1.tile[x, y].frameY = 90;
                    }
                    if ((Game1.tile[x, y + 1].type == 0x18c) || (Game1.tile[x, y + 1].type == 0x18d))
                    {
                        if (genRand.Next(2) == 0)
                        {
                            int num16 = 0x17a + (genRand.Next(3) * 0x12);
                            Game1.tile[x, y].type = type;
                            Game1.tile[x, y].active(true);
                            Game1.tile[x, y].frameX = (short)num16;
                            Game1.tile[x, y].frameY = 90;
                        }
                        else
                        {
                            int num17 = 0x17a + (genRand.Next(3) * 0x12);
                            Game1.tile[x, y - 1].type = type;
                            Game1.tile[x, y - 1].active(true);
                            Game1.tile[x, y - 1].frameX = (short)num17;
                            Game1.tile[x, y - 1].frameY = 0x24;
                            Game1.tile[x, y].type = type;
                            Game1.tile[x, y].active(true);
                            Game1.tile[x, y].frameX = (short)num17;
                            Game1.tile[x, y].frameY = 0x36;
                        }
                    }
                    if (Game1.tile[x, y + 1].type == 0x170)
                    {
                        if (genRand.Next(2) == 0)
                        {
                            int num18 = 0x1b0 + (genRand.Next(3) * 0x12);
                            Game1.tile[x, y].type = type;
                            Game1.tile[x, y].active(true);
                            Game1.tile[x, y].frameX = (short)num18;
                            Game1.tile[x, y].frameY = 90;
                        }
                        else
                        {
                            int num19 = 0x1b0 + (genRand.Next(3) * 0x12);
                            Game1.tile[x, y - 1].type = type;
                            Game1.tile[x, y - 1].active(true);
                            Game1.tile[x, y - 1].frameX = (short)num19;
                            Game1.tile[x, y - 1].frameY = 0x24;
                            Game1.tile[x, y].type = type;
                            Game1.tile[x, y].active(true);
                            Game1.tile[x, y].frameX = (short)num19;
                            Game1.tile[x, y].frameY = 0x36;
                        }
                    }
                    if (Game1.tile[x, y + 1].type == 0x16f)
                    {
                        if (genRand.Next(2) == 0)
                        {
                            int num20 = 0x1e6 + (genRand.Next(3) * 0x12);
                            Game1.tile[x, y].type = type;
                            Game1.tile[x, y].active(true);
                            Game1.tile[x, y].frameX = (short)num20;
                            Game1.tile[x, y].frameY = 90;
                        }
                        else
                        {
                            int num21 = 0x1e6 + (genRand.Next(3) * 0x12);
                            Game1.tile[x, y - 1].type = type;
                            Game1.tile[x, y - 1].active(true);
                            Game1.tile[x, y - 1].frameX = (short)num21;
                            Game1.tile[x, y - 1].frameY = 0x24;
                            Game1.tile[x, y].type = type;
                            Game1.tile[x, y].active(true);
                            Game1.tile[x, y].frameX = (short)num21;
                            Game1.tile[x, y].frameY = 0x36;
                        }
                    }
                }
            }
            if (Game1.tile[x, y].type == 0xa5)
            {
                CheckTight(x, y);
            }
        }

        public static bool PlaceTile(int i, int j, int type, bool mute = false, bool forced = false, int plr = -1, int style = 0)
        {
            if (type >= 0x1a3)
            {
                return false;
            }
            bool flag = false;
            if (((i >= 0) && (j >= 0)) && ((i < Game1.maxTilesX) && (j < Game1.maxTilesY)))
            {
                Tile trackCache = Game1.tile[i, j];
                if (trackCache == null)
                {
                    trackCache = new Tile();
                    Game1.tile[i, j] = trackCache;
                }
                if ((((((!forced && !Collision.EmptyTile(i, j, false)) && Game1.tileSolid[type]) && (((type != 0x17) || (trackCache.type != 0)) || !trackCache.active())) && (((type != 0xc7) || (trackCache.type != 0)) || !trackCache.active())) && ((((type != 2) || (trackCache.type != 0)) || !trackCache.active()) && (((type != 0x6d) || (trackCache.type != 0)) || !trackCache.active()))) && ((((type != 60) || (trackCache.type != 0x3b)) || !trackCache.active()) && (((type != 70) || (trackCache.type != 0x3b)) || !trackCache.active())))
                {
                    return flag;
                }
                if ((type == 0x17) && ((trackCache.type != 0) || !trackCache.active()))
                {
                    return false;
                }
                if ((type == 2) && ((trackCache.type != 0) || !trackCache.active()))
                {
                    return false;
                }
                if ((type == 0x6d) && ((trackCache.type != 0) || !trackCache.active()))
                {
                    return false;
                }
                if ((type == 60) && ((trackCache.type != 0x3b) || !trackCache.active()))
                {
                    return false;
                }
                if (type == 0x51)
                {
                    if (Game1.tile[i, j - 1] == null)
                    {
                        Game1.tile[i, j - 1] = new Tile();
                    }
                    if (Game1.tile[i, j + 1] == null)
                    {
                        Game1.tile[i, j + 1] = new Tile();
                    }
                    if (Game1.tile[i, j - 1].active())
                    {
                        return false;
                    }
                    if ((!Game1.tile[i, j + 1].active() || !Game1.tileSolid[Game1.tile[i, j + 1].type]) || (Game1.tile[i, j + 1].halfBrick() || (Game1.tile[i, j + 1].slope() != 0)))
                    {
                        return false;
                    }
                }
                if ((((type == 0x175) || (type == 0x177)) || (type == 0x176)) && ((Game1.tile[i, j - 1] == null) || Game1.tile[i, j - 1].bottomSlope()))
                {
                    return false;
                }
                if (trackCache.liquid > 0)
                {
                    if (type == 4)
                    {
                        if ((style != 8) && (style != 11))
                        {
                            return false;
                        }
                    }
                    else if ((((type == 3) || (type == 20)) || ((type == 0x18) || (type == 0x1b))) || ((((type == 0x20) || (type == 0x33)) || ((type == 0x45) || (type == 0x48))) || ((type == 0xc9) || (type == 0x160))))
                    {
                        return false;
                    }
                }
                if ((type != 2) || (Game1.tile[i, j].type != 0))
                {
                    trackCache.halfBrick(false);
                    trackCache.frameY = 0;
                    trackCache.frameX = 0;
                }
                if (((type == 3) || (type == 0x18)) || ((type == 110) || (type == 0xc9)))
                {
                    if (((((j + 1) < Game1.maxTilesY) && Game1.tile[i, j + 1].active()) && ((Game1.tile[i, j + 1].slope() == 0) && !Game1.tile[i, j + 1].halfBrick())) && ((((((Game1.tile[i, j + 1].type == 2) && (type == 3)) || ((Game1.tile[i, j + 1].type == 0x17) && (type == 0x18))) || ((Game1.tile[i, j + 1].type == 0xc7) && (type == 0xc9))) || (((Game1.tile[i, j + 1].type == 0x4e) || (Game1.tile[i, j + 1].type == 380)) && (type == 3))) || ((Game1.tile[i, j + 1].type == 0x6d) && (type == 110))))
                    {
                        if ((type == 0x18) && (genRand.Next(13) == 0))
                        {
                            trackCache.active(true);
                            trackCache.type = 0x20;
                            SquareTileFrame(i, j, true);
                        }
                        if ((type == 0xc9) && (genRand.Next(13) == 0))
                        {
                            trackCache.active(true);
                            trackCache.type = 0x160;
                            SquareTileFrame(i, j, true);
                        }
                        else if ((Game1.tile[i, j + 1].type == 0x4e) || (Game1.tile[i, j + 1].type == 380))
                        {
                            trackCache.active(true);
                            trackCache.type = (ushort)type;
                            trackCache.frameX = (short)((genRand.Next(2) * 0x12) + 0x6c);
                        }
                        else if ((((trackCache.wall == 0) || (trackCache.wall == 0x6a)) || ((trackCache.wall == 0x6b) || ((trackCache.wall >= 0x3f) && (trackCache.wall <= 70)))) && (((Game1.tile[i, j + 1].wall == 0) || (Game1.tile[i, j + 1].wall == 0x6a)) || ((Game1.tile[i, j + 1].wall == 0x6b) || ((Game1.tile[i, j + 1].wall >= 0x3f) && (Game1.tile[i, j + 1].wall <= 70)))))
                        {
                            if ((type == 3) && (genRand.Next(0x23) == 0))
                            {
                                trackCache.active(true);
                                trackCache.type = (ushort)type;
                                trackCache.frameX = (short)((genRand.Next(2) * 0x12) + 0xa2);
                            }
                            else if ((genRand.Next(50) == 0) || (((type == 0x18) || (type == 0xc9)) && (genRand.Next(40) == 0)))
                            {
                                trackCache.active(true);
                                trackCache.type = (ushort)type;
                                if (type == 0xc9)
                                {
                                    trackCache.frameX = 270;
                                }
                                else
                                {
                                    trackCache.frameX = 0x90;
                                }
                            }
                            else if (genRand.Next(0x23) == 0)
                            {
                                trackCache.active(true);
                                trackCache.type = (ushort)type;
                                trackCache.frameX = (short)((genRand.Next(2) * 0x12) + 0x6c);
                            }
                            else
                            {
                                trackCache.active(true);
                                trackCache.type = (ushort)type;
                                trackCache.frameX = (short)(genRand.Next(6) * 0x12);
                            }
                        }
                    }
                }
                else if (type == 0x3d)
                {
                    if (((((j + 1) < Game1.maxTilesY) && Game1.tile[i, j + 1].active()) && ((Game1.tile[i, j + 1].slope() == 0) && !Game1.tile[i, j + 1].halfBrick())) && (Game1.tile[i, j + 1].type == 60))
                    {
                        if ((genRand.Next(0x10) == 0) && (j > Game1.worldSurface))
                        {
                            trackCache.active(true);
                            trackCache.type = 0x45;
                            SquareTileFrame(i, j, true);
                        }
                        else if ((genRand.Next(60) == 0) && (j > Game1.rockLayer))
                        {
                            trackCache.active(true);
                            trackCache.type = (ushort)type;
                            trackCache.frameX = 0x90;
                        }
                        else if ((genRand.Next(300) == 0) && (j > Game1.rockLayer))
                        {
                            trackCache.active(true);
                            trackCache.type = (ushort)type;
                            trackCache.frameX = 0xa2;
                        }
                        else if (genRand.Next(15) == 0)
                        {
                            trackCache.active(true);
                            trackCache.type = (ushort)type;
                            trackCache.frameX = (short)((genRand.Next(2) * 0x12) + 0x6c);
                        }
                        else
                        {
                            trackCache.active(true);
                            trackCache.type = (ushort)type;
                            trackCache.frameX = (short)(genRand.Next(6) * 0x12);
                        }
                    }
                }
                else if (type == 0x47)
                {
                    if (((((j + 1) < Game1.maxTilesY) && Game1.tile[i, j + 1].active()) && ((Game1.tile[i, j + 1].slope() == 0) && !Game1.tile[i, j + 1].halfBrick())) && (Game1.tile[i, j + 1].type == 70))
                    {
                        trackCache.active(true);
                        trackCache.type = (ushort)type;
                        trackCache.frameX = (short)(genRand.Next(5) * 0x12);
                    }
                }
                else if (type == 0x81)
                {
                    if ((SolidTile(i - 1, j) || SolidTile(i + 1, j)) || (SolidTile(i, j - 1) || SolidTile(i, j + 1)))
                    {
                        trackCache.active(true);
                        trackCache.type = (ushort)type;
                        trackCache.frameX = (short)(genRand.Next(0x12) * 0x12);
                        SquareTileFrame(i, j, true);
                    }
                }
                else if (type == 0xb2)
                {
                    if ((SolidTile(i - 1, j) || SolidTile(i + 1, j)) || (SolidTile(i, j - 1) || SolidTile(i, j + 1)))
                    {
                        trackCache.active(true);
                        trackCache.type = (ushort)type;
                        trackCache.frameX = (short)(style * 0x12);
                        trackCache.frameY = (short)(genRand.Next(3) * 0x12);
                        SquareTileFrame(i, j, true);
                    }
                }
                else if (type == 0xb8)
                {
                    if (((Game1.tileMoss[Game1.tile[i - 1, j].type] && SolidTile(i - 1, j)) || (Game1.tileMoss[Game1.tile[i + 1, j].type] && SolidTile(i + 1, j))) || ((Game1.tileMoss[Game1.tile[i, j - 1].type] && SolidTile(i, j - 1)) || (Game1.tileMoss[Game1.tile[i, j + 1].type] && SolidTile(i, j + 1))))
                    {
                        trackCache.active(true);
                        trackCache.type = (ushort)type;
                        trackCache.frameX = (short)(style * 0x12);
                        trackCache.frameY = (short)(genRand.Next(3) * 0x12);
                        SquareTileFrame(i, j, true);
                    }
                }
                else if (type == 0xab)
                {
                    PlaceXmasTree(i, j, 0xab);
                }
                else if (type == 0xfe)
                {
                    Place2x2Style(i, j, (ushort)type, style);
                }
                else if (type == 0x14f)
                {
                    Place2x2(i, j, (ushort)type, 0);
                }
                else if (((((type == 0x13f) || (type == 0x84)) || ((type == 0x8a) || (type == 0x8e))) || (((type == 0x8f) || (type == 0x11a)) || ((type >= 0x120) && (type <= 0x127)))) || ((type >= 0x13c) && (type <= 0x13e)))
                {
                    Place2x2(i, j, (ushort)type, 0);
                }
                else if (type == 0x19b)
                {
                    Place2x2(i, j, (ushort)type, 0);
                }
                else if (type == 0x89)
                {
                    trackCache.active(true);
                    trackCache.type = (ushort)type;
                    trackCache.frameY = (short)(0x12 * style);
                }
                else if (type == 0x88)
                {
                    if (Game1.tile[i - 1, j] == null)
                    {
                        Game1.tile[i - 1, j] = new Tile();
                    }
                    if (Game1.tile[i + 1, j] == null)
                    {
                        Game1.tile[i + 1, j] = new Tile();
                    }
                    if (Game1.tile[i, j + 1] == null)
                    {
                        Game1.tile[i, j + 1] = new Tile();
                    }
                    if (((((Game1.tile[i - 1, j].nactive() && !Game1.tile[i - 1, j].halfBrick()) && (!TileID.Sets.NotReallySolid[Game1.tile[i - 1, j].type] && (Game1.tile[i - 1, j].slope() == 0))) && ((SolidTile(i - 1, j) || (Game1.tile[i - 1, j].type == 0x7c)) || (((Game1.tile[i - 1, j].type == 5) && (Game1.tile[i - 1, j - 1].type == 5)) && (Game1.tile[i - 1, j + 1].type == 5)))) || (((Game1.tile[i + 1, j].nactive() && !Game1.tile[i + 1, j].halfBrick()) && (!TileID.Sets.NotReallySolid[Game1.tile[i + 1, j].type] && (Game1.tile[i + 1, j].slope() == 0))) && ((SolidTile(i + 1, j) || (Game1.tile[i + 1, j].type == 0x7c)) || (((Game1.tile[i + 1, j].type == 5) && (Game1.tile[i + 1, j - 1].type == 5)) && (Game1.tile[i + 1, j + 1].type == 5))))) || (((Game1.tile[i, j + 1].nactive() && !Game1.tile[i, j + 1].halfBrick()) && (SolidTile(i, j + 1) && (Game1.tile[i, j + 1].slope() == 0))) || (trackCache.wall > 0)))
                    {
                        trackCache.active(true);
                        trackCache.type = (ushort)type;
                        SquareTileFrame(i, j, true);
                    }
                }
                else if (type == 4)
                {
                    if (Game1.tile[i - 1, j] == null)
                    {
                        Game1.tile[i - 1, j] = new Tile();
                    }
                    if (Game1.tile[i + 1, j] == null)
                    {
                        Game1.tile[i + 1, j] = new Tile();
                    }
                    if (Game1.tile[i, j + 1] == null)
                    {
                        Game1.tile[i, j + 1] = new Tile();
                    }
                    Tile tile2 = Game1.tile[i - 1, j];
                    Tile tile3 = Game1.tile[i + 1, j];
                    Tile tile4 = Game1.tile[i, j + 1];
                    if ((((trackCache.wall > 0) || ((tile2.active() && ((tile2.slope() == 0) || ((tile2.slope() % 2) != 1))) && ((Game1.tileSolid[tile2.type] && !Game1.tileSolidTop[tile2.type]) || ((tile2.type == 0x7c) || (((tile2.type == 5) && (Game1.tile[i - 1, j - 1].type == 5)) && (Game1.tile[i - 1, j + 1].type == 5)))))) || ((tile3.active() && ((tile3.slope() == 0) || ((tile3.slope() % 2) != 0))) && ((Game1.tileSolid[tile3.type] && !Game1.tileSolidTop[tile3.type]) || ((tile3.type == 0x7c) || (((tile3.type == 5) && (Game1.tile[i + 1, j - 1].type == 5)) && (Game1.tile[i + 1, j + 1].type == 5)))))) || (((tile4.active() && Game1.tileSolid[tile4.type]) && (!Game1.tileSolidTop[tile4.type] || ((tile4.type == 0x13) && (tile4.slope() == 0)))) && (!tile4.halfBrick() && (tile4.slope() == 0))))
                    {
                        trackCache.active(true);
                        trackCache.type = (ushort)type;
                        trackCache.frameY = (short)(0x16 * style);
                        SquareTileFrame(i, j, true);
                    }
                }
                else if (type == 10)
                {
                    if (Game1.tile[i, j - 1] == null)
                    {
                        Game1.tile[i, j - 1] = new Tile();
                    }
                    if (Game1.tile[i, j - 2] == null)
                    {
                        Game1.tile[i, j - 2] = new Tile();
                    }
                    if (Game1.tile[i, j - 3] == null)
                    {
                        Game1.tile[i, j - 3] = new Tile();
                    }
                    if (Game1.tile[i, j + 1] == null)
                    {
                        Game1.tile[i, j + 1] = new Tile();
                    }
                    if (Game1.tile[i, j + 2] == null)
                    {
                        Game1.tile[i, j + 2] = new Tile();
                    }
                    if (Game1.tile[i, j + 3] == null)
                    {
                        Game1.tile[i, j + 3] = new Tile();
                    }
                    if ((Game1.tile[i, j - 1].active() || Game1.tile[i, j - 2].active()) || (!Game1.tile[i, j - 3].active() || !Game1.tileSolid[Game1.tile[i, j - 3].type]))
                    {
                        if ((Game1.tile[i, j + 1].active() || Game1.tile[i, j + 2].active()) || (!Game1.tile[i, j + 3].active() || !Game1.tileSolid[Game1.tile[i, j + 3].type]))
                        {
                            return false;
                        }
                        PlaceDoor(i, j + 1, type, style);
                        SquareTileFrame(i, j, true);
                    }
                    else
                    {
                        PlaceDoor(i, j - 1, type, style);
                        SquareTileFrame(i, j, true);
                    }
                }
                else if (((type >= 0x113) && (type <= 0x119)) || ((((type == 0x128) || (type == 0x129)) || ((type == 0x135) || (type == 0x166))) || (((type == 0x167) || (type == 0x19d)) || (type == 0x19e))))
                {
                    Place6x3(i, j, (ushort)type, -1, 0);
                }
                else if ((((type == 0xed) || (type == 0xf4)) || ((type == 0x11d) || (type == 0x11e))) || (((type == 0x12a) || (type == 0x12b)) || (((type == 310) || (type == 0x153)) || ((type >= 0x169) && (type <= 0x16c)))))
                {
                    Place3x2(i, j, (ushort)type, 0);
                }
                else if (type == 0x80)
                {
                    PlaceMan(i, j, style);
                    SquareTileFrame(i, j, true);
                }
                else if (type == 0x10d)
                {
                    PlaceWoman(i, j, style);
                    SquareTileFrame(i, j, true);
                }
                else if (type == 0x14e)
                {
                    int num = 0;
                    if (style == -1)
                    {
                        num = 1;
                    }
                    Place3x3Wall(i, j, 0x14e, num);
                    SquareTileFrame(i, j, true);
                }
                else if (type == 0x95)
                {
                    if ((SolidTile(i - 1, j) || SolidTile(i + 1, j)) || (SolidTile(i, j - 1) || SolidTile(i, j + 1)))
                    {
                        trackCache.frameX = (short)(0x12 * style);
                        trackCache.active(true);
                        trackCache.type = (ushort)type;
                        SquareTileFrame(i, j, true);
                    }
                }
                else if ((type == 0x8b) || (type == 0x23))
                {
                    PlaceMB(i, j, (ushort)type, style);
                    SquareTileFrame(i, j, true);
                }
                else if (type == 0xa5)
                {
                    PlaceTight(i, j, (ushort)type, false);
                    SquareTileFrame(i, j, true);
                }
                else if (type == 0xeb)
                {
                    Place3x1(i, j, (ushort)type, 0);
                    SquareTileFrame(i, j, true);
                }
                else if (type == 240)
                {
                    Place3x3Wall(i, j, (ushort)type, style);
                }
                else if (type == 0xf5)
                {
                    Place2x3Wall(i, j, (ushort)type, style);
                }
                else if (type == 0xf6)
                {
                    Place3x2Wall(i, j, (ushort)type, style);
                }
                else if (type == 0xf1)
                {
                    Place4x3Wall(i, j, (ushort)type, style);
                }
                else if (type == 0xf2)
                {
                    Place6x4Wall(i, j, (ushort)type, style);
                }
                else if (type == 0x22)
                {
                    PlaceChand(i, j, (ushort)type, style);
                    SquareTileFrame(i, j, true);
                }
                else if ((((((type == 0x6a) || (type == 0xd4)) || ((type == 0xdb) || (type == 220))) || (((type == 0xe4) || (type == 0xe7)) || ((type == 0xf3) || (type == 0xf7)))) || ((type == 0x11b) || ((type >= 300) && (type <= 0x134)))) || ((type == 0x162) || (type == 0x163)))
                {
                    Place3x3(i, j, (ushort)type, style);
                    SquareTileFrame(i, j, true);
                }
                else if ((((type == 13) || (type == 0x21)) || ((type == 0x31) || (type == 50))) || (((type == 0x4e) || (type == 0xae)) || (type == 0x174)))
                {
                    PlaceOnTable1x1(i, j, type, style);
                    SquareTileFrame(i, j, true);
                }
                else if (((((type == 14) || (type == 0x1a)) || ((type == 0x56) || (type == 0x57))) || (((type == 0x58) || (type == 0x59)) || ((type == 0x72) || (type == 0xba)))) || (((type == 0xbb) || (type == 0xd7)) || (((type == 0xd9) || (type == 0xda)) || (type == 0x179))))
                {
                    Place3x2(i, j, (ushort)type, style);
                    SquareTileFrame(i, j, true);
                }
                else if (type == 0xec)
                {
                    PlaceJunglePlant(i, j, (ushort)type, genRand.Next(3), 0);
                    SquareTileFrame(i, j, true);
                }
                else if (type == 0xee)
                {
                    PlaceJunglePlant(i, j, (ushort)type, 0, 0);
                    SquareTileFrame(i, j, true);
                }
                else if (type == 20)
                {
                    if (Game1.tile[i, j + 1] == null)
                    {
                        Game1.tile[i, j + 1] = new Tile();
                    }
                    int num2 = Game1.tile[i, j + 1].type;
                    if (Game1.tile[i, j + 1].active() && ((((num2 == 2) || (num2 == 0x6d)) || ((num2 == 0x93) || (num2 == 60))) || ((((num2 == 0x17) || (num2 == 0xc7)) || ((num2 == 0x35) || (num2 == 0xea))) || ((num2 == 0x74) || (num2 == 0x70)))))
                    {
                        Place1x2(i, j, (ushort)type, style);
                        SquareTileFrame(i, j, true);
                    }
                }
                else if (((type == 15) || (type == 0xd8)) || ((type == 0x152) || (type == 390)))
                {
                    if (Game1.tile[i, j - 1] == null)
                    {
                        Game1.tile[i, j - 1] = new Tile();
                    }
                    if (Game1.tile[i, j] == null)
                    {
                        Game1.tile[i, j] = new Tile();
                    }
                    Place1x2(i, j, (ushort)type, style);
                    SquareTileFrame(i, j, true);
                }
                else if (type == 0xe3)
                {
                    PlaceDye(i, j, style);
                    SquareTileFrame(i, j, true);
                }
                else if (((type == 0x10) || (type == 0x12)) || (((type == 0x1d) || (type == 0x67)) || (type == 0x86)))
                {
                    Place2x1(i, j, (ushort)type, style);
                    SquareTileFrame(i, j, true);
                }
                else if ((type == 0x5c) || (type == 0x5d))
                {
                    Place1xX(i, j, (ushort)type, style);
                    SquareTileFrame(i, j, true);
                }
                else if ((((type == 0x68) || (type == 0x69)) || ((type == 320) || (type == 0x151))) || (((type == 0x15d) || (type == 0x164)) || (type == 0x17a)))
                {
                    Place2xX(i, j, (ushort)type, style);
                    SquareTileFrame(i, j, true);
                }
                else if (((type == 0x11) || (type == 0x4d)) || (type == 0x85))
                {
                    Place3x2(i, j, (ushort)type, style);
                    SquareTileFrame(i, j, true);
                }
                else if (type == 0xcf)
                {
                    Place2xX(i, j, (ushort)type, style);
                    SquareTileFrame(i, j, true);
                }
                else if (type == 410)
                {
                    Place2xX(i, j, (ushort)type, style);
                    SquareTileFrame(i, j, true);
                }
                else if (type == 0x15)
                {
                    PlaceChest(i, j, (ushort)type, false, style);
                    SquareTileFrame(i, j, true);
                }
                else if (type == 0x5b)
                {
                    PlaceBanner(i, j, (ushort)type, style);
                    SquareTileFrame(i, j, true);
                }
                else if ((((type == 0x87) || (type == 0x8d)) || ((type == 0x90) || (type == 210))) || (((type == 0xef) || (type == 0x24)) || (type == 0x144)))
                {
                    Place1x1(i, j, type, style);
                    SquareTileFrame(i, j, true);
                }
                else if ((type == 0x65) || (type == 0x66))
                {
                    Place3x4(i, j, (ushort)type, style);
                    SquareTileFrame(i, j, true);
                }
                else if (type == 0x1b)
                {
                    PlaceSunflower(i, j, 0x1b);
                    SquareTileFrame(i, j, true);
                }
                else if (type == 0x1c)
                {
                    PlacePot(i, j, 0x1c, genRand.Next(4));
                    SquareTileFrame(i, j, true);
                }
                else if (((type == 0x2a) || (type == 270)) || (type == 0x10f))
                {
                    Place1x2Top(i, j, (ushort)type, style);
                    SquareTileFrame(i, j, true);
                }
                else if (type == 0x37)
                {
                    PlaceSign(i, j, (ushort)type, style);
                }
                else if ((type == 0x55) || (type == 0x178))
                {
                    Place2x2Horizontal(i, j, (ushort)type, style);
                }
                else if (Game1.tileAlch[type])
                {
                    PlaceAlch(i, j, style);
                }
                else if ((((type == 0x5e) || (type == 0x5f)) || ((type == 0x61) || (type == 0x62))) || ((((type == 0x63) || (type == 100)) || ((type == 0x7d) || (type == 0x7e))) || (((type == 0xad) || (type == 0x11f)) || (type == 0xac))))
                {
                    Place2x2(i, j, (ushort)type, style);
                }
                else if (type == 0x60)
                {
                    Place2x2Style(i, j, (ushort)type, style);
                }
                else if ((type == 0x4f) || (type == 90))
                {
                    int direction = 1;
                    if (plr > -1)
                    {
                        direction = Game1.player[plr].direction;
                    }
                    Place4x2(i, j, (ushort)type, direction, style);
                }
                else if (type == 0xd1)
                {
                    PlaceCannon(i, j, (ushort)type, style);
                }
                else if (type == 0x51)
                {
                    trackCache.frameX = (short)(0x1a * genRand.Next(6));
                    trackCache.active(true);
                    trackCache.type = (ushort)type;
                }
                else if (type == 0x13)
                {
                    trackCache.frameY = (short)(0x12 * style);
                    trackCache.active(true);
                    trackCache.type = (ushort)type;
                }
                else if (type == 380)
                {
                    trackCache.frameY = (short)(0x12 * style);
                    trackCache.active(true);
                    trackCache.type = (ushort)type;
                }
                else if (type == 0x13a)
                {
                    Minecart.PlaceTrack(trackCache, style);
                }
                else
                {
                    trackCache.active(true);
                    trackCache.type = (ushort)type;
                }
                if (trackCache.active())
                {
                    if (trackCache.type == 0x36)
                    {
                        SquareWallFrame(i, j, true);
                    }
                    SquareTileFrame(i, j, true);
                    flag = true;
                    if (mute)
                    {
                        return flag;
                    }
                    if (type == 0x7f)
                    {
                        Game1.PlaySound(2, i * 0x10, j * 0x10, 30);
                    }
                    else if (type == 0x13a)
                    {
                        Game1.PlaySound(2, i * 0x10, j * 0x10, 0x34);
                    }
                    else if ((type >= 330) && (type <= 0x14d))
                    {
                        Game1.PlaySound(0x12, i * 0x10, j * 0x10, 1);
                    }
                    else
                    {
                        Game1.PlaySound(0, i * 0x10, j * 0x10, 1);
                    }
                    if ((type == 0x16) || (type == 140))
                    {
                        for (int k = 0; k < 3; k++)
                        {
                            Color newColor = new Color();
                            Dust.NewDust(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10, 14, 0f, 0f, 0, newColor, 1f);
                        }
                    }
                }
            }
            return flag;
        }

        public static bool placeTrap(int x2, int y2, int type = -1)
        {
            int i = x2;
            int j = y2;
            while (!SolidTile(i, j))
            {
                j++;
                if (j >= (Game1.maxTilesY - 300))
                {
                    return false;
                }
            }
            j--;
            if (Game1.tile[i, j].wall != 0x57)
            {
                if ((Game1.tile[i, j].liquid > 0) && Game1.tile[i, j].lava())
                {
                    return false;
                }
                if ((type == -1) && (genRand.Next(20) == 0))
                {
                    type = 2;
                }
                else if (type == -1)
                {
                    type = genRand.Next(2);
                }
                if (((Game1.tile[i, j].nactive() || Game1.tile[i - 1, j].nactive()) || (Game1.tile[i + 1, j].nactive() || Game1.tile[i, j - 1].nactive())) || ((Game1.tile[i - 1, j - 1].nactive() || Game1.tile[i + 1, j - 1].nactive()) || ((Game1.tile[i, j - 2].nactive() || Game1.tile[i - 1, j - 2].nactive()) || Game1.tile[i + 1, j - 2].nactive())))
                {
                    return false;
                }
                if (Game1.tile[i, j + 1].type == 0x30)
                {
                    return false;
                }
                if (Game1.tile[i, j + 1].type == 0xe8)
                {
                    return false;
                }
                if (type == 1)
                {
                    for (int k = i - 3; k <= (i + 3); k++)
                    {
                        for (int m = j - 3; m <= (j + 3); m++)
                        {
                            if ((Game1.tile[k, m].type == 0x93) || (Game1.tile[k, m].type == 0xa1))
                            {
                                type = 0;
                            }
                        }
                    }
                }
                if (type == 0)
                {
                    int num5 = i;
                    int num6 = j;
                    num6 -= genRand.Next(3);
                    while (!SolidTile(num5, num6))
                    {
                        num5--;
                    }
                    int num7 = num5;
                    num5 = i;
                    while (!SolidTile(num5, num6))
                    {
                        num5++;
                    }
                    int num8 = num5;
                    int num9 = i - num7;
                    int num10 = num8 - i;
                    bool flag = false;
                    bool flag2 = false;
                    if ((num9 > 5) && (num9 < 50))
                    {
                        flag = true;
                    }
                    if ((num10 > 5) && (num10 < 50))
                    {
                        flag2 = true;
                    }
                    if (flag && !SolidTile(num7, num6 + 1))
                    {
                        flag = false;
                    }
                    if (flag2 && !SolidTile(num8, num6 + 1))
                    {
                        flag2 = false;
                    }
                    if (flag && (((Game1.tile[num7, num6].type == 10) || (Game1.tile[num7, num6].type == 0x30)) || ((Game1.tile[num7, num6 + 1].type == 10) || (Game1.tile[num7, num6 + 1].type == 0x30))))
                    {
                        flag = false;
                    }
                    if (flag2 && (((Game1.tile[num8, num6].type == 10) || (Game1.tile[num8, num6].type == 0x30)) || ((Game1.tile[num8, num6 + 1].type == 10) || (Game1.tile[num8, num6 + 1].type == 0x30))))
                    {
                        flag2 = false;
                    }
                    int num11 = 0;
                    if (flag && flag2)
                    {
                        num11 = 1;
                        num5 = num7;
                        if (genRand.Next(2) == 0)
                        {
                            num5 = num8;
                            num11 = -1;
                        }
                    }
                    else if (flag2)
                    {
                        num5 = num8;
                        num11 = -1;
                    }
                    else if (flag)
                    {
                        num5 = num7;
                        num11 = 1;
                    }
                    else
                    {
                        return false;
                    }
                    if (Game1.tile[num5, num6].type == 190)
                    {
                        return false;
                    }
                    if (Game1.tile[i, j].wall > 0)
                    {
                        PlaceTile(i, j, 0x87, true, true, -1, 2);
                    }
                    else
                    {
                        PlaceTile(i, j, 0x87, true, true, -1, genRand.Next(2, 4));
                    }
                    KillTile(num5, num6, false, false, false);
                    PlaceTile(num5, num6, 0x89, true, true, -1, 0);
                    if (num11 == 1)
                    {
                        Tile tile1 = Game1.tile[num5, num6];
                        tile1.frameX = (short)(tile1.frameX + 0x12);
                    }
                    int num12 = i;
                    int num13 = j;
                    while ((num12 != num5) || (num13 != num6))
                    {
                        Game1.tile[num12, num13].k_SetWireFlags(k_WireFlags.WIRE_RED, true);
                        if (num12 > num5)
                        {
                            num12--;
                        }
                        if (num12 < num5)
                        {
                            num12++;
                        }
						Game1.tile[num12, num13].k_SetWireFlags(k_WireFlags.WIRE_RED, true);
						if (num13 > num6)
                        {
                            num13--;
                        }
                        if (num13 < num6)
                        {
                            num13++;
                        }
						Game1.tile[num12, num13].k_SetWireFlags(k_WireFlags.WIRE_RED, true);
					}
                    return true;
                }
                if (type == 1)
                {
                    int num14 = i;
                    int num15 = j - 8;
                    num14 += genRand.Next(-1, 2);
                    bool flag3 = true;
                    while (flag3)
                    {
                        bool flag4 = true;
                        int num16 = 0;
                        for (int num17 = num14 - 2; num17 <= (num14 + 3); num17++)
                        {
                            for (int num18 = num15; num18 <= (num15 + 3); num18++)
                            {
                                if (!SolidTile(num17, num18))
                                {
                                    flag4 = false;
                                }
                                if (Game1.tile[num17, num18].active() && (((Game1.tile[num17, num18].type == 0) || (Game1.tile[num17, num18].type == 1)) || (Game1.tile[num17, num18].type == 0x3b)))
                                {
                                    num16++;
                                }
                            }
                        }
                        num15--;
                        if (num15 < Game1.worldSurface)
                        {
                            return false;
                        }
                        if (flag4 && (num16 > 2))
                        {
                            flag3 = false;
                        }
                    }
                    if (((j - num15) <= 5) || ((j - num15) >= 40))
                    {
                        return false;
                    }
                    for (int n = num14; n <= (num14 + 1); n++)
                    {
                        for (int num20 = num15; num20 <= j; num20++)
                        {
                            if (SolidTile(n, num20))
                            {
                                KillTile(n, num20, false, false, false);
                            }
                        }
                    }
                    for (int num21 = num14 - 2; num21 <= (num14 + 3); num21++)
                    {
                        for (int num22 = num15 - 2; num22 <= (num15 + 3); num22++)
                        {
                            if (SolidTile(num21, num22))
                            {
                                Game1.tile[num21, num22].type = 1;
                            }
                        }
                    }
                    PlaceTile(i, j, 0x87, true, true, -1, genRand.Next(2, 4));
                    PlaceTile(num14, num15 + 2, 130, true, false, -1, 0);
                    PlaceTile(num14 + 1, num15 + 2, 130, true, false, -1, 0);
                    PlaceTile(num14 + 1, num15 + 1, 0x8a, true, false, -1, 0);
                    num15 += 2;
                    Game1.tile[num14, num15].k_SetWireFlags(k_WireFlags.WIRE_RED, true);
					Game1.tile[num14 + 1, num15].k_SetWireFlags(k_WireFlags.WIRE_RED, true);
					num15++;
                    PlaceTile(num14, num15, 130, true, false, -1, 0);
                    PlaceTile(num14 + 1, num15, 130, true, false, -1, 0);
                    Game1.tile[num14, num15].k_SetWireFlags(k_WireFlags.WIRE_RED, true);
					Game1.tile[num14 + 1, num15].k_SetWireFlags(k_WireFlags.WIRE_RED, true);
					PlaceTile(num14, num15 + 1, 130, true, false, -1, 0);
                    PlaceTile(num14 + 1, num15 + 1, 130, true, false, -1, 0);
                    Game1.tile[num14, num15 + 1].k_SetWireFlags(k_WireFlags.WIRE_RED, true);
					Game1.tile[num14 + 1, num15 + 1].k_SetWireFlags(k_WireFlags.WIRE_RED, true);
					int num23 = i;
                    int num24 = j;
                    while ((num23 != num14) || (num24 != num15))
                    {
                        Game1.tile[num23, num24].k_SetWireFlags(k_WireFlags.WIRE_RED, true);
						if (num23 > num14)
                        {
                            num23--;
                        }
                        if (num23 < num14)
                        {
                            num23++;
                        }
                        Game1.tile[num23, num24].k_SetWireFlags(k_WireFlags.WIRE_RED, true);
						if (num24 > num15)
                        {
                            num24--;
                        }
                        if (num24 < num15)
                        {
                            num24++;
                        }
                        Game1.tile[num23, num24].k_SetWireFlags(k_WireFlags.WIRE_RED, true);
					}
                    return true;
                }
                if (type == 2)
                {
                    int num25 = genRand.Next(4, 7);
                    int num26 = i;
                    num26 += genRand.Next(-1, 2);
                    int num27 = j;
                    for (int num28 = 0; num28 < num25; num28++)
                    {
                        num27++;
                        if (!SolidTile(num26, num27))
                        {
                            return false;
                        }
                    }
                    for (int num29 = num26 - 2; num29 <= (num26 + 2); num29++)
                    {
                        for (int num30 = num27 - 2; num30 <= (num27 + 2); num30++)
                        {
                            if (!SolidTile(num29, num30))
                            {
                                return false;
                            }
                        }
                    }
                    KillTile(num26, num27, false, false, false);
                    Game1.tile[num26, num27].active(true);
                    Game1.tile[num26, num27].type = 0x8d;
                    Game1.tile[num26, num27].frameX = 0;
                    Game1.tile[num26, num27].frameY = (short)(0x12 * genRand.Next(2));
                    PlaceTile(i, j, 0x87, true, true, -1, genRand.Next(2, 4));
                    int num31 = i;
                    int num32 = j;
                    while ((num31 != num26) || (num32 != num27))
                    {
                        Game1.tile[num31, num32].k_SetWireFlags(k_WireFlags.WIRE_RED, true);
						if (num31 > num26)
                        {
                            num31--;
                        }
                        if (num31 < num26)
                        {
                            num31++;
                        }
                        Game1.tile[num31, num32].k_SetWireFlags(k_WireFlags.WIRE_RED, true);
						if (num32 > num27)
                        {
                            num32--;
                        }
                        if (num32 < num27)
                        {
                            num32++;
                        }
                        Game1.tile[num31, num32].k_SetWireFlags(k_WireFlags.WIRE_RED, true);
					}
                }
            }
            return false;
        }

        public static void PlaceWall(int i, int j, int type, bool mute = false)
        {
            if (((i > 1) && (j > 1)) && ((i < (Game1.maxTilesX - 2)) && (j < (Game1.maxTilesY - 2))))
            {
                if (Game1.tile[i, j] == null)
                {
                    Game1.tile[i, j] = new Tile();
                }
                if (Game1.tile[i, j].wall == 0)
                {
                    Game1.tile[i, j].wall = (byte)type;
                    SquareWallFrame(i, j, true);
                    if (!mute)
                    {
                        Game1.PlaySound(0, i * 0x10, j * 0x10, 1);
                    }
                }
            }
        }

        public static void PlaceWoman(int i, int j, int dir)
        {
            for (int k = i; k <= (i + 1); k++)
            {
                for (int m = j - 2; m <= j; m++)
                {
                    if (Game1.tile[k, m].active())
                    {
                        return;
                    }
                }
            }
            if (SolidTile2(i, j + 1) && SolidTile2(i + 1, j + 1))
            {
                byte num3 = 0;
                if (dir == 1)
                {
                    num3 = 0x24;
                }
                Game1.tile[i, j - 2].active(true);
                Game1.tile[i, j - 2].frameY = 0;
                Game1.tile[i, j - 2].frameX = num3;
                Game1.tile[i, j - 2].type = 0x10d;
                Game1.tile[i, j - 1].active(true);
                Game1.tile[i, j - 1].frameY = 0x12;
                Game1.tile[i, j - 1].frameX = num3;
                Game1.tile[i, j - 1].type = 0x10d;
                Game1.tile[i, j].active(true);
                Game1.tile[i, j].frameY = 0x24;
                Game1.tile[i, j].frameX = num3;
                Game1.tile[i, j].type = 0x10d;
                Game1.tile[i + 1, j - 2].active(true);
                Game1.tile[i + 1, j - 2].frameY = 0;
                Game1.tile[i + 1, j - 2].frameX = (byte)(0x12 + num3);
                Game1.tile[i + 1, j - 2].type = 0x10d;
                Game1.tile[i + 1, j - 1].active(true);
                Game1.tile[i + 1, j - 1].frameY = 0x12;
                Game1.tile[i + 1, j - 1].frameX = (byte)(0x12 + num3);
                Game1.tile[i + 1, j - 1].type = 0x10d;
                Game1.tile[i + 1, j].active(true);
                Game1.tile[i + 1, j].frameY = 0x24;
                Game1.tile[i + 1, j].frameX = (byte)(0x12 + num3);
                Game1.tile[i + 1, j].type = 0x10d;
            }
        }

        public static void PlaceXmasTree(int x, int y, ushort type = 0xab)
        {
            bool flag = true;
            int num = x - 1;
            int num2 = y - 7;
            for (int i = num; i < (num + 4); i++)
            {
                for (int j = num2; j < (num2 + 8); j++)
                {
                    if (Game1.tile[i, j].active())
                    {
                        flag = false;
                    }
                }
                if (((i > num) && (i < (num + 3))) && !SolidTile(i, num2 + 8))
                {
                    flag = false;
                }
            }
            if (flag)
            {
                int num5 = 0;
                for (int k = num; k < (num + 4); k++)
                {
                    int num7 = 0;
                    for (int m = num2; m < (num2 + 8); m++)
                    {
                        Game1.tile[k, m].active(true);
                        if ((num5 == 0) && (num7 == 0))
                        {
                            Game1.tile[k, m].frameX = 10;
                            Game1.tile[k, m].frameY = 0;
                        }
                        else
                        {
                            Game1.tile[k, m].frameX = (short)num5;
                            Game1.tile[k, m].frameY = (short)num7;
                        }
                        Game1.tile[k, m].type = type;
                        Game1.tile[k, m].active(true);
                        num7++;
                    }
                    num5++;
                }
            }
        }

        public static int PlaceXmasTree_Direct(int x, int y, int type, int style, int dir)
        {
            for (short i = 0; i < 4; i = (short)(i + 1))
            {
                for (short j = 0; j < 8; j = (short)(j + 1))
                {
                    Tile tile = Game1.tile[x + i, y + j];
                    tile.active(true);
                    tile.type = (ushort)type;
                    if ((i == 0) && (j == 0))
                    {
                        tile.frameX = 10;
                        tile.frameY = 0;
                    }
                    else
                    {
                        tile.frameX = i;
                        tile.frameY = j;
                    }
                }
            }
            return 0;
        }

        public static void PlantAlch()
        {
            int x = genRand.Next(20, Game1.maxTilesX - 20);
            int num2 = 0;
            if (genRand.Next(40) == 0)
            {
                num2 = genRand.Next((((int)Game1.rockLayer) + Game1.maxTilesY) / 2, Game1.maxTilesY - 20);
            }
            else if (genRand.Next(10) == 0)
            {
                num2 = genRand.Next(0, Game1.maxTilesY - 20);
            }
            else
            {
                num2 = genRand.Next((int)Game1.worldSurface, Game1.maxTilesY - 20);
            }
            while ((num2 < (Game1.maxTilesY - 20)) && !Game1.tile[x, num2].active())
            {
                num2++;
            }
            if ((Game1.tile[x, num2].nactive() && !Game1.tile[x, num2 - 1].active()) && (Game1.tile[x, num2 - 1].liquid == 0))
            {
                int num3 = 15;
                int num4 = 5;
                int num5 = 0;
                num3 = (int)(num3 * (((float)Game1.maxTilesX) / 4200f));
                int num6 = Utils.Clamp<int>(x - num3, 4, Game1.maxTilesX - 4);
                int num7 = Utils.Clamp<int>(x + num3, 4, Game1.maxTilesX - 4);
                int num8 = Utils.Clamp<int>(num2 - num3, 4, Game1.maxTilesY - 4);
                int num9 = Utils.Clamp<int>(num2 + num3, 4, Game1.maxTilesY - 4);
                for (int i = num6; i <= num7; i++)
                {
                    for (int j = num8; j <= num9; j++)
                    {
                        if (Game1.tileAlch[Game1.tile[i, j].type])
                        {
                            num5++;
                        }
                    }
                }
                if (num5 < num4)
                {
                    if ((Game1.tile[x, num2].type == 2) || (Game1.tile[x, num2].type == 0x6d))
                    {
                        PlaceAlch(x, num2 - 1, 0);
                    }
                    if (Game1.tile[x, num2].type == 60)
                    {
                        PlaceAlch(x, num2 - 1, 1);
                    }
                    if ((Game1.tile[x, num2].type == 0) || (Game1.tile[x, num2].type == 0x3b))
                    {
                        PlaceAlch(x, num2 - 1, 2);
                    }
                    if (((Game1.tile[x, num2].type == 0x17) || (Game1.tile[x, num2].type == 0x19)) || ((Game1.tile[x, num2].type == 0xcb) || (Game1.tile[x, num2].type == 0xc7)))
                    {
                        PlaceAlch(x, num2 - 1, 3);
                    }
                    if ((Game1.tile[x, num2].type == 0x35) || (Game1.tile[x, num2].type == 0x74))
                    {
                        PlaceAlch(x, num2 - 1, 4);
                    }
                    if (Game1.tile[x, num2].type == 0x39)
                    {
                        PlaceAlch(x, num2 - 1, 5);
                    }
                    if (((Game1.tile[x, num2].type == 0x93) || (Game1.tile[x, num2].type == 0xa3)) || (((Game1.tile[x, num2].type == 0xa4) || (Game1.tile[x, num2].type == 0xa1)) || (Game1.tile[x, num2].type == 200)))
                    {
                        PlaceAlch(x, num2 - 1, 6);
                    }
                    if (Game1.tile[x, num2 - 1].active() && (Game1.netMode == 2))
                    {
                        NetMessage.SendTileSquare(-1, x, num2 - 1, 1);
                    }
                }
            }
        }

        public static void PlantCactus(int i, int j)
        {
            GrowCactus(i, j);
            for (int k = 0; k < 150; k++)
            {
                int num2 = genRand.Next(i - 1, i + 2);
                int num3 = genRand.Next(j - 10, j + 2);
                GrowCactus(num2, num3);
            }
        }

        public static void PlantCheck(int i, int j)
        {
            int num = -1;
            int type = Game1.tile[i, j].type;
            int num1 = i - 1;
            int maxTilesX = Game1.maxTilesX;
            int num4 = i + 1;
            int num5 = j - 1;
            if ((j + 1) >= Game1.maxTilesY)
            {
                num = type;
            }
            if ((((i - 1) >= 0) && (Game1.tile[i - 1, j] != null)) && Game1.tile[i - 1, j].nactive())
            {
                ushort num6 = Game1.tile[i - 1, j].type;
            }
            if ((((i + 1) < Game1.maxTilesX) && (Game1.tile[i + 1, j] != null)) && Game1.tile[i + 1, j].nactive())
            {
                ushort num7 = Game1.tile[i + 1, j].type;
            }
            if ((((j - 1) >= 0) && (Game1.tile[i, j - 1] != null)) && Game1.tile[i, j - 1].nactive())
            {
                ushort num8 = Game1.tile[i, j - 1].type;
            }
            if (((((j + 1) < Game1.maxTilesY) && (Game1.tile[i, j + 1] != null)) && (Game1.tile[i, j + 1].nactive() && !Game1.tile[i, j + 1].halfBrick())) && (Game1.tile[i, j + 1].slope() == 0))
            {
                num = Game1.tile[i, j + 1].type;
            }
            if ((((i - 1) >= 0) && ((j - 1) >= 0)) && ((Game1.tile[i - 1, j - 1] != null) && Game1.tile[i - 1, j - 1].nactive()))
            {
                ushort num9 = Game1.tile[i - 1, j - 1].type;
            }
            if ((((i + 1) < Game1.maxTilesX) && ((j - 1) >= 0)) && ((Game1.tile[i + 1, j - 1] != null) && Game1.tile[i + 1, j - 1].nactive()))
            {
                ushort num10 = Game1.tile[i + 1, j - 1].type;
            }
            if ((((i - 1) >= 0) && ((j + 1) < Game1.maxTilesY)) && ((Game1.tile[i - 1, j + 1] != null) && Game1.tile[i - 1, j + 1].nactive()))
            {
                ushort num11 = Game1.tile[i - 1, j + 1].type;
            }
            if ((((i + 1) < Game1.maxTilesX) && ((j + 1) < Game1.maxTilesY)) && ((Game1.tile[i + 1, j + 1] != null) && Game1.tile[i + 1, j + 1].nactive()))
            {
                ushort num12 = Game1.tile[i + 1, j + 1].type;
            }
            if ((((((type == 3) && (num != 2)) && ((num != 0x4e) && (num != 380))) || ((type == 0x18) && (num != 0x17))) || (((type == 0x3d) && (num != 60)) || ((type == 0x47) && (num != 70)))) || (((((type == 0x49) && (num != 2)) && ((num != 0x4e) && (num != 380))) || ((type == 0x4a) && (num != 60))) || ((((type == 110) && (num != 0x6d)) || ((type == 0x71) && (num != 0x6d))) || ((type == 0xc9) && (num != 0xc7)))))
            {
                if (((type == 3) || (type == 0x49)) && ((num != 2) && (Game1.tile[i, j].frameX >= 0xa2)))
                {
                    Game1.tile[i, j].frameX = 0x7e;
                }
                if (((type == 0x4a) && (num != 60)) && (Game1.tile[i, j].frameX >= 0xa2))
                {
                    Game1.tile[i, j].frameX = 0x7e;
                }
                if (num == 0x17)
                {
                    type = 0x18;
                    if (Game1.tile[i, j].frameX >= 0xa2)
                    {
                        Game1.tile[i, j].frameX = 0x7e;
                    }
                }
                else if (num == 2)
                {
                    if (type == 0x71)
                    {
                        type = 0x49;
                    }
                    else
                    {
                        type = 3;
                    }
                }
                else if (num == 0x6d)
                {
                    if (type == 0x49)
                    {
                        type = 0x71;
                    }
                    else
                    {
                        type = 110;
                    }
                }
                else if (num == 0xc7)
                {
                    type = 0xc9;
                }
                else if (num == 70)
                {
                    type = 0x47;
                    while (Game1.tile[i, j].frameX > 0x48)
                    {
                        Tile tile1 = Game1.tile[i, j];
                        tile1.frameX = (short)(tile1.frameX - 0x48);
                    }
                }
                if (type != Game1.tile[i, j].type)
                {
                    Game1.tile[i, j].type = (ushort)type;
                }
                else
                {
                    KillTile(i, j, false, false, false);
                }
            }
        }

        public static void plantDye(int i, int j, bool exoticPlant = false)
        {
            if (Game1.tile[i, j].active() && (((i >= 0x5f) && (i <= (Game1.maxTilesX - 0x5f))) && ((j >= 0x5f) && (j <= (Game1.maxTilesY - 0x5f)))))
            {
                int num = 90;
                if (exoticPlant)
                {
                    num = 350;
                }
                if (j < Game1.worldSurface)
                {
                    if (((!Game1.tile[i, j - 1].active() || (Game1.tile[i, j - 1].type == 3)) || ((Game1.tile[i, j - 1].type == 0x33) || (Game1.tile[i, j - 1].type == 0x3d))) || (((Game1.tile[i, j - 1].type == 0x49) || (Game1.tile[i, j - 1].type == 0x4a)) || (Game1.tile[i, j - 1].type == 0xb8)))
                    {
                        int num2 = Utils.Clamp<int>(i - num, 1, (Game1.maxTilesX - 1) - 1);
                        int num3 = Utils.Clamp<int>(i + num, 1, (Game1.maxTilesX - 1) - 1);
                        int num4 = Utils.Clamp<int>(j - num, 1, (Game1.maxTilesY - 1) - 1);
                        int num5 = Utils.Clamp<int>(j + num, 1, (Game1.maxTilesY - 1) - 1);
                        for (int k = num2; k < num3; k++)
                        {
                            for (int m = num4; m < num5; m++)
                            {
                                if (Game1.tile[k, m].active() && (Game1.tile[k, m].type == 0xe3))
                                {
                                    return;
                                }
                            }
                        }
                        if (exoticPlant)
                        {
                            int type = Game1.tile[i, j].type;
                            bool flag = (TileID.Sets.Conversion.Grass[type] || TileID.Sets.Conversion.Moss[type]) || (type == 0);
                            if ((Game1.tile[i, j - 1].liquid > 0) && Game1.tile[i, j - 1].lava())
                            {
                                flag = false;
                            }
                            if (flag)
                            {
                                PlaceTile(i, j - 1, 0xe3, true, false, -1, genRand.Next(8, 12));
                            }
                        }
                        else if ((Game1.tile[i, j].type == 2) || (Game1.tile[i, j].type == 0x6d))
                        {
                            if (Game1.rand.Next(4) == 0)
                            {
                                PlaceTile(i, j - 1, 0xe3, true, false, -1, 4);
                            }
                            else
                            {
                                PlaceTile(i, j - 1, 0xe3, true, false, -1, 3);
                            }
                        }
                        else if (Game1.tile[i, j].type == 60)
                        {
                            if (Game1.rand.Next(2) == 0)
                            {
                                PlaceTile(i, j - 1, 0xe3, true, false, -1, 2);
                            }
                            else
                            {
                                PlaceTile(i, j - 1, 0xe3, true, false, -1, 4);
                            }
                        }
                        else if (((Game1.tile[i, j].type == 0x35) && (Game1.tile[i, j - 1].liquid == 0xff)) && (Game1.tile[i, j - 2].liquid == 0xff))
                        {
                            PlaceTile(i, j - 1, 0xe3, true, false, -1, 2);
                        }
                        else if (((Game1.tile[i, j].type == 80) && !Game1.tile[i - 1, j - 1].active()) && !Game1.tile[i + 1, j - 1].active())
                        {
                            try
                            {
                                bool flag2 = true;
                                for (int n = i - 5; n <= (i + 5); n++)
                                {
                                    for (int num10 = j - 5; num10 <= (j + 15); num10++)
                                    {
                                        if (Game1.tile[n, num10].active() && ((Game1.tile[n, num10].type == 0x70) || (Game1.tile[n, num10].type == 0xea)))
                                        {
                                            flag2 = false;
                                        }
                                    }
                                }
                                if (flag2)
                                {
                                    PlaceTile(i, j - 1, 0xe3, true, false, -1, 6);
                                }
                            }
                            catch
                            {
                            }
                        }
                    }
                }
                else if (j < (Game1.maxTilesY - 200))
                {
                    if (((!Game1.tile[i, j - 1].active() || (Game1.tile[i, j - 1].type == 3)) || ((Game1.tile[i, j - 1].type == 0x33) || (Game1.tile[i, j - 1].type == 0x3d))) || (((Game1.tile[i, j - 1].type == 0x49) || (Game1.tile[i, j - 1].type == 0x4a)) || (Game1.tile[i, j - 1].type == 0xb8)))
                    {
                        int num11 = Utils.Clamp<int>(i - num, 1, (Game1.maxTilesX - 1) - 1);
                        int num12 = Utils.Clamp<int>(i + num, 1, (Game1.maxTilesX - 1) - 1);
                        int num13 = Utils.Clamp<int>(j - num, 1, (Game1.maxTilesY - 1) - 1);
                        int num14 = Utils.Clamp<int>(j + num, 1, (Game1.maxTilesY - 1) - 1);
                        for (int num15 = num11; num15 < num12; num15++)
                        {
                            for (int num16 = num13; num16 < num14; num16++)
                            {
                                if (Game1.tile[num15, num16].active() && (Game1.tile[num15, num16].type == 0xe3))
                                {
                                    return;
                                }
                            }
                        }
                        if (exoticPlant)
                        {
                            int index = Game1.tile[i, j].type;
                            if ((TileID.Sets.Conversion.Grass[index] || TileID.Sets.Conversion.Moss[index]) || (index == 0))
                            {
                                PlaceTile(i, j - 1, 0xe3, true, false, -1, genRand.Next(8, 12));
                            }
                        }
                        else if (Game1.tile[i, j].type == 60)
                        {
                            if (Game1.rand.Next(2) == 0)
                            {
                                PlaceTile(i, j - 1, 0xe3, true, false, -1, 2);
                            }
                            else if (Game1.rand.Next(2) == 0)
                            {
                                PlaceTile(i, j - 1, 0xe3, true, false, -1, 0);
                            }
                            else
                            {
                                PlaceTile(i, j - 1, 0xe3, true, false, -1, 1);
                            }
                        }
                        else if (((Game1.tile[i, j].type == 0) || (Game1.tile[i, j].type == 1)) || (Game1.tile[i, j].type == 0x3b))
                        {
                            if (Game1.rand.Next(2) == 0)
                            {
                                PlaceTile(i, j - 1, 0xe3, true, false, -1, 0);
                            }
                            else
                            {
                                PlaceTile(i, j - 1, 0xe3, true, false, -1, 1);
                            }
                        }
                        else if ((Game1.tile[i, j - 1].liquid == 0xff) && (Game1.tile[i, j - 2].liquid == 0xff))
                        {
                            PlaceTile(i, j - 1, 0xe3, true, false, -1, 5);
                        }
                    }
                    if (!Game1.tile[i, j + 1].active() && !exoticPlant)
                    {
                        for (int num18 = i - num; num18 < (i + num); num18++)
                        {
                            for (int num19 = j - num; num19 < (j + num); num19++)
                            {
                                if (Game1.tile[num18, num19].active() && (Game1.tile[num18, num19].type == 0xe3))
                                {
                                    return;
                                }
                            }
                        }
                        if (Game1.tile[i, j].type == 0)
                        {
                            PlaceTile(i, j + 1, 0xe3, true, false, -1, 7);
                        }
                    }
                }
            }
        }

        public static int PlatformProperSides(int x, int y, bool acceptNonOpposing = false)
        {
            Tile tile = Game1.tile[x, y];
            if (!tile.active() || (tile.type != 0x13))
            {
                return 0;
            }
            int num = tile.slope();
            int num2 = -1;
            switch (num)
            {
                case 1:
                    num2 = 2;
                    break;

                case 2:
                    num2 = 1;
                    break;
            }
            int num3 = 0;
            int num4 = 1;
            int num5 = 0;
            if (num == 1)
            {
                num5 = 1;
            }
            if (num == 2)
            {
                num5 = -1;
            }
            if (acceptNonOpposing)
            {
                if ((Game1.tile[x + num4, y + num5].active() && (Game1.tile[x + num4, y + num5].type == 0x13)) && (Game1.tile[x + num4, y + num5].slope() != num2))
                {
                    num3++;
                }
            }
            else if ((Game1.tile[x + num4, y + num5].active() && (Game1.tile[x + num4, y + num5].type == 0x13)) && (Game1.tile[x + num4, y + num5].slope() == num))
            {
                num3++;
            }
            num4 *= -1;
            num5 *= -1;
            if (acceptNonOpposing)
            {
                if ((Game1.tile[x + num4, y + num5].active() && (Game1.tile[x + num4, y + num5].type == 0x13)) && (Game1.tile[x + num4, y + num5].slope() != num2))
                {
                    num3++;
                }
                return num3;
            }
            if ((Game1.tile[x + num4, y + num5].active() && (Game1.tile[x + num4, y + num5].type == 0x13)) && (Game1.tile[x + num4, y + num5].slope() == num))
            {
                num3++;
            }
            return num3;
        }

        public static bool PlayerLOS(int x, int y)
        {
            Rectangle rectangle = new Rectangle(x * 0x10, y * 0x10, 0x10, 0x10);
            for (int i = 0; i < 0xff; i++)
            {
                if (Game1.player[i].active)
                {
                    Rectangle rectangle2 = new Rectangle((int)((Game1.player[i].position.X + (Game1.player[i].width * 0.5)) - (NPC.sWidth * 0.6)), (int)((Game1.player[i].position.Y + (Game1.player[i].height * 0.5)) - (NPC.sHeight * 0.6)), (int)(NPC.sWidth * 1.2), (int)(NPC.sHeight * 1.2));
                    if (rectangle.Intersects(rectangle2))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public static void playWorld()
        {
            // RnD
            //ThreadPool.QueueUserWorkItem(new WaitCallback(WorldGen.playWorldCallBack), 1);
            WorldGen.playWorldCallBack(default);
        }

        public static void playWorldCallBack(object threadContext)
        {
            if (Game1.rand == null)
            {
                Game1.rand = new Random((int)DateTime.Now.Ticks);
            }
            for (int i = 0; i < 0xff; i++)
            {
                if (i != Game1.myPlayer)
                {
                    Game1.player[i].active = false;
                }
            }
            noMapUpdate = true;
            WorldFile.loadWorld();
            if (loadFailed || !loadSuccess)
            {
                WorldFile.loadWorld();
                if (loadFailed || !loadSuccess)
                {
                    if (FileUtilities.Exists(Game1.worldPathName + ".bak"))
                    {
                        worldBackup = true;
                    }
                    else
                    {
                        worldBackup = false;
                    }
                    if (!Game1.dedServ)
                    {
                        if (worldBackup)
                        {
                            Game1.menuMode = 200;
                            return;
                        }
                        Game1.menuMode = 0xc9;
                        return;
                    }
                    if (worldBackup)
                    {
                        FileUtilities.Copy(Game1.worldPathName, Game1.worldPathName + ".bad", true);
                        FileUtilities.Copy(Game1.worldPathName + ".bak", Game1.worldPathName, true);
                        FileUtilities.Delete(Game1.worldPathName + ".bak");
                        WorldFile.loadWorld();
                        if (loadFailed || !loadSuccess)
                        {
                            WorldFile.loadWorld();
                            if (loadFailed || !loadSuccess)
                            {
                                FileUtilities.Copy(Game1.worldPathName, Game1.worldPathName + ".bak", true);
                                FileUtilities.Copy(Game1.worldPathName + ".bad", Game1.worldPathName, true);
                                FileUtilities.Delete(Game1.worldPathName + ".bad");
                                Console.WriteLine("Load failed!");
                                return;
                            }
                        }
                    }
                    else
                    {
                        Console.WriteLine("Load failed!  No backup found.");
                        return;
                    }
                }
            }
            if (Game1.mapEnabled)
            {
                Game1.Map.Load();
            }
            if (Game1.netMode != 2)
            {
                Game1.sectionManager.SetAllFramesLoaded();
            }
            while (Game1.loadMapLock)
            {
                float num2 = ((float)Game1.loadMapLastX) / ((float)Game1.maxTilesX);
                Game1.statusText = string.Concat(new object[] { Lang.gen[0x44], " ", (int)((num2 * 100f) + 1f), "%" });
                Thread.Sleep(0);
                if (!Game1.mapEnabled)
                {
                    break;
                }
            }
            if (Game1.gameMenu)
            {
                Game1.gameMenu = false;
            }
            if ((Game1.netMode == 0) && Game1.anglerWhoFinishedToday.Contains(Game1.player[Game1.myPlayer].name))
            {
                Game1.anglerQuestFinished = true;
            }
            Game1.player[Game1.myPlayer].Spawn();
            Game1.player[Game1.myPlayer].Update(Game1.myPlayer);
            Game1.ActivePlayerFileData.StartPlayTimer();
            Player.EnterWorld(Game1.player[Game1.myPlayer]);
            Game1.dayTime = WorldFile.tempDayTime;
            Game1.time = WorldFile.tempTime;
            Game1.moonPhase = WorldFile.tempMoonPhase;
            Game1.bloodMoon = WorldFile.tempBloodMoon;
            Game1.raining = WorldFile.tempRaining;
            Game1.rainTime = WorldFile.tempRainTime;
            Game1.maxRaining = WorldFile.tempMaxRain;
            Game1.cloudAlpha = WorldFile.tempMaxRain;
            CultistRitual.delay = WorldFile.tempCultistDelay;
            Game1.PlaySound(11, -1, -1, 1);
            Game1.resetClouds = true;
            noMapUpdate = false;
        }

        public static void PoundPlatform(int x, int y)
        {
            if (Game1.tile[x, y].halfBrick())
            {
                PoundTile(x, y);
                if (Game1.netMode == 1)
                {
                    NetMessage.SendData(0x11, -1, -1, "", 7, (float)x, (float)y, 1f, 0, 0, 0);
                }
            }
            else
            {
                int slope = 1;
                int num2 = 2;
                if (((Game1.tile[x + 1, y - 1].type == 0x13) || (Game1.tile[x - 1, y + 1].type == 0x13)) || (SolidTile(x + 1, y) && !SolidTile(x - 1, y)))
                {
                    slope = 2;
                    num2 = 1;
                }
                if (Game1.tile[x, y].slope() == 0)
                {
                    SlopeTile(x, y, slope);
                    int num3 = Game1.tile[x, y].slope();
                    if (Game1.netMode == 1)
                    {
                        NetMessage.SendData(0x11, -1, -1, "", 14, (float)x, (float)y, (float)num3, 0, 0, 0);
                    }
                }
                else if (Game1.tile[x, y].slope() == slope)
                {
                    SlopeTile(x, y, num2);
                    int num4 = Game1.tile[x, y].slope();
                    if (Game1.netMode == 1)
                    {
                        NetMessage.SendData(0x11, -1, -1, "", 14, (float)x, (float)y, (float)num4, 0, 0, 0);
                    }
                }
                else
                {
                    SlopeTile(x, y, 0);
                    int num5 = Game1.tile[x, y].slope();
                    if (Game1.netMode == 1)
                    {
                        NetMessage.SendData(0x11, -1, -1, "", 14, (float)x, (float)y, (float)num5, 0, 0, 0);
                    }
                    PoundTile(x, y);
                    if (Game1.netMode == 1)
                    {
                        NetMessage.SendData(0x11, -1, -1, "", 7, (float)x, (float)y, 1f, 0, 0, 0);
                    }
                }
            }
        }

        public static bool PoundTile(int i, int j)
        {
            if (!CheckPound(i, j))
            {
                return false;
            }
            if (!Game1.tile[i, j].halfBrick())
            {
                Game1.tile[i, j].halfBrick(true);
            }
            else
            {
                Game1.tile[i, j].halfBrick(false);
            }
            if (!gen)
            {
                KillTile(i, j, true, true, false);
                Game1.PlaySound(0, i * 0x10, j * 0x10, 1);
                SquareTileFrame(i, j, true);
                if (!Game1.tile[i, j].halfBrick())
                {
                    Rectangle rectangle = new Rectangle(i * 0x10, j * 0x10, 0x10, 0x10);
                    for (int k = 0; k < 0xff; k++)
                    {
                        if ((Game1.player[k].active && !Game1.player[k].dead) && rectangle.Intersects(new Rectangle((int)Game1.player[k].position.X, (int)Game1.player[k].position.Y, Game1.player[k].width, Game1.player[k].height)))
                        {
                            Player player1 = Game1.player[k];
                            player1.gfxOffY += (Game1.player[k].position.Y + Game1.player[k].height) - rectangle.Y;
                            Game1.player[k].position.Y = rectangle.Y - Game1.player[k].height;
                        }
                    }
                }
            }
            return true;
        }

        public static bool Pyramid(int i, int j)
        {
            ushort num = 0x97;
            int num2 = j - genRand.Next(0, 7);
            int num3 = genRand.Next(9, 13);
            int num4 = 1;
            int num5 = j + genRand.Next(0x4b, 0x7d);
            for (int k = num2; k < num5; k++)
            {
                for (int n = i - num4; n < ((i + num4) - 1); n++)
                {
                    Game1.tile[n, k].type = num;
                    Game1.tile[n, k].active(true);
                    Game1.tile[n, k].halfBrick(false);
                    Game1.tile[n, k].slope(0);
                }
                num4++;
            }
            for (int m = (i - num4) - 5; m <= ((i + num4) + 5); m++)
            {
                for (int num9 = j - 1; num9 <= (num5 + 1); num9++)
                {
                    bool flag = true;
                    for (int num10 = m - 1; num10 <= (m + 1); num10++)
                    {
                        for (int num11 = num9 - 1; num11 <= (num9 + 1); num11++)
                        {
                            if (Game1.tile[num10, num11].type != num)
                            {
                                flag = false;
                            }
                        }
                    }
                    if (flag)
                    {
                        Game1.tile[m, num9].wall = 0x22;
                        SquareWallFrame(m, num9, true);
                    }
                }
            }
            int num12 = 1;
            if (genRand.Next(2) == 0)
            {
                num12 = -1;
            }
            int num13 = i - (num3 * num12);
            int num14 = j + num3;
            int num15 = genRand.Next(5, 8);
            bool flag2 = true;
            int num16 = genRand.Next(20, 30);
            while (flag2)
            {
                flag2 = false;
                bool flag3 = false;
                for (int num17 = num14; num17 <= (num14 + num15); num17++)
                {
                    int num18 = num13;
                    if (Game1.tile[num18, num17 - 1].type == 0x35)
                    {
                        flag3 = true;
                    }
                    if (Game1.tile[num18, num17].type == num)
                    {
                        Game1.tile[num18, num17 + 1].wall = 0x22;
                        Game1.tile[num18 + num12, num17].wall = 0x22;
                        Game1.tile[num18, num17].active(false);
                        flag2 = true;
                    }
                    if (flag3)
                    {
                        Game1.tile[num18, num17].type = 0x35;
                        Game1.tile[num18, num17].active(true);
                        Game1.tile[num18, num17].halfBrick(false);
                        Game1.tile[num18, num17].slope(0);
                    }
                }
                num13 -= num12;
            }
            num13 = i - (num3 * num12);
            bool flag4 = true;
            bool flag5 = false;
            flag2 = true;
            while (flag2)
            {
                for (int num19 = num14; num19 <= (num14 + num15); num19++)
                {
                    int num20 = num13;
                    Game1.tile[num20, num19].active(false);
                }
                num13 += num12;
                num14++;
                num16--;
                if (num14 >= (num5 - (num15 * 2)))
                {
                    num16 = 10;
                }
                if (num16 <= 0)
                {
                    bool flag6 = false;
                    if (!flag4 && !flag5)
                    {
                        flag5 = true;
                        flag6 = true;
                        int num21 = genRand.Next(7, 13);
                        int num22 = genRand.Next(0x17, 0x1c);
                        int num23 = num22;
                        int num24 = num13;
                        while (num22 > 0)
                        {
                            for (int num25 = (num14 - num21) + num15; num25 <= (num14 + num15); num25++)
                            {
                                if ((num22 == num23) || (num22 == 1))
                                {
                                    if (num25 >= (((num14 - num21) + num15) + 2))
                                    {
                                        Game1.tile[num13, num25].active(false);
                                    }
                                }
                                else if (((num22 == (num23 - 1)) || (num22 == 2)) || ((num22 == (num23 - 2)) || (num22 == 3)))
                                {
                                    if (num25 >= (((num14 - num21) + num15) + 1))
                                    {
                                        Game1.tile[num13, num25].active(false);
                                    }
                                }
                                else
                                {
                                    Game1.tile[num13, num25].active(false);
                                }
                            }
                            num22--;
                            num13 += num12;
                        }
                        int num26 = num13 - num12;
                        int minValue = num26;
                        int maxValue = num24;
                        if (num26 > num24)
                        {
                            minValue = num24;
                            maxValue = num26;
                        }
                        int contain = genRand.Next(3);
                        switch (contain)
                        {
                            case 0:
                                contain = 0x359;
                                break;

                            case 1:
                                contain = 0x350;
                                break;

                            case 2:
                                contain = 0x3a6;
                                break;
                        }
                        AddBuriedChest((minValue + maxValue) / 2, num14, contain, false, 1);
                        int num30 = genRand.Next(1, 10);
                        for (int num31 = 0; num31 < num30; num31++)
                        {
                            int num32 = genRand.Next(minValue, maxValue);
                            int num33 = num14 + num15;
                            PlaceSmallPile(num32, num33, genRand.Next(0x10, 0x13), 1, 0xb9);
                        }
                        PlaceTile(minValue + 2, ((num14 - num21) + num15) + 1, 0x5b, true, false, -1, genRand.Next(4, 7));
                        PlaceTile(minValue + 3, (num14 - num21) + num15, 0x5b, true, false, -1, genRand.Next(4, 7));
                        PlaceTile(maxValue - 2, ((num14 - num21) + num15) + 1, 0x5b, true, false, -1, genRand.Next(4, 7));
                        PlaceTile(maxValue - 3, (num14 - num21) + num15, 0x5b, true, false, -1, genRand.Next(4, 7));
                        for (int num34 = minValue; num34 <= maxValue; num34++)
                        {
                            PlacePot(num34, num14 + num15, 0x1c, genRand.Next(0x19, 0x1c));
                        }
                    }
                    if (flag4)
                    {
                        flag4 = false;
                        num12 *= -1;
                        num16 = genRand.Next(15, 20);
                    }
                    else if (flag6)
                    {
                        num16 = genRand.Next(10, 15);
                    }
                    else
                    {
                        num12 *= -1;
                        num16 = genRand.Next(20, 40);
                    }
                }
                if (num14 >= (num5 - num15))
                {
                    flag2 = false;
                }
            }
            int num35 = genRand.Next(100, 200);
            int num36 = genRand.Next(500, 800);
            flag2 = true;
            int num37 = num15;
            num16 = genRand.Next(10, 50);
            if (num12 == 1)
            {
                num13 -= num37;
            }
            int num38 = genRand.Next(5, 10);
            while (flag2)
            {
                num35--;
                num36--;
                num16--;
                for (int num39 = (num13 - num38) - genRand.Next(0, 2); num39 <= (((num13 + num37) + num38) + genRand.Next(0, 2)); num39++)
                {
                    int num40 = num14;
                    if ((num39 >= num13) && (num39 <= (num13 + num37)))
                    {
                        Game1.tile[num39, num40].active(false);
                    }
                    else
                    {
                        Game1.tile[num39, num40].type = num;
                        Game1.tile[num39, num40].active(true);
                        Game1.tile[num39, num40].halfBrick(false);
                        Game1.tile[num39, num40].slope(0);
                    }
                    if ((num39 >= (num13 - 1)) && (num39 <= ((num13 + 1) + num37)))
                    {
                        Game1.tile[num39, num40].wall = 0x22;
                    }
                }
                num14++;
                num13 += num12;
                if (num35 <= 0)
                {
                    flag2 = false;
                    for (int num41 = num13 + 1; num41 <= ((num13 + num37) - 1); num41++)
                    {
                        if (Game1.tile[num41, num14].active())
                        {
                            flag2 = true;
                        }
                    }
                }
                if (num16 < 0)
                {
                    num16 = genRand.Next(10, 50);
                    num12 *= -1;
                }
                if (num36 <= 0)
                {
                    flag2 = false;
                }
            }
            return true;
        }

        public static void QuickFindHome(int npc)
        {
            if (((Game1.npc[npc].homeTileX > 10) && (Game1.npc[npc].homeTileY > 10)) && ((Game1.npc[npc].homeTileX < (Game1.maxTilesX - 10)) && (Game1.npc[npc].homeTileY < Game1.maxTilesY)))
            {
                canSpawn = false;
                StartRoomCheck(Game1.npc[npc].homeTileX, Game1.npc[npc].homeTileY - 1);
                if (!canSpawn)
                {
                    for (int i = Game1.npc[npc].homeTileX - 1; i < (Game1.npc[npc].homeTileX + 2); i++)
                    {
                        for (int j = Game1.npc[npc].homeTileY - 1; j < (Game1.npc[npc].homeTileY + 2); j++)
                        {
                            if (StartRoomCheck(i, j))
                            {
                                break;
                            }
                        }
                    }
                }
                if (!canSpawn)
                {
                    int num3 = 10;
                    for (int k = Game1.npc[npc].homeTileX - num3; k <= (Game1.npc[npc].homeTileX + num3); k += 2)
                    {
                        for (int m = Game1.npc[npc].homeTileY - num3; m <= (Game1.npc[npc].homeTileY + num3); m += 2)
                        {
                            if (StartRoomCheck(k, m))
                            {
                                break;
                            }
                        }
                    }
                }
                if (canSpawn)
                {
                    RoomNeeds(Game1.npc[npc].type);
                    if (canSpawn)
                    {
                        ScoreRoom(npc);
                    }
                    if (canSpawn && (hiScore > 0))
                    {
                        Game1.npc[npc].homeTileX = bestX;
                        Game1.npc[npc].homeTileY = bestY;
                        Game1.npc[npc].homeless = false;
                        AchievementsHelper.NotifyProgressionEvent(8);
                        canSpawn = false;
                    }
                    else
                    {
                        Game1.npc[npc].homeless = true;
                    }
                }
                else
                {
                    Game1.npc[npc].homeless = true;
                }
            }
        }

        public static Vector2 randBoneTile()
        {
            int num = genRand.Next(2);
            int num2 = 0;
            if (num == 0)
            {
                num = 240;
                num2 = genRand.Next(2);
                switch (num2)
                {
                    case 0:
                        num2 = 0x10;
                        break;

                    case 1:
                        num2 = 0x11;
                        break;
                }
            }
            else if (num == 1)
            {
                num = 0xf1;
                num2 = genRand.Next(9);
            }
            return new Vector2((float)num, (float)num2);
        }

        public static int randGem()
        {
            int index = genRand.Next(6);
            while (!gem[index])
            {
                index = genRand.Next(6);
            }
            return index;
        }

        public static ushort randGemTile()
        {
            if (genRand.Next(20) != 0)
            {
                return 1;
            }
            switch (((ushort)randGem()))
            {
                case 0:
                    return 0x43;

                case 1:
                    return 0x42;

                case 2:
                    return 0x3f;

                case 3:
                    return 0x41;

                case 4:
                    return 0x40;
            }
            return 0x44;
        }

        public static Vector2 randHellPicture()
        {
            int num = genRand.Next(4);
            int num2 = 0;
            if (num == 1)
            {
                num = genRand.Next(4);
            }
            if (num == 0)
            {
                num = 240;
                num2 = genRand.Next(5);
                switch (num2)
                {
                    case 0:
                        num2 = 0x1b;
                        break;

                    case 1:
                        num2 = 0x1d;
                        break;

                    case 2:
                        num2 = 30;
                        break;

                    case 3:
                        num2 = 0x1f;
                        break;

                    case 4:
                        num2 = 0x20;
                        break;
                }
            }
            else if (num == 1)
            {
                num = 0xf2;
                num2 = 14;
            }
            else if (num == 2)
            {
                num = 0xf5;
                num2 = genRand.Next(3);
                switch (num2)
                {
                    case 0:
                        num2 = 1;
                        break;

                    case 1:
                        num2 = 2;
                        break;

                    case 2:
                        num2 = 4;
                        break;
                }
            }
            else
            {
                num = 0xf6;
                num2 = genRand.Next(3);
                if (num2 == 0)
                {
                    num2 = 0;
                }
                else if (num2 == 1)
                {
                    num2 = 0x10;
                }
                else if (num2 == 2)
                {
                    num2 = 0x11;
                }
            }
            return new Vector2((float)num, (float)num2);
        }

        public static Vector2 randHousePicture()
        {
            int num = genRand.Next(4);
            int num2 = 0;
            if (num <= 1)
            {
                num = 240;
                int maxValue = 10;
                num2 = genRand.Next(maxValue);
                switch (num2)
                {
                    case 9:
                        num2 = genRand.Next(maxValue);
                        break;

                    case 5:
                        num2 = genRand.Next(maxValue);
                        break;

                    case 6:
                        num2 = genRand.Next(maxValue);
                        break;

                    case 0:
                        num2 = 0x1a;
                        goto Label_014F;

                    case 1:
                        num2 = 0x1c;
                        goto Label_014F;

                    case 2:
                        num2 = 20;
                        goto Label_014F;

                    case 3:
                        num2 = 0x15;
                        goto Label_014F;

                    case 4:
                        num2 = 0x16;
                        goto Label_014F;
                }
                if (num2 == 5)
                {
                    num2 = 0x18;
                }
                else if (num2 == 6)
                {
                    num2 = 0x19;
                }
                else if (num2 == 7)
                {
                    num2 = 0x21;
                }
                else if (num2 == 8)
                {
                    num2 = 0x22;
                }
                else if (num2 == 9)
                {
                    num2 = 0x23;
                }
            }
            else if (num == 2)
            {
                int num4 = 4;
                num = 0xf5;
                num2 = genRand.Next(num4);
                switch (num2)
                {
                    case 2:
                        num2 = genRand.Next(num4);
                        break;

                    case 0:
                        num2 = genRand.Next(num4);
                        break;
                }
                if (num2 == 0)
                {
                    num2 = genRand.Next(num4);
                }
                if (num2 == 0)
                {
                    num2 = genRand.Next(num4);
                }
                if (num2 == 0)
                {
                    num2 = 0;
                }
                else if (num2 == 1)
                {
                    num2 = 3;
                }
                else if (num2 == 2)
                {
                    num2 = 5;
                }
                else if (num2 == 3)
                {
                    num2 = 6;
                }
            }
            else
            {
                num = 0xf6;
                num2 = 1;
            }
        Label_014F:
            return new Vector2((float)num, (float)num2);
        }

        public static void randMoss()
        {
            mossType[0] = genRand.Next(5);
            mossType[1] = genRand.Next(5);
            while (mossType[1] == mossType[0])
            {
                mossType[1] = genRand.Next(5);
            }
            mossType[2] = genRand.Next(5);
            while ((mossType[2] == mossType[0]) || (mossType[2] == mossType[1]))
            {
                mossType[2] = genRand.Next(5);
            }
        }

        public static void RandomizeBackgrounds()
        {
            treeBG = genRand.Next(9);
            if (((treeBG == 1) || (treeBG == 2)) && (genRand.Next(2) == 0))
            {
                treeBG = genRand.Next(7);
            }
            if (treeBG == 0)
            {
                treeBG = genRand.Next(7);
            }
            if ((treeBG == 3) && (genRand.Next(3) == 0))
            {
                treeBG = 0x1f;
            }
            if ((treeBG == 5) && (genRand.Next(2) == 0))
            {
                treeBG = 0x33;
            }
            if ((treeBG == 7) && (genRand.Next(4) == 0))
            {
                treeBG = genRand.Next(0x47, 0x4a);
            }
            setBG(0, treeBG);
            setBG(1, genRand.Next(2));
            setBG(2, genRand.Next(2));
            snowBG = genRand.Next(6);
            if ((snowBG == 2) && (genRand.Next(2) == 0))
            {
                if (genRand.Next(2) == 0)
                {
                    snowBG = 0x15;
                }
                else
                {
                    snowBG = 0x16;
                }
            }
            if ((snowBG == 3) && (genRand.Next(2) == 0))
            {
                if (genRand.Next(2) == 0)
                {
                    snowBG = 0x1f;
                }
                else
                {
                    snowBG = 0x20;
                }
            }
            if ((snowBG == 4) && (genRand.Next(2) == 0))
            {
                if (genRand.Next(2) == 0)
                {
                    snowBG = 0x29;
                }
                else
                {
                    snowBG = 0x2a;
                }
            }
            setBG(3, snowBG);
            setBG(4, genRand.Next(2));
            setBG(5, genRand.Next(3));
            setBG(6, genRand.Next(2));
            setBG(7, genRand.Next(3));
        }

        public static void RandomizeCaveBackgrounds()
        {
            int maxValue = 8;
            if (Game1.maxTilesX == 0x1068)
            {
                Game1.caveBackX[0] = genRand.Next((int)((Game1.maxTilesX * 0.5) - (Game1.maxTilesX * 0.25f)), (int)((Game1.maxTilesX * 0.5) + (Game1.maxTilesX * 0.25f)));
                Game1.caveBackX[1] = Game1.maxTilesX;
                Game1.caveBackX[2] = Game1.maxTilesX;
                Game1.caveBackStyle[0] = genRand.Next(maxValue);
                Game1.caveBackStyle[1] = genRand.Next(maxValue);
                while (Game1.caveBackStyle[1] == Game1.caveBackStyle[0])
                {
                    Game1.caveBackStyle[1] = genRand.Next(maxValue);
                }
            }
            else if (Game1.maxTilesX == 0x1900)
            {
                Game1.caveBackX[0] = genRand.Next((int)((Game1.maxTilesX * 0.334) - (Game1.maxTilesX * 0.2f)), (int)((Game1.maxTilesX * 0.334) + (Game1.maxTilesX * 0.2f)));
                Game1.caveBackX[1] = genRand.Next((int)((Game1.maxTilesX * 0.667) - (Game1.maxTilesX * 0.2f)), (int)((Game1.maxTilesX * 0.667) + (Game1.maxTilesX * 0.2f)));
                Game1.caveBackX[2] = Game1.maxTilesX;
                Game1.caveBackStyle[0] = genRand.Next(maxValue);
                Game1.caveBackStyle[1] = genRand.Next(maxValue);
                Game1.caveBackStyle[2] = genRand.Next(maxValue);
                while (Game1.caveBackStyle[1] == Game1.caveBackStyle[0])
                {
                    Game1.caveBackStyle[1] = genRand.Next(maxValue);
                }
                while ((Game1.caveBackStyle[2] == Game1.caveBackStyle[0]) || (Game1.caveBackStyle[2] == Game1.caveBackStyle[1]))
                {
                    Game1.caveBackStyle[2] = genRand.Next(maxValue);
                }
            }
            else
            {
                Game1.caveBackX[0] = genRand.Next((int)((Game1.maxTilesX * 0.25) - (Game1.maxTilesX * 0.15f)), (int)((Game1.maxTilesX * 0.25) + (Game1.maxTilesX * 0.15f)));
                Game1.caveBackX[1] = genRand.Next((int)((Game1.maxTilesX * 0.5) - (Game1.maxTilesX * 0.15f)), (int)((Game1.maxTilesX * 0.5) + (Game1.maxTilesX * 0.15f)));
                Game1.caveBackX[2] = genRand.Next((int)((Game1.maxTilesX * 0.75) - (Game1.maxTilesX * 0.15f)), (int)((Game1.maxTilesX * 0.75) + (Game1.maxTilesX * 0.15f)));
                Game1.caveBackStyle[0] = genRand.Next(maxValue);
                Game1.caveBackStyle[1] = genRand.Next(maxValue);
                Game1.caveBackStyle[2] = genRand.Next(maxValue);
                Game1.caveBackStyle[3] = genRand.Next(maxValue);
                while (Game1.caveBackStyle[1] == Game1.caveBackStyle[0])
                {
                    Game1.caveBackStyle[1] = genRand.Next(maxValue);
                }
                while ((Game1.caveBackStyle[2] == Game1.caveBackStyle[0]) || (Game1.caveBackStyle[2] == Game1.caveBackStyle[1]))
                {
                    Game1.caveBackStyle[2] = genRand.Next(maxValue);
                }
                while (((Game1.caveBackStyle[3] == Game1.caveBackStyle[0]) || (Game1.caveBackStyle[3] == Game1.caveBackStyle[1])) || (Game1.caveBackStyle[3] == Game1.caveBackStyle[2]))
                {
                    Game1.caveBackStyle[3] = genRand.Next(maxValue);
                }
            }
            Game1.iceBackStyle = genRand.Next(4);
            Game1.hellBackStyle = genRand.Next(3);
            Game1.jungleBackStyle = genRand.Next(2);
        }

        public static void RandomizeMoonState()
        {
            Game1.moonType = genRand.Next(Game1.maxMoons);
        }

        public static void RandomizeTreeStyle()
        {
            if (Game1.maxTilesX == 0x1068)
            {
                Game1.treeX[0] = genRand.Next((int)((Game1.maxTilesX * 0.5) - (Game1.maxTilesX * 0.25f)), (int)((Game1.maxTilesX * 0.5) + (Game1.maxTilesX * 0.25f)));
                Game1.treeStyle[0] = genRand.Next(6);
                Game1.treeStyle[1] = genRand.Next(6);
                while (Game1.treeStyle[1] == Game1.treeStyle[0])
                {
                    Game1.treeStyle[1] = genRand.Next(6);
                }
                Game1.treeX[1] = Game1.maxTilesX;
                Game1.treeX[2] = Game1.maxTilesX;
            }
            else if (Game1.maxTilesX == 0x1900)
            {
                Game1.treeX[0] = genRand.Next((int)((Game1.maxTilesX * 0.334) - (Game1.maxTilesX * 0.2f)), (int)((Game1.maxTilesX * 0.334) + (Game1.maxTilesX * 0.2f)));
                Game1.treeX[1] = genRand.Next((int)((Game1.maxTilesX * 0.667) - (Game1.maxTilesX * 0.2f)), (int)((Game1.maxTilesX * 0.667) + (Game1.maxTilesX * 0.2f)));
                Game1.treeStyle[0] = genRand.Next(6);
                Game1.treeStyle[1] = genRand.Next(6);
                Game1.treeStyle[2] = genRand.Next(6);
                while (Game1.treeStyle[1] == Game1.treeStyle[0])
                {
                    Game1.treeStyle[1] = genRand.Next(6);
                }
                while ((Game1.treeStyle[2] == Game1.treeStyle[0]) || (Game1.treeStyle[2] == Game1.treeStyle[1]))
                {
                    Game1.treeStyle[2] = genRand.Next(6);
                }
                Game1.treeX[2] = Game1.maxTilesX;
            }
            else
            {
                Game1.treeX[0] = genRand.Next((int)((Game1.maxTilesX * 0.25) - (Game1.maxTilesX * 0.15f)), (int)((Game1.maxTilesX * 0.25) + (Game1.maxTilesX * 0.15f)));
                Game1.treeX[1] = genRand.Next((int)((Game1.maxTilesX * 0.5) - (Game1.maxTilesX * 0.15f)), (int)((Game1.maxTilesX * 0.5) + (Game1.maxTilesX * 0.15f)));
                Game1.treeX[2] = genRand.Next((int)((Game1.maxTilesX * 0.75) - (Game1.maxTilesX * 0.15f)), (int)((Game1.maxTilesX * 0.75) + (Game1.maxTilesX * 0.15f)));
                Game1.treeStyle[0] = genRand.Next(6);
                Game1.treeStyle[1] = genRand.Next(6);
                Game1.treeStyle[2] = genRand.Next(6);
                Game1.treeStyle[3] = genRand.Next(6);
                while (Game1.treeStyle[1] == Game1.treeStyle[0])
                {
                    Game1.treeStyle[1] = genRand.Next(6);
                }
                while ((Game1.treeStyle[2] == Game1.treeStyle[0]) || (Game1.treeStyle[2] == Game1.treeStyle[1]))
                {
                    Game1.treeStyle[2] = genRand.Next(6);
                }
                while (((Game1.treeStyle[3] == Game1.treeStyle[0]) || (Game1.treeStyle[3] == Game1.treeStyle[1])) || (Game1.treeStyle[3] == Game1.treeStyle[2]))
                {
                    Game1.treeStyle[3] = genRand.Next(6);
                }
            }
        }

        public static void RandomizeWeather()
        {
            if (Game1.cloudLimit >= 10)
            {
                Game1.numClouds = genRand.Next(10, Game1.cloudLimit);
                Game1.windSpeed = 0f;
                while (Game1.windSpeed == 0f)
                {
                    Game1.windSpeed = genRand.Next(-100, 0x65) * 0.01f;
                    Game1.windSpeedSet = Game1.windSpeed;
                }
                Cloud.resetClouds();
            }
        }

        public static Point RandomRectanglePoint(Rectangle rectangle)
        {
            return new Point(genRand.Next(rectangle.X, rectangle.X + rectangle.Width), genRand.Next(rectangle.Y, rectangle.Y + rectangle.Height));
        }

        public static Point RandomRectanglePoint(int x, int y, int width, int height)
        {
            return new Point(genRand.Next(x, x + width), genRand.Next(y, y + height));
        }

        public static Point RandomWorldPoint(int padding)
        {
            return RandomWorldPoint(padding, padding, padding, padding);
        }

        public static Point RandomWorldPoint(int top = 0, int right = 0, int bottom = 0, int left = 0)
        {
            return new Point(genRand.Next(left, Game1.maxTilesX - right), genRand.Next(top, Game1.maxTilesY - bottom));
        }

        public static Vector2 randPictureTile()
        {
            int num = genRand.Next(3);
            int num2 = 0;
            if (num <= 1)
            {
                int maxValue = 7;
                num = 240;
                num2 = genRand.Next(maxValue);
                switch (num2)
                {
                    case 6:
                        num2 = genRand.Next(maxValue);
                        break;

                    case 0:
                        num2 = 12;
                        goto Label_011C;

                    case 1:
                        num2 = 13;
                        goto Label_011C;

                    case 2:
                        num2 = 14;
                        goto Label_011C;

                    case 3:
                        num2 = 15;
                        goto Label_011C;

                    case 4:
                        num2 = 0x12;
                        goto Label_011C;

                    case 5:
                        num2 = 0x13;
                        goto Label_011C;
                }
                if (num2 == 6)
                {
                    num2 = 0x17;
                }
            }
            else if (num == 2)
            {
                num = 0xf2;
                int num4 = 0x11;
                num2 = genRand.Next(num4);
                for (int i = 0; i < 2; i++)
                {
                    switch (num2)
                    {
                        case 6:
                            num2 = genRand.Next(num4);
                            break;

                        case 13:
                            num2 = genRand.Next(num4);
                            break;

                        case 14:
                            num2 = genRand.Next(num4);
                            break;

                        case 15:
                            num2 = genRand.Next(num4);
                            break;
                    }
                }
                if (num2 > 13)
                {
                    if (num2 == 14)
                    {
                        num2 = 15;
                    }
                    else if (num2 == 15)
                    {
                        num2 = 0x10;
                    }
                    else if (num2 == 0x10)
                    {
                        num2 = 30;
                    }
                }
            }
        Label_011C:
            return new Vector2((float)num, (float)num2);
        }

        public static void RangeFrame(int startX, int startY, int endX, int endY)
        {
            int num = startX;
            int num2 = endX + 1;
            int num3 = startY;
            int num4 = endY + 1;
            for (int i = num - 1; i < (num2 + 1); i++)
            {
                for (int j = num3 - 1; j < (num4 + 1); j++)
                {
                    TileFrame(i, j, false, false);
                    Framing.WallFrame(i, j, false);
                }
            }
        }

        private static void ResetGenerator()
        {
            mudWall = false;
            hellChest = 0;
            JungleX = 0;
            numMCaves = 0;
            numIslandHouses = 0;
            houseCount = 0;
            dEnteranceX = 0;
            numDRooms = 0;
            numDDoors = 0;
            numDPlats = 0;
            numJChests = 0;
            JungleItemCount = 0;
        }

        public static bool RoomNeeds(int npcType)
        {
            roomChair = false;
            roomDoor = false;
            roomTable = false;
            roomTorch = false;
            if ((houseTile[15] || houseTile[0x4f]) || (houseTile[0x59] || houseTile[0x66]))
            {
                roomChair = true;
            }
            if (((houseTile[14] || houseTile[0x12]) || (houseTile[0x57] || houseTile[0x58])) || ((houseTile[90] || houseTile[0x65]) || (houseTile[0x162] || houseTile[0x163])))
            {
                roomTable = true;
            }
            if ((((houseTile[4] || houseTile[0x21]) || (houseTile[0x22] || houseTile[0x23])) || ((houseTile[0x2a] || houseTile[0x31]) || (houseTile[0x5d] || houseTile[0x5f]))) || (((houseTile[0x62] || houseTile[100]) || (houseTile[0x95] || houseTile[0xad])) || (((houseTile[0xae] || houseTile[270]) || (houseTile[0x10f] || houseTile[0x13c])) || ((houseTile[0x13d] || houseTile[0x13e]) || houseTile[0x174]))))
            {
                roomTorch = true;
            }
            if (((houseTile[10] || houseTile[11]) || (houseTile[0x13] || houseTile[0x183])) || ((houseTile[0x182] || houseTile[0x184]) || houseTile[0x185]))
            {
                roomDoor = true;
            }
            if ((roomChair && roomTable) && (roomDoor && roomTorch))
            {
                canSpawn = true;
            }
            else
            {
                canSpawn = false;
            }
            return canSpawn;
        }

        public static void saveAndPlay()
        {
            //RnD
            //ThreadPool.QueueUserWorkItem(new WaitCallback(WorldGen.saveAndPlayCallBack), 1);
            WorldGen.saveAndPlayCallBack(default);
        }

        public static void saveAndPlayCallBack(object threadContext)
        {
            WorldFile.saveWorld();
        }

        public static void SaveAndQuit(Action callback = null)
        {
            Game1.PlaySound(11, -1, -1, 1);
            //RnD
            //ThreadPool.QueueUserWorkItem(new WaitCallback(WorldGen.SaveAndQuitCallBack), callback);
            WorldGen.SaveAndQuitCallBack(default);
        }

        public static void SaveAndQuitCallBack(object threadContext)
        {
            try
            {
                Game1.PlaySound(0x22, -1, -1, 0);
                Game1.PlaySound(0x23, -1, -1, 0);
            }
            catch
            {
            }
            if (Game1.netMode == 0)
            {
                WorldFile.CacheSaveTime();
            }
            Game1.invasionProgress = 0;
            Game1.invasionProgressDisplayLeft = 0;
            Game1.invasionProgressAlpha = 0f;
            Game1.menuMode = 10;
            Game1.gameMenu = true;
            CaptureInterface.ResetFocus();
            Game1.ActivePlayerFileData.StopPlayTimer();
            Player.SavePlayer(Game1.ActivePlayerFileData, false);
            if (Game1.netMode == 0)
            {
                WorldFile.saveWorld();
                Game1.PlaySound(10, -1, -1, 1);
            }
            else
            {
                Netplay.disconnect = true;
                Game1.netMode = 0;
            }
            Game1.fastForwardTime = false;
            Game1.UpdateSundial();
            Game1.menuMode = 0;
            if (threadContext != null)
            {
                ((Action)threadContext)();
            }
        }

        public static void saveToonWhilePlaying()
        {
            //RnD
            //ThreadPool.QueueUserWorkItem(new WaitCallback(WorldGen.saveToonWhilePlayingCallBack), 1);
            WorldGen.saveToonWhilePlayingCallBack(default);
        }

        public static void saveToonWhilePlayingCallBack(object threadContext)
        {
            Player.SavePlayer(Game1.ActivePlayerFileData, false);
        }

        public static void ScoreRoom(int ignoreNPC = -1)
        {
            roomOccupied = false;
            roomEvil = false;
            for (int i = 0; i < 200; i++)
            {
                if ((Game1.npc[i].active && Game1.npc[i].townNPC) && ((ignoreNPC != i) && !Game1.npc[i].homeless))
                {
                    for (int k = 0; k < numRoomTiles; k++)
                    {
                        if ((Game1.npc[i].homeTileX != roomX[k]) || (Game1.npc[i].homeTileY != roomY[k]))
                        {
                            continue;
                        }
                        bool flag = false;
                        for (int m = 0; m < numRoomTiles; m++)
                        {
                            if ((Game1.npc[i].homeTileX == roomX[m]) && ((Game1.npc[i].homeTileY - 1) == roomY[m]))
                            {
                                flag = true;
                                break;
                            }
                        }
                        if (flag)
                        {
                            roomOccupied = true;
                            hiScore = -1;
                            return;
                        }
                    }
                }
            }
            hiScore = 0;
            int num4 = 0;
            int num5 = 50;
            int num6 = 0;
            int num7 = ((roomX1 - ((Game1.zoneX / 2) / 0x10)) - 1) - Lighting.offScreenTiles;
            int num8 = ((roomX2 + ((Game1.zoneX / 2) / 0x10)) + 1) + Lighting.offScreenTiles;
            int num9 = ((roomY1 - ((Game1.zoneY / 2) / 0x10)) - 1) - Lighting.offScreenTiles;
            int maxTilesX = ((roomY2 + ((Game1.zoneY / 2) / 0x10)) + 1) + Lighting.offScreenTiles;
            if (num7 < 0)
            {
                num7 = 0;
            }
            if (num8 >= Game1.maxTilesX)
            {
                num8 = Game1.maxTilesX - 1;
            }
            if (num9 < 0)
            {
                num9 = 0;
            }
            if (maxTilesX > Game1.maxTilesX)
            {
                maxTilesX = Game1.maxTilesX;
            }
            for (int j = num7 + 1; j < num8; j++)
            {
                for (int n = num9 + 2; n < (maxTilesX + 2); n++)
                {
                    if (Game1.tile[j, n].active())
                    {
                        if ((((Game1.tile[j, n].type == 0x17) || (Game1.tile[j, n].type == 0x18)) || ((Game1.tile[j, n].type == 0x19) || (Game1.tile[j, n].type == 0x20))) || ((Game1.tile[j, n].type == 0x70) || (Game1.tile[j, n].type == 0xa3)))
                        {
                            num6++;
                        }
                        else if (((Game1.tile[j, n].type == 0xc7) || (Game1.tile[j, n].type == 0xc9)) || (((Game1.tile[j, n].type == 200) || (Game1.tile[j, n].type == 0xcb)) || (Game1.tile[j, n].type == 0xea)))
                        {
                            num6++;
                        }
                        else if (Game1.tile[j, n].type == 0x1b)
                        {
                            num6 -= 5;
                        }
                        else if (((Game1.tile[j, n].type == 0x6d) || (Game1.tile[j, n].type == 110)) || (((Game1.tile[j, n].type == 0x71) || (Game1.tile[j, n].type == 0x74)) || (Game1.tile[j, n].type == 0xa4)))
                        {
                            num6--;
                        }
                    }
                }
            }
            if (num6 < 50)
            {
                num6 = 0;
            }
            num5 -= num6;
            if (num5 <= -250)
            {
                hiScore = num5;
                roomEvil = true;
            }
            else
            {
                num7 = roomX1;
                num8 = roomX2;
                num9 = roomY1;
                maxTilesX = roomY2;
                for (int num13 = num7 + 1; num13 < num8; num13++)
                {
                    for (int num14 = num9 + 2; num14 < (maxTilesX + 2); num14++)
                    {
                        if (!Game1.tile[num13, num14].nactive())
                        {
                            continue;
                        }
                        num4 = num5;
                        if (((Game1.tileSolid[Game1.tile[num13, num14].type] && !Game1.tileSolidTop[Game1.tile[num13, num14].type]) && (!Collision.SolidTiles(num13 - 1, num13 + 1, num14 - 3, num14 - 1) && Game1.tile[num13 - 1, num14].nactive())) && ((Game1.tileSolid[Game1.tile[num13 - 1, num14].type] && Game1.tile[num13 + 1, num14].nactive()) && Game1.tileSolid[Game1.tile[num13 + 1, num14].type]))
                        {
                            for (int num15 = num13 - 2; num15 < (num13 + 3); num15++)
                            {
                                for (int num16 = num14 - 4; num16 < num14; num16++)
                                {
                                    if (Game1.tile[num15, num16].nactive())
                                    {
                                        if (num15 == num13)
                                        {
                                            if (num4 > 0)
                                            {
                                                num4 -= 15;
                                                if (num4 < 0)
                                                {
                                                    num4 = 0;
                                                }
                                            }
                                        }
                                        else if (Game1.tile[num15, num16].type == 0x15)
                                        {
                                            if (num4 > 0)
                                            {
                                                num4 -= 30;
                                                if (num4 < 1)
                                                {
                                                    num4 = 1;
                                                }
                                            }
                                        }
                                        else if ((Game1.tile[num15, num16].type == 10) || (Game1.tile[num15, num16].type == 11))
                                        {
                                            num4 -= 20;
                                        }
                                        else if (Game1.tileSolid[Game1.tile[num15, num16].type])
                                        {
                                            num4 -= 5;
                                        }
                                        else
                                        {
                                            num4 += 5;
                                        }
                                    }
                                }
                            }
                            if (num4 > hiScore)
                            {
                                bool flag2 = false;
                                for (int num17 = 0; num17 < numRoomTiles; num17++)
                                {
                                    if ((roomX[num17] == num13) && (roomY[num17] == num14))
                                    {
                                        flag2 = true;
                                        break;
                                    }
                                }
                                if (flag2)
                                {
                                    hiScore = num4;
                                    bestX = num13;
                                    bestY = num14;
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void SectionTileFrame(int startX, int startY, int endX, int endY)
        {
            Game1.mapTime = Game1.mapTimeMax + 10;
            noMapUpdate = true;
            int num = startX * 200;
            int num2 = (endX + 1) * 200;
            int num3 = startY * 150;
            int num4 = (endY + 1) * 150;
            if (num < 1)
            {
                num = 1;
            }
            if (num3 < 1)
            {
                num3 = 1;
            }
            if (num > (Game1.maxTilesX - 2))
            {
                num = Game1.maxTilesX - 2;
            }
            if (num3 > (Game1.maxTilesY - 2))
            {
                num3 = Game1.maxTilesY - 2;
            }
            if (num2 > (Game1.maxTilesX - 2))
            {
                num2 = Game1.maxTilesX - 2;
            }
            if (num4 > (Game1.maxTilesY - 2))
            {
                num4 = Game1.maxTilesY - 2;
            }
            for (int i = num - 1; i < (num2 + 1); i++)
            {
                for (int k = num3 - 1; k < (num4 + 1); k++)
                {
                    if (Game1.tile[i, k] == null)
                    {
                        Game1.tile[i, k] = new Tile();
                    }
                    TileFrame(i, k, true, true);
                    Framing.WallFrame(i, k, true);
                }
            }
            for (int j = startX; j <= endX; j++)
            {
                for (int m = startY; m <= endY; m++)
                {
                    Game1.sectionManager.SetSectionFramed(j, m);
                }
            }
            noMapUpdate = false;
        }

        public static void SectionTileFrameWithCheck(int startX, int startY, int endX, int endY)
        {
            int sectionX = Netplay.GetSectionX(startX);
            int sectionY = Netplay.GetSectionY(startY);
            int num3 = Netplay.GetSectionX(endX);
            int num4 = Netplay.GetSectionY(endY);
            for (int i = sectionX; i <= num3; i++)
            {
                for (int j = sectionY; j <= num4; j++)
                {
                    if (Game1.sectionManager.SectionLoaded(i, j) && !Game1.sectionManager.SectionFramed(i, j))
                    {
                        SectionTileFrame(i, j, i, j);
                        if (Game1.sectionManager.FrameSectionsLeft == 0)
                        {
                            return;
                        }
                    }
                }
            }
        }

        public static void serverLoadWorld()
        {
            //RnD
            //ThreadPool.QueueUserWorkItem(new WaitCallback(WorldGen.serverLoadWorldCallBack), 1);
            WorldGen.serverLoadWorldCallBack(default);
        }

        public static void serverLoadWorldCallBack(object threadContext)
        {
            Game1.rand = new Random((int)DateTime.Now.Ticks);
            WorldFile.loadWorld();
            if (loadFailed || !loadSuccess)
            {
                WorldFile.loadWorld();
                if (loadFailed || !loadSuccess)
                {
                    if (FileUtilities.Exists(Game1.worldPathName + ".bak"))
                    {
                        worldBackup = true;
                    }
                    else
                    {
                        worldBackup = false;
                    }
                    if (!Game1.dedServ)
                    {
                        if (worldBackup)
                        {
                            Game1.menuMode = 200;
                            return;
                        }
                        Game1.menuMode = 0xc9;
                        return;
                    }
                    if (worldBackup)
                    {
                        FileUtilities.Copy(Game1.worldPathName + ".bak", Game1.worldPathName, true);
                        FileUtilities.Delete(Game1.worldPathName + ".bak");
                        WorldFile.loadWorld();
                        if (loadFailed || !loadSuccess)
                        {
                            WorldFile.loadWorld();
                            if (loadFailed || !loadSuccess)
                            {
                                Console.WriteLine("Load failed!");
                                return;
                            }
                        }
                    }
                    else
                    {
                        Console.WriteLine("Load failed!  No backup found.");
                        return;
                    }
                }
            }
            Game1.PlaySound(10, -1, -1, 1);
            Netplay.StartServer();
            Game1.dayTime = WorldFile.tempDayTime;
            Game1.time = WorldFile.tempTime;
            Game1.raining = WorldFile.tempRaining;
            Game1.rainTime = WorldFile.tempRainTime;
            Game1.maxRaining = WorldFile.tempMaxRain;
            Game1.cloudAlpha = WorldFile.tempMaxRain;
            Game1.moonPhase = WorldFile.tempMoonPhase;
            Game1.bloodMoon = WorldFile.tempBloodMoon;
            Game1.eclipse = WorldFile.tempEclipse;
            CultistRitual.delay = WorldFile.tempCultistDelay;
        }

        public static void setBG(int bg, int style)
        {
            if (bg == 0)
            {
                treeBG = style;
                Game1.treeMntBG[0] = 7;
                Game1.treeMntBG[1] = 8;
                if (style == 1)
                {
                    Game1.treeBG[0] = 50;
                    Game1.treeBG[1] = 0x33;
                    Game1.treeBG[2] = 0x34;
                }
                else if (style == 2)
                {
                    Game1.treeBG[0] = 0x35;
                    Game1.treeBG[1] = 0x36;
                    Game1.treeBG[2] = 0x37;
                }
                else if (style == 3)
                {
                    Game1.treeMntBG[1] = 90;
                    Game1.treeBG[0] = 0x5b;
                    Game1.treeBG[1] = -1;
                    Game1.treeBG[2] = 0x5c;
                }
                else if (style == 0x1f)
                {
                    Game1.treeMntBG[1] = 90;
                    Game1.treeBG[0] = 0x5b;
                    Game1.treeBG[1] = -1;
                    Game1.treeBG[2] = 11;
                }
                else if (style == 4)
                {
                    Game1.treeMntBG[0] = 0x5d;
                    Game1.treeMntBG[1] = 0x5e;
                    Game1.treeBG[0] = -1;
                    Game1.treeBG[1] = -1;
                    Game1.treeBG[2] = -1;
                }
                else if (style == 5)
                {
                    Game1.treeMntBG[0] = 0x5d;
                    Game1.treeMntBG[1] = 0x5e;
                    Game1.treeBG[0] = -1;
                    Game1.treeBG[1] = -1;
                    Game1.treeBG[2] = 0x37;
                }
                else if (style == 0x33)
                {
                    Game1.treeMntBG[0] = 0x5d;
                    Game1.treeMntBG[1] = 0x5e;
                    Game1.treeBG[0] = -1;
                    Game1.treeBG[1] = -1;
                    Game1.treeBG[2] = 11;
                }
                else if (style == 6)
                {
                    Game1.treeMntBG[0] = 0xab;
                    Game1.treeMntBG[1] = 0xac;
                    Game1.treeBG[0] = 0xad;
                    Game1.treeBG[1] = -1;
                    Game1.treeBG[2] = -1;
                }
                else if (style == 7)
                {
                    Game1.treeMntBG[0] = 0xb0;
                    Game1.treeMntBG[1] = 0xb1;
                    Game1.treeBG[0] = 0xb2;
                    Game1.treeBG[1] = -1;
                    Game1.treeBG[2] = -1;
                }
                else if (style == 0x47)
                {
                    Game1.treeMntBG[0] = 0xb0;
                    Game1.treeMntBG[1] = 0xb1;
                    Game1.treeBG[0] = 0xb2;
                    Game1.treeBG[1] = -1;
                    Game1.treeBG[2] = 11;
                }
                else if (style == 0x48)
                {
                    Game1.treeMntBG[0] = 0xb0;
                    Game1.treeMntBG[1] = 0xb1;
                    Game1.treeBG[0] = 0xb2;
                    Game1.treeBG[1] = -1;
                    Game1.treeBG[2] = 0x34;
                }
                else if (style == 0x49)
                {
                    Game1.treeMntBG[0] = 0xb0;
                    Game1.treeMntBG[1] = 0xb1;
                    Game1.treeBG[0] = 0xb2;
                    Game1.treeBG[1] = -1;
                    Game1.treeBG[2] = 0x37;
                }
                else if (style == 8)
                {
                    Game1.treeMntBG[0] = 0xb3;
                    Game1.treeMntBG[1] = 180;
                    Game1.treeBG[0] = 0xb8;
                    Game1.treeBG[1] = -1;
                    Game1.treeBG[2] = -1;
                }
                else
                {
                    Game1.treeBG[0] = 9;
                    Game1.treeBG[1] = 10;
                    Game1.treeBG[2] = 11;
                }
            }
            else if (bg == 1)
            {
                corruptBG = style;
                if (style == 1)
                {
                    Game1.corruptBG[0] = 0x38;
                    Game1.corruptBG[1] = 0x39;
                    Game1.corruptBG[2] = 0x3a;
                }
                else
                {
                    Game1.corruptBG[0] = 12;
                    Game1.corruptBG[1] = 13;
                    Game1.corruptBG[2] = 14;
                }
            }
            else if (bg == 2)
            {
                jungleBG = style;
                if (style == 1)
                {
                    Game1.jungleBG[0] = 0x3b;
                    Game1.jungleBG[1] = 60;
                    Game1.jungleBG[2] = 0x3d;
                }
                else
                {
                    Game1.jungleBG[0] = 15;
                    Game1.jungleBG[1] = 0x10;
                    Game1.jungleBG[2] = 0x11;
                }
            }
            else if (bg == 3)
            {
                snowBG = style;
                Game1.snowMntBG[0] = 0x23;
                Game1.snowMntBG[1] = 0x24;
                if (style == 1)
                {
                    Game1.snowBG[0] = 0x61;
                    Game1.snowBG[1] = 0x60;
                    Game1.snowBG[2] = 0x5f;
                }
                else if (style == 2)
                {
                    Game1.snowMntBG[0] = 0x62;
                    Game1.snowMntBG[1] = 0x63;
                    Game1.snowBG[0] = -1;
                    Game1.snowBG[1] = -1;
                    Game1.snowBG[2] = -1;
                }
                else if (style == 0x15)
                {
                    Game1.snowMntBG[0] = 0x62;
                    Game1.snowMntBG[1] = 0x63;
                    Game1.snowBG[0] = 0x5f;
                    Game1.snowBG[1] = 0x60;
                    Game1.snowBG[2] = 0x61;
                }
                else if (style == 0x16)
                {
                    Game1.snowMntBG[0] = 0x62;
                    Game1.snowMntBG[1] = 0x63;
                    Game1.snowBG[0] = 0x25;
                    Game1.snowBG[1] = 0x26;
                    Game1.snowBG[2] = 0x27;
                }
                else if (style == 3)
                {
                    Game1.snowMntBG[0] = 0x62;
                    Game1.snowMntBG[1] = 100;
                    Game1.snowBG[0] = -1;
                    Game1.snowBG[1] = -1;
                    Game1.snowBG[2] = -1;
                }
                else if (style == 0x1f)
                {
                    Game1.snowMntBG[0] = 0x62;
                    Game1.snowMntBG[1] = 100;
                    Game1.snowBG[0] = 0x5f;
                    Game1.snowBG[1] = 0x60;
                    Game1.snowBG[2] = 0x61;
                }
                else if (style == 0x20)
                {
                    Game1.snowMntBG[0] = 0x62;
                    Game1.snowMntBG[1] = 100;
                    Game1.snowBG[0] = 0x25;
                    Game1.snowBG[1] = 0x26;
                    Game1.snowBG[2] = 0x27;
                }
                else if (style == 4)
                {
                    Game1.snowMntBG[0] = 0x62;
                    Game1.snowMntBG[1] = 0x65;
                    Game1.snowBG[0] = -1;
                    Game1.snowBG[1] = -1;
                    Game1.snowBG[2] = -1;
                }
                else if (style == 0x29)
                {
                    Game1.snowMntBG[0] = 0x62;
                    Game1.snowMntBG[1] = 0x65;
                    Game1.snowBG[0] = 0x5f;
                    Game1.snowBG[1] = 0x60;
                    Game1.snowBG[2] = 0x61;
                }
                else if (style == 0x2a)
                {
                    Game1.snowMntBG[0] = 0x62;
                    Game1.snowMntBG[1] = 0x65;
                    Game1.snowBG[0] = 0x25;
                    Game1.snowBG[1] = 0x26;
                    Game1.snowBG[2] = 0x27;
                }
                else
                {
                    Game1.snowBG[0] = 0x25;
                    Game1.snowBG[1] = 0x26;
                    Game1.snowBG[2] = 0x27;
                }
            }
            else if (bg == 4)
            {
                hallowBG = style;
                if (style == 1)
                {
                    Game1.hallowBG[0] = 0x66;
                    Game1.hallowBG[1] = 0x67;
                    Game1.hallowBG[2] = 0x68;
                }
                else
                {
                    Game1.hallowBG[0] = 0x1d;
                    Game1.hallowBG[1] = 30;
                    Game1.hallowBG[2] = 0x1f;
                }
            }
            else if (bg == 5)
            {
                crimsonBG = style;
                if (style == 1)
                {
                    Game1.crimsonBG[0] = 0x69;
                    Game1.crimsonBG[1] = 0x6a;
                    Game1.crimsonBG[2] = 0x6b;
                }
                if (style == 2)
                {
                    Game1.crimsonBG[0] = 0xae;
                    Game1.crimsonBG[1] = -1;
                    Game1.crimsonBG[2] = 0xaf;
                }
                else
                {
                    Game1.crimsonBG[0] = 0x2b;
                    Game1.crimsonBG[1] = 0x2c;
                    Game1.crimsonBG[2] = 0x2d;
                }
            }
            else if (bg == 6)
            {
                desertBG = style;
                if (style == 1)
                {
                    Game1.desertBG[0] = 0x6c;
                    Game1.desertBG[1] = 0x6d;
                }
                else
                {
                    Game1.desertBG[0] = 0x15;
                    Game1.desertBG[1] = 20;
                }
            }
            else if (bg == 7)
            {
                oceanBG = style;
                if (style == 1)
                {
                    Game1.oceanBG = 110;
                }
                else if (style == 2)
                {
                    Game1.oceanBG = 0x6f;
                }
                else
                {
                    Game1.oceanBG = 0x1c;
                }
            }
        }

        public static void setMoss(int x, int y)
        {
            int index = 0;
            if (x < (Game1.maxTilesX * 0.334))
            {
                index = 0;
            }
            else if (x < (Game1.maxTilesX * 0.667))
            {
                index = 1;
            }
            else
            {
                index = 2;
            }
            mossWall = (byte)(0x36 + mossType[index]);
            mossTile = (byte)(0xb3 + mossType[index]);
        }

        public static void SetupStatueList()
        {
            if (statueList == null)
            {
                statueList = new Point16[0x2c];
                for (int i = 0; i < statueList.Length; i++)
                {
                    statueList[i] = new Point16(0x69, i);
                }
                statueList[0x22] = new Point16(0x15d, 0);
                statueList[0x2b] = new Point16(0x69, 50);
            }
        }

        public static void setWorldSize()
        {
            Game1.bottomWorld = Game1.maxTilesY * 0x10;
            Game1.rightWorld = Game1.maxTilesX * 0x10;
            Game1.maxSectionsX = Game1.maxTilesX / 200;
            Game1.maxSectionsY = Game1.maxTilesY / 150;
        }

        public static void setXmasTree(int x, int y, int obj, int style)
        {
            int num = x;
            int num2 = y;
            if (Game1.tile[x, y].frameX < 10)
            {
                num -= Game1.tile[x, y].frameX;
                num2 -= Game1.tile[x, y].frameY;
            }
            if (obj == 0)
            {
                if ((style & 1) == 1)
                {
                    Tile tile1 = Game1.tile[num, num2];
                    tile1.frameY = (short)(tile1.frameY | 1);
                }
                else
                {
                    Game1.tile[num, num2].frameY = (short)(Game1.tile[num, num2].frameY & -2);
                }
                if ((style & 2) == 2)
                {
                    Tile tile2 = Game1.tile[num, num2];
                    tile2.frameY = (short)(tile2.frameY | 2);
                }
                else
                {
                    Game1.tile[num, num2].frameY = (short)(Game1.tile[num, num2].frameY & -3);
                }
                if ((style & 4) == 4)
                {
                    Tile tile3 = Game1.tile[num, num2];
                    tile3.frameY = (short)(tile3.frameY | 4);
                }
                else
                {
                    Game1.tile[num, num2].frameY = (short)(Game1.tile[num, num2].frameY & -5);
                }
            }
            if (obj == 1)
            {
                if ((style & 1) == 1)
                {
                    Tile tile4 = Game1.tile[num, num2];
                    tile4.frameY = (short)(tile4.frameY | 8);
                }
                else
                {
                    Game1.tile[num, num2].frameY = (short)(Game1.tile[num, num2].frameY & -9);
                }
                if ((style & 2) == 2)
                {
                    Tile tile5 = Game1.tile[num, num2];
                    tile5.frameY = (short)(tile5.frameY | 0x10);
                }
                else
                {
                    Game1.tile[num, num2].frameY = (short)(Game1.tile[num, num2].frameY & -17);
                }
                if ((style & 4) == 4)
                {
                    Tile tile6 = Game1.tile[num, num2];
                    tile6.frameY = (short)(tile6.frameY | 0x20);
                }
                else
                {
                    Game1.tile[num, num2].frameY = (short)(Game1.tile[num, num2].frameY & -33);
                }
            }
            if (obj == 2)
            {
                if ((style & 1) == 1)
                {
                    Tile tile7 = Game1.tile[num, num2];
                    tile7.frameY = (short)(tile7.frameY | 0x40);
                }
                else
                {
                    Game1.tile[num, num2].frameY = (short)(Game1.tile[num, num2].frameY & -65);
                }
                if ((style & 2) == 2)
                {
                    Tile tile8 = Game1.tile[num, num2];
                    tile8.frameY = (short)(tile8.frameY | 0x80);
                }
                else
                {
                    Game1.tile[num, num2].frameY = (short)(Game1.tile[num, num2].frameY & -129);
                }
                if ((style & 4) == 4)
                {
                    Tile tile9 = Game1.tile[num, num2];
                    tile9.frameY = (short)(tile9.frameY | 0x100);
                }
                else
                {
                    Game1.tile[num, num2].frameY = (short)(Game1.tile[num, num2].frameY & -257);
                }
                if ((style & 8) == 8)
                {
                    Tile tile10 = Game1.tile[num, num2];
                    tile10.frameY = (short)(tile10.frameY | 0x200);
                }
                else
                {
                    Game1.tile[num, num2].frameY = (short)(Game1.tile[num, num2].frameY & -513);
                }
            }
            if (obj == 3)
            {
                if ((style & 1) == 1)
                {
                    Tile tile11 = Game1.tile[num, num2];
                    tile11.frameY = (short)(tile11.frameY | 0x400);
                }
                else
                {
                    Game1.tile[num, num2].frameY = (short)(Game1.tile[num, num2].frameY & -1025);
                }
                if ((style & 2) == 2)
                {
                    Tile tile12 = Game1.tile[num, num2];
                    tile12.frameY = (short)(tile12.frameY | 0x800);
                }
                else
                {
                    Game1.tile[num, num2].frameY = (short)(Game1.tile[num, num2].frameY & -2049);
                }
                if ((style & 4) == 4)
                {
                    Tile tile13 = Game1.tile[num, num2];
                    tile13.frameY = (short)(tile13.frameY | 0x1000);
                }
                else
                {
                    Game1.tile[num, num2].frameY = (short)(Game1.tile[num, num2].frameY & -4097);
                }
                if ((style & 8) == 8)
                {
                    Tile tile14 = Game1.tile[num, num2];
                    tile14.frameY = (short)(tile14.frameY | 0x2000);
                }
                else
                {
                    Game1.tile[num, num2].frameY = (short)(Game1.tile[num, num2].frameY & -8193);
                }
            }
        }

        public static bool ShiftTallGate(int x, int y, bool closing)
        {
            ushort num = closing ? ((ushort)0x184) : ((ushort)0x185);
            ushort num2 = closing ? ((ushort)0x185) : ((ushort)0x184);
            Tile tileSafely = Framing.GetTileSafely(x, y);
            if (tileSafely.type != num2)
            {
                return false;
            }
            Point point = new Point(tileSafely.frameX / 0x12, 0);
            TileObjectData data = TileObjectData.GetTileData(0x184, point.X, 0);
            point.Y = tileSafely.frameY / data.CoordinateFullHeight;
            int width = data.Width;
            int height = data.Height;
            int index = 0;
            int num5 = tileSafely.frameY % data.CoordinateFullHeight;
            while ((index < height) && ((num5 - data.CoordinateHeights[index]) >= 0))
            {
                num5 -= data.CoordinateHeights[index];
                index++;
            }
            int coordinateFullHeight = data.CoordinateFullHeight;
            y -= index;
            if ((Game1.netMode != 1) && Wiring.running)
            {
                for (int m = 0; m < height; m++)
                {
                    Wiring.SkipWire(x, y + m);
                }
            }
            for (int i = 0; i < height; i++)
            {
                if (!Collision.EmptyTile(x, y + i, true))
                {
                    return false;
                }
            }
            Game1.PlaySound(8, (x * 0x10) + 0x10, (y * 0x10) + 0x10, 1);
            for (int j = 0; j < height; j++)
            {
                Framing.GetTileSafely(x, y + j).type = num;
            }
            for (int k = -1; k < 2; k++)
            {
                for (int n = -1; n < (height + 1); n++)
                {
                    TileFrame(x + k, y + n, false, false);
                }
            }
            return true;
        }

        public static bool ShiftTrapdoor(int x, int y, bool playerAbove, int onlyCloseOrOpen = -1)
        {
            Tile tileSafely = Framing.GetTileSafely(x, y);
            if ((tileSafely.type == 0x182) && (onlyCloseOrOpen != 1))
            {
                Point point = GetTopLeftAndStyles(ref x, ref y, 2, 2, 0x12, 0x12);
                if (point.X == 0)
                {
                    if ((Game1.netMode != 1) && Wiring.running)
                    {
                        Wiring.SkipWire(x, y);
                        Wiring.SkipWire(x, y + 1);
                        Wiring.SkipWire(x + 1, y);
                        Wiring.SkipWire(x + 1, y + 1);
                    }
                    if (!Collision.EmptyTile(x, y + 1, true) || !Collision.EmptyTile(x + 1, y + 1, true))
                    {
                        return false;
                    }
                    Game1.PlaySound(8, (x * 0x10) + 0x10, (y * 0x10) + 0x10, 1);
                    for (int i = 0; i < 2; i++)
                    {
                        Framing.GetTileSafely(x + i, y).ClearTile();
                    }
                    for (int j = 0; j < 2; j++)
                    {
                        tileSafely = Framing.GetTileSafely(x + j, y + 1);
                        tileSafely.type = 0x183;
                        tileSafely.frameX = (short)(j * 0x12);
                        tileSafely.frameY = (short)(point.Y * 0x12);
                    }
                    for (int k = -1; k < 3; k++)
                    {
                        for (int m = 0; m < 3; m++)
                        {
                            TileFrame(x + k, y + m, false, false);
                        }
                    }
                    return true;
                }
                if (point.X == 1)
                {
                    if ((Game1.netMode != 1) && Wiring.running)
                    {
                        Wiring.SkipWire(x, y - 1);
                        Wiring.SkipWire(x, y);
                        Wiring.SkipWire(x + 1, y - 1);
                        Wiring.SkipWire(x + 1, y);
                    }
                    if (!Collision.EmptyTile(x, y, true) || !Collision.EmptyTile(x + 1, y, true))
                    {
                        return false;
                    }
                    Game1.PlaySound(8, (x * 0x10) + 0x10, y * 0x10, 1);
                    for (int n = 0; n < 2; n++)
                    {
                        Framing.GetTileSafely(x + n, y + 1).ClearTile();
                    }
                    for (int num6 = 0; num6 < 2; num6++)
                    {
                        tileSafely = Framing.GetTileSafely(x + num6, y);
                        tileSafely.type = 0x183;
                        tileSafely.frameX = (short)(num6 * 0x12);
                        tileSafely.frameY = (short)(point.Y * 0x12);
                    }
                    for (int num7 = -1; num7 < 3; num7++)
                    {
                        for (int num8 = -1; num8 < 2; num8++)
                        {
                            TileFrame(x + num7, y + num8, false, false);
                        }
                    }
                    return true;
                }
            }
            if ((tileSafely.type == 0x183) && (onlyCloseOrOpen != 0))
            {
                GetTopLeftAndStyles(ref x, ref y, 2, 1, 0x12, 0x12);
                int num9 = playerAbove.ToDirectionInt();
                for (int num10 = 0; num10 < 2; num10++)
                {
                    tileSafely = Framing.GetTileSafely(x + num10, y + num9);
                    if (tileSafely.active() && !Game1.tileCut[tileSafely.type])
                    {
                        return false;
                    }
                }
                if ((Game1.netMode != 1) && Wiring.running)
                {
                    Wiring.SkipWire(x, y);
                    Wiring.SkipWire(x, y + num9);
                    Wiring.SkipWire(x + 1, y);
                    Wiring.SkipWire(x + 1, y + num9);
                }
                Game1.PlaySound(8, (x * 0x10) + 0x10, y * 0x10, 1);
                for (int num11 = 0; num11 < 2; num11++)
                {
                    tileSafely = Framing.GetTileSafely(x + num11, y + num9);
                    if (tileSafely.active() && Game1.tileCut[tileSafely.type])
                    {
                        KillTile(x + num11, y + num9, false, false, false);
                    }
                }
                for (int num12 = 0; num12 < 2; num12++)
                {
                    byte color = Framing.GetTileSafely(x + num12, y).color();
                    for (int num14 = 0; num14 < 2; num14++)
                    {
                        tileSafely = Framing.GetTileSafely(x + num12, (y + num14));
                        tileSafely.type = 0x182;
                        tileSafely.frameX = (short)((num12 * 0x12) + (playerAbove.ToInt() * 0x24));
                        tileSafely.frameY = (short)(num14 * 0x12);
                        tileSafely.color(color);
                        tileSafely.active(true);
                    }
                }
                for (int num15 = -1; num15 < 3; num15++)
                {
                    for (int num16 = -1; num16 < 3; num16++)
                    {
                        TileFrame(x + num15, (y + num16));
                    }
                }
                return true;
            }
            Game1.PlaySound(9, x * 0x10, y * 0x10, 1);
            return false;
        }

        public static void ShroomPatch(int i, int j)
        {
            Vector2 vector;
            Vector2 vector2;
            double num5 = genRand.Next(40, 70);
            double num6 = num5;
            float num7 = genRand.Next(20, 30);
            if (genRand.Next(5) == 0)
            {
                num5 *= 1.5;
                num6 *= 1.5;
                num7 *= 1.2f;
            }
            vector.X = i;
            vector.Y = j - (num7 * 0.3f);
            vector2.X = genRand.Next(-10, 11) * 0.1f;
            vector2.Y = genRand.Next(-20, -10) * 0.1f;
            while ((num5 > 0.0) && (num7 > 0f))
            {
                num5 -= genRand.Next(3);
                num7--;
                int num = (int)(vector.X - (num5 * 0.5));
                int maxTilesX = (int)(vector.X + (num5 * 0.5));
                int num2 = (int)(vector.Y - (num5 * 0.5));
                int maxTilesY = (int)(vector.Y + (num5 * 0.5));
                if (num < 0)
                {
                    num = 0;
                }
                if (maxTilesX > Game1.maxTilesX)
                {
                    maxTilesX = Game1.maxTilesX;
                }
                if (num2 < 0)
                {
                    num2 = 0;
                }
                if (maxTilesY > Game1.maxTilesY)
                {
                    maxTilesY = Game1.maxTilesY;
                }
                num6 = (num5 * genRand.Next(80, 120)) * 0.01;
                for (int k = num; k < maxTilesX; k++)
                {
                    for (int n = num2; n < maxTilesY; n++)
                    {
                        float num10 = Math.Abs((float)(k - vector.X));
                        float num11 = Math.Abs((float)((n - vector.Y) * 2.3f));
                        if (Math.Sqrt((double)((num10 * num10) + (num11 * num11))) < (num6 * 0.4))
                        {
                            if (n < (vector.Y + (num6 * 0.02)))
                            {
                                if (Game1.tile[k, n].type != 0x3b)
                                {
                                    Game1.tile[k, n].active(false);
                                }
                            }
                            else
                            {
                                Game1.tile[k, n].type = 0x3b;
                            }
                            Game1.tile[k, n].liquid = 0;
                            Game1.tile[k, n].lava(false);
                        }
                    }
                }
                vector += vector2;
                vector.X += vector2.X;
                vector2.X += genRand.Next(-10, 11) * 0.05f;
                vector2.Y -= genRand.Next(11) * 0.05f;
                if ((vector2.X > -0.5) && (vector2.X < 0.5))
                {
                    if (vector2.X < 0f)
                    {
                        vector2.X = -0.5f;
                    }
                    else
                    {
                        vector2.X = 0.5f;
                    }
                }
                if (vector2.X > 2f)
                {
                    vector2.X = 1f;
                }
                if (vector2.X < -2f)
                {
                    vector2.X = -1f;
                }
                if (vector2.Y > 1f)
                {
                    vector2.Y = 1f;
                }
                if (vector2.Y < -1f)
                {
                    vector2.Y = -1f;
                }
                for (int m = 0; m < 2; m++)
                {
                    int num14 = ((int)vector.X) + genRand.Next(-20, 20);
                    int num15 = ((int)vector.Y) + genRand.Next(0, 20);
                    while (!Game1.tile[num14, num15].active() && (Game1.tile[num14, num15].type != 0x3b))
                    {
                        num14 = ((int)vector.X) + genRand.Next(-20, 20);
                        num15 = ((int)vector.Y) + genRand.Next(0, 20);
                    }
                    int num16 = genRand.Next(7, 10);
                    int steps = genRand.Next(7, 10);
                    TileRunner(num14, num15, (double)num16, steps, 0x3b, false, 0f, 2f, true, true);
                    if (genRand.Next(3) == 0)
                    {
                        TileRunner(num14, num15, (double)(num16 - 3), steps - 3, -1, false, 0f, 2f, true, true);
                    }
                }
            }
        }

        public static bool SlopeTile(int i, int j, int slope = 0)
        {
            if (!CheckPound(i, j))
            {
                return false;
            }
            Game1.tile[i, j].halfBrick(false);
            Game1.tile[i, j].slope((byte)slope);
            if (!gen)
            {
                KillTile(i, j, true, true, false);
                Game1.PlaySound(0, i * 0x10, j * 0x10, 1);
                SquareTileFrame(i, j, true);
                if (Game1.tile[i, j].slope() == 0)
                {
                    Rectangle rectangle = new Rectangle(i * 0x10, j * 0x10, 0x10, 0x10);
                    for (int k = 0; k < 0xff; k++)
                    {
                        if ((Game1.player[k].active && !Game1.player[k].dead) && rectangle.Intersects(new Rectangle((int)Game1.player[k].position.X, (int)Game1.player[k].position.Y, Game1.player[k].width, Game1.player[k].height)))
                        {
                            Player player1 = Game1.player[k];
                            player1.gfxOffY += (Game1.player[k].position.Y + Game1.player[k].height) - rectangle.Y;
                            Game1.player[k].position.Y = rectangle.Y - Game1.player[k].height;
                        }
                    }
                }
            }
            return true;
        }

        public static void SmashAltar(int i, int j)
        {
            if ((((Game1.netMode != 1) && Game1.hardMode) && !noTileActions) && !gen)
            {
                int num = altarCount % 3;
                int num2 = (altarCount / 3) + 1;
                float num3 = Game1.maxTilesX / 0x1068;
                int num4 = 1 - num;
                num3 = (num3 * 310f) - (0x55 * num);
                num3 *= 0.85f;
                num3 /= (float)num2;
                switch (num)
                {
                    case 0:
                        {
                            if (oreTier1 == -1)
                            {
                                oreTier1 = 0x6b;
                                if (genRand.Next(2) == 0)
                                {
                                    oreTier1 = 0xdd;
                                }
                            }
                            int index = 12;
                            if (oreTier1 == 0xdd)
                            {
                                index += 9;
                                num3 *= 0.9f;
                            }
                            if (Game1.netMode == 0)
                            {
                                Game1.NewText(Lang.misc[index], 50, 0xff, 130, false);
                            }
                            else if (Game1.netMode == 2)
                            {
                                NetMessage.SendData(0x19, -1, -1, Lang.misc[index], 0xff, 50f, 255f, 130f, 0, 0, 0);
                            }
                            num = oreTier1;
                            num3 *= 1.05f;
                            break;
                        }
                    case 1:
                        {
                            if (oreTier2 == -1)
                            {
                                oreTier2 = 0x6c;
                                if (genRand.Next(2) == 0)
                                {
                                    oreTier2 = 0xde;
                                }
                            }
                            int num6 = 13;
                            if (oreTier2 == 0xde)
                            {
                                num6 += 9;
                                num3 *= 0.9f;
                            }
                            if (Game1.netMode == 0)
                            {
                                Game1.NewText(Lang.misc[num6], 50, 0xff, 130, false);
                            }
                            else if (Game1.netMode == 2)
                            {
                                NetMessage.SendData(0x19, -1, -1, Lang.misc[num6], 0xff, 50f, 255f, 130f, 0, 0, 0);
                            }
                            num = oreTier2;
                            break;
                        }
                    default:
                        {
                            if (oreTier3 == -1)
                            {
                                oreTier3 = 0x6f;
                                if (genRand.Next(2) == 0)
                                {
                                    oreTier3 = 0xdf;
                                }
                            }
                            int num7 = 14;
                            if (oreTier3 == 0xdf)
                            {
                                num7 += 9;
                                num3 *= 0.9f;
                            }
                            if (Game1.netMode == 0)
                            {
                                Game1.NewText(Lang.misc[num7], 50, 0xff, 130, false);
                            }
                            else if (Game1.netMode == 2)
                            {
                                NetMessage.SendData(0x19, -1, -1, Lang.misc[num7], 0xff, 50f, 255f, 130f, 0, 0, 0);
                            }
                            num = oreTier3;
                            break;
                        }
                }
                for (int k = 0; k < num3; k++)
                {
                    int num9 = genRand.Next(100, Game1.maxTilesX - 100);
                    double worldSurface = Game1.worldSurface;
                    switch (num)
                    {
                        case 0x6c:
                        case 0xde:
                            worldSurface = Game1.rockLayer;
                            break;
                    }
                    if ((num == 0x6f) || (num == 0xdf))
                    {
                        worldSurface = ((Game1.rockLayer + Game1.rockLayer) + Game1.maxTilesY) / 3.0;
                    }
                    int num11 = genRand.Next((int)worldSurface, Game1.maxTilesY - 150);
                    OreRunner(num9, num11, (double)genRand.Next(5, 9 + num4), genRand.Next(5, 9 + num4), (ushort)num);
                }
                int num12 = genRand.Next(3);
                int num13 = 0;
                while ((num12 != 2) && (num13++ < 0x3e8))
                {
                    int tileX = genRand.Next(100, Game1.maxTilesX - 100);
                    int tileY = genRand.Next(((int)Game1.rockLayer) + 50, Game1.maxTilesY - 300);
                    if (Game1.tile[tileX, tileY].active() && (Game1.tile[tileX, tileY].type == 1))
                    {
                        if (num12 == 0)
                        {
                            if (crimson)
                            {
                                Game1.tile[tileX, tileY].type = 0xcb;
                            }
                            else
                            {
                                Game1.tile[tileX, tileY].type = 0x19;
                            }
                        }
                        else
                        {
                            Game1.tile[tileX, tileY].type = 0x75;
                        }
                        if (Game1.netMode == 2)
                        {
                            NetMessage.SendTileSquare(-1, tileX, tileY, 1);
                        }
                        break;
                    }
                }
                if (Game1.netMode != 1)
                {
                    int num16 = Game1.rand.Next(2) + 1;
                    for (int m = 0; m < num16; m++)
                    {
                        NPC.SpawnOnPlayer(Player.FindClosest(new Vector2((float)(i * 0x10), (float)(j * 0x10)), 0x10, 0x10), 0x52);
                    }
                }
                altarCount++;
                AchievementsHelper.NotifyProgressionEvent(6);
            }
        }

        public static void smCallBack(object threadContext)
        {
            IsGeneratingHardMode = true;
            if (genRand == null)
            {
                genRand = new Random((int)DateTime.Now.Ticks);
            }
            float num = genRand.Next(300, 400) * 0.001f;
            float num2 = genRand.Next(200, 300) * 0.001f;
            int i = (int)(Game1.maxTilesX * num);
            int num4 = (int)(Game1.maxTilesX * (1f - num));
            int num5 = 1;
            if (genRand.Next(2) == 0)
            {
                num4 = (int)(Game1.maxTilesX * num);
                i = (int)(Game1.maxTilesX * (1f - num));
                num5 = -1;
            }
            int num6 = 1;
            if (dungeonX < (Game1.maxTilesX / 2))
            {
                num6 = -1;
            }
            if (num6 < 0)
            {
                if (num4 < i)
                {
                    num4 = (int)(Game1.maxTilesX * num2);
                }
                else
                {
                    i = (int)(Game1.maxTilesX * num2);
                }
            }
            else if (num4 > i)
            {
                num4 = (int)(Game1.maxTilesX * (1f - num2));
            }
            else
            {
                i = (int)(Game1.maxTilesX * (1f - num2));
            }
            GERunner(i, 0, (float)(3 * num5), 5f, true);
            GERunner(num4, 0, (float)(3 * -num5), 5f, false);
            float num7 = ((float)Game1.maxTilesX) / 4200f;
            int num8 = (int)(25f * num7);
            ShapeData data = new ShapeData();
            while (num8 > 0)
            {
                Point point = RandomWorldPoint(((int)Game1.worldSurface) - 100, 1, 190, 1);
                Tile tile = Game1.tile[point.X, point.Y];
                Tile tile2 = Game1.tile[point.X, point.Y - 1];
                byte type = 0;
                if (TileID.Sets.Crimson[tile.type])
                {
                    type = (byte)(0xc0 + genRand.Next(4));
                }
                else if (TileID.Sets.Corrupt[tile.type])
                {
                    type = (byte)(0xbc + genRand.Next(4));
                }
                else if (TileID.Sets.Hallow[tile.type])
                {
                    type = (byte)(200 + genRand.Next(4));
                }
                if ((tile.active() && (type != 0)) && !tile2.active())
                {
                    GenAction[] actions = new GenAction[3];
                    actions[0] = new Modifiers.IsNotSolid();
                    byte[] types = new byte[30];
                    types[1] = 0x36;
                    types[2] = 0x37;
                    types[3] = 0x38;
                    types[4] = 0x39;
                    types[5] = 0x3a;
                    types[6] = 0x3b;
                    types[7] = 0x3d;
                    types[8] = 0xb9;
                    types[9] = 0xd4;
                    types[10] = 0xd5;
                    types[11] = 0xd6;
                    types[12] = 0xd7;
                    types[13] = 0xc4;
                    types[14] = 0xc5;
                    types[15] = 0xc6;
                    types[0x10] = 0xc7;
                    types[0x11] = 15;
                    types[0x12] = 40;
                    types[0x13] = 0x47;
                    types[20] = 0x40;
                    types[0x15] = 0xcc;
                    types[0x16] = 0xcd;
                    types[0x17] = 0xce;
                    types[0x18] = 0xcf;
                    types[0x19] = 0xd0;
                    types[0x1a] = 0xd1;
                    types[0x1b] = 210;
                    types[0x1c] = 0xd3;
                    types[0x1d] = 0x47;
                    actions[1] = new Modifiers.OnlyWalls(types);
                    actions[2] = new Actions.Blank().Output(data);
                    bool flag = WorldUtils.Gen(new Point(point.X, point.Y - 1), new ShapeFloodFill(0x3e8), Actions.Chain(actions));
                    if ((data.Count > 50) && flag)
                    {
                        //RnD
                        //WorldUtils.Gen(new Point(point.X, point.Y), new ModShapes.OuterOutline(data, true, true), 
                        //    new GameManager.World.Generation.Actions.PlaceWall(type, true));
                        num8--;
                    }
                    data.Clear();
                }
            }
            if (Game1.netMode == 0)
            {
                Game1.NewText(Lang.misc[15], 50, 0xff, 130, false);
            }
            else if (Game1.netMode == 2)
            {
                NetMessage.SendData(0x19, -1, -1, Lang.misc[15], 0xff, 50f, 255f, 130f, 0, 0, 0);
            }
            AchievementsHelper.NotifyProgressionEvent(9);
            if (Game1.netMode == 2)
            {
                Netplay.ResetSections();
            }
            IsGeneratingHardMode = false;
        }

        public static bool SolidOrSlopedTile(Tile tile)
        {
            return ((((tile != null) && tile.active()) && (Game1.tileSolid[tile.type] && !Game1.tileSolidTop[tile.type])) && !tile.inActive());
        }

        public static bool SolidOrSlopedTile(int x, int y)
        {
            return SolidOrSlopedTile(Game1.tile[x, y]);
        }

        public static bool SolidTile(Tile testTile)
        {
            try
            {
                if (testTile == null)
                {
                    return true;
                }
                if (((testTile.active() && Game1.tileSolid[testTile.type]) && (!Game1.tileSolidTop[testTile.type] && !testTile.halfBrick())) && ((testTile.slope() == 0) && !testTile.inActive()))
                {
                    return true;
                }
            }
            catch
            {
            }
            return false;
        }

        public static bool SolidTile(int i, int j)
        {
            try
            {
                if (Game1.tile[i, j] == null)
                {
                    return true;
                }
                if (((Game1.tile[i, j].active() && Game1.tileSolid[Game1.tile[i, j].type]) && (!Game1.tileSolidTop[Game1.tile[i, j].type] && !Game1.tile[i, j].halfBrick())) && ((Game1.tile[i, j].slope() == 0) && !Game1.tile[i, j].inActive()))
                {
                    return true;
                }
            }
            catch
            {
            }
            return false;
        }

        public static bool SolidTile2(Tile testTile)
        {
            try
            {
                if (testTile == null)
                {
                    return true;
                }
                if (((testTile.active() && Game1.tileSolid[testTile.type]) && ((testTile.slope() == 0) && !testTile.halfBrick())) && !testTile.inActive())
                {
                    return true;
                }
            }
            catch
            {
            }
            return false;
        }

        public static bool SolidTile2(int i, int j)
        {
            try
            {
                if (Game1.tile[i, j] == null)
                {
                    return true;
                }
                if (((Game1.tile[i, j].active() && Game1.tileSolid[Game1.tile[i, j].type]) && ((Game1.tile[i, j].slope() == 0) && !Game1.tile[i, j].halfBrick())) && !Game1.tile[i, j].inActive())
                {
                    return true;
                }
            }
            catch
            {
            }
            return false;
        }

        public static bool SolidTileAllowBottomSlope(int i, int j)
        {
            try
            {
                if (Game1.tile[i, j] == null)
                {
                    return true;
                }
                if ((Game1.tile[i, j].active() && (Game1.tileSolid[Game1.tile[i, j].type] || Game1.tileSolidTop[Game1.tile[i, j].type])) && ((!Game1.tile[i, j].topSlope() && !Game1.tile[i, j].halfBrick()) && !Game1.tile[i, j].inActive()))
                {
                    return true;
                }
            }
            catch
            {
            }
            return false;
        }

        public static bool SolidTileNoAttach(int i, int j)
        {
            try
            {
                if (Game1.tile[i, j] == null)
                {
                    return true;
                }
                if (((Game1.tile[i, j].active() && Game1.tileSolid[Game1.tile[i, j].type]) && (!Game1.tileNoAttach[Game1.tile[i, j].type] && (Game1.tile[i, j].slope() == 0))) && (!Game1.tile[i, j].halfBrick() && !Game1.tile[i, j].inActive()))
                {
                    return true;
                }
            }
            catch
            {
            }
            return false;
        }

        public static void SpawnNPC(int x, int y)
        {
            if (Game1.wallHouse[Game1.tile[x, y].wall])
            {
                canSpawn = true;
            }
            if ((canSpawn && StartRoomCheck(x, y)) && RoomNeeds(spawnNPC))
            {
                ScoreRoom(-1);
                if (hiScore > 0)
                {
                    int index = -1;
                    for (int i = 0; i < 200; i++)
                    {
                        if ((Game1.npc[i].active && Game1.npc[i].homeless) && ((Game1.npc[i].type == spawnNPC) && CheckConditions(Game1.npc[i].type)))
                        {
                            index = i;
                            break;
                        }
                    }
                    if (NextNPC())
                    {
                        if (index != -1)
                        {
                            Game1.nextNPC[spawnNPC] = false;
                            spawnNPC = 0;
                            Game1.npc[index].homeTileX = WorldGen.bestX;
                            Game1.npc[index].homeTileY = WorldGen.bestY;
                            Game1.npc[index].homeless = false;
                            AchievementsHelper.NotifyProgressionEvent(8);
                        }
                        else
                        {
                            int bestX = WorldGen.bestX;
                            int bestY = WorldGen.bestY;
                            bool flag = false;
                            if (!flag)
                            {
                                flag = true;
                                Rectangle rectangle = new Rectangle((((bestX * 0x10) + 8) - (NPC.sWidth / 2)) - NPC.safeRangeX, (((bestY * 0x10) + 8) - (NPC.sHeight / 2)) - NPC.safeRangeY, NPC.sWidth + (NPC.safeRangeX * 2), NPC.sHeight + (NPC.safeRangeY * 2));
                                for (int k = 0; k < 0xff; k++)
                                {
                                    if (Game1.player[k].active)
                                    {
                                        Rectangle rectangle2 = new Rectangle((int)Game1.player[k].position.X, (int)Game1.player[k].position.Y, Game1.player[k].width, Game1.player[k].height);
                                        if (rectangle2.Intersects(rectangle))
                                        {
                                            flag = false;
                                            break;
                                        }
                                    }
                                }
                            }
                            if (!flag && (bestY <= Game1.worldSurface))
                            {
                                for (int m = 1; m < 500; m++)
                                {
                                    for (int n = 0; n < 2; n++)
                                    {
                                        if (n == 0)
                                        {
                                            bestX = WorldGen.bestX + m;
                                        }
                                        else
                                        {
                                            bestX = WorldGen.bestX - m;
                                        }
                                        if ((bestX > 10) && (bestX < (Game1.maxTilesX - 10)))
                                        {
                                            int num8 = WorldGen.bestY - m;
                                            double worldSurface = WorldGen.bestY + m;
                                            if (num8 < 10)
                                            {
                                                num8 = 10;
                                            }
                                            if (worldSurface > Game1.worldSurface)
                                            {
                                                worldSurface = Game1.worldSurface;
                                            }
                                            for (int num10 = num8; num10 < worldSurface; num10++)
                                            {
                                                bestY = num10;
                                                if (Game1.tile[bestX, bestY].nactive() && Game1.tileSolid[Game1.tile[bestX, bestY].type])
                                                {
                                                    if (!Collision.SolidTiles(bestX - 1, bestX + 1, bestY - 3, bestY - 1))
                                                    {
                                                        flag = true;
                                                        Rectangle rectangle3 = new Rectangle((((bestX * 0x10) + 8) - (NPC.sWidth / 2)) - NPC.safeRangeX, (((bestY * 0x10) + 8) - (NPC.sHeight / 2)) - NPC.safeRangeY, NPC.sWidth + (NPC.safeRangeX * 2), NPC.sHeight + (NPC.safeRangeY * 2));
                                                        for (int num11 = 0; num11 < 0xff; num11++)
                                                        {
                                                            if (Game1.player[num11].active)
                                                            {
                                                                Rectangle rectangle4 = new Rectangle((int)Game1.player[num11].position.X, (int)Game1.player[num11].position.Y, Game1.player[num11].width, Game1.player[num11].height);
                                                                if (rectangle4.Intersects(rectangle3))
                                                                {
                                                                    flag = false;
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    break;
                                                }
                                            }
                                        }
                                        if (flag)
                                        {
                                            break;
                                        }
                                    }
                                    if (flag)
                                    {
                                        break;
                                    }
                                }
                            }
                            int num12 = NPC.NewNPC(bestX * 0x10, bestY * 0x10, spawnNPC, 1, 0f, 0f, 0f, 0f, 0xff);
                            Game1.nextNPC[spawnNPC] = false;
                            Game1.npc[num12].homeTileX = WorldGen.bestX;
                            Game1.npc[num12].homeTileY = WorldGen.bestY;
                            if (bestX < WorldGen.bestX)
                            {
                                Game1.npc[num12].direction = 1;
                            }
                            else if (bestX > WorldGen.bestX)
                            {
                                Game1.npc[num12].direction = -1;
                            }
                            Game1.npc[num12].netUpdate = true;
                            string name = Game1.npc[num12].name;
                            if (Game1.npc[num12].displayName != "")
                            {
                                if (Lang.lang <= 1)
                                {
                                    name = Game1.npc[num12].displayName + " " + Lang.the + Game1.npc[num12].name;
                                }
                                else
                                {
                                    name = Game1.npc[num12].displayName;
                                }
                            }
                            if (Game1.netMode == 0)
                            {
                                Game1.NewText(name + " " + Lang.misc[0x12], 50, 0x7d, 0xff, false);
                            }
                            else if (Game1.netMode == 2)
                            {
                                NetMessage.SendData(0x19, -1, -1, name + " " + Lang.misc[0x12], 0xff, 50f, 125f, 255f, 0, 0, 0);
                            }
                            AchievementsHelper.NotifyProgressionEvent(8);
                            if (Game1.npc[num12].type == 160)
                            {
                                AchievementsHelper.NotifyProgressionEvent(0x12);
                            }
                            bool[] flagArray = new bool[540];
                            for (int j = 0; j < 200; j++)
                            {
                                if ((Game1.npc[j].active && (Game1.npc[j].type >= 0)) && (Game1.npc[j].type < 540))
                                {
                                    flagArray[Game1.npc[j].type] = true;
                                }
                            }
                            if (((((flagArray[0x26] && flagArray[0x11]) && (flagArray[0x6b] && flagArray[0x13])) && ((flagArray[0x16] && flagArray[0x7c]) && (flagArray[0xe4] && flagArray[0xb2]))) && (((flagArray[0x12] && flagArray[0xe5]) && (flagArray[0xd1] && flagArray[0x36])) && ((flagArray[0x6c] && flagArray[160]) && (flagArray[20] && flagArray[0x171])))) && (((flagArray[0xcf] && flagArray[0xe3]) && (flagArray[0xd0] && flagArray[0x1b9])) && flagArray[0x161]))
                            {
                                AchievementsHelper.NotifyProgressionEvent(0x11);
                            }
                        }
                        spawnNPC = 0;
                    }
                }
            }
        }

        public static void SpawnTravelNPC()
        {
            if ((!Game1.eclipse && Game1.dayTime) && (((Game1.invasionType <= 0) || (Game1.invasionDelay != 0)) || (Game1.invasionSize <= 0)))
            {
                for (int i = 0; i < 200; i++)
                {
                    if (Game1.npc[i].active && (Game1.npc[i].type == 0x170))
                    {
                        return;
                    }
                }
                Chest.SetupTravelShop();
                NetMessage.SendTravelShop();
                int index = 0;
                int[] numArray = new int[200];
                int num3 = 0;
                for (int j = 0; j < 200; j++)
                {
                    if ((Game1.npc[j].active && Game1.npc[j].townNPC) && ((Game1.npc[j].type != 0x25) && !Game1.npc[j].homeless))
                    {
                        numArray[num3] = j;
                        num3++;
                    }
                }
                if (num3 != 0)
                {
                    index = numArray[Game1.rand.Next(num3)];
                    WorldGen.bestX = Game1.npc[index].homeTileX;
                    WorldGen.bestY = Game1.npc[index].homeTileY;
                    int bestX = WorldGen.bestX;
                    int num6 = WorldGen.bestX;
                    int bestY = WorldGen.bestY;
                    for (int k = WorldGen.bestX; k > (WorldGen.bestX - 10); k--)
                    {
                        if (((!SolidTile(k, bestY) && !Game1.tileSolidTop[Game1.tile[k, bestY].type]) || ((Game1.tile[k, bestY - 1].active() && Game1.tileSolid[Game1.tile[k, bestY - 1].type]) && !Game1.tileSolidTop[Game1.tile[k, bestY - 1].type])) || (((Game1.tile[k, bestY - 2].active() && Game1.tileSolid[Game1.tile[k, bestY - 2].type]) && !Game1.tileSolidTop[Game1.tile[k, bestY - 2].type]) || ((Game1.tile[k, bestY - 3].active() && Game1.tileSolid[Game1.tile[k, bestY - 3].type]) && !Game1.tileSolidTop[Game1.tile[k, bestY - 3].type])))
                        {
                            break;
                        }
                        bestX = k;
                    }
                    for (int m = WorldGen.bestX; m < (WorldGen.bestX + 10); m++)
                    {
                        if (((!SolidTile(m, bestY) && !Game1.tileSolidTop[Game1.tile[m, bestY].type]) || ((Game1.tile[m, bestY - 1].active() && Game1.tileSolid[Game1.tile[m, bestY - 1].type]) && !Game1.tileSolidTop[Game1.tile[m, bestY - 1].type])) || (((Game1.tile[m, bestY - 2].active() && Game1.tileSolid[Game1.tile[m, bestY - 2].type]) && !Game1.tileSolidTop[Game1.tile[m, bestY - 2].type]) || ((Game1.tile[m, bestY - 3].active() && Game1.tileSolid[Game1.tile[m, bestY - 3].type]) && !Game1.tileSolidTop[Game1.tile[m, bestY - 3].type])))
                        {
                            break;
                        }
                        num6 = m;
                    }
                    for (int n = 0; n < 30; n++)
                    {
                        int num11 = Game1.rand.Next(bestX, num6 + 1);
                        if (n < 20)
                        {
                            if ((num11 >= (WorldGen.bestX - 1)) && (num11 <= (WorldGen.bestX + 1)))
                            {
                                continue;
                            }
                            WorldGen.bestX = num11;
                            break;
                        }
                        if (num11 != WorldGen.bestX)
                        {
                            WorldGen.bestX = num11;
                            break;
                        }
                    }
                    int num12 = WorldGen.bestX;
                    int num13 = WorldGen.bestY;
                    bool flag = false;
                    if (!flag && (num13 <= Game1.worldSurface))
                    {
                        for (int num14 = 20; num14 < 500; num14++)
                        {
                            for (int num15 = 0; num15 < 2; num15++)
                            {
                                if (num15 == 0)
                                {
                                    num12 = WorldGen.bestX + (num14 * 2);
                                }
                                else
                                {
                                    num12 = WorldGen.bestX - (num14 * 2);
                                }
                                if ((num12 > 10) && (num12 < (Game1.maxTilesX - 10)))
                                {
                                    int num16 = WorldGen.bestY - num14;
                                    double worldSurface = WorldGen.bestY + num14;
                                    if (num16 < 10)
                                    {
                                        num16 = 10;
                                    }
                                    if (worldSurface > Game1.worldSurface)
                                    {
                                        worldSurface = Game1.worldSurface;
                                    }
                                    for (int num18 = num16; num18 < worldSurface; num18++)
                                    {
                                        num13 = num18;
                                        if (Game1.tile[num12, num13].nactive() && Game1.tileSolid[Game1.tile[num12, num13].type])
                                        {
                                            if (((Game1.tile[num12, num13 - 3].liquid == 0) && (Game1.tile[num12, num13 - 2].liquid == 0)) && ((Game1.tile[num12, num13 - 1].liquid == 0) && !Collision.SolidTiles(num12 - 1, num12 + 1, num13 - 3, num13 - 1)))
                                            {
                                                flag = true;
                                                Rectangle rectangle = new Rectangle((((num12 * 0x10) + 8) - (NPC.sWidth / 2)) - NPC.safeRangeX, (((num13 * 0x10) + 8) - (NPC.sHeight / 2)) - NPC.safeRangeY, NPC.sWidth + (NPC.safeRangeX * 2), NPC.sHeight + (NPC.safeRangeY * 2));
                                                for (int num19 = 0; num19 < 0xff; num19++)
                                                {
                                                    if (Game1.player[num19].active)
                                                    {
                                                        Rectangle rectangle2 = new Rectangle((int)Game1.player[num19].position.X, (int)Game1.player[num19].position.Y, Game1.player[num19].width, Game1.player[num19].height);
                                                        if (rectangle2.Intersects(rectangle))
                                                        {
                                                            flag = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                            break;
                                        }
                                    }
                                }
                                if (flag)
                                {
                                    break;
                                }
                            }
                            if (flag)
                            {
                                break;
                            }
                        }
                    }
                    int num20 = NPC.NewNPC(num12 * 0x10, num13 * 0x10, 0x170, 1, 0f, 0f, 0f, 0f, 0xff);
                    Game1.npc[num20].homeTileX = WorldGen.bestX;
                    Game1.npc[num20].homeTileY = WorldGen.bestY;
                    Game1.npc[num20].homeless = true;
                    if (num12 < WorldGen.bestX)
                    {
                        Game1.npc[num20].direction = 1;
                    }
                    else if (num12 > WorldGen.bestX)
                    {
                        Game1.npc[num20].direction = -1;
                    }
                    Game1.npc[num20].netUpdate = true;
                    string name = Game1.npc[num20].name;
                    if (Game1.npc[num20].displayName != "")
                    {
                        if (Lang.lang <= 1)
                        {
                            name = Game1.npc[num20].displayName + " " + Lang.the + Game1.npc[num20].name;
                        }
                        else
                        {
                            name = Game1.npc[num20].displayName;
                        }
                    }
                    if (Game1.netMode == 0)
                    {
                        Game1.NewText(name + " " + Lang.misc[0x12], 50, 0x7d, 0xff, false);
                    }
                    else if (Game1.netMode == 2)
                    {
                        NetMessage.SendData(0x19, -1, -1, name + " " + Lang.misc[0x12], 0xff, 50f, 125f, 255f, 0, 0, 0);
                    }
                }
            }
        }

        public static void SpreadDesertWalls(int wallDist, int i, int j)
        {
            if ((WallID.Sets.Conversion.Sandstone[Game1.tile[i, j].wall] || (Game1.tile[i, j].active() && TileID.Sets.Conversion.Sandstone[Game1.tile[i, j].type])) || WallID.Sets.Conversion.HardenedSand[Game1.tile[i, j].wall])
            {
                int num = 0;
                int wall = Game1.tile[i, j].wall;
                int type = Game1.tile[i, j].type;
                if (WallID.Sets.Corrupt[wall] || TileID.Sets.Corrupt[type])
                {
                    num = 1;
                }
                if (WallID.Sets.Hallow[wall] || TileID.Sets.Hallow[type])
                {
                    num = 2;
                }
                if (WallID.Sets.Crimson[wall] || TileID.Sets.Crimson[type])
                {
                    num = 3;
                }
                if (num != 0)
                {
                    int tileX = i + genRand.Next(-2, 3);
                    int tileY = j + genRand.Next(-2, 3);
                    bool flag = false;
                    if (WallID.Sets.Conversion.Sandstone[Game1.tile[tileX, tileY].wall] || WallID.Sets.Conversion.HardenedSand[Game1.tile[tileX, tileY].wall])
                    {
                        switch (num)
                        {
                            case 3:
                                for (int k = i - wallDist; k < (i + wallDist); k++)
                                {
                                    for (int m = j - wallDist; m < (j + wallDist); m++)
                                    {
                                        if (Game1.tile[k, m].active() && TileID.Sets.Crimson[Game1.tile[k, m].type])
                                        {
                                            flag = true;
                                            break;
                                        }
                                    }
                                    if (flag)
                                    {
                                        break;
                                    }
                                }
                                break;

                            case 2:
                                for (int n = i - wallDist; n < (i + wallDist); n++)
                                {
                                    for (int num9 = j - wallDist; num9 < (j + wallDist); num9++)
                                    {
                                        if (Game1.tile[n, num9].active() && TileID.Sets.Hallow[Game1.tile[n, num9].type])
                                        {
                                            flag = true;
                                            break;
                                        }
                                    }
                                    if (flag)
                                    {
                                        break;
                                    }
                                }
                                break;

                            case 1:
                                for (int num10 = i - wallDist; num10 < (i + wallDist); num10++)
                                {
                                    for (int num11 = j - wallDist; num11 < (j + wallDist); num11++)
                                    {
                                        if (Game1.tile[num10, num11].active() && TileID.Sets.Corrupt[Game1.tile[num10, num11].type])
                                        {
                                            flag = true;
                                            break;
                                        }
                                    }
                                    if (flag)
                                    {
                                        break;
                                    }
                                }
                                break;
                        }
                    }
                    if (flag)
                    {
                        byte? nullable = null;
                        if (WallID.Sets.Conversion.Sandstone[Game1.tile[tileX, tileY].wall])
                        {
                            switch (num)
                            {
                                case 1:
                                    nullable = 220;
                                    break;

                                case 2:
                                    nullable = 0xde;
                                    break;

                                case 3:
                                    nullable = 0xdd;
                                    break;
                            }
                        }
                        if (WallID.Sets.Conversion.HardenedSand[Game1.tile[tileX, tileY].wall])
                        {
                            switch (num)
                            {
                                case 1:
                                    nullable = 0xd9;
                                    break;

                                case 2:
                                    nullable = 0xdb;
                                    break;

                                case 3:
                                    nullable = 0xda;
                                    break;
                            }
                        }
                        if (nullable.HasValue && (Game1.tile[tileX, tileY].wall != nullable.Value))
                        {
                            Game1.tile[tileX, tileY].wall = nullable.Value;
                            if (Game1.netMode == 2)
                            {
                                NetMessage.SendTileSquare(-1, tileX, tileY, 3);
                            }
                        }
                    }
                }
            }
        }

        public static void SpreadGrass(int i, int j, int dirt = 0, int grass = 2, bool repeat = true, byte color = 0)
        {
            try
            {
                if (InWorld(i, j, 1) && (((Game1.tile[i, j].type == dirt) && Game1.tile[i, j].active()) && ((j < Game1.worldSurface) || (dirt != 0))))
                {
                    int num = i - 1;
                    int maxTilesX = i + 2;
                    int num3 = j - 1;
                    int maxTilesY = j + 2;
                    if (num < 0)
                    {
                        num = 0;
                    }
                    if (maxTilesX > Game1.maxTilesX)
                    {
                        maxTilesX = Game1.maxTilesX;
                    }
                    if (num3 < 0)
                    {
                        num3 = 0;
                    }
                    if (maxTilesY > Game1.maxTilesY)
                    {
                        maxTilesY = Game1.maxTilesY;
                    }
                    bool flag = true;
                    for (int k = num; k < maxTilesX; k++)
                    {
                        for (int m = num3; m < maxTilesY; m++)
                        {
                            if (!Game1.tile[k, m].active() || !Game1.tileSolid[Game1.tile[k, m].type])
                            {
                                flag = false;
                            }
                            if (Game1.tile[k, m].lava() && (Game1.tile[k, m].liquid > 0))
                            {
                                flag = true;
                                break;
                            }
                        }
                    }
                    if ((!flag && TileID.Sets.CanBeClearedDuringGeneration[Game1.tile[i, j].type]) && ((grass != 0x17) || (Game1.tile[i, j - 1].type != 0x1b)))
                    {
                        Game1.tile[i, j].type = (ushort)grass;
                        Game1.tile[i, j].color(color);
                        for (int n = num; n < maxTilesX; n++)
                        {
                            for (int num8 = num3; num8 < maxTilesY; num8++)
                            {
                                if (Game1.tile[n, num8].active() && (Game1.tile[n, num8].type == dirt))
                                {
                                    try
                                    {
                                        if (repeat && (grassSpread < 0x3e8))
                                        {
                                            grassSpread++;
                                            SpreadGrass(n, num8, dirt, grass, true, 0);
                                            grassSpread--;
                                        }
                                    }
                                    catch
                                    {
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch
            {
            }
        }

        public static void SquareTileFrame(int i, int j, bool resetFrame = true)
        {
            TileFrame(i - 1, j - 1, false, false);
            TileFrame(i - 1, j, false, false);
            TileFrame(i - 1, j + 1, false, false);
            TileFrame(i, j - 1, false, false);
            TileFrame(i, j, resetFrame, false);
            TileFrame(i, j + 1, false, false);
            TileFrame(i + 1, j - 1, false, false);
            TileFrame(i + 1, j, false, false);
            TileFrame(i + 1, j + 1, false, false);
        }

        public static void SquareWallFrame(int i, int j, bool resetFrame = true)
        {
            Framing.WallFrame(i - 1, j - 1, false);
            Framing.WallFrame(i - 1, j, false);
            Framing.WallFrame(i - 1, j + 1, false);
            Framing.WallFrame(i, j - 1, false);
            Framing.WallFrame(i, j, resetFrame);
            Framing.WallFrame(i, j + 1, false);
            Framing.WallFrame(i + 1, j - 1, false);
            Framing.WallFrame(i + 1, j, false);
            Framing.WallFrame(i + 1, j + 1, false);
        }

        public static void StartHardmode()
        {
            if ((Game1.netMode != 1) && !Game1.hardMode)
            {
                Game1.hardMode = true;
                Game1.InitLifeBytes();

                //RnD
                //ThreadPool.QueueUserWorkItem(new WaitCallback(WorldGen.smCallBack), 1);
                WorldGen.smCallBack(default);
            }
        }

        public static bool StartRoomCheck(int x, int y)
        {
            roomX1 = x;
            roomX2 = x;
            roomY1 = y;
            roomY2 = y;
            numRoomTiles = 0;
            for (int i = 0; i < 0x1a3; i++)
            {
                houseTile[i] = false;
            }
            canSpawn = true;
            if (Game1.tile[x, y].nactive() && Game1.tileSolid[Game1.tile[x, y].type])
            {
                canSpawn = false;
            }
            CheckRoom(x, y);
            if (numRoomTiles < 60)
            {
                canSpawn = false;
            }
            return canSpawn;
        }

        public static void SwitchCannon(int i, int j)
        {
            int num = Game1.tile[i, j].frameX / 0x12;
            while (num >= 4)
            {
                num -= 4;
            }
            int num2 = Game1.tile[i, j].frameY / 0x12;
            while (num2 >= 3)
            {
                num2 -= 3;
            }
            int num3 = 1;
            if (num < 2)
            {
                num3 = -1;
            }
            num = i - num;
            num2 = j - num2;
            if (((num3 != 1) || (Game1.tile[num, num2].frameY > 0x34)) && ((num3 != -1) || (Game1.tile[num, num2].frameY < 0x1b0)))
            {
                num3 *= -54;
                for (int k = num; k < (num + 4); k++)
                {
                    for (int m = num2; m < (num2 + 3); m++)
                    {
                        if (Game1.tile[k, m] == null)
                        {
                            Game1.tile[k, m] = new Tile();
                        }
                        if (Game1.tile[k, m].active() && (Game1.tile[k, m].type == 0xd1))
                        {
                            Game1.tile[k, m].frameY = (short)(Game1.tile[k, m].frameY + num3);
                        }
                    }
                }
                NetMessage.SendTileSquare(-1, num + 1, num2 + 1, 4);
            }
        }

        public static void SwitchFountain(int i, int j)
        {
            int x = i;
            int y = j;
            int num3 = Game1.tile[i, j].frameX / 0x12;
            while (num3 >= 2)
            {
                num3 -= 2;
            }
            int num4 = Game1.tile[i, j].frameY / 0x12;
            if (num4 >= 4)
            {
                num4 -= 4;
            }
            x = i - num3;
            y = j - num4;
            for (int k = x; k < (x + 2); k++)
            {
                for (int m = y; m < (y + 4); m++)
                {
                    if (Game1.tile[k, m] == null)
                    {
                        Game1.tile[k, m] = new Tile();
                    }
                    if (Game1.tile[k, m].active() && (Game1.tile[k, m].type == 0xcf))
                    {
                        if (Game1.tile[k, m].frameY < 0x48)
                        {
                            Tile tile1 = Game1.tile[k, m];
                            tile1.frameY = (short)(tile1.frameY + 0x48);
                        }
                        else
                        {
                            Tile tile2 = Game1.tile[k, m];
                            tile2.frameY = (short)(tile2.frameY - 0x48);
                        }
                    }
                }
            }
            if (Wiring.running)
            {
                Wiring.SkipWire(x, y);
                Wiring.SkipWire(x, y + 1);
                Wiring.SkipWire(x, y + 2);
                Wiring.SkipWire(x, y + 3);
                Wiring.SkipWire(x + 1, y);
                Wiring.SkipWire(x + 1, y + 1);
                Wiring.SkipWire(x + 1, y + 2);
                Wiring.SkipWire(x + 1, y + 3);
            }
            NetMessage.SendTileSquare(-1, x, y + 1, 4);
        }

        public static void SwitchMB(int i, int j)
        {
            int x = i;
            int y = j;
            int num3 = Game1.tile[i, j].frameY / 0x12;
            while (num3 >= 2)
            {
                num3 -= 2;
            }
            int num4 = Game1.tile[i, j].frameX / 0x12;
            if (num4 >= 2)
            {
                num4 -= 2;
            }
            x = i - num4;
            y = j - num3;
            for (int k = x; k < (x + 2); k++)
            {
                for (int m = y; m < (y + 2); m++)
                {
                    if (Game1.tile[k, m] == null)
                    {
                        Game1.tile[k, m] = new Tile();
                    }
                    if (Game1.tile[k, m].active() && ((Game1.tile[k, m].type == 0x8b) || (Game1.tile[k, m].type == 0x23)))
                    {
                        if (Game1.tile[k, m].frameX < 0x24)
                        {
                            Tile tile1 = Game1.tile[k, m];
                            tile1.frameX = (short)(tile1.frameX + 0x24);
                        }
                        else
                        {
                            Tile tile2 = Game1.tile[k, m];
                            tile2.frameX = (short)(tile2.frameX - 0x24);
                        }
                    }
                }
            }
            if (Wiring.running)
            {
                Wiring.SkipWire(x, y);
                Wiring.SkipWire(x + 1, y);
                Wiring.SkipWire(x, y + 1);
                Wiring.SkipWire(x + 1, y + 1);
            }
            NetMessage.SendTileSquare(-1, x, y, 3);
        }

        public static void SwitchMonolith(int i, int j)
        {
            int x = i;
            int y = j;
            int num3 = Game1.tile[i, j].frameX / 0x12;
            while (num3 >= 2)
            {
                num3 -= 2;
            }
            int num4 = Game1.tile[i, j].frameY / 0x12;
            if (num4 >= 3)
            {
                num4 -= 3;
            }
            x = i - num3;
            y = j - num4;
            for (int k = x; k < (x + 2); k++)
            {
                for (int m = y; m < (y + 3); m++)
                {
                    if (Game1.tile[k, m] == null)
                    {
                        Game1.tile[k, m] = new Tile();
                    }
                    if (Game1.tile[k, m].active() && (Game1.tile[k, m].type == 410))
                    {
                        if (Game1.tile[k, m].frameY < 0x38)
                        {
                            Tile tile1 = Game1.tile[k, m];
                            tile1.frameY = (short)(tile1.frameY + 0x38);
                        }
                        else
                        {
                            Tile tile2 = Game1.tile[k, m];
                            tile2.frameY = (short)(tile2.frameY - 0x38);
                        }
                    }
                }
            }
            if (Wiring.running)
            {
                Wiring.SkipWire(x, y);
                Wiring.SkipWire(x, y + 1);
                Wiring.SkipWire(x, y + 2);
                Wiring.SkipWire(x + 1, y);
                Wiring.SkipWire(x + 1, y + 1);
                Wiring.SkipWire(x + 1, y + 2);
            }
            NetMessage.SendTileSquare(-1, x, y + 1, 3);
        }

        public static void templeCleaner(int x, int y)
        {
            int num = x;
            int num2 = y;
            int num3 = 0;
            if (Game1.tile[x + 1, y].active() && (Game1.tile[x + 1, y].type == 0xe2))
            {
                num3++;
            }
            if (Game1.tile[x - 1, y].active() && (Game1.tile[x - 1, y].type == 0xe2))
            {
                num3++;
            }
            if (Game1.tile[x, y + 1].active() && (Game1.tile[x, y + 1].type == 0xe2))
            {
                num3++;
            }
            if (Game1.tile[x, y - 1].active() && (Game1.tile[x, y - 1].type == 0xe2))
            {
                num3++;
            }
            if (Game1.tile[x, y].active() && (Game1.tile[x, y].type == 0xe2))
            {
                if (num3 <= 1)
                {
                    Game1.tile[num, num2].active(false);
                    Game1.tile[num, num2].wall = 0x57;
                }
            }
            else if (!Game1.tile[x, y].active() && (num3 == 3))
            {
                Game1.tile[num, num2].active(true);
                Game1.tile[num, num2].type = 0xe2;
                Game1.tile[num, num2].liquid = 0;
                Game1.tile[num, num2].slope(0);
                Game1.tile[num, num2].halfBrick(false);
            }
        }

        public static void templePart2()
        {
            int tLeft = WorldGen.tLeft;
            int tRight = WorldGen.tRight;
            int tTop = WorldGen.tTop;
            int tBottom = WorldGen.tBottom;
            int tRooms = WorldGen.tRooms;
            float num6 = tRooms * 1.9f;
            num6 *= 1f + (genRand.Next(-15, 0x10) * 0.01f);
            int num7 = 0;
            while (num6 > 0f)
            {
                int num8 = genRand.Next(tLeft, tRight);
                int num9 = genRand.Next(tTop, tBottom);
                if ((Game1.tile[num8, num9].wall == 0x57) && !Game1.tile[num8, num9].active())
                {
                    if (mayanTrap(num8, num9))
                    {
                        num6--;
                        num7 = 0;
                    }
                    else
                    {
                        num7++;
                    }
                }
                else
                {
                    num7++;
                }
                if (num7 > 100)
                {
                    num7 = 0;
                    num6--;
                }
            }
            Game1.tileSolid[0xe8] = false;
            float num10 = tRooms * 0.35f;
            num10 *= 1f + (genRand.Next(-15, 0x10) * 0.01f);
            int contain = 0x50d;
            num7 = 0;
            while (num10 > 0f)
            {
                int i = genRand.Next(tLeft, tRight);
                int j = genRand.Next(tTop, tBottom);
                if (((Game1.tile[i, j].wall == 0x57) && !Game1.tile[i, j].active()) && AddBuriedChest(i, j, contain, true, 0x10))
                {
                    num10--;
                    num7 = 0;
                }
                num7++;
                if (num7 > 0x2710)
                {
                    break;
                }
            }
            float num14 = tRooms * 1.25f;
            num14 *= 1f + (genRand.Next(-25, 0x24) * 0.01f);
            num7 = 0;
            while (num14 > 0f)
            {
                num7++;
                int num15 = genRand.Next(tLeft, tRight);
                int num16 = genRand.Next(tTop, tBottom);
                if ((Game1.tile[num15, num16].wall == 0x57) && !Game1.tile[num15, num16].active())
                {
                    int num17 = num15;
                    int num18 = num16;
                    while (!Game1.tile[num17, num18].active())
                    {
                        num18++;
                        if (num18 > tBottom)
                        {
                            break;
                        }
                    }
                    num18--;
                    if (num18 <= tBottom)
                    {
                        PlaceTile(num17, num18, 0x69, true, false, -1, genRand.Next(0x2b, 0x2e));
                        if (Game1.tile[num17, num18].type == 0x69)
                        {
                            num14--;
                        }
                    }
                }
            }
            float num19 = tRooms * 1.35f;
            num19 *= 1f + (genRand.Next(-15, 0x1a) * 0.01f);
            num7 = 0;
            while (num19 > 0f)
            {
                num7++;
                int num20 = genRand.Next(tLeft, tRight);
                int num21 = genRand.Next(tTop, tBottom);
                if ((Game1.tile[num20, num21].wall == 0x57) && !Game1.tile[num20, num21].active())
                {
                    int num22 = num20;
                    int num23 = num21;
                    while (!Game1.tile[num22, num23].active())
                    {
                        num23++;
                        if (num23 > tBottom)
                        {
                            break;
                        }
                    }
                    num23--;
                    if (num23 <= tBottom)
                    {
                        switch (genRand.Next(3))
                        {
                            case 0:
                                PlaceTile(num22, num23, 0x12, true, false, -1, 10);
                                if (Game1.tile[num22, num23].type == 0x12)
                                {
                                    num19--;
                                }
                                break;

                            case 1:
                                PlaceTile(num22, num23, 14, true, false, -1, 9);
                                if (Game1.tile[num22, num23].type == 14)
                                {
                                    num19--;
                                }
                                break;

                            case 2:
                                PlaceTile(num22, num23, 15, true, false, -1, 12);
                                if (Game1.tile[num22, num23].type == 15)
                                {
                                    num19--;
                                }
                                break;
                        }
                    }
                }
                if (num7 > 0x2710)
                {
                    break;
                }
            }
            Game1.tileSolid[0xe8] = true;
        }

        public static Vector2 templePather(Vector2 templePath, int destX, int destY)
        {
            int x = (int)templePath.X;
            int y = (int)templePath.Y;
            int num3 = genRand.Next(5, 20);
            int num4 = genRand.Next(2, 5);
            while ((num3 > 0) && ((x != destX) || (y != destY)))
            {
                num3--;
                if (x > destX)
                {
                    x--;
                }
                if (x < destX)
                {
                    x++;
                }
                if (y > destY)
                {
                    y--;
                }
                if (y < destY)
                {
                    y++;
                }
                for (int i = x - num4; i < (x + num4); i++)
                {
                    for (int j = y - num4; j < (y + num4); j++)
                    {
                        Game1.tile[i, j].active(false);
                        Game1.tile[i, j].wall = 0x57;
                    }
                }
            }
            return new Vector2((float)x, (float)y);
        }

        public static void TightBiome(int x, int j)
        {
            int num;
            int num2;
            int type;
            int num4;
            if (Game1.netMode != 1)
            {
                if (Game1.tile[x, j] == null)
                {
                    return;
                }
                num = j;
                num2 = 0;
                type = 0;
                num4 = 1;
                if ((Game1.tile[x, num].frameX >= 0) && (Game1.tile[x, num].frameX <= 0x24))
                {
                    num2 = 7;
                    goto Label_01C3;
                }
                if ((Game1.tile[x, num].frameX >= 0x36) && (Game1.tile[x, num].frameX <= 90))
                {
                    num2 = 0;
                    goto Label_01C3;
                }
                if ((Game1.tile[x, num].frameX >= 0xd8) && (Game1.tile[x, num].frameX <= 0xfc))
                {
                    num2 = 1;
                    goto Label_01C3;
                }
                if ((Game1.tile[x, num].frameX >= 270) && (Game1.tile[x, num].frameX <= 0x132))
                {
                    num2 = 2;
                    goto Label_01C3;
                }
                if ((Game1.tile[x, num].frameX >= 0x144) && (Game1.tile[x, num].frameX <= 360))
                {
                    num2 = 3;
                    goto Label_01C3;
                }
                if ((Game1.tile[x, num].frameX >= 0x17a) && (Game1.tile[x, num].frameX <= 0x19e))
                {
                    num2 = 4;
                    goto Label_01C3;
                }
                if ((Game1.tile[x, num].frameX >= 0x1b0) && (Game1.tile[x, num].frameX <= 0x1d4))
                {
                    num2 = 5;
                    goto Label_01C3;
                }
                if ((Game1.tile[x, num].frameX >= 0x1e6) && (Game1.tile[x, num].frameX <= 0x20a))
                {
                    num2 = 6;
                    goto Label_01C3;
                }
            }
            return;
        Label_01C3:
            if (Game1.tile[x, num].frameY == 0x48)
            {
                type = Game1.tile[x, num - 1].type;
            }
            else if (Game1.tile[x, num].frameY == 90)
            {
                type = Game1.tile[x, num + 1].type;
            }
            else if (Game1.tile[x, num].frameY >= 0x24)
            {
                if (Game1.tile[x, num].frameY == 0x36)
                {
                    num--;
                }
                num4 = 2;
                type = Game1.tile[x, num + 2].type;
            }
            else
            {
                if (Game1.tile[x, num].frameY == 0x12)
                {
                    num--;
                }
                num4 = 2;
                type = Game1.tile[x, num - 1].type;
            }
            switch (type)
            {
                case 1:
                    type = 0;
                    break;

                case 0x75:
                case 0xa4:
                case 0x192:
                case 0x193:
                    type = 1;
                    break;

                case 0x19:
                case 0xa3:
                case 0x18e:
                case 400:
                    type = 2;
                    break;

                case 0xcb:
                case 200:
                case 0x18f:
                case 0x191:
                    type = 3;
                    break;

                case 0x18c:
                case 0x18d:
                    type = 4;
                    break;

                case 0x16f:
                    type = 6;
                    break;

                case 0x170:
                    type = 5;
                    break;

                case 0xa1:
                    type = 7;
                    break;

                default:
                    return;
            }
            if (num2 != type)
            {
                int num5 = genRand.Next(3) * 0x12;
                switch (type)
                {
                    case 0:
                        num5 += 0x36;
                        break;

                    case 1:
                        num5 += 0xd8;
                        break;

                    case 2:
                        num5 += 270;
                        break;

                    case 3:
                        num5 += 0x144;
                        break;

                    case 4:
                        num5 += 0x17a;
                        break;

                    case 5:
                        num5 += 0x1b0;
                        break;

                    case 6:
                        num5 += 0x1e6;
                        break;

                    case 7:
                        break;
                }
                for (int i = num; i < (num + num4); i++)
                {
                    Game1.tile[x, i].frameX = (short)num5;
                }
                if (Game1.netMode == 2)
                {
                    NetMessage.SendTileSquare(-1, x, num, 2);
                }
            }
        }

        public static void tileCountAndDestroy()
        {
            for (int i = 10; i < (Game1.maxTilesX - 10); i++)
            {
                for (int j = 10; j < (Game1.maxTilesY - 10); j++)
                {
                    if (Game1.tile[i, j].active() && (tileCounter(i, j) < tileCounterMax))
                    {
                        tileCounterKill();
                    }
                }
            }
        }

        public static int tileCounter(int x, int y)
        {
            tileCounterNum = 0;
            tileCounterNext(x, y);
            return tileCounterNum;
        }

        public static void tileCounterKill()
        {
            for (int i = 0; i < tileCounterNum; i++)
            {
                int num2 = tileCounterX[i];
                int num3 = tileCounterY[i];
                Game1.tile[num2, num3].active(false);
            }
        }

        public static void tileCounterNext(int x, int y)
        {
            if (((tileCounterNum < tileCounterMax) && (((x >= 5) && (x <= (Game1.maxTilesX - 5))) && ((y >= 5) && (y <= (Game1.maxTilesY - 5))))) && ((Game1.tile[x, y].active() && Game1.tileSolid[Game1.tile[x, y].type]) && TileID.Sets.CanBeClearedDuringGeneration[Game1.tile[x, y].type]))
            {
                for (int i = 0; i < tileCounterNum; i++)
                {
                    if ((tileCounterX[i] == x) && (tileCounterY[i] == y))
                    {
                        return;
                    }
                }
                tileCounterX[tileCounterNum] = x;
                tileCounterY[tileCounterNum] = y;
                tileCounterNum++;
                tileCounterNext(x - 1, y);
                tileCounterNext(x + 1, y);
                tileCounterNext(x, y - 1);
                tileCounterNext(x, y + 1);
            }
        }

        public static bool TileEmpty(int i, int j)
        {
            if ((Game1.tile[i, j] != null) && Game1.tile[i, j].active())
            {
                return Game1.tile[i, j].inActive();
            }
            return true;
        }

        public static void TileFrame(int i, int j, bool resetFrame = false, bool noBreak = false)
        {
            bool addToList = false;
            try
            {
                Tile tile2;
                Tile tile3;
                Tile tile4;
                Tile tile5;
                Tile tile6;
                Tile tile7;
                Tile tile8;
                Tile tile9;
                int num36;
                int num37;
                int num38;
                int num41;
                bool flag3;
                Tile tile15;
                if ((((i <= 5) || (j <= 5)) || ((i >= (Game1.maxTilesX - 5)) || (j >= (Game1.maxTilesY - 5)))) || (Game1.tile[i, j] == null))
                {
                    goto Label_71F1;
                }
                addToList = UpdateMapTile(i, j, true);
                Tile centerTile = Game1.tile[i, j];
                if (!centerTile.active())
                {
                    centerTile.halfBrick(false);
                    centerTile.color(0);
                    centerTile.slope(0);
                }
                if (((centerTile.liquid > 0) && (Game1.netMode != 1)) && !noLiquidCheck)
                {
                    Liquid.AddWater(i, j);
                }
                if (!centerTile.active())
                {
                    goto Label_71F1;
                }
                if ((noBreak && Game1.tileFrameImportant[centerTile.type]) && (centerTile.type != 4))
                {
                    return;
                }
                int type = centerTile.type;
                if (Game1.tileStone[type])
                {
                    type = 1;
                }
                int frameX = centerTile.frameX;
                int frameY = centerTile.frameY;
                Rectangle rectangle = new Rectangle(-1, -1, 0, 0);
                if (!Game1.tileFrameImportant[centerTile.type])
                {
                    goto Label_1F33;
                }
                switch (type)
                {
                    case 0x81:
                    case 0x95:
                        {
                            tile2 = Game1.tile[i, j - 1];
                            tile3 = Game1.tile[i, j + 1];
                            tile4 = Game1.tile[i - 1, j];
                            tile5 = Game1.tile[i + 1, j];
                            int index = -1;
                            int num20 = -1;
                            int num21 = -1;
                            int num22 = -1;
                            if (((tile2 != null) && tile2.nactive()) && !tile2.bottomSlope())
                            {
                                num20 = tile2.type;
                            }
                            if (((tile3 != null) && tile3.nactive()) && (!tile3.halfBrick() && !tile3.topSlope()))
                            {
                                index = tile3.type;
                            }
                            if ((tile4 != null) && tile4.nactive())
                            {
                                num21 = tile4.type;
                            }
                            if ((tile5 != null) && tile5.nactive())
                            {
                                num22 = tile5.type;
                            }
                            if (((index >= 0) && Game1.tileSolid[index]) && !Game1.tileSolidTop[index])
                            {
                                centerTile.frameY = 0;
                            }
                            else if (((num21 >= 0) && Game1.tileSolid[num21]) && !Game1.tileSolidTop[num21])
                            {
                                centerTile.frameY = 0x36;
                            }
                            else if (((num22 >= 0) && Game1.tileSolid[num22]) && !Game1.tileSolidTop[num22])
                            {
                                centerTile.frameY = 0x24;
                            }
                            else if (((num20 >= 0) && Game1.tileSolid[num20]) && !Game1.tileSolidTop[num20])
                            {
                                centerTile.frameY = 0x12;
                            }
                            else
                            {
                                KillTile(i, j, false, false, false);
                            }
                            return;
                        }
                    case 0x88:
                        {
                            tile2 = Game1.tile[i, j - 1];
                            tile3 = Game1.tile[i, j + 1];
                            tile4 = Game1.tile[i - 1, j];
                            tile5 = Game1.tile[i + 1, j];
                            tile6 = Game1.tile[i - 1, j + 1];
                            tile7 = Game1.tile[i + 1, j + 1];
                            tile8 = Game1.tile[i - 1, j - 1];
                            tile9 = Game1.tile[i + 1, j - 1];
                            int num12 = -1;
                            int num13 = -1;
                            int num14 = -1;
                            int num15 = -1;
                            int num16 = -1;
                            int num17 = -1;
                            int num18 = -1;
                            if ((tile2 != null) && tile2.nactive())
                            {
                                ushort num71 = tile2.type;
                            }
                            if (((tile3 != null) && tile3.nactive()) && (!tile3.halfBrick() && !tile3.topSlope()))
                            {
                                num12 = tile3.type;
                            }
                            if ((tile4 != null) && tile4.nactive())
                            {
                                num13 = tile4.type;
                            }
                            if ((tile5 != null) && tile5.nactive())
                            {
                                num14 = tile5.type;
                            }
                            if ((tile6 != null) && tile6.nactive())
                            {
                                num15 = tile6.type;
                            }
                            if ((tile7 != null) && tile7.nactive())
                            {
                                num16 = tile7.type;
                            }
                            if ((tile8 != null) && tile8.nactive())
                            {
                                num17 = tile8.type;
                            }
                            if ((tile9 != null) && tile9.nactive())
                            {
                                num18 = tile9.type;
                            }
                            if (((num12 >= 0) && Game1.tileSolid[num12]) && !Game1.tileNoAttach[num12])
                            {
                                centerTile.frameX = 0;
                            }
                            else if ((((num13 >= 0) && Game1.tileSolid[num13]) && !Game1.tileNoAttach[num13]) || ((num13 == 0x7c) || (((num13 == 5) && (num17 == 5)) && (num15 == 5))))
                            {
                                centerTile.frameX = 0x12;
                            }
                            else if ((((num14 >= 0) && Game1.tileSolid[num14]) && !Game1.tileNoAttach[num14]) || ((num14 == 0x7c) || (((num14 == 5) && (num18 == 5)) && (num16 == 5))))
                            {
                                centerTile.frameX = 0x24;
                            }
                            else if (centerTile.wall > 0)
                            {
                                centerTile.frameX = 0x36;
                            }
                            else
                            {
                                KillTile(i, j, false, false, false);
                            }
                            return;
                        }
                    case 4:
                        {
                            tile2 = Game1.tile[i, j - 1];
                            tile3 = Game1.tile[i, j + 1];
                            tile4 = Game1.tile[i - 1, j];
                            tile5 = Game1.tile[i + 1, j];
                            tile6 = Game1.tile[i - 1, j + 1];
                            tile7 = Game1.tile[i + 1, j + 1];
                            tile8 = Game1.tile[i - 1, j - 1];
                            tile9 = Game1.tile[i + 1, j - 1];
                            short num4 = 0;
                            if (centerTile.frameX >= 0x42)
                            {
                                num4 = 0x42;
                            }
                            int num5 = -1;
                            int num6 = -1;
                            int num7 = -1;
                            int num8 = -1;
                            int num9 = -1;
                            int num10 = -1;
                            int num11 = -1;
                            if (((tile2 != null) && tile2.nactive()) && !tile2.bottomSlope())
                            {
                                ushort num1 = tile2.type;
                            }
                            if (((tile3 != null) && tile3.nactive()) && (!tile3.halfBrick() && !tile3.topSlope()))
                            {
                                num5 = tile3.type;
                            }
                            if (((tile4 != null) && tile4.nactive()) && ((tile4.slope() == 0) || ((tile4.slope() % 2) != 1)))
                            {
                                num6 = tile4.type;
                            }
                            if (((tile5 != null) && tile5.nactive()) && ((tile5.slope() == 0) || ((tile5.slope() % 2) != 0)))
                            {
                                num7 = tile5.type;
                            }
                            if ((tile6 != null) && tile6.nactive())
                            {
                                num8 = tile6.type;
                            }
                            if ((tile7 != null) && tile7.nactive())
                            {
                                num9 = tile7.type;
                            }
                            if ((tile8 != null) && tile8.nactive())
                            {
                                num10 = tile8.type;
                            }
                            if ((tile9 != null) && tile9.nactive())
                            {
                                num11 = tile9.type;
                            }
                            if (((num5 >= 0) && Game1.tileSolid[num5]) && (!Game1.tileNoAttach[num5] || (num5 == 0x13)))
                            {
                                centerTile.frameX = num4;
                            }
                            else if ((((num6 >= 0) && Game1.tileSolid[num6]) && !Game1.tileNoAttach[num6]) || ((num6 == 0x7c) || (((num6 == 5) && (num10 == 5)) && (num8 == 5))))
                            {
                                centerTile.frameX = (short)(0x16 + num4);
                            }
                            else if ((((num7 >= 0) && Game1.tileSolid[num7]) && !Game1.tileNoAttach[num7]) || ((num7 == 0x7c) || (((num7 == 5) && (num11 == 5)) && (num9 == 5))))
                            {
                                centerTile.frameX = (short)(0x2c + num4);
                            }
                            else if (centerTile.wall > 0)
                            {
                                centerTile.frameX = num4;
                            }
                            else
                            {
                                KillTile(i, j, false, false, false);
                            }
                            return;
                        }
                    default:
                        {
                            if ((type >= 0x175) && (type <= 0x177))
                            {
                                tile2 = Game1.tile[i, j - 1];
                                if (((tile2 == null) || !tile2.active()) || ((tile2.bottomSlope() || !Game1.tileSolid[tile2.type]) || Game1.tileSolidTop[tile2.type]))
                                {
                                    KillTile(i, j, false, false, false);
                                }
                                return;
                            }
                            switch (type)
                            {
                                case 3:
                                case 0x18:
                                case 0x3d:
                                case 0x47:
                                case 0x49:
                                case 0x4a:
                                case 110:
                                case 0x71:
                                case 0xc9:
                                    PlantCheck(i, j);
                                    return;

                                case 0xb8:
                                    {
                                        tile2 = Game1.tile[i, j - 1];
                                        tile3 = Game1.tile[i, j + 1];
                                        tile4 = Game1.tile[i - 1, j];
                                        tile5 = Game1.tile[i + 1, j];
                                        int num28 = -1;
                                        int num29 = -1;
                                        int num30 = -1;
                                        int num31 = -1;
                                        if (((tile2 != null) && tile2.active()) && !tile2.bottomSlope())
                                        {
                                            num29 = tile2.type;
                                        }
                                        if (((tile3 != null) && tile3.active()) && (!tile3.halfBrick() && !tile3.topSlope()))
                                        {
                                            num28 = tile3.type;
                                        }
                                        if ((tile4 != null) && tile4.active())
                                        {
                                            num30 = tile4.type;
                                        }
                                        if ((tile5 != null) && tile5.active())
                                        {
                                            num31 = tile5.type;
                                        }
                                        short num32 = (short)(genRand.Next(3) * 0x12);
                                        if ((num28 >= 0) && Game1.tileMoss[num28])
                                        {
                                            if (num28 == 0x17d)
                                            {
                                                centerTile.frameX = 110;
                                            }
                                            else
                                            {
                                                centerTile.frameX = (short)(0x16 * (num28 - 0xb3));
                                            }
                                            if ((centerTile.frameY < 0) || (centerTile.frameY > 0x24))
                                            {
                                                centerTile.frameY = num32;
                                            }
                                        }
                                        else if ((num29 >= 0) && Game1.tileMoss[num29])
                                        {
                                            if (num29 == 0x17d)
                                            {
                                                centerTile.frameX = 110;
                                            }
                                            else
                                            {
                                                centerTile.frameX = (short)(0x16 * (num29 - 0xb3));
                                            }
                                            if ((centerTile.frameY < 0x36) || (centerTile.frameY > 90))
                                            {
                                                centerTile.frameY = (short)(0x36 + num32);
                                            }
                                        }
                                        else if ((num30 >= 0) && Game1.tileMoss[num30])
                                        {
                                            if (num30 == 0x17d)
                                            {
                                                centerTile.frameX = 110;
                                            }
                                            else
                                            {
                                                centerTile.frameX = (short)(0x16 * (num30 - 0xb3));
                                            }
                                            if ((centerTile.frameY < 0x6c) || (centerTile.frameY > 0x36))
                                            {
                                                centerTile.frameY = (short)(0x6c + num32);
                                            }
                                        }
                                        else if ((num31 >= 0) && Game1.tileMoss[num31])
                                        {
                                            if (num31 == 0x17d)
                                            {
                                                centerTile.frameX = 110;
                                            }
                                            else
                                            {
                                                centerTile.frameX = (short)(0x16 * (num31 - 0xb3));
                                            }
                                            if ((centerTile.frameY < 0xa2) || (centerTile.frameY > 0xc6))
                                            {
                                                centerTile.frameY = (short)(0xa2 + num32);
                                            }
                                        }
                                        else
                                        {
                                            KillTile(i, j, false, false, false);
                                        }
                                        return;
                                    }
                                case 0xe3:
                                    CheckDye(i, j);
                                    return;

                                case 12:
                                case 0x1f:
                                    CheckOrb(i, j, type);
                                    return;

                                case 0xa5:
                                    CheckTight(i, j);
                                    return;

                                case 0x144:
                                    tile3 = Game1.tile[i, j + 1];
                                    if (tile3 == null)
                                    {
                                        tile3 = new Tile();
                                        Game1.tile[i, j + 1] = tile3;
                                    }
                                    if (!tile3.nactive() || (!Game1.tileSolid[tile3.type] && !Game1.tileSolidTop[tile3.type]))
                                    {
                                        KillTile(i, j, false, false, false);
                                    }
                                    return;

                                case 0xeb:
                                    Check3x1(i, j, type);
                                    return;

                                case 0xb9:
                                    CheckPile(i, j);
                                    return;

                                case 0xb2:
                                    {
                                        tile2 = Game1.tile[i, j - 1];
                                        tile3 = Game1.tile[i, j + 1];
                                        tile4 = Game1.tile[i - 1, j];
                                        tile5 = Game1.tile[i + 1, j];
                                        int num23 = -1;
                                        int num24 = -1;
                                        int num25 = -1;
                                        int num26 = -1;
                                        if (((tile2 != null) && tile2.active()) && !tile2.bottomSlope())
                                        {
                                            num24 = tile2.type;
                                        }
                                        if (((tile3 != null) && tile3.active()) && (!tile3.halfBrick() && !tile3.topSlope()))
                                        {
                                            num23 = tile3.type;
                                        }
                                        if ((tile4 != null) && tile4.active())
                                        {
                                            num25 = tile4.type;
                                        }
                                        if ((tile5 != null) && tile5.active())
                                        {
                                            num26 = tile5.type;
                                        }
                                        short num27 = (short)(genRand.Next(3) * 0x12);
                                        if (((num23 >= 0) && Game1.tileSolid[num23]) && !Game1.tileSolidTop[num23])
                                        {
                                            if ((centerTile.frameY < 0) || (centerTile.frameY > 0x24))
                                            {
                                                centerTile.frameY = num27;
                                            }
                                        }
                                        else if (((num25 >= 0) && Game1.tileSolid[num25]) && !Game1.tileSolidTop[num25])
                                        {
                                            if ((centerTile.frameY < 0x6c) || (centerTile.frameY > 0x36))
                                            {
                                                centerTile.frameY = (short)(0x6c + num27);
                                            }
                                        }
                                        else if (((num26 >= 0) && Game1.tileSolid[num26]) && !Game1.tileSolidTop[num26])
                                        {
                                            if ((centerTile.frameY < 0xa2) || (centerTile.frameY > 0xc6))
                                            {
                                                centerTile.frameY = (short)(0xa2 + num27);
                                            }
                                        }
                                        else if (((num24 >= 0) && Game1.tileSolid[num24]) && !Game1.tileSolidTop[num24])
                                        {
                                            if ((centerTile.frameY < 0x36) || (centerTile.frameY > 90))
                                            {
                                                centerTile.frameY = (short)(0x36 + num27);
                                            }
                                        }
                                        else
                                        {
                                            KillTile(i, j, false, false, false);
                                        }
                                        return;
                                    }
                            }
                            if (((type >= 0x113) && (type <= 0x119)) || ((((type == 0x128) || (type == 0x129)) || ((type == 0x135) || (type == 0x166))) || (((type == 0x167) || (type == 0x19d)) || (type == 0x19e))))
                            {
                                Check6x3(i, j, type);
                                return;
                            }
                            if (type == 10)
                            {
                                if (!destroyObject)
                                {
                                    int num33 = j;
                                    bool flag2 = false;
                                    int num34 = centerTile.frameY;
                                    int doorStyle = num34 / 0x36;
                                    num33 = j - ((num34 % 0x36) / 0x12);
                                    Tile tile10 = Game1.tile[i, num33 - 1];
                                    Tile tile11 = Game1.tile[i, num33];
                                    Tile tile12 = Game1.tile[i, num33 + 1];
                                    Tile tile13 = Game1.tile[i, num33 + 2];
                                    Tile tile14 = Game1.tile[i, num33 + 3];
                                    if (tile10 == null)
                                    {
                                        tile10 = new Tile();
                                        Game1.tile[i, num33 - 1] = tile10;
                                    }
                                    if (tile11 == null)
                                    {
                                        tile11 = new Tile();
                                        Game1.tile[i, num33] = tile11;
                                    }
                                    if (tile12 == null)
                                    {
                                        tile12 = new Tile();
                                        Game1.tile[i, num33 + 1] = tile12;
                                    }
                                    if (tile13 == null)
                                    {
                                        tile13 = new Tile();
                                        Game1.tile[i, num33 + 2] = tile13;
                                    }
                                    if (tile14 == null)
                                    {
                                        tile14 = new Tile();
                                        Game1.tile[i, num33 + 3] = tile14;
                                    }
                                    if (!tile10.active() || !Game1.tileSolid[tile10.type])
                                    {
                                        flag2 = true;
                                    }
                                    if (!SolidTile(tile14))
                                    {
                                        flag2 = true;
                                    }
                                    if (!tile11.active() || (tile11.type != type))
                                    {
                                        flag2 = true;
                                    }
                                    if (!tile12.active() || (tile12.type != type))
                                    {
                                        flag2 = true;
                                    }
                                    if (!tile13.active() || (tile13.type != type))
                                    {
                                        flag2 = true;
                                    }
                                    if (flag2)
                                    {
                                        destroyObject = true;
                                        KillTile(i, num33, false, false, false);
                                        KillTile(i, num33 + 1, false, false, false);
                                        KillTile(i, num33 + 2, false, false, false);
                                        DropDoorItem(i, j, doorStyle);
                                    }
                                    destroyObject = false;
                                }
                                return;
                            }
                            if (type != 11)
                            {
                                goto Label_105F;
                            }
                            if (destroyObject)
                            {
                                return;
                            }
                            num36 = 0;
                            num37 = i;
                            num38 = j;
                            int num39 = centerTile.frameX;
                            int num40 = centerTile.frameY;
                            num41 = num40 / 0x36;
                            num38 = j - ((num40 % 0x36) / 0x12);
                            flag3 = false;
                            switch (num39)
                            {
                                case 0:
                                    num37 = i;
                                    num36 = 1;
                                    goto Label_0F3A;

                                case 0x12:
                                    num37 = i - 1;
                                    num36 = 1;
                                    goto Label_0F3A;

                                case 0x24:
                                    num37 = i + 1;
                                    num36 = -1;
                                    goto Label_0F3A;

                                case 0x36:
                                    num37 = i;
                                    num36 = -1;
                                    goto Label_0F3A;
                            }
                            break;
                        }
                }
            Label_0F3A:
                tile15 = Game1.tile[num37, num38 - 1];
                Tile testTile = Game1.tile[num37, num38 + 3];
                if (tile15 == null)
                {
                    tile15 = new Tile();
                    Game1.tile[num37, num38 - 1] = tile15;
                }
                if (testTile == null)
                {
                    testTile = new Tile();
                    Game1.tile[num37, num38 + 3] = testTile;
                }
                if ((!tile15.active() || !Game1.tileSolid[tile15.type]) || !SolidTile(testTile))
                {
                    flag3 = true;
                    destroyObject = true;
                    DropDoorItem(i, j, num41);
                }
                int num42 = num37;
                if (num36 == -1)
                {
                    num42 = num37 - 1;
                }
                for (int k = num42; k < (num42 + 2); k++)
                {
                    for (int m = num38; m < (num38 + 3); m++)
                    {
                        if (!flag3)
                        {
                            Tile tile17 = Game1.tile[k, m];
                            if (!tile17.active() || (tile17.type != 11))
                            {
                                destroyObject = true;
                                DropDoorItem(i, j, num41);
                                flag3 = true;
                                k = num42;
                                m = num38;
                            }
                        }
                        if (flag3)
                        {
                            KillTile(k, m, false, false, false);
                        }
                    }
                }
                destroyObject = false;
                return;
            Label_105F:
                if (type == 0x13a)
                {
                    Minecart.FrameTrack(i, j, false, false);
                }
                else if (type == 380)
                {
                    tile4 = Game1.tile[i - 1, j];
                    if (tile4 != null)
                    {
                        tile5 = Game1.tile[i + 1, j];
                        if ((((tile5 != null) && (Game1.tile[i - 1, j + 1] != null)) && ((Game1.tile[i + 1, j + 1] != null) && (Game1.tile[i - 1, j - 1] != null))) && (Game1.tile[i + 1, j - 1] != null))
                        {
                            int num45 = -1;
                            int num46 = -1;
                            if ((tile4 != null) && tile4.active())
                            {
                                if (Game1.tileStone[tile4.type])
                                {
                                    num46 = 1;
                                }
                                else
                                {
                                    num46 = tile4.type;
                                }
                            }
                            if ((tile5 != null) && tile5.active())
                            {
                                if (Game1.tileStone[tile5.type])
                                {
                                    num45 = 1;
                                }
                                else
                                {
                                    num45 = tile5.type;
                                }
                            }
                            if ((num45 >= 0) && !Game1.tileSolid[num45])
                            {
                                num45 = -1;
                            }
                            if ((num46 >= 0) && !Game1.tileSolid[num46])
                            {
                                num46 = -1;
                            }
                            if ((num46 == type) && (num45 == type))
                            {
                                rectangle.X = 0x12;
                            }
                            else if ((num46 == type) && (num45 != type))
                            {
                                rectangle.X = 0x24;
                            }
                            else if ((num46 != type) && (num45 == type))
                            {
                                rectangle.X = 0;
                            }
                            else
                            {
                                rectangle.X = 0x36;
                            }
                            centerTile.frameX = (short)rectangle.X;
                        }
                    }
                }
                else
                {
                    switch (type)
                    {
                        case 0xe9:
                        case 0xec:
                        case 0xee:
                            CheckJunglePlant(i, j, type);
                            return;

                        case 0x13:
                            tile4 = Game1.tile[i - 1, j];
                            if (tile4 != null)
                            {
                                tile5 = Game1.tile[i + 1, j];
                                if (tile5 != null)
                                {
                                    tile6 = Game1.tile[i - 1, j + 1];
                                    if (tile6 != null)
                                    {
                                        tile7 = Game1.tile[i + 1, j + 1];
                                        if (tile7 != null)
                                        {
                                            tile8 = Game1.tile[i - 1, j - 1];
                                            if (tile8 != null)
                                            {
                                                tile9 = Game1.tile[i + 1, j - 1];
                                                if (tile9 != null)
                                                {
                                                    int num47 = -1;
                                                    int num48 = -1;
                                                    if ((tile4 != null) && tile4.active())
                                                    {
                                                        if (Game1.tileStone[tile4.type])
                                                        {
                                                            num48 = 1;
                                                        }
                                                        else
                                                        {
                                                            num48 = tile4.type;
                                                        }
                                                    }
                                                    if ((tile5 != null) && tile5.active())
                                                    {
                                                        if (Game1.tileStone[tile5.type])
                                                        {
                                                            num47 = 1;
                                                        }
                                                        else
                                                        {
                                                            num47 = tile5.type;
                                                        }
                                                    }
                                                    if ((num47 >= 0) && !Game1.tileSolid[num47])
                                                    {
                                                        num47 = -1;
                                                    }
                                                    if ((num48 >= 0) && !Game1.tileSolid[num48])
                                                    {
                                                        num48 = -1;
                                                    }
                                                    if ((num48 == type) && (tile4.halfBrick() != centerTile.halfBrick()))
                                                    {
                                                        num48 = -1;
                                                    }
                                                    if ((num47 == type) && (tile5.halfBrick() != centerTile.halfBrick()))
                                                    {
                                                        num47 = -1;
                                                    }
                                                    if (((num48 != -1) && (num48 != type)) && centerTile.halfBrick())
                                                    {
                                                        num48 = -1;
                                                    }
                                                    if (((num47 != -1) && (num47 != type)) && centerTile.halfBrick())
                                                    {
                                                        num47 = -1;
                                                    }
                                                    if (((num48 == -1) && tile8.active()) && ((tile8.type == type) && (tile8.slope() == 1)))
                                                    {
                                                        num48 = type;
                                                    }
                                                    if (((num47 == -1) && tile9.active()) && ((tile9.type == type) && (tile9.slope() == 2)))
                                                    {
                                                        num47 = type;
                                                    }
                                                    if (((num48 == type) && (tile4.slope() == 2)) && (num47 != type))
                                                    {
                                                        num47 = -1;
                                                    }
                                                    if (((num47 == type) && (tile5.slope() == 1)) && (num48 != type))
                                                    {
                                                        num48 = -1;
                                                    }
                                                    if (centerTile.slope() == 1)
                                                    {
                                                        if ((tile5.type == 0x13) && (tile5.slope() == 0))
                                                        {
                                                            rectangle.X = 0x1d4;
                                                        }
                                                        else if (!tile7.active() && ((tile7.type != 0x13) || (tile7.slope() == 2)))
                                                        {
                                                            if (!tile4.active() && ((tile8.type != 0x13) || (tile8.slope() != 1)))
                                                            {
                                                                rectangle.X = 0x1b0;
                                                            }
                                                            else
                                                            {
                                                                rectangle.X = 360;
                                                            }
                                                        }
                                                        else if (!tile4.active() && ((tile8.type != 0x13) || (tile8.slope() != 1)))
                                                        {
                                                            rectangle.X = 0x18c;
                                                        }
                                                        else
                                                        {
                                                            rectangle.X = 180;
                                                        }
                                                    }
                                                    else if (centerTile.slope() == 2)
                                                    {
                                                        if ((tile4.type == 0x13) && (tile4.slope() == 0))
                                                        {
                                                            rectangle.X = 450;
                                                        }
                                                        else if (!tile6.active() && ((tile6.type != 0x13) || (tile6.slope() == 1)))
                                                        {
                                                            if (!tile5.active() && ((tile9.type != 0x13) || (tile9.slope() != 2)))
                                                            {
                                                                rectangle.X = 0x19e;
                                                            }
                                                            else
                                                            {
                                                                rectangle.X = 0x156;
                                                            }
                                                        }
                                                        else if (!tile5.active() && ((tile9.type != 0x13) || (tile9.slope() != 2)))
                                                        {
                                                            rectangle.X = 0x17a;
                                                        }
                                                        else
                                                        {
                                                            rectangle.X = 0x90;
                                                        }
                                                    }
                                                    else if ((num48 == type) && (num47 == type))
                                                    {
                                                        if ((tile4.slope() == 2) && (tile5.slope() == 1))
                                                        {
                                                            rectangle.X = 0xfc;
                                                        }
                                                        else if (tile4.slope() == 2)
                                                        {
                                                            rectangle.X = 0xd8;
                                                        }
                                                        else if (tile5.slope() == 1)
                                                        {
                                                            rectangle.X = 0xea;
                                                        }
                                                        else
                                                        {
                                                            rectangle.X = 0;
                                                        }
                                                    }
                                                    else if ((num48 == type) && (num47 == -1))
                                                    {
                                                        if (tile4.slope() == 2)
                                                        {
                                                            rectangle.X = 270;
                                                        }
                                                        else
                                                        {
                                                            rectangle.X = 0x12;
                                                        }
                                                    }
                                                    else if ((num48 == -1) && (num47 == type))
                                                    {
                                                        if (tile5.slope() == 1)
                                                        {
                                                            rectangle.X = 0x120;
                                                        }
                                                        else
                                                        {
                                                            rectangle.X = 0x24;
                                                        }
                                                    }
                                                    else if ((num48 != type) && (num47 == type))
                                                    {
                                                        rectangle.X = 0x36;
                                                    }
                                                    else if ((num48 == type) && (num47 != type))
                                                    {
                                                        rectangle.X = 0x48;
                                                    }
                                                    else if (((num48 != type) && (num48 != -1)) && (num47 == -1))
                                                    {
                                                        rectangle.X = 0x6c;
                                                    }
                                                    else if (((num48 == -1) && (num47 != type)) && (num47 != -1))
                                                    {
                                                        rectangle.X = 0x7e;
                                                    }
                                                    else
                                                    {
                                                        rectangle.X = 90;
                                                    }
                                                    centerTile.frameX = (short)rectangle.X;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            return;

                        case 240:
                            Check3x3Wall(i, j);
                            return;

                        case 0xf5:
                            Check2x3Wall(i, j);
                            return;

                        case 0xf6:
                            Check3x2Wall(i, j);
                            return;

                        case 0xf1:
                            Check4x3Wall(i, j);
                            return;

                        case 0xf2:
                            Check6x4Wall(i, j);
                            return;

                        case 0x14e:
                            CheckWeaponsRack(i, j);
                            return;

                        case 0x22:
                            CheckChand(i, j, type);
                            return;
                    }
                    if ((((((type == 0x6a) || (type == 0xd4)) || ((type == 0xdb) || (type == 220))) || (((type == 0xe4) || (type == 0xe7)) || ((type == 0xf3) || (type == 0xf7)))) || ((type == 0x11b) || ((type >= 300) && (type <= 0x134)))) || (((type == 0x162) || (type == 0x196)) || ((type == 0x19c) || (type == 0x163))))
                    {
                        Check3x3(i, j, (ushort)type);
                    }
                    else
                    {
                        switch (type)
                        {
                            case 15:
                            case 20:
                            case 0xd8:
                            case 0x152:
                            case 390:
                                Check1x2(i, j, (ushort)type);
                                return;
                        }
                        if ((((((((type == 14) || (type == 0x11)) || ((type == 0x1a) || (type == 0x4d))) || (((type == 0x56) || (type == 0x57)) || ((type == 0x179) || (type == 0x58)))) || ((((type == 0x59) || (type == 0x72)) || ((type == 0x85) || (type == 0xba))) || (((type == 0xbb) || (type == 0xd7)) || ((type == 0xd9) || (type == 0xda))))) || (((((type == 0xed) || (type == 0xf4)) || ((type == 0x11d) || (type == 0x11e))) || (((type == 0x12a) || (type == 0x12b)) || ((type == 310) || (type == 0x153)))) || ((type >= 0x169) && (type <= 0x16c)))) || ((type >= 0x187) && (type <= 0x18a))) || (type == 0x195))
                        {
                            Check3x2(i, j, (ushort)type);
                        }
                        else
                        {
                            switch (type)
                            {
                                case 0x87:
                                case 0x90:
                                case 0x8d:
                                case 210:
                                case 0xef:
                                case 0x24:
                                    Check1x1(i, j, type);
                                    return;

                                case 0x10:
                                case 0x12:
                                case 0x1d:
                                case 0x67:
                                case 0x86:
                                    Check2x1(i, j, (byte)type);
                                    return;

                                case 13:
                                case 0x21:
                                case 50:
                                case 0x4e:
                                case 0xae:
                                case 0x174:
                                    CheckOnTable1x1(i, j, (byte)type);
                                    return;

                                case 0x15:
                                    CheckChest(i, j, (byte)type);
                                    return;

                                case 0x80:
                                    CheckMan(i, j);
                                    return;

                                case 0x10d:
                                    CheckWoman(i, j);
                                    return;

                                case 0x1b:
                                    CheckSunflower(i, j, 0x1b);
                                    return;

                                case 0x1c:
                                    CheckPot(i, j, 0x1c);
                                    return;

                                case 0xab:
                                    CheckXmasTree(i, j);
                                    return;

                                case 0xfe:
                                    Check2x2Style(i, j, type);
                                    return;

                                case 0x14f:
                                case 0x19b:
                                    Check2x2(i, j, type);
                                    return;
                            }
                            if ((((((type == 0x84) || (type == 0x8a)) || ((type == 0x8e) || (type == 0x8f))) || ((type >= 0x120) && (type <= 0x127))) || ((type >= 0x13c) && (type <= 0x13e))) || ((type == 0xac) || (type == 360)))
                            {
                                Check2x2(i, j, type);
                            }
                            else
                            {
                                switch (type)
                                {
                                    case 0x178:
                                        CheckSuper(i, j, type);
                                        return;

                                    case 0x5b:
                                        CheckBanner(i, j, (byte)type);
                                        return;

                                    case 0x8b:
                                    case 0x23:
                                        CheckMB(i, j, (byte)type);
                                        return;

                                    case 0x182:
                                    case 0x183:
                                        CheckTrapDoor(i, j, type);
                                        return;

                                    case 0x185:
                                    case 0x184:
                                        CheckTallGate(i, j, type);
                                        return;

                                    case 0x5c:
                                    case 0x5d:
                                        Check1xX(i, j, (byte)type);
                                        return;

                                    case 0x68:
                                    case 0x69:
                                    case 0xcf:
                                    case 320:
                                    case 0x151:
                                    case 0x15d:
                                    case 0x164:
                                    case 0x17a:
                                    case 410:
                                        Check2xX(i, j, (ushort)type);
                                        return;

                                    case 0x65:
                                    case 0x66:
                                        Check3x4(i, j, (byte)type);
                                        return;

                                    case 0x2a:
                                    case 270:
                                    case 0x10f:
                                        Check1x2Top(i, j, (ushort)type);
                                        return;

                                    case 0x37:
                                    case 0x55:
                                    case 0x18b:
                                        CheckSign(i, j, (ushort)type);
                                        return;

                                    case 0xd1:
                                        CheckCannon(i, j, type);
                                        return;

                                    case 0x4f:
                                    case 90:
                                        Check4x2(i, j, type);
                                        return;

                                    case 0x5e:
                                    case 0x5f:
                                    case 0x61:
                                    case 0x13f:
                                    case 0x62:
                                    case 0x63:
                                    case 100:
                                    case 0x7d:
                                    case 0x7e:
                                    case 0xad:
                                    case 0x11a:
                                    case 0x11f:
                                        Check2x2(i, j, type);
                                        return;

                                    case 0x60:
                                        Check2x2Style(i, j, type);
                                        return;

                                    case 0x51:
                                        {
                                            tile2 = Game1.tile[i, j - 1];
                                            tile3 = Game1.tile[i, j + 1];
                                            tile4 = Game1.tile[i - 1, j];
                                            tile5 = Game1.tile[i + 1, j];
                                            int num49 = -1;
                                            int num50 = -1;
                                            if ((tile2 != null) && tile2.active())
                                            {
                                                num50 = tile2.type;
                                            }
                                            if ((tile3 != null) && tile3.active())
                                            {
                                                num49 = tile3.type;
                                            }
                                            if (num50 != -1)
                                            {
                                                KillTile(i, j, false, false, false);
                                            }
                                            else if (((num49 < 0) || !Game1.tileSolid[num49]) || (tile3.halfBrick() || tile3.topSlope()))
                                            {
                                                KillTile(i, j, false, false, false);
                                            }
                                            return;
                                        }
                                }
                                if (Game1.tileAlch[type])
                                {
                                    CheckAlch(i, j);
                                }
                                else
                                {
                                    switch (type)
                                    {
                                        case 5:
                                            CheckTree(i, j);
                                            break;

                                        case 0x143:
                                            CheckPalmTree(i, j);
                                            break;

                                        case 0x48:
                                            {
                                                tile2 = Game1.tile[i, j - 1];
                                                tile3 = Game1.tile[i, j + 1];
                                                int num51 = -1;
                                                int num52 = -1;
                                                if ((tile2 != null) && tile2.active())
                                                {
                                                    num52 = tile2.type;
                                                }
                                                if ((tile3 != null) && tile3.active())
                                                {
                                                    num51 = tile3.type;
                                                }
                                                if ((num51 != type) && (num51 != 70))
                                                {
                                                    KillTile(i, j, false, false, false);
                                                }
                                                else if ((num52 != type) && (centerTile.frameX == 0))
                                                {
                                                    centerTile.frameNumber((byte)genRand.Next(3));
                                                    if (centerTile.frameNumber() == 0)
                                                    {
                                                        centerTile.frameX = 0x12;
                                                        centerTile.frameY = 0;
                                                    }
                                                    if (centerTile.frameNumber() == 1)
                                                    {
                                                        centerTile.frameX = 0x12;
                                                        centerTile.frameY = 0x12;
                                                    }
                                                    if (centerTile.frameNumber() == 2)
                                                    {
                                                        centerTile.frameX = 0x12;
                                                        centerTile.frameY = 0x24;
                                                    }
                                                }
                                                break;
                                            }
                                    }
                                }
                            }
                        }
                    }
                }
                return;
            Label_1F33:
                if (((type >= 0xff) && (type <= 0x10c)) || (type == 0x181))
                {
                    Framing.SelfFrame8Way(i, j, centerTile, resetFrame);
                    return;
                }
                tile2 = Game1.tile[i, j - 1];
                tile3 = Game1.tile[i, j + 1];
                tile4 = Game1.tile[i - 1, j];
                tile5 = Game1.tile[i + 1, j];
                tile6 = Game1.tile[i - 1, j + 1];
                tile7 = Game1.tile[i + 1, j + 1];
                tile8 = Game1.tile[i - 1, j - 1];
                tile9 = Game1.tile[i + 1, j - 1];
                int upLeft = -1;
                int up = -1;
                int upRight = -1;
                int left = -1;
                int right = -1;
                int downLeft = -1;
                int down = -1;
                int downRight = -1;
                if ((tile4 != null) && tile4.active())
                {
                    if (Game1.tileStone[tile4.type])
                    {
                        left = 1;
                    }
                    else
                    {
                        left = tile4.type;
                    }
                    if ((tile4.slope() == 1) || (tile4.slope() == 3))
                    {
                        left = -1;
                    }
                }
                if ((tile5 != null) && tile5.active())
                {
                    if (Game1.tileStone[tile5.type])
                    {
                        right = 1;
                    }
                    else
                    {
                        right = tile5.type;
                    }
                    if ((tile5.slope() == 2) || (tile5.slope() == 4))
                    {
                        right = -1;
                    }
                }
                if ((tile2 != null) && tile2.active())
                {
                    if (Game1.tileStone[tile2.type])
                    {
                        up = 1;
                    }
                    else
                    {
                        up = tile2.type;
                    }
                    if ((tile2.slope() == 3) || (tile2.slope() == 4))
                    {
                        up = -1;
                    }
                }
                if ((tile3 != null) && tile3.active())
                {
                    if (Game1.tileStone[tile3.type])
                    {
                        down = 1;
                    }
                    else
                    {
                        down = tile3.type;
                    }
                    if ((tile3.slope() == 1) || (tile3.slope() == 2))
                    {
                        down = -1;
                    }
                }
                if ((tile8 != null) && tile8.active())
                {
                    if (Game1.tileStone[tile8.type])
                    {
                        upLeft = 1;
                    }
                    else
                    {
                        upLeft = tile8.type;
                    }
                }
                if ((tile9 != null) && tile9.active())
                {
                    if (Game1.tileStone[tile9.type])
                    {
                        upRight = 1;
                    }
                    else
                    {
                        upRight = tile9.type;
                    }
                }
                if ((tile6 != null) && tile6.active())
                {
                    if (Game1.tileStone[tile6.type])
                    {
                        downLeft = 1;
                    }
                    else
                    {
                        downLeft = tile6.type;
                    }
                }
                if ((tile7 != null) && tile7.active())
                {
                    if (Game1.tileStone[tile7.type])
                    {
                        downRight = 1;
                    }
                    else
                    {
                        downRight = tile7.type;
                    }
                }
                if (centerTile.slope() == 2)
                {
                    up = -1;
                    left = -1;
                }
                if (centerTile.slope() == 1)
                {
                    up = -1;
                    right = -1;
                }
                if (centerTile.slope() == 4)
                {
                    down = -1;
                    left = -1;
                }
                if (centerTile.slope() == 3)
                {
                    down = -1;
                    right = -1;
                }
                switch (type)
                {
                    case 0x93:
                        TileMergeAttempt(type, Game1.tileBrick, TileID.Sets.Ices, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                        break;

                    case 0xa1:
                    case 0xa3:
                    case 0xa4:
                    case 200:
                        TileMergeAttempt(type, Game1.tileBrick, TileID.Sets.Snow, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                        break;

                    case 0xa2:
                        TileMergeAttempt(type, Game1.tileBrick, TileID.Sets.IcesSnow, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                        break;

                    default:
                        if (Game1.tileBrick[type])
                        {
                            if ((type == 60) || (type == 70))
                            {
                                TileMergeAttempt(type, Game1.tileBrick, TileID.Sets.Mud, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                            }
                            else
                            {
                                TileMergeAttempt(type, Game1.tileBrick, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                            }
                        }
                        else if (Game1.tilePile[type])
                        {
                            TileMergeAttempt(type, Game1.tilePile, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                        }
                        break;
                }
                if ((((type == 1) || Game1.tileMoss[type]) || (((type == 0x75) || (type == 0x19)) || (type == 0xcb))) && (down == 0xa5))
                {
                    if (tile3.frameY == 0x48)
                    {
                        down = type;
                    }
                    else if (tile3.frameY == 0)
                    {
                        down = type;
                    }
                }
                if ((((type == 1) || Game1.tileMoss[type]) || (((type == 0x75) || (type == 0x19)) || (type == 0xcb))) && (up == 0xa5))
                {
                    if (tile2.frameY == 90)
                    {
                        up = type;
                    }
                    else if (tile2.frameY == 0x36)
                    {
                        up = type;
                    }
                }
                if (type == 0xe1)
                {
                    if (down == 0xa5)
                    {
                        down = type;
                    }
                    if (up == 0xa5)
                    {
                        up = type;
                    }
                }
                if ((((type == 200) || (type == 0xa1)) || ((type == 0xa3) || (type == 0xa4))) && (down == 0xa5))
                {
                    down = type;
                }
                if (((centerTile.slope() == 1) || (centerTile.slope() == 2)) && ((down > -1) && (down != 0x13)))
                {
                    down = type;
                }
                if (((up > -1) && ((tile2.slope() == 1) || (tile2.slope() == 2))) && (up != 0x13))
                {
                    up = type;
                }
                if (((centerTile.slope() == 3) || (centerTile.slope() == 4)) && ((up > -1) && (up != 0x13)))
                {
                    up = type;
                }
                if (((down > -1) && ((tile3.slope() == 3) || (tile3.slope() == 4))) && (down != 0x13))
                {
                    down = type;
                }
                if (type == 0x7c)
                {
                    if ((up > -1) && Game1.tileSolid[up])
                    {
                        up = type;
                    }
                    if ((down > -1) && Game1.tileSolid[down])
                    {
                        down = type;
                    }
                }
                if (((up > -1) && tile2.halfBrick()) && (up != 0x13))
                {
                    up = type;
                }
                if ((left > -1) && tile4.halfBrick())
                {
                    if (centerTile.halfBrick())
                    {
                        left = type;
                    }
                    else if (tile4.type != type)
                    {
                        left = -1;
                    }
                }
                if ((right > -1) && tile5.halfBrick())
                {
                    if (centerTile.halfBrick())
                    {
                        right = type;
                    }
                    else if (tile5.type != type)
                    {
                        right = -1;
                    }
                }
                if (centerTile.halfBrick())
                {
                    if (left != type)
                    {
                        left = -1;
                    }
                    if (right != type)
                    {
                        right = -1;
                    }
                    up = -1;
                }
                if ((tile3 != null) && tile3.halfBrick())
                {
                    down = -1;
                }
                if (!Game1.tileSolid[type])
                {
                    if (type == 0x31)
                    {
                        CheckOnTable1x1(i, j, (byte)type);
                        return;
                    }
                    if (type == 80)
                    {
                        CactusFrame(i, j);
                        return;
                    }
                }
                WorldGen.mergeUp = false;
                WorldGen.mergeDown = false;
                WorldGen.mergeLeft = false;
                WorldGen.mergeRight = false;
                int num61 = 0;
                if (resetFrame)
                {
                    num61 = genRand.Next(0, 3);
                    centerTile.frameNumber((byte)num61);
                }
                else
                {
                    num61 = centerTile.frameNumber();
                }
                if (Game1.tileLargeFrames[type] == 1)
                {
                    int num62 = j % 4;
                    int num63 = i % 3;
                    int[,] numArray = new int[,] { { 2, 4, 2 }, { 1, 3, 1 }, { 2, 2, 4 }, { 1, 1, 3 } };
                    num61 = numArray[num62, num63] - 1;
                }
                TileMergeAttempt(type, Game1.tileBlendAll, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                if (Game1.tileBlendAll[type])
                {
                    TileMergeAttempt(type, Game1.tileSolid, Game1.tileSolidTop, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                }
                switch (type)
                {
                    case 0x35:
                        TileMergeAttemptFrametest(i, j, type, 0x18d, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                        TileMergeAttemptFrametest(i, j, type, 0x18c, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                        break;

                    case 0xea:
                        TileMergeAttemptFrametest(i, j, type, 0x18f, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                        TileMergeAttemptFrametest(i, j, type, 0x191, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                        break;

                    case 0x70:
                        TileMergeAttemptFrametest(i, j, type, 0x18e, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                        TileMergeAttemptFrametest(i, j, type, 400, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                        break;

                    case 0x74:
                        TileMergeAttemptFrametest(i, j, type, 0x192, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                        TileMergeAttemptFrametest(i, j, type, 0x193, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                        break;

                    case 0xd5:
                        if (((up > -1) && Game1.tileSolid[up]) && !Game1.tileSolidTop[up])
                        {
                            up = type;
                        }
                        if ((down > -1) && Game1.tileSolid[down])
                        {
                            down = type;
                        }
                        if (up != type)
                        {
                            if ((left > -1) && Game1.tileSolid[left])
                            {
                                left = type;
                            }
                            if ((right > -1) && Game1.tileSolid[right])
                            {
                                right = type;
                            }
                        }
                        break;

                    case 0:
                        if ((up > -1) && Game1.tileMergeDirt[up])
                        {
                            TileFrame(i, j - 1, false, false);
                            if (WorldGen.mergeDown)
                            {
                                up = type;
                            }
                        }
                        else if (up == 0x93)
                        {
                            TileFrame(i, j - 1, false, false);
                            if (WorldGen.mergeDown)
                            {
                                up = type;
                            }
                        }
                        if ((down > -1) && Game1.tileMergeDirt[down])
                        {
                            TileFrame(i, j + 1, false, false);
                            if (WorldGen.mergeUp)
                            {
                                down = type;
                            }
                        }
                        else if (down == 0x93)
                        {
                            TileFrame(i, j + 1, false, false);
                            if (WorldGen.mergeUp)
                            {
                                down = type;
                            }
                        }
                        if ((left > -1) && Game1.tileMergeDirt[left])
                        {
                            TileFrame(i - 1, j, false, false);
                            if (WorldGen.mergeRight)
                            {
                                left = type;
                            }
                        }
                        else if (left == 0x93)
                        {
                            TileFrame(i - 1, j, false, false);
                            if (WorldGen.mergeRight)
                            {
                                left = type;
                            }
                        }
                        if ((right > -1) && Game1.tileMergeDirt[right])
                        {
                            TileFrame(i + 1, j, false, false);
                            if (WorldGen.mergeLeft)
                            {
                                right = type;
                            }
                        }
                        else if (right == 0x93)
                        {
                            TileFrame(i + 1, j, false, false);
                            if (WorldGen.mergeLeft)
                            {
                                right = type;
                            }
                        }
                        switch (up)
                        {
                            case 2:
                            case 0x17:
                            case 0x6d:
                            case 0xc7:
                                up = type;
                                break;
                        }
                        if (((down == 2) || (down == 0x17)) || ((down == 0x6d) || (down == 0xc7)))
                        {
                            down = type;
                        }
                        if (((left == 2) || (left == 0x17)) || ((left == 0x6d) || (left == 0xc7)))
                        {
                            left = type;
                        }
                        if (((right == 2) || (right == 0x17)) || ((right == 0x6d) || (right == 0xc7)))
                        {
                            right = type;
                        }
                        if ((upLeft > -1) && Game1.tileMergeDirt[upLeft])
                        {
                            upLeft = type;
                        }
                        else if (((upLeft == 2) || (upLeft == 0x17)) || ((upLeft == 0x6d) || (upLeft == 0xc7)))
                        {
                            upLeft = type;
                        }
                        if ((upRight > -1) && Game1.tileMergeDirt[upRight])
                        {
                            upRight = type;
                        }
                        else if (((upRight == 2) || (upRight == 0x17)) || ((upRight == 0x6d) || (upRight == 0xc7)))
                        {
                            upRight = type;
                        }
                        if ((downLeft > -1) && Game1.tileMergeDirt[downLeft])
                        {
                            downLeft = type;
                        }
                        else if (((downLeft == 2) || (downLeft == 0x17)) || ((downLeft == 0x6d) || (downLeft == 0xc7)))
                        {
                            downLeft = type;
                        }
                        if ((downRight > -1) && Game1.tileMergeDirt[downRight])
                        {
                            downRight = type;
                        }
                        else if (((downRight == 2) || (downRight == 0x17)) || ((downRight == 0x6d) || (downRight == 0xc7)))
                        {
                            downRight = type;
                        }
                        TileMergeAttempt(-2, 0x3b, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                        TileMergeAttempt(type, 0xbf, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                        break;
                }
                if (Game1.tileMergeDirt[type])
                {
                    TileMergeAttempt(-2, 0, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    if (type == 1)
                    {
                        if (j > Game1.rockLayer)
                        {
                            TileMergeAttemptFrametest(i, j, type, 0x3b, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                        }
                        TileMergeAttemptFrametest(i, j, type, 0x39, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                }
                else if (((type == 0x3a) || (type == 0x4c)) || (type == 0x4b))
                {
                    TileMergeAttempt(-2, 0x39, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                }
                else if (type == 0x39)
                {
                    TileMergeAttempt(-2, 1, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    TileMergeAttemptFrametest(i, j, type, TileID.Sets.HellSpecial, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                }
                else if (type == 0x3b)
                {
                    if (j > Game1.rockLayer)
                    {
                        TileMergeAttempt(-2, 1, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    TileMergeAttempt(type, TileID.Sets.GrassSpecial, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    TileMergeAttemptFrametest(i, j, type, TileID.Sets.JungleSpecial, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    if (j < Game1.rockLayer)
                    {
                        TileMergeAttemptFrametest(i, j, type, 0, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    else
                    {
                        TileMergeAttempt(type, 0, ref up, ref down, ref left, ref right);
                    }
                }
                else if (type == 0xd3)
                {
                    TileMergeAttempt(0x3b, 60, ref up, ref down, ref left, ref right);
                    TileMergeAttempt(-2, 0x3b, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                }
                else if ((type == 0xe1) || (type == 0xe2))
                {
                    TileMergeAttempt(-2, 0x3b, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                }
                else
                {
                    switch (type)
                    {
                        case 60:
                            TileMergeAttempt(0x3b, 0xd3, ref up, ref down, ref left, ref right);
                            goto Label_3142;

                        case 0xbd:
                            TileMergeAttemptFrametest(i, j, type, 0xc4, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                            goto Label_3142;

                        case 0xc4:
                            TileMergeAttempt(-2, 0xbd, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                            goto Label_3142;

                        case 0x93:
                            TileMergeAttemptFrametest(i, j, type, TileID.Sets.IcesSlush, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                            goto Label_3142;
                    }
                    if (((type == 0xa1) || (type == 0xa3)) || (((type == 0xa4) || (type == 200)) || (type == 0xe0)))
                    {
                        TileMergeAttempt(-2, 0x93, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    else
                    {
                        switch (type)
                        {
                            case 0xa2:
                                TileMergeAttempt(-2, TileID.Sets.IcesSnow, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;

                            case 0x20:
                                if (down == 0x17)
                                {
                                    down = type;
                                }
                                break;

                            case 0x160:
                                if (down == 0xc7)
                                {
                                    down = type;
                                }
                                break;

                            case 0x45:
                                if (down == 60)
                                {
                                    down = type;
                                }
                                break;

                            case 0x33:
                                TileMergeAttempt(type, TileID.Sets.AllTiles, Game1.tileNoAttach, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;

                            case 0xc0:
                                TileMergeAttemptFrametest(i, j, type, 0xbf, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;

                            case 0xbf:
                                TileMergeAttempt(-2, 0xc0, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                TileMergeAttempt(type, 0, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;

                            case 0x180:
                                TileMergeAttemptFrametest(i, j, type, 0x17f, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;

                            case 0x17f:
                                TileMergeAttempt(-2, 0x180, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                TileMergeAttempt(type, 0x3b, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;

                            case 0x197:
                                TileMergeAttempt(-2, 0x194, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;

                            case 0x194:
                                TileMergeAttempt(-2, 0x18c, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                TileMergeAttemptFrametest(i, j, type, 0x197, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;

                            case 0x18d:
                                TileMergeAttempt(-2, 0x35, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                TileMergeAttemptFrametest(i, j, type, 0x18c, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;

                            case 0x18c:
                                TileMergeAttempt(-2, 0x18d, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                TileMergeAttempt(-2, 0x35, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                TileMergeAttemptFrametest(i, j, type, 0x194, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;

                            case 0x18e:
                                TileMergeAttempt(-2, 0x70, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                TileMergeAttemptFrametest(i, j, type, 400, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;

                            case 400:
                                TileMergeAttempt(-2, 0x18e, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                TileMergeAttempt(-2, 0x70, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;

                            case 0x18f:
                                TileMergeAttempt(-2, 0xea, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                TileMergeAttemptFrametest(i, j, type, 0x191, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;

                            case 0x191:
                                TileMergeAttempt(-2, 0x18f, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                TileMergeAttempt(-2, 0xea, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;

                            case 0x192:
                                TileMergeAttempt(-2, 0x74, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                TileMergeAttemptFrametest(i, j, type, 0x193, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;

                            case 0x193:
                                TileMergeAttempt(-2, 0x192, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                TileMergeAttempt(-2, 0x74, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                                break;
                        }
                    }
                }
            Label_3142:
                if (Game1.tileStone[type] || (type == 1))
                {
                    TileMergeAttempt(type, Game1.tileMoss, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                }
                bool flag4 = false;
                if ((up == -2) && (centerTile.color() != tile2.color()))
                {
                    up = type;
                    WorldGen.mergeUp = true;
                }
                if ((down == -2) && (centerTile.color() != tile3.color()))
                {
                    down = type;
                    WorldGen.mergeDown = true;
                }
                if ((left == -2) && (centerTile.color() != tile4.color()))
                {
                    left = type;
                    WorldGen.mergeLeft = true;
                }
                if ((right == -2) && (centerTile.color() != tile5.color()))
                {
                    right = type;
                    WorldGen.mergeRight = true;
                }
                if ((((type != 2) && (type != 0x17)) && ((type != 60) && (type != 70))) && (((type != 0x6d) && (type != 0xc7)) && !Game1.tileMoss[type]))
                {
                    goto Label_50A3;
                }
                flag4 = true;
                TileMergeAttemptWeird(type, -1, Game1.tileSolid, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                int myType = 0;
                if ((type == 60) || (type == 70))
                {
                    myType = 0x3b;
                }
                else if (Game1.tileMoss[type])
                {
                    myType = 1;
                }
                else
                {
                    switch (type)
                    {
                        case 2:
                            TileMergeAttempt(myType, 0x17, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                            break;

                        case 0x17:
                            TileMergeAttempt(myType, 2, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                            break;
                    }
                }
                if (((up != type) && (up != myType)) && ((down == type) || (down == myType)))
                {
                    if ((left == myType) && (right == type))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0;
                                rectangle.Y = 0xc6;
                                goto Label_40B4;

                            case 1:
                                rectangle.X = 0x12;
                                rectangle.Y = 0xc6;
                                goto Label_40B4;
                        }
                        rectangle.X = 0x24;
                        rectangle.Y = 0xc6;
                    }
                    else if ((left == type) && (right == myType))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x36;
                                rectangle.Y = 0xc6;
                                goto Label_40B4;

                            case 1:
                                rectangle.X = 0x48;
                                rectangle.Y = 0xc6;
                                goto Label_40B4;
                        }
                        rectangle.X = 90;
                        rectangle.Y = 0xc6;
                    }
                }
                else if (((down != type) && (down != myType)) && ((up == type) || (up == myType)))
                {
                    if ((left == myType) && (right == type))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0;
                                rectangle.Y = 0xd8;
                                goto Label_40B4;

                            case 1:
                                rectangle.X = 0x12;
                                rectangle.Y = 0xd8;
                                goto Label_40B4;
                        }
                        rectangle.X = 0x24;
                        rectangle.Y = 0xd8;
                    }
                    else if ((left == type) && (right == myType))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x36;
                                rectangle.Y = 0xd8;
                                goto Label_40B4;

                            case 1:
                                rectangle.X = 0x48;
                                rectangle.Y = 0xd8;
                                goto Label_40B4;
                        }
                        rectangle.X = 90;
                        rectangle.Y = 0xd8;
                    }
                }
                else if (((left != type) && (left != myType)) && ((right == type) || (right == myType)))
                {
                    if ((up == myType) && (down == type))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x48;
                                rectangle.Y = 0x90;
                                goto Label_40B4;

                            case 1:
                                rectangle.X = 0x48;
                                rectangle.Y = 0xa2;
                                goto Label_40B4;
                        }
                        rectangle.X = 0x48;
                        rectangle.Y = 180;
                    }
                    else if ((down == type) && (up == myType))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x48;
                                rectangle.Y = 90;
                                goto Label_40B4;

                            case 1:
                                rectangle.X = 0x48;
                                rectangle.Y = 0x6c;
                                goto Label_40B4;
                        }
                        rectangle.X = 0x48;
                        rectangle.Y = 0x7e;
                    }
                }
                else if (((right != type) && (right != myType)) && ((left == type) || (left == myType)))
                {
                    if ((up == myType) && (down == type))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 90;
                                rectangle.Y = 0x90;
                                goto Label_40B4;

                            case 1:
                                rectangle.X = 90;
                                rectangle.Y = 0xa2;
                                goto Label_40B4;
                        }
                        rectangle.X = 90;
                        rectangle.Y = 180;
                    }
                    else if ((down == type) && (right == up))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 90;
                                rectangle.Y = 90;
                                goto Label_40B4;

                            case 1:
                                rectangle.X = 90;
                                rectangle.Y = 0x6c;
                                goto Label_40B4;
                        }
                        rectangle.X = 90;
                        rectangle.Y = 0x7e;
                    }
                }
                else if (((up == type) && (down == type)) && ((left == type) && (right == type)))
                {
                    if (((upLeft != type) && (upRight != type)) && ((downLeft != type) && (downRight != type)))
                    {
                        if (downRight == myType)
                        {
                            switch (num61)
                            {
                                case 0:
                                    rectangle.X = 0x6c;
                                    rectangle.Y = 0x144;
                                    goto Label_40B4;

                                case 1:
                                    rectangle.X = 0x7e;
                                    rectangle.Y = 0x144;
                                    goto Label_40B4;
                            }
                            rectangle.X = 0x90;
                            rectangle.Y = 0x144;
                        }
                        else if (upRight == myType)
                        {
                            switch (num61)
                            {
                                case 0:
                                    rectangle.X = 0x6c;
                                    rectangle.Y = 0x156;
                                    goto Label_40B4;

                                case 1:
                                    rectangle.X = 0x7e;
                                    rectangle.Y = 0x156;
                                    goto Label_40B4;
                            }
                            rectangle.X = 0x90;
                            rectangle.Y = 0x156;
                        }
                        else if (downLeft == myType)
                        {
                            switch (num61)
                            {
                                case 0:
                                    rectangle.X = 0x6c;
                                    rectangle.Y = 360;
                                    goto Label_40B4;

                                case 1:
                                    rectangle.X = 0x7e;
                                    rectangle.Y = 360;
                                    goto Label_40B4;
                            }
                            rectangle.X = 0x90;
                            rectangle.Y = 360;
                        }
                        else if (upLeft == myType)
                        {
                            switch (num61)
                            {
                                case 0:
                                    rectangle.X = 0x6c;
                                    rectangle.Y = 0x17a;
                                    goto Label_40B4;

                                case 1:
                                    rectangle.X = 0x7e;
                                    rectangle.Y = 0x17a;
                                    goto Label_40B4;
                            }
                            rectangle.X = 0x90;
                            rectangle.Y = 0x17a;
                        }
                        else
                        {
                            switch (num61)
                            {
                                case 0:
                                    rectangle.X = 0x90;
                                    rectangle.Y = 0xea;
                                    goto Label_40B4;

                                case 1:
                                    rectangle.X = 0xc6;
                                    rectangle.Y = 0xea;
                                    goto Label_40B4;
                            }
                            rectangle.X = 0xfc;
                            rectangle.Y = 0xea;
                        }
                    }
                    else if ((upLeft != type) && (downRight != type))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x24;
                                rectangle.Y = 0x132;
                                goto Label_40B4;

                            case 1:
                                rectangle.X = 0x36;
                                rectangle.Y = 0x132;
                                goto Label_40B4;
                        }
                        rectangle.X = 0x48;
                        rectangle.Y = 0x132;
                    }
                    else if ((upRight != type) && (downLeft != type))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 90;
                                rectangle.Y = 0x132;
                                goto Label_40B4;

                            case 1:
                                rectangle.X = 0x6c;
                                rectangle.Y = 0x132;
                                goto Label_40B4;
                        }
                        rectangle.X = 0x7e;
                        rectangle.Y = 0x132;
                    }
                    else if (((upLeft != type) && (upRight == type)) && ((downLeft == type) && (downRight == type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x36;
                                rectangle.Y = 0x6c;
                                goto Label_40B4;

                            case 1:
                                rectangle.X = 0x36;
                                rectangle.Y = 0x90;
                                goto Label_40B4;
                        }
                        rectangle.X = 0x36;
                        rectangle.Y = 180;
                    }
                    else if (((upLeft == type) && (upRight != type)) && ((downLeft == type) && (downRight == type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x24;
                                rectangle.Y = 0x6c;
                                goto Label_40B4;

                            case 1:
                                rectangle.X = 0x24;
                                rectangle.Y = 0x90;
                                goto Label_40B4;
                        }
                        rectangle.X = 0x24;
                        rectangle.Y = 180;
                    }
                    else if (((upLeft == type) && (upRight == type)) && ((downLeft != type) && (downRight == type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x36;
                                rectangle.Y = 90;
                                goto Label_40B4;

                            case 1:
                                rectangle.X = 0x36;
                                rectangle.Y = 0x7e;
                                goto Label_40B4;
                        }
                        rectangle.X = 0x36;
                        rectangle.Y = 0xa2;
                    }
                    else if (((upLeft == type) && (upRight == type)) && ((downLeft == type) && (downRight != type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x24;
                                rectangle.Y = 90;
                                goto Label_40B4;

                            case 1:
                                rectangle.X = 0x24;
                                rectangle.Y = 0x7e;
                                goto Label_40B4;
                        }
                        rectangle.X = 0x24;
                        rectangle.Y = 0xa2;
                    }
                }
                else if ((((up == type) && (down == myType)) && ((left == type) && (right == type))) && ((upLeft == -1) && (upRight == -1)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x6c;
                            rectangle.Y = 0x12;
                            goto Label_40B4;

                        case 1:
                            rectangle.X = 0x7e;
                            rectangle.Y = 0x12;
                            goto Label_40B4;
                    }
                    rectangle.X = 0x90;
                    rectangle.Y = 0x12;
                }
                else if ((((up == myType) && (down == type)) && ((left == type) && (right == type))) && ((downLeft == -1) && (downRight == -1)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x6c;
                            rectangle.Y = 0x24;
                            goto Label_40B4;

                        case 1:
                            rectangle.X = 0x7e;
                            rectangle.Y = 0x24;
                            goto Label_40B4;
                    }
                    rectangle.X = 0x90;
                    rectangle.Y = 0x24;
                }
                else if ((((up == type) && (down == type)) && ((left == myType) && (right == type))) && ((upRight == -1) && (downRight == -1)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0xc6;
                            rectangle.Y = 0;
                            goto Label_40B4;

                        case 1:
                            rectangle.X = 0xc6;
                            rectangle.Y = 0x12;
                            goto Label_40B4;
                    }
                    rectangle.X = 0xc6;
                    rectangle.Y = 0x24;
                }
                else if ((((up == type) && (down == type)) && ((left == type) && (right == myType))) && ((upLeft == -1) && (downLeft == -1)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 180;
                            rectangle.Y = 0;
                            goto Label_40B4;

                        case 1:
                            rectangle.X = 180;
                            rectangle.Y = 0x12;
                            goto Label_40B4;
                    }
                    rectangle.X = 180;
                    rectangle.Y = 0x24;
                }
                else if (((up == type) && (down == myType)) && ((left == type) && (right == type)))
                {
                    if (upRight != -1)
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x36;
                                rectangle.Y = 0x6c;
                                goto Label_40B4;

                            case 1:
                                rectangle.X = 0x36;
                                rectangle.Y = 0x90;
                                goto Label_40B4;
                        }
                        rectangle.X = 0x36;
                        rectangle.Y = 180;
                    }
                    else if (upLeft != -1)
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x24;
                                rectangle.Y = 0x6c;
                                goto Label_40B4;

                            case 1:
                                rectangle.X = 0x24;
                                rectangle.Y = 0x90;
                                goto Label_40B4;
                        }
                        rectangle.X = 0x24;
                        rectangle.Y = 180;
                    }
                }
                else if (((up == myType) && (down == type)) && ((left == type) && (right == type)))
                {
                    if (downRight != -1)
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x36;
                                rectangle.Y = 90;
                                goto Label_40B4;

                            case 1:
                                rectangle.X = 0x36;
                                rectangle.Y = 0x7e;
                                goto Label_40B4;
                        }
                        rectangle.X = 0x36;
                        rectangle.Y = 0xa2;
                    }
                    else if (downLeft != -1)
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x24;
                                rectangle.Y = 90;
                                goto Label_40B4;

                            case 1:
                                rectangle.X = 0x24;
                                rectangle.Y = 0x7e;
                                goto Label_40B4;
                        }
                        rectangle.X = 0x24;
                        rectangle.Y = 0xa2;
                    }
                }
                else if (((up == type) && (down == type)) && ((left == type) && (right == myType)))
                {
                    if (upLeft != -1)
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x36;
                                rectangle.Y = 90;
                                goto Label_40B4;

                            case 1:
                                rectangle.X = 0x36;
                                rectangle.Y = 0x7e;
                                goto Label_40B4;
                        }
                        rectangle.X = 0x36;
                        rectangle.Y = 0xa2;
                    }
                    else if (downLeft != -1)
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x36;
                                rectangle.Y = 0x6c;
                                goto Label_40B4;

                            case 1:
                                rectangle.X = 0x36;
                                rectangle.Y = 0x90;
                                goto Label_40B4;
                        }
                        rectangle.X = 0x36;
                        rectangle.Y = 180;
                    }
                }
                else if (((up == type) && (down == type)) && ((left == myType) && (right == type)))
                {
                    if (upRight != -1)
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x24;
                                rectangle.Y = 90;
                                goto Label_40B4;

                            case 1:
                                rectangle.X = 0x24;
                                rectangle.Y = 0x7e;
                                goto Label_40B4;
                        }
                        rectangle.X = 0x24;
                        rectangle.Y = 0xa2;
                    }
                    else if (downRight != -1)
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x24;
                                rectangle.Y = 0x6c;
                                goto Label_40B4;

                            case 1:
                                rectangle.X = 0x24;
                                rectangle.Y = 0x90;
                                goto Label_40B4;
                        }
                        rectangle.X = 0x24;
                        rectangle.Y = 180;
                    }
                }
                else if (((((up == myType) && (down == type)) && ((left == type) && (right == type))) || (((up == type) && (down == myType)) && ((left == type) && (right == type)))) || ((((up == type) && (down == type)) && ((left == myType) && (right == type))) || (((up == type) && (down == type)) && ((left == type) && (right == myType)))))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x12;
                            rectangle.Y = 0x12;
                            goto Label_40B4;

                        case 1:
                            rectangle.X = 0x24;
                            rectangle.Y = 0x12;
                            goto Label_40B4;
                    }
                    rectangle.X = 0x36;
                    rectangle.Y = 0x12;
                }
            Label_40B4:
                if ((((up == type) || (up == myType)) && ((down == type) || (down == myType))) && (((left == type) || (left == myType)) && ((right == type) || (right == myType))))
                {
                    if (((((upLeft != type) && (upLeft != myType)) && ((upRight == type) || (upRight == myType))) && ((downLeft == type) || (downLeft == myType))) && ((downRight == type) || (downRight == myType)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x36;
                                rectangle.Y = 0x6c;
                                goto Label_42EC;

                            case 1:
                                rectangle.X = 0x36;
                                rectangle.Y = 0x90;
                                goto Label_42EC;
                        }
                        rectangle.X = 0x36;
                        rectangle.Y = 180;
                    }
                    else if (((((upRight != type) && (upRight != myType)) && ((upLeft == type) || (upLeft == myType))) && ((downLeft == type) || (downLeft == myType))) && ((downRight == type) || (downRight == myType)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x24;
                                rectangle.Y = 0x6c;
                                goto Label_42EC;

                            case 1:
                                rectangle.X = 0x24;
                                rectangle.Y = 0x90;
                                goto Label_42EC;
                        }
                        rectangle.X = 0x24;
                        rectangle.Y = 180;
                    }
                    else if (((((downLeft != type) && (downLeft != myType)) && ((upLeft == type) || (upLeft == myType))) && ((upRight == type) || (upRight == myType))) && ((downRight == type) || (downRight == myType)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x36;
                                rectangle.Y = 90;
                                goto Label_42EC;

                            case 1:
                                rectangle.X = 0x36;
                                rectangle.Y = 0x7e;
                                goto Label_42EC;
                        }
                        rectangle.X = 0x36;
                        rectangle.Y = 0xa2;
                    }
                    else if (((((downRight != type) && (downRight != myType)) && ((upLeft == type) || (upLeft == myType))) && ((downLeft == type) || (downLeft == myType))) && ((upRight == type) || (upRight == myType)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x24;
                                rectangle.Y = 90;
                                goto Label_42EC;

                            case 1:
                                rectangle.X = 0x24;
                                rectangle.Y = 0x7e;
                                goto Label_42EC;
                        }
                        rectangle.X = 0x24;
                        rectangle.Y = 0xa2;
                    }
                }
            Label_42EC:
                if ((((up != myType) && (up != type)) && ((down == type) && (left != myType))) && (((left != type) && (right == type)) && ((downRight != myType) && (downRight != type))))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 90;
                            rectangle.Y = 270;
                            goto Label_4B60;

                        case 1:
                            rectangle.X = 0x6c;
                            rectangle.Y = 270;
                            goto Label_4B60;
                    }
                    rectangle.X = 0x7e;
                    rectangle.Y = 270;
                }
                else if ((((up != myType) && (up != type)) && ((down == type) && (left == type))) && (((right != myType) && (right != type)) && ((downLeft != myType) && (downLeft != type))))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x90;
                            rectangle.Y = 270;
                            goto Label_4B60;

                        case 1:
                            rectangle.X = 0xa2;
                            rectangle.Y = 270;
                            goto Label_4B60;
                    }
                    rectangle.X = 180;
                    rectangle.Y = 270;
                }
                else if ((((down != myType) && (down != type)) && ((up == type) && (left != myType))) && (((left != type) && (right == type)) && ((upRight != myType) && (upRight != type))))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 90;
                            rectangle.Y = 0x120;
                            goto Label_4B60;

                        case 1:
                            rectangle.X = 0x6c;
                            rectangle.Y = 0x120;
                            goto Label_4B60;
                    }
                    rectangle.X = 0x7e;
                    rectangle.Y = 0x120;
                }
                else if ((((down != myType) && (down != type)) && ((up == type) && (left == type))) && (((right != myType) && (right != type)) && ((upLeft != myType) && (upLeft != type))))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x90;
                            rectangle.Y = 0x120;
                            goto Label_4B60;

                        case 1:
                            rectangle.X = 0xa2;
                            rectangle.Y = 0x120;
                            goto Label_4B60;
                    }
                    rectangle.X = 180;
                    rectangle.Y = 0x120;
                }
                else if (((((up != type) && (up != myType)) && ((down == type) && (left == type))) && (((right == type) && (downLeft != type)) && ((downLeft != myType) && (downRight != type)))) && (downRight != myType))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x90;
                            rectangle.Y = 0xd8;
                            goto Label_4B60;

                        case 1:
                            rectangle.X = 0xc6;
                            rectangle.Y = 0xd8;
                            goto Label_4B60;
                    }
                    rectangle.X = 0xfc;
                    rectangle.Y = 0xd8;
                }
                else if (((((down != type) && (down != myType)) && ((up == type) && (left == type))) && (((right == type) && (upLeft != type)) && ((upLeft != myType) && (upRight != type)))) && (upRight != myType))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x90;
                            rectangle.Y = 0xfc;
                            goto Label_4B60;

                        case 1:
                            rectangle.X = 0xc6;
                            rectangle.Y = 0xfc;
                            goto Label_4B60;
                    }
                    rectangle.X = 0xfc;
                    rectangle.Y = 0xfc;
                }
                else if (((((left != type) && (left != myType)) && ((down == type) && (up == type))) && (((right == type) && (upRight != type)) && ((upRight != myType) && (downRight != type)))) && (downRight != myType))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x7e;
                            rectangle.Y = 0xea;
                            goto Label_4B60;

                        case 1:
                            rectangle.X = 180;
                            rectangle.Y = 0xea;
                            goto Label_4B60;
                    }
                    rectangle.X = 0xea;
                    rectangle.Y = 0xea;
                }
                else if (((((right != type) && (right != myType)) && ((down == type) && (up == type))) && (((left == type) && (upLeft != type)) && ((upLeft != myType) && (downLeft != type)))) && (downLeft != myType))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0xa2;
                            rectangle.Y = 0xea;
                            goto Label_4B60;

                        case 1:
                            rectangle.X = 0xd8;
                            rectangle.Y = 0xea;
                            goto Label_4B60;
                    }
                    rectangle.X = 270;
                    rectangle.Y = 0xea;
                }
                else if ((((up != myType) && (up != type)) && ((down == myType) || (down == type))) && ((left == myType) && (right == myType)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x24;
                            rectangle.Y = 270;
                            goto Label_4B60;

                        case 1:
                            rectangle.X = 0x36;
                            rectangle.Y = 270;
                            goto Label_4B60;
                    }
                    rectangle.X = 0x48;
                    rectangle.Y = 270;
                }
                else if ((((down != myType) && (down != type)) && ((up == myType) || (up == type))) && ((left == myType) && (right == myType)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x24;
                            rectangle.Y = 0x120;
                            goto Label_4B60;

                        case 1:
                            rectangle.X = 0x36;
                            rectangle.Y = 0x120;
                            goto Label_4B60;
                    }
                    rectangle.X = 0x48;
                    rectangle.Y = 0x120;
                }
                else if ((((left != myType) && (left != type)) && ((right == myType) || (right == type))) && ((up == myType) && (down == myType)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0;
                            rectangle.Y = 270;
                            goto Label_4B60;

                        case 1:
                            rectangle.X = 0;
                            rectangle.Y = 0x120;
                            goto Label_4B60;
                    }
                    rectangle.X = 0;
                    rectangle.Y = 0x132;
                }
                else if ((((right != myType) && (right != type)) && ((left == myType) || (left == type))) && ((up == myType) && (down == myType)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x12;
                            rectangle.Y = 270;
                            goto Label_4B60;

                        case 1:
                            rectangle.X = 0x12;
                            rectangle.Y = 0x120;
                            goto Label_4B60;
                    }
                    rectangle.X = 0x12;
                    rectangle.Y = 0x132;
                }
                else if (((up == type) && (down == myType)) && ((left == myType) && (right == myType)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0xc6;
                            rectangle.Y = 0x120;
                            goto Label_4B60;

                        case 1:
                            rectangle.X = 0xd8;
                            rectangle.Y = 0x120;
                            goto Label_4B60;
                    }
                    rectangle.X = 0xea;
                    rectangle.Y = 0x120;
                }
                else if (((up == myType) && (down == type)) && ((left == myType) && (right == myType)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0xc6;
                            rectangle.Y = 270;
                            goto Label_4B60;

                        case 1:
                            rectangle.X = 0xd8;
                            rectangle.Y = 270;
                            goto Label_4B60;
                    }
                    rectangle.X = 0xea;
                    rectangle.Y = 270;
                }
                else if (((up == myType) && (down == myType)) && ((left == type) && (right == myType)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0xc6;
                            rectangle.Y = 0x132;
                            goto Label_4B60;

                        case 1:
                            rectangle.X = 0xd8;
                            rectangle.Y = 0x132;
                            goto Label_4B60;
                    }
                    rectangle.X = 0xea;
                    rectangle.Y = 0x132;
                }
                else if (((up == myType) && (down == myType)) && ((left == myType) && (right == type)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x90;
                            rectangle.Y = 0x132;
                            goto Label_4B60;

                        case 1:
                            rectangle.X = 0xa2;
                            rectangle.Y = 0x132;
                            goto Label_4B60;
                    }
                    rectangle.X = 180;
                    rectangle.Y = 0x132;
                }
            Label_4B60:
                if ((((up != type) && (up != myType)) && ((down == type) && (left == type))) && (right == type))
                {
                    if (((downLeft == myType) || (downLeft == type)) && ((downRight != myType) && (downRight != type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0;
                                rectangle.Y = 0x144;
                                goto Label_4F92;

                            case 1:
                                rectangle.X = 0x12;
                                rectangle.Y = 0x144;
                                goto Label_4F92;
                        }
                        rectangle.X = 0x24;
                        rectangle.Y = 0x144;
                    }
                    else if (((downRight == myType) || (downRight == type)) && ((downLeft != myType) && (downLeft != type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x36;
                                rectangle.Y = 0x144;
                                goto Label_4F92;

                            case 1:
                                rectangle.X = 0x48;
                                rectangle.Y = 0x144;
                                goto Label_4F92;
                        }
                        rectangle.X = 90;
                        rectangle.Y = 0x144;
                    }
                }
                else if ((((down != type) && (down != myType)) && ((up == type) && (left == type))) && (right == type))
                {
                    if (((upLeft == myType) || (upLeft == type)) && ((upRight != myType) && (upRight != type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0;
                                rectangle.Y = 0x156;
                                goto Label_4F92;

                            case 1:
                                rectangle.X = 0x12;
                                rectangle.Y = 0x156;
                                goto Label_4F92;
                        }
                        rectangle.X = 0x24;
                        rectangle.Y = 0x156;
                    }
                    else if (((upRight == myType) || (upRight == type)) && ((upLeft != myType) && (upLeft != type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x36;
                                rectangle.Y = 0x156;
                                goto Label_4F92;

                            case 1:
                                rectangle.X = 0x48;
                                rectangle.Y = 0x156;
                                goto Label_4F92;
                        }
                        rectangle.X = 90;
                        rectangle.Y = 0x156;
                    }
                }
                else if ((((left != type) && (left != myType)) && ((up == type) && (down == type))) && (right == type))
                {
                    if (((upRight == myType) || (upRight == type)) && ((downRight != myType) && (downRight != type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x36;
                                rectangle.Y = 360;
                                goto Label_4F92;

                            case 1:
                                rectangle.X = 0x48;
                                rectangle.Y = 360;
                                goto Label_4F92;
                        }
                        rectangle.X = 90;
                        rectangle.Y = 360;
                    }
                    else if (((downRight == myType) || (downRight == type)) && ((upRight != myType) && (upRight != type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0;
                                rectangle.Y = 360;
                                goto Label_4F92;

                            case 1:
                                rectangle.X = 0x12;
                                rectangle.Y = 360;
                                goto Label_4F92;
                        }
                        rectangle.X = 0x24;
                        rectangle.Y = 360;
                    }
                }
                else if ((((right != type) && (right != myType)) && ((up == type) && (down == type))) && (left == type))
                {
                    if (((upLeft == myType) || (upLeft == type)) && ((downLeft != myType) && (downLeft != type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0;
                                rectangle.Y = 0x17a;
                                goto Label_4F92;

                            case 1:
                                rectangle.X = 0x12;
                                rectangle.Y = 0x17a;
                                goto Label_4F92;
                        }
                        rectangle.X = 0x24;
                        rectangle.Y = 0x17a;
                    }
                    else if (((downLeft == myType) || (downLeft == type)) && ((upLeft != myType) && (upLeft != type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x36;
                                rectangle.Y = 0x17a;
                                goto Label_4F92;

                            case 1:
                                rectangle.X = 0x48;
                                rectangle.Y = 0x17a;
                                goto Label_4F92;
                        }
                        rectangle.X = 90;
                        rectangle.Y = 0x17a;
                    }
                }
            Label_4F92:
                if (((((up == type) || (up == myType)) && ((down == type) || (down == myType))) && (((left == type) || (left == myType)) && ((right == type) || (right == myType)))) && (((upLeft != -1) && (upRight != -1)) && ((downLeft != -1) && (downRight != -1))))
                {
                    if (((i + j) % 2) == 1)
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x6c;
                                rectangle.Y = 0xc6;
                                goto Label_508A;

                            case 1:
                                rectangle.X = 0x7e;
                                rectangle.Y = 0xc6;
                                goto Label_508A;
                        }
                        rectangle.X = 0x90;
                        rectangle.Y = 0xc6;
                    }
                    else
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x12;
                                rectangle.Y = 0x12;
                                goto Label_508A;

                            case 1:
                                rectangle.X = 0x24;
                                rectangle.Y = 0x12;
                                goto Label_508A;
                        }
                        rectangle.X = 0x36;
                        rectangle.Y = 0x12;
                    }
                }
            Label_508A:
                TileMergeAttempt(-2, myType, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
            Label_50A3:
                TileMergeAttempt(type, Game1.tileMerge[type], ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                if (((rectangle.X != -1) || (rectangle.Y != -1)) || (!Game1.tileMergeDirt[type] && ((type <= -1) || !TileID.Sets.ChecksForMerge[type])))
                {
                    goto Label_638C;
                }
                if (!flag4)
                {
                    flag4 = true;
                    TileMergeAttemptWeird(type, -1, Game1.tileSolid, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                }
                if ((up > -1) && (up != type))
                {
                    up = -1;
                }
                if ((down > -1) && (down != type))
                {
                    down = -1;
                }
                if ((left > -1) && (left != type))
                {
                    left = -1;
                }
                if ((right > -1) && (right != type))
                {
                    right = -1;
                }
                if (((up == -1) || (down == -1)) || ((left == -1) || (right == -1)))
                {
                    goto Label_59DE;
                }
                if (((up == -2) && (down == type)) && ((left == type) && (right == type)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x90;
                            rectangle.Y = 0x6c;
                            break;

                        case 1:
                            rectangle.X = 0xa2;
                            rectangle.Y = 0x6c;
                            break;

                        default:
                            rectangle.X = 180;
                            rectangle.Y = 0x6c;
                            break;
                    }
                    WorldGen.mergeUp = true;
                    goto Label_638C;
                }
                if (((up == type) && (down == -2)) && ((left == type) && (right == type)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x90;
                            rectangle.Y = 90;
                            break;

                        case 1:
                            rectangle.X = 0xa2;
                            rectangle.Y = 90;
                            break;

                        default:
                            rectangle.X = 180;
                            rectangle.Y = 90;
                            break;
                    }
                    WorldGen.mergeDown = true;
                    goto Label_638C;
                }
                if (((up == type) && (down == type)) && ((left == -2) && (right == type)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0xa2;
                            rectangle.Y = 0x7e;
                            break;

                        case 1:
                            rectangle.X = 0xa2;
                            rectangle.Y = 0x90;
                            break;

                        default:
                            rectangle.X = 0xa2;
                            rectangle.Y = 0xa2;
                            break;
                    }
                    WorldGen.mergeLeft = true;
                    goto Label_638C;
                }
                if (((up == type) && (down == type)) && ((left == type) && (right == -2)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x90;
                            rectangle.Y = 0x7e;
                            break;

                        case 1:
                            rectangle.X = 0x90;
                            rectangle.Y = 0x90;
                            break;

                        default:
                            rectangle.X = 0x90;
                            rectangle.Y = 0xa2;
                            break;
                    }
                    WorldGen.mergeRight = true;
                    goto Label_638C;
                }
                if (((up == -2) && (down == type)) && ((left == -2) && (right == type)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x24;
                            rectangle.Y = 90;
                            break;

                        case 1:
                            rectangle.X = 0x24;
                            rectangle.Y = 0x7e;
                            break;

                        default:
                            rectangle.X = 0x24;
                            rectangle.Y = 0xa2;
                            break;
                    }
                    WorldGen.mergeUp = true;
                    WorldGen.mergeLeft = true;
                    goto Label_638C;
                }
                if (((up == -2) && (down == type)) && ((left == type) && (right == -2)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x36;
                            rectangle.Y = 90;
                            break;

                        case 1:
                            rectangle.X = 0x36;
                            rectangle.Y = 0x7e;
                            break;

                        default:
                            rectangle.X = 0x36;
                            rectangle.Y = 0xa2;
                            break;
                    }
                    WorldGen.mergeUp = true;
                    WorldGen.mergeRight = true;
                    goto Label_638C;
                }
                if (((up == type) && (down == -2)) && ((left == -2) && (right == type)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x24;
                            rectangle.Y = 0x6c;
                            break;

                        case 1:
                            rectangle.X = 0x24;
                            rectangle.Y = 0x90;
                            break;

                        default:
                            rectangle.X = 0x24;
                            rectangle.Y = 180;
                            break;
                    }
                    WorldGen.mergeDown = true;
                    WorldGen.mergeLeft = true;
                    goto Label_638C;
                }
                if (((up == type) && (down == -2)) && ((left == type) && (right == -2)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x36;
                            rectangle.Y = 0x6c;
                            break;

                        case 1:
                            rectangle.X = 0x36;
                            rectangle.Y = 0x90;
                            break;

                        default:
                            rectangle.X = 0x36;
                            rectangle.Y = 180;
                            break;
                    }
                    WorldGen.mergeDown = true;
                    WorldGen.mergeRight = true;
                    goto Label_638C;
                }
                if (((up == type) && (down == type)) && ((left == -2) && (right == -2)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 180;
                            rectangle.Y = 0x7e;
                            break;

                        case 1:
                            rectangle.X = 180;
                            rectangle.Y = 0x90;
                            break;

                        default:
                            rectangle.X = 180;
                            rectangle.Y = 0xa2;
                            break;
                    }
                    WorldGen.mergeLeft = true;
                    WorldGen.mergeRight = true;
                    goto Label_638C;
                }
                if (((up == -2) && (down == -2)) && ((left == type) && (right == type)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x90;
                            rectangle.Y = 180;
                            break;

                        case 1:
                            rectangle.X = 0xa2;
                            rectangle.Y = 180;
                            break;

                        default:
                            rectangle.X = 180;
                            rectangle.Y = 180;
                            break;
                    }
                    WorldGen.mergeUp = true;
                    WorldGen.mergeDown = true;
                    goto Label_638C;
                }
                if (((up == -2) && (down == type)) && ((left == -2) && (right == -2)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0xc6;
                            rectangle.Y = 90;
                            break;

                        case 1:
                            rectangle.X = 0xc6;
                            rectangle.Y = 0x6c;
                            break;

                        default:
                            rectangle.X = 0xc6;
                            rectangle.Y = 0x7e;
                            break;
                    }
                    WorldGen.mergeUp = true;
                    WorldGen.mergeLeft = true;
                    WorldGen.mergeRight = true;
                    goto Label_638C;
                }
                if (((up == type) && (down == -2)) && ((left == -2) && (right == -2)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0xc6;
                            rectangle.Y = 0x90;
                            break;

                        case 1:
                            rectangle.X = 0xc6;
                            rectangle.Y = 0xa2;
                            break;

                        default:
                            rectangle.X = 0xc6;
                            rectangle.Y = 180;
                            break;
                    }
                    WorldGen.mergeDown = true;
                    WorldGen.mergeLeft = true;
                    WorldGen.mergeRight = true;
                    goto Label_638C;
                }
                if (((up == -2) && (down == -2)) && ((left == type) && (right == -2)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0xd8;
                            rectangle.Y = 0x90;
                            break;

                        case 1:
                            rectangle.X = 0xd8;
                            rectangle.Y = 0xa2;
                            break;

                        default:
                            rectangle.X = 0xd8;
                            rectangle.Y = 180;
                            break;
                    }
                    WorldGen.mergeUp = true;
                    WorldGen.mergeDown = true;
                    WorldGen.mergeRight = true;
                    goto Label_638C;
                }
                if (((up == -2) && (down == -2)) && ((left == -2) && (right == type)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0xd8;
                            rectangle.Y = 90;
                            break;

                        case 1:
                            rectangle.X = 0xd8;
                            rectangle.Y = 0x6c;
                            break;

                        default:
                            rectangle.X = 0xd8;
                            rectangle.Y = 0x7e;
                            break;
                    }
                    WorldGen.mergeUp = true;
                    WorldGen.mergeDown = true;
                    WorldGen.mergeLeft = true;
                    goto Label_638C;
                }
                if (((up == -2) && (down == -2)) && ((left == -2) && (right == -2)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x6c;
                            rectangle.Y = 0xc6;
                            break;

                        case 1:
                            rectangle.X = 0x7e;
                            rectangle.Y = 0xc6;
                            break;

                        default:
                            rectangle.X = 0x90;
                            rectangle.Y = 0xc6;
                            break;
                    }
                    WorldGen.mergeUp = true;
                    WorldGen.mergeDown = true;
                    WorldGen.mergeLeft = true;
                    WorldGen.mergeRight = true;
                    goto Label_638C;
                }
                if (((up != type) || (down != type)) || ((left != type) || (right != type)))
                {
                    goto Label_638C;
                }
                if (upLeft == -2)
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x12;
                            rectangle.Y = 0x6c;
                            goto Label_58EF;

                        case 1:
                            rectangle.X = 0x12;
                            rectangle.Y = 0x90;
                            goto Label_58EF;
                    }
                    rectangle.X = 0x12;
                    rectangle.Y = 180;
                }
            Label_58EF:
                if (upRight == -2)
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0;
                            rectangle.Y = 0x6c;
                            goto Label_593B;

                        case 1:
                            rectangle.X = 0;
                            rectangle.Y = 0x90;
                            goto Label_593B;
                    }
                    rectangle.X = 0;
                    rectangle.Y = 180;
                }
            Label_593B:
                if (downLeft == -2)
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x12;
                            rectangle.Y = 90;
                            goto Label_5987;

                        case 1:
                            rectangle.X = 0x12;
                            rectangle.Y = 0x7e;
                            goto Label_5987;
                    }
                    rectangle.X = 0x12;
                    rectangle.Y = 0xa2;
                }
            Label_5987:
                if (downRight == -2)
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0;
                            rectangle.Y = 90;
                            goto Label_638C;

                        case 1:
                            rectangle.X = 0;
                            rectangle.Y = 0x7e;
                            goto Label_638C;
                    }
                    rectangle.X = 0;
                    rectangle.Y = 0xa2;
                }
                goto Label_638C;
            Label_59DE:
                switch (type)
                {
                    case 2:
                    case 0x17:
                    case 60:
                    case 70:
                    case 0x6d:
                    case 0xc7:
                        goto Label_5BC3;

                    default:
                        if (((up != -1) || (down != -2)) || ((left != type) || (right != type)))
                        {
                            goto Label_5A81;
                        }
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0xea;
                                rectangle.Y = 0;
                                goto Label_5A76;

                            case 1:
                                rectangle.X = 0xfc;
                                rectangle.Y = 0;
                                goto Label_5A76;
                        }
                        rectangle.X = 270;
                        rectangle.Y = 0;
                        break;
                }
            Label_5A76:
                WorldGen.mergeDown = true;
                goto Label_5BC3;
            Label_5A81:
                if (((up == -2) && (down == -1)) && ((left == type) && (right == type)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0xea;
                            rectangle.Y = 0x12;
                            break;

                        case 1:
                            rectangle.X = 0xfc;
                            rectangle.Y = 0x12;
                            break;

                        default:
                            rectangle.X = 270;
                            rectangle.Y = 0x12;
                            break;
                    }
                    WorldGen.mergeUp = true;
                }
                else if (((up == type) && (down == type)) && ((left == -1) && (right == -2)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0xea;
                            rectangle.Y = 0x24;
                            break;

                        case 1:
                            rectangle.X = 0xfc;
                            rectangle.Y = 0x24;
                            break;

                        default:
                            rectangle.X = 270;
                            rectangle.Y = 0x24;
                            break;
                    }
                    WorldGen.mergeRight = true;
                }
                else if (((up == type) && (down == type)) && ((left == -2) && (right == -1)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0xea;
                            rectangle.Y = 0x36;
                            break;

                        case 1:
                            rectangle.X = 0xfc;
                            rectangle.Y = 0x36;
                            break;

                        default:
                            rectangle.X = 270;
                            rectangle.Y = 0x36;
                            break;
                    }
                    WorldGen.mergeLeft = true;
                }
            Label_5BC3:
                if (((up != -1) && (down != -1)) && ((left == -1) && (right == type)))
                {
                    if ((up == -2) && (down == type))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x48;
                                rectangle.Y = 0x90;
                                break;

                            case 1:
                                rectangle.X = 0x48;
                                rectangle.Y = 0xa2;
                                break;

                            default:
                                rectangle.X = 0x48;
                                rectangle.Y = 180;
                                break;
                        }
                        WorldGen.mergeUp = true;
                    }
                    else if ((down == -2) && (up == type))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x48;
                                rectangle.Y = 90;
                                break;

                            case 1:
                                rectangle.X = 0x48;
                                rectangle.Y = 0x6c;
                                break;

                            default:
                                rectangle.X = 0x48;
                                rectangle.Y = 0x7e;
                                break;
                        }
                        WorldGen.mergeDown = true;
                    }
                }
                else if (((up != -1) && (down != -1)) && ((left == type) && (right == -1)))
                {
                    if ((up == -2) && (down == type))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 90;
                                rectangle.Y = 0x90;
                                break;

                            case 1:
                                rectangle.X = 90;
                                rectangle.Y = 0xa2;
                                break;

                            default:
                                rectangle.X = 90;
                                rectangle.Y = 180;
                                break;
                        }
                        WorldGen.mergeUp = true;
                    }
                    else if ((down == -2) && (up == type))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 90;
                                rectangle.Y = 90;
                                break;

                            case 1:
                                rectangle.X = 90;
                                rectangle.Y = 0x6c;
                                break;

                            default:
                                rectangle.X = 90;
                                rectangle.Y = 0x7e;
                                break;
                        }
                        WorldGen.mergeDown = true;
                    }
                }
                else if (((up == -1) && (down == type)) && ((left != -1) && (right != -1)))
                {
                    if ((left == -2) && (right == type))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0;
                                rectangle.Y = 0xc6;
                                break;

                            case 1:
                                rectangle.X = 0x12;
                                rectangle.Y = 0xc6;
                                break;

                            default:
                                rectangle.X = 0x24;
                                rectangle.Y = 0xc6;
                                break;
                        }
                        WorldGen.mergeLeft = true;
                    }
                    else if ((right == -2) && (left == type))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x36;
                                rectangle.Y = 0xc6;
                                break;

                            case 1:
                                rectangle.X = 0x48;
                                rectangle.Y = 0xc6;
                                break;

                            default:
                                rectangle.X = 90;
                                rectangle.Y = 0xc6;
                                break;
                        }
                        WorldGen.mergeRight = true;
                    }
                }
                else if (((up == type) && (down == -1)) && ((left != -1) && (right != -1)))
                {
                    if ((left == -2) && (right == type))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0;
                                rectangle.Y = 0xd8;
                                break;

                            case 1:
                                rectangle.X = 0x12;
                                rectangle.Y = 0xd8;
                                break;

                            default:
                                rectangle.X = 0x24;
                                rectangle.Y = 0xd8;
                                break;
                        }
                        WorldGen.mergeLeft = true;
                    }
                    else if ((right == -2) && (left == type))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x36;
                                rectangle.Y = 0xd8;
                                break;

                            case 1:
                                rectangle.X = 0x48;
                                rectangle.Y = 0xd8;
                                break;

                            default:
                                rectangle.X = 90;
                                rectangle.Y = 0xd8;
                                break;
                        }
                        WorldGen.mergeRight = true;
                    }
                }
                else if (((up != -1) && (down != -1)) && ((left == -1) && (right == -1)))
                {
                    if ((up == -2) && (down == -2))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x6c;
                                rectangle.Y = 0xd8;
                                break;

                            case 1:
                                rectangle.X = 0x6c;
                                rectangle.Y = 0xea;
                                break;

                            default:
                                rectangle.X = 0x6c;
                                rectangle.Y = 0xfc;
                                break;
                        }
                        WorldGen.mergeUp = true;
                        WorldGen.mergeDown = true;
                    }
                    else if (up == -2)
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x7e;
                                rectangle.Y = 0x90;
                                break;

                            case 1:
                                rectangle.X = 0x7e;
                                rectangle.Y = 0xa2;
                                break;

                            default:
                                rectangle.X = 0x7e;
                                rectangle.Y = 180;
                                break;
                        }
                        WorldGen.mergeUp = true;
                    }
                    else if (down == -2)
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x7e;
                                rectangle.Y = 90;
                                break;

                            case 1:
                                rectangle.X = 0x7e;
                                rectangle.Y = 0x6c;
                                break;

                            default:
                                rectangle.X = 0x7e;
                                rectangle.Y = 0x7e;
                                break;
                        }
                        WorldGen.mergeDown = true;
                    }
                }
                else if (((up == -1) && (down == -1)) && ((left != -1) && (right != -1)))
                {
                    if ((left == -2) && (right == -2))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0xa2;
                                rectangle.Y = 0xc6;
                                break;

                            case 1:
                                rectangle.X = 180;
                                rectangle.Y = 0xc6;
                                break;

                            default:
                                rectangle.X = 0xc6;
                                rectangle.Y = 0xc6;
                                break;
                        }
                        WorldGen.mergeLeft = true;
                        WorldGen.mergeRight = true;
                    }
                    else if (left == -2)
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0;
                                rectangle.Y = 0xfc;
                                break;

                            case 1:
                                rectangle.X = 0x12;
                                rectangle.Y = 0xfc;
                                break;

                            default:
                                rectangle.X = 0x24;
                                rectangle.Y = 0xfc;
                                break;
                        }
                        WorldGen.mergeLeft = true;
                    }
                    else if (right == -2)
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x36;
                                rectangle.Y = 0xfc;
                                break;

                            case 1:
                                rectangle.X = 0x48;
                                rectangle.Y = 0xfc;
                                break;

                            default:
                                rectangle.X = 90;
                                rectangle.Y = 0xfc;
                                break;
                        }
                        WorldGen.mergeRight = true;
                    }
                }
                else if (((up == -2) && (down == -1)) && ((left == -1) && (right == -1)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x6c;
                            rectangle.Y = 0x90;
                            break;

                        case 1:
                            rectangle.X = 0x6c;
                            rectangle.Y = 0xa2;
                            break;

                        default:
                            rectangle.X = 0x6c;
                            rectangle.Y = 180;
                            break;
                    }
                    WorldGen.mergeUp = true;
                }
                else if (((up == -1) && (down == -2)) && ((left == -1) && (right == -1)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x6c;
                            rectangle.Y = 90;
                            break;

                        case 1:
                            rectangle.X = 0x6c;
                            rectangle.Y = 0x6c;
                            break;

                        default:
                            rectangle.X = 0x6c;
                            rectangle.Y = 0x7e;
                            break;
                    }
                    WorldGen.mergeDown = true;
                }
                else if (((up == -1) && (down == -1)) && ((left == -2) && (right == -1)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0;
                            rectangle.Y = 0xea;
                            break;

                        case 1:
                            rectangle.X = 0x12;
                            rectangle.Y = 0xea;
                            break;

                        default:
                            rectangle.X = 0x24;
                            rectangle.Y = 0xea;
                            break;
                    }
                    WorldGen.mergeLeft = true;
                }
                else if (((up == -1) && (down == -1)) && ((left == -1) && (right == -2)))
                {
                    switch (num61)
                    {
                        case 0:
                            rectangle.X = 0x36;
                            rectangle.Y = 0xea;
                            break;

                        case 1:
                            rectangle.X = 0x48;
                            rectangle.Y = 0xea;
                            break;

                        default:
                            rectangle.X = 90;
                            rectangle.Y = 0xea;
                            break;
                    }
                    WorldGen.mergeRight = true;
                }
            Label_638C:
                if ((rectangle.X < 0) || (rectangle.Y < 0))
                {
                    if (!flag4)
                    {
                        flag4 = true;
                        TileMergeAttemptWeird(type, -1, Game1.tileSolid, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    if ((((type == 2) || (type == 0x17)) || ((type == 60) || (type == 70))) || (((type == 0x6d) || (type == 0xc7)) || Game1.tileMoss[type]))
                    {
                        TileMergeAttempt(type, -2, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    if (((up == type) && (down == type)) && ((left == type) && (right == type)))
                    {
                        if ((upLeft != type) && (upRight != type))
                        {
                            switch (num61)
                            {
                                case 0:
                                    rectangle.X = 0x6c;
                                    rectangle.Y = 0x12;
                                    goto Label_6BFD;

                                case 1:
                                    rectangle.X = 0x7e;
                                    rectangle.Y = 0x12;
                                    goto Label_6BFD;
                            }
                            rectangle.X = 0x90;
                            rectangle.Y = 0x12;
                        }
                        else if ((downLeft != type) && (downRight != type))
                        {
                            switch (num61)
                            {
                                case 0:
                                    rectangle.X = 0x6c;
                                    rectangle.Y = 0x24;
                                    goto Label_6BFD;

                                case 1:
                                    rectangle.X = 0x7e;
                                    rectangle.Y = 0x24;
                                    goto Label_6BFD;
                            }
                            rectangle.X = 0x90;
                            rectangle.Y = 0x24;
                        }
                        else if ((upLeft != type) && (downLeft != type))
                        {
                            switch (num61)
                            {
                                case 0:
                                    rectangle.X = 180;
                                    rectangle.Y = 0;
                                    goto Label_6BFD;

                                case 1:
                                    rectangle.X = 180;
                                    rectangle.Y = 0x12;
                                    goto Label_6BFD;
                            }
                            rectangle.X = 180;
                            rectangle.Y = 0x24;
                        }
                        else if ((upRight != type) && (downRight != type))
                        {
                            switch (num61)
                            {
                                case 0:
                                    rectangle.X = 0xc6;
                                    rectangle.Y = 0;
                                    goto Label_6BFD;

                                case 1:
                                    rectangle.X = 0xc6;
                                    rectangle.Y = 0x12;
                                    goto Label_6BFD;
                            }
                            rectangle.X = 0xc6;
                            rectangle.Y = 0x24;
                        }
                        else
                        {
                            switch (num61)
                            {
                                case 0:
                                    rectangle.X = 0x12;
                                    rectangle.Y = 0x12;
                                    goto Label_6BFD;

                                case 1:
                                    rectangle.X = 0x24;
                                    rectangle.Y = 0x12;
                                    goto Label_6BFD;
                            }
                            rectangle.X = 0x36;
                            rectangle.Y = 0x12;
                        }
                    }
                    else if (((up != type) && (down == type)) && ((left == type) && (right == type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x12;
                                rectangle.Y = 0;
                                goto Label_6BFD;

                            case 1:
                                rectangle.X = 0x24;
                                rectangle.Y = 0;
                                goto Label_6BFD;
                        }
                        rectangle.X = 0x36;
                        rectangle.Y = 0;
                    }
                    else if (((up == type) && (down != type)) && ((left == type) && (right == type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x12;
                                rectangle.Y = 0x24;
                                goto Label_6BFD;

                            case 1:
                                rectangle.X = 0x24;
                                rectangle.Y = 0x24;
                                goto Label_6BFD;
                        }
                        rectangle.X = 0x36;
                        rectangle.Y = 0x24;
                    }
                    else if (((up == type) && (down == type)) && ((left != type) && (right == type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0;
                                rectangle.Y = 0;
                                goto Label_6BFD;

                            case 1:
                                rectangle.X = 0;
                                rectangle.Y = 0x12;
                                goto Label_6BFD;
                        }
                        rectangle.X = 0;
                        rectangle.Y = 0x24;
                    }
                    else if (((up == type) && (down == type)) && ((left == type) && (right != type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x48;
                                rectangle.Y = 0;
                                goto Label_6BFD;

                            case 1:
                                rectangle.X = 0x48;
                                rectangle.Y = 0x12;
                                goto Label_6BFD;
                        }
                        rectangle.X = 0x48;
                        rectangle.Y = 0x24;
                    }
                    else if (((up != type) && (down == type)) && ((left != type) && (right == type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0;
                                rectangle.Y = 0x36;
                                goto Label_6BFD;

                            case 1:
                                rectangle.X = 0x24;
                                rectangle.Y = 0x36;
                                goto Label_6BFD;
                        }
                        rectangle.X = 0x48;
                        rectangle.Y = 0x36;
                    }
                    else if (((up != type) && (down == type)) && ((left == type) && (right != type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x12;
                                rectangle.Y = 0x36;
                                goto Label_6BFD;

                            case 1:
                                rectangle.X = 0x36;
                                rectangle.Y = 0x36;
                                goto Label_6BFD;
                        }
                        rectangle.X = 90;
                        rectangle.Y = 0x36;
                    }
                    else if (((up == type) && (down != type)) && ((left != type) && (right == type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0;
                                rectangle.Y = 0x48;
                                goto Label_6BFD;

                            case 1:
                                rectangle.X = 0x24;
                                rectangle.Y = 0x48;
                                goto Label_6BFD;
                        }
                        rectangle.X = 0x48;
                        rectangle.Y = 0x48;
                    }
                    else if (((up == type) && (down != type)) && ((left == type) && (right != type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x12;
                                rectangle.Y = 0x48;
                                goto Label_6BFD;

                            case 1:
                                rectangle.X = 0x36;
                                rectangle.Y = 0x48;
                                goto Label_6BFD;
                        }
                        rectangle.X = 90;
                        rectangle.Y = 0x48;
                    }
                    else if (((up == type) && (down == type)) && ((left != type) && (right != type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 90;
                                rectangle.Y = 0;
                                goto Label_6BFD;

                            case 1:
                                rectangle.X = 90;
                                rectangle.Y = 0x12;
                                goto Label_6BFD;
                        }
                        rectangle.X = 90;
                        rectangle.Y = 0x24;
                    }
                    else if (((up != type) && (down != type)) && ((left == type) && (right == type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x6c;
                                rectangle.Y = 0x48;
                                goto Label_6BFD;

                            case 1:
                                rectangle.X = 0x7e;
                                rectangle.Y = 0x48;
                                goto Label_6BFD;
                        }
                        rectangle.X = 0x90;
                        rectangle.Y = 0x48;
                    }
                    else if (((up != type) && (down == type)) && ((left != type) && (right != type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x6c;
                                rectangle.Y = 0;
                                goto Label_6BFD;

                            case 1:
                                rectangle.X = 0x7e;
                                rectangle.Y = 0;
                                goto Label_6BFD;
                        }
                        rectangle.X = 0x90;
                        rectangle.Y = 0;
                    }
                    else if (((up == type) && (down != type)) && ((left != type) && (right != type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0x6c;
                                rectangle.Y = 0x36;
                                goto Label_6BFD;

                            case 1:
                                rectangle.X = 0x7e;
                                rectangle.Y = 0x36;
                                goto Label_6BFD;
                        }
                        rectangle.X = 0x90;
                        rectangle.Y = 0x36;
                    }
                    else if (((up != type) && (down != type)) && ((left != type) && (right == type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0xa2;
                                rectangle.Y = 0;
                                goto Label_6BFD;

                            case 1:
                                rectangle.X = 0xa2;
                                rectangle.Y = 0x12;
                                goto Label_6BFD;
                        }
                        rectangle.X = 0xa2;
                        rectangle.Y = 0x24;
                    }
                    else if (((up != type) && (down != type)) && ((left == type) && (right != type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0xd8;
                                rectangle.Y = 0;
                                goto Label_6BFD;

                            case 1:
                                rectangle.X = 0xd8;
                                rectangle.Y = 0x12;
                                goto Label_6BFD;
                        }
                        rectangle.X = 0xd8;
                        rectangle.Y = 0x24;
                    }
                    else if (((up != type) && (down != type)) && ((left != type) && (right != type)))
                    {
                        switch (num61)
                        {
                            case 0:
                                rectangle.X = 0xa2;
                                rectangle.Y = 0x36;
                                goto Label_6BFD;

                            case 1:
                                rectangle.X = 180;
                                rectangle.Y = 0x36;
                                goto Label_6BFD;
                        }
                        rectangle.X = 0xc6;
                        rectangle.Y = 0x36;
                    }
                }
            Label_6BFD:
                if ((rectangle.X <= -1) || (rectangle.Y <= -1))
                {
                    if (num61 <= 0)
                    {
                        rectangle.X = 0x12;
                        rectangle.Y = 0x12;
                    }
                    else if (num61 == 1)
                    {
                        rectangle.X = 0x24;
                        rectangle.Y = 0x12;
                    }
                    if (num61 >= 2)
                    {
                        rectangle.X = 0x36;
                        rectangle.Y = 0x12;
                    }
                }
                if ((Game1.tileLargeFrames[type] == 1) && (num61 == 3))
                {
                    rectangle.Y += 90;
                }
                centerTile.frameX = (short)rectangle.X;
                centerTile.frameY = (short)rectangle.Y;
                if (((type == 0x34) || (type == 0x3e)) || ((type == 0x73) || (type == 0xcd)))
                {
                    if (tile2 != null)
                    {
                        if (!tile2.active())
                        {
                            up = -1;
                        }
                        else if (tile2.bottomSlope())
                        {
                            up = -1;
                        }
                        else
                        {
                            up = tile2.type;
                        }
                    }
                    else
                    {
                        up = type;
                    }
                    if (((type == 0x34) || (type == 0xcd)) && ((up == 0x6d) || (up == 0x73)))
                    {
                        centerTile.type = 0x73;
                        SquareTileFrame(i, j, true);
                        return;
                    }
                    if (((type == 0x73) || (type == 0xcd)) && ((up == 2) || (up == 0x34)))
                    {
                        centerTile.type = 0x34;
                        SquareTileFrame(i, j, true);
                        return;
                    }
                    if (((type == 0x34) || (type == 0x73)) && ((up == 0xc7) || (up == 0xcd)))
                    {
                        centerTile.type = 0xcd;
                        SquareTileFrame(i, j, true);
                        return;
                    }
                    if (up != type)
                    {
                        bool flag5 = false;
                        if (up == -1)
                        {
                            flag5 = true;
                        }
                        if (((type == 0x34) && (up != 2)) && (up != 0xc0))
                        {
                            flag5 = true;
                        }
                        if ((type == 0x3e) && (up != 60))
                        {
                            flag5 = true;
                        }
                        if ((type == 0x73) && (up != 0x6d))
                        {
                            flag5 = true;
                        }
                        if ((type == 0xcd) && (up != 0xc7))
                        {
                            flag5 = true;
                        }
                        if (flag5)
                        {
                            KillTile(i, j, false, false, false);
                        }
                    }
                }
                if (!noTileActions && ((((type == 0x35) || (type == 0x70)) || ((type == 0x74) || (type == 0x7b))) || ((((type == 0xea) || (type == 0xe0)) || ((type == 330) || (type == 0x14b))) || ((type == 0x14c) || (type == 0x14d)))))
                {
                    if (Game1.netMode == 0)
                    {
                        if ((tile3 != null) && !tile3.active())
                        {
                            bool flag6 = true;
                            if (tile2.active() && (((tile2.type == 0x15) || (tile2.type == 0x143)) || (tile2.type == 0x58)))
                            {
                                flag6 = false;
                            }
                            if (flag6)
                            {
                                int num65;
                                int damage = 10;
                                switch (type)
                                {
                                    case 0x70:
                                        num65 = 0x38;
                                        break;

                                    case 0x3b:
                                        num65 = 0x27;
                                        break;

                                    case 0x74:
                                        num65 = 0x43;
                                        break;

                                    case 0x7b:
                                        num65 = 0x47;
                                        break;

                                    case 0xe0:
                                        num65 = 0xb3;
                                        break;

                                    case 0xea:
                                        num65 = 0xf1;
                                        break;

                                    case 330:
                                        num65 = 0x19b;
                                        damage = 0;
                                        break;

                                    case 0x14b:
                                        num65 = 0x19c;
                                        damage = 0;
                                        break;

                                    case 0x14c:
                                        num65 = 0x19d;
                                        damage = 0;
                                        break;

                                    case 0x14d:
                                        num65 = 0x19e;
                                        damage = 0;
                                        break;

                                    default:
                                        num65 = 0x1f;
                                        break;
                                }
                                centerTile.ClearTile();
                                int num67 = Projectile.NewProjectile((float)((i * 0x10) + 8), (float)((j * 0x10) + 8), 0f, 0.41f, num65, damage, 0f, Game1.myPlayer, 0f, 0f);
                                Game1.projectile[num67].ai[0] = 1f;
                                SquareTileFrame(i, j, true);
                            }
                        }
                    }
                    else if (((Game1.netMode == 2) && (tile3 != null)) && !tile3.active())
                    {
                        bool flag7 = true;
                        if (tile2.active() && (((tile2.type == 0x15) || (tile2.type == 0x143)) || (tile2.type == 0x58)))
                        {
                            flag7 = false;
                        }
                        if (flag7)
                        {
                            int num68;
                            int num69 = 10;
                            switch (type)
                            {
                                case 0x70:
                                    num68 = 0x38;
                                    break;

                                case 0x74:
                                    num68 = 0x43;
                                    break;

                                case 0x3b:
                                    num68 = 0x27;
                                    break;

                                case 0x7b:
                                    num68 = 0x47;
                                    break;

                                case 0xe0:
                                    num68 = 0xb3;
                                    break;

                                case 0xea:
                                    num68 = 0xf1;
                                    break;

                                case 330:
                                    num68 = 0x19b;
                                    num69 = 0;
                                    break;

                                case 0x14b:
                                    num68 = 0x19c;
                                    num69 = 0;
                                    break;

                                case 0x14c:
                                    num68 = 0x19d;
                                    num69 = 0;
                                    break;

                                case 0x14d:
                                    num68 = 0x19e;
                                    num69 = 0;
                                    break;

                                default:
                                    num68 = 0x1f;
                                    break;
                            }
                            centerTile.active(false);
                            int num70 = Projectile.NewProjectile((float)((i * 0x10) + 8), (float)((j * 0x10) + 8), 0f, 2.5f, num68, num69, 0f, Game1.myPlayer, 0f, 0f);
                            Game1.projectile[num70].velocity.Y = 0.5f;
                            Game1.projectile[num70].position.Y += 2f;
                            Game1.projectile[num70].netUpdate = true;
                            NetMessage.SendTileSquare(-1, i, j, 1);
                            SquareTileFrame(i, j, true);
                        }
                    }
                }
                if (((rectangle.X != frameX) && (rectangle.Y != frameY)) && ((frameX >= 0) && (frameY >= 0)))
                {
                    tileReframeCount++;
                    if (tileReframeCount < 100)
                    {
                        bool mergeUp = WorldGen.mergeUp;
                        bool mergeDown = WorldGen.mergeDown;
                        bool mergeLeft = WorldGen.mergeLeft;
                        bool mergeRight = WorldGen.mergeRight;
                        TileFrame(i - 1, j, false, false);
                        TileFrame(i + 1, j, false, false);
                        TileFrame(i, j - 1, false, false);
                        TileFrame(i, j + 1, false, false);
                        WorldGen.mergeUp = mergeUp;
                        WorldGen.mergeDown = mergeDown;
                        WorldGen.mergeLeft = mergeLeft;
                        WorldGen.mergeRight = mergeRight;
                    }
                    tileReframeCount--;
                }
            }
            catch
            {
            }
        Label_71F1:
            if ((i > 0) && (j > 0))
            {
                UpdateMapTile(i, j, addToList);
            }
        }

        public static void TileMergeAttempt(int myType, int lookfor, ref int up, ref int down, ref int left, ref int right)
        {
            if (lookfor == up)
            {
                up = myType;
            }
            if (lookfor == down)
            {
                down = myType;
            }
            if (lookfor == left)
            {
                left = myType;
            }
            if (lookfor == right)
            {
                right = myType;
            }
        }

        public static void TileMergeAttempt(int myType, int lookfor, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
        {
            if (lookfor == up)
            {
                up = myType;
            }
            if (lookfor == down)
            {
                down = myType;
            }
            if (lookfor == left)
            {
                left = myType;
            }
            if (lookfor == right)
            {
                right = myType;
            }
            if (lookfor == upLeft)
            {
                upLeft = myType;
            }
            if (lookfor == upRight)
            {
                upRight = myType;
            }
            if (lookfor == downLeft)
            {
                downLeft = myType;
            }
            if (lookfor == downRight)
            {
                downRight = myType;
            }
        }

        public static void TileMergeAttempt(int myType, bool[] lookfor, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
        {
            if ((up > -1) && lookfor[up])
            {
                up = myType;
            }
            if ((down > -1) && lookfor[down])
            {
                down = myType;
            }
            if ((left > -1) && lookfor[left])
            {
                left = myType;
            }
            if ((right > -1) && lookfor[right])
            {
                right = myType;
            }
            if ((upLeft > -1) && lookfor[upLeft])
            {
                upLeft = myType;
            }
            if ((upRight > -1) && lookfor[upRight])
            {
                upRight = myType;
            }
            if ((downLeft > -1) && lookfor[downLeft])
            {
                downLeft = myType;
            }
            if ((downRight > -1) && lookfor[downRight])
            {
                downRight = myType;
            }
        }

        public static void TileMergeAttempt(int myType, bool[] lookfor, bool[] exclude, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
        {
            if (((up > -1) && !exclude[up]) && lookfor[up])
            {
                up = myType;
            }
            if (((down > -1) && !exclude[down]) && lookfor[down])
            {
                down = myType;
            }
            if (((left > -1) && !exclude[left]) && lookfor[left])
            {
                left = myType;
            }
            if (((right > -1) && !exclude[right]) && lookfor[right])
            {
                right = myType;
            }
            if (((upLeft > -1) && !exclude[upLeft]) && lookfor[upLeft])
            {
                upLeft = myType;
            }
            if (((upRight > -1) && !exclude[upRight]) && lookfor[upRight])
            {
                upRight = myType;
            }
            if (((downLeft > -1) && !exclude[downLeft]) && lookfor[downLeft])
            {
                downLeft = myType;
            }
            if (((downRight > -1) && !exclude[downRight]) && lookfor[downRight])
            {
                downRight = myType;
            }
        }

        public static void TileMergeAttemptFrametest(int i, int j, int myType, int lookfor, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
        {
            if (up == lookfor)
            {
                TileFrame(i, j - 1, false, false);
                if (mergeDown)
                {
                    up = myType;
                }
            }
            if (down == lookfor)
            {
                TileFrame(i, j + 1, false, false);
                if (mergeUp)
                {
                    down = myType;
                }
            }
            if (left == lookfor)
            {
                TileFrame(i - 1, j, false, false);
                if (mergeRight)
                {
                    left = myType;
                }
            }
            if (right == lookfor)
            {
                TileFrame(i + 1, j, false, false);
                if (mergeLeft)
                {
                    right = myType;
                }
            }
            if (upLeft == lookfor)
            {
                upLeft = myType;
            }
            if (upRight == lookfor)
            {
                upRight = myType;
            }
            if (downLeft == lookfor)
            {
                downLeft = myType;
            }
            if (downRight == lookfor)
            {
                downRight = myType;
            }
        }

        public static void TileMergeAttemptFrametest(int i, int j, int myType, bool[] lookfor, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
        {
            if ((up > -1) && lookfor[up])
            {
                TileFrame(i, j - 1, false, false);
                if (mergeDown)
                {
                    up = myType;
                }
            }
            if ((down > -1) && lookfor[down])
            {
                TileFrame(i, j + 1, false, false);
                if (mergeUp)
                {
                    down = myType;
                }
            }
            if ((left > -1) && lookfor[left])
            {
                TileFrame(i - 1, j, false, false);
                if (mergeRight)
                {
                    left = myType;
                }
            }
            if ((right > -1) && lookfor[right])
            {
                TileFrame(i + 1, j, false, false);
                if (mergeLeft)
                {
                    right = myType;
                }
            }
            if ((upLeft > -1) && lookfor[upLeft])
            {
                upLeft = myType;
            }
            if ((upRight > -1) && lookfor[upRight])
            {
                upRight = myType;
            }
            if ((downLeft > -1) && lookfor[downLeft])
            {
                downLeft = myType;
            }
            if ((downRight > -1) && lookfor[downRight])
            {
                downRight = myType;
            }
        }

        public static void TileMergeAttemptWeird(int myType, int changeTo, bool[] exclude, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
        {
            if (((up > -1) && !exclude[up]) && (up != myType))
            {
                up = changeTo;
            }
            if (((down > -1) && !exclude[down]) && (down != myType))
            {
                down = changeTo;
            }
            if (((left > -1) && !exclude[left]) && (left != myType))
            {
                left = changeTo;
            }
            if (((right > -1) && !exclude[right]) && (right != myType))
            {
                right = changeTo;
            }
            if (((upLeft > -1) && !exclude[upLeft]) && (upLeft != myType))
            {
                upLeft = changeTo;
            }
            if (((upRight > -1) && !exclude[upRight]) && (upRight != myType))
            {
                upRight = changeTo;
            }
            if (((downLeft > -1) && !exclude[downLeft]) && (downLeft != myType))
            {
                downLeft = changeTo;
            }
            if (((downRight > -1) && !exclude[downRight]) && (downRight != myType))
            {
                downRight = changeTo;
            }
        }

        public static void TileRunner(int i, int j, double strength, int steps, int type, bool addTile = false, float speedX = 0f, float speedY = 0f, bool noYChange = false, bool overRide = true)
        {
            Vector2 vector;
            Vector2 vector2;
            double num5 = strength;
            float num6 = steps;
            vector.X = i;
            vector.Y = j;
            vector2.X = genRand.Next(-10, 11) * 0.1f;
            vector2.Y = genRand.Next(-10, 11) * 0.1f;
            if ((speedX != 0f) || (speedY != 0f))
            {
                vector2.X = speedX;
                vector2.Y = speedY;
            }
            bool flag = type == 0x170;
            bool flag2 = type == 0x16f;
            while ((num5 > 0.0) && (num6 > 0f))
            {
                if (((vector.Y < 0f) && (num6 > 0f)) && (type == 0x3b))
                {
                    num6 = 0f;
                }
                num5 = strength * (num6 / ((float)steps));
                num6--;
                int num = (int)(vector.X - (num5 * 0.5));
                int num3 = (int)(vector.X + (num5 * 0.5));
                int num2 = (int)(vector.Y - (num5 * 0.5));
                int num4 = (int)(vector.Y + (num5 * 0.5));
                if (num < 1)
                {
                    num = 1;
                }
                if (num3 > (Game1.maxTilesX - 1))
                {
                    num3 = Game1.maxTilesX - 1;
                }
                if (num2 < 1)
                {
                    num2 = 1;
                }
                if (num4 > (Game1.maxTilesY - 1))
                {
                    num4 = Game1.maxTilesY - 1;
                }
                for (int k = num; k < num3; k++)
                {
                    for (int m = num2; m < num4; m++)
                    {
                        if ((Math.Abs((float)(k - vector.X)) + Math.Abs((float)(m - vector.Y))) >= ((strength * 0.5) * (1.0 + (genRand.Next(-10, 11) * 0.015))))
                        {
                            continue;
                        }
                        if ((mudWall && (m > Game1.worldSurface)) && ((Game1.tile[k, m - 1].wall != 2) && (m < ((Game1.maxTilesY - 210) - genRand.Next(3)))))
                        {
                            if (m > ((lavaLine - genRand.Next(0, 4)) - 50))
                            {
                                if (((Game1.tile[k, m - 1].wall != 0x40) && (Game1.tile[k, m + 1].wall != 0x40)) && ((Game1.tile[k - 1, m].wall != 0x40) && (Game1.tile[k, m + 1].wall != 0x40)))
                                {
                                    PlaceWall(k, m, 15, true);
                                }
                            }
                            else if (((Game1.tile[k, m - 1].wall != 15) && (Game1.tile[k, m + 1].wall != 15)) && ((Game1.tile[k - 1, m].wall != 15) && (Game1.tile[k, m + 1].wall != 15)))
                            {
                                PlaceWall(k, m, 0x40, true);
                            }
                        }
                        if (type < 0)
                        {
                            if (((type == -2) && Game1.tile[k, m].active()) && ((m < waterLine) || (m > lavaLine)))
                            {
                                Game1.tile[k, m].liquid = 0xff;
                                if (m > lavaLine)
                                {
                                    Game1.tile[k, m].lava(true);
                                }
                            }
                            Game1.tile[k, m].active(false);
                            continue;
                        }
                        if (flag && ((Math.Abs((float)(k - vector.X)) + Math.Abs((float)(m - vector.Y))) < ((strength * 0.3) * (1.0 + (genRand.Next(-10, 11) * 0.01)))))
                        {
                            PlaceWall(k, m, 180, true);
                        }
                        if (flag2 && ((Math.Abs((float)(k - vector.X)) + Math.Abs((float)(m - vector.Y))) < ((strength * 0.3) * (1.0 + (genRand.Next(-10, 11) * 0.01)))))
                        {
                            PlaceWall(k, m, 0xb2, true);
                        }
                        if (overRide || !Game1.tile[k, m].active())
                        {
                            Tile tile = Game1.tile[k, m];
                            bool flag3 = false;
                            flag3 = Game1.tileStone[type] && (tile.type != 1);
                            if (!TileID.Sets.CanBeClearedDuringGeneration[tile.type])
                            {
                                flag3 = true;
                            }
                            switch (tile.type)
                            {
                                case 0x35:
                                    if (type == 40)
                                    {
                                        flag3 = true;
                                    }
                                    if ((m < Game1.worldSurface) && (type != 0x3b))
                                    {
                                        flag3 = true;
                                    }
                                    break;

                                case 0x93:
                                case 0x2d:
                                case 0xbd:
                                case 190:
                                case 0xc4:
                                    flag3 = true;
                                    break;

                                case 1:
                                    if ((type == 0x3b) && (m < (Game1.worldSurface + genRand.Next(-50, 50))))
                                    {
                                        flag3 = true;
                                    }
                                    break;

                                case 0x16f:
                                case 0x170:
                                    if (type == 0x3b)
                                    {
                                        flag3 = true;
                                    }
                                    break;

                                case 0x18c:
                                case 0x18d:
                                    flag3 = !TileID.Sets.Ore[type];
                                    break;
                            }
                            if (!flag3)
                            {
                                tile.type = (ushort)type;
                            }
                        }
                        if (addTile)
                        {
                            Game1.tile[k, m].active(true);
                            Game1.tile[k, m].liquid = 0;
                            Game1.tile[k, m].lava(false);
                        }
                        if ((noYChange && (m < Game1.worldSurface)) && (type != 0x3b))
                        {
                            Game1.tile[k, m].wall = 2;
                        }
                        if (((type == 0x3b) && (m > waterLine)) && (Game1.tile[k, m].liquid > 0))
                        {
                            Game1.tile[k, m].lava(false);
                            Game1.tile[k, m].liquid = 0;
                        }
                    }
                }
                vector += vector2;
                if (num5 > 50.0)
                {
                    vector += vector2;
                    num6--;
                    vector2.Y += genRand.Next(-10, 11) * 0.05f;
                    vector2.X += genRand.Next(-10, 11) * 0.05f;
                    if (num5 > 100.0)
                    {
                        vector += vector2;
                        num6--;
                        vector2.Y += genRand.Next(-10, 11) * 0.05f;
                        vector2.X += genRand.Next(-10, 11) * 0.05f;
                        if (num5 > 150.0)
                        {
                            vector += vector2;
                            num6--;
                            vector2.Y += genRand.Next(-10, 11) * 0.05f;
                            vector2.X += genRand.Next(-10, 11) * 0.05f;
                            if (num5 > 200.0)
                            {
                                vector += vector2;
                                num6--;
                                vector2.Y += genRand.Next(-10, 11) * 0.05f;
                                vector2.X += genRand.Next(-10, 11) * 0.05f;
                                if (num5 > 250.0)
                                {
                                    vector += vector2;
                                    num6--;
                                    vector2.Y += genRand.Next(-10, 11) * 0.05f;
                                    vector2.X += genRand.Next(-10, 11) * 0.05f;
                                    if (num5 > 300.0)
                                    {
                                        vector += vector2;
                                        num6--;
                                        vector2.Y += genRand.Next(-10, 11) * 0.05f;
                                        vector2.X += genRand.Next(-10, 11) * 0.05f;
                                        if (num5 > 400.0)
                                        {
                                            vector += vector2;
                                            num6--;
                                            vector2.Y += genRand.Next(-10, 11) * 0.05f;
                                            vector2.X += genRand.Next(-10, 11) * 0.05f;
                                            if (num5 > 500.0)
                                            {
                                                vector += vector2;
                                                num6--;
                                                vector2.Y += genRand.Next(-10, 11) * 0.05f;
                                                vector2.X += genRand.Next(-10, 11) * 0.05f;
                                                if (num5 > 600.0)
                                                {
                                                    vector += vector2;
                                                    num6--;
                                                    vector2.Y += genRand.Next(-10, 11) * 0.05f;
                                                    vector2.X += genRand.Next(-10, 11) * 0.05f;
                                                    if (num5 > 700.0)
                                                    {
                                                        vector += vector2;
                                                        num6--;
                                                        vector2.Y += genRand.Next(-10, 11) * 0.05f;
                                                        vector2.X += genRand.Next(-10, 11) * 0.05f;
                                                        if (num5 > 800.0)
                                                        {
                                                            vector += vector2;
                                                            num6--;
                                                            vector2.Y += genRand.Next(-10, 11) * 0.05f;
                                                            vector2.X += genRand.Next(-10, 11) * 0.05f;
                                                            if (num5 > 900.0)
                                                            {
                                                                vector += vector2;
                                                                num6--;
                                                                vector2.Y += genRand.Next(-10, 11) * 0.05f;
                                                                vector2.X += genRand.Next(-10, 11) * 0.05f;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                vector2.X += genRand.Next(-10, 11) * 0.05f;
                if (vector2.X > 1f)
                {
                    vector2.X = 1f;
                }
                if (vector2.X < -1f)
                {
                    vector2.X = -1f;
                }
                if (!noYChange)
                {
                    vector2.Y += genRand.Next(-10, 11) * 0.05f;
                    if (vector2.Y > 1f)
                    {
                        vector2.Y = 1f;
                    }
                    if (vector2.Y < -1f)
                    {
                        vector2.Y = -1f;
                    }
                }
                else if ((type != 0x3b) && (num5 < 3.0))
                {
                    if (vector2.Y > 1f)
                    {
                        vector2.Y = 1f;
                    }
                    if (vector2.Y < -1f)
                    {
                        vector2.Y = -1f;
                    }
                }
                if ((type == 0x3b) && !noYChange)
                {
                    if (vector2.Y > 0.5)
                    {
                        vector2.Y = 0.5f;
                    }
                    if (vector2.Y < -0.5)
                    {
                        vector2.Y = -0.5f;
                    }
                    if (vector.Y < (Game1.rockLayer + 100.0))
                    {
                        vector2.Y = 1f;
                    }
                    if (vector.Y > (Game1.maxTilesY - 300))
                    {
                        vector2.Y = -1f;
                    }
                }
            }
        }

        public static void TriggerLunarApocalypse()
        {
            List<int> list = new List<int> { 0x205, 0x1a6, 0x1fb, 0x1ed };
            int[] numArray = new int[4];
            for (int i = 0; i < 4; i++)
            {
                numArray[i] = list[Game1.rand.Next(list.Count)];
                list.Remove(numArray[i]);
            }
            int num2 = Game1.maxTilesX / 5;
            int worldSurface = (int)Game1.worldSurface;
            for (int j = 0; j < 4; j++)
            {
                int num5 = num2 * (1 + j);
                bool flag = false;
                for (int k = 0; k < 15; k++)
                {
                    int num7 = Game1.rand.Next(-100, 0x65);
                    for (int m = worldSurface; m > 100; m--)
                    {
                        if (((!Collision.SolidTiles((num5 + num7) - 10, (num5 + num7) + 10, m - 20, m + 15) && !PlayerLOS((num5 + num7) - 10, m)) && (!PlayerLOS((num5 + num7) + 10, m) && !PlayerLOS((num5 + num7) - 10, m - 20))) && !PlayerLOS((num5 + num7) + 10, m - 20))
                        {
                            int number = NPC.NewNPC((num5 + num7) * 0x10, m * 0x10, numArray[j], 0, 0f, 0f, 0f, 0f, 0xff);
                            if ((Game1.netMode == 2) && (number < 200))
                            {
                                NetMessage.SendData(0x17, -1, -1, "", number, 0f, 0f, 0f, 0, 0, 0);
                            }
                            flag = true;
                            break;
                        }
                    }
                    if (flag)
                    {
                        break;
                    }
                }
                if (!flag)
                {
                    NPC.NewNPC(num5 * 0x10, (worldSurface - 40) * 0x10, numArray[j], 0, 0f, 0f, 0f, 0f, 0xff);
                }
            }
            NPC.TowerActiveVortex = NPC.TowerActiveNebula = NPC.TowerActiveSolar = NPC.TowerActiveStardust = true;
            NPC.LunarApocalypseIsUp = true;
            NPC.ShieldStrengthTowerSolar = NPC.ShieldStrengthTowerVortex = NPC.ShieldStrengthTowerNebula = NPC.ShieldStrengthTowerStardust = NPC.ShieldStrengthTowerMax;
            NetMessage.SendData(0x65, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
            MessageLunarApocalypse();
        }

        public static void UnlockDoor(int i, int j)
        {
            int num = i;
            int num2 = j;
            if (Game1.tile[num, num2] != null)
            {
                while (Game1.tile[num, num2].frameY != 0x252)
                {
                    num2--;
                    if ((Game1.tile[num, num2].frameY < 0x252) || (num2 <= 0))
                    {
                        return;
                    }
                }
                Game1.PlaySound(0x16, num * 0x10, (num2 * 0x10) + 0x10, 1);
                for (int k = num2; k <= (num2 + 2); k++)
                {
                    if (Game1.tile[num, k] == null)
                    {
                        Game1.tile[num, k] = new Tile();
                    }
                    Tile tile1 = Game1.tile[num, k];
                    tile1.frameY = (short)(tile1.frameY + 0x36);
                    for (int m = 0; m < 4; m++)
                    {
                        Color newColor = new Color();
                        Dust.NewDust(new Vector2((float)(num * 0x10), (float)(k * 0x10)), 0x10, 0x10, 11, 0f, 0f, 0, newColor, 1f);
                    }
                }
            }
        }

        public static void UnspawnTravelNPC()
        {
            int index = -1;
            for (int i = 0; i < 200; i++)
            {
                if (Game1.npc[i].active && (Game1.npc[i].type == 0x170))
                {
                    index = i;
                    break;
                }
            }
            if (index >= 0)
            {
                int num3 = (int)(Game1.npc[index].Center.X / 16f);
                int num4 = (int)(Game1.npc[index].Center.Y / 16f);
                bool flag = true;
                Rectangle rectangle = new Rectangle((((num3 * 0x10) + 8) - (NPC.sWidth / 2)) - NPC.safeRangeX, (((num4 * 0x10) + 8) - (NPC.sHeight / 2)) - NPC.safeRangeY, NPC.sWidth + (NPC.safeRangeX * 2), NPC.sHeight + (NPC.safeRangeY * 2));
                for (int j = 0; j < 0xff; j++)
                {
                    if (Game1.player[j].active)
                    {
                        Rectangle rectangle2 = new Rectangle((int)Game1.player[j].position.X, (int)Game1.player[j].position.Y, Game1.player[j].width, Game1.player[j].height);
                        if (rectangle2.Intersects(rectangle))
                        {
                            flag = false;
                            break;
                        }
                    }
                }
                if (flag)
                {
                    string name = Game1.npc[index].name;
                    if (Game1.npc[index].displayName != "")
                    {
                        if (Lang.lang <= 1)
                        {
                            name = Game1.npc[index].displayName + " " + Lang.the + Game1.npc[index].name;
                        }
                        else
                        {
                            name = Game1.npc[index].displayName;
                        }
                    }
                    if (Game1.netMode == 0)
                    {
                        Game1.NewText(name + " " + Lang.misc[0x23], 50, 0x7d, 0xff, false);
                    }
                    else if (Game1.netMode == 2)
                    {
                        NetMessage.SendData(0x19, -1, -1, name + " " + Lang.misc[0x23], 0xff, 50f, 125f, 255f, 0, 0, 0);
                    }
                    Game1.npc[index].active = false;
                    Game1.npc[index].netSkip = -1;
                    Game1.npc[index].life = 0;
                    NetMessage.SendData(0x17, -1, -1, "", index, 0f, 0f, 0f, 0, 0, 0);
                }
            }
        }

        public static void UpdateLunarApocalypse()
        {
            if (NPC.LunarApocalypseIsUp)
            {
                bool flag = false;
                bool flag2 = false;
                bool flag3 = false;
                bool flag4 = false;
                bool flag5 = false;
                for (int i = 0; i < 200; i++)
                {
                    if (Game1.npc[i].active)
                    {
                        switch (Game1.npc[i].type)
                        {
                            case 0x1ed:
                                flag5 = true;
                                break;

                            case 0x1fb:
                                flag4 = true;
                                break;

                            case 0x205:
                                flag2 = true;
                                break;

                            case 0x18e:
                                goto Label_0070;

                            case 0x1a6:
                                goto Label_0078;
                        }
                    }
                    continue;
                Label_0070:
                    flag = true;
                    continue;
                Label_0078:
                    flag3 = true;
                }
                if (!flag2)
                {
                    NPC.TowerActiveSolar = false;
                }
                if (!flag3)
                {
                    NPC.TowerActiveVortex = false;
                }
                if (!flag4)
                {
                    NPC.TowerActiveNebula = false;
                }
                if (!flag5)
                {
                    NPC.TowerActiveStardust = false;
                }
                if (((!NPC.TowerActiveSolar && !NPC.TowerActiveVortex) && (!NPC.TowerActiveNebula && !NPC.TowerActiveStardust)) && !flag)
                {
                    NPC.LunarApocalypseIsUp = false;
                    NPC.MoonLordCountdown = 0xe10;
                    NetMessage.SendData(0x67, -1, -1, "", NPC.MoonLordCountdown, 0f, 0f, 0f, 0, 0, 0);
                    if (Game1.netMode == 0)
                    {
                        Game1.NewText(Lang.misc[0x34], 50, 0xff, 130, false);
                    }
                    else if (Game1.netMode == 2)
                    {
                        NetMessage.SendData(0x19, -1, -1, Lang.misc[0x34], 0xff, 50f, 255f, 130f, 0, 0, 0);
                    }
                }
            }
        }

        public static bool UpdateMapTile(int i, int j, bool addToList = true)
        {
            bool flag = false;
            if (((Game1.mapEnabled && !noMapUpdate) && (!gen && (Game1.Map[i, j].Light > 0))) && (Game1.Map.UpdateType(i, j) && addToList))
            {
                flag = true;
                if (MapHelper.numUpdateTile < (MapHelper.maxUpdateTile - 1))
                {
                    MapHelper.updateTileX[MapHelper.numUpdateTile] = (short)i;
                    MapHelper.updateTileY[MapHelper.numUpdateTile] = (short)j;
                    MapHelper.numUpdateTile++;
                    return flag;
                }
                Game1.refreshMap = true;
            }
            return flag;
        }

        public static void UpdateWorld()
        {
            int wallDist = 20;
            int maxValue = 40;
            if (Game1.expertMode)
            {
                maxValue = 30;
            }
            Wiring.UpdateMech();
            TileEntity.UpdateStart();
            foreach (TileEntity entity in TileEntity.ByID.Values)
            {
                entity.Update();
            }
            TileEntity.UpdateEnd();
            UpdateLunarApocalypse();
            if (Game1.netMode != 1)
            {
                totalD++;
                if (totalD >= 30)
                {
                    totalD = 0;
                    CountTiles(totalX);
                    totalX++;
                    if (totalX >= Game1.maxTilesX)
                    {
                        totalX = 0;
                    }
                }
            }
            if (Game1.worldRate != 0)
            {
                Liquid.skipCount++;
                if (Liquid.skipCount > 1)
                {
                    Liquid.UpdateLiquid();
                    Liquid.skipCount = 0;
                }
                float num3 = 3E-05f * Game1.worldRate;
                float num4 = 1.5E-05f * Game1.worldRate;
                bool flag = false;
                spawnDelay++;
                if ((Game1.invasionType > 0) || Game1.eclipse)
                {
                    spawnDelay = 0;
                }
                if (spawnDelay >= 20)
                {
                    flag = true;
                    spawnDelay = 0;
                    if (spawnNPC != 0x25)
                    {
                        for (int k = 0; k < 200; k++)
                        {
                            if ((Game1.npc[k].active && Game1.npc[k].homeless) && (Game1.npc[k].townNPC && (Game1.npc[k].type != 0x170)))
                            {
                                spawnNPC = Game1.npc[k].type;
                                break;
                            }
                        }
                    }
                }
                float num6 = (Game1.maxTilesX * Game1.maxTilesY) * num3;
                int num7 = 0x97;
                int num8 = (int)MathHelper.Lerp((float)num7, num7 * 2.8f, MathHelper.Clamp((((float)Game1.maxTilesX) / 4200f) - 1f, 0f, 1f));
                for (int i = 0; i < num6; i++)
                {
                    if ((Game1.rand.Next(100) == 0) && (Game1.rand.Next(num8) == 0))
                    {
                        PlantAlch();
                    }
                    int x = genRand.Next(10, Game1.maxTilesX - 10);
                    int y = genRand.Next(10, ((int)Game1.worldSurface) - 1);
                    int num12 = x - 1;
                    int num13 = x + 2;
                    int num14 = y - 1;
                    int num15 = y + 2;
                    if (num12 < 10)
                    {
                        num12 = 10;
                    }
                    if (num13 > (Game1.maxTilesX - 10))
                    {
                        num13 = Game1.maxTilesX - 10;
                    }
                    if (num14 < 10)
                    {
                        num14 = 10;
                    }
                    if (num15 > (Game1.maxTilesY - 10))
                    {
                        num15 = Game1.maxTilesY - 10;
                    }
                    if (Game1.tile[x, y] != null)
                    {
                        if (Game1.tileAlch[Game1.tile[x, y].type])
                        {
                            GrowAlch(x, y);
                        }
                        if (Game1.tile[x, y].liquid > 0x20)
                        {
                            if (Game1.tile[x, y].active() && ((((Game1.tile[x, y].type == 3) || (Game1.tile[x, y].type == 20)) || ((Game1.tile[x, y].type == 0x18) || (Game1.tile[x, y].type == 0x1b))) || ((Game1.tile[x, y].type == 0x49) || (Game1.tile[x, y].type == 0xc9))))
                            {
                                KillTile(x, y, false, false, false);
                                if (Game1.netMode == 2)
                                {
                                    NetMessage.SendData(0x11, -1, -1, "", 0, (float)x, (float)y, 0f, 0, 0, 0);
                                }
                            }
                        }
                        else if (Game1.tile[x, y].nactive())
                        {
                            hardUpdateWorld(x, y);
                            if (Game1.rand.Next(0xbb8) == 0)
                            {
                                plantDye(x, y, false);
                            }
                            if (Game1.rand.Next(0x2329) == 0)
                            {
                                plantDye(x, y, true);
                            }
                            if (Game1.tile[x, y].type == 80)
                            {
                                if (genRand.Next(15) == 0)
                                {
                                    GrowCactus(x, y);
                                }
                            }
                            else if (TileID.Sets.Conversion.Sand[Game1.tile[x, y].type])
                            {
                                if (!Game1.tile[x, num14].active())
                                {
                                    if ((x < 250) || (x > (Game1.maxTilesX - 250)))
                                    {
                                        if (genRand.Next(500) == 0)
                                        {
                                            int num16 = 7;
                                            int num17 = 6;
                                            int num18 = 0;
                                            for (int m = x - num16; m <= (x + num16); m++)
                                            {
                                                for (int n = num14 - num16; n <= (num14 + num16); n++)
                                                {
                                                    if (Game1.tile[m, n].active() && (Game1.tile[m, n].type == 0x51))
                                                    {
                                                        num18++;
                                                    }
                                                }
                                            }
                                            if ((((num18 < num17) && (Game1.tile[x, num14].liquid == 0xff)) && ((Game1.tile[x, num14 - 1].liquid == 0xff) && (Game1.tile[x, num14 - 2].liquid == 0xff))) && ((Game1.tile[x, num14 - 3].liquid == 0xff) && (Game1.tile[x, num14 - 4].liquid == 0xff)))
                                            {
                                                PlaceTile(x, num14, 0x51, true, false, -1, 0);
                                                if ((Game1.netMode == 2) && Game1.tile[x, num14].active())
                                                {
                                                    NetMessage.SendTileSquare(-1, x, num14, 1);
                                                }
                                            }
                                        }
                                    }
                                    else if (((x > 400) && (x < (Game1.maxTilesX - 400))) && (genRand.Next(300) == 0))
                                    {
                                        GrowCactus(x, y);
                                    }
                                }
                            }
                            else if (((Game1.tile[x, y].type == 0x74) || (Game1.tile[x, y].type == 0x70)) || (Game1.tile[x, y].type == 0xea))
                            {
                                if ((!Game1.tile[x, num14].active() && (x > 400)) && ((x < (Game1.maxTilesX - 400)) && (genRand.Next(300) == 0)))
                                {
                                    GrowCactus(x, y);
                                }
                            }
                            else if (((Game1.tile[x, y].type == 0x93) || (Game1.tile[x, y].type == 0xa1)) || (((Game1.tile[x, y].type == 0xa3) || (Game1.tile[x, y].type == 0xa4)) || (Game1.tile[x, y].type == 200)))
                            {
                                if (((Game1.rand.Next(10) == 0) && !Game1.tile[x, y + 1].active()) && !Game1.tile[x, y + 2].active())
                                {
                                    int num21 = x - 3;
                                    int num22 = x + 4;
                                    int num23 = 0;
                                    for (int num24 = num21; num24 < num22; num24++)
                                    {
                                        if ((Game1.tile[num24, y].type == 0xa5) && Game1.tile[num24, y].active())
                                        {
                                            num23++;
                                        }
                                        if ((Game1.tile[num24, y + 1].type == 0xa5) && Game1.tile[num24, y + 1].active())
                                        {
                                            num23++;
                                        }
                                        if ((Game1.tile[num24, y + 2].type == 0xa5) && Game1.tile[num24, y + 2].active())
                                        {
                                            num23++;
                                        }
                                        if ((Game1.tile[num24, y + 3].type == 0xa5) && Game1.tile[num24, y + 3].active())
                                        {
                                            num23++;
                                        }
                                    }
                                    if (num23 < 2)
                                    {
                                        PlaceTight(x, y + 1, 0xa5, false);
                                        SquareTileFrame(x, y + 1, true);
                                        if ((Game1.netMode == 2) && Game1.tile[x, y + 1].active())
                                        {
                                            NetMessage.SendTileSquare(-1, x, y + 1, 3);
                                        }
                                    }
                                }
                            }
                            else if (Game1.tile[x, y].type == 0xfe)
                            {
                                if (Game1.rand.Next((Game1.tile[x, y].frameX + 10) / 10) == 0)
                                {
                                    GrowPumpkin(x, y, 0xfe);
                                }
                            }
                            else if ((Game1.tile[x, y].type == 0x4e) || (Game1.tile[x, y].type == 380))
                            {
                                if (!Game1.tile[x, num14].active() && (genRand.Next(2) == 0))
                                {
                                    PlaceTile(x, num14, 3, true, false, -1, 0);
                                    if ((Game1.netMode == 2) && Game1.tile[x, num14].active())
                                    {
                                        NetMessage.SendTileSquare(-1, x, num14, 1);
                                    }
                                }
                            }
                            else if ((((Game1.tile[x, y].type == 2) || (Game1.tile[x, y].type == 0x17)) || ((Game1.tile[x, y].type == 0x20) || (Game1.tile[x, y].type == 0x6d))) || ((Game1.tile[x, y].type == 0xc7) || (Game1.tile[x, y].type == 0x160)))
                            {
                                int type = Game1.tile[x, y].type;
                                if ((Game1.halloween && (genRand.Next(0x4b) == 0)) && ((type == 2) || (type == 0x6d)))
                                {
                                    int num26 = 100;
                                    int num27 = 0;
                                    for (int num28 = x - num26; num28 < (x + num26); num28 += 2)
                                    {
                                        for (int num29 = y - num26; num29 < (y + num26); num29 += 2)
                                        {
                                            if ((((num28 > 1) && (num28 < (Game1.maxTilesX - 2))) && ((num29 > 1) && (num29 < (Game1.maxTilesY - 2)))) && (Game1.tile[num28, num29].active() && (Game1.tile[num28, num29].type == 0xfe)))
                                            {
                                                num27++;
                                            }
                                        }
                                    }
                                    if (num27 < 6)
                                    {
                                        PlacePumpkin(x, num14);
                                        if ((Game1.netMode == 2) && (Game1.tile[x, num14].type == 0xfe))
                                        {
                                            NetMessage.SendTileSquare(-1, x, num14, 4);
                                        }
                                    }
                                }
                                if ((!Game1.tile[x, num14].active() && (genRand.Next(12) == 0)) && ((type == 2) && PlaceTile(x, num14, 3, true, false, -1, 0)))
                                {
                                    Game1.tile[x, num14].color(Game1.tile[x, y].color());
                                    if (Game1.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, x, num14, 1);
                                    }
                                }
                                if ((!Game1.tile[x, num14].active() && (genRand.Next(10) == 0)) && ((type == 0x17) && PlaceTile(x, num14, 0x18, true, false, -1, 0)))
                                {
                                    Game1.tile[x, num14].color(Game1.tile[x, y].color());
                                    if (Game1.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, x, num14, 1);
                                    }
                                }
                                if ((!Game1.tile[x, num14].active() && (genRand.Next(10) == 0)) && ((type == 0x6d) && PlaceTile(x, num14, 110, true, false, -1, 0)))
                                {
                                    Game1.tile[x, num14].color(Game1.tile[x, y].color());
                                    if (Game1.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, x, num14, 1);
                                    }
                                }
                                if ((!Game1.tile[x, num14].active() && (genRand.Next(10) == 0)) && ((type == 0xc7) && PlaceTile(x, num14, 0xc9, true, false, -1, 0)))
                                {
                                    Game1.tile[x, num14].color(Game1.tile[x, y].color());
                                    if (Game1.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, x, num14, 1);
                                    }
                                }
                                bool flag2 = false;
                                for (int num30 = num12; num30 < num13; num30++)
                                {
                                    for (int num31 = num14; num31 < num15; num31++)
                                    {
                                        if (((x != num30) || (y != num31)) && Game1.tile[num30, num31].active())
                                        {
                                            switch (type)
                                            {
                                                case 0x20:
                                                    type = 0x17;
                                                    break;

                                                case 0x160:
                                                    type = 0xc7;
                                                    break;
                                            }
                                            if ((((Game1.tile[num30, num31].type == 0) || ((type == 0x17) && (Game1.tile[num30, num31].type == 2))) || ((type == 0xc7) && (Game1.tile[num30, num31].type == 2))) || ((type == 0x17) && (Game1.tile[num30, num31].type == 0x6d)))
                                            {
                                                SpreadGrass(num30, num31, 0, type, false, Game1.tile[x, y].color());
                                                if (type == 0x17)
                                                {
                                                    SpreadGrass(num30, num31, 2, type, false, Game1.tile[x, y].color());
                                                }
                                                if (type == 0x17)
                                                {
                                                    SpreadGrass(num30, num31, 0x6d, type, false, Game1.tile[x, y].color());
                                                }
                                                if (type == 0xc7)
                                                {
                                                    SpreadGrass(num30, num31, 2, type, false, Game1.tile[x, y].color());
                                                }
                                                if (type == 0xc7)
                                                {
                                                    SpreadGrass(num30, num31, 0x6d, type, false, Game1.tile[x, y].color());
                                                }
                                                if (Game1.tile[num30, num31].type == type)
                                                {
                                                    SquareTileFrame(num30, num31, true);
                                                    flag2 = true;
                                                }
                                            }
                                            if ((((Game1.tile[num30, num31].type == 0) || ((type == 0x6d) && (Game1.tile[num30, num31].type == 2))) || ((type == 0x6d) && (Game1.tile[num30, num31].type == 0x17))) || ((type == 0x6d) && (Game1.tile[num30, num31].type == 0xc7)))
                                            {
                                                SpreadGrass(num30, num31, 0, type, false, Game1.tile[x, y].color());
                                                if (type == 0x6d)
                                                {
                                                    SpreadGrass(num30, num31, 2, type, false, Game1.tile[x, y].color());
                                                }
                                                if (type == 0x6d)
                                                {
                                                    SpreadGrass(num30, num31, 0x17, type, false, Game1.tile[x, y].color());
                                                }
                                                if (type == 0x6d)
                                                {
                                                    SpreadGrass(num30, num31, 0xc7, type, false, Game1.tile[x, y].color());
                                                }
                                                if (Game1.tile[num30, num31].type == type)
                                                {
                                                    SquareTileFrame(num30, num31, true);
                                                    flag2 = true;
                                                }
                                            }
                                        }
                                    }
                                }
                                if ((Game1.netMode == 2) && flag2)
                                {
                                    NetMessage.SendTileSquare(-1, x, y, 3);
                                }
                            }
                            else if (((Game1.tile[x, y].type == 20) && (genRand.Next(20) == 0)) && !PlayerLOS(x, y))
                            {
                                if ((Game1.tile[x, y].frameX >= 0x144) && (Game1.tile[x, y].frameX < 540))
                                {
                                    GrowPalmTree(x, y);
                                }
                                else
                                {
                                    GrowTree(x, y);
                                }
                            }
                            if (((Game1.tile[x, y].type == 3) && (genRand.Next(20) == 0)) && (Game1.tile[x, y].frameX != 0x90))
                            {
                                if (((Game1.tile[x, y].frameX < 0x90) && (Game1.rand.Next(10) == 0)) || (((Game1.tile[x, y + 1].type == 0x4e) || (Game1.tile[x, y + 1].type == 380)) && (Game1.rand.Next(2) == 0)))
                                {
                                    Game1.tile[x, y].frameX = (short)(0xc6 + (genRand.Next(10) * 0x12));
                                }
                                Game1.tile[x, y].type = 0x49;
                                if (Game1.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, x, y, 3);
                                }
                            }
                            if (((Game1.tile[x, y].type == 110) && (genRand.Next(20) == 0)) && (Game1.tile[x, y].frameX < 0x90))
                            {
                                Game1.tile[x, y].type = 0x71;
                                if (Game1.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, x, y, 3);
                                }
                            }
                            if ((Game1.tile[x, y].type == 0x20) && (genRand.Next(3) == 0))
                            {
                                int num32 = x;
                                int num33 = y;
                                int num34 = 0;
                                if (Game1.tile[num32 + 1, num33].active() && (Game1.tile[num32 + 1, num33].type == 0x20))
                                {
                                    num34++;
                                }
                                if (Game1.tile[num32 - 1, num33].active() && (Game1.tile[num32 - 1, num33].type == 0x20))
                                {
                                    num34++;
                                }
                                if (Game1.tile[num32, num33 + 1].active() && (Game1.tile[num32, num33 + 1].type == 0x20))
                                {
                                    num34++;
                                }
                                if (Game1.tile[num32, num33 - 1].active() && (Game1.tile[num32, num33 - 1].type == 0x20))
                                {
                                    num34++;
                                }
                                if ((num34 < 3) || (Game1.tile[x, y].type == 0x17))
                                {
                                    switch (genRand.Next(4))
                                    {
                                        case 0:
                                            num33--;
                                            break;

                                        case 1:
                                            num33++;
                                            break;

                                        case 2:
                                            num32--;
                                            break;

                                        case 3:
                                            num32++;
                                            break;
                                    }
                                    if (!Game1.tile[num32, num33].active())
                                    {
                                        num34 = 0;
                                        if (Game1.tile[num32 + 1, num33].active() && (Game1.tile[num32 + 1, num33].type == 0x20))
                                        {
                                            num34++;
                                        }
                                        if (Game1.tile[num32 - 1, num33].active() && (Game1.tile[num32 - 1, num33].type == 0x20))
                                        {
                                            num34++;
                                        }
                                        if (Game1.tile[num32, num33 + 1].active() && (Game1.tile[num32, num33 + 1].type == 0x20))
                                        {
                                            num34++;
                                        }
                                        if (Game1.tile[num32, num33 - 1].active() && (Game1.tile[num32, num33 - 1].type == 0x20))
                                        {
                                            num34++;
                                        }
                                        if (num34 < 2)
                                        {
                                            int num36 = 7;
                                            int num37 = num32 - num36;
                                            int num38 = num32 + num36;
                                            int num39 = num33 - num36;
                                            int num40 = num33 + num36;
                                            bool flag3 = false;
                                            for (int num41 = num37; num41 < num38; num41++)
                                            {
                                                for (int num42 = num39; num42 < num40; num42++)
                                                {
                                                    if ((((((Math.Abs((int)(num41 - num32)) * 2) + Math.Abs((int)(num42 - num33))) < 9) && Game1.tile[num41, num42].active()) && ((Game1.tile[num41, num42].type == 0x17) && Game1.tile[num41, num42 - 1].active())) && ((Game1.tile[num41, num42 - 1].type == 0x20) && (Game1.tile[num41, num42 - 1].liquid == 0)))
                                                    {
                                                        flag3 = true;
                                                        break;
                                                    }
                                                }
                                            }
                                            if (flag3)
                                            {
                                                Game1.tile[num32, num33].type = 0x20;
                                                Game1.tile[num32, num33].active(true);
                                                SquareTileFrame(num32, num33, true);
                                                if (Game1.netMode == 2)
                                                {
                                                    NetMessage.SendTileSquare(-1, num32, num33, 3);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if ((Game1.tile[x, y].type == 0x160) && (genRand.Next(3) == 0))
                            {
                                GrowSpike(x, y, 0x160, 0xc7);
                            }
                        }
                        else if (flag && (spawnNPC > 0))
                        {
                            if (Game1.tile[x, y].wall == 0x22)
                            {
                                if (Game1.rand.Next(4) == 0)
                                {
                                    SpawnNPC(x, y);
                                }
                            }
                            else
                            {
                                SpawnNPC(x, y);
                            }
                        }
                        if (((Game1.tile[x, y].wall == 0x51) || (Game1.tile[x, y].wall == 0x53)) || ((Game1.tile[x, y].type == 0xc7) && Game1.tile[x, y].active()))
                        {
                            int tileX = x + genRand.Next(-2, 3);
                            int tileY = y + genRand.Next(-2, 3);
                            if ((Game1.tile[tileX, tileY].wall >= 0x3f) && (Game1.tile[tileX, tileY].wall <= 0x44))
                            {
                                bool flag4 = false;
                                for (int num45 = x - wallDist; num45 < (x + wallDist); num45++)
                                {
                                    for (int num46 = y - wallDist; num46 < (y + wallDist); num46++)
                                    {
                                        if (Game1.tile[x, y].active())
                                        {
                                            switch (Game1.tile[x, y].type)
                                            {
                                                case 0xc7:
                                                case 200:
                                                case 0xc9:
                                                case 0xcb:
                                                case 0xcd:
                                                case 0xea:
                                                case 0x160:
                                                    {
                                                        flag4 = true;
                                                        continue;
                                                    }
                                            }
                                        }
                                    }
                                }
                                if (flag4)
                                {
                                    Game1.tile[tileX, tileY].wall = 0x51;
                                    if (Game1.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, tileX, tileY, 3);
                                    }
                                }
                            }
                        }
                        if (((Game1.tile[x, y].wall == 0x45) || (Game1.tile[x, y].wall == 3)) || ((Game1.tile[x, y].type == 0x17) && Game1.tile[x, y].active()))
                        {
                            int num48 = x + genRand.Next(-2, 3);
                            int num49 = y + genRand.Next(-2, 3);
                            if ((Game1.tile[num48, num49].wall >= 0x3f) && (Game1.tile[num48, num49].wall <= 0x44))
                            {
                                bool flag5 = false;
                                for (int num50 = x - wallDist; num50 < (x + wallDist); num50++)
                                {
                                    for (int num51 = y - wallDist; num51 < (y + wallDist); num51++)
                                    {
                                        if (Game1.tile[num50, num51].active())
                                        {
                                            switch (Game1.tile[num50, num51].type)
                                            {
                                                case 0x16:
                                                case 0x17:
                                                case 0x18:
                                                case 0x19:
                                                case 0x20:
                                                case 0x70:
                                                case 0xa3:
                                                    {
                                                        flag5 = true;
                                                        continue;
                                                    }
                                            }
                                        }
                                    }
                                }
                                if (flag5)
                                {
                                    Game1.tile[num48, num49].wall = 0x45;
                                    if (Game1.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, num48, num49, 3);
                                    }
                                }
                            }
                        }
                        if ((Game1.tile[x, y].wall == 70) || ((Game1.tile[x, y].type == 0x6d) && Game1.tile[x, y].active()))
                        {
                            int num53 = x + genRand.Next(-2, 3);
                            int num54 = y + genRand.Next(-2, 3);
                            if (((Game1.tile[num53, num54].wall == 0x3f) || (Game1.tile[num53, num54].wall == 0x41)) || ((Game1.tile[num53, num54].wall == 0x42) || (Game1.tile[num53, num54].wall == 0x44)))
                            {
                                bool flag6 = false;
                                for (int num55 = x - wallDist; num55 < (x + wallDist); num55++)
                                {
                                    for (int num56 = y - wallDist; num56 < (y + wallDist); num56++)
                                    {
                                        if (Game1.tile[num55, num56].active())
                                        {
                                            switch (Game1.tile[num55, num56].type)
                                            {
                                                case 0x6d:
                                                case 110:
                                                case 0x71:
                                                case 0x73:
                                                case 0x74:
                                                case 0x75:
                                                case 0xa4:
                                                    {
                                                        flag6 = true;
                                                        continue;
                                                    }
                                            }
                                        }
                                    }
                                }
                                if (flag6)
                                {
                                    Game1.tile[num53, num54].wall = 70;
                                    if (Game1.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, num53, num54, 3);
                                    }
                                }
                            }
                        }
                        SpreadDesertWalls(wallDist, x, y);
                        if (Game1.tile[x, y].active())
                        {
                            if ((((Game1.tile[x, y].type == 2) || (Game1.tile[x, y].type == 0x34)) || ((Game1.tile[x, y].type == 0xc0) && (genRand.Next(10) == 0))) && (((genRand.Next(40) == 0) && !Game1.tile[x, y + 1].active()) && !Game1.tile[x, y + 1].lava()))
                            {
                                bool flag7 = false;
                                for (int num58 = y; num58 > (y - 10); num58--)
                                {
                                    if (Game1.tile[x, num58].bottomSlope())
                                    {
                                        flag7 = false;
                                        break;
                                    }
                                    if ((Game1.tile[x, num58].active() && (Game1.tile[x, num58].type == 2)) && !Game1.tile[x, num58].bottomSlope())
                                    {
                                        flag7 = true;
                                        break;
                                    }
                                }
                                if (flag7)
                                {
                                    int num59 = x;
                                    int num60 = y + 1;
                                    Game1.tile[num59, num60].type = 0x34;
                                    Game1.tile[num59, num60].active(true);
                                    Game1.tile[num59, num60].color(Game1.tile[x, y].color());
                                    SquareTileFrame(num59, num60, true);
                                    if (Game1.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, num59, num60, 3);
                                    }
                                }
                            }
                            if (Game1.tile[x, y].type == 70)
                            {
                                int grass = Game1.tile[x, y].type;
                                if (!Game1.tile[x, num14].active() && (genRand.Next(10) == 0))
                                {
                                    PlaceTile(x, num14, 0x47, true, false, -1, 0);
                                    if (Game1.tile[x, num14].active())
                                    {
                                        Game1.tile[x, num14].color(Game1.tile[x, y].color());
                                    }
                                    if ((Game1.netMode == 2) && Game1.tile[x, num14].active())
                                    {
                                        NetMessage.SendTileSquare(-1, x, num14, 1);
                                    }
                                }
                                if ((genRand.Next(100) == 0) && !PlayerLOS(x, y))
                                {
                                    GrowTree(x, y);
                                }
                                bool flag8 = false;
                                for (int num62 = num12; num62 < num13; num62++)
                                {
                                    for (int num63 = num14; num63 < num15; num63++)
                                    {
                                        if (((x != num62) || (y != num63)) && (Game1.tile[num62, num63].active() && (Game1.tile[num62, num63].type == 0x3b)))
                                        {
                                            SpreadGrass(num62, num63, 0x3b, grass, false, Game1.tile[x, y].color());
                                            if (Game1.tile[num62, num63].type == grass)
                                            {
                                                SquareTileFrame(num62, num63, true);
                                                flag8 = true;
                                            }
                                        }
                                    }
                                }
                                if ((Game1.netMode == 2) && flag8)
                                {
                                    NetMessage.SendTileSquare(-1, x, y, 3);
                                }
                            }
                            if (Game1.tile[x, y].type == 60)
                            {
                                int num64 = Game1.tile[x, y].type;
                                if (!Game1.tile[x, num14].active() && (genRand.Next(7) == 0))
                                {
                                    PlaceTile(x, num14, 0x3d, true, false, -1, 0);
                                    if (Game1.tile[x, num14].active())
                                    {
                                        Game1.tile[x, num14].color(Game1.tile[x, y].color());
                                    }
                                    if ((Game1.netMode == 2) && Game1.tile[x, num14].active())
                                    {
                                        NetMessage.SendTileSquare(-1, x, num14, 1);
                                    }
                                }
                                else if ((genRand.Next(500) == 0) && ((!Game1.tile[x, num14].active() || (Game1.tile[x, num14].type == 0x3d)) || ((Game1.tile[x, num14].type == 0x4a) || (Game1.tile[x, num14].type == 0x45))))
                                {
                                    if (!PlayerLOS(x, y))
                                    {
                                        GrowTree(x, y);
                                    }
                                }
                                else if ((genRand.Next(0x19) == 0) && (Game1.tile[x, num14].liquid == 0))
                                {
                                    PlaceJunglePlant(x, num14, 0xe9, genRand.Next(8), 0);
                                    if (Game1.tile[x, num14].type == 0xe9)
                                    {
                                        if (Game1.netMode == 2)
                                        {
                                            NetMessage.SendTileSquare(-1, x, num14, 4);
                                        }
                                        else
                                        {
                                            PlaceJunglePlant(x, num14, 0xe9, genRand.Next(12), 1);
                                            if ((Game1.tile[x, num14].type == 0xe9) && (Game1.netMode == 2))
                                            {
                                                NetMessage.SendTileSquare(-1, x, num14, 3);
                                            }
                                        }
                                    }
                                }
                                bool flag9 = false;
                                for (int num65 = num12; num65 < num13; num65++)
                                {
                                    for (int num66 = num14; num66 < num15; num66++)
                                    {
                                        if (((x != num65) || (y != num66)) && (Game1.tile[num65, num66].active() && (Game1.tile[num65, num66].type == 0x3b)))
                                        {
                                            SpreadGrass(num65, num66, 0x3b, num64, false, Game1.tile[x, y].color());
                                            if (Game1.tile[num65, num66].type == num64)
                                            {
                                                SquareTileFrame(num65, num66, true);
                                                flag9 = true;
                                            }
                                        }
                                    }
                                }
                                if ((Game1.netMode == 2) && flag9)
                                {
                                    NetMessage.SendTileSquare(-1, x, y, 3);
                                }
                            }
                            if (((Game1.tile[x, y].type == 0x3d) && (genRand.Next(3) == 0)) && (Game1.tile[x, y].frameX < 0x90))
                            {
                                if (Game1.rand.Next(4) == 0)
                                {
                                    Game1.tile[x, y].frameX = (short)(0xa2 + (genRand.Next(8) * 0x12));
                                }
                                Game1.tile[x, y].type = 0x4a;
                                if (Game1.netMode == 2)
                                {
                                    NetMessage.SendTileSquare(-1, x, y, 3);
                                }
                            }
                            if (((Game1.tile[x, y].type == 60) || (Game1.tile[x, y].type == 0x3e)) && (((genRand.Next(15) == 0) && !Game1.tile[x, y + 1].active()) && !Game1.tile[x, y + 1].lava()))
                            {
                                bool flag10 = false;
                                for (int num67 = y; num67 > (y - 10); num67--)
                                {
                                    if (Game1.tile[x, num67].bottomSlope())
                                    {
                                        flag10 = false;
                                        break;
                                    }
                                    if ((Game1.tile[x, num67].active() && (Game1.tile[x, num67].type == 60)) && !Game1.tile[x, num67].bottomSlope())
                                    {
                                        flag10 = true;
                                        break;
                                    }
                                }
                                if (flag10)
                                {
                                    int num68 = x;
                                    int num69 = y + 1;
                                    Game1.tile[num68, num69].type = 0x3e;
                                    Game1.tile[num68, num69].active(true);
                                    SquareTileFrame(num68, num69, true);
                                    if (Game1.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, num68, num69, 3);
                                    }
                                }
                            }
                            if (((Game1.tile[x, y].type == 0x6d) || (Game1.tile[x, y].type == 0x73)) && (((genRand.Next(15) == 0) && !Game1.tile[x, y + 1].active()) && !Game1.tile[x, y + 1].lava()))
                            {
                                bool flag11 = false;
                                for (int num70 = y; num70 > (y - 10); num70--)
                                {
                                    if (Game1.tile[x, num70].bottomSlope())
                                    {
                                        flag11 = false;
                                        break;
                                    }
                                    if ((Game1.tile[x, num70].active() && (Game1.tile[x, num70].type == 0x6d)) && !Game1.tile[x, num70].bottomSlope())
                                    {
                                        flag11 = true;
                                        break;
                                    }
                                }
                                if (flag11)
                                {
                                    int num71 = x;
                                    int num72 = y + 1;
                                    Game1.tile[num71, num72].type = 0x73;
                                    Game1.tile[num71, num72].active(true);
                                    SquareTileFrame(num71, num72, true);
                                    if (Game1.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, num71, num72, 3);
                                    }
                                }
                            }
                            if (((Game1.tile[x, y].type == 0xc7) || (Game1.tile[x, y].type == 0xcd)) && (((genRand.Next(15) == 0) && !Game1.tile[x, y + 1].active()) && !Game1.tile[x, y + 1].lava()))
                            {
                                bool flag12 = false;
                                for (int num73 = y; num73 > (y - 10); num73--)
                                {
                                    if (Game1.tile[x, num73].bottomSlope())
                                    {
                                        flag12 = false;
                                        break;
                                    }
                                    if ((Game1.tile[x, num73].active() && (Game1.tile[x, num73].type == 0xc7)) && !Game1.tile[x, num73].bottomSlope())
                                    {
                                        flag12 = true;
                                        break;
                                    }
                                }
                                if (flag12)
                                {
                                    int num74 = x;
                                    int num75 = y + 1;
                                    Game1.tile[num74, num75].type = 0xcd;
                                    Game1.tile[num74, num75].active(true);
                                    SquareTileFrame(num74, num75, true);
                                    if (Game1.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, num74, num75, 3);
                                    }
                                }
                            }
                        }
                    }
                }
                for (int j = 0; j < ((Game1.maxTilesX * Game1.maxTilesY) * num4); j++)
                {
                    int num77 = genRand.Next(10, Game1.maxTilesX - 10);
                    int num78 = genRand.Next(((int)Game1.worldSurface) - 1, Game1.maxTilesY - 20);
                    int num79 = num77 - 1;
                    int num80 = num77 + 2;
                    int num81 = num78 - 1;
                    int num82 = num78 + 2;
                    if (num79 < 10)
                    {
                        num79 = 10;
                    }
                    if (num80 > (Game1.maxTilesX - 10))
                    {
                        num80 = Game1.maxTilesX - 10;
                    }
                    if (num81 < 10)
                    {
                        num81 = 10;
                    }
                    if (num82 > (Game1.maxTilesY - 10))
                    {
                        num82 = Game1.maxTilesY - 10;
                    }
                    if (Game1.tile[num77, num78] != null)
                    {
                        if (Game1.tileAlch[Game1.tile[num77, num78].type])
                        {
                            GrowAlch(num77, num78);
                        }
                        if (Game1.tile[num77, num78].liquid <= 0x20)
                        {
                            if (Game1.tile[num77, num78].nactive())
                            {
                                hardUpdateWorld(num77, num78);
                                if (Game1.rand.Next(0xbb8) == 0)
                                {
                                    plantDye(num77, num78, false);
                                }
                                if (Game1.rand.Next(0x1194) == 0)
                                {
                                    plantDye(num77, num78, true);
                                }
                                if (((Game1.tile[num77, num78].type == 0x17) && !Game1.tile[num77, num81].active()) && (genRand.Next(1) == 0))
                                {
                                    PlaceTile(num77, num81, 0x18, true, false, -1, 0);
                                    if ((Game1.netMode == 2) && Game1.tile[num77, num81].active())
                                    {
                                        NetMessage.SendTileSquare(-1, num77, num81, 1);
                                    }
                                }
                                if ((Game1.tile[num77, num78].type == 0x20) && (genRand.Next(3) == 0))
                                {
                                    int num83 = num77;
                                    int num84 = num78;
                                    int num85 = 0;
                                    if (Game1.tile[num83 + 1, num84].active() && (Game1.tile[num83 + 1, num84].type == 0x20))
                                    {
                                        num85++;
                                    }
                                    if (Game1.tile[num83 - 1, num84].active() && (Game1.tile[num83 - 1, num84].type == 0x20))
                                    {
                                        num85++;
                                    }
                                    if (Game1.tile[num83, num84 + 1].active() && (Game1.tile[num83, num84 + 1].type == 0x20))
                                    {
                                        num85++;
                                    }
                                    if (Game1.tile[num83, num84 - 1].active() && (Game1.tile[num83, num84 - 1].type == 0x20))
                                    {
                                        num85++;
                                    }
                                    if ((num85 < 3) || (Game1.tile[num77, num78].type == 0x17))
                                    {
                                        switch (genRand.Next(4))
                                        {
                                            case 0:
                                                num84--;
                                                break;

                                            case 1:
                                                num84++;
                                                break;

                                            case 2:
                                                num83--;
                                                break;

                                            case 3:
                                                num83++;
                                                break;
                                        }
                                        if (!Game1.tile[num83, num84].active())
                                        {
                                            num85 = 0;
                                            if (Game1.tile[num83 + 1, num84].active() && (Game1.tile[num83 + 1, num84].type == 0x20))
                                            {
                                                num85++;
                                            }
                                            if (Game1.tile[num83 - 1, num84].active() && (Game1.tile[num83 - 1, num84].type == 0x20))
                                            {
                                                num85++;
                                            }
                                            if (Game1.tile[num83, num84 + 1].active() && (Game1.tile[num83, num84 + 1].type == 0x20))
                                            {
                                                num85++;
                                            }
                                            if (Game1.tile[num83, num84 - 1].active() && (Game1.tile[num83, num84 - 1].type == 0x20))
                                            {
                                                num85++;
                                            }
                                            if (num85 < 2)
                                            {
                                                int num87 = 7;
                                                int num88 = num83 - num87;
                                                int num89 = num83 + num87;
                                                int num90 = num84 - num87;
                                                int num91 = num84 + num87;
                                                bool flag13 = false;
                                                for (int num92 = num88; num92 < num89; num92++)
                                                {
                                                    for (int num93 = num90; num93 < num91; num93++)
                                                    {
                                                        if ((((((Math.Abs((int)(num92 - num83)) * 2) + Math.Abs((int)(num93 - num84))) < 9) && Game1.tile[num92, num93].active()) && ((Game1.tile[num92, num93].type == 0x17) && Game1.tile[num92, num93 - 1].active())) && ((Game1.tile[num92, num93 - 1].type == 0x20) && (Game1.tile[num92, num93 - 1].liquid == 0)))
                                                        {
                                                            flag13 = true;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (flag13)
                                                {
                                                    Game1.tile[num83, num84].type = 0x20;
                                                    Game1.tile[num83, num84].active(true);
                                                    SquareTileFrame(num83, num84, true);
                                                    if (Game1.netMode == 2)
                                                    {
                                                        NetMessage.SendTileSquare(-1, num83, num84, 3);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if ((Game1.tile[num77, num78].type == 0x160) && (genRand.Next(3) == 0))
                                {
                                    GrowSpike(num77, num78, 0x160, 0xc7);
                                }
                                if (Game1.tile[num77, num78].type == 0xc7)
                                {
                                    int num94 = Game1.tile[num77, num78].type;
                                    bool flag14 = false;
                                    for (int num95 = num79; num95 < num80; num95++)
                                    {
                                        for (int num96 = num81; num96 < num82; num96++)
                                        {
                                            if (((num77 != num95) || (num78 != num96)) && (Game1.tile[num95, num96].active() && (Game1.tile[num95, num96].type == 0)))
                                            {
                                                SpreadGrass(num95, num96, 0, num94, false, Game1.tile[num77, num78].color());
                                                if (Game1.tile[num95, num96].type == num94)
                                                {
                                                    SquareTileFrame(num95, num96, true);
                                                    flag14 = true;
                                                }
                                            }
                                        }
                                    }
                                    if ((Game1.netMode == 2) && flag14)
                                    {
                                        NetMessage.SendTileSquare(-1, num77, num78, 3);
                                    }
                                }
                                if (Game1.tile[num77, num78].type == 60)
                                {
                                    int num97 = Game1.tile[num77, num78].type;
                                    if (!Game1.tile[num77, num81].active() && (genRand.Next(10) == 0))
                                    {
                                        PlaceTile(num77, num81, 0x3d, true, false, -1, 0);
                                        if ((Game1.netMode == 2) && Game1.tile[num77, num81].active())
                                        {
                                            NetMessage.SendTileSquare(-1, num77, num81, 1);
                                        }
                                    }
                                    else if ((genRand.Next(0x19) == 0) && (Game1.tile[num77, num81].liquid == 0))
                                    {
                                        if (((Game1.hardMode && NPC.downedMechBoss1) && (NPC.downedMechBoss2 && NPC.downedMechBoss3)) && (genRand.Next(60) == 0))
                                        {
                                            bool flag15 = true;
                                            int num98 = 150;
                                            for (int num99 = num77 - num98; num99 < (num77 + num98); num99 += 2)
                                            {
                                                for (int num100 = num78 - num98; num100 < (num78 + num98); num100 += 2)
                                                {
                                                    if ((((num99 > 1) && (num99 < (Game1.maxTilesX - 2))) && ((num100 > 1) && (num100 < (Game1.maxTilesY - 2)))) && (Game1.tile[num99, num100].active() && (Game1.tile[num99, num100].type == 0xee)))
                                                    {
                                                        flag15 = false;
                                                        break;
                                                    }
                                                }
                                            }
                                            if (flag15)
                                            {
                                                PlaceJunglePlant(num77, num81, 0xee, 0, 0);
                                                SquareTileFrame(num77, num81, true);
                                                SquareTileFrame(num77 + 1, num81 + 1, true);
                                                if ((Game1.tile[num77, num81].type == 0xee) && (Game1.netMode == 2))
                                                {
                                                    NetMessage.SendTileSquare(-1, num77, num81, 4);
                                                }
                                            }
                                        }
                                        if ((Game1.hardMode && NPC.downedMechBossAny) && (genRand.Next(maxValue) == 0))
                                        {
                                            bool flag16 = true;
                                            int num101 = 60;
                                            if (Game1.expertMode)
                                            {
                                                num101 -= 10;
                                            }
                                            for (int num102 = num77 - num101; num102 < (num77 + num101); num102 += 2)
                                            {
                                                for (int num103 = num78 - num101; num103 < (num78 + num101); num103 += 2)
                                                {
                                                    if ((((num102 > 1) && (num102 < (Game1.maxTilesX - 2))) && ((num103 > 1) && (num103 < (Game1.maxTilesY - 2)))) && (Game1.tile[num102, num103].active() && (Game1.tile[num102, num103].type == 0xec)))
                                                    {
                                                        flag16 = false;
                                                        break;
                                                    }
                                                }
                                            }
                                            if (flag16)
                                            {
                                                PlaceJunglePlant(num77, num81, 0xec, genRand.Next(3), 0);
                                                SquareTileFrame(num77, num81, true);
                                                SquareTileFrame(num77 + 1, num81 + 1, true);
                                                if ((Game1.tile[num77, num81].type == 0xec) && (Game1.netMode == 2))
                                                {
                                                    NetMessage.SendTileSquare(-1, num77, num81, 4);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            PlaceJunglePlant(num77, num81, 0xe9, genRand.Next(8), 0);
                                            if (Game1.tile[num77, num81].type == 0xe9)
                                            {
                                                if (Game1.netMode == 2)
                                                {
                                                    NetMessage.SendTileSquare(-1, num77, num81, 4);
                                                }
                                                else
                                                {
                                                    PlaceJunglePlant(num77, num81, 0xe9, genRand.Next(12), 1);
                                                    if ((Game1.tile[num77, num81].type == 0xe9) && (Game1.netMode == 2))
                                                    {
                                                        NetMessage.SendTileSquare(-1, num77, num81, 3);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    bool flag17 = false;
                                    for (int num104 = num79; num104 < num80; num104++)
                                    {
                                        for (int num105 = num81; num105 < num82; num105++)
                                        {
                                            if (((num77 != num104) || (num78 != num105)) && (Game1.tile[num104, num105].active() && (Game1.tile[num104, num105].type == 0x3b)))
                                            {
                                                SpreadGrass(num104, num105, 0x3b, num97, false, Game1.tile[num77, num78].color());
                                                if (Game1.tile[num104, num105].type == num97)
                                                {
                                                    SquareTileFrame(num104, num105, true);
                                                    flag17 = true;
                                                }
                                            }
                                        }
                                    }
                                    if ((Game1.netMode == 2) && flag17)
                                    {
                                        NetMessage.SendTileSquare(-1, num77, num78, 3);
                                    }
                                }
                                if (((Game1.tile[num77, num78].type == 0x3d) && (genRand.Next(3) == 0)) && (Game1.tile[num77, num78].frameX < 0x90))
                                {
                                    if (Game1.rand.Next(4) == 0)
                                    {
                                        Game1.tile[num77, num78].frameX = (short)(0xa2 + (genRand.Next(8) * 0x12));
                                    }
                                    Game1.tile[num77, num78].type = 0x4a;
                                    if (Game1.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, num77, num78, 3);
                                    }
                                }
                                if (((Game1.tile[num77, num78].type == 60) || (Game1.tile[num77, num78].type == 0x3e)) && (((genRand.Next(5) == 0) && !Game1.tile[num77, num78 + 1].active()) && !Game1.tile[num77, num78 + 1].lava()))
                                {
                                    bool flag18 = false;
                                    for (int num106 = num78; num106 > (num78 - 10); num106--)
                                    {
                                        if (Game1.tile[num77, num106].bottomSlope())
                                        {
                                            flag18 = false;
                                            break;
                                        }
                                        if ((Game1.tile[num77, num106].active() && (Game1.tile[num77, num106].type == 60)) && !Game1.tile[num77, num106].bottomSlope())
                                        {
                                            flag18 = true;
                                            break;
                                        }
                                    }
                                    if (flag18)
                                    {
                                        int num107 = num77;
                                        int num108 = num78 + 1;
                                        Game1.tile[num107, num108].type = 0x3e;
                                        Game1.tile[num107, num108].active(true);
                                        SquareTileFrame(num107, num108, true);
                                        if (Game1.netMode == 2)
                                        {
                                            NetMessage.SendTileSquare(-1, num107, num108, 3);
                                        }
                                    }
                                }
                                if ((Game1.tile[num77, num78].type == 0x45) && (genRand.Next(3) == 0))
                                {
                                    int num109 = num77;
                                    int num110 = num78;
                                    int num111 = 0;
                                    if (Game1.tile[num109 + 1, num110].active() && (Game1.tile[num109 + 1, num110].type == 0x45))
                                    {
                                        num111++;
                                    }
                                    if (Game1.tile[num109 - 1, num110].active() && (Game1.tile[num109 - 1, num110].type == 0x45))
                                    {
                                        num111++;
                                    }
                                    if (Game1.tile[num109, num110 + 1].active() && (Game1.tile[num109, num110 + 1].type == 0x45))
                                    {
                                        num111++;
                                    }
                                    if (Game1.tile[num109, num110 - 1].active() && (Game1.tile[num109, num110 - 1].type == 0x45))
                                    {
                                        num111++;
                                    }
                                    if ((num111 < 3) || (Game1.tile[num77, num78].type == 60))
                                    {
                                        switch (genRand.Next(4))
                                        {
                                            case 0:
                                                num110--;
                                                break;

                                            case 1:
                                                num110++;
                                                break;

                                            case 2:
                                                num109--;
                                                break;

                                            case 3:
                                                num109++;
                                                break;
                                        }
                                        if (!Game1.tile[num109, num110].active())
                                        {
                                            num111 = 0;
                                            if (Game1.tile[num109 + 1, num110].active() && (Game1.tile[num109 + 1, num110].type == 0x45))
                                            {
                                                num111++;
                                            }
                                            if (Game1.tile[num109 - 1, num110].active() && (Game1.tile[num109 - 1, num110].type == 0x45))
                                            {
                                                num111++;
                                            }
                                            if (Game1.tile[num109, num110 + 1].active() && (Game1.tile[num109, num110 + 1].type == 0x45))
                                            {
                                                num111++;
                                            }
                                            if (Game1.tile[num109, num110 - 1].active() && (Game1.tile[num109, num110 - 1].type == 0x45))
                                            {
                                                num111++;
                                            }
                                            if (num111 < 2)
                                            {
                                                int num113 = 7;
                                                int num114 = num109 - num113;
                                                int num115 = num109 + num113;
                                                int num116 = num110 - num113;
                                                int num117 = num110 + num113;
                                                bool flag19 = false;
                                                for (int num118 = num114; num118 < num115; num118++)
                                                {
                                                    for (int num119 = num116; num119 < num117; num119++)
                                                    {
                                                        if ((((((Math.Abs((int)(num118 - num109)) * 2) + Math.Abs((int)(num119 - num110))) < 9) && Game1.tile[num118, num119].active()) && ((Game1.tile[num118, num119].type == 60) && Game1.tile[num118, num119 - 1].active())) && ((Game1.tile[num118, num119 - 1].type == 0x45) && (Game1.tile[num118, num119 - 1].liquid == 0)))
                                                        {
                                                            flag19 = true;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (flag19)
                                                {
                                                    Game1.tile[num109, num110].type = 0x45;
                                                    Game1.tile[num109, num110].active(true);
                                                    SquareTileFrame(num109, num110, true);
                                                    if (Game1.netMode == 2)
                                                    {
                                                        NetMessage.SendTileSquare(-1, num109, num110, 3);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (((Game1.tile[num77, num78].type == 0x93) || (Game1.tile[num77, num78].type == 0xa1)) || (((Game1.tile[num77, num78].type == 0xa3) || (Game1.tile[num77, num78].type == 0xa4)) || (Game1.tile[num77, num78].type == 200)))
                                {
                                    if (((Game1.rand.Next(10) == 0) && !Game1.tile[num77, num78 + 1].active()) && !Game1.tile[num77, num78 + 2].active())
                                    {
                                        int num120 = num77 - 3;
                                        int num121 = num77 + 4;
                                        int num122 = 0;
                                        for (int num123 = num120; num123 < num121; num123++)
                                        {
                                            if ((Game1.tile[num123, num78].type == 0xa5) && Game1.tile[num123, num78].active())
                                            {
                                                num122++;
                                            }
                                            if ((Game1.tile[num123, num78 + 1].type == 0xa5) && Game1.tile[num123, num78 + 1].active())
                                            {
                                                num122++;
                                            }
                                            if ((Game1.tile[num123, num78 + 2].type == 0xa5) && Game1.tile[num123, num78 + 2].active())
                                            {
                                                num122++;
                                            }
                                            if ((Game1.tile[num123, num78 + 3].type == 0xa5) && Game1.tile[num123, num78 + 3].active())
                                            {
                                                num122++;
                                            }
                                        }
                                        if (num122 < 2)
                                        {
                                            PlaceTight(num77, num78 + 1, 0xa5, false);
                                            SquareTileFrame(num77, num78 + 1, true);
                                            if ((Game1.netMode == 2) && Game1.tile[num77, num78 + 1].active())
                                            {
                                                NetMessage.SendTileSquare(-1, num77, num78 + 1, 3);
                                            }
                                        }
                                    }
                                }
                                else if (Game1.tileMoss[Game1.tile[num77, num78].type])
                                {
                                    int num124 = Game1.tile[num77, num78].type;
                                    bool flag20 = false;
                                    for (int num125 = num79; num125 < num80; num125++)
                                    {
                                        for (int num126 = num81; num126 < num82; num126++)
                                        {
                                            if (((num77 != num125) || (num78 != num126)) && (Game1.tile[num125, num126].active() && (Game1.tile[num125, num126].type == 1)))
                                            {
                                                SpreadGrass(num125, num126, 1, num124, false, Game1.tile[num77, num78].color());
                                                if (Game1.tile[num125, num126].type == num124)
                                                {
                                                    SquareTileFrame(num125, num126, true);
                                                    flag20 = true;
                                                }
                                            }
                                        }
                                    }
                                    if ((Game1.netMode == 2) && flag20)
                                    {
                                        NetMessage.SendTileSquare(-1, num77, num78, 3);
                                    }
                                    if (genRand.Next(6) == 0)
                                    {
                                        int num127 = num77;
                                        int num128 = num78;
                                        switch (genRand.Next(4))
                                        {
                                            case 0:
                                                num127--;
                                                break;

                                            case 1:
                                                num127++;
                                                break;

                                            case 2:
                                                num128--;
                                                break;

                                            default:
                                                num128++;
                                                break;
                                        }
                                        if (!Game1.tile[num127, num128].active())
                                        {
                                            PlaceTile(num127, num128, 0xb8, true, false, -1, 0);
                                            if ((Game1.netMode == 2) && Game1.tile[num127, num128].active())
                                            {
                                                NetMessage.SendTileSquare(-1, num127, num128, 1);
                                            }
                                        }
                                    }
                                }
                                if (Game1.tile[num77, num78].type == 70)
                                {
                                    int num130 = Game1.tile[num77, num78].type;
                                    if (!Game1.tile[num77, num81].active() && (genRand.Next(10) == 0))
                                    {
                                        PlaceTile(num77, num81, 0x47, true, false, -1, 0);
                                        if ((Game1.netMode == 2) && Game1.tile[num77, num81].active())
                                        {
                                            NetMessage.SendTileSquare(-1, num77, num81, 1);
                                        }
                                    }
                                    if ((genRand.Next(200) == 0) && !PlayerLOS(num77, num78))
                                    {
                                        GrowShroom(num77, num78);
                                    }
                                    bool flag21 = false;
                                    for (int num131 = num79; num131 < num80; num131++)
                                    {
                                        for (int num132 = num81; num132 < num82; num132++)
                                        {
                                            if (((num77 != num131) || (num78 != num132)) && (Game1.tile[num131, num132].active() && (Game1.tile[num131, num132].type == 0x3b)))
                                            {
                                                SpreadGrass(num131, num132, 0x3b, num130, false, Game1.tile[num77, num78].color());
                                                if (Game1.tile[num131, num132].type == num130)
                                                {
                                                    SquareTileFrame(num131, num132, true);
                                                    flag21 = true;
                                                }
                                            }
                                        }
                                    }
                                    if ((Game1.netMode == 2) && flag21)
                                    {
                                        NetMessage.SendTileSquare(-1, num77, num78, 3);
                                    }
                                }
                            }
                            else
                            {
                                if (((Game1.tile[num77, num78].wall == 0x3e) && (Game1.tile[num77, num78].liquid == 0)) && (genRand.Next(10) == 0))
                                {
                                    int num133 = genRand.Next(2, 4);
                                    int num134 = num77 - num133;
                                    int num135 = num77 + num133;
                                    int num136 = num78 - num133;
                                    int num137 = num78 + num133;
                                    bool flag22 = false;
                                    for (int num138 = num134; num138 <= num135; num138++)
                                    {
                                        for (int num139 = num136; num139 <= num137; num139++)
                                        {
                                            if (SolidTile(num138, num139))
                                            {
                                                flag22 = true;
                                                break;
                                            }
                                        }
                                    }
                                    if (flag22 && !Game1.tile[num77, num78].active())
                                    {
                                        PlaceTile(num77, num78, 0x33, true, false, -1, 0);
                                        TileFrame(num77, num78, true, false);
                                        if (Game1.netMode == 2)
                                        {
                                            NetMessage.SendTileSquare(-1, num77, num78, 3);
                                        }
                                    }
                                }
                                if (flag && (spawnNPC > 0))
                                {
                                    if (Game1.tile[num77, num78].wall == 0x22)
                                    {
                                        if (Game1.rand.Next(4) == 0)
                                        {
                                            SpawnNPC(num77, num78);
                                        }
                                    }
                                    else
                                    {
                                        SpawnNPC(num77, num78);
                                    }
                                }
                            }
                        }
                        if (((Game1.tile[num77, num78].wall == 0x51) || (Game1.tile[num77, num78].wall == 0x53)) || ((Game1.tile[num77, num78].type == 0xc7) && Game1.tile[num77, num78].active()))
                        {
                            int num140 = num77 + genRand.Next(-2, 3);
                            int num141 = num78 + genRand.Next(-2, 3);
                            if ((Game1.tile[num140, num141].wall >= 0x3f) && (Game1.tile[num140, num141].wall <= 0x44))
                            {
                                bool flag23 = false;
                                for (int num142 = num77 - wallDist; num142 < (num77 + wallDist); num142++)
                                {
                                    for (int num143 = num78 - wallDist; num143 < (num78 + wallDist); num143++)
                                    {
                                        if (Game1.tile[num77, num78].active())
                                        {
                                            switch (Game1.tile[num77, num78].type)
                                            {
                                                case 0xc7:
                                                case 200:
                                                case 0xc9:
                                                case 0xcb:
                                                case 0xcd:
                                                case 0xea:
                                                case 0x160:
                                                    {
                                                        flag23 = true;
                                                        continue;
                                                    }
                                            }
                                        }
                                    }
                                }
                                if (flag23)
                                {
                                    Game1.tile[num140, num141].wall = 0x51;
                                    if (Game1.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, num140, num141, 3);
                                    }
                                }
                            }
                        }
                        if (((Game1.tile[num77, num78].wall == 0x45) || (Game1.tile[num77, num78].wall == 3)) || ((Game1.tile[num77, num78].type == 0x17) && Game1.tile[num77, num78].active()))
                        {
                            int num145 = num77 + genRand.Next(-2, 3);
                            int num146 = num78 + genRand.Next(-2, 3);
                            if ((Game1.tile[num145, num146].wall >= 0x3f) && (Game1.tile[num145, num146].wall <= 0x44))
                            {
                                bool flag24 = false;
                                for (int num147 = num77 - wallDist; num147 < (num77 + wallDist); num147++)
                                {
                                    for (int num148 = num78 - wallDist; num148 < (num78 + wallDist); num148++)
                                    {
                                        if (Game1.tile[num77, num78].active())
                                        {
                                            switch (Game1.tile[num77, num78].type)
                                            {
                                                case 0x16:
                                                case 0x17:
                                                case 0x18:
                                                case 0x19:
                                                case 0x20:
                                                case 0x70:
                                                case 0xa3:
                                                    {
                                                        flag24 = true;
                                                        continue;
                                                    }
                                            }
                                        }
                                    }
                                }
                                if (flag24)
                                {
                                    Game1.tile[num145, num146].wall = 0x45;
                                    if (Game1.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, num145, num146, 3);
                                    }
                                }
                            }
                        }
                        if ((Game1.tile[num77, num78].wall == 70) || ((Game1.tile[num77, num78].type == 0x6d) && Game1.tile[num77, num78].active()))
                        {
                            int num150 = num77 + genRand.Next(-2, 3);
                            int num151 = num78 + genRand.Next(-2, 3);
                            if (((Game1.tile[num150, num151].wall == 0x3f) || (Game1.tile[num150, num151].wall == 0x41)) || ((Game1.tile[num150, num151].wall == 0x42) || (Game1.tile[num150, num151].wall == 0x44)))
                            {
                                bool flag25 = false;
                                for (int num152 = num77 - wallDist; num152 < (num77 + wallDist); num152++)
                                {
                                    for (int num153 = num78 - wallDist; num153 < (num78 + wallDist); num153++)
                                    {
                                        if (Game1.tile[num77, num78].active())
                                        {
                                            switch (Game1.tile[num77, num78].type)
                                            {
                                                case 0x6d:
                                                case 110:
                                                case 0x71:
                                                case 0x73:
                                                case 0x74:
                                                case 0x75:
                                                case 0xa4:
                                                    {
                                                        flag25 = true;
                                                        continue;
                                                    }
                                            }
                                        }
                                    }
                                }
                                if (flag25)
                                {
                                    Game1.tile[num150, num151].wall = 70;
                                    if (Game1.netMode == 2)
                                    {
                                        NetMessage.SendTileSquare(-1, num150, num151, 3);
                                    }
                                }
                            }
                        }
                        SpreadDesertWalls(wallDist, num77, num78);
                    }
                }
                if (!Game1.dayTime)
                {
                    float num155 = Game1.maxTilesX / 0x1068;
                    if (Game1.rand.Next(0x1f40) < (10f * num155))
                    {
                        int num156 = 12;
                        int num157 = Game1.rand.Next(Game1.maxTilesX - 50) + 100;
                        num157 *= 0x10;
                        int num158 = Game1.rand.Next((int)(Game1.maxTilesY * 0.05)) * 0x10;
                        Vector2 vector = new Vector2((float)num157, (float)num158);
                        float speedX = Game1.rand.Next(-100, 0x65);
                        float speedY = Game1.rand.Next(200) + 100;
                        float num161 = (float)Math.Sqrt((double)((speedX * speedX) + (speedY * speedY)));
                        num161 = ((float)num156) / num161;
                        speedX *= num161;
                        speedY *= num161;
                        Projectile.NewProjectile(vector.X, vector.Y, speedX, speedY, 12, 0x3e8, 10f, Game1.myPlayer, 0f, 0f);
                    }
                }
            }
        }

        public static void WaterCheck()
        {
            Liquid.numLiquid = 0;
            LiquidBuffer.numLiquidBuffer = 0;
            for (int i = 1; i < (Game1.maxTilesX - 1); i++)
            {
                for (int j = Game1.maxTilesY - 2; j > 0; j--)
                {
                    Tile checkTile = Game1.tile[i, j];
                    checkTile.checkingLiquid(false);
                    if (((checkTile.liquid > 0) && checkTile.nactive()) && (Game1.tileSolid[checkTile.type] && !Game1.tileSolidTop[checkTile.type]))
                    {
                        checkTile.liquid = 0;
                    }
                    else if (checkTile.liquid > 0)
                    {
                        if (checkTile.active())
                        {
                            if (checkTile.lava())
                            {
                                if (TileObjectData.CheckLavaDeath(checkTile))
                                {
                                    KillTile(i, j, false, false, false);
                                }
                            }
                            else if (TileObjectData.CheckWaterDeath(checkTile))
                            {
                                KillTile(i, j, false, false, false);
                            }
                        }
                        Tile tile2 = Game1.tile[i, j + 1];
                        if (((!tile2.nactive() || !Game1.tileSolid[tile2.type]) || Game1.tileSolidTop[tile2.type]) && (tile2.liquid < 0xff))
                        {
                            if (tile2.liquid > 250)
                            {
                                tile2.liquid = 0xff;
                            }
                            else
                            {
                                Liquid.AddWater(i, j);
                            }
                        }
                        Tile tile3 = Game1.tile[i - 1, j];
                        Tile tile4 = Game1.tile[i + 1, j];
                        if (((!tile3.nactive() || !Game1.tileSolid[tile3.type]) || Game1.tileSolidTop[tile3.type]) && (tile3.liquid != checkTile.liquid))
                        {
                            Liquid.AddWater(i, j);
                        }
                        else if (((!tile4.nactive() || !Game1.tileSolid[tile4.type]) || Game1.tileSolidTop[tile4.type]) && (tile4.liquid != checkTile.liquid))
                        {
                            Liquid.AddWater(i, j);
                        }
                        if (checkTile.lava())
                        {
                            if ((tile3.liquid > 0) && !tile3.lava())
                            {
                                Liquid.AddWater(i, j);
                            }
                            else if ((tile4.liquid > 0) && !tile4.lava())
                            {
                                Liquid.AddWater(i, j);
                            }
                            else if ((Game1.tile[i, j - 1].liquid > 0) && !Game1.tile[i, j - 1].lava())
                            {
                                Liquid.AddWater(i, j);
                            }
                            else if ((tile2.liquid > 0) && !tile2.lava())
                            {
                                Liquid.AddWater(i, j);
                            }
                        }
                    }
                }
            }
        }

        public static void worldGenCallBack(object threadContext)
        {
            Game1.PlaySound(10, -1, -1, 1);
            clearWorld();
            generateWorld(-1, threadContext as GenerationProgress);
            WorldFile.saveWorld(false, true);
            if ((Game1.menuMode == 10) || (Game1.menuMode == 0x378))
            {
                Game1.menuMode = 6;
            }
            Game1.PlaySound(10, -1, -1, 1);
        }

        public class Spread
        {
            public static void Gem(int x, int y)
            {
                if (WorldGen.InWorld(x, y, 0))
                {
                    List<Point> list = new List<Point>();
                    List<Point> collection = new List<Point>();
                    HashSet<Point> set = new HashSet<Point> {
                        new Point(x, y)
                    };
                    while (collection.Count > 0)
                    {
                        list.Clear();
                        list.AddRange(collection);
                        collection.Clear();
                        while (list.Count > 0)
                        {
                            Point item = list[0];
                            if (!WorldGen.InWorld(item.X, item.Y, 1))
                            {
                                list.Remove(item);
                            }
                            else
                            {
                                set.Add(item);
                                list.Remove(item);
                                Tile tile = Game1.tile[item.X, item.Y];
                                if (WorldGen.SolidTile(item.X, item.Y) || (tile.wall != 0))
                                {
                                    if (tile.active())
                                    {
                                        if (Gemmable(tile.type))
                                        {
                                            tile.type = WorldGen.randGemTile();
                                        }
                                        Tile tile2 = Game1.tile[item.X - 1, item.Y];
                                        if (Gemmable(tile2.type))
                                        {
                                            tile2.type = WorldGen.randGemTile();
                                        }
                                        tile2 = Game1.tile[item.X + 1, item.Y];
                                        if (Gemmable(tile2.type))
                                        {
                                            tile2.type = WorldGen.randGemTile();
                                        }
                                        tile2 = Game1.tile[item.X, item.Y - 1];
                                        if (Gemmable(tile2.type))
                                        {
                                            tile2.type = WorldGen.randGemTile();
                                        }
                                        tile2 = Game1.tile[item.X, item.Y + 1];
                                        if (Gemmable(tile2.type))
                                        {
                                            tile2.type = WorldGen.randGemTile();
                                        }
                                    }
                                    continue;
                                }
                                tile.wall = (byte)(0x30 + WorldGen.randGem());
                                if (!tile.active() && (WorldGen.genRand.Next(2) == 0))
                                {
                                    WorldGen.PlaceTile(item.X, item.Y, 0xb2, true, false, -1, WorldGen.randGem());
                                }
                                Point point2 = new Point(item.X - 1, item.Y);
                                if (!set.Contains(point2))
                                {
                                    collection.Add(point2);
                                }
                                point2 = new Point(item.X + 1, item.Y);
                                if (!set.Contains(point2))
                                {
                                    collection.Add(point2);
                                }
                                point2 = new Point(item.X, item.Y - 1);
                                if (!set.Contains(point2))
                                {
                                    collection.Add(point2);
                                }
                                point2 = new Point(item.X, item.Y + 1);
                                if (!set.Contains(point2))
                                {
                                    collection.Add(point2);
                                }
                            }
                        }
                    }
                }
            }

            private static bool Gemmable(int type)
            {
                if ((((type != 0) && (type != 1)) && ((type != 40) && (type != 0x3b))) && (((type != 60) && (type != 70)) && (type != 0x93)))
                {
                    return (type == 0xa1);
                }
                return true;
            }

            public static void Moss(int x, int y)
            {
                if (WorldGen.InWorld(x, y, 0))
                {
                    byte mossWall = WorldGen.mossWall;
                    ushort mossTile = WorldGen.mossTile;
                    List<Point> list = new List<Point>();
                    List<Point> collection = new List<Point>();
                    HashSet<Point> set = new HashSet<Point> {
                        new Point(x, y)
                    };
                    while (collection.Count > 0)
                    {
                        list.Clear();
                        list.AddRange(collection);
                        collection.Clear();
                        while (list.Count > 0)
                        {
                            Point item = list[0];
                            if (!WorldGen.InWorld(item.X, item.Y, 1))
                            {
                                list.Remove(item);
                            }
                            else
                            {
                                set.Add(item);
                                list.Remove(item);
                                Tile tile = Game1.tile[item.X, item.Y];
                                if (WorldGen.SolidTile(item.X, item.Y) || (tile.wall != 0))
                                {
                                    if (tile.active())
                                    {
                                        if (tile.wall == 0)
                                        {
                                            tile.wall = mossWall;
                                        }
                                        if (tile.type == 1)
                                        {
                                            tile.type = mossTile;
                                        }
                                    }
                                    continue;
                                }
                                tile.wall = mossWall;
                                Point point2 = new Point(item.X - 1, item.Y);
                                if (!set.Contains(point2))
                                {
                                    collection.Add(point2);
                                }
                                point2 = new Point(item.X + 1, item.Y);
                                if (!set.Contains(point2))
                                {
                                    collection.Add(point2);
                                }
                                point2 = new Point(item.X, item.Y - 1);
                                if (!set.Contains(point2))
                                {
                                    collection.Add(point2);
                                }
                                point2 = new Point(item.X, item.Y + 1);
                                if (!set.Contains(point2))
                                {
                                    collection.Add(point2);
                                }
                            }
                        }
                    }
                }
            }

            public static void Spider(int x, int y)
            {
                if (WorldGen.InWorld(x, y, 0))
                {
                    byte num = 0x3e;
                    List<Point> list = new List<Point>();
                    List<Point> collection = new List<Point>();
                    HashSet<Point> set = new HashSet<Point> {
                        new Point(x, y)
                    };
                    while (collection.Count > 0)
                    {
                        list.Clear();
                        list.AddRange(collection);
                        collection.Clear();
                        while (list.Count > 0)
                        {
                            Point item = list[0];
                            if (!WorldGen.InWorld(item.X, item.Y, 1))
                            {
                                list.Remove(item);
                            }
                            else
                            {
                                set.Add(item);
                                list.Remove(item);
                                Tile tile = Game1.tile[item.X, item.Y];
                                if (WorldGen.SolidTile(item.X, item.Y) || (tile.wall != 0))
                                {
                                    if (tile.active() && (tile.wall == 0))
                                    {
                                        tile.wall = num;
                                    }
                                    continue;
                                }
                                tile.wall = num;
                                WorldGen.SquareWallFrame(item.X, item.Y, true);
                                if (!tile.active())
                                {
                                    tile.liquid = 0;
                                    tile.lava(false);
                                    if (WorldGen.SolidTile(item.X, item.Y + 1) && (WorldGen.genRand.Next(3) == 0))
                                    {
                                        if (WorldGen.genRand.Next(15) == 0)
                                        {
                                            WorldGen.AddBuriedChest(item.X, item.Y, 0x3ab, true, 15);
                                        }
                                        else
                                        {
                                            WorldGen.PlacePot(item.X, item.Y, 0x1c, WorldGen.genRand.Next(0x13, 0x15));
                                        }
                                    }
                                    if (!tile.active())
                                    {
                                        if (WorldGen.SolidTile(item.X, item.Y - 1) && (WorldGen.genRand.Next(3) == 0))
                                        {
                                            WorldGen.PlaceTight(item.X, item.Y, 0xa5, true);
                                        }
                                        else if (WorldGen.SolidTile(item.X, item.Y + 1))
                                        {
                                            WorldGen.PlaceTile(item.X, item.Y, 0xbb, true, false, -1, 9 + WorldGen.genRand.Next(5));
                                            if (WorldGen.genRand.Next(3) == 0)
                                            {
                                                if (!tile.active())
                                                {
                                                    WorldGen.PlaceSmallPile(item.X, item.Y, 0x22 + WorldGen.genRand.Next(4), 1, 0xb9);
                                                }
                                                if (!tile.active())
                                                {
                                                    WorldGen.PlaceSmallPile(item.X, item.Y, 0x30 + WorldGen.genRand.Next(6), 0, 0xb9);
                                                }
                                            }
                                        }
                                    }
                                }
                                Point point2 = new Point(item.X - 1, item.Y);
                                if (!set.Contains(point2))
                                {
                                    collection.Add(point2);
                                }
                                point2 = new Point(item.X + 1, item.Y);
                                if (!set.Contains(point2))
                                {
                                    collection.Add(point2);
                                }
                                point2 = new Point(item.X, item.Y - 1);
                                if (!set.Contains(point2))
                                {
                                    collection.Add(point2);
                                }
                                point2 = new Point(item.X, item.Y + 1);
                                if (!set.Contains(point2))
                                {
                                    collection.Add(point2);
                                }
                            }
                        }
                    }
                }
            }

            public static void Wall(int x, int y, int wallType)
            {
                if (WorldGen.InWorld(x, y, 0))
                {
                    byte num = (byte)wallType;
                    List<Point> list = new List<Point>();
                    List<Point> collection = new List<Point>();
                    HashSet<Point> set = new HashSet<Point> {
                        new Point(x, y)
                    };
                    while (collection.Count > 0)
                    {
                        list.Clear();
                        list.AddRange(collection);
                        collection.Clear();
                        while (list.Count > 0)
                        {
                            Point item = list[0];
                            if (!WorldGen.InWorld(item.X, item.Y, 1))
                            {
                                list.Remove(item);
                            }
                            else
                            {
                                set.Add(item);
                                list.Remove(item);
                                Tile tile = Game1.tile[item.X, item.Y];
                                if (WorldGen.SolidTile(item.X, item.Y) || (tile.wall != 0))
                                {
                                    if (tile.active() && (tile.wall == 0))
                                    {
                                        tile.wall = num;
                                    }
                                    continue;
                                }
                                tile.wall = num;
                                Point point2 = new Point(item.X - 1, item.Y);
                                if (!set.Contains(point2))
                                {
                                    collection.Add(point2);
                                }
                                point2 = new Point(item.X + 1, item.Y);
                                if (!set.Contains(point2))
                                {
                                    collection.Add(point2);
                                }
                                point2 = new Point(item.X, item.Y - 1);
                                if (!set.Contains(point2))
                                {
                                    collection.Add(point2);
                                }
                                point2 = new Point(item.X, item.Y + 1);
                                if (!set.Contains(point2))
                                {
                                    collection.Add(point2);
                                }
                            }
                        }
                    }
                }
            }

            public static void Wall2(int x, int y, int wallType)
            {
                if (WorldGen.InWorld(x, y, 0))
                {
                    byte num = (byte)wallType;
                    int num2 = 0;
                    int num3 = WorldGen.maxWallOut2;
                    List<Point> list = new List<Point>();
                    List<Point> collection = new List<Point>();
                    HashSet<Point> set = new HashSet<Point> {
                        new Point(x, y)
                    };
                    while (collection.Count > 0)
                    {
                        list.Clear();
                        list.AddRange(collection);
                        collection.Clear();
                        while (list.Count > 0)
                        {
                            Point item = list[0];
                            if (!WorldGen.InWorld(item.X, item.Y, 1))
                            {
                                list.Remove(item);
                            }
                            else
                            {
                                set.Add(item);
                                list.Remove(item);
                                Tile tile = Game1.tile[item.X, item.Y];
                                if (((!WorldGen.SolidTile(item.X, item.Y) && (tile.wall != num)) && ((tile.wall != 4) && (tile.wall != 40))) && (tile.wall != 3))
                                {
                                    if ((num == 0x3f) && (tile.wall == 0))
                                    {
                                        list.Remove(item);
                                    }
                                    else
                                    {
                                        num2++;
                                        if (num2 >= num3)
                                        {
                                            list.Remove(item);
                                        }
                                        else
                                        {
                                            tile.wall = num;
                                            Point point2 = new Point(item.X - 1, item.Y);
                                            if (!set.Contains(point2))
                                            {
                                                collection.Add(point2);
                                            }
                                            point2 = new Point(item.X + 1, item.Y);
                                            if (!set.Contains(point2))
                                            {
                                                collection.Add(point2);
                                            }
                                            point2 = new Point(item.X, item.Y - 1);
                                            if (!set.Contains(point2))
                                            {
                                                collection.Add(point2);
                                            }
                                            point2 = new Point(item.X, item.Y + 1);
                                            if (!set.Contains(point2))
                                            {
                                                collection.Add(point2);
                                            }
                                            if (num == 0x3f)
                                            {
                                                point2 = new Point(item.X - 1, item.Y - 1);
                                                if (!set.Contains(point2))
                                                {
                                                    collection.Add(point2);
                                                }
                                                point2 = new Point(item.X + 1, item.Y - 1);
                                                if (!set.Contains(point2))
                                                {
                                                    collection.Add(point2);
                                                }
                                                point2 = new Point(item.X - 1, item.Y + 1);
                                                if (!set.Contains(point2))
                                                {
                                                    collection.Add(point2);
                                                }
                                                point2 = new Point(item.X + 1, item.Y + 1);
                                                if (!set.Contains(point2))
                                                {
                                                    collection.Add(point2);
                                                }
                                                point2 = new Point(item.X - 2, item.Y);
                                                if (!set.Contains(point2))
                                                {
                                                    collection.Add(point2);
                                                }
                                                point2 = new Point(item.X + 2, item.Y);
                                                if (!set.Contains(point2))
                                                {
                                                    collection.Add(point2);
                                                }
                                            }
                                        }
                                    }
                                    continue;
                                }
                                if (((tile.active() && (tile.wall != num)) && ((tile.wall != 4) && (tile.wall != 40))) && (tile.wall != 3))
                                {
                                    tile.wall = num;
                                }
                            }
                        }
                    }
                }
            }

            public static void WallDungeon(int x, int y, int wallType)
            {
                if (WorldGen.InWorld(x, y, 0))
                {
                    byte num = (byte)wallType;
                    List<Point> list = new List<Point>();
                    List<Point> collection = new List<Point>();
                    HashSet<Point> set = new HashSet<Point> {
                        new Point(x, y)
                    };
                    while (collection.Count > 0)
                    {
                        list.Clear();
                        list.AddRange(collection);
                        collection.Clear();
                        while (list.Count > 0)
                        {
                            Point item = list[0];
                            if (!WorldGen.InWorld(item.X, item.Y, 1))
                            {
                                list.Remove(item);
                            }
                            else
                            {
                                set.Add(item);
                                list.Remove(item);
                                Tile tile = Game1.tile[item.X, item.Y];
                                if ((!WorldGen.SolidTile(item.X, item.Y) && (tile.wall != num)) && (tile.wall > 0))
                                {
                                    tile.wall = num;
                                    Point point2 = new Point(item.X - 1, item.Y);
                                    if (!set.Contains(point2))
                                    {
                                        collection.Add(point2);
                                    }
                                    point2 = new Point(item.X + 1, item.Y);
                                    if (!set.Contains(point2))
                                    {
                                        collection.Add(point2);
                                    }
                                    point2 = new Point(item.X, item.Y - 1);
                                    if (!set.Contains(point2))
                                    {
                                        collection.Add(point2);
                                    }
                                    point2 = new Point(item.X, item.Y + 1);
                                    if (!set.Contains(point2))
                                    {
                                        collection.Add(point2);
                                    }
                                    continue;
                                }
                                if (tile.active())
                                {
                                    tile.wall = num;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
