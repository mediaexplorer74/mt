// Main

using Microsoft.Win32;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using GameManager.Achievements;
using GameManager.DataStructures;
using GameManager.GameContent;
using GameManager.GameContent.Achievements;
using GameManager.GameContent.Events;
using GameManager.GameContent.Liquid;
using GameManager.GameContent.Tile_Entities;
using GameManager.GameContent.UI;
using GameManager.GameContent.UI.Chat;
using GameManager.GameContent.UI.States;
using GameManager.Graphics;
using GameManager.Graphics.Capture;
using GameManager.Graphics.Effects;
using GameManager.Graphics.Shaders;
using GameManager.ID;
using GameManager.Initializers;
using GameManager.IO;
using GameManager.Map;
using GameManager.Net;
using GameManager;
using GameManager.UI;
using GameManager.UI.Chat;
using GameManager.Utilities;
using GameManager.World.Generation;
using Windows.Storage;

namespace GameManager
{

    // Main class Game1
    public class Game1 : Game
    {
        public delegate void OnPlayerSelected(PlayerFileData player);
        public const int offLimitBorderTiles = 40;
        public const int maxItemTypes = 3601;
        public const int maxProjectileTypes = 651;
        public const int maxNPCTypes = 540;
        public const int maxTileSets = 419;
        public const int maxWallTypes = 225;
        public const int maxBuffTypes = 191;
        public const int maxGlowMasks = 214;
        public const int maxExtras = 69;
        public const int maxGoreTypes = 907;
        public const int numBannerTypes = 251;
        public const int numArmorHead = 194;
        public const int numArmorBody = 195;
        public const int numArmorLegs = 135;
        public const int numAccHandsOn = 19;
        public const int numAccHandsOff = 12;
        public const int numAccNeck = 9;
        public const int numAccBack = 10;
        public const int numAccFront = 5;
        public const int numAccShoes = 18;
        public const int numAccWaist = 12;
        public const int numAccShield = 6;
        public const int numAccFace = 9;
        public const int numAccBalloon = 16;
        public const int maxWings = 37;
        public const int maxBackgrounds = 207;
        public const int numInfoIcons = 13;
        private const int MF_BYPOSITION = 1024;
        public const int sectionWidth = 200;
        public const int sectionHeight = 150;
        public const int maxDust = 6000;
        public const int maxCombatText = 100;
        public const int maxItemText = 20;
        public const int maxPlayers = 255;
        public const int maxChests = 1000;
        public const int maxItems = 400;
        public const int maxProjectiles = 1000;
        public const int maxNPCs = 200;
        private const double slimeRainMaxTime = 54000.0;
        private const double slimeRainMinTime = 32400.0;
        private const double slimeRainMaxDelay = 604800.0;
        private const double slimeRainMinDelay = 302400.0;
        private const double slimeRainChance = 1728000.0;
        public const int maxGore = 500;
        public const int realInventory = 50;
        public const int maxInventory = 58;
        public const int maxItemSounds = 125;
        public const int maxNPCHitSounds = 57;
        public const int maxNPCKilledSounds = 62;
        public const int maxLiquidTypes = 12;
        public const int maxMusic = 40;
        public const double dayLength = 54000.0;
        public const double nightLength = 32400.0;
        public const int maxStars = 130;
        public const int maxStarTypes = 5;
        public const int maxClouds = 200;
        public const int maxCloudTypes = 22;
        public const int maxHair = 134;
        public const int maxCharSelectHair = 51;
        public const int MaxTimeout = 120;
        public static bool HidePassword = false;
        public static bool ThickMouse = false;
        public static uint ThickMousePackedColor = Microsoft.Xna.Framework.Color.White.PackedValue;
        public static bool CaptureModeDisabled = false;
        public bool unityMouseOver;
        public static Game1 instance;
        public static int curRelease = 149;
        public static string versionNumber = "v1.3.0.3";
        public static string versionNumber2 = "v1.3.0.3";
        public static Vector2 destroyerHB = new Vector2(0f, 0f);

        public static string SavePath = ApplicationData.Current.LocalFolder.Path;//Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\My Games\\Terraria";

        public static FavoritesFile LocalFavoriteData = new FavoritesFile(
            Game1.SavePath+"\\Data\\favorites.json");

        public static FileMetadata WorldFileMetadata;
        public static FileMetadata MapFileMetadata;
        private AchievementManager _achievements;
        public static UserInterface MenuUI = new UserInterface();
        public static UserInterface InGameUI = new UserInterface();
        private static Game1.OnPlayerSelected _pendingCharacterSelect;
        public static bool drawBackGore = false;
        public static ulong LobbyId = 0uL;
        public static float expertLife = 2f;
        public static float expertDamage = 2f;
        public static float expertDebuffTime = 2f;
        public static float expertKnockBack = 0.9f;
        public static float expertNPCDamage = 1.5f;
        public static float knockBackMultiplier = 1f;
        public static float damageMultiplier = 1f;
        public WaterfallManager waterfallManager;
        public static WorldSections sectionManager;
        public static bool ServerSideCharacter = false;
        public static string clientUUID;
        public static bool ContentLoaded = false;
        public static int maxMsg = 106;
        private static int toolTipDistance = 6;
        public static float GlobalTime = 0f;
        public static bool GlobalTimerPaused = false;
        private static ulong _tileFrameSeed = (ulong)((long)Guid.NewGuid().GetHashCode());
        private static ulong _drawCycleCounter = 0uL;
        public static Effect screenShader;
        public static Effect pixelShader;
        public static Effect tileShader;
        public static int npcStreamSpeed = 60;
        public static int musicError = 0;
        public static bool dedServFPS = false;
        public static int dedServCount1 = 0;
        public static int dedServCount2 = 0;
        public static bool superFast = false;
        public static bool[] hairLoaded = new bool[134];
        public static bool[] wingsLoaded = new bool[37];
        public static bool[] goreLoaded = new bool[907];
        public static bool[] projectileLoaded = new bool[651];
        public static bool[] itemFlameLoaded = new bool[3601];
        public static bool[] backgroundLoaded = new bool[207];
        public static bool[] tileSetsLoaded = new bool[419];
        public static bool[] wallLoaded = new bool[225];
        public static bool[] NPCLoaded = new bool[540];
        public static bool[] armorHeadLoaded = new bool[194];
        public static bool[] armorBodyLoaded = new bool[195];
        public static bool[] armorLegsLoaded = new bool[135];
        public static bool[] accHandsOnLoaded = new bool[19];
        public static bool[] accHandsOffLoaded = new bool[12];
        public static bool[] accBackLoaded = new bool[10];
        public static bool[] accFrontLoaded = new bool[5];
        public static bool[] accShoesLoaded = new bool[18];
        public static bool[] accWaistLoaded = new bool[12];
        public static bool[] accShieldLoaded = new bool[6];
        public static bool[] accNeckLoaded = new bool[9];
        public static bool[] accFaceLoaded = new bool[9];
        public static bool[] accballoonLoaded = new bool[16];

        public static Vector2[] OffsetsNPCOffhand = new Vector2[]
        {
            new Vector2(14f, 34f),
            new Vector2(14f, 32f),
            new Vector2(14f, 26f),
            new Vector2(14f, 22f),
            new Vector2(14f, 18f)
        };

        public static Vector2[] OffsetsPlayerOffhand = new Vector2[]
        {
            new Vector2(14f, 20f),
            new Vector2(14f, 20f),
            new Vector2(14f, 20f),
            new Vector2(14f, 18f),
            new Vector2(14f, 20f),
            new Vector2(16f, 4f),
            new Vector2(16f, 16f),
            new Vector2(18f, 14f),
            new Vector2(18f, 14f),
            new Vector2(18f, 14f),
            new Vector2(16f, 16f),
            new Vector2(16f, 16f),
            new Vector2(16f, 16f),
            new Vector2(16f, 16f),
            new Vector2(14f, 14f),
            new Vector2(14f, 14f),
            new Vector2(12f, 14f),
            new Vector2(14f, 16f),
            new Vector2(16f, 16f),
            new Vector2(16f, 16f)
        };

        public static Vector2[] OffsetsPlayerOnhand = new Vector2[]
        {
            new Vector2(6f, 19f),
            new Vector2(5f, 10f),
            new Vector2(12f, 10f),
            new Vector2(13f, 17f),
            new Vector2(12f, 19f),
            new Vector2(5f, 10f),
            new Vector2(7f, 17f),
            new Vector2(6f, 16f),
            new Vector2(6f, 16f),
            new Vector2(6f, 16f),
            new Vector2(6f, 17f),
            new Vector2(7f, 17f),
            new Vector2(7f, 17f),
            new Vector2(7f, 17f),
            new Vector2(8f, 17f),
            new Vector2(9f, 16f),
            new Vector2(9f, 12f),
            new Vector2(8f, 17f),
            new Vector2(7f, 17f),
            new Vector2(7f, 17f)
        };

        public static Vector2[] OffsetsPlayerHeadgear = new Vector2[]
        {
            new Vector2(0f, 2f),
            new Vector2(0f, 2f),
            new Vector2(0f, 2f),
            new Vector2(0f, 2f),
            new Vector2(0f, 2f),
            new Vector2(0f, 2f),
            new Vector2(0f, 2f),
            new Vector2(0f, 0f),
            new Vector2(0f, 0f),
            new Vector2(0f, 0f),
            new Vector2(0f, 2f),
            new Vector2(0f, 2f),
            new Vector2(0f, 2f),
            new Vector2(0f, 2f),
            new Vector2(0f, 0f),
            new Vector2(0f, 0f),
            new Vector2(0f, 0f),
            new Vector2(0f, 2f),
            new Vector2(0f, 2f),
            new Vector2(0f, 2f)
        };

        public static float zoomX;
        public static float zoomY;
        public static float sunCircle;
        public static int BlackFadeIn = 0;
        public static bool noWindowBorder = false;
        private Matrix Transform = Matrix.CreateScale(1f, 1f, 1f)
            * Matrix.CreateRotationZ(0f) * Matrix.CreateTranslation(new Vector3(0f, 0f, 0f));

        private RasterizerState Rasterizer = RasterizerState.CullCounterClockwise;
        public static int ugBack = 0;
        public static int oldUgBack = 0;
        public static int[] bgFrame = new int[1];
        public static int[] bgFrameCounter = new int[1];
        public static bool skipMenu = false;
        public static bool verboseNetplay = false;
        public static bool stopTimeOuts = false;
        public static bool showSpam = false;
        public static bool showItemOwner = false;
        public static bool[] nextNPC = new bool[540];
        public static int musicBox = -1;
        public static int musicBox2 = -1;
        public static byte hbPosition = 1;
        public static bool cEd = false; // "Bunny"
        public static float wFrCounter = 0f;
        public static float wFrame = 0f;
        public static float upTimer;
        public static float upTimerMax;
        public static float upTimerMaxDelay;
        public static bool drawDiag = false;
        public static bool drawRelease = false;
        public static bool drawBetterDebug = false;
        public static bool betterDebugRelease = false;
        public static bool renderNow = false;
        public static bool drawToScreen = false;
        public static bool targetSet = false;
        public static int mouseX;
        public static int mouseY;
        public static int lastMouseX;
        public static int lastMouseY;
        public static bool mouseLeft;
        public static bool mouseRight;
        private static bool _isMouseLeftConsumedByUI = false;
        public static float essScale = 1f;
        public static int essDir = -1;
        public static float[] cloudBGX = new float[2];
        public static float cloudBGAlpha;
        public static float cloudBGActive;
        public static int[] cloudBG = new int[]
        {
            112,
            113
        };

        public static int[] treeMntBG = new int[2];
        public static int[] treeBG = new int[3];
        public static int[] corruptBG = new int[3];
        public static int[] jungleBG = new int[3];
        public static int[] snowMntBG = new int[2];
        public static int[] snowBG = new int[3];
        public static int[] hallowBG = new int[3];
        public static int[] crimsonBG = new int[3];
        public static int[] desertBG = new int[2];
        public static int oceanBG;
        public static int[] treeX = new int[4];
        public static int[] treeStyle = new int[4];
        public static int[] caveBackX = new int[4];
        public static int[] caveBackStyle = new int[4];
        public static int iceBackStyle;
        public static int hellBackStyle;
        public static int jungleBackStyle;
        public static string debugWords = "";
        public static bool gamePad = false;
        public static bool xMas = false;
        public static bool halloween = false;
        public static int snowDust = 0;
        public static bool chTitle = false;
        public static bool hairWindow = false;
        public static bool clothesWindow = false;
        public static bool ingameOptionsWindow = false;
        public static bool achievementsWindow = false;
        public static int keyCount = 0;
        public static string[] keyString = new string[10];
        public static int[] keyInt = new int[10];
        public static byte gFade = 0;
        public static float gFader = 0f;
        public static byte gFadeDir = 1;
        public static bool netDiag = false;
        public static int txData = 0;
        public static int rxData = 0;
        public static int txMsg = 0;
        public static int rxMsg = 0;
        public static int[] rxMsgType = new int[Game1.maxMsg];
        public static int[] rxDataType = new int[Game1.maxMsg];
        public static int[] txMsgType = new int[Game1.maxMsg];
        public static int[] txDataType = new int[Game1.maxMsg];
        public static float uCarry = 0f;
        public static bool drawSkip = false;
        public static int fpsCount = 0;
        public static Stopwatch fpsTimer = new Stopwatch();
        public static Stopwatch updateTimer = new Stopwatch();
        public bool gammaTest;
        public static int fountainColor = -1;
        public static int monolithType = -1;
        public static bool showSplash = true;
        public static bool ignoreErrors = true;
        public static string defaultIP = "";
        public static int dayRate = 1;
        public static int maxScreenW = 1920;
        public static int minScreenW = 800;
        public static int maxScreenH = 1200;
        public static int minScreenH = 600;
        public static float iS = 1f;
        public static bool render = false;
        public static int qaStyle = 0;
        public static int zoneX = 99;
        public static int zoneY = 87;
        public static float harpNote = 0f;
        public static bool[] projHostile = new bool[651];
        public static bool[] projHook = new bool[651];
        public static bool[] pvpBuff = new bool[191];
        public static bool[] persistentBuff = new bool[191];
        public static bool[] vanityPet = new bool[191];
        public static bool[] lightPet = new bool[191];
        public static bool[] meleeBuff = new bool[191];
        public static bool[] debuff = new bool[191];
        public static string[] buffName = new string[191];
        public static string[] buffTip = new string[191];
        public static bool[] buffNoSave = new bool[191];
        public static bool[] buffNoTimeDisplay = new bool[191];
        public static bool[] buffDoubleApply = new bool[191];
        public static int maxMP = 10;
        public static string[] recentWorld = new string[Game1.maxMP];
        public static string[] recentIP = new string[Game1.maxMP];
        public static int[] recentPort = new int[Game1.maxMP];
        public static bool shortRender = true;
        public static bool owBack = true;
        public static int quickBG = 2;
        public static int bgDelay = 0;
        public static int bgStyle = 0;
        public static float[] bgAlpha = new float[10];
        public static float[] bgAlpha2 = new float[10];
        public static int EquipPage = 0;
        public static int EquipPageSelected = 0;
        public int mouseNPC = -1;
        public static int wof = -1;
        public static int wofT;
        public static int wofB;
        public static int wofF = 0;
        public static int offScreenRange = 200;
        private RenderTarget2D backWaterTarget;
        private RenderTarget2D waterTarget;
        private RenderTarget2D tileTarget;
        private RenderTarget2D blackTarget;
        private RenderTarget2D tile2Target;
        private RenderTarget2D wallTarget;
        private RenderTarget2D backgroundTarget;
        private RenderTarget2D screenTarget;
        public static int maxMapUpdates = 250000;
        public static bool refreshMap = false;
        public static int loadMapLastX = 0;
        public static bool loadMapLock = false;
        public static bool loadMap = false;
        public static bool mapReady = false;
        public static int textureMaxWidth = 2000;
        public static int textureMaxHeight = 1800;
        public static bool updateMap = false;
        public static int mapMinX = 0;
        public static int mapMaxX = 0;
        public static int mapMinY = 0;
        public static int mapMaxY = 0;
        public static int mapTimeMax = 30;
        public static int mapTime = Game1.mapTimeMax;
        public static bool clearMap;
        public static int mapTargetX = 5;
        public static int mapTargetY = 2;
        private static bool flameRingLoaded;
        private Texture2D flameRingTexture;
        private Texture2D mapDeathTexture;
        private RenderTarget2D[,] mapTarget = new RenderTarget2D[Game1.mapTargetX, Game1.mapTargetY];
        private RenderTarget2D mapSectionTexture;
        public static bool[,] initMap = new bool[Game1.mapTargetX, Game1.mapTargetY];
        public static bool[,] mapWasContentLost = new bool[Game1.mapTargetX, Game1.mapTargetY];
        private Texture2D[] infoIconTexture = new Texture2D[13];
        public static Texture2D[] clothesTexture = new Texture2D[4];
        public static Texture2D[] mapIconTexture = new Texture2D[9];
        private static Texture2D[] underworldTexture = new Texture2D[5];
        public static Texture2D mapTexture;
        private Texture2D mapBG1Texture;
        private Texture2D mapBG2Texture;
        private Texture2D mapBG3Texture;
        private Texture2D mapBG4Texture;
        private Texture2D mapBG5Texture;
        private Texture2D mapBG6Texture;
        private Texture2D mapBG7Texture;
        private Texture2D mapBG8Texture;
        private Texture2D mapBG9Texture;
        private Texture2D mapBG10Texture;
        private Texture2D mapBG11Texture;
        private Texture2D mapBG12Texture;
        private Texture2D mapBG13Texture;
        private Texture2D mapBG14Texture;
        private Texture2D mapBG15Texture;
        private Texture2D hueTexture;
        public static Texture2D colorSliderTexture;
        public static Texture2D colorBarTexture;
        public static Texture2D colorBlipTexture;
        public static Texture2D smartDigTexture;
        public static Microsoft.Xna.Framework.Color OurFavoriteColor = new Microsoft.Xna.Framework.Color(255, 231, 69);
        public static Texture2D tileCrackTexture;
        private Texture2D iceBarrierTexture;
        public static bool mapInit = false;
        public static bool mapEnabled = true;
        public static int mapStyle = 1;
        public static float grabMapX = 0f;
        public static float grabMapY = 0f;
        public static int miniMapX = 0;
        public static int miniMapY = 0;
        public static int miniMapWidth = 0;
        public static int miniMapHeight = 0;
        public static float mapMinimapScale = 1.25f;
        public static float mapMinimapAlpha = 1f;
        public static float mapOverlayScale = 2.5f;
        public static float mapOverlayAlpha = 0.35f;
        public static bool mapFullscreen = false;
        public static bool resetMapFull = false;
        public static float mapFullscreenScale = 4f;
        public static Vector2 mapFullscreenPos = new Vector2(-1f, -1f);
        private static bool IsEngineLoaded = false;
        private int firstTileX;
        private int lastTileX;
        private int firstTileY;
        private int lastTileY;
        private double bgParallax;
        private int bgStart;
        private int bgLoops;
        private int bgStartY;
        private int bgLoopsY;
        private int bgTop;
        public static int renderCount = 99;
        public static GraphicsDeviceManager graphics;
        public static SpriteBatch spriteBatch;
        public static TileBatch tileBatch;
        public static GenerationProgress AutogenProgress = new GenerationProgress();

        //RnD
        //private Process tServer = new Process();

        private static Stopwatch saveTime = new Stopwatch();
        public static MouseState mouseState;
        public static MouseState oldMouseState;
        public static int oldMouseWheel;
        public static KeyboardState keyState;
        public static Microsoft.Xna.Framework.Color mcColor = new Microsoft.Xna.Framework.Color(125, 125, 255);
        public static Microsoft.Xna.Framework.Color hcColor = new Microsoft.Xna.Framework.Color(200, 125, 255);
        public static Microsoft.Xna.Framework.Color highVersionColor = new Microsoft.Xna.Framework.Color(255, 255, 0);
        public static Microsoft.Xna.Framework.Color errorColor = new Microsoft.Xna.Framework.Color(255, 0, 0);
        public static Microsoft.Xna.Framework.Color bgColor;
        public static bool mouseHC = false;
        public static bool craftingHide = false;
        public static bool armorHide = false;
        public static float craftingAlpha = 1f;
        public static float armorAlpha = 1f;
        public static float[] buffAlpha = new float[191];
        public static bool hardMode = false;
        public float chestLootScale = 1f;
        public bool chestLootHover;
        public float chestStackScale = 1f;
        public bool chestStackHover;
        public float chestDepositScale = 1f;
        public bool chestDepositHover;
        public float chestRenameScale = 1f;
        public bool chestRenameHover;
        public float chestCancelScale = 1f;
        public bool chestCancelHover;
        public static Vector2 sceneWaterPos = Vector2.Zero;
        public static Vector2 sceneTilePos = Vector2.Zero;
        public static Vector2 sceneTile2Pos = Vector2.Zero;
        public static Vector2 sceneWallPos = Vector2.Zero;
        public static Vector2 sceneBackgroundPos = Vector2.Zero;
        public static bool maxQ = true;
        public static float gfxQuality = 1f;
        public static float gfxRate = 0.01f;
        public int DiscoStyle;
        public static int DiscoR = 255;
        public static int DiscoB = 0;
        public static int DiscoG = 0;
        public static int teamCooldown = 0;
        public static int teamCooldownLen = 300;
        public static bool gamePaused = false;
        public static bool gameInactive = false;
        public static int updateTime = 0;
        public static int drawTime = 0;
        public static int uCount = 0;
        public static int updateRate = 0;
        public static int frameRate = 0;
        public static bool RGBRelease = false;
        public static bool qRelease = false;
        public static bool netRelease = false;
        public static bool frameRelease = false;
        public static bool showFrameRate = false;
        public static int magmaBGFrame = 0;
        public static int magmaBGFrameCounter = 0;
        public static int saveTimer = 0;
        public static bool autoJoin = false;
        public static bool serverStarting = false;
        public static float leftWorld = 0f;
        public static float rightWorld = 134400f;
        public static float topWorld = 0f;
        public static float bottomWorld = 38400f;
        public static int maxTilesX = (int)Game1.rightWorld / 16 + 1;
        public static int maxTilesY = (int)Game1.bottomWorld / 16 + 1;
        public static int maxSectionsX = Game1.maxTilesX / 200;
        public static int maxSectionsY = Game1.maxTilesY / 150;
        public static int numDust = 6000;
        public static int numPlayers = 0;
        public static int maxNetPlayers = 255;
        private static UICharacterSelect _characterSelectMenu = new UICharacterSelect();
        private static UIWorldSelect _worldSelectMenu = new UIWorldSelect();
        public static UIAchievementsMenu AchievementsMenu = new UIAchievementsMenu();
        public static int maxRain = 750;
        public static int slimeWarningTime = 0;
        public static int slimeWarningDelay = 420;
        public static float slimeRainNPCSlots = 0.65f;
        public static bool[] slimeRainNPC = new bool[540];
        public static double slimeRainTime = 0.0;
        public static bool slimeRain = false;
        public static int slimeRainKillCount = 0;
        public int invBottom = 210;
        public static float cameraX = 0f;
        public static bool drewLava = false;
        public static float[] liquidAlpha = new float[12];
        public static int waterStyle = 0;
        public static int worldRate = 1;
        public static float caveParallax = 0.88f;
        public static int dungeonX;
        public static int dungeonY;
        public static Liquid[] liquid = new Liquid[Liquid.resLiquid];
        public static LiquidBuffer[] liquidBuffer = new LiquidBuffer[10000];
        public static bool dedServ = false;
        public static int spamCount = 0;
        public static int curMusic = 0;
        public static int dayMusic = 0;
        public static int ugMusic = 0;
        public int newMusic;
        public static bool showItemText = true;
        public static bool autoSave = true;
        public static bool validateSaves = true;
        public static bool bannerMouseOver = false;
        public static string buffString = "";
        public static string libPath = "";
        public static int lo = 0;
        public static int LogoA = 255;
        public static int LogoB = 0;
        public static bool LogoT = false;
        public static string statusText = "";
        public static string worldName = "";
        public static int worldID;
        public static int background = 0;
        public static int caveBackground = 0;
        public static float ugBackTransition = 0f;
        public static Microsoft.Xna.Framework.Color tileColor;
        public static double worldSurface;
        public static double rockLayer;
        public static Microsoft.Xna.Framework.Color[] teamColor = new Microsoft.Xna.Framework.Color[6];
        public static bool dayTime = true;
        public static double time = 13500.0;
        public static int moonPhase = 0;
        public static short sunModY = 0;
        public static short moonModY = 0;
        public static bool grabSky = false;
        public static bool bloodMoon = false;
        public static bool pumpkinMoon = false;
        public static bool snowMoon = false;
        public static float cloudAlpha = 0f;
        public static float maxRaining = 0f;
        public static float oldMaxRaining = 0f;
        public static int rainTime = 0;
        public static bool raining = false;
        public static bool eclipse = false;
        public static float eclipseLight = 0f;
        public static int checkForSpawns = 0;
        public static int helpText = 0;
        public static bool autoGen = false;
        public static bool autoPause = false;
        public static int[] projFrames = new int[651];
        public static bool[] projPet = new bool[651];
        public static float demonTorch = 1f;
        public static int demonTorchDir = 1;
        public static float martianLight = 1f;
        public static int martianLightDir = 1;
        public static bool placementPreview = true;
        public static int numStars;
        public static int weatherCounter = 0;
        public static int cloudLimit = 200;
        public static int numClouds = Game1.cloudLimit;
        public static int numCloudsTemp = Game1.numClouds;
        public static float windSpeedTemp = 0f;
        public static float windSpeed = 0f;
        public static float windSpeedSet = 0f;
        public static float windSpeedSpeed = 0f;
        public static Cloud[] cloud = new Cloud[200];
        public static bool resetClouds = true;
        public static int sandTiles;
        public static int evilTiles;
        public static int shroomTiles;
        public static float shroomLight;
        public static int snowTiles;
        public static int holyTiles;
        public static int waterCandles;
        public static int peaceCandles;
        public static int meteorTiles;
        public static int bloodTiles;
        public static int jungleTiles;
        public static int dungeonTiles;
        public static bool sunflower;
        public static bool clock;
        public static bool campfire;
        public static bool starInBottle;
        public static bool heartLantern;
        public static int fadeCounter = 0;
        public static float invAlpha = 1f;
        public static float invDir = 1f;

        [ThreadStatic]
        public static Random rand;
        public static Texture2D[] chestStackTexture = new Texture2D[2];
        private static bool allChestStackHover = false;
        public static Texture2D[] bannerTexture = new Texture2D[3];
        public static Texture2D[] npcHeadTexture = new Texture2D[24];
        public static Texture2D[] npcHeadBossTexture = new Texture2D[31];
        public static Texture2D[] craftToggleTexture = new Texture2D[4];
        public static Texture2D craftUpButtonTexture;
        public static Texture2D craftDownButtonTexture;
        public static Texture2D scrollLeftButtonTexture;
        public static Texture2D scrollRightButtonTexture;
        public static Texture2D frozenTexture;
        public static Texture2D magicPixel;
        public static Texture2D miniMapFrameTexture;
        public static Texture2D miniMapFrame2Texture;
        public static Texture2D[] miniMapButtonTexture = new Texture2D[3];
        public static Texture2D[] destTexture = new Texture2D[3];
        public static Texture2D[] gemTexture = new Texture2D[6];
        public static Texture2D[] rudolphMountTexture = new Texture2D[3];
        public static Texture2D bunnyMountTexture;
        public static Texture2D pigronMountTexture;
        public static Texture2D slimeMountTexture;
        public static Texture2D minecartMountTexture;
        public static Texture2D turtleMountTexture;
        public static Texture2D[] beeMountTexture = new Texture2D[2];
        public static Texture2D[] UFOMountTexture = new Texture2D[2];
        public static Texture2D[] drillMountTexture = new Texture2D[6];
        public static Texture2D[] scutlixMountTexture = new Texture2D[3];
        public static Texture2D unicornMountTexture;
        public static Texture2D[] minecartMechMountTexture = new Texture2D[2];
        public static Texture2D[] cuteFishronMountTexture = new Texture2D[2];
        public static Texture2D minecartWoodMountTexture;
        public static Texture2D[] wingsTexture = new Texture2D[37];
        public static Texture2D[] armorHeadTexture = new Texture2D[194];
        public static Texture2D[] armorBodyTexture = new Texture2D[195];
        public static Texture2D[] femaleBodyTexture = new Texture2D[195];
        public static Texture2D[] armorArmTexture = new Texture2D[195];
        public static Texture2D[] armorLegTexture = new Texture2D[135];
        public static Texture2D[] accHandsOnTexture = new Texture2D[19];
        public static Texture2D[] accHandsOffTexture = new Texture2D[12];
        public static Texture2D[] accBackTexture = new Texture2D[10];
        public static Texture2D[] accFrontTexture = new Texture2D[5];
        public static Texture2D[] accShoesTexture = new Texture2D[18];
        public static Texture2D[] accWaistTexture = new Texture2D[12];
        public static Texture2D[] accShieldTexture = new Texture2D[6];
        public static Texture2D[] accNeckTexture = new Texture2D[9];
        public static Texture2D[] accFaceTexture = new Texture2D[9];
        public static Texture2D[] accBalloonTexture = new Texture2D[16];
        public static Texture2D pulleyTexture;
        public static Texture2D[] xmasTree = new Texture2D[5];
        public static Texture2D[] FlameTexture = new Texture2D[17];
        public static Texture2D timerTexture;
        public static Texture2D[] reforgeTexture = new Texture2D[2];
        public static Texture2D wallOutlineTexture;
        public static Texture2D actuatorTexture;
        public static Texture2D wireTexture;
        public static Texture2D wire2Texture;
        public static Texture2D wire3Texture;
        public static Texture2D[] cameraTexture = new Texture2D[8];
        public static Texture2D flyingCarpetTexture;
        public static Texture2D gridTexture;
        public static Texture2D lightDiscTexture;
        public static Texture2D EyeLaserTexture;
        public static Texture2D BoneEyesTexture;
        public static Texture2D BoneLaserTexture;
        public static Texture2D trashTexture;
        public static Texture2D fishingLineTexture;
        public static Texture2D beetleTexture;
        public static Texture2D probeTexture;
        public static Texture2D eyeLaserSmallTexture;
        public static Texture2D xmasLightTexture;
        public static Texture2D[] golemTexture = new Texture2D[4];
        public static Texture2D confuseTexture;
        public static Texture2D sunOrbTexture;
        public static Texture2D sunAltarTexture;
        public static Texture2D[] chainsTexture = new Texture2D[16];
        public static Texture2D chainTexture;
        public static Texture2D[] gemChainTexture = new Texture2D[7];
        public static Texture2D chain2Texture;
        public static Texture2D chain3Texture;
        public static Texture2D chain4Texture;
        public static Texture2D chain5Texture;
        public static Texture2D chain6Texture;
        public static Texture2D chain7Texture;
        public static Texture2D chain8Texture;
        public static Texture2D chain9Texture;
        public static Texture2D chain10Texture;
        public static Texture2D chain11Texture;
        public static Texture2D chain12Texture;
        public static Texture2D chain13Texture;
        public static Texture2D chain14Texture;
        public static Texture2D chain15Texture;
        public static Texture2D chain16Texture;
        public static Texture2D chain17Texture;
        public static Texture2D chain18Texture;
        public static Texture2D chain19Texture;
        public static Texture2D chain20Texture;
        public static Texture2D chain21Texture;
        public static Texture2D chain22Texture;
        public static Texture2D chain23Texture;
        public static Texture2D chain24Texture;
        public static Texture2D chain25Texture;
        public static Texture2D chain26Texture;
        public static Texture2D chain27Texture;
        public static Texture2D chain28Texture;
        public static Texture2D chain29Texture;
        public static Texture2D chain30Texture;
        public static Texture2D chain31Texture;
        public static Texture2D chain32Texture;
        public static Texture2D chain33Texture;
        public static Texture2D chain34Texture;
        public static Texture2D chain35Texture;
        public static Texture2D chain36Texture;
        public static Texture2D chain37Texture;
        public static Texture2D chain38Texture;
        public static Texture2D chain39Texture;
        public static Texture2D chain40Texture;
        public static Texture2D hbTexture1;
        public static Texture2D hbTexture2;
        public static Texture2D chaosTexture;
        public static Texture2D cdTexture;
        public static Texture2D wofTexture;
        public static Texture2D boneArmTexture;
        public static Texture2D boneArm2Texture;
        public static Texture2D pumpkingArmTexture;
        public static Texture2D pumpkingCloakTexture;
        public static Texture2D[] EquipPageTexture = new Texture2D[11];
        public static Texture2D[] PVPTexture = new Texture2D[3];
        public static Texture2D[] npcToggleTexture = new Texture2D[2];
        public static Texture2D[] HBLockTexture = new Texture2D[2];
        public static Texture2D[] buffTexture = new Texture2D[191];
        public static Texture2D[] itemTexture = new Texture2D[3601];
        public static Texture2D[] itemFlameTexture = new Texture2D[3601];
        public static Texture2D[] npcTexture = new Texture2D[540];
        public static Texture2D[] projectileTexture = new Texture2D[651];
        public static Texture2D[] goreTexture = new Texture2D[907];
        public static Texture2D[] BackPackTexture = new Texture2D[8];
        public static Texture2D rainTexture;
        public static Texture2D[] glowMaskTexture = new Texture2D[214];
        public static Texture2D[] extraTexture = new Texture2D[69];
        public static Texture2D[] coinTexture = new Texture2D[4];
        public static Texture2D[] cursorTextures = new Texture2D[13];
        public static Texture2D dustTexture;
        public static Texture2D sunTexture;
        public static Texture2D sun2Texture;
        public static Texture2D sun3Texture;
        public static int maxMoons = 3;
        public static int moonType = 0;
        public static Texture2D[] moonTexture = new Texture2D[Game1.maxMoons];
        public static Texture2D pumpkinMoonTexture;
        public static Texture2D snowMoonTexture;
        public static Texture2D oneDropLogo;
        public static int numTileColors = 31;
        public static RenderTarget2D[,] tileAltTexture = new RenderTarget2D[419, Game1.numTileColors];
        public static bool[,] tileAltTextureInit = new bool[419, Game1.numTileColors];
        public static bool[,] tileAltTextureDrawn = new bool[419, Game1.numTileColors];
        public static int numTreeStyles = 19;
        public static RenderTarget2D[,] treeTopAltTexture = new RenderTarget2D[Game1.numTreeStyles, Game1.numTileColors];
        public static RenderTarget2D[,] treeBranchAltTexture = new RenderTarget2D[Game1.numTreeStyles, Game1.numTileColors];
        public static bool[,] treeAltTextureInit = new bool[Game1.numTreeStyles, Game1.numTileColors];
        public static bool[,] treeAltTextureDrawn = new bool[Game1.numTreeStyles, Game1.numTileColors];
        public static bool[,] checkTreeAlt = new bool[Game1.numTreeStyles, Game1.numTileColors];
        public static RenderTarget2D[,] wallAltTexture = new RenderTarget2D[225, Game1.numTileColors];
        public static bool[,] wallAltTextureInit = new bool[225, Game1.numTileColors];
        public static bool[,] wallAltTextureDrawn = new bool[225, Game1.numTileColors];
        public static Texture2D[] tileTexture = new Texture2D[419];
        public static Texture2D blackTileTexture;
        public static Texture2D[] wallTexture = new Texture2D[225];
        public static Texture2D[] backgroundTexture = new Texture2D[207];
        public static Texture2D[] cloudTexture = new Texture2D[22];
        public static Texture2D[] starTexture = new Texture2D[5];
        public static Texture2D[] liquidTexture = new Texture2D[12];
        public static Texture2D heartTexture;
        public static Texture2D heart2Texture;
        public static Texture2D manaTexture;
        public static Texture2D bubbleTexture;
        public static Texture2D flameTexture;
        public static Texture2D[] treeTopTexture = new Texture2D[Game1.numTreeStyles];
        public static Texture2D[] treeBranchTexture = new Texture2D[Game1.numTreeStyles];
        public static Texture2D[] woodTexture = new Texture2D[7];
        public static RenderTarget2D[,] woodAltTexture = new RenderTarget2D[Game1.woodTexture.Length, Game1.numTileColors];
        public static Texture2D shroomCapTexture;
        public static Texture2D inventoryBackTexture;
        public static Texture2D inventoryBack2Texture;
        public static Texture2D inventoryBack3Texture;
        public static Texture2D inventoryBack4Texture;
        public static Texture2D inventoryBack5Texture;
        public static Texture2D inventoryBack6Texture;
        public static Texture2D inventoryBack7Texture;
        public static Texture2D inventoryBack8Texture;
        public static Texture2D inventoryBack9Texture;
        public static Texture2D inventoryBack10Texture;
        public static Texture2D inventoryBack11Texture;
        public static Texture2D inventoryBack12Texture;
        public static Texture2D inventoryBack13Texture;
        public static Texture2D inventoryBack14Texture;
        public static Texture2D inventoryBack15Texture;
        public static Texture2D hairStyleBackTexture;
        public static Texture2D clothesStyleBackTexture;
        public static Texture2D inventoryTickOnTexture;
        public static Texture2D inventoryTickOffTexture;
        public static Texture2D loTexture;
        public static Texture2D logoTexture;
        public static Texture2D logo2Texture;
        public static Texture2D textBackTexture;
        public static Texture2D chatTexture;
        public static Texture2D chat2Texture;
        public static Texture2D chatBackTexture;
        public static Texture2D teamTexture;
        public static Texture2D reTexture;
        public static Texture2D raTexture;
        public static Texture2D splashTexture;
        public static Texture2D fadeTexture;
        public static Texture2D ninjaTexture;
        public static Texture2D antLionTexture;
        public static Texture2D spikeBaseTexture;
        public static Texture2D ghostTexture;
        public static Texture2D evilCactusTexture;
        public static Texture2D goodCactusTexture;
        public static Texture2D crimsonCactusTexture;
        public static Texture2D wraithEyeTexture;
        public static Texture2D fireflyTexture;
        public static Texture2D fireflyJarTexture;
        public static Texture2D lightningbugTexture;
        public static Texture2D lightningbugJarTexture;
        public static Texture2D[] jellyfishBowlTexture = new Texture2D[3];
        public static Texture2D glowSnailTexture;
        public static Texture2D iceQueenTexture;
        public static Texture2D santaTankTexture;
        public static Texture2D reaperEyeTexture;
        public static Texture2D jackHatTexture;
        public static Texture2D treeFaceTexture;
        public static Texture2D pumpkingFaceTexture;
        public static Texture2D dukeFishronTexture;
        public static Texture2D miniMinotaurTexture;
        public static Texture2D[,] playerTextures;
        public static Texture2D[] playerHairTexture = new Texture2D[134];
        public static Texture2D[] playerHairAltTexture = new Texture2D[134];
        public static SoundEffect[] soundDrip = new SoundEffect[3];
        public static SoundEffectInstance[] soundInstanceDrip = new SoundEffectInstance[3];
        public static SoundEffect[] soundLiquid = new SoundEffect[2];
        public static SoundEffectInstance[] soundInstanceLiquid = new SoundEffectInstance[2];
        public static SoundEffect[] soundMech = new SoundEffect[1];
        public static SoundEffectInstance[] soundInstanceMech = new SoundEffectInstance[1];
        public static SoundEffect[] soundDig = new SoundEffect[3];
        public static SoundEffectInstance[] soundInstanceDig = new SoundEffectInstance[3];
        public static SoundEffect[] soundTink = new SoundEffect[3];
        public static SoundEffectInstance[] soundInstanceTink = new SoundEffectInstance[3];
        public static SoundEffect[] soundCoin = new SoundEffect[5];
        public static SoundEffectInstance[] soundInstanceCoin = new SoundEffectInstance[5];
        public static SoundEffect[] soundPlayerHit = new SoundEffect[3];
        public static SoundEffectInstance[] soundInstancePlayerHit = new SoundEffectInstance[3];
        public static SoundEffect[] soundFemaleHit = new SoundEffect[3];
        public static SoundEffectInstance[] soundInstanceFemaleHit = new SoundEffectInstance[3];
        public static SoundEffect soundPlayerKilled;
        public static SoundEffectInstance soundInstancePlayerKilled;
        public static SoundEffect soundGrass;
        public static SoundEffectInstance soundInstanceGrass;
        public static SoundEffect soundGrab;
        public static SoundEffectInstance soundInstanceGrab;
        public static SoundEffect soundPixie;
        public static SoundEffectInstance soundInstancePixie;
        public static SoundEffect[] soundItem = new SoundEffect[126];
        public static SoundEffectInstance[] soundInstanceItem = new SoundEffectInstance[126];
        public static SoundEffect[] soundNPCHit = new SoundEffect[58];
        public static SoundEffectInstance[] soundInstanceNPCHit = new SoundEffectInstance[58];
        public static SoundEffect[] soundNPCKilled = new SoundEffect[63];
        public static SoundEffectInstance[] soundInstanceNPCKilled = new SoundEffectInstance[63];
        public static SoundEffectInstance soundInstanceMoonlordCry;
        public static SoundEffect soundDoorOpen;
        public static SoundEffectInstance soundInstanceDoorOpen;
        public static SoundEffect soundDoorClosed;
        public static SoundEffectInstance soundInstanceDoorClosed;
        public static SoundEffect soundMenuOpen;
        public static SoundEffectInstance soundInstanceMenuOpen;
        public static SoundEffect soundMenuClose;
        public static SoundEffectInstance soundInstanceMenuClose;
        public static SoundEffect soundMenuTick;
        public static SoundEffectInstance soundInstanceMenuTick;
        public static SoundEffect soundShatter;
        public static SoundEffectInstance soundInstanceShatter;
        public static SoundEffect soundCamera;
        public static SoundEffectInstance soundInstanceCamera;
        public static SoundEffect[] soundZombie = new SoundEffect[106];
        public static SoundEffectInstance[] soundInstanceZombie = new SoundEffectInstance[106];
        public static SoundEffect[] soundRoar = new SoundEffect[3];
        public static SoundEffectInstance[] soundInstanceRoar = new SoundEffectInstance[3];
        public static SoundEffect[] soundSplash = new SoundEffect[2];
        public static SoundEffectInstance[] soundInstanceSplash = new SoundEffectInstance[2];
        public static SoundEffect soundDoubleJump;
        public static SoundEffectInstance soundInstanceDoubleJump;
        public static SoundEffect soundRun;
        public static SoundEffectInstance soundInstanceRun;
        public static SoundEffect soundCoins;
        public static SoundEffectInstance soundInstanceCoins;
        public static SoundEffect soundUnlock;
        public static SoundEffectInstance soundInstanceUnlock;
        public static SoundEffect soundChat;
        public static SoundEffectInstance soundInstanceChat;
        public static SoundEffect soundMaxMana;
        public static SoundEffectInstance soundInstanceMaxMana;
        public static SoundEffect soundDrown;
        public static SoundEffectInstance soundInstanceDrown;
        public static AudioEngine engine;
        public static SoundBank soundBank;
        public static WaveBank waveBank;
        public static Cue[] music = new Cue[40];
        public static float[] musicFade = new float[40];
        public static float musicVolume = 0.75f;
        public static float ambientVolume = 0.75f;
        public static float soundVolume = 1f;
        public static SpriteFont fontItemStack;
        public static SpriteFont fontMouseText;
        public static SpriteFont fontDeathText;
        public static SpriteFont[] fontCombatText = new SpriteFont[2];
        public static ServerSocialMode MenuServerMode = ServerSocialMode.None;
        public static bool[] tileLighted = new bool[419];
        public static bool[] tileMergeDirt = new bool[419];
        public static bool[] tileCut = new bool[419];
        public static bool[] tileAlch = new bool[419];
        public static int[] tileShine = new int[419];
        public static bool[] tileShine2 = new bool[419];
        public static bool[] wallHouse = new bool[225];
        public static bool[] wallDungeon = new bool[225];
        public static bool[] wallLight = new bool[225];
        public static int[] wallBlend = new int[225];
        public static bool[] tileStone = new bool[419];
        public static bool[] tileAxe = new bool[419];
        public static bool[] tileHammer = new bool[419];
        public static bool[] tileWaterDeath = new bool[419];
        public static bool[] tileLavaDeath = new bool[419];
        public static bool[] tileTable = new bool[419];
        public static bool[] tileBlockLight = new bool[419];
        public static bool[] tileNoSunLight = new bool[419];
        public static bool[] tileDungeon = new bool[419];
        public static bool[] tileSpelunker = new bool[419];
        public static bool[] tileSolidTop = new bool[419];
        public static bool[] tileSolid = new bool[419];
        public static bool[] tileBouncy = new bool[419];
        public static short[] tileValue = new short[419];
        public static byte[] tileLargeFrames = new byte[419];
        public static byte[] wallLargeFrames = new byte[225];
        public static bool[] tileRope = new bool[419];
        public static bool[] tileBrick = new bool[419];
        public static bool[] tileMoss = new bool[419];
        public static bool[] tileNoAttach = new bool[419];
        public static bool[] tileNoFail = new bool[419];
        public static bool[] tileObsidianKill = new bool[419];
        public static bool[] tileFrameImportant = new bool[419];
        public static bool[] tilePile = new bool[419];
        public static bool[] tileBlendAll = new bool[419];
        public static short[] tileGlowMask = new short[419];
        public static bool[] tileContainer = new bool[419];
        public static bool[] tileSign = new bool[419];
        public static bool[][] tileMerge = new bool[419][];
        public static int cageFrames = 25;
        public static bool critterCage = false;
        public static int[] bunnyCageFrame = new int[Game1.cageFrames];
        public static int[] bunnyCageFrameCounter = new int[Game1.cageFrames];
        public static int[] squirrelCageFrame = new int[Game1.cageFrames];
        public static int[] squirrelCageFrameCounter = new int[Game1.cageFrames];
        public static int[] squirrelCageFrameOrange = new int[Game1.cageFrames];
        public static int[] squirrelCageFrameCounterOrange = new int[Game1.cageFrames];
        public static int[] mallardCageFrame = new int[Game1.cageFrames];
        public static int[] mallardCageFrameCounter = new int[Game1.cageFrames];
        public static int[] duckCageFrame = new int[Game1.cageFrames];
        public static int[] duckCageFrameCounter = new int[Game1.cageFrames];
        public static int[] birdCageFrame = new int[Game1.cageFrames];
        public static int[] birdCageFrameCounter = new int[Game1.cageFrames];
        public static int[] redBirdCageFrame = new int[Game1.cageFrames];
        public static int[] redBirdCageFrameCounter = new int[Game1.cageFrames];
        public static int[] blueBirdCageFrame = new int[Game1.cageFrames];
        public static int[] blueBirdCageFrameCounter = new int[Game1.cageFrames];
        public static byte[,] butterflyCageMode = new byte[9, Game1.cageFrames];
        public static int[,] butterflyCageFrame = new int[9, Game1.cageFrames];
        public static int[,] butterflyCageFrameCounter = new int[9, Game1.cageFrames];
        public static int[,] scorpionCageFrame = new int[2, Game1.cageFrames];
        public static int[,] scorpionCageFrameCounter = new int[2, Game1.cageFrames];
        public static int[] snailCageFrame = new int[Game1.cageFrames];
        public static int[] snailCageFrameCounter = new int[Game1.cageFrames];
        public static int[] snail2CageFrame = new int[Game1.cageFrames];
        public static int[] snail2CageFrameCounter = new int[Game1.cageFrames];
        public static byte[] fishBowlFrameMode = new byte[Game1.cageFrames];
        public static int[] fishBowlFrame = new int[Game1.cageFrames];
        public static int[] fishBowlFrameCounter = new int[Game1.cageFrames];
        public static int[] frogCageFrame = new int[Game1.cageFrames];
        public static int[] frogCageFrameCounter = new int[Game1.cageFrames];
        public static int[] mouseCageFrame = new int[Game1.cageFrames];
        public static int[] mouseCageFrameCounter = new int[Game1.cageFrames];
        public static byte[,] jellyfishCageMode = new byte[3, Game1.cageFrames];
        public static int[,] jellyfishCageFrame = new int[3, Game1.cageFrames];
        public static int[,] jellyfishCageFrameCounter = new int[3, Game1.cageFrames];
        public static int[] wormCageFrame = new int[Game1.cageFrames];
        public static int[] wormCageFrameCounter = new int[Game1.cageFrames];
        public static int[] penguinCageFrame = new int[Game1.cageFrames];
        public static int[] penguinCageFrameCounter = new int[Game1.cageFrames];
        public static int[,] slugCageFrame = new int[3, Game1.cageFrames];
        public static int[,] slugCageFrameCounter = new int[3, Game1.cageFrames];
        public static int[] grasshopperCageFrame = new int[Game1.cageFrames];
        public static int[] grasshopperCageFrameCounter = new int[Game1.cageFrames];
        public static bool[] tileSand = new bool[419];
        public static bool[] tileFlame = new bool[419];
        public static bool[] npcCatchable = new bool[540];
        public static int[] tileFrame = new int[419];
        public static int[] tileFrameCounter = new int[419];
        public static byte[] wallFrame = new byte[225];
        public static byte[] wallFrameCounter = new byte[225];
        public static int[] backgroundWidth = new int[207];
        public static int[] backgroundHeight = new int[207];
        public static bool tilesLoaded = false;
        public static WorldMap Map = new WorldMap(Game1.maxTilesX, Game1.maxTilesY);
        public static Tile[,] tile = new Tile[Game1.maxTilesX, Game1.maxTilesY];
        public static Dust[] dust = new Dust[6001];
        public static Star[] star = new Star[130];
        public static Item[] item = new Item[401];
        public static int[] itemLockoutTime = new int[401];
        public static NPC[] npc = new NPC[201];
        public static Gore[] gore = new Gore[501];
        public static Rain[] rain = new Rain[Game1.maxRain + 1];
        public static Projectile[] projectile = new Projectile[1001];
        public static CombatText[] combatText = new CombatText[100];
        public static ItemText[] itemText = new ItemText[20];
        public static Chest[] chest = new Chest[1000];
        public static Sign[] sign = new Sign[1000];
        public static int[] itemFrame = new int[401];
        public static int[] itemFrameCounter = new int[401];
        public static DrawAnimation[] itemAnimations = new DrawAnimation[3601];
        public static List<int> itemAnimationsRegistered = new List<int>();
        public static Vector2 screenPosition;
        public static Vector2 screenLastPosition;
        public static int screenWidth = 1152;
        public static int screenHeight = 864;
        public static bool screenMaximized = false;
        public static int chatLength = 600;
        public static bool chatMode = false;
        public static bool chatRelease = false;
        public static int showCount = 10;
        public static int numChatLines = 500;
        public static int startChatLine = 0;
        public static string chatText = "";
        public static ChatLine[] chatLine = new ChatLine[Game1.numChatLines];
        public static bool inputTextEnter = false;
        public static bool inputTextEscape = false;
        public static float[] hotbarScale = new float[]
        {
            1f,
            0.75f,
            0.75f,
            0.75f,
            0.75f,
            0.75f,
            0.75f,
            0.75f,
            0.75f,
            0.75f
        };
        public static byte mouseTextColor = 0;
        public static int mouseTextColorChange = 1;
        public static bool mouseLeftRelease = false;
        public static bool mouseRightRelease = false;
        public static bool playerInventory = false;
        public static int stackSplit;
        public static int stackCounter = 0;
        public static int stackDelay = 7;
        public static int superFastStack = 0;
        public static Item mouseItem = new Item();
        public static Item guideItem = new Item();
        public static Item reforgeItem = new Item();
        public static float inventoryScale = 0.75f;
        public static bool hasFocus = true;
        public static bool recFastScroll = false;
        public static bool recBigList = false;
        public static int recStart = 0;
        public static Recipe[] recipe = new Recipe[Recipe.maxRecipes];
        public static int[] availableRecipe = new int[Recipe.maxRecipes];
        public static float[] availableRecipeY = new float[Recipe.maxRecipes];
        public static int numAvailableRecipes;
        public static int focusRecipe;
        public static int myPlayer = 0;
        public static Player[] player = new Player[256];
        public static List<DrawData> playerDrawData = new List<DrawData>();
        public static List<int> playerDrawDust = new List<int>();
        public static List<int> playerDrawGore = new List<int>();
        public static int spawnTileX;
        public static int spawnTileY;
        public static bool npcChatRelease = false;
        public static bool editSign = false;
        public static bool editChest = false;
        public static bool blockInput = false;
        public static Microsoft.Xna.Framework.Input.Keys blockKey 
            = Microsoft.Xna.Framework.Input.Keys.None;
        public static string defaultChestName = string.Empty;
        public static string npcChatText = "";
        public static bool npcChatFocus1 = false;
        public static bool npcChatFocus2 = false;
        public static bool npcChatFocus3 = false;
        public static int npcShop = 0;
        public static int numShops = 21;
        public static int npcChatCornerItem = 0;
        public Chest[] shop = new Chest[Game1.numShops];
        public static int[] travelShop = new int[40];
        public static List<string> anglerWhoFinishedToday = new List<string>();
        public static bool anglerQuestFinished;
        public static int anglerQuest = 0;
        public static int[] anglerQuestItemNetIDs = new int[]
        {
            2450,
            2451,
            2452,
            2453,
            2454,
            2455,
            2456,
            2457,
            2458,
            2459,
            2460,
            2461,
            2462,
            2463,
            2464,
            2465,
            2466,
            2467,
            2468,
            2469,
            2470,
            2471,
            2472,
            2473,
            2474,
            2475,
            2476,
            2477,
            2478,
            2479,
            2480,
            2481,
            2482,
            2483,
            2484,
            2485,
            2486,
            2487,
            2488
        };
        public static bool craftGuide = false;
        public static bool reforge = false;
        public static Item toolTip = new Item();
        private static int backSpaceCount = 0;
        public static string motd = "";
        public static bool toggleFullscreen;
        public static int numDisplayModes = 0;
        public static int[] displayWidth = new int[99];
        public static int[] displayHeight = new int[99];
        public static bool gameMenu = true;
        private static int maxLoadPlayer = 1000;
        private static int maxLoadWorld = 1000;
        public static List<PlayerFileData> PlayerList = new List<PlayerFileData>();
        public static PlayerFileData ActivePlayerFileData = new PlayerFileData();
        public static Player PendingPlayer = null;
        public static List<WorldFileData> WorldList = new List<WorldFileData>();
        public static WorldFileData ActiveWorldFileData = new WorldFileData();

        public static string WorldPath = Game1.SavePath+"\\Data\\Worlds";
        public static string PlayerPath = Game1.SavePath+"\\Data\\Players";
        public static Preferences Configuration = new Preferences(Game1.SavePath+"\\Data\\config.json", false, false);

        public static string[] itemName = new string[3601];
        public static string[] npcName = new string[540];
        private static KeyboardState inputText;
        private static KeyboardState oldInputText;
        public static int PendingResolutionWidth = 800;
        public static int PendingResolutionHeight = 600;
        public static int invasionType = 0;
        public static double invasionX = 0.0;
        public static int invasionSize = 0;
        public static int invasionDelay = 0;
        public static int invasionWarn = 0;
        public static int invasionSizeStart = 0;
        public static bool invasionProgressNearInvasion = false;
        public static int invasionProgressMode = 2;
        public static int invasionProgressIcon = 0;
        public static int invasionProgress = 0;
        public static int invasionProgressMax = 0;
        public static int invasionProgressWave = 0;
        public static int invasionProgressDisplayLeft = 0;
        public static float invasionProgressAlpha = 0f;

        #region npcFrameCnt
        public static int[] npcFrameCount = new int[]
        {
            1,
            2,
            2,
            3,
            6,
            2,
            2,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            2,
            25,
            23,
            25,
            21,
            15,
            26,
            2,
            10,
            1,
            16,
            16,
            16,
            3,
            1,
            15,
            3,
            1,
            3,
            1,
            1,
            21,
            25,
            1,
            1,
            1,
            3,
            3,
            15,
            3,
            7,
            7,
            4,
            5,
            6,
            5,
            3,
            3,
            23,
            6,
            3,
            6,
            6,
            2,
            5,
            3,
            2,
            7,
            7,
            4,
            2,
            8,
            1,
            5,
            1,
            2,
            4,
            16,
            5,
            4,
            4,
            15,
            15,
            15,
            15,
            2,
            4,
            6,
            6,
            24,
            16,
            1,
            1,
            1,
            1,
            1,
            1,
            4,
            3,
            1,
            1,
            1,
            1,
            1,
            1,
            5,
            6,
            7,
            16,
            1,
            1,
            25,
            23,
            12,
            20,
            21,
            1,
            2,
            2,
            3,
            6,
            1,
            1,
            1,
            15,
            4,
            11,
            1,
            23,
            6,
            6,
            3,
            1,
            2,
            2,
            1,
            3,
            4,
            1,
            2,
            1,
            4,
            2,
            1,
            15,
            3,
            25,
            4,
            5,
            7,
            3,
            2,
            12,
            12,
            4,
            4,
            4,
            8,
            8,
            9,
            5,
            6,
            4,
            15,
            23,
            3,
            3,
            8,
            5,
            4,
            13,
            15,
            12,
            4,
            14,
            14,
            3,
            2,
            5,
            3,
            2,
            3,
            23,
            5,
            14,
            16,
            5,
            2,
            2,
            12,
            3,
            3,
            3,
            3,
            2,
            2,
            2,
            2,
            2,
            7,
            14,
            15,
            16,
            8,
            3,
            15,
            15,
            15,
            2,
            3,
            20,
            25,
            23,
            26,
            4,
            4,
            16,
            16,
            20,
            20,
            20,
            2,
            2,
            2,
            2,
            8,
            12,
            3,
            4,
            2,
            4,
            25,
            26,
            26,
            6,
            3,
            3,
            3,
            3,
            3,
            3,
            4,
            4,
            5,
            4,
            6,
            7,
            15,
            4,
            7,
            6,
            1,
            1,
            2,
            4,
            3,
            5,
            3,
            3,
            3,
            4,
            5,
            6,
            4,
            2,
            1,
            8,
            4,
            4,
            1,
            8,
            1,
            4,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            3,
            3,
            3,
            3,
            3,
            3,
            15,
            3,
            6,
            12,
            20,
            20,
            20,
            15,
            15,
            15,
            5,
            5,
            6,
            6,
            5,
            2,
            7,
            2,
            6,
            6,
            6,
            6,
            6,
            15,
            15,
            15,
            15,
            15,
            11,
            4,
            2,
            2,
            3,
            3,
            3,
            15,
            15,
            15,
            10,
            14,
            12,
            1,
            10,
            8,
            3,
            3,
            2,
            2,
            2,
            2,
            7,
            15,
            15,
            15,
            6,
            3,
            10,
            10,
            6,
            9,
            8,
            9,
            8,
            20,
            10,
            6,
            23,
            1,
            4,
            24,
            2,
            4,
            6,
            6,
            10,
            15,
            15,
            15,
            15,
            4,
            4,
            26,
            23,
            8,
            2,
            4,
            4,
            4,
            4,
            2,
            2,
            4,
            12,
            12,
            9,
            9,
            9,
            1,
            9,
            11,
            2,
            2,
            9,
            5,
            6,
            4,
            18,
            8,
            11,
            1,
            4,
            5,
            8,
            4,
            1,
            1,
            1,
            1,
            4,
            2,
            5,
            4,
            11,
            5,
            11,
            1,
            1,
            1,
            10,
            10,
            15,
            8,
            17,
            6,
            6,
            1,
            12,
            12,
            13,
            15,
            9,
            5,
            10,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            4,
            4,
            16,
            16,
            25,
            5,
            7,
            3,
            10,
            2,
            6,
            2,
            19,
            19,
            19,
            19,
            26,
            3,
            1,
            1,
            1,
            1,
            1,
            16,
            21,
            9,
            16,
            7,
            6,
            18,
            13,
            20,
            12,
            12,
            20,
            6,
            14,
            14,
            14,
            14,
            6,
            1,
            3,
            25,
            19,
            20,
            22,
            2,
            4,
            4,
            4,
            11,
            9,
            8,
            1,
            9,
            1,
            8,
            8,
            12,
            12,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            1,
            6,
            9,
            1,
            1,
            1,
            1,
            1,
            1,
            4,
            1,
            10,
            1,
            8,
            4,
            1,
            5,
            8,
            8,
            8,
            8,
            9,
            9,
            5,
            4,
            8,
            16,
            8,
            2,
            3,
            3,
            6,
            6
        };
        #endregion

        public static Dictionary<int, byte> npcLifeBytes = new Dictionary<int, byte>();
        private static bool mouseExit = false;
        private static float exitScale = 0.8f;
        private static bool mouseReforge = false;
        private static float reforgeScale = 0.8f;
        public static Player clientPlayer = new Player();
        public static string getIP = Game1.defaultIP;
        public static string getPort = Convert.ToString(Netplay.ListenPort);
        public static bool menuMultiplayer = false;
        public static bool menuServer = false;
        public static int netMode = 0;
        private static int _targetNetMode = 0;
        private static bool _hasPendingNetmodeChange = false;
        public static int netPlayCounter;
        public static int lastNPCUpdate;
        public static int lastItemUpdate;
        public static int maxNPCUpdates = 5;
        public static int maxItemUpdates = 5;
        public static string cUp = "W";
        public static string cLeft = "A";
        public static string cDown = "S";
        public static string cRight = "D";
        public static string cJump = "Space";
        public static string cThrowItem = "T";
        public static string cHeal = "H";
        public static string cMana = "J";
        public static string cBuff = "B";
        public static string cHook = "E";
        public static string cTorch = "LeftShift";
        public static string cInv = "Escape";
        public static string cSmart = "LeftControl";
        public static string cMount = "R";
        public static bool cSmartToggle = true;
        public static bool smartDigEnabled = false;
        public static bool smartDigShowing = false;
        public static int smartDigX;
        public static int smartDigY;
        public static int cursorOverride = -1;
        public static int signHover = -1;
        public static string cMapZoomIn = "Add";
        public static string cMapZoomOut = "Subtract";
        public static string cMapAlphaUp = "PageUp";
        public static string cMapAlphaDown = "PageDown";
        public static string cMapFull = "M";
        public static string cMapStyle = "Tab";
        public static Microsoft.Xna.Framework.Color mouseColor = new Microsoft.Xna.Framework.Color(255, 50, 95);
        public static Microsoft.Xna.Framework.Color cursorColor = Microsoft.Xna.Framework.Color.White;
        public static int cursorColorDirection = 1;
        public static float cursorAlpha = 0f;
        public static float cursorScale = 0f;
        public static bool signBubble = false;
        public static int signX = 0;
        public static int signY = 0;
        public static bool hideUI = false;
        public static bool releaseUI = false;
        public static bool terrariasFixedTiming = true;
        private int splashCounter;
        public List<int> DrawCacheNPCsMoonMoon = new List<int>(200);
        public List<int> DrawCacheNPCsOverPlayers = new List<int>(200);
        public List<int> DrawCacheProjsBackground = new List<int>(1000);
        public List<int> DrawCacheProjsWorms = new List<int>(1000);
        public List<int> DrawCacheNPCProjectiles = new List<int>(200);
        public static string oldStatusText = "";
        public static bool autoShutdown = false;
        public static bool serverGenLock = false;
        public static int sundialCooldown = 0;
        public static bool fastForwardTime = false;
        public static float ambientWaterfallX = -1f;
        public static float ambientWaterfallY = -1f;
        public static float ambientWaterfallStrength = 0f;
        public static float ambientLavafallX = -1f;
        public static float ambientLavafallY = -1f;
        public static float ambientLavafallStrength = 0f;
        public static float ambientLavaX = -1f;
        public static float ambientLavaY = -1f;
        public static float ambientLavaStrength = 0f;
        public static int ambientCounter = 0;
        public static int ProjectileUpdateLoopIndex = -1;
        private static bool _largeMethodFix = true;
        private float logoRotation;
        private float logoRotationDirection = 1f;
        private float logoRotationSpeed = 1f;
        private float logoScale = 1f;
        private float logoScaleDirection = 1f;
        private float logoScaleSpeed = 1f;
        private static int maxMenuItems = 16;
        private float[] menuItemScale = new float[Game1.maxMenuItems];
        private int focusMenu = -1;
        private int selectedMenu = -1;
        private int selectedMenu2 = -1;
        public static int selectedPlayer = 0;
        public static int selectedWorld = 0;
        public static int menuMode = 0;
        public static int menuSkip = 0;
        private static Item cpItem = new Item();
        public int textBlinkerCount;
        public int textBlinkerState;
        public static string newWorldName = "";
        public static string hoverItemName = "";
        public static Microsoft.Xna.Framework.Color inventoryBack = new Microsoft.Xna.Framework.Color(220, 220, 220, 220);
        public static bool mouseText = false;
        private static int mH = 0;
        private static int sX = Game1.screenWidth - 800;
        private static int starMana = 20;
        private static float heartLife = 20f;
        private static int rare = 0;
        private static int hairStart = 0;
        private static int oldHairStyle;
        private static Microsoft.Xna.Framework.Color oldHairColor;
        private static int selClothes = 0;
        private static Microsoft.Xna.Framework.Color[] oldClothesColor = new Microsoft.Xna.Framework.Color[4];
        public static int dresserX;
        public static int dresserY;
        public static Microsoft.Xna.Framework.Color selColor = Microsoft.Xna.Framework.Color.White;
        public static int focusColor = 0;
        public static int colorDelay = 0;
        public static int setKey = -1;
        public static int bgScroll = 0;
        public static bool autoPass = false;
        public static int menuFocus = 0;
        private static float hBar = -1f;
        private static float sBar = -1f;
        private static float lBar = 1f;
        private int grabColorSlider;
        public static bool blockMouse = false;
        private bool[] menuWide = new bool[100];

        private static string[] MonolithFilterNames = new string[]
        {
            "MonolithVortex",
            "MonolithNebula",
            "MonolithStardust",
            "MonolithSolar"
        };

        private static float tranSpeed = 0.05f;
        private static float atmo = 0f;
        private static float bgScale = 1f;
        private static int bgW = (int)(1024f * Game1.bgScale);
        private static Microsoft.Xna.Framework.Color backColor = Microsoft.Xna.Framework.Color.White;
        private static Microsoft.Xna.Framework.Color trueBackColor = Game1.backColor;
        private float screenOff;
        private float scAdj;
        private float cTop;
        public static event Action OnEngineLoad;
        public static DB db;



        public static bool expertMode
        {
            get
            {
                return Game1.ActiveWorldFileData.IsExpertMode;
            }
            set
            {
                Game1.ActiveWorldFileData.IsExpertMode = value;
            }
        }
        public static AchievementManager Achievements
        {
            get
            {
                return Game1.instance._achievements;
            }
        }
        public static Vector2 MouseScreen
        {
            get
            {
                return new Vector2((float)Game1.mouseX, (float)Game1.mouseY);
            }
        }
        public static Vector2 MouseWorld
        {
            get
            {
                Vector2 result = Game1.MouseScreen + Game1.screenPosition;
                if (Game1.player[Game1.myPlayer].gravDir == -1f)
                {
                    result.Y = Game1.screenPosition.Y + (float)Game1.screenHeight - (float)Game1.mouseY;
                }
                return result;
            }
        }
        public static string playerPathName
        {
            get
            {
                return Game1.ActivePlayerFileData.Path;
            }
        }
        public static string worldPathName
        {
            get
            {
                return Game1.ActiveWorldFileData.Path;
            }
        }
        public static Vector2 ReverseGravitySupport(Vector2 pos, float height = 0f)
        {
            if (Game1.player[Game1.myPlayer].gravDir != -1f)
            {
                return pos;
            }
            pos.Y = (float)Game1.screenHeight - pos.Y - height;
            return pos;
        }
        public static Microsoft.Xna.Framework.Point ReverseGravitySupport(Microsoft.Xna.Framework.Point pos, int height = 0)
        {
            if (Game1.player[Game1.myPlayer].gravDir != -1f)
            {
                return pos;
            }
            pos.Y = Game1.screenHeight - pos.Y - height;
            return pos;
        }


        public static Microsoft.Xna.Framework.Rectangle ReverseGravitySupport(Microsoft.Xna.Framework.Rectangle box)
        {
            if (Game1.player[Game1.myPlayer].gravDir != -1f)
            {
                return box;
            }
            box.Y = Game1.screenHeight - box.Y - box.Height;
            return box;
        }


        //[DllImport("User32")]
        private static /*extern*/ int RemoveMenu(IntPtr hMenu, int nPosition, int wFlags)
        {
            return default;
        }

        //[DllImport("User32")]
        private static /*extern*/ IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert)
        {
            return default;
        }

        //[DllImport("User32")]
        private static /*extern*/ int GetMenuItemCount(IntPtr hWnd)
        {
            return default;
        }


        //[DllImport("kernel32.dll")]
        public static /*extern*/ IntPtr LoadLibrary(string dllToLoad)
        {
            return default;
        }


        // SetupTileMerge
        public static void SetupTileMerge()
        {
            int num = 419;
            Game1.tileMerge = new bool[num][];
            for (int i = 0; i < Game1.tileMerge.Length; i++)
            {
                Game1.tileMerge[i] = new bool[num];
            }
        }//SetupTileMerge


        // RegisterItemAnimation
        public static void RegisterItemAnimation(int index, DrawAnimation animation)
        {
            if (!Game1.itemAnimationsRegistered.Contains(index))
            {
                Game1.itemAnimationsRegistered.Add(index);
            }
            Game1.itemAnimations[index] = animation;
        }//RegisterItemAnimation


        // InitializeItemAnimations
        public static void InitializeItemAnimations()
        {
            for (int i = 0; i < Game1.itemAnimations.Length; i++)
            {
                Game1.itemAnimations[i] = null;
            }
            Game1.itemAnimationsRegistered.Clear();
            Game1.RegisterItemAnimation(3581, new DrawAnimationVertical(4, 4));
            Game1.RegisterItemAnimation(3580, new DrawAnimationVertical(4, 4));
            Game1.RegisterItemAnimation(575, new DrawAnimationVertical(5, 4));
            Game1.RegisterItemAnimation(547, new DrawAnimationVertical(5, 4));
            Game1.RegisterItemAnimation(520, new DrawAnimationVertical(5, 4));
            Game1.RegisterItemAnimation(548, new DrawAnimationVertical(5, 4));
            Game1.RegisterItemAnimation(521, new DrawAnimationVertical(5, 4));
            Game1.RegisterItemAnimation(549, new DrawAnimationVertical(5, 4));
        }//InitializeItemAnimations


        // AnglerQuestSwap
        public static void AnglerQuestSwap()
        {
            if (Game1.netMode == 1)
            {
                return;
            }
            Game1.anglerWhoFinishedToday.Clear();
            Game1.anglerQuestFinished = false;
            bool flag = true;
            while (flag)
            {
                flag = false;
                Game1.anglerQuest = Game1.rand.Next(Game1.anglerQuestItemNetIDs.Length);
                int num = Game1.anglerQuestItemNetIDs[Game1.anglerQuest];
                if (num == 2454 && (!Game1.hardMode || WorldGen.crimson))
                {
                    flag = true;
                }
                if (num == 2457 && WorldGen.crimson)
                {
                    flag = true;
                }
                if (num == 2462 && !Game1.hardMode)
                {
                    flag = true;
                }
                if (num == 2463 && (!Game1.hardMode || !WorldGen.crimson))
                {
                    flag = true;
                }
                if (num == 2465 && !Game1.hardMode)
                {
                    flag = true;
                }
                if (num == 2468 && !Game1.hardMode)
                {
                    flag = true;
                }
                if (num == 2471 && !Game1.hardMode)
                {
                    flag = true;
                }
                if (num == 2473 && !Game1.hardMode)
                {
                    flag = true;
                }
                if (num == 2477 && !WorldGen.crimson)
                {
                    flag = true;
                }
                if (num == 2480 && !Game1.hardMode)
                {
                    flag = true;
                }
                if (num == 2483 && !Game1.hardMode)
                {
                    flag = true;
                }
                if (num == 2484 && !Game1.hardMode)
                {
                    flag = true;
                }
                if (num == 2485 && WorldGen.crimson)
                {
                    flag = true;
                }
            }
            NetMessage.SendAnglerQuest();
        }//AnglerQuestSwap


        // LoadWorlds
        public static void LoadWorlds()
        {
            Game1.WorldList.Clear();
            Directory.CreateDirectory(Game1.WorldPath);
            string[] files = Directory.GetFiles(Game1.WorldPath, "*.wld");
            int num = Math.Min(files.Length, Game1.maxLoadWorld);
            for (int i = 0; i < num; i++)
            {
                WorldFileData allMetadata = WorldFile.GetAllMetadata(files[i]);
                if (allMetadata != null)
                {
                    Game1.WorldList.Add(allMetadata);
                }
                else
                {
                    Game1.WorldList.Add(WorldFileData.FromInvalidWorld(files[i], false));
                }
            }

            Game1.WorldList.Sort(new Comparison<WorldFileData>(Game1.WorldListSortMethod));
        }//LoadWorlds


        // WorldListSortMethod
        private static int WorldListSortMethod(WorldFileData data1, WorldFileData data2)
        {
            return data1.Name.CompareTo(data2.Name);
        }//WorldListSortMethod


        // LoadPlayers
        public static void LoadPlayers()
        {
            Game1.PlayerList.Clear();
            Directory.CreateDirectory(Game1.PlayerPath);
            string[] files = Directory.GetFiles(Game1.PlayerPath, "*.plr");
            int num = Math.Min(Game1.maxLoadPlayer, files.Length);
            for (int i = 0; i < num; i++)
            {
                PlayerFileData fileData = Player.GetFileData(files[i], false);
                if (fileData != null)
                {
                    Game1.PlayerList.Add(fileData);
                }
            }

            Game1.PlayerList.Sort(new Comparison<PlayerFileData>(Game1.PlayerListSortMethod));
        }//LoadPlayers


        // PlayerListSortMethod
        private static int PlayerListSortMethod(PlayerFileData data1, PlayerFileData data2)
        {
            return data1.Name.CompareTo(data2.Name);
        }//PlayerListSortMethod


        // OpenRecent
        protected void OpenRecent()
        {
            try
            {
                if (File.Exists(Game1.SavePath+"\\Data\\servers.dat"))
                {
                    using (FileStream fileStream = new FileStream(Game1.SavePath+"\\Data\\servers.dat", 
                        FileMode.Open))
                    {
                        using (BinaryReader binaryReader = new BinaryReader(fileStream))
                        {
                            binaryReader.ReadInt32();
                            for (int i = 0; i < 10; i++)
                            {
                                Game1.recentWorld[i] = binaryReader.ReadString();
                                Game1.recentIP[i] = binaryReader.ReadString();
                                Game1.recentPort[i] = binaryReader.ReadInt32();
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine("[ex] OpenRecent error: " + ex.Message);
            }
        }//OpenRecent


        // SaveRecent
        public static void SaveRecent()
        {
            Directory.CreateDirectory("Data");
            try
            {
                File.SetAttributes(Game1.SavePath+"\\Data\\servers.dat", System.IO.FileAttributes.Normal);
                using (FileStream fileStream = new FileStream(Game1.SavePath+"\\Data\\servers.dat", 
                    FileMode.Create))
                {
                    using (BinaryWriter binaryWriter = new BinaryWriter(fileStream))
                    {
                        binaryWriter.Write(Game1.curRelease);
                        for (int i = 0; i < 10; i++)
                        {
                            binaryWriter.Write(Game1.recentWorld[i]);
                            binaryWriter.Write(Game1.recentIP[i]);
                            binaryWriter.Write(Game1.recentPort[i]);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine("[ex] SaveRecent error: " + ex.Message);
            }
        }//SaveRecent


        // SaveSettings
        public static bool SaveSettings()
        {
            Game1.Configuration.Put("SmartCursorToggle", Game1.cSmartToggle);
            Game1.Configuration.Put("MapEnabled", Game1.mapEnabled);
            Game1.Configuration.Put("InvasionBarMode", Game1.invasionProgressMode);
            Game1.Configuration.Put("AutoSave", Game1.autoSave);
            Game1.Configuration.Put("AutoPause", Game1.autoPause);
            Game1.Configuration.Put("Language", Lang.lang);
            Game1.Configuration.Put("PlacementPreview", Game1.placementPreview);
            Game1.Configuration.Put("GoreVisualsAllowed", ChildSafety.Disabled);
            Game1.Configuration.Put("VolumeSound", Game1.soundVolume);
            Game1.Configuration.Put("VolumeAmbient", Game1.ambientVolume);
            Game1.Configuration.Put("VolumeMusic", Game1.musicVolume);
            Game1.Configuration.Put("KeyUp", Game1.cUp);
            Game1.Configuration.Put("KeyDown", Game1.cDown);
            Game1.Configuration.Put("KeyLeft", Game1.cLeft);
            Game1.Configuration.Put("KeyRight", Game1.cRight);
            Game1.Configuration.Put("KeyJump", Game1.cJump);
            Game1.Configuration.Put("KeyThrowItem", Game1.cThrowItem);
            Game1.Configuration.Put("KeyInventory", Game1.cInv);
            Game1.Configuration.Put("KeyQuickHeal", Game1.cHeal);
            Game1.Configuration.Put("KeyQuickMana", Game1.cMana);
            Game1.Configuration.Put("KeyQuickBuff", Game1.cBuff);
            Game1.Configuration.Put("KeyUseHook", Game1.cHook);
            Game1.Configuration.Put("KeyAutoSelect", Game1.cTorch);
            Game1.Configuration.Put("KeySmartCursor", Game1.cSmart);
            Game1.Configuration.Put("KeyMount", Game1.cMount);
            Game1.Configuration.Put("KeyMapStyle", Game1.cMapStyle);
            Game1.Configuration.Put("KeyFullscreenMap", Game1.cMapFull);
            Game1.Configuration.Put("KeyMapZoomIn", Game1.cMapZoomIn);
            Game1.Configuration.Put("KeyMapZoomOut", Game1.cMapZoomOut);
            Game1.Configuration.Put("KeyMapAlphaUp", Game1.cMapAlphaUp);
            Game1.Configuration.Put("KeyMapAlphaDown", Game1.cMapAlphaDown);
            Game1.Configuration.Put("Fullscreen", Game1.graphics.IsFullScreen);
            Game1.Configuration.Put("WindowMaximized", Game1.screenMaximized);
            Game1.Configuration.Put("DisplayWidth", Game1.graphics.PreferredBackBufferWidth);
            Game1.Configuration.Put("DisplayHeight", Game1.graphics.PreferredBackBufferHeight);
            Game1.Configuration.Put("GraphicsQuality", Game1.qaStyle);
            Game1.Configuration.Put("BackgroundEnabled", Game1.owBack);
            Game1.Configuration.Put("FrameSkip", !Game1.terrariasFixedTiming);
            Game1.Configuration.Put("LightingMode", Lighting.lightMode);
            Game1.Configuration.Put("LightingThreads", Lighting.LightingThreads);
            Game1.Configuration.Put("MouseColorR", Game1.mouseColor.R);
            Game1.Configuration.Put("MouseColorG", Game1.mouseColor.G);
            Game1.Configuration.Put("MouseColorB", Game1.mouseColor.B);
            Game1.Configuration.Put("Parallax", Game1.caveParallax);
            Game1.Configuration.Put("ShowItemText", Game1.showItemText);
            Game1.Configuration.Put("LastLaunchedVersion", Game1.curRelease);
            Game1.Configuration.Put("UseSmartCursorForCommonBlocks", Player.SmartCursorSettings.SmartBlocksEnabled);
            Game1.Configuration.Put("UseSmartWallReplacement", Player.SmartCursorSettings.SmartWallReplacement);
            Game1.Configuration.Put("DisableLeftShiftTrashCan", ItemSlot.Options.DisableLeftShiftTrashCan);
            Game1.Configuration.Put("HighlightNewItems", ItemSlot.Options.HighlightNewItems);
            Game1.Configuration.Put("HidePasswords", Game1.HidePassword);
            Game1.Configuration.Put("ThickMouseEdges", Game1.ThickMouse);
            Game1.Configuration.Put("ThickMouseEdgesPackedColor", Game1.ThickMousePackedColor);
            return Game1.Configuration.Save(true);

        }//SaveSettings


        // CheckBunny
        protected void CheckBunny()
        {
            //RnD
            Game1.cEd = false;

            try
            {
                //RegistryKey registryKey = Registry.CurrentUser;
                //registryKey = registryKey.CreateSubKey("Software\\Terraria");

                //if (registryKey != null && registryKey.GetValue("Bunny") != null 
                //    && registryKey.GetValue("Bunny").ToString() == "1")
                //{
                //    Game1.cEd = true;
                //}
            }
            catch
            {
                Game1.cEd = false;
            }

        }//CheckBunny


        // OpenSettings
        protected void OpenSettings()
        {
            if (File.Exists(Game1.SavePath+"\\Data\\config.dat"))
            {
                this.OpenLegacySettings();
                if (Game1.SaveSettings())
                    File.Delete(Game1.SavePath+"\\Data\\config.dat");
                Lighting.LightingThreads = 0;
                return;
            }

            Game1.Configuration.Load();
            Game1.Configuration.Get<bool>("SmartCursorToggle", ref Game1.cSmartToggle);
            Game1.Configuration.Get<bool>("MapEnabled", ref Game1.mapEnabled);
            Game1.Configuration.Get<int>("InvasionBarMode", ref Game1.invasionProgressMode);
            Game1.Configuration.Get<bool>("AutoSave", ref Game1.autoSave);
            Game1.Configuration.Get<bool>("AutoPause", ref Game1.autoPause);
            Game1.Configuration.Get<int>("Language", ref Lang.lang);
            Game1.Configuration.Get<bool>("PlacementPreview", ref Game1.placementPreview);
            Game1.Configuration.Get<bool>("GoreVisualsAllowed", ref ChildSafety.Disabled);
            Game1.Configuration.Get<float>("VolumeSound", ref Game1.soundVolume);
            Game1.Configuration.Get<float>("VolumeAmbient", ref Game1.ambientVolume);
            Game1.Configuration.Get<float>("VolumeMusic", ref Game1.musicVolume);
            Game1.Configuration.Get<string>("KeyUp", ref Game1.cUp);
            Game1.Configuration.Get<string>("KeyDown", ref Game1.cDown);
            Game1.Configuration.Get<string>("KeyLeft", ref Game1.cLeft);
            Game1.Configuration.Get<string>("KeyRight", ref Game1.cRight);
            Game1.Configuration.Get<string>("KeyJump", ref Game1.cJump);
            Game1.Configuration.Get<string>("KeyThrowItem", ref Game1.cThrowItem);
            Game1.Configuration.Get<string>("KeyInventory", ref Game1.cInv);
            Game1.Configuration.Get<string>("KeyQuickHeal", ref Game1.cHeal);
            Game1.Configuration.Get<string>("KeyQuickMana", ref Game1.cMana);
            Game1.Configuration.Get<string>("KeyQuickBuff", ref Game1.cBuff);
            Game1.Configuration.Get<string>("KeyUseHook", ref Game1.cHook);
            Game1.Configuration.Get<string>("KeyAutoSelect", ref Game1.cTorch);
            Game1.Configuration.Get<string>("KeySmartCursor", ref Game1.cSmart);
            Game1.Configuration.Get<string>("KeyMount", ref Game1.cMount);
            Game1.Configuration.Get<string>("KeyMapStyle", ref Game1.cMapStyle);
            Game1.Configuration.Get<string>("KeyFullscreenMap", ref Game1.cMapFull);
            Game1.Configuration.Get<string>("KeyMapZoomIn", ref Game1.cMapZoomIn);
            Game1.Configuration.Get<string>("KeyMapZoomOut", ref Game1.cMapZoomOut);
            Game1.Configuration.Get<string>("KeyMapAlphaUp", ref Game1.cMapAlphaUp);
            Game1.Configuration.Get<string>("KeyMapAlphaDown", ref Game1.cMapAlphaDown);
            Game1.Configuration.Get<bool>("WindowMaximized", ref Game1.screenMaximized);
            Game1.Configuration.Get<int>("GraphicsQuality", ref Game1.qaStyle);
            Game1.Configuration.Get<bool>("BackgroundEnabled", ref Game1.owBack);
            bool flag = false;
            Game1.Configuration.Get<bool>("FrameSkip", ref flag);
            Game1.terrariasFixedTiming = !flag;
            Game1.Configuration.Get<int>("LightingMode", ref Lighting.lightMode);
            Game1.Configuration.Get<int>("LightingThreads", ref Lighting.LightingThreads);
            Game1.Configuration.Get<float>("Parallax", ref Game1.caveParallax);
            Game1.Configuration.Get<bool>("ShowItemText", ref Game1.showItemText);
            Game1.Configuration.Get<bool>("UseSmartCursorForCommonBlocks", ref Player.SmartCursorSettings.SmartBlocksEnabled);
            Game1.Configuration.Get<bool>("UseSmartWallReplacement", ref Player.SmartCursorSettings.SmartWallReplacement);
            Game1.Configuration.Get<bool>("DisableLeftShiftTrashCan", ref ItemSlot.Options.DisableLeftShiftTrashCan);
            Game1.Configuration.Get<bool>("HidePasswords", ref Game1.HidePassword);
            Game1.Configuration.Get<bool>("HighlightNewItems", ref ItemSlot.Options.HighlightNewItems);
            Game1.Configuration.Get<bool>("ThickMouseEdges", ref Game1.ThickMouse);
            Game1.Configuration.Get<uint>("ThickMouseEdgesPackedColor", ref Game1.ThickMousePackedColor);
            bool fullscreen = false;
            int preferredBackBufferWidth = Game1.graphics.PreferredBackBufferWidth;
            int preferredBackBufferHeight = Game1.graphics.PreferredBackBufferHeight;
            Game1.Configuration.Get<bool>("Fullscreen", ref fullscreen);
            Game1.Configuration.Get<int>("DisplayWidth", ref preferredBackBufferWidth);
            Game1.Configuration.Get<int>("DisplayHeight", ref preferredBackBufferHeight);
            Game1.mouseColor.R = Game1.Configuration.Get<byte>("MouseColorR", Game1.mouseColor.R);
            Game1.mouseColor.G = Game1.Configuration.Get<byte>("MouseColorG", Game1.mouseColor.G);
            Game1.mouseColor.B = Game1.Configuration.Get<byte>("MouseColorB", Game1.mouseColor.B);

            //RnD
            //if (Main.screenMaximized)
            //{
            //    Form form = (Form)Control.FromHandle(Main.instance.Window.Handle);
            //    form.WindowState = FormWindowState.Maximized;
            //}

            int num = 0;
            Game1.Configuration.Get<int>("LastLaunchedVersion", ref num);
            if (num <= 146)
            {
                Lighting.LightingThreads = 0;
            }
            if (num <= 147)
            {
                Game1.terrariasFixedTiming = !Game1.terrariasFixedTiming;
            }
            if (num != Game1.curRelease)
            {
                Game1.SaveSettings();
            }
        }//OpenSettings


        // OpenLegacySettings
        protected void OpenLegacySettings()
        {
            try
            {
                if (File.Exists(Game1.SavePath+"\\Data\\config.dat"))
                {
                    using (FileStream fileStream = new FileStream(Game1.SavePath+"\\Data\\config.dat", 
                        FileMode.Open))
                    {
                        using (BinaryReader binaryReader = new BinaryReader(fileStream))
                        {
                            int num = binaryReader.ReadInt32();
                            if (num >= 68)
                            {
                                if (num >= 67)
                                {
                                    Game1.clientUUID = binaryReader.ReadString();
                                }
                                bool flag = binaryReader.ReadBoolean();
                                Game1.mouseColor.R = binaryReader.ReadByte();
                                Game1.mouseColor.G = binaryReader.ReadByte();
                                Game1.mouseColor.B = binaryReader.ReadByte();
                                Game1.soundVolume = binaryReader.ReadSingle();
                                if (num >= 90)
                                {
                                    Game1.ambientVolume = binaryReader.ReadSingle();
                                }
                                Game1.musicVolume = binaryReader.ReadSingle();
                                Game1.cUp = binaryReader.ReadString();
                                Game1.cDown = binaryReader.ReadString();
                                Game1.cLeft = binaryReader.ReadString();
                                Game1.cRight = binaryReader.ReadString();
                                Game1.cJump = binaryReader.ReadString();
                                Game1.cThrowItem = binaryReader.ReadString();
                                if (num >= 1)
                                {
                                    Game1.cInv = binaryReader.ReadString();
                                }
                                if (num >= 12)
                                {
                                    Game1.cHeal = binaryReader.ReadString();
                                    Game1.cMana = binaryReader.ReadString();
                                    Game1.cBuff = binaryReader.ReadString();
                                }
                                if (num >= 13)
                                {
                                    Game1.cHook = binaryReader.ReadString();
                                }
                                Game1.caveParallax = binaryReader.ReadSingle();
                                if (num >= 2)
                                {
                                    Game1.terrariasFixedTiming = binaryReader.ReadBoolean();
                                }
                                if (num >= 91 && binaryReader.ReadBoolean())
                                {
                                    //RnD
                                    //Form form = (Form)Control.FromHandle(base.Window.Handle);
                                    //form.WindowState = FormWindowState.Maximized;
                                }
                                if (num >= 4)
                                {
                                    int width = binaryReader.ReadInt32();
                                    int height = binaryReader.ReadInt32();
                                    //Main.SetDisplayMode(width, height, flag);
                                }
                                if (num >= 8)
                                {
                                    Game1.autoSave = binaryReader.ReadBoolean();
                                }
                                if (num >= 9)
                                {
                                    Game1.autoPause = binaryReader.ReadBoolean();
                                }
                                if (num >= 19)
                                {
                                    Game1.showItemText = binaryReader.ReadBoolean();
                                }
                                if (num >= 30)
                                {
                                    Game1.cTorch = binaryReader.ReadString();
                                    Lighting.lightMode = (int)binaryReader.ReadByte();
                                    Game1.qaStyle = (int)binaryReader.ReadByte();
                                }
                                if (num >= 37)
                                {
                                    Game1.owBack = binaryReader.ReadBoolean();
                                }
                                if (num >= 39)
                                {
                                    Lang.lang = (int)binaryReader.ReadByte();
                                }
                                if (num >= 46)
                                {
                                    Game1.mapEnabled = binaryReader.ReadBoolean();
                                    Game1.cMapStyle = binaryReader.ReadString();
                                    Game1.cMapFull = binaryReader.ReadString();
                                    Game1.cMapZoomIn = binaryReader.ReadString();
                                    Game1.cMapZoomOut = binaryReader.ReadString();
                                    Game1.cMapAlphaUp = binaryReader.ReadString();
                                    Game1.cMapAlphaDown = binaryReader.ReadString();
                                }
                                if (num >= 89)
                                {
                                    Lighting.LightingThreads = binaryReader.ReadInt32();
                                    if (Lighting.LightingThreads >= Environment.ProcessorCount)
                                    {
                                        Lighting.LightingThreads = Environment.ProcessorCount - 1;
                                    }
                                }
                                if (num >= 100)
                                {
                                    Game1.cSmart = binaryReader.ReadString();
                                    Game1.cSmartToggle = binaryReader.ReadBoolean();
                                }
                                if (num >= 107)
                                {
                                    Game1.invasionProgressMode = (int)binaryReader.ReadByte();
                                }
                                if (num >= 111)
                                {
                                    Game1.placementPreview = binaryReader.ReadBoolean();
                                }
                                if (num >= 111)
                                {
                                    Game1.placementPreview = binaryReader.ReadBoolean();
                                }
                                // Main.SetFullScreen(flag);
                            }
                            binaryReader.Dispose();//.Close();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine("[ex] OpenLegacySettings: " + ex.Message);
            }

        }//OpenLegacySettings


        // ErasePlayer
        private static void ErasePlayer(int i)
        {
            try
            {
                string path = PlayerList[i].Path.Substring(0, PlayerList[i].Path.Length - 4);

                FileOperationAPIWrapper.MoveToRecycleBin(PlayerList[i].Path);
                FileOperationAPIWrapper.MoveToRecycleBin(PlayerList[i].Path + ".bak");
                if (Directory.Exists(path))
                    Directory.Delete(path, true);
                LoadPlayers();
            }
            catch { }
        }
        private static void EraseWorld(int i)
        {
            try
            {
                FileOperationAPIWrapper.MoveToRecycleBin(WorldList[i].Path);
                FileOperationAPIWrapper.MoveToRecycleBin(WorldList[i].Path + ".bak");
                LoadWorlds();
            }
            catch { }
        }
        public static string GetPlayerPathFromName(string playerName, bool cloudSave)
        {
            string text = "";
            for (int i = 0; i < playerName.Length; i++)
            {
                string text2 = playerName.Substring(i, 1);
                string str;
                if ( text2 == "a" || text2 == "b" || text2 == "c" 
                    || text2 == "d" || text2 == "e" || text2 == "f" 
                    || text2 == "g" || text2 == "h" || text2 == "i" 
                    || text2 == "j" || text2 == "k" || text2 == "l" 
                    || text2 == "m" || text2 == "n" || text2 == "o" 
                    || text2 == "p" || text2 == "q" || text2 == "r" 
                    || text2 == "s" || text2 == "t" || text2 == "u" 
                    || text2 == "v" || text2 == "w" || text2 == "x"
                    || text2 == "y" || text2 == "z" || text2 == "A"
                    || text2 == "B" || text2 == "C" || text2 == "D" 
                    || text2 == "E" || text2 == "F" || text2 == "G"
                    || text2 == "H" || text2 == "I" || text2 == "J" 
                    || text2 == "K" || text2 == "L" || text2 == "M" 
                    || text2 == "N" || text2 == "O" || text2 == "P" 
                    || text2 == "Q" || text2 == "R" || text2 == "S" 
                    || text2 == "T" || text2 == "U" || text2 == "V"
                    || text2 == "W" || text2 == "X" || text2 == "Y"
                    || text2 == "Z" || text2 == "1" || text2 == "2" 
                    || text2 == "3" || text2 == "4" || text2 == "5" 
                    || text2 == "6" || text2 == "7" || text2 == "8" 
                    || text2 == "9" || text2 == "0" )
                {
                    str = text2;
                }
                else if (text2 == " ")
                {
                    str = "_";
                }
                else
                {
                    str = "-";
                }
                text += str;
            }

            string text3 = Game1.PlayerPath;
            string path = string.Concat(new object[]
            {
                text3,
                Path.DirectorySeparatorChar,
                text,
                ".plr"
            });
            string fullPath = FileUtilities.GetFullPath(path);
            if (fullPath.StartsWith("\\\\.\\", StringComparison.Ordinal))
            {
                text += "_";
            }
            if (FileUtilities.Exists(string.Concat(new object[]
            {
                text3,
                Path.DirectorySeparatorChar,
                text,
                ".plr"
            })))
            {
                int num = 2;
                while (FileUtilities.Exists(string.Concat(new object[]
                {
                    text3,
                    Path.DirectorySeparatorChar,
                    text,
                    num,
                    ".plr"
                })))
                {
                    num++;
                }
                text += num;
            }
            return string.Concat(new object[]
            {
                text3,
                Path.DirectorySeparatorChar,
                text,
                ".plr"
            });
        }

        // GetWorldPathFromName
        public static string GetWorldPathFromName(string worldName, bool cloudSave)
        {
            string text = "";
            for (int i = 0; i < worldName.Length; i++)
            {
                string text2 = worldName.Substring(i, 1);
                string str;
                if (text2 == "a" || text2 == "b" || text2 == "c" || text2 == "d"
                    || text2 == "e" || text2 == "f" || text2 == "g" || text2 == "h" 
                    || text2 == "i" || text2 == "j" || text2 == "k" || text2 == "l" 
                    || text2 == "m" || text2 == "n" || text2 == "o" || text2 == "p" 
                    || text2 == "q" || text2 == "r" || text2 == "s" || text2 == "t" 
                    || text2 == "u" || text2 == "v" || text2 == "w" || text2 == "x"
                    || text2 == "y" || text2 == "z" || text2 == "A" || text2 == "B" 
                    || text2 == "C" || text2 == "D" || text2 == "E" || text2 == "F" 
                    || text2 == "G" || text2 == "H" || text2 == "I" || text2 == "J" 
                    || text2 == "K" || text2 == "L" || text2 == "M" || text2 == "N" 
                    || text2 == "O" || text2 == "P" || text2 == "Q" || text2 == "R"
                    || text2 == "S" || text2 == "T" || text2 == "U" || text2 == "V" 
                    || text2 == "W" || text2 == "X" || text2 == "Y" || text2 == "Z" 
                    || text2 == "1" || text2 == "2" || text2 == "3" || text2 == "4" 
                    || text2 == "5" || text2 == "6" || text2 == "7" || text2 == "8" 
                    || text2 == "9" || text2 == "0")
                {
                    str = text2;
                }
                else if (text2 == " ")
                {
                    str = "_";
                }
                else
                {
                    str = "-";
                }
                text += str;
            }
            string text3 = Game1.WorldPath;
            string path = string.Concat(new object[]
            {
                text3,
                Path.DirectorySeparatorChar,
                text,
                ".wld"
            });

            string fullPath = FileUtilities.GetFullPath(path);

            if (fullPath.StartsWith("\\\\.\\", StringComparison.Ordinal))
            {
                text += "_";
            }

            if (FileUtilities.Exists(string.Concat(new object[]
            {
                text3,
                Path.DirectorySeparatorChar,
                text,
                ".wld"
            })))
            {
                int num = 2;
                while (FileUtilities.Exists(string.Concat(new object[]
                {
                    text3,
                    Path.DirectorySeparatorChar,
                    text,
                    num,
                    ".wld"
                })))
                {
                    num++;
                }
                text += num;
            }

            return string.Concat(new object[]
            {
                text3,
                Path.DirectorySeparatorChar,
                text,
                ".wld"
            });
        }//GetWorldPathFromName


        // autoCreate
        public void autoCreate(string newOpt)
        {
            if (newOpt == "0")
            {
                Game1.autoGen = false;
                return;
            }
            if (newOpt == "1")
            {
                Game1.maxTilesX = 4200;
                Game1.maxTilesY = 1200;
                Game1.autoGen = true;
                return;
            }
            if (newOpt == "2")
            {
                Game1.maxTilesX = 6300;
                Game1.maxTilesY = 1800;
                Game1.autoGen = true;
                return;
            }
            if (newOpt == "3")
            {
                Game1.maxTilesX = 8400;
                Game1.maxTilesY = 2400;
                Game1.autoGen = true;
            }
        }//autoCreate

        // NewMOTD
        public void NewMOTD(string newMOTD)
        {
            Game1.motd = newMOTD;
        }//NewMOTD

        /* // Load Dedicated Server Config ?
        public void LoadDedConfig(string configPath)
        {
            if (File.Exists(configPath))
            {
                //RnD
                using (StreamReader streamReader = new StreamReader(configPath))
                {
                    string text;
                    while ((text = streamReader.ReadLine()) != null)
                    {
                        try
                        {
                            if (text.Length > 6 && text.Substring(0, 6).ToLower() == "world=")
                            {
                                string file = text.Substring(6);
                                Game1.ActiveWorldFileData = WorldFile.GetAllMetadata(file);
                            }
                            if (text.Length > 5 && text.Substring(0, 5).ToLower() == "port=")
                            {
                                string value = text.Substring(5);
                                try
                                {
                                    int listenPort = Convert.ToInt32(value);
                                    Netplay.ListenPort = listenPort;
                                }
                                catch
                                {
                                }
                            }
                            if (text.Length > 11 && text.Substring(0, 11).ToLower() == "maxplayers=")
                            {
                                string value2 = text.Substring(11);
                                try
                                {
                                    int num = Convert.ToInt32(value2);
                                    Game1.maxNetPlayers = num;
                                }
                                catch
                                {
                                }
                            }
                            if (text.Length > 11 && text.Substring(0, 9).ToLower() == "priority=")
                            {
                                string value3 = text.Substring(9);
                                try
                                {
                                    int num2 = Convert.ToInt32(value3);
                                    if (num2 >= 0 && num2 <= 5)
                                    {
                                        //RnD
                                        //Process currentProcess = Process.GetCurrentProcess();
                                        if (num2 == 0)
                                        {
                                            //currentProcess.PriorityClass = ProcessPriorityClass.RealTime;
                                        }
                                        else if (num2 == 1)
                                        {
                                            //currentProcess.PriorityClass = ProcessPriorityClass.High;
                                        }
                                        else if (num2 == 2)
                                        {
                                            //currentProcess.PriorityClass = ProcessPriorityClass.AboveNormal;
                                        }
                                        else if (num2 == 3)
                                        {
                                            //currentProcess.PriorityClass = ProcessPriorityClass.Normal;
                                        }
                                        else if (num2 == 4)
                                        {
                                            //currentProcess.PriorityClass = ProcessPriorityClass.BelowNormal;
                                        }
                                        else if (num2 == 5)
                                        {
                                            //currentProcess.PriorityClass = ProcessPriorityClass.Idle;
                                        }
                                    }
                                }
                                catch
                                {
                                }
                            }
                            if (text.Length > 9 && text.Substring(0, 9).ToLower() == "password=")
                            {
                                string serverPassword = text.Substring(9);
                                Netplay.ServerPassword = serverPassword;
                            }
                            if (text.Length > 5 && text.Substring(0, 5).ToLower() == "motd=")
                            {
                                string text2 = text.Substring(5);
                                Game1.motd = text2;
                            }
                            if (text.Length > 5 && text.Substring(0, 5).ToLower() == "lang=")
                            {
                                string value4 = text.Substring(5);
                                Lang.lang = Convert.ToInt32(value4);
                            }
                            if (text.Length >= 10 && text.Substring(0, 10).ToLower() == "worldpath=")
                            {
                                string worldPath = text.Substring(10);
                                Game1.WorldPath = worldPath;
                            }
                            if (text.Length >= 10 && text.Substring(0, 10).ToLower() == "worldname=")
                            {
                                string text3 = text.Substring(10);
                                Game1.worldName = text3;
                            }
                            if (text.Length > 8 && text.Substring(0, 8).ToLower() == "banlist=")
                            {
                                string banFilePath = text.Substring(8);
                                Netplay.BanFilePath = banFilePath;
                            }
                            if (text.Length > 11 && text.Substring(0, 11).ToLower() == "difficulty=")
                            {
                                string a = text.Substring(11);
                                if (a == "0")
                                {
                                    Game1.expertMode = false;
                                }
                                else if (a == "1")
                                {
                                    Game1.expertMode = true;
                                }
                            }
                            if (text.Length > 11 && text.Substring(0, 11).ToLower() == "autocreate=")
                            {
                                string a2 = text.Substring(11);
                                if (a2 == "0")
                                {
                                    Game1.autoGen = false;
                                }
                                else if (a2 == "1")
                                {
                                    Game1.maxTilesX = 4200;
                                    Game1.maxTilesY = 1200;
                                    Game1.autoGen = true;
                                }
                                else if (a2 == "2")
                                {
                                    Game1.maxTilesX = 6300;
                                    Game1.maxTilesY = 1800;
                                    Game1.autoGen = true;
                                }
                                else if (a2 == "3")
                                {
                                    Game1.maxTilesX = 8400;
                                    Game1.maxTilesY = 2400;
                                    Game1.autoGen = true;
                                }
                            }
                            if (text.Length > 7 && text.Substring(0, 7).ToLower() == "secure=")
                            {
                                string a3 = text.Substring(7);
                                if (a3 == "1")
                                {
                                    Netplay.spamCheck = true;
                                }
                            }
                            if (text.Length > 5 && text.Substring(0, 5).ToLower() == "upnp=")
                            {
                                string a4 = text.Substring(5);
                                if (a4 != "1")
                                {
                                    Netplay.UseUPNP = false;
                                }
                            }
                            if (text.Length > 10 && text.Substring(0, 10).ToLower() == "npcstream=")
                            {
                                string value5 = text.Substring(10);
                                try
                                {
                                    int num3 = Convert.ToInt32(value5);
                                    Game1.npcStreamSpeed = num3;
                                }
                                catch
                                {
                                }
                            }
                        }
                        catch
                        {
                        }
                    }
                }
            }
        }//LoadDedConfig
        */

        // SetNetPlayers
        public void SetNetPlayers(int mPlayers)
        {
            Game1.maxNetPlayers = mPlayers;
        }//SetNetPlayers


        // SetWorld
        public void SetWorld(string world, bool cloud)
        {
            Game1.ActiveWorldFileData = WorldFile.GetAllMetadata(world);
        }//SetWorld


        // SetWorldName
        public void SetWorldName(string world)
        {
            Game1.worldName = world;
        }//SetWorldName


        // autoShut
        public void autoShut()
        {
            Game1.autoShutdown = true;
        }//autoShut


        //[DllImport("user32.dll")]
        //public static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

        //[DllImport("user32.dll")]
        //private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
        public void AutoPass()
        {
            Game1.autoPass = true;
        }


        // AutoJoin
        public void AutoJoin(string IP)
        {
            Game1.defaultIP = IP;
            Game1.getIP = IP;
            Netplay.SetRemoteIP(Game1.defaultIP);
            Game1.autoJoin = true;
        }//AutoJoin

        //AutoHost
        public void AutoHost()
        {
            Game1.menuMultiplayer = true;
            Game1.menuServer = true;
            Game1.menuMode = 1;
        }//AutoHost

        //loadLib
        public void loadLib(string path)
        {
            Game1.libPath = path;
            Game1.LoadLibrary(Game1.libPath);
        }//loadLib


        /* // DedServ()
        public void DedServ()
        {
            Game1.rand = new Random();
            if (Game1.autoShutdown)
            {
                string text = "terraria" + Game1.rand.Next(2147483647);
                //Console.Title = text;
                Debug.WriteLine("[i] " + text);

                //IntPtr intPtr = Main.FindWindow(null, text);
                //if (intPtr != IntPtr.Zero)
                //{
                //    Main.ShowWindow(intPtr, 0);
                //}
                Debug.WriteLine("[i] " + text);
            }
            else
            {
                //Console.Title = "Terraria Server " + Game1.versionNumber2;
                Debug.WriteLine("Terraria Server " + Game1.versionNumber2);
            }
            Game1.dedServ = true;
            Game1.showSplash = false;

            this.Initialize();

            Lang.setLang(false);
            for (int i = 0; i < 540; i++)
            {
                NPC nPC = new NPC();
                nPC.SetDefaults(i, -1f);
                Game1.npcName[i] = nPC.name;
            }
            while (Game1.worldPathName == null || Game1.worldPathName == "")
            {
                bool flag = true;
                while (flag)
                {
                    Game1.LoadWorlds();
                    Debug.WriteLine("Terraria Server " + Game1.versionNumber2);
                    Debug.WriteLine("");
                    for (int j = 0; j < Game1.WorldList.Count; j++)
                    {
                        Debug.WriteLine(string.Concat(new object[]
                        {
                            j + 1,
                            '\t',
                            '\t',
                            Game1.WorldList[j].Name
                        }));
                    }
                    Debug.WriteLine(string.Concat(new object[]
                    {
                        "n",
                        '\t',
                        '\t',
                        "New World"
                    }));
                    Debug.WriteLine("d <number>" + '\t' + "Delete World");
                    Debug.WriteLine("");
                    Debug.Write("Choose World: ");
                    string text2 = Console.ReadLine();
                    if (text2 == null)
                    {
                        text2 = "";
                    }
                    try
                    {
                        //Console.Clear();
                    }
                    catch
                    {
                    }
                    if (text2.Length >= 2 && text2.Substring(0, 2).ToLower() == "d ")
                    {
                        try
                        {
                            int num = Convert.ToInt32(text2.Substring(2)) - 1;
                            if (num < Game1.WorldList.Count)
                            {
                                Debug.WriteLine("Terraria Server " + Game1.versionNumber2);
                                Debug.WriteLine("");
                                Debug.WriteLine("Really delete " + Game1.WorldList[num].Name + "?");
                                Debug.Write("(y/n): ");
                                string text3 = Console.ReadLine();
                                if (text3.ToLower() == "y")
                                {
                                    Game1.EraseWorld(num);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            Debug.WriteLine("[ex] Exception: " + ex.Message);
                        }
                        try
                        {
                            //Debug.Clear();
                            continue;
                        }
                        catch
                        {
                            continue;
                        }
                    }
                    if (text2 == "n" || text2 == "N")
                    {
                        bool flag2 = true;
                        while (flag2)
                        {
                            Debug.WriteLine("Terraria Server " + Game1.versionNumber2);
                            Debug.WriteLine("");
                            Debug.WriteLine("1" + '\t' + "Small");
                            Debug.WriteLine("2" + '\t' + "Medium");
                            Debug.WriteLine("3" + '\t' + "Large");
                            Debug.WriteLine("");
                            Debug.Write("Choose size: ");
                            string value = Console.ReadLine();
                            try
                            {
                                int num2 = Convert.ToInt32(value);
                                if (num2 == 1)
                                {
                                    Game1.maxTilesX = 4200;
                                    Game1.maxTilesY = 1200;
                                    flag2 = false;
                                }
                                else if (num2 == 2)
                                {
                                    Game1.maxTilesX = 6400;
                                    Game1.maxTilesY = 1800;
                                    flag2 = false;
                                }
                                else if (num2 == 3)
                                {
                                    Game1.maxTilesX = 8400;
                                    Game1.maxTilesY = 2400;
                                    flag2 = false;
                                }
                            }
                            catch (Exception ex)
                            {
                                Debug.WriteLine("[ex] Exception: " + ex.Message);
                            }

                            try
                            {
                                //Debug.Clear();
                            }
                            catch
                            {
                            }
                        }
                        flag2 = true;
                        while (flag2)
                        {
                            Debug.WriteLine("Terraria Server " + Game1.versionNumber2);
                            Debug.WriteLine("");
                            Debug.WriteLine("1" + '\t' + "Normal");
                            Debug.WriteLine("2" + '\t' + "Expert");
                            Debug.WriteLine("");
                            Debug.Write("Choose difficulty: ");
                            string value = Console.ReadLine();
                            try
                            {
                                int num3 = Convert.ToInt32(value);
                                if (num3 == 1)
                                {
                                    Game1.expertMode = false;
                                    flag2 = false;
                                }
                                else if (num3 == 2)
                                {
                                    Game1.expertMode = true;
                                    flag2 = false;
                                }
                            }
                            catch
                            {
                            }
                            try
                            {
                                //Debug.Clear();
                            }
                            catch
                            {
                            }
                        }
                        flag2 = true;
                        while (flag2)
                        {
                            Debug.WriteLine("Terraria Server " + Game1.versionNumber2);
                            Debug.WriteLine("");
                            Debug.Write("Enter world name: ");

                            Game1.newWorldName = "TerrariaWorld";//Console.ReadLine();

                            if (Game1.newWorldName != "" && Game1.newWorldName != " "
                                && Game1.newWorldName != null)
                            {
                                flag2 = false;
                            }
                            try
                            {
                                //Debug.Clear();
                            }
                            catch
                            {
                            }
                        }
                        Game1.worldName = Game1.newWorldName;
                        Game1.ActiveWorldFileData = WorldFile.CreateMetadata(
                            Game1.worldName, false, Game1.expertMode);
                        Game1.menuMode = 10;
                        Game1.serverGenLock = true;
                        GenerationProgress generationProgress = new GenerationProgress();
                        WorldGen.CreateNewWorld(generationProgress);
                        flag2 = false;
                        while (Game1.menuMode == 10)
                        {
                            if (Game1.oldStatusText != Game1.statusText)
                            {
                                Game1.oldStatusText = Game1.statusText;
                                Debug.WriteLine(Game1.statusText);
                            }
                        }
                        try
                        {
                            //Console.Clear();
                            goto IL_5CC;
                        }
                        catch
                        {
                            goto IL_5CC;
                        }
                    IL_5CC:
                        if (!Game1.serverGenLock)
                        {
                            continue;
                        }
                    IL_56F:
                        Game1.statusText = string.Format("{0:0.0%} - " +
                            generationProgress.Message + " - {1:0.0%}",
                            generationProgress.TotalProgress, generationProgress.Value);

                        if (Game1.oldStatusText != Game1.statusText)
                        {
                            Game1.oldStatusText = Game1.statusText;
                            Debug.WriteLine(Game1.statusText);
                            goto IL_5CC;
                        }
                        goto IL_5CC;
                    }
                    else
                    {
                        try
                        {
                            int num4 = Convert.ToInt32(text2);
                            num4--;
                            if (num4 >= 0 && num4 < Game1.WorldList.Count)
                            {
                                bool flag3 = true;
                                while (flag3)
                                {
                                    Debug.WriteLine("Terraria Server " + Game1.versionNumber2);
                                    Debug.WriteLine("");
                                    Debug.Write("Max players (press enter for 8): ");

                                    string text4 = Console.ReadLine();
                                    try
                                    {
                                        if (text4 == "")
                                        {
                                            text4 = "8";
                                        }
                                        int num5 = Convert.ToInt32(text4);
                                        if (num5 <= 255 && num5 >= 1)
                                        {
                                            Game1.maxNetPlayers = num5;
                                            flag3 = false;
                                        }
                                        flag3 = false;
                                    }
                                    catch
                                    {
                                    }

                                    try
                                    {
                                        //Debug.Clear();
                                    }
                                    catch
                                    {
                                    }
                                }

                                flag3 = true;
                                while (flag3)
                                {
                                    Debug.WriteLine("Terraria Server " + Game1.versionNumber2);
                                    Debug.WriteLine("");
                                    Debug.Write("Server port (press enter for 7777): ");
                                    string text5 = "7777";//Console.ReadLine();
                                    try
                                    {
                                        if (text5 == "")
                                        {
                                            text5 = "7777";
                                        }
                                        int num6 = Convert.ToInt32(text5);
                                        if (num6 <= 65535)
                                        {
                                            Netplay.ListenPort = num6;
                                            flag3 = false;
                                        }
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        //Console.Clear();
                                    }
                                    catch
                                    {
                                    }
                                }
                                flag3 = true;
                                while (flag3)
                                {
                                    Debug.WriteLine("Terraria Server " + Game1.versionNumber2);
                                    Debug.WriteLine("");
                                    Debug.Write("Automatically forward port? (y/n): ");
                                    string text6 = "y";//Console.ReadLine();
                                    try
                                    {
                                        if (text6 == "" || text6.ToLower() == "y" || text6.ToLower() == "yes")
                                        {
                                            Netplay.UseUPNP = true;
                                            flag3 = false;
                                        }
                                        else if (text6.ToLower() == "n" || text6.ToLower() == "no")
                                        {
                                            Netplay.UseUPNP = false;
                                            flag3 = false;
                                        }
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        //Console.Clear();
                                    }
                                    catch
                                    {
                                    }
                                }
                                Debug.WriteLine("Terraria Server " + Game1.versionNumber2);
                                Debug.WriteLine("");
                                Debug.Write("Server password (press enter for none): ");

                                Netplay.ServerPassword = Console.ReadLine();

                                Game1.ActiveWorldFileData = Game1.WorldList[num4];
                                flag = false;
                                try
                                {
                                    //Console.Clear();
                                }
                                catch
                                {
                                }
                            }
                        }
                        catch
                        {
                        }
                    }
                }
            }
            try
            {
                //Console.Clear();
            }
            catch
            {
            }

            WorldGen.serverLoadWorld();
            Debug.WriteLine("Terraria Server " + Game1.versionNumber);
            Debug.WriteLine("");

            while (!Netplay.IsServerRunning)
            {
                if (Game1.AutogenProgress.TotalProgress != 0f)
                {
                    Game1.statusText = string.Format("{0:0.0%} - " +
                        Game1.AutogenProgress.Message + " - {1:0.0%}",
                        Game1.AutogenProgress.TotalProgress, Game1.AutogenProgress.Value);
                }
                if (Game1.oldStatusText != Game1.statusText)
                {
                    Game1.oldStatusText = Game1.statusText;
                    Debug.WriteLine(Game1.statusText);
                }
            }
            try
            {
                //Console.Clear();
            }
            catch
            {
            }

            Debug.WriteLine("Terraria Server " + Game1.versionNumber);
            Debug.WriteLine("");
            Debug.WriteLine("Listening on port " + Netplay.ListenPort);
            Debug.WriteLine("Type 'help' for a list of commands.");
            Debug.WriteLine("");
            //Debug.Title = "Terraria Server: " + Game1.worldName;

            Debug.WriteLine("[i] Terraria Server: " + Game1.worldName);

            Stopwatch stopwatch = new Stopwatch();
            if (!Game1.autoShutdown)
            {
                Game1.startDedInput();
            }
            stopwatch.Start();
            double num7 = 16.666666666666668;
            double num8 = 0.0;
            int num9 = 0;
            Stopwatch stopwatch2 = new Stopwatch();
            stopwatch2.Start();
            while (!Netplay.disconnect)
            {
                double num10 = (double)stopwatch.ElapsedMilliseconds;
                if (num10 + num8 >= num7)
                {
                    num9++;
                    num8 += num10 - num7;
                    stopwatch.Reset();
                    stopwatch.Start();
                    if (Game1.oldStatusText != Game1.statusText)
                    {
                        Game1.oldStatusText = Game1.statusText;
                        Debug.WriteLine(Game1.statusText);
                    }
                    if (Netplay.anyClients)
                    {
                        this.Update(new GameTime());
                    }
                    double num11 = (double)stopwatch.ElapsedMilliseconds + num8;
                    if (num11 < num7)
                    {
                        int num12 = (int)(num7 - num11) - 1;
                        if (num12 > 1)
                        {
                            Thread.Sleep(num12 - 1);
                            if (!Netplay.anyClients)
                            {
                                num8 = 0.0;
                                Thread.Sleep(10);
                            }
                        }
                    }
                }
                Thread.Sleep(0);
            }
        }//DedServ
        */

        // startDedInput
        public static void startDedInput()
        {
            //RnD
            //ThreadPool.QueueUserWorkItem(new WaitCallback(Main.startDedInputCallBack), 1);
            Game1.startDedInputCallBack(default);
        }

        public static void startDedInputCallBack(object threadContext)
        {
            while (!Netplay.disconnect)
            {
                Debug.Write(": ");

                string text = "help";//Console.ReadLine();

                string text2 = text;
                text = text.ToLower();
                try
                {
                    if (text == "help")
                    {
                        Debug.WriteLine("Available commands:");
                        Debug.WriteLine("");
                        Debug.WriteLine(string.Concat(new object[]
                        {
                            "help ",
                            '\t',
                            '\t',
                            " Displays a list of commands."
                        }));
                        Debug.WriteLine("playing " + '\t' + " Shows the list of players");
                        Debug.WriteLine(string.Concat(new object[]
                        {
                            "clear ",
                            '\t',
                            '\t',
                            " Clear the console window."
                        }));
                        Debug.WriteLine(string.Concat(new object[]
                        {
                            "exit ",
                            '\t',
                            '\t',
                            " Shutdown the server and save."
                        }));
                        Debug.WriteLine("exit-nosave " + '\t' + " Shutdown the server without saving.");
                        Debug.WriteLine(string.Concat(new object[]
                        {
                            "save ",
                            '\t',
                            '\t',
                            " Save the game world."
                        }));
                        Debug.WriteLine("kick <player> " + '\t' + " Kicks a player from the server.");
                        Debug.WriteLine("ban <player> " + '\t' + " Bans a player from the server.");
                        Debug.WriteLine("password" + '\t' + " Show password.");
                        Debug.WriteLine("password <pass>" + '\t' + " Change password.");
                        Debug.WriteLine(string.Concat(new object[]
                        {
                            "version",
                            '\t',
                            '\t',
                            " Print version number."
                        }));
                        Debug.WriteLine(string.Concat(new object[]
                        {
                            "time",
                            '\t',
                            '\t',
                            " Display game time."
                        }));
                        Debug.WriteLine(string.Concat(new object[]
                        {
                            "port",
                            '\t',
                            '\t',
                            " Print the listening port."
                        }));
                        Debug.WriteLine("maxplayers" + '\t' + " Print the max number of players.");
                        Debug.WriteLine("say <words>" + '\t' + " Send a message.");
                        Debug.WriteLine(string.Concat(new object[]
                        {
                            "motd",
                            '\t',
                            '\t',
                            " Print MOTD."
                        }));
                        Debug.WriteLine("motd <words>" + '\t' + " Change MOTD.");
                        Debug.WriteLine(string.Concat(new object[]
                        {
                            "dawn",
                            '\t',
                            '\t',
                            " Change time to dawn."
                        }));
                        Debug.WriteLine(string.Concat(new object[]
                        {
                            "noon",
                            '\t',
                            '\t',
                            " Change time to noon."
                        }));
                        Debug.WriteLine(string.Concat(new object[]
                        {
                            "dusk",
                            '\t',
                            '\t',
                            " Change time to dusk."
                        }));
                        Debug.WriteLine("midnight" + '\t' + " Change time to midnight.");
                        Debug.WriteLine(string.Concat(new object[]
                        {
                            "settle",
                            '\t',
                            '\t',
                            " Settle all water."
                        }));
                    }
                    else if (text == "settle")
                    {
                        if (!Liquid.panicMode)
                        {
                            Liquid.StartPanic();
                        }
                        else
                        {
                            Debug.WriteLine("Water is already settling");
                        }
                    }
                    else if (text == "dawn")
                    {
                        Game1.dayTime = true;
                        Game1.time = 0.0;
                        NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
                    }
                    else if (text == "dusk")
                    {
                        Game1.dayTime = false;
                        Game1.time = 0.0;
                        NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
                    }
                    else if (text == "noon")
                    {
                        Game1.dayTime = true;
                        Game1.time = 27000.0;
                        NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
                    }
                    else if (text == "midnight")
                    {
                        Game1.dayTime = false;
                        Game1.time = 16200.0;
                        NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
                    }
                    else if (text == "exit-nosave")
                    {
                        Netplay.disconnect = true;
                    }
                    else if (text == "exit")
                    {
                        WorldFile.saveWorld();
                        Netplay.disconnect = true;
                    }
                    else if (text == "fps")
                    {
                        if (!Game1.dedServFPS)
                        {
                            Game1.dedServFPS = true;
                            Game1.fpsTimer.Reset();
                        }
                        else
                        {
                            Game1.dedServCount1 = 0;
                            Game1.dedServCount2 = 0;
                            Game1.dedServFPS = false;
                        }
                    }
                    else if (text == "save")
                    {
                        WorldFile.saveWorld();
                    }
                    else if (text == "time")
                    {
                        string text3 = "AM";
                        double num = Game1.time;
                        if (!Game1.dayTime)
                        {
                            num += 54000.0;
                        }
                        num = num / 86400.0 * 24.0;
                        double num2 = 7.5;
                        num = num - num2 - 12.0;
                        if (num < 0.0)
                        {
                            num += 24.0;
                        }
                        if (num >= 12.0)
                        {
                            text3 = "PM";
                        }
                        int num3 = (int)num;
                        double num4 = num - (double)num3;
                        num4 = (double)((int)(num4 * 60.0));
                        string text4 = string.Concat(num4);
                        if (num4 < 10.0)
                        {
                            text4 = "0" + text4;
                        }
                        if (num3 > 12)
                        {
                            num3 -= 12;
                        }
                        if (num3 == 0)
                        {
                            num3 = 12;
                        }

                        Debug.WriteLine(string.Concat(new object[]
                        {
                            "Time: ",
                            num3,
                            ":",
                            text4,
                            " ",
                            text3
                        }));
                    }
                    else if (text == "maxplayers")
                    {
                        Debug.WriteLine("Player limit: " + Game1.maxNetPlayers);
                    }
                    else if (text == "port")
                    {
                        Debug.WriteLine("Port: " + Netplay.ListenPort);
                    }
                    else if (text == "version")
                    {
                        Debug.WriteLine("Terraria Server " + Game1.versionNumber);
                    }
                    else
                    {
                        if (text == "clear")
                        {
                            try
                            {
                                //Console.Clear();
                                continue;
                            }
                            catch
                            {
                                continue;
                            }
                        }
                        if (text == "playing")
                        {
                            int num5 = 0;
                            for (int i = 0; i < 255; i++)
                            {
                                if (Game1.player[i].active)
                                {
                                    num5++;
                                    Debug.WriteLine(string.Concat(new object[]
                                    {
                                        Game1.player[i].name,
                                        " (",
                                        Netplay.Clients[i].Socket.GetRemoteAddress(),
                                        ")"
                                    }));
                                }
                            }
                            if (num5 == 0)
                            {
                                Debug.WriteLine("No players connected.");
                            }
                            else if (num5 == 1)
                            {
                                Debug.WriteLine("1 player connected.");
                            }
                            else
                            {
                                Debug.WriteLine(num5 + " players connected.");
                            }
                        }
                        else if (!(text == ""))
                        {
                            if (text == "motd")
                            {
                                if (Game1.motd == "")
                                {
                                    Debug.WriteLine("Welcome to " + Game1.worldName + "!");
                                }
                                else
                                {
                                    Debug.WriteLine("MOTD: " + Game1.motd);
                                }
                            }
                            else if (text.Length >= 5 && text.Substring(0, 5) == "motd ")
                            {
                                string text5 = text2.Substring(5);
                                Game1.motd = text5;
                            }
                            else if (text.Length == 8 && text.Substring(0, 8) == "password")
                            {
                                if (Netplay.ServerPassword == "")
                                {
                                    Debug.WriteLine("No password set.");
                                }
                                else
                                {
                                    Debug.WriteLine("Password: " + Netplay.ServerPassword);
                                }
                            }
                            else if (text.Length >= 9 && text.Substring(0, 9) == "password ")
                            {
                                string text6 = text2.Substring(9);
                                if (text6 == "")
                                {
                                    Netplay.ServerPassword = "";
                                    Debug.WriteLine("Password disabled.");
                                }
                                else
                                {
                                    Netplay.ServerPassword = text6;
                                    Debug.WriteLine("Password: " + Netplay.ServerPassword);
                                }
                            }
                            else if (text == "say")
                            {
                                Debug.WriteLine("Usage: say <words>");
                            }
                            else if (text.Length >= 4 && text.Substring(0, 4) == "say ")
                            {
                                string text7 = text2.Substring(4);
                                if (text7 == "")
                                {
                                    Debug.WriteLine("Usage: say <words>");
                                }
                                else
                                {
                                    Debug.WriteLine("<Server> " + text7);
                                    NetMessage.SendData(25, -1, -1, "<Server> " + text7,
                                        255, 255f, 240f, 20f, 0, 0, 0);
                                }
                            }
                            else if (text.Length == 4 && text.Substring(0, 4) == "kick")
                            {
                                Debug.WriteLine("Usage: kick <player>");
                            }
                            else if (text.Length >= 5 && text.Substring(0, 5) == "kick ")
                            {
                                string text8 = text.Substring(5);
                                text8 = text8.ToLower();
                                if (text8 == "")
                                {
                                    Debug.WriteLine("Usage: kick <player>");
                                }
                                else
                                {
                                    for (int j = 0; j < 255; j++)
                                    {
                                        if (Game1.player[j].active
                                            && Game1.player[j].name.ToLower() == text8)
                                        {
                                            NetMessage.SendData(2, j, -1,
                                                "Kicked from server.", 0, 0f, 0f, 0f, 0, 0, 0);
                                        }
                                    }
                                }
                            }
                            else if (text.Length == 3 && text.Substring(0, 3) == "ban")
                            {
                                Debug.WriteLine("Usage: ban <player>");
                            }
                            else if (text.Length >= 4 && text.Substring(0, 4) == "ban ")
                            {
                                string text9 = text.Substring(4);
                                text9 = text9.ToLower();
                                if (text9 == "")
                                {
                                    Debug.WriteLine("Usage: ban <player>");
                                }
                                else
                                {
                                    for (int k = 0; k < 255; k++)
                                    {
                                        if (Game1.player[k].active && Game1.player[k].name.ToLower() == text9)
                                        {
                                            Netplay.AddBan(k);
                                            NetMessage.SendData(2, k, -1, "Banned from server.",
                                                0, 0f, 0f, 0f, 0, 0, 0);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                Debug.WriteLine("Invalid command.");
                            }
                        }
                    }
                }
                catch
                {
                    Debug.WriteLine("Invalid command.");
                }
            }
        }//startDedInputCallback



        // Sundialing
        public static void Sundialing()
        {
            if (Game1.sundialCooldown == 0)
            {
                if (Game1.netMode == 1)
                {
                    NetMessage.SendData(51, -1, -1, "", Game1.myPlayer, 3f, 0f, 0f, 0, 0, 0);
                    return;
                }
                Game1.fastForwardTime = true;
                Game1.sundialCooldown = 8;
                NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
            }
        }
        public static void UpdateSundial()
        {
            if (Game1.fastForwardTime)
            {
                Game1.dayRate = 60;
                return;
            }
        }
        public Game1()
        {
            instance = this;
            graphics = new GraphicsDeviceManager(this);
            base.Content.RootDirectory = "Content";
        }

        protected void SetTitle()
        {
            base.Window.Title = Lang.title();
        }

        public static void InitLifeBytes()
        {
            NPC nPC = new NPC();
            for (int i = -65; i < 540; i++)
            {
                if (i != 0)
                {
                    nPC.netDefaults(i);
                    if (nPC.lifeMax > 32767 || nPC.boss)
                    {
                        Game1.npcLifeBytes[i] = 4;
                    }
                    else if (nPC.lifeMax > 127)
                    {
                        Game1.npcLifeBytes[i] = 2;
                    }
                    else
                    {
                        Game1.npcLifeBytes[i] = 1;
                    }
                }
            }
        }
        private static void SetTileValue()
        {
            Game1.tileValue[28] = 100;
            Game1.tileValue[7] = 200;
            Game1.tileValue[166] = 210;
            Game1.tileValue[6] = 220;
            Game1.tileValue[167] = 230;
            Game1.tileValue[9] = 240;
            Game1.tileValue[168] = 250;
            Game1.tileValue[37] = 300;
            Game1.tileValue[22] = 310;
            Game1.tileValue[204] = 320;
            Game1.tileValue[407] = 350;
            Game1.tileValue[8] = 400;
            Game1.tileValue[169] = 410;
            Game1.tileValue[21] = 500;
            Game1.tileValue[107] = 600;
            Game1.tileValue[221] = 610;
            Game1.tileValue[108] = 620;
            Game1.tileValue[222] = 630;
            Game1.tileValue[111] = 640;
            Game1.tileValue[223] = 650;
            Game1.tileValue[211] = 700;
            Game1.tileValue[12] = 800;
            Game1.tileValue[236] = 810;
        }


        // Initialize
        protected override void Initialize()
        {
            Game1.LocalFavoriteData.Load();
            TileObjectData.Initialize();
            Animation.Initialize();
            Chest.Initialize();
            Wiring.Initialize();
            Framing.Initialize();
            ItemRarity.Initialize();
            TileEntity.InitializeAll();
            Game1.InitializeItemAnimations();
            Lighting.Initialize(false);
            MapHelper.Initialize();
            TimeLogger.Initialize();
            WorldGen.RandomizeBackgrounds();
            WorldGen.RandomizeCaveBackgrounds();
            WorldGen.RandomizeMoonState();
            Game1.bgAlpha[0] = 1f;
            Game1.bgAlpha2[0] = 1f;
            this.invBottom = 258;
            #region projFramesAndOther
            for (int i = 0; i < 651; i++)
            {
                Game1.projFrames[i] = 1;
            }


            Game1.projFrames[643] = 8;
            Game1.projFrames[566] = 4;
            Game1.projFrames[565] = 4;
            Game1.projFrames[525] = 5;
            Game1.projFrames[519] = 4;
            Game1.projFrames[509] = 2;
            Game1.projFrames[485] = 5;
            Game1.projFrames[492] = 8;
            Game1.projFrames[500] = 4;
            Game1.projFrames[499] = 12;
            Game1.projFrames[518] = 4;
            Game1.projFrames[585] = 4;
            Game1.projFrames[593] = 4;
            Game1.projFrames[595] = 28;
            Game1.projFrames[596] = 4;
            Game1.projFrames[612] = 5;
            Game1.projFrames[613] = 4;
            Game1.projFrames[614] = 4;
            Game1.projFrames[615] = 7;
            Game1.projFrames[623] = 12;
            Game1.projFrames[633] = 5;
            Game1.projFrames[645] = 7;
            Game1.projFrames[650] = 4;
            Game1.projFrames[384] = 6;
            Game1.projFrames[385] = 3;
            Game1.projFrames[386] = 6;
            Game1.projFrames[390] = 11;
            Game1.projFrames[391] = 11;
            Game1.projFrames[392] = 11;
            Game1.projFrames[393] = 15;
            Game1.projFrames[394] = 15;
            Game1.projFrames[395] = 15;
            Game1.projFrames[398] = 10;
            Game1.projFrames[407] = 6;
            Game1.projFrames[408] = 2;
            Game1.projFrames[409] = 3;
            Game1.projFrames[387] = 3;
            Game1.projFrames[388] = 3;
            Game1.projFrames[334] = 11;
            Game1.projFrames[324] = 10;
            Game1.projFrames[351] = 2;
            Game1.projFrames[349] = 5;
            Game1.projFrames[423] = 4;
            Game1.projFrames[435] = 4;
            Game1.projFrames[436] = 4;
            Game1.projFrames[439] = 6;
            Game1.projFrames[443] = 4;
            Game1.projFrames[447] = 4;
            Game1.projFrames[448] = 3;
            Game1.projFrames[450] = 5;
            Game1.projFrames[454] = 2;
            Game1.projFrames[456] = 4;
            Game1.projFrames[459] = 3;
            Game1.projFrames[462] = 5;
            Game1.projFrames[465] = 4;
            Game1.projFrames[467] = 4;
            Game1.projFrames[468] = 4;
            Game1.projFrames[533] = 21;
            Game1.projFrames[535] = 12;
            Game1.projFrames[539] = 4;
            Game1.projFrames[575] = 4;
            Game1.projFrames[574] = 2;
            Game1.projFrames[634] = 4;
            Game1.projFrames[635] = 4;
            Game1.projFrames[353] = 14;
            Game1.projFrames[346] = 2;
            Game1.projFrames[347] = 2;
            Game1.projFrames[335] = 4;
            Game1.projFrames[344] = 3;
            Game1.projFrames[337] = 5;
            Game1.projFrames[317] = 8;
            Game1.projFrames[321] = 3;
            Game1.projFrames[308] = 10;
            Game1.projFrames[316] = 4;
            Game1.projFrames[275] = 2;
            Game1.projFrames[276] = 2;
            Game1.projFrames[254] = 5;
            Game1.projFrames[307] = 2;
            Game1.projFrames[72] = 4;
            Game1.projFrames[86] = 4;
            Game1.projFrames[87] = 4;
            Game1.projFrames[102] = 2;
            Game1.projFrames[111] = 8;
            Game1.projFrames[112] = 3;
            Game1.projFrames[127] = 16;
            Game1.projFrames[175] = 2;
            Game1.projFrames[181] = 4;
            Game1.projFrames[189] = 4;
            Game1.projFrames[191] = 18;
            Game1.projFrames[192] = 18;
            Game1.projFrames[193] = 18;
            Game1.projFrames[194] = 18;
            Game1.projFrames[190] = 4;
            Game1.projFrames[198] = 4;
            Game1.projFrames[199] = 8;
            Game1.projFrames[200] = 10;
            Game1.projFrames[206] = 5;
            Game1.projFrames[208] = 5;
            Game1.projFrames[209] = 12;
            Game1.projFrames[210] = 12;
            Game1.projFrames[211] = 10;
            Game1.projFrames[221] = 3;
            Game1.projFrames[237] = 4;
            Game1.projFrames[238] = 6;
            Game1.projFrames[221] = 3;
            Game1.projFrames[228] = 5;
            Game1.projFrames[229] = 4;
            Game1.projFrames[236] = 13;
            Game1.projFrames[243] = 4;
            Game1.projFrames[244] = 6;
            Game1.projFrames[249] = 5;
            Game1.projFrames[252] = 4;
            Game1.projFrames[266] = 6;
            Game1.projFrames[268] = 8;
            Game1.projFrames[269] = 7;
            Game1.projFrames[270] = 3;
            Game1.projFrames[313] = 12;
            Game1.projFrames[314] = 13;
            Game1.projFrames[319] = 11;
            Game1.projFrames[373] = 3;
            Game1.projFrames[375] = 8;
            Game1.projFrames[377] = 9;
            Game1.projFrames[379] = 4;
            Game1.projFrames[380] = 4;
            Game1.projFrames[601] = 2;
            Game1.projFrames[602] = 4;

            Game1.projPet[492] = true;
            Game1.projPet[499] = true;
            Game1.projPet[319] = true;
            Game1.projPet[334] = true;
            Game1.projPet[324] = true;
            Game1.projPet[266] = true;
            Game1.projPet[313] = true;
            Game1.projPet[314] = true;
            Game1.projPet[317] = true;
            Game1.projPet[175] = true;
            Game1.projPet[111] = true;
            Game1.projPet[112] = true;
            Game1.projPet[127] = true;
            Game1.projPet[191] = true;
            Game1.projPet[192] = true;
            Game1.projPet[193] = true;
            Game1.projPet[194] = true;
            Game1.projPet[197] = true;
            Game1.projPet[198] = true;
            Game1.projPet[199] = true;
            Game1.projPet[200] = true;
            Game1.projPet[208] = true;
            Game1.projPet[209] = true;
            Game1.projPet[210] = true;
            Game1.projPet[211] = true;
            Game1.projPet[236] = true;
            Game1.projPet[268] = true;
            Game1.projPet[269] = true;
            Game1.projPet[353] = true;
            Game1.projPet[373] = true;
            Game1.projPet[375] = true;
            Game1.projPet[377] = true;
            Game1.projPet[380] = true;
            Game1.projPet[387] = true;
            Game1.projPet[388] = true;
            Game1.projPet[390] = true;
            Game1.projPet[391] = true;
            Game1.projPet[392] = true;
            Game1.projPet[393] = true;
            Game1.projPet[394] = true;
            Game1.projPet[395] = true;
            Game1.projPet[398] = true;
            Game1.projPet[407] = true;
            Game1.projPet[423] = true;
            Game1.projPet[533] = true;
            Game1.projPet[613] = true;
            Game1.projPet[623] = true;
            Game1.projPet[625] = true;
            Game1.projPet[626] = true;
            Game1.projPet[627] = true;
            Game1.projPet[628] = true;
            Game1.tileLighted[237] = true;
            Game1.tileLighted[27] = true;
            Game1.tileLighted[381] = true;
            Game1.tileLighted[184] = true;
            Game1.slimeRainNPC[1] = true;
            Game1.debuff[158] = true;
            Game1.debuff[160] = true;
            Game1.debuff[20] = true;
            Game1.debuff[21] = true;
            Game1.debuff[22] = true;
            Game1.debuff[23] = true;
            Game1.debuff[24] = true;
            Game1.debuff[25] = true;
            Game1.debuff[28] = true;
            Game1.debuff[30] = true;
            Game1.debuff[31] = true;
            Game1.debuff[32] = true;
            Game1.debuff[33] = true;
            Game1.debuff[34] = true;
            Game1.debuff[35] = true;
            Game1.debuff[36] = true;
            Game1.debuff[37] = true;
            Game1.debuff[38] = true;
            Game1.debuff[39] = true;
            Game1.debuff[44] = true;
            Game1.debuff[46] = true;
            Game1.debuff[47] = true;
            Game1.debuff[67] = true;
            Game1.debuff[68] = true;
            Game1.debuff[69] = true;
            Game1.debuff[70] = true;
            Game1.debuff[80] = true;
            Game1.debuff[86] = true;
            Game1.debuff[87] = true;
            Game1.debuff[88] = true;
            Game1.debuff[89] = true;
            Game1.debuff[94] = true;
            Game1.debuff[103] = true;
            Game1.debuff[119] = true;
            Game1.debuff[120] = true;
            Game1.debuff[137] = true;
            Game1.debuff[145] = true;
            Game1.debuff[146] = true;
            Game1.debuff[147] = true;
            Game1.debuff[148] = true;
            Game1.debuff[149] = true;
            Game1.debuff[156] = true;
            Game1.debuff[157] = true;
            Game1.debuff[163] = true;
            Game1.debuff[164] = true;
            Game1.pvpBuff[20] = true;
            Game1.pvpBuff[24] = true;
            Game1.pvpBuff[31] = true;
            Game1.pvpBuff[39] = true;
            Game1.pvpBuff[44] = true;
            Game1.pvpBuff[20] = true;
            Game1.pvpBuff[69] = true;
            Game1.pvpBuff[103] = true;
            Game1.pvpBuff[119] = true;
            Game1.pvpBuff[120] = true;
            Game1.pvpBuff[137] = true;
            Game1.meleeBuff[71] = true;
            Game1.meleeBuff[73] = true;
            Game1.meleeBuff[74] = true;
            Game1.meleeBuff[75] = true;
            Game1.meleeBuff[76] = true;
            Game1.meleeBuff[77] = true;
            Game1.meleeBuff[78] = true;
            Game1.meleeBuff[79] = true;
            Game1.buffNoSave[20] = true;
            Game1.buffNoSave[22] = true;
            Game1.buffNoSave[23] = true;
            Game1.buffNoSave[24] = true;
            Game1.buffNoSave[28] = true;
            Game1.buffNoSave[30] = true;
            Game1.buffNoSave[31] = true;
            Game1.buffNoSave[34] = true;
            Game1.buffNoSave[35] = true;
            Game1.buffNoSave[37] = true;
            Game1.buffNoSave[38] = true;
            Game1.buffNoSave[39] = true;
            Game1.buffNoSave[43] = true;
            Game1.buffNoSave[44] = true;
            Game1.buffNoSave[46] = true;
            Game1.buffNoSave[47] = true;
            Game1.buffNoSave[48] = true;
            Game1.buffNoSave[58] = true;
            Game1.buffNoSave[59] = true;
            Game1.buffNoSave[60] = true;
            Game1.buffNoSave[62] = true;
            Game1.buffNoSave[63] = true;
            Game1.buffNoSave[64] = true;
            Game1.buffNoSave[67] = true;
            Game1.buffNoSave[68] = true;
            Game1.buffNoSave[69] = true;
            Game1.buffNoSave[70] = true;
            Game1.buffNoSave[72] = true;
            Game1.buffNoSave[80] = true;
            Game1.buffNoSave[87] = true;
            Game1.buffNoSave[158] = true;
            Game1.buffNoSave[146] = true;
            Game1.buffNoSave[147] = true;
            Game1.buffNoSave[88] = true;
            Game1.buffNoSave[89] = true;
            Game1.buffNoSave[94] = true;
            Game1.buffNoSave[95] = true;
            Game1.buffNoSave[96] = true;
            Game1.buffNoSave[97] = true;
            Game1.buffNoSave[98] = true;
            Game1.buffNoSave[99] = true;
            Game1.buffNoSave[100] = true;
            Game1.buffNoSave[103] = true;
            Game1.buffNoSave[118] = true;
            Game1.buffNoSave[138] = true;
            Game1.buffNoSave[167] = true;
            Game1.buffNoSave[166] = true;
            Game1.buffNoSave[184] = true;
            Game1.buffNoSave[185] = true;
            Game1.buffNoSave[119] = true;
            Game1.buffNoSave[120] = true;
            Game1.buffNoSave[90] = true;
            Game1.buffNoSave[125] = true;
            Game1.buffNoSave[126] = true;
            Game1.buffNoSave[128] = true;
            Game1.buffNoSave[129] = true;
            Game1.buffNoSave[130] = true;
            Game1.buffNoSave[131] = true;
            Game1.buffNoSave[132] = true;
            Game1.buffNoSave[133] = true;
            Game1.buffNoSave[134] = true;
            Game1.buffNoSave[135] = true;
            Game1.buffNoSave[139] = true;
            Game1.buffNoSave[140] = true;
            Game1.buffNoSave[141] = true;
            Game1.buffNoSave[142] = true;
            Game1.buffNoSave[143] = true;
            Game1.buffNoSave[137] = true;
            Game1.buffNoSave[144] = true;
            Game1.buffNoSave[161] = true;
            Game1.buffNoSave[162] = true;
            Game1.buffNoSave[163] = true;
            Game1.buffNoSave[164] = true;
            Game1.buffNoSave[168] = true;
            Game1.buffNoSave[170] = true;
            Game1.buffNoSave[171] = true;
            Game1.buffNoSave[172] = true;
            Game1.buffNoSave[182] = true;
            Game1.buffNoSave[187] = true;
            Game1.buffNoSave[188] = true;
            for (int j = 173; j <= 181; j++)
            {
                Game1.buffNoSave[j] = true;
            }
            Game1.buffNoTimeDisplay[19] = true;
            Game1.buffNoTimeDisplay[27] = true;
            Game1.buffNoTimeDisplay[28] = true;
            Game1.buffNoTimeDisplay[34] = true;
            Game1.buffNoTimeDisplay[37] = true;
            Game1.buffNoTimeDisplay[38] = true;
            Game1.buffNoTimeDisplay[40] = true;
            Game1.buffNoTimeDisplay[41] = true;
            Game1.buffNoTimeDisplay[42] = true;
            Game1.buffNoTimeDisplay[43] = true;
            Game1.buffNoTimeDisplay[45] = true;
            Game1.buffNoTimeDisplay[49] = true;
            Game1.buffNoTimeDisplay[60] = true;
            Game1.buffNoTimeDisplay[62] = true;
            Game1.buffNoTimeDisplay[64] = true;
            Game1.buffNoTimeDisplay[68] = true;
            Game1.buffNoTimeDisplay[81] = true;
            Game1.buffNoTimeDisplay[82] = true;
            Game1.buffNoTimeDisplay[83] = true;
            Game1.buffNoTimeDisplay[90] = true;
            Game1.buffNoTimeDisplay[95] = true;
            Game1.buffNoTimeDisplay[96] = true;
            Game1.buffNoTimeDisplay[97] = true;
            Game1.buffNoTimeDisplay[98] = true;
            Game1.buffNoTimeDisplay[99] = true;
            Game1.buffNoTimeDisplay[100] = true;
            Game1.buffNoTimeDisplay[101] = true;
            Game1.buffNoTimeDisplay[102] = true;
            Game1.buffNoTimeDisplay[118] = true;
            Game1.buffNoTimeDisplay[138] = true;
            Game1.buffNoTimeDisplay[167] = true;
            Game1.buffNoTimeDisplay[166] = true;
            Game1.buffNoTimeDisplay[184] = true;
            Game1.buffNoTimeDisplay[185] = true;
            Game1.buffNoTimeDisplay[125] = true;
            Game1.buffNoTimeDisplay[126] = true;
            Game1.buffNoTimeDisplay[128] = true;
            Game1.buffNoTimeDisplay[129] = true;
            Game1.buffNoTimeDisplay[130] = true;
            Game1.buffNoTimeDisplay[131] = true;
            Game1.buffNoTimeDisplay[132] = true;
            Game1.buffNoTimeDisplay[133] = true;
            Game1.buffNoTimeDisplay[134] = true;
            Game1.buffNoTimeDisplay[135] = true;
            Game1.buffNoTimeDisplay[136] = true;
            Game1.buffNoTimeDisplay[139] = true;
            Game1.buffNoTimeDisplay[140] = true;
            Game1.buffNoTimeDisplay[141] = true;
            Game1.buffNoTimeDisplay[142] = true;
            Game1.buffNoTimeDisplay[143] = true;
            Game1.buffNoTimeDisplay[137] = true;
            Game1.buffNoTimeDisplay[161] = true;
            Game1.buffNoTimeDisplay[162] = true;
            Game1.buffNoTimeDisplay[163] = true;
            Game1.buffNoTimeDisplay[168] = true;
            Game1.buffNoTimeDisplay[170] = true;
            Game1.buffNoTimeDisplay[171] = true;
            Game1.buffNoTimeDisplay[172] = true;
            Game1.buffNoTimeDisplay[182] = true;
            Game1.buffNoTimeDisplay[165] = true;
            Game1.buffNoTimeDisplay[186] = true;
            Game1.buffNoTimeDisplay[187] = true;
            Game1.buffNoTimeDisplay[188] = true;
            Game1.persistentBuff[71] = true;
            Game1.persistentBuff[73] = true;
            Game1.persistentBuff[74] = true;
            Game1.persistentBuff[75] = true;
            Game1.persistentBuff[76] = true;
            Game1.persistentBuff[77] = true;
            Game1.persistentBuff[78] = true;
            Game1.persistentBuff[79] = true;
            Game1.vanityPet[40] = true;
            Game1.vanityPet[41] = true;
            Game1.vanityPet[42] = true;
            Game1.vanityPet[45] = true;
            Game1.vanityPet[50] = true;
            Game1.vanityPet[51] = true;
            Game1.vanityPet[52] = true;
            Game1.vanityPet[53] = true;
            Game1.vanityPet[54] = true;
            Game1.vanityPet[55] = true;
            Game1.vanityPet[56] = true;
            Game1.vanityPet[61] = true;
            Game1.vanityPet[154] = true;
            Game1.vanityPet[65] = true;
            Game1.vanityPet[66] = true;
            Game1.vanityPet[81] = true;
            Game1.vanityPet[82] = true;
            Game1.vanityPet[84] = true;
            Game1.vanityPet[85] = true;
            Game1.vanityPet[91] = true;
            Game1.vanityPet[92] = true;
            Game1.vanityPet[127] = true;
            Game1.vanityPet[136] = true;
            Game1.lightPet[19] = true;
            Game1.lightPet[155] = true;
            Game1.lightPet[27] = true;
            Game1.lightPet[101] = true;
            Game1.lightPet[102] = true;
            Game1.lightPet[57] = true;
            Game1.lightPet[190] = true;
            Game1.lightPet[152] = true;
            Game1.tileFlame[4] = true;
            Game1.tileFlame[33] = true;
            Game1.tileFlame[34] = true;
            Game1.tileFlame[35] = true;
            Game1.tileFlame[42] = true;
            Game1.tileFlame[49] = true;
            Game1.tileFlame[93] = true;
            Game1.tileFlame[98] = true;
            Game1.tileFlame[100] = true;
            Game1.tileFlame[173] = true;
            Game1.tileFlame[174] = true;
            Game1.tileFlame[372] = true;
            Game1.tileRope[213] = true;
            Game1.tileRope[214] = true;
            Game1.tileRope[353] = true;
            Game1.tileRope[365] = true;
            Game1.tileRope[366] = true;
            Game1.tilePile[330] = true;
            Game1.tilePile[331] = true;
            Game1.tilePile[332] = true;
            Game1.tilePile[333] = true;
            for (int k = 0; k < 540; k++)
            {
                Game1.npcCatchable[k] = false;
            }
            Game1.npcCatchable[46] = true;
            Game1.npcCatchable[55] = true;
            Game1.npcCatchable[74] = true;
            Game1.npcCatchable[148] = true;
            Game1.npcCatchable[149] = true;
            Game1.npcCatchable[297] = true;
            Game1.npcCatchable[298] = true;
            Game1.npcCatchable[299] = true;
            Game1.npcCatchable[300] = true;
            Game1.npcCatchable[355] = true;
            Game1.npcCatchable[356] = true;
            Game1.npcCatchable[357] = true;
            Game1.npcCatchable[358] = true;
            Game1.npcCatchable[359] = true;
            Game1.npcCatchable[360] = true;
            Game1.npcCatchable[361] = true;
            Game1.npcCatchable[362] = true;
            Game1.npcCatchable[363] = true;
            Game1.npcCatchable[364] = true;
            Game1.npcCatchable[365] = true;
            Game1.npcCatchable[366] = true;
            Game1.npcCatchable[367] = true;
            Game1.npcCatchable[374] = true;
            Game1.npcCatchable[377] = true;
            Game1.npcCatchable[539] = true;
            Game1.npcCatchable[538] = true;
            Game1.npcCatchable[484] = true;
            Game1.npcCatchable[485] = true;
            Game1.npcCatchable[486] = true;
            Game1.npcCatchable[487] = true;
            for (int l = 442; l <= 448; l++)
            {
                Game1.npcCatchable[l] = true;
            }
            Game1.SetTileValue();
            Game1.tileSpelunker[6] = true;
            Game1.tileSpelunker[7] = true;
            Game1.tileSpelunker[8] = true;
            Game1.tileSpelunker[9] = true;
            Game1.tileSpelunker[12] = true;
            Game1.tileSpelunker[21] = true;
            Game1.tileSpelunker[28] = true;
            Game1.tileSpelunker[107] = true;
            Game1.tileSpelunker[108] = true;
            Game1.tileSpelunker[111] = true;
            Game1.tileSpelunker[63] = true;
            Game1.tileSpelunker[64] = true;
            Game1.tileSpelunker[65] = true;
            Game1.tileSpelunker[66] = true;
            Game1.tileSpelunker[67] = true;
            Game1.tileSpelunker[68] = true;
            Game1.tileSpelunker[166] = true;
            Game1.tileSpelunker[167] = true;
            Game1.tileSpelunker[168] = true;
            Game1.tileSpelunker[169] = true;
            Game1.tileSpelunker[178] = true;
            Game1.tileSpelunker[211] = true;
            Game1.tileSpelunker[221] = true;
            Game1.tileSpelunker[222] = true;
            Game1.tileSpelunker[223] = true;
            Game1.tileSpelunker[236] = true;
            Game1.tileSpelunker[37] = true;
            Game1.tileSpelunker[407] = true;
            Game1.SetupTileMerge();
            Game1.tileSolid[379] = true;
            Game1.tileSolid[371] = true;
            Game1.tileMergeDirt[371] = true;
            Game1.tileBlockLight[371] = true;
            Game1.tileBouncy[371] = true;
            Game1.tileFrameImportant[377] = true;
            Game1.tileFrameImportant[373] = true;
            Game1.tileFrameImportant[375] = true;
            Game1.tileFrameImportant[374] = true;
            Game1.tileLighted[372] = true;
            Game1.tileFrameImportant[372] = true;
            Game1.tileWaterDeath[372] = true;
            Game1.tileLavaDeath[372] = true;
            Game1.tileSolid[357] = true;
            Game1.tileBrick[357] = true;
            Game1.tileSolid[408] = true;
            Game1.tileMergeDirt[408] = true;
            Game1.tileBrick[408] = true;
            Game1.tileSolid[409] = true;
            Game1.tileBrick[409] = true;
            Game1.tileSolid[415] = true;
            Game1.tileBrick[415] = true;
            Game1.tileLighted[415] = true;
            Game1.tileSolid[416] = true;
            Game1.tileBrick[416] = true;
            Game1.tileLighted[416] = true;
            Game1.tileSolid[417] = true;
            Game1.tileBrick[417] = true;
            Game1.tileLighted[417] = true;
            Game1.tileSolid[418] = true;
            Game1.tileBrick[418] = true;
            Game1.tileLighted[418] = true;
            Game1.tileBrick[37] = true;
            Game1.tileBrick[117] = true;
            Game1.tileBrick[25] = true;
            Game1.tileBrick[203] = true;
            Game1.tileSolid[232] = true;
            Game1.tileSolid[311] = true;
            Game1.tileSolid[312] = true;
            Game1.tileSolid[313] = true;
            Game1.tileMergeDirt[311] = true;
            Game1.tileSolid[315] = true;
            Game1.tileMergeDirt[315] = true;
            Game1.tileSolid[321] = true;
            Game1.tileSolid[322] = true;
            Game1.tileBlockLight[321] = true;
            Game1.tileBlockLight[322] = true;
            Game1.tileMergeDirt[321] = true;
            Game1.tileMergeDirt[322] = true;
            Game1.tileBrick[321] = true;
            Game1.tileBrick[322] = true;
            Game1.tileShine[239] = 1100;
            Game1.tileSolid[239] = true;
            Game1.tileSolidTop[239] = true;
            Game1.tileSolid[380] = true;
            Game1.tileSolidTop[380] = true;
            Game1.tileFrameImportant[358] = true;
            Game1.tileFrameImportant[359] = true;
            Game1.tileFrameImportant[360] = true;
            Game1.tileFrameImportant[361] = true;
            Game1.tileFrameImportant[362] = true;
            Game1.tileFrameImportant[363] = true;
            Game1.tileFrameImportant[364] = true;
            Game1.tileFrameImportant[391] = true;
            Game1.tileLighted[391] = true;
            Game1.tileFrameImportant[392] = true;
            Game1.tileFrameImportant[393] = true;
            Game1.tileFrameImportant[394] = true;
            Game1.tileFrameImportant[356] = true;
            Game1.tileFrameImportant[334] = true;
            Game1.tileFrameImportant[300] = true;
            Game1.tileFrameImportant[301] = true;
            Game1.tileFrameImportant[302] = true;
            Game1.tileFrameImportant[303] = true;
            Game1.tileFrameImportant[304] = true;
            Game1.tileFrameImportant[305] = true;
            Game1.tileFrameImportant[306] = true;
            Game1.tileFrameImportant[307] = true;
            Game1.tileFrameImportant[308] = true;
            Game1.tileFrameImportant[354] = true;
            Game1.tileFrameImportant[355] = true;
            Game1.tileFrameImportant[324] = true;
            Game1.tileObsidianKill[324] = true;
            Game1.tileLavaDeath[324] = true;
            Game1.tileFrameImportant[283] = true;
            Game1.tileFrameImportant[288] = true;
            Game1.tileFrameImportant[289] = true;
            Game1.tileFrameImportant[290] = true;
            Game1.tileFrameImportant[291] = true;
            Game1.tileFrameImportant[292] = true;
            Game1.tileFrameImportant[293] = true;
            Game1.tileFrameImportant[294] = true;
            Game1.tileFrameImportant[295] = true;
            Game1.tileFrameImportant[296] = true;
            Game1.tileFrameImportant[297] = true;
            Game1.tileFrameImportant[316] = true;
            Game1.tileFrameImportant[317] = true;
            Game1.tileFrameImportant[318] = true;
            Game1.tileLargeFrames[284] = 1;
            Game1.wallHouse[224] = true;
            Game1.wallLargeFrames[224] = 2;
            Game1.tileLargeFrames[409] = 1;
            Game1.tileFrameImportant[410] = true;
            Game1.wallHouse[173] = true;
            Game1.wallHouse[183] = true;
            Game1.wallHouse[179] = true;
            Game1.wallLargeFrames[179] = 1;
            Game1.tileSolid[367] = true;
            Game1.tileBlockLight[367] = true;
            Game1.tileMergeDirt[367] = true;
            Game1.tileSolid[357] = true;
            Game1.tileBlockLight[357] = true;
            Game1.tileLargeFrames[357] = 1;
            Game1.tileBlendAll[357] = true;
            Game1.wallHouse[184] = true;
            Game1.wallHouse[181] = true;
            Game1.tileSolid[368] = true;
            Game1.tileBlockLight[368] = true;
            Game1.tileMergeDirt[368] = true;
            Game1.tileSolid[369] = true;
            Game1.tileBlockLight[369] = true;
            Game1.tileBrick[369] = true;
            Game1.tileMergeDirt[369] = true;
            Game1.wallHouse[186] = true;
            Game1.tileLargeFrames[325] = 1;
            Game1.tileSolid[325] = true;
            Game1.tileBlockLight[325] = true;
            Game1.wallLargeFrames[146] = 1;
            Game1.wallLargeFrames[147] = 1;
            Game1.wallLargeFrames[167] = 1;
            Game1.wallLargeFrames[185] = 2;
            Game1.tileSolid[326] = true;
            Game1.tileBlockLight[326] = true;
            Game1.tileSolid[327] = true;
            Game1.tileBlockLight[327] = true;
            Game1.tileSolid[345] = true;
            Game1.tileBlockLight[345] = true;
            Game1.tileLighted[327] = true;
            Game1.tileSolid[328] = true;
            Game1.tileBrick[328] = true;
            Game1.tileSolid[329] = true;
            Game1.tileBrick[329] = true;
            Game1.tileBlockLight[329] = true;
            Game1.tileLighted[336] = true;
            Game1.tileLighted[340] = true;
            Game1.tileLighted[341] = true;
            Game1.tileLighted[342] = true;
            Game1.tileLighted[343] = true;
            Game1.tileLighted[344] = true;
            Game1.tileLighted[349] = true;
            Game1.tileSolid[284] = true;
            Game1.tileBlockLight[284] = true;
            Game1.tileSolid[346] = true;
            Game1.tileBlockLight[346] = true;
            Game1.tileLighted[346] = true;
            Game1.tileShine[346] = 2000;
            Game1.tileShine2[346] = true;
            Game1.tileBrick[346] = true;
            Game1.tileMergeDirt[346] = true;
            Game1.tileSolid[347] = true;
            Game1.tileBlockLight[347] = true;
            Game1.tileLighted[347] = true;
            Game1.tileShine[347] = 1900;
            Game1.tileShine2[347] = true;
            Game1.tileBrick[347] = true;
            Game1.tileMergeDirt[347] = true;
            Game1.tileSolid[348] = true;
            Game1.tileBlockLight[348] = true;
            Game1.tileLighted[348] = true;
            Game1.tileShine[348] = 1800;
            Game1.tileShine2[348] = true;
            Game1.tileBrick[348] = true;
            Game1.tileMergeDirt[348] = true;
            Game1.tileSolid[350] = true;
            Game1.tileBlockLight[350] = true;
            Game1.tileLighted[350] = true;
            Game1.tileBrick[350] = true;
            Game1.tileMergeDirt[350] = true;
            Game1.tileGlowMask[350] = 94;
            Game1.tileGlowMask[390] = 130;
            Game1.tileGlowMask[381] = 126;
            Game1.tileGlowMask[370] = 111;
            Game1.tileGlowMask[391] = 131;
            Game1.tileGlowMask[410] = 201;
            Game1.tileSolid[370] = true;
            Game1.tileBlockLight[370] = true;
            Game1.tileLighted[370] = true;
            Game1.tileShine[370] = 1900;
            Game1.tileShine2[370] = true;
            Game1.tileBrick[370] = true;
            Game1.tileMergeDirt[370] = true;
            Game1.tileContainer[21] = true;
            Game1.tileContainer[88] = true;
            Game1.tileSign[55] = true;
            Game1.tileSign[85] = true;
            Game1.tileSolid[383] = true;
            Game1.tileBrick[383] = true;
            Game1.tileBlockLight[383] = true;
            Game1.tileSolid[385] = true;
            Game1.tileBrick[385] = true;
            Game1.tileBlockLight[385] = true;
            Game1.tileSolid[396] = true;
            Game1.tileBlockLight[396] = true;
            Game1.tileSolid[397] = true;
            Game1.tileBlockLight[397] = true;
            Game1.tileSolid[399] = true;
            Game1.tileBlockLight[399] = true;
            Game1.tileSolid[401] = true;
            Game1.tileBlockLight[401] = true;
            Game1.tileSolid[398] = true;
            Game1.tileBlockLight[398] = true;
            Game1.tileSolid[400] = true;
            Game1.tileBlockLight[400] = true;
            Game1.tileSolid[402] = true;
            Game1.tileBlockLight[402] = true;
            Game1.tileSolid[403] = true;
            Game1.tileBlockLight[403] = true;
            Game1.tileSolid[404] = true;
            Game1.tileBlockLight[404] = true;
            Game1.tileSolid[407] = true;
            Game1.tileBlockLight[407] = true;
            Game1.tileShine2[407] = true;
            Game1.tileShine[407] = 1000;
            Game1.tileFrameImportant[36] = true;
            Game1.tileFrameImportant[275] = true;
            Game1.tileFrameImportant[276] = true;
            Game1.tileFrameImportant[277] = true;
            Game1.tileFrameImportant[278] = true;
            Game1.tileFrameImportant[279] = true;
            Game1.tileFrameImportant[280] = true;
            Game1.tileFrameImportant[281] = true;
            Game1.tileFrameImportant[282] = true;
            Game1.tileFrameImportant[285] = true;
            Game1.tileFrameImportant[286] = true;
            Game1.tileFrameImportant[414] = true;
            Game1.tileFrameImportant[413] = true;
            Game1.tileFrameImportant[309] = true;
            Game1.tileFrameImportant[310] = true;
            Game1.tileFrameImportant[339] = true;
            Game1.tileLighted[286] = true;
            Game1.tileLighted[302] = true;
            Game1.tileFrameImportant[298] = true;
            Game1.tileFrameImportant[299] = true;
            Game1.tileSolid[170] = true;
            Game1.tileFrameImportant[171] = true;
            Game1.tileLighted[171] = true;
            Game1.tileFrameImportant[247] = true;
            Game1.tileFrameImportant[245] = true;
            Game1.tileFrameImportant[246] = true;
            Game1.tileFrameImportant[239] = true;
            Game1.tileFrameImportant[240] = true;
            Game1.tileFrameImportant[241] = true;
            Game1.tileFrameImportant[242] = true;
            Game1.tileFrameImportant[243] = true;
            Game1.tileFrameImportant[244] = true;
            Game1.tileFrameImportant[254] = true;
            Game1.tileSolid[221] = true;
            Game1.tileBlockLight[221] = true;
            Game1.tileMergeDirt[221] = true;
            Game1.tileLighted[96] = true;
            Game1.tileMergeDirt[250] = true;
            Game1.tileSolid[272] = true;
            Game1.tileBlockLight[272] = true;
            Game1.tileSolid[229] = true;
            Game1.tileBlockLight[229] = true;
            Game1.tileMergeDirt[229] = true;
            Game1.tileSolid[230] = true;
            Game1.tileBlockLight[230] = true;
            Game1.tileMergeDirt[230] = true;
            Game1.tileSolid[222] = true;
            Game1.tileBlockLight[222] = true;
            Game1.tileMergeDirt[222] = true;
            Game1.tileSolid[223] = true;
            Game1.tileBlockLight[223] = true;
            Game1.tileMergeDirt[223] = true;
            Game1.tileSolid[224] = true;
            Game1.tileBlockLight[224] = true;
            Game1.tileFrameImportant[237] = true;
            Game1.tileFrameImportant[238] = true;
            Game1.tileSolid[225] = true;
            Game1.tileBlockLight[225] = true;
            Game1.tileBrick[225] = true;
            Game1.tileSolid[226] = true;
            Game1.tileBlockLight[226] = true;
            Game1.tileBrick[226] = true;
            Game1.tileSolid[235] = true;
            Game1.tileBlockLight[235] = true;
            Game1.tileFrameImportant[235] = true;
            Game1.tileLighted[238] = true;
            Game1.tileFrameImportant[236] = true;
            Game1.tileCut[236] = true;
            Game1.tileSolid[191] = true;
            Game1.tileBrick[191] = true;
            Game1.tileBlockLight[191] = true;
            Game1.tileSolid[211] = true;
            Game1.tileBlockLight[211] = true;
            Game1.tileSolid[208] = true;
            Game1.tileBrick[208] = true;
            Game1.tileBlockLight[208] = true;
            Game1.tileSolid[192] = true;
            Game1.tileBrick[192] = true;
            Game1.tileBlockLight[192] = true;
            Game1.tileSolid[193] = true;
            Game1.tileBrick[193] = true;
            Game1.tileBlockLight[193] = true;
            Game1.tileMergeDirt[193] = true;
            Game1.tileSolid[194] = true;
            Game1.tileBrick[194] = true;
            Game1.tileBlockLight[194] = true;
            Game1.tileSolid[195] = true;
            Game1.tileBrick[195] = true;
            Game1.tileMergeDirt[195] = true;
            Game1.tileBlockLight[195] = true;
            Game1.tileBlockLight[200] = true;
            Game1.tileSolid[200] = true;
            Game1.tileBrick[200] = true;
            Game1.tileBlockLight[203] = true;
            Game1.tileSolid[203] = true;
            Game1.tileMergeDirt[203] = true;
            Game1.tileBlockLight[204] = true;
            Game1.tileSolid[204] = true;
            Game1.tileMergeDirt[204] = true;
            Game1.tileBlockLight[165] = true;
            Game1.tileShine2[147] = true;
            Game1.tileShine2[161] = true;
            Game1.tileShine2[163] = true;
            Game1.tileShine2[164] = true;
            Game1.tileSolid[189] = true;
            Game1.tileBlockLight[51] = true;
            Game1.tileLighted[204] = true;
            Game1.tileShine[204] = 1150;
            Game1.tileShine2[204] = true;
            Game1.tileSolid[190] = true;
            Game1.tileBlockLight[190] = true;
            Game1.tileBrick[190] = true;
            Game1.tileSolid[198] = true;
            Game1.tileMergeDirt[198] = true;
            Game1.tileBrick[198] = true;
            Game1.tileBlockLight[198] = true;
            Game1.tileSolid[206] = true;
            Game1.tileBlockLight[206] = true;
            Game1.tileMergeDirt[206] = true;
            Game1.tileBrick[206] = true;
            Game1.tileBlockLight[234] = true;
            Game1.tileSolid[248] = true;
            Game1.tileSolid[249] = true;
            Game1.tileSolid[250] = true;
            Game1.tileBrick[248] = true;
            Game1.tileBrick[249] = true;
            Game1.tileBrick[250] = true;
            Game1.tileSolid[251] = true;
            Game1.tileSolid[252] = true;
            Game1.tileBrick[252] = true;
            Game1.tileSolid[253] = true;
            Game1.tileBrick[253] = true;
            Game1.tileMergeDirt[251] = true;
            Game1.tileMergeDirt[252] = true;
            Game1.tileMergeDirt[253] = true;
            Game1.tileBlockLight[251] = true;
            Game1.tileBlockLight[252] = true;
            Game1.tileBlockLight[253] = true;
            Game1.tileBlockLight[248] = true;
            Game1.tileBlockLight[249] = true;
            Game1.tileBlockLight[250] = true;
            Game1.tileLargeFrames[273] = 1;
            Game1.tileSolid[273] = true;
            Game1.tileBlockLight[273] = true;
            Game1.tileLargeFrames[274] = 1;
            Game1.tileSolid[274] = true;
            Game1.tileBlockLight[274] = true;
            for (int m = 255; m <= 268; m++)
            {
                Game1.tileSolid[m] = true;
                if (m > 261)
                {
                    Game1.tileLighted[m] = true;
                    Game1.tileShine2[m] = true;
                }
            }
            Game1.tileFrameImportant[269] = true;
            Game1.tileFrameImportant[334] = true;
            Game1.tileFrameImportant[390] = true;
            Game1.tileNoAttach[390] = true;
            Game1.tileLavaDeath[390] = true;
            Game1.tileLighted[390] = true;
            Game1.wallHouse[168] = true;
            Game1.wallHouse[169] = true;
            Game1.wallHouse[142] = true;
            Game1.wallHouse[143] = true;
            Game1.wallHouse[144] = true;
            Game1.wallHouse[149] = true;
            Game1.wallHouse[151] = true;
            Game1.wallHouse[150] = true;
            Game1.wallHouse[152] = true;
            Game1.wallHouse[175] = true;
            Game1.wallHouse[176] = true;
            Game1.wallHouse[182] = true;
            for (int n = 153; n < 167; n++)
            {
                Game1.wallHouse[n] = true;
            }
            Game1.wallHouse[146] = true;
            Game1.wallHouse[147] = true;
            Game1.wallHouse[149] = true;
            Game1.wallHouse[167] = true;
            Game1.wallHouse[168] = true;
            Game1.wallHouse[133] = true;
            Game1.wallHouse[134] = true;
            Game1.wallHouse[135] = true;
            Game1.wallHouse[136] = true;
            Game1.wallHouse[137] = true;
            Game1.wallHouse[75] = true;
            Game1.wallHouse[76] = true;
            Game1.wallHouse[78] = true;
            Game1.wallHouse[82] = true;
            Game1.wallHouse[77] = true;
            Game1.wallHouse[1] = true;
            Game1.wallHouse[4] = true;
            Game1.wallHouse[5] = true;
            Game1.wallHouse[6] = true;
            Game1.wallHouse[10] = true;
            Game1.wallHouse[11] = true;
            Game1.wallHouse[12] = true;
            Game1.wallHouse[16] = true;
            Game1.wallHouse[17] = true;
            Game1.wallHouse[18] = true;
            Game1.wallHouse[19] = true;
            Game1.wallHouse[20] = true;
            Game1.wallHouse[21] = true;
            Game1.wallHouse[22] = true;
            Game1.wallHouse[23] = true;
            Game1.wallHouse[24] = true;
            Game1.wallHouse[25] = true;
            Game1.wallHouse[26] = true;
            Game1.wallHouse[27] = true;
            Game1.wallHouse[29] = true;
            Game1.wallHouse[30] = true;
            Game1.wallHouse[31] = true;
            Game1.wallHouse[32] = true;
            Game1.wallHouse[33] = true;
            Game1.wallHouse[34] = true;
            Game1.wallHouse[35] = true;
            Game1.wallHouse[36] = true;
            Game1.wallHouse[37] = true;
            Game1.wallHouse[38] = true;
            Game1.wallHouse[39] = true;
            Game1.wallHouse[41] = true;
            Game1.wallHouse[42] = true;
            Game1.wallHouse[43] = true;
            Game1.wallHouse[44] = true;
            Game1.wallHouse[45] = true;
            Game1.wallHouse[46] = true;
            Game1.wallHouse[47] = true;
            Game1.wallHouse[66] = true;
            Game1.wallHouse[67] = true;
            Game1.wallHouse[68] = true;
            Game1.wallHouse[72] = true;
            Game1.wallHouse[73] = true;
            Game1.wallHouse[107] = true;
            Game1.wallHouse[106] = true;
            Game1.wallHouse[109] = true;
            Game1.wallHouse[110] = true;
            Game1.wallHouse[111] = true;
            Game1.wallHouse[112] = true;
            Game1.wallHouse[113] = true;
            Game1.wallHouse[114] = true;
            Game1.wallHouse[115] = true;
            Game1.wallHouse[116] = true;
            Game1.wallHouse[117] = true;
            Game1.wallHouse[118] = true;
            Game1.wallHouse[119] = true;
            Game1.wallHouse[120] = true;
            Game1.wallHouse[121] = true;
            Game1.wallHouse[122] = true;
            Game1.wallHouse[123] = true;
            Game1.wallHouse[124] = true;
            Game1.wallHouse[125] = true;
            Game1.wallHouse[108] = true;
            Game1.wallHouse[100] = true;
            Game1.wallHouse[101] = true;
            Game1.wallHouse[102] = true;
            Game1.wallHouse[103] = true;
            Game1.wallHouse[104] = true;
            Game1.wallHouse[105] = true;
            Game1.wallHouse[84] = true;
            Game1.wallHouse[74] = true;
            Game1.wallHouse[85] = true;
            Game1.wallHouse[88] = true;
            Game1.wallHouse[89] = true;
            Game1.wallHouse[90] = true;
            Game1.wallHouse[91] = true;
            Game1.wallHouse[92] = true;
            Game1.wallHouse[93] = true;
            Game1.wallHouse[126] = true;
            Game1.wallHouse[127] = true;
            Game1.wallHouse[128] = true;
            Game1.wallHouse[129] = true;
            Game1.wallHouse[130] = true;
            Game1.wallHouse[131] = true;
            Game1.wallHouse[132] = true;
            Game1.wallHouse[138] = true;
            Game1.wallHouse[139] = true;
            Game1.wallHouse[140] = true;
            Game1.wallHouse[141] = true;
            Game1.wallHouse[177] = true;
            Game1.wallHouse[172] = true;
            Game1.wallHouse[174] = true;
            Game1.wallHouse[223] = true;
            Game1.wallLight[0] = true;
            Game1.wallLight[21] = true;
            Game1.wallLight[106] = true;
            Game1.wallLight[107] = true;
            Game1.wallLight[138] = true;
            Game1.wallLight[140] = true;
            Game1.wallLight[141] = true;
            Game1.wallLight[139] = true;
            Game1.wallLight[145] = true;
            Game1.wallLight[150] = true;
            Game1.wallLight[152] = true;
            Game1.wallLight[168] = true;
            for (int num = 0; num < 225; num++)
            {
                Game1.wallDungeon[num] = false;
            }
            Game1.wallDungeon[7] = true;
            Game1.wallDungeon[8] = true;
            Game1.wallDungeon[9] = true;
            Game1.wallDungeon[94] = true;
            Game1.wallDungeon[95] = true;
            Game1.wallDungeon[96] = true;
            Game1.wallDungeon[97] = true;
            Game1.wallDungeon[98] = true;
            Game1.wallDungeon[99] = true;
            for (int num2 = 0; num2 < 10; num2++)
            {
                Game1.recentWorld[num2] = "";
                Game1.recentIP[num2] = "";
                Game1.recentPort[num2] = 0;
            }
            if (Game1.rand == null)
            {
                Game1.rand = new Random((int)DateTime.Now.Ticks);
            }
            if (WorldGen.genRand == null)
            {
                WorldGen.genRand = new Random((int)DateTime.Now.Ticks);
            }
            this.SetTitle();
            Game1.lo = Game1.rand.Next(6);
            Game1.critterCage = true;
            for (int num3 = 0; num3 < 3600; num3++)
            {
                Game1.CritterCages();
            }
            Game1.critterCage = false;
            Game1.tileBrick[1] = true;
            Game1.tileBrick[54] = true;
            Game1.tileBrick[118] = true;
            Game1.tileBrick[119] = true;
            Game1.tileBrick[120] = true;
            Game1.tileBrick[121] = true;
            Game1.tileBrick[122] = true;
            Game1.tileBrick[140] = true;
            Game1.tileBrick[148] = true;
            Game1.tileBrick[150] = true;
            Game1.tileBrick[151] = true;
            Game1.tileBrick[152] = true;
            Game1.tileBrick[30] = true;
            Game1.tileBrick[38] = true;
            Game1.tileBrick[39] = true;
            Game1.tileBrick[41] = true;
            Game1.tileBrick[43] = true;
            Game1.tileBrick[44] = true;
            Game1.tileBrick[45] = true;
            Game1.tileBrick[46] = true;
            Game1.tileBrick[47] = true;
            Game1.tileBrick[75] = true;
            Game1.tileBrick[76] = true;
            Game1.tileBrick[160] = true;
            Game1.tileBrick[2] = true;
            Game1.tileBrick[199] = true;
            Game1.tileBrick[23] = true;
            Game1.tileBrick[60] = true;
            Game1.tileBrick[70] = true;
            Game1.tileBrick[109] = true;
            Game1.tileBrick[53] = true;
            Game1.tileBrick[116] = true;
            Game1.tileBrick[234] = true;
            Game1.tileBrick[112] = true;
            Game1.tileBrick[147] = true;
            Game1.tileBrick[153] = true;
            Game1.tileBrick[154] = true;
            Game1.tileBrick[155] = true;
            Game1.tileBrick[156] = true;
            Game1.tileBrick[157] = true;
            Game1.tileBrick[158] = true;
            Game1.tileBrick[159] = true;
            Game1.tileMergeDirt[202] = true;
            Game1.tileBrick[202] = true;
            Game1.tileSolid[202] = true;
            Game1.tileBlockLight[202] = true;
            Game1.tileBrick[161] = true;
            Game1.tileBlockLight[161] = true;
            Game1.tileBlockLight[163] = true;
            Game1.tileBlockLight[164] = true;
            Game1.tileSolid[188] = true;
            Game1.tileBlockLight[188] = true;
            Game1.tileBrick[188] = true;
            Game1.tileMergeDirt[188] = true;
            Game1.tileBrick[179] = true;
            Game1.tileSolid[179] = true;
            Game1.tileBlockLight[179] = true;
            Game1.tileMoss[179] = true;
            Game1.tileBrick[381] = true;
            Game1.tileSolid[381] = true;
            Game1.tileBlockLight[381] = true;
            Game1.tileMoss[381] = true;
            Game1.tileBrick[180] = true;
            Game1.tileSolid[180] = true;
            Game1.tileBlockLight[180] = true;
            Game1.tileMoss[180] = true;
            Game1.tileBrick[181] = true;
            Game1.tileSolid[181] = true;
            Game1.tileBlockLight[181] = true;
            Game1.tileMoss[181] = true;
            Game1.tileBrick[182] = true;
            Game1.tileSolid[182] = true;
            Game1.tileBlockLight[182] = true;
            Game1.tileMoss[182] = true;
            Game1.tileBrick[183] = true;
            Game1.tileSolid[183] = true;
            Game1.tileBlockLight[183] = true;
            Game1.tileMoss[183] = true;
            Game1.tileMergeDirt[177] = true;
            Game1.tileMergeDirt[190] = true;
            Game1.tileSolid[196] = true;
            Game1.tileSolid[197] = true;
            Game1.tileMergeDirt[197] = true;
            Game1.tileBlockLight[197] = true;
            Game1.tileNoSunLight[197] = true;
            Game1.tileBrick[175] = true;
            Game1.tileSolid[175] = true;
            Game1.tileBlockLight[175] = true;
            Game1.tileBrick[176] = true;
            Game1.tileSolid[176] = true;
            Game1.tileBlockLight[176] = true;
            Game1.tileBrick[177] = true;
            Game1.tileSolid[177] = true;
            Game1.tileBlockLight[177] = true;
            Game1.tileBrick[225] = true;
            Game1.tileBrick[229] = true;
            Game1.tileShine[221] = 925;
            Game1.tileShine[222] = 875;
            Game1.tileShine[223] = 825;
            Game1.tileShine2[221] = true;
            Game1.tileShine2[222] = true;
            Game1.tileShine2[223] = true;
            Game1.tileMergeDirt[175] = true;
            Game1.tileMergeDirt[176] = true;
            Game1.tileMergeDirt[177] = true;
            Game1.tileMergeDirt[208] = true;
            Game1.tileBrick[162] = true;
            Game1.tileSolid[162] = true;
            Game1.tileBlockLight[162] = false;
            Game1.tileBrick[163] = true;
            Game1.tileSolid[163] = true;
            Game1.tileBrick[164] = true;
            Game1.tileSolid[164] = true;
            Game1.tileShine2[6] = true;
            Game1.tileShine2[7] = true;
            Game1.tileShine2[8] = true;
            Game1.tileShine2[9] = true;
            Game1.tileShine2[166] = true;
            Game1.tileShine2[167] = true;
            Game1.tileShine2[168] = true;
            Game1.tileShine2[169] = true;
            Game1.tileShine2[12] = true;
            Game1.tileShine2[21] = true;
            Game1.tileShine2[22] = true;
            Game1.tileShine2[25] = true;
            Game1.tileShine2[45] = true;
            Game1.tileShine2[46] = true;
            Game1.tileShine2[47] = true;
            Game1.tileShine2[63] = true;
            Game1.tileShine2[64] = true;
            Game1.tileShine2[65] = true;
            Game1.tileShine2[66] = true;
            Game1.tileShine2[67] = true;
            Game1.tileShine2[68] = true;
            Game1.tileShine2[107] = true;
            Game1.tileShine2[108] = true;
            Game1.tileShine2[111] = true;
            Game1.tileShine2[121] = true;
            Game1.tileShine2[122] = true;
            Game1.tileShine2[117] = true;
            Game1.tileShine2[211] = true;
            Game1.tileShine[129] = 300;
            Game1.tileNoFail[330] = true;
            Game1.tileNoFail[331] = true;
            Game1.tileNoFail[332] = true;
            Game1.tileNoFail[333] = true;
            Game1.tileNoFail[129] = true;
            Game1.tileNoFail[192] = true;
            Game1.tileHammer[26] = true;
            Game1.tileHammer[31] = true;
            Game1.tileAxe[5] = true;
            Game1.tileAxe[72] = true;
            Game1.tileAxe[80] = true;
            Game1.tileAxe[323] = true;
            Game1.tileBrick[59] = true;
            Game1.tileBrick[234] = true;
            Game1.tileSolid[234] = true;
            Game1.tileMergeDirt[234] = true;
            Game1.tileSand[53] = true;
            Game1.tileSand[112] = true;
            Game1.tileSand[116] = true;
            Game1.tileSand[234] = true;
            Game1.tileFrameImportant[233] = true;
            Game1.tileLighted[215] = true;
            Game1.tileFrameImportant[227] = true;
            Game1.tileFrameImportant[228] = true;
            Game1.tileFrameImportant[231] = true;
            Game1.tileCut[231] = true;
            Game1.tileFrameImportant[216] = true;
            Game1.tileFrameImportant[217] = true;
            Game1.tileFrameImportant[218] = true;
            Game1.tileFrameImportant[219] = true;
            Game1.tileFrameImportant[220] = true;
            Game1.tileFrameImportant[338] = true;
            Game1.tileFrameImportant[165] = true;
            Game1.tileFrameImportant[209] = true;
            Game1.tileFrameImportant[215] = true;
            Game1.tileFrameImportant[210] = true;
            Game1.tileFrameImportant[212] = true;
            Game1.tileFrameImportant[207] = true;
            Game1.tileFrameImportant[178] = true;
            Game1.tileFrameImportant[184] = true;
            Game1.tileFrameImportant[185] = true;
            Game1.tileFrameImportant[186] = true;
            Game1.tileFrameImportant[187] = true;
            Game1.tileFrameImportant[173] = true;
            Game1.tileFrameImportant[174] = true;
            Game1.tileLighted[173] = true;
            Game1.tileLighted[174] = true;
            Game1.tileFrameImportant[139] = true;
            Game1.tileLighted[160] = true;
            Game1.tileLighted[149] = true;
            Game1.tileFrameImportant[149] = true;
            Game1.tileFrameImportant[142] = true;
            Game1.tileFrameImportant[143] = true;
            Game1.tileFrameImportant[144] = true;
            Game1.tileStone[131] = true;
            Game1.tileFrameImportant[136] = true;
            Game1.tileFrameImportant[137] = true;
            Game1.tileFrameImportant[138] = true;
            Game1.tileBlockLight[137] = true;
            Game1.tileSolid[137] = true;
            Game1.tileBlockLight[160] = true;
            Game1.tileSolid[160] = true;
            Game1.tileMergeDirt[160] = true;
            Game1.tileBlockLight[161] = true;
            Game1.tileSolid[161] = true;
            Game1.tileBlockLight[145] = true;
            Game1.tileSolid[145] = true;
            Game1.tileMergeDirt[145] = true;
            Game1.tileBlockLight[146] = true;
            Game1.tileSolid[146] = true;
            Game1.tileMergeDirt[146] = true;
            Game1.tileBlockLight[147] = true;
            Game1.tileSolid[147] = true;
            Game1.tileBlockLight[148] = true;
            Game1.tileSolid[148] = true;
            Game1.tileMergeDirt[148] = true;
            Game1.tileBlockLight[138] = true;
            Game1.tileSolid[138] = true;
            Game1.tileBlockLight[140] = true;
            Game1.tileSolid[140] = true;
            Game1.tileBlockLight[151] = true;
            Game1.tileSolid[151] = true;
            Game1.tileMergeDirt[151] = true;
            Game1.tileBlockLight[152] = true;
            Game1.tileSolid[152] = true;
            Game1.tileMergeDirt[152] = true;
            Game1.tileBlockLight[153] = true;
            Game1.tileSolid[153] = true;
            Game1.tileMergeDirt[153] = true;
            Game1.tileBlockLight[154] = true;
            Game1.tileSolid[154] = true;
            Game1.tileMergeDirt[154] = true;
            Game1.tileBlockLight[155] = true;
            Game1.tileSolid[155] = true;
            Game1.tileMergeDirt[155] = true;
            Game1.tileBlockLight[156] = true;
            Game1.tileSolid[156] = true;
            Game1.tileMergeDirt[156] = true;
            Game1.tileMergeDirt[150] = true;
            Game1.tileBlockLight[157] = true;
            Game1.tileSolid[157] = true;
            Game1.tileMergeDirt[157] = true;
            Game1.tileBlockLight[158] = true;
            Game1.tileSolid[158] = true;
            Game1.tileMergeDirt[158] = true;
            Game1.tileBlockLight[159] = true;
            Game1.tileSolid[159] = true;
            Game1.tileMergeDirt[159] = true;
            Game1.tileFrameImportant[320] = true;
            Game1.tileShine[22] = 1150;
            Game1.tileShine[6] = 1150;
            Game1.tileShine[7] = 1100;
            Game1.tileShine[8] = 1000;
            Game1.tileShine[9] = 1050;
            Game1.tileShine[166] = 1125;
            Game1.tileShine[167] = 1075;
            Game1.tileShine[168] = 1025;
            Game1.tileShine[169] = 975;
            Game1.tileShine[178] = 500;
            Game1.tileShine2[178] = true;
            Game1.tileShine[12] = 300;
            Game1.tileShine[21] = 1200;
            Game1.tileShine[63] = 900;
            Game1.tileShine[64] = 900;
            Game1.tileShine[65] = 900;
            Game1.tileShine[66] = 900;
            Game1.tileShine[67] = 900;
            Game1.tileShine[68] = 900;
            Game1.tileShine[45] = 1900;
            Game1.tileShine[46] = 2000;
            Game1.tileShine[47] = 2100;
            Game1.tileShine[122] = 1800;
            Game1.tileShine[121] = 1850;
            Game1.tileShine[125] = 600;
            Game1.tileShine[109] = 9000;
            Game1.tileShine[110] = 9000;
            Game1.tileShine[116] = 9000;
            Game1.tileShine[117] = 9000;
            Game1.tileShine[118] = 8000;
            Game1.tileShine[107] = 950;
            Game1.tileShine[108] = 900;
            Game1.tileShine[111] = 850;
            Game1.tileShine[211] = 800;
            Game1.tileLighted[4] = true;
            Game1.tileLighted[17] = true;
            Game1.tileLighted[133] = true;
            Game1.tileLighted[31] = true;
            Game1.tileLighted[33] = true;
            Game1.tileLighted[34] = true;
            Game1.tileLighted[35] = true;
            Game1.tileLighted[37] = true;
            Game1.tileLighted[42] = true;
            Game1.tileLighted[49] = true;
            Game1.tileLighted[58] = true;
            Game1.tileLighted[61] = true;
            Game1.tileLighted[70] = true;
            Game1.tileLighted[71] = true;
            Game1.tileLighted[72] = true;
            Game1.tileLighted[76] = true;
            Game1.tileLighted[77] = true;
            Game1.tileLighted[19] = true;
            Game1.tileLighted[22] = true;
            Game1.tileLighted[26] = true;
            Game1.tileLighted[83] = true;
            Game1.tileLighted[84] = true;
            Game1.tileLighted[92] = true;
            Game1.tileLighted[93] = true;
            Game1.tileLighted[95] = true;
            Game1.tileLighted[98] = true;
            Game1.tileLighted[100] = true;
            Game1.tileLighted[109] = true;
            Game1.tileLighted[125] = true;
            Game1.tileLighted[126] = true;
            Game1.tileLighted[129] = true;
            Game1.tileLighted[140] = true;
            Game1.tileLighted[270] = true;
            Game1.tileLighted[271] = true;
            Game1.tileMergeDirt[1] = true;
            Game1.tileMergeDirt[6] = true;
            Game1.tileMergeDirt[7] = true;
            Game1.tileMergeDirt[8] = true;
            Game1.tileMergeDirt[9] = true;
            Game1.tileMergeDirt[166] = true;
            Game1.tileMergeDirt[167] = true;
            Game1.tileMergeDirt[168] = true;
            Game1.tileMergeDirt[169] = true;
            Game1.tileMergeDirt[22] = true;
            Game1.tileMergeDirt[25] = true;
            Game1.tileMergeDirt[30] = true;
            Game1.tileMergeDirt[37] = true;
            Game1.tileMergeDirt[38] = true;
            Game1.tileMergeDirt[40] = true;
            Game1.tileMergeDirt[53] = true;
            Game1.tileMergeDirt[56] = true;
            Game1.tileMergeDirt[107] = true;
            Game1.tileMergeDirt[108] = true;
            Game1.tileMergeDirt[111] = true;
            Game1.tileMergeDirt[112] = true;
            Game1.tileMergeDirt[116] = true;
            Game1.tileMergeDirt[117] = true;
            Game1.tileMergeDirt[123] = true;
            Game1.tileMergeDirt[140] = true;
            Game1.tileMergeDirt[39] = true;
            Game1.tileMergeDirt[122] = true;
            Game1.tileMergeDirt[121] = true;
            Game1.tileMergeDirt[120] = true;
            Game1.tileMergeDirt[119] = true;
            Game1.tileMergeDirt[118] = true;
            Game1.tileMergeDirt[47] = true;
            Game1.tileMergeDirt[46] = true;
            Game1.tileMergeDirt[45] = true;
            Game1.tileMergeDirt[44] = true;
            Game1.tileMergeDirt[43] = true;
            Game1.tileMergeDirt[41] = true;
            Game1.tileFrameImportant[380] = true;
            Game1.tileFrameImportant[201] = true;
            Game1.tileFrameImportant[3] = true;
            Game1.tileFrameImportant[4] = true;
            Game1.tileFrameImportant[5] = true;
            Game1.tileFrameImportant[10] = true;
            Game1.tileFrameImportant[11] = true;
            Game1.tileFrameImportant[12] = true;
            Game1.tileFrameImportant[13] = true;
            Game1.tileFrameImportant[14] = true;
            Game1.tileFrameImportant[15] = true;
            Game1.tileFrameImportant[16] = true;
            Game1.tileFrameImportant[17] = true;
            Game1.tileFrameImportant[18] = true;
            Game1.tileFrameImportant[19] = true;
            Game1.tileFrameImportant[20] = true;
            Game1.tileFrameImportant[21] = true;
            Game1.tileFrameImportant[24] = true;
            Game1.tileFrameImportant[26] = true;
            Game1.tileFrameImportant[27] = true;
            Game1.tileFrameImportant[28] = true;
            Game1.tileFrameImportant[29] = true;
            Game1.tileFrameImportant[31] = true;
            Game1.tileFrameImportant[33] = true;
            Game1.tileFrameImportant[34] = true;
            Game1.tileFrameImportant[35] = true;
            Game1.tileFrameImportant[42] = true;
            Game1.tileFrameImportant[50] = true;
            Game1.tileFrameImportant[55] = true;
            Game1.tileFrameImportant[61] = true;
            Game1.tileFrameImportant[71] = true;
            Game1.tileFrameImportant[72] = true;
            Game1.tileFrameImportant[73] = true;
            Game1.tileFrameImportant[74] = true;
            Game1.tileFrameImportant[77] = true;
            Game1.tileFrameImportant[78] = true;
            Game1.tileFrameImportant[79] = true;
            Game1.tileFrameImportant[81] = true;
            Game1.tileFrameImportant[82] = true;
            Game1.tileFrameImportant[83] = true;
            Game1.tileFrameImportant[84] = true;
            Game1.tileFrameImportant[85] = true;
            Game1.tileFrameImportant[86] = true;
            Game1.tileFrameImportant[87] = true;
            Game1.tileFrameImportant[88] = true;
            Game1.tileFrameImportant[89] = true;
            Game1.tileFrameImportant[90] = true;
            Game1.tileFrameImportant[91] = true;
            Game1.tileFrameImportant[92] = true;
            Game1.tileFrameImportant[93] = true;
            Game1.tileFrameImportant[94] = true;
            Game1.tileFrameImportant[95] = true;
            Game1.tileFrameImportant[96] = true;
            Game1.tileFrameImportant[97] = true;
            Game1.tileFrameImportant[98] = true;
            Game1.tileFrameImportant[99] = true;
            Game1.tileFrameImportant[101] = true;
            Game1.tileFrameImportant[102] = true;
            Game1.tileFrameImportant[103] = true;
            Game1.tileFrameImportant[104] = true;
            Game1.tileFrameImportant[105] = true;
            Game1.tileFrameImportant[100] = true;
            Game1.tileFrameImportant[106] = true;
            Game1.tileFrameImportant[110] = true;
            Game1.tileFrameImportant[113] = true;
            Game1.tileFrameImportant[114] = true;
            Game1.tileFrameImportant[125] = true;
            Game1.tileFrameImportant[287] = true;
            Game1.tileFrameImportant[126] = true;
            Game1.tileFrameImportant[128] = true;
            Game1.tileFrameImportant[129] = true;
            Game1.tileFrameImportant[132] = true;
            Game1.tileFrameImportant[133] = true;
            Game1.tileFrameImportant[134] = true;
            Game1.tileFrameImportant[135] = true;
            Game1.tileFrameImportant[172] = true;
            Game1.tileFrameImportant[319] = true;
            Game1.tileFrameImportant[323] = true;
            Game1.tileFrameImportant[335] = true;
            Game1.tileFrameImportant[337] = true;
            Game1.tileFrameImportant[349] = true;
            Game1.tileFrameImportant[376] = true;
            Game1.tileFrameImportant[378] = true;
            Game1.tileFrameImportant[141] = true;
            Game1.tileFrameImportant[270] = true;
            Game1.tileFrameImportant[271] = true;
            Game1.tileFrameImportant[314] = true;
            Game1.tileSolidTop[376] = true;
            Game1.tileTable[376] = true;
            Game1.tileTable[380] = true;
            Game1.tileCut[201] = true;
            Game1.tileCut[3] = true;
            Game1.tileCut[24] = true;
            Game1.tileCut[28] = true;
            Game1.tileCut[32] = true;
            Game1.tileCut[51] = true;
            Game1.tileCut[52] = true;
            Game1.tileCut[61] = true;
            Game1.tileCut[62] = true;
            Game1.tileCut[69] = true;
            Game1.tileCut[71] = true;
            Game1.tileCut[73] = true;
            Game1.tileCut[74] = true;
            Game1.tileCut[82] = true;
            Game1.tileCut[83] = true;
            Game1.tileCut[84] = true;
            Game1.tileCut[110] = true;
            Game1.tileCut[113] = true;
            Game1.tileCut[115] = true;
            Game1.tileCut[184] = true;
            Game1.tileCut[205] = true;
            Game1.tileCut[352] = true;
            Game1.tileCut[382] = true;
            Game1.tileAlch[82] = true;
            Game1.tileAlch[83] = true;
            Game1.tileAlch[84] = true;
            Game1.tileSolid[127] = true;
            Game1.tileSolid[130] = true;
            Game1.tileBlockLight[130] = true;
            Game1.tileBlockLight[131] = true;
            Game1.tileNoAttach[232] = true;
            Game1.tileSolid[107] = true;
            Game1.tileBlockLight[107] = true;
            Game1.tileSolid[108] = true;
            Game1.tileBlockLight[108] = true;
            Game1.tileSolid[111] = true;
            Game1.tileBlockLight[111] = true;
            Game1.tileSolid[109] = true;
            Game1.tileBlockLight[109] = true;
            Game1.tileSolid[110] = false;
            Game1.tileNoAttach[110] = true;
            Game1.tileNoFail[110] = true;
            Game1.tileSolid[112] = true;
            Game1.tileBlockLight[112] = true;
            Game1.tileSolid[116] = true;
            Game1.tileBlockLight[116] = true;
            Game1.tileBrick[117] = true;
            Game1.tileBrick[25] = true;
            Game1.tileBrick[203] = true;
            Game1.tileSolid[117] = true;
            Game1.tileBlockLight[117] = true;
            Game1.tileSolid[123] = true;
            Game1.tileBlockLight[123] = true;
            Game1.tileNoFail[165] = true;
            Game1.tileNoFail[184] = true;
            Game1.tileNoFail[185] = true;
            Game1.tileNoFail[186] = true;
            Game1.tileNoFail[187] = true;
            Game1.tileSolid[118] = true;
            Game1.tileBlockLight[118] = true;
            Game1.tileSolid[119] = true;
            Game1.tileBlockLight[119] = true;
            Game1.tileSolid[120] = true;
            Game1.tileBlockLight[120] = true;
            Game1.tileSolid[121] = true;
            Game1.tileBlockLight[121] = true;
            Game1.tileSolid[122] = true;
            Game1.tileBlockLight[122] = true;
            Game1.tileSolid[150] = true;
            Game1.tileBlockLight[150] = true;
            Game1.tileBlockLight[115] = true;
            Game1.tileSolid[199] = true;
            Game1.tileBlockLight[199] = true;
            Game1.tileNoFail[162] = true;
            Game1.tileSolid[0] = true;
            Game1.tileBlockLight[0] = true;
            Game1.tileSolid[1] = true;
            Game1.tileBlockLight[1] = true;
            Game1.tileSolid[2] = true;
            Game1.tileBlockLight[2] = true;
            Game1.tileSolid[3] = false;
            Game1.tileNoAttach[3] = true;
            Game1.tileNoFail[3] = true;
            Game1.tileNoFail[201] = true;
            Game1.tileSolid[4] = false;
            Game1.tileNoAttach[4] = true;
            Game1.tileNoFail[4] = true;
            Game1.tileNoFail[24] = true;
            Game1.tileSolid[5] = false;
            Game1.tileSolid[6] = true;
            Game1.tileBlockLight[6] = true;
            Game1.tileSolid[7] = true;
            Game1.tileBlockLight[7] = true;
            Game1.tileSolid[8] = true;
            Game1.tileBlockLight[8] = true;
            Game1.tileSolid[9] = true;
            Game1.tileBlockLight[9] = true;
            Game1.tileSolid[166] = true;
            Game1.tileBlockLight[166] = true;
            Game1.tileSolid[167] = true;
            Game1.tileBlockLight[167] = true;
            Game1.tileSolid[168] = true;
            Game1.tileBlockLight[168] = true;
            Game1.tileSolid[169] = true;
            Game1.tileBlockLight[169] = true;
            Game1.tileBlockLight[10] = true;
            Game1.tileSolid[10] = true;
            Game1.tileNoAttach[10] = true;
            Game1.tileBlockLight[10] = true;
            Game1.tileSolid[11] = false;
            Game1.tileSolidTop[19] = true;
            Game1.tileSolid[19] = true;
            Game1.tileSolid[22] = true;
            Game1.tileSolid[23] = true;
            Game1.tileSolid[25] = true;
            Game1.tileSolid[30] = true;
            Game1.tileNoFail[32] = true;
            Game1.tileBlockLight[32] = true;
            Game1.tileNoFail[352] = true;
            Game1.tileBlockLight[352] = true;
            Game1.tileSolid[37] = true;
            Game1.tileBlockLight[37] = true;
            Game1.tileSolid[38] = true;
            Game1.tileBlockLight[38] = true;
            Game1.tileSolid[39] = true;
            Game1.tileBlockLight[39] = true;
            Game1.tileSolid[40] = true;
            Game1.tileBlockLight[40] = true;
            Game1.tileSolid[41] = true;
            Game1.tileBlockLight[41] = true;
            Game1.tileSolid[43] = true;
            Game1.tileBlockLight[43] = true;
            Game1.tileSolid[44] = true;
            Game1.tileBlockLight[44] = true;
            Game1.tileSolid[45] = true;
            Game1.tileBlockLight[45] = true;
            Game1.tileSolid[46] = true;
            Game1.tileBlockLight[46] = true;
            Game1.tileSolid[47] = true;
            Game1.tileBlockLight[47] = true;
            Game1.tileSolid[48] = true;
            Game1.tileBlockLight[48] = true;
            Game1.tileSolid[53] = true;
            Game1.tileBlockLight[53] = true;
            Game1.tileSolid[54] = true;
            Game1.tileBlockLight[52] = true;
            Game1.tileBlockLight[205] = true;
            Game1.tileSolid[56] = true;
            Game1.tileBlockLight[56] = true;
            Game1.tileSolid[57] = true;
            Game1.tileBlockLight[57] = true;
            Game1.tileSolid[58] = true;
            Game1.tileBlockLight[58] = true;
            Game1.tileBlockLight[382] = true;
            Game1.tileSolid[59] = true;
            Game1.tileBlockLight[59] = true;
            Game1.tileSolid[60] = true;
            Game1.tileBlockLight[60] = true;
            Game1.tileSolid[63] = true;
            Game1.tileBlockLight[63] = true;
            Game1.tileStone[63] = true;
            Game1.tileStone[130] = true;
            Game1.tileSolid[64] = true;
            Game1.tileBlockLight[64] = true;
            Game1.tileStone[64] = true;
            Game1.tileSolid[65] = true;
            Game1.tileBlockLight[65] = true;
            Game1.tileStone[65] = true;
            Game1.tileSolid[66] = true;
            Game1.tileBlockLight[66] = true;
            Game1.tileStone[66] = true;
            Game1.tileSolid[67] = true;
            Game1.tileBlockLight[67] = true;
            Game1.tileStone[67] = true;
            Game1.tileSolid[68] = true;
            Game1.tileBlockLight[68] = true;
            Game1.tileStone[68] = true;
            Game1.tileSolid[75] = true;
            Game1.tileBlockLight[75] = true;
            Game1.tileSolid[76] = true;
            Game1.tileBlockLight[76] = true;
            Game1.tileSolid[70] = true;
            Game1.tileBlockLight[70] = true;
            Game1.tileNoFail[50] = true;
            Game1.tileNoAttach[50] = true;
            Game1.tileDungeon[41] = true;
            Game1.tileDungeon[43] = true;
            Game1.tileDungeon[44] = true;
            Game1.tileBlockLight[30] = true;
            Game1.tileBlockLight[25] = true;
            Game1.tileBlockLight[23] = true;
            Game1.tileBlockLight[22] = true;
            Game1.tileBlockLight[62] = true;
            Game1.tileSolidTop[18] = true;
            Game1.tileSolidTop[14] = true;
            Game1.tileSolidTop[16] = true;
            Game1.tileSolidTop[134] = true;
            Game1.tileSolidTop[114] = true;
            Game1.tileNoAttach[20] = true;
            Game1.tileNoAttach[19] = true;
            Game1.tileNoAttach[13] = true;
            Game1.tileNoAttach[14] = true;
            Game1.tileNoAttach[15] = true;
            Game1.tileNoAttach[16] = true;
            Game1.tileNoAttach[134] = true;
            Game1.tileNoAttach[17] = true;
            Game1.tileNoAttach[18] = true;
            Game1.tileNoAttach[19] = true;
            Game1.tileNoAttach[21] = true;
            Game1.tileNoAttach[27] = true;
            Game1.tileNoAttach[114] = true;
            Game1.tileTable[14] = true;
            Game1.tileTable[18] = true;
            Game1.tileTable[19] = true;
            Game1.tileTable[114] = true;
            Game1.tileNoAttach[86] = true;
            Game1.tileNoAttach[87] = true;
            Game1.tileNoAttach[88] = true;
            Game1.tileNoAttach[89] = true;
            Game1.tileNoAttach[90] = true;
            Game1.tileTable[101] = true;
            Game1.tileNoAttach[101] = true;
            Game1.tileNoAttach[102] = true;
            Game1.tileNoAttach[94] = true;
            Game1.tileNoAttach[95] = true;
            Game1.tileNoAttach[96] = true;
            Game1.tileNoAttach[97] = true;
            Game1.tileNoAttach[98] = true;
            Game1.tileNoAttach[99] = true;
            Game1.tileTable[87] = true;
            Game1.tileTable[88] = true;
            Game1.tileSolidTop[87] = true;
            Game1.tileSolidTop[88] = true;
            Game1.tileSolidTop[101] = true;
            Game1.tileNoAttach[91] = true;
            Game1.tileNoAttach[92] = true;
            Game1.tileNoAttach[93] = true;
            Game1.tileLighted[190] = true;
            Game1.tileBlockLight[192] = true;
            Game1.tileBrick[192] = false;
            Game1.tileWaterDeath[215] = true;
            Game1.tileWaterDeath[4] = true;
            Game1.tileWaterDeath[51] = true;
            Game1.tileWaterDeath[93] = true;
            Game1.tileWaterDeath[98] = true;
            Game1.tileLavaDeath[3] = true;
            Game1.tileLavaDeath[5] = true;
            Game1.tileLavaDeath[10] = true;
            Game1.tileLavaDeath[11] = true;
            Game1.tileLavaDeath[12] = true;
            Game1.tileLavaDeath[13] = true;
            Game1.tileLavaDeath[14] = true;
            Game1.tileLavaDeath[15] = true;
            Game1.tileLavaDeath[16] = true;
            Game1.tileLavaDeath[17] = true;
            Game1.tileLavaDeath[18] = true;
            Game1.tileLavaDeath[19] = true;
            Game1.tileLavaDeath[20] = true;
            Game1.tileLavaDeath[24] = true;
            Game1.tileLavaDeath[27] = true;
            Game1.tileLavaDeath[28] = true;
            Game1.tileLavaDeath[29] = true;
            Game1.tileLavaDeath[32] = true;
            Game1.tileLavaDeath[33] = true;
            Game1.tileLavaDeath[34] = true;
            Game1.tileLavaDeath[35] = true;
            Game1.tileLavaDeath[36] = true;
            Game1.tileLavaDeath[42] = true;
            Game1.tileLavaDeath[49] = true;
            Game1.tileLavaDeath[50] = true;
            Game1.tileLavaDeath[51] = true;
            Game1.tileLavaDeath[52] = true;
            Game1.tileLavaDeath[55] = true;
            Game1.tileLavaDeath[61] = true;
            Game1.tileLavaDeath[62] = true;
            Game1.tileLavaDeath[69] = true;
            Game1.tileLavaDeath[71] = true;
            Game1.tileLavaDeath[72] = true;
            Game1.tileLavaDeath[73] = true;
            Game1.tileLavaDeath[74] = true;
            Game1.tileLavaDeath[79] = true;
            Game1.tileLavaDeath[80] = true;
            Game1.tileLavaDeath[81] = true;
            Game1.tileLavaDeath[86] = true;
            Game1.tileLavaDeath[87] = true;
            Game1.tileLavaDeath[88] = true;
            Game1.tileLavaDeath[89] = true;
            Game1.tileLavaDeath[90] = true;
            Game1.tileLavaDeath[91] = true;
            Game1.tileLavaDeath[92] = true;
            Game1.tileLavaDeath[93] = true;
            Game1.tileLavaDeath[94] = true;
            Game1.tileLavaDeath[95] = true;
            Game1.tileLavaDeath[96] = true;
            Game1.tileLavaDeath[97] = true;
            Game1.tileLavaDeath[98] = true;
            Game1.tileLavaDeath[100] = true;
            Game1.tileLavaDeath[101] = true;
            Game1.tileLavaDeath[102] = true;
            Game1.tileLavaDeath[103] = true;
            Game1.tileLavaDeath[104] = true;
            Game1.tileLavaDeath[106] = true;
            Game1.tileLavaDeath[110] = true;
            Game1.tileLavaDeath[113] = true;
            Game1.tileLavaDeath[115] = true;
            Game1.tileLavaDeath[125] = true;
            Game1.tileLavaDeath[126] = true;
            Game1.tileLavaDeath[128] = true;
            Game1.tileLavaDeath[149] = true;
            Game1.tileLavaDeath[172] = true;
            Game1.tileLavaDeath[173] = true;
            Game1.tileLavaDeath[174] = true;
            Game1.tileLavaDeath[184] = true;
            Game1.tileLavaDeath[201] = true;
            Game1.tileLavaDeath[205] = true;
            Game1.tileLavaDeath[201] = true;
            Game1.tileLavaDeath[209] = true;
            Game1.tileLavaDeath[210] = true;
            Game1.tileLavaDeath[212] = true;
            Game1.tileLavaDeath[213] = true;
            Game1.tileLavaDeath[353] = true;
            Game1.tileLavaDeath[214] = true;
            Game1.tileLavaDeath[215] = true;
            Game1.tileLavaDeath[216] = true;
            Game1.tileLavaDeath[217] = true;
            Game1.tileLavaDeath[218] = true;
            Game1.tileLavaDeath[219] = true;
            Game1.tileLavaDeath[220] = true;
            Game1.tileLavaDeath[227] = true;
            Game1.tileLavaDeath[228] = true;
            Game1.tileLavaDeath[233] = true;
            Game1.tileLavaDeath[236] = true;
            Game1.tileLavaDeath[238] = true;
            Game1.tileLavaDeath[240] = true;
            Game1.tileLavaDeath[241] = true;
            Game1.tileLavaDeath[242] = true;
            Game1.tileLavaDeath[243] = true;
            Game1.tileLavaDeath[244] = true;
            Game1.tileLavaDeath[245] = true;
            Game1.tileLavaDeath[246] = true;
            Game1.tileLavaDeath[247] = true;
            Game1.tileLavaDeath[254] = true;
            Game1.tileLavaDeath[269] = true;
            Game1.tileLavaDeath[270] = true;
            Game1.tileLavaDeath[271] = true;
            Game1.tileLavaDeath[275] = true;
            Game1.tileLavaDeath[413] = true;
            Game1.tileLavaDeath[276] = true;
            Game1.tileLavaDeath[277] = true;
            Game1.tileLavaDeath[278] = true;
            Game1.tileLavaDeath[279] = true;
            Game1.tileLavaDeath[280] = true;
            Game1.tileLavaDeath[281] = true;
            Game1.tileLavaDeath[282] = true;
            Game1.tileLavaDeath[283] = true;
            Game1.tileLavaDeath[285] = true;
            Game1.tileLavaDeath[286] = true;
            Game1.tileLavaDeath[287] = true;
            Game1.tileLavaDeath[288] = true;
            Game1.tileLavaDeath[289] = true;
            Game1.tileLavaDeath[290] = true;
            Game1.tileLavaDeath[291] = true;
            Game1.tileLavaDeath[292] = true;
            Game1.tileLavaDeath[293] = true;
            Game1.tileLavaDeath[294] = true;
            Game1.tileLavaDeath[295] = true;
            Game1.tileLavaDeath[296] = true;
            Game1.tileLavaDeath[297] = true;
            Game1.tileLavaDeath[298] = true;
            Game1.tileLavaDeath[299] = true;
            Game1.tileLavaDeath[300] = true;
            Game1.tileLavaDeath[301] = true;
            Game1.tileLavaDeath[302] = true;
            Game1.tileLavaDeath[303] = true;
            Game1.tileLavaDeath[304] = true;
            Game1.tileLavaDeath[305] = true;
            Game1.tileLavaDeath[306] = true;
            Game1.tileLavaDeath[307] = true;
            Game1.tileLavaDeath[308] = true;
            Game1.tileLavaDeath[309] = true;
            Game1.tileLavaDeath[310] = true;
            Game1.tileLavaDeath[316] = true;
            Game1.tileLavaDeath[317] = true;
            Game1.tileLavaDeath[318] = true;
            Game1.tileLavaDeath[319] = true;
            Game1.tileLavaDeath[354] = true;
            Game1.tileLavaDeath[355] = true;
            Game1.tileLavaDeath[323] = true;
            Game1.tileLavaDeath[335] = true;
            Game1.tileLavaDeath[338] = true;
            Game1.tileLavaDeath[339] = true;
            Game1.tileLavaDeath[352] = true;
            Game1.tileLavaDeath[382] = true;
            Game1.tileLighted[316] = true;
            Game1.tileLighted[317] = true;
            Game1.tileLighted[318] = true;
            for (int num4 = 0; num4 < 419; num4++)
            {
                if (Game1.tileLavaDeath[num4])
                {
                    Game1.tileObsidianKill[num4] = true;
                }
            }
            Game1.tileObsidianKill[77] = true;
            Game1.tileObsidianKill[78] = true;
            Game1.tileObsidianKill[82] = true;
            Game1.tileObsidianKill[83] = true;
            Game1.tileObsidianKill[84] = true;
            Game1.tileObsidianKill[85] = true;
            Game1.tileObsidianKill[105] = true;
            Game1.tileObsidianKill[129] = true;
            Game1.tileObsidianKill[132] = true;
            Game1.tileObsidianKill[133] = true;
            Game1.tileObsidianKill[134] = true;
            Game1.tileObsidianKill[135] = true;
            Game1.tileObsidianKill[136] = true;
            Game1.tileObsidianKill[139] = true;
            Game1.tileObsidianKill[165] = true;
            Game1.tileObsidianKill[178] = true;
            Game1.tileObsidianKill[185] = true;
            Game1.tileObsidianKill[186] = true;
            Game1.tileObsidianKill[187] = true;
            Game1.tileObsidianKill[231] = true;
            Game1.tileObsidianKill[337] = true;
            Game1.tileObsidianKill[349] = true;
            Game1.tileSolid[384] = true;
            Game1.tileBlockLight[384] = true;
            Game1.tileNoFail[384] = true;
            Game1.tileFrameImportant[395] = true;
            Game1.tileLavaDeath[395] = true;
            Game1.tileFrameImportant[405] = true;
            Game1.tileLavaDeath[405] = true;
            Game1.tileSolidTop[405] = true;
            Game1.tileTable[405] = true;
            Game1.tileLighted[405] = true;
            Game1.tileWaterDeath[405] = true;
            Game1.tileFrameImportant[406] = true;
            Game1.tileLavaDeath[406] = true;
            Game1.tileFrameImportant[411] = true;
            Game1.tileLavaDeath[411] = true;
            Game1.tileFrameImportant[412] = true;
            for (int num5 = 0; num5 < 225; num5++)
            {
                if (num5 == 20)
                {
                    Game1.wallBlend[num5] = 14;
                }
                else if (num5 == 19)
                {
                    Game1.wallBlend[num5] = 9;
                }
                else if (num5 == 18)
                {
                    Game1.wallBlend[num5] = 8;
                }
                else if (num5 == 17)
                {
                    Game1.wallBlend[num5] = 7;
                }
                else if (num5 == 16 || num5 == 59)
                {
                    Game1.wallBlend[num5] = 2;
                }
                else if (num5 == 1 || (num5 >= 48 && num5 <= 53))
                {
                    Game1.wallBlend[num5] = 1;
                }
                else
                {
                    Game1.wallBlend[num5] = num5;
                }
            }
            Game1.wallBlend[65] = 63;
            Game1.wallBlend[66] = 63;
            Game1.wallBlend[68] = 63;
            Game1.wallBlend[67] = 64;
            Game1.wallBlend[80] = 74;
            Game1.wallBlend[81] = 77;
            Game1.wallBlend[94] = 7;
            Game1.wallBlend[95] = 7;
            Game1.wallBlend[100] = 7;
            Game1.wallBlend[101] = 7;
            Game1.wallBlend[96] = 8;
            Game1.wallBlend[97] = 8;
            Game1.wallBlend[102] = 8;
            Game1.wallBlend[103] = 8;
            Game1.wallBlend[98] = 9;
            Game1.wallBlend[99] = 9;
            Game1.wallBlend[104] = 9;
            Game1.wallBlend[105] = 9;
            Game1.tileNoFail[24] = true;
            Game1.tileNoFail[3] = true;
            Game1.tileNoFail[52] = true;
            Game1.tileNoFail[62] = true;
            Game1.tileNoFail[32] = true;
            Game1.tileNoFail[61] = true;
            Game1.tileNoFail[69] = true;
            Game1.tileNoFail[73] = true;
            Game1.tileNoFail[74] = true;
            Game1.tileNoFail[82] = true;
            Game1.tileNoFail[83] = true;
            Game1.tileNoFail[84] = true;
            Game1.tileNoFail[110] = true;
            Game1.tileNoFail[113] = true;
            Game1.tileNoFail[115] = true;
            Game1.tileNoFail[165] = true;
            Game1.tileNoFail[184] = true;
            Game1.tileNoFail[201] = true;
            Game1.tileNoFail[205] = true;
            Game1.tileNoFail[227] = true;
            Game1.tileNoFail[233] = true;
            Game1.tileNoFail[352] = true;
            Game1.tileNoFail[382] = true;
            Game1.tileFrameImportant[387] = true;
            Game1.tileSolid[387] = true;
            Game1.tileBlockLight[387] = true;
            Game1.tileNoAttach[387] = true;
            Game1.tileLavaDeath[387] = true;
            Game1.tileFrameImportant[386] = true;
            Game1.tileLavaDeath[386] = true;
            Game1.tileNoSunLight[386] = true;
            Game1.tileFrameImportant[388] = true;
            Game1.tileSolid[388] = true;
            Game1.tileBlockLight[388] = true;
            Game1.tileNoAttach[388] = true;
            Game1.tileLavaDeath[388] = true;
            Game1.tileFrameImportant[389] = true;
            Game1.tileLavaDeath[389] = true;
            Game1.tileNoSunLight[389] = true;
            for (int num6 = 0; num6 < 419; num6++)
            {
                if (Game1.tileSolid[num6])
                {
                    Game1.tileNoSunLight[num6] = true;
                }
                Game1.tileFrame[num6] = 0;
                Game1.tileFrameCounter[num6] = 0;
            }
            Game1.tileNoSunLight[379] = false;
            Game1.tileNoSunLight[54] = false;
            Game1.tileNoSunLight[328] = false;
            Game1.tileNoSunLight[19] = false;
            Game1.tileNoSunLight[11] = true;
            Game1.tileNoSunLight[189] = false;
            Game1.tileNoSunLight[196] = false;
            for (int num7 = 0; num7 < Game1.maxMenuItems; num7++)
            {
                this.menuItemScale[num7] = 0.8f;
            }
            for (int num8 = 0; num8 < 6001; num8++)
            {
                Game1.dust[num8] = new Dust();
            }
            for (int num9 = 0; num9 < 401; num9++)
            {
                Game1.item[num9] = new Item();
            }
            for (int num10 = 0; num10 < 201; num10++)
            {
                Game1.npc[num10] = new NPC();
                Game1.npc[num10].whoAmI = num10;
            }
            for (int num11 = 0; num11 < 256; num11++)
            {
                Game1.player[num11] = new Player();
            }
            for (int num12 = 0; num12 < 1001; num12++)
            {
                Game1.projectile[num12] = new Projectile();
            }
            for (int num13 = 0; num13 < 501; num13++)
            {
                Game1.gore[num13] = new Gore();
            }
            for (int num14 = 0; num14 < Game1.maxRain + 1; num14++)
            {
                Game1.rain[num14] = new Rain();
            }
            for (int num15 = 0; num15 < 200; num15++)
            {
                Game1.cloud[num15] = new Cloud();
            }
            for (int num16 = 0; num16 < 100; num16++)
            {
                Game1.combatText[num16] = new CombatText();
            }
            for (int num17 = 0; num17 < 20; num17++)
            {
                Game1.itemText[num17] = new ItemText();
            }
            #endregion
            int num18 = 0;
            while (num18 < 3601)
            {
                Item item = new Item();
                item.SetDefaults(num18, false);
                Game1.itemName[num18] = item.name;
                if (item.headSlot > 0)
                {
                    Item.headType[item.headSlot] = item.itemId;
                }
                if (item.bodySlot > 0)
                {
                    Item.bodyType[item.bodySlot] = item.itemId;
                }
                if (item.legSlot > 0)
                {
                    Item.legType[item.legSlot] = item.itemId;
                }
                int type = item.itemId;
                if (type <= 1827)
                {
                    if (type <= 788)
                    {
                        if (type <= 723)
                        {
                            if (type == 683 || type == 723)
                            {
                                goto IL_59BF;
                            }
                        }
                        else
                        {
                            if (type == 726)
                            {
                                goto IL_59BF;
                            }
                            switch (type)
                            {
                                case 739:
                                case 740:
                                case 741:
                                case 742:
                                case 743:
                                case 744:
                                    goto IL_59BF;
                                default:
                                    if (type == 788)
                                    {
                                        goto IL_59BF;
                                    }
                                    break;
                            }
                        }
                    }
                    else if (type <= 1326)
                    {
                        if (type == 1308 || type == 1326)
                        {
                            goto IL_59BF;
                        }
                    }
                    else
                    {
                        switch (type)
                        {
                            case 1444:
                            case 1445:
                            case 1446:
                                goto IL_59BF;
                            default:
                                if (type == 1801)
                                {
                                    goto IL_59BF;
                                }
                                if (type == 1827)
                                {
                                    goto IL_59CF;
                                }
                                break;
                        }
                    }
                }
                else if (type <= 3051)
                {
                    if (type <= 2188)
                    {
                        switch (type)
                        {
                            case 1930:
                            case 1931:
                                goto IL_59BF;
                            default:
                                if (type == 2188)
                                {
                                    goto IL_59BF;
                                }
                                break;
                        }
                    }
                    else if (type == 2750 || type == 3006 || type == 3051)
                    {
                        goto IL_59BF;
                    }
                }
                else if (type <= 3245)
                {
                    switch (type)
                    {
                        case 3209:
                        case 3210:
                            goto IL_59BF;
                        default:
                            if (type == 3245)
                            {
                                goto IL_59CF;
                            }
                            break;
                    }
                }
                else
                {
                    if (type == 3377 || type == 3476)
                    {
                        goto IL_59BF;
                    }
                    switch (type)
                    {
                        case 3569:
                        case 3571:
                            goto IL_59BF;
                    }
                }
            IL_59DD:
                num18++;
                continue;
            IL_59BF:
                Item.staff[item.itemId] = true;
                goto IL_59DD;
            IL_59CF:
                Item.claw[item.itemId] = true;
                goto IL_59DD;
            }
            Game1.InitLifeBytes();
            for (int num19 = 0; num19 < Recipe.maxRecipes; num19++)
            {
                Game1.recipe[num19] = new Recipe();
                Game1.availableRecipeY[num19] = (float)(65 * num19);
            }
            Recipe.SetupRecipes();
            for (int num20 = 0; num20 < Game1.numChatLines; num20++)
            {
                Game1.chatLine[num20] = new ChatLine();
            }
            for (int num21 = 0; num21 < Liquid.resLiquid; num21++)
            {
                Game1.liquid[num21] = new Liquid();
            }
            for (int num22 = 0; num22 < 10000; num22++)
            {
                Game1.liquidBuffer[num22] = new LiquidBuffer();
            }
            this.waterfallManager = new WaterfallManager();
            Lighting.LightingThreads = 0;
            this.shop[0] = new Chest(false);
            Chest.SetupTravelShop();
            for (int num23 = 1; num23 < Game1.numShops; num23++)
            {
                this.shop[num23] = new Chest(false);
                this.shop[num23].SetupShop(num23);
            }
            Game1.teamColor[0] = Microsoft.Xna.Framework.Color.White;
            Game1.teamColor[1] = new Microsoft.Xna.Framework.Color(218, 59, 59);
            Game1.teamColor[2] = new Microsoft.Xna.Framework.Color(59, 218, 85);
            Game1.teamColor[3] = new Microsoft.Xna.Framework.Color(59, 149, 218);
            Game1.teamColor[4] = new Microsoft.Xna.Framework.Color(242, 221, 100);
            Game1.teamColor[5] = new Microsoft.Xna.Framework.Color(224, 100, 242);
            if (Game1.menuMode == 1)
            {
                Game1.LoadPlayers();
            }
            for (int num24 = 1; num24 < 651; num24++)
            {
                Projectile projectile = new Projectile();
                projectile.SetDefaults(num24);
                if (projectile.hostile)
                {
                    Game1.projHostile[num24] = true;
                }
                if (projectile.aiStyle == 7)
                {
                    Game1.projHook[num24] = true;
                }
            }
            Netplay.Initialize();
            NetworkInitializer.Load();
            if (Game1.skipMenu)
            {
                WorldGen.clearWorld();
                Game1.gameMenu = false;
                Game1.LoadPlayers();
                Game1.PlayerList[0].SetAsActive();
                Game1.LoadWorlds();
                WorldGen.generateWorld(-1, null);
                WorldGen.EveryTileFrame();
                Game1.player[Game1.myPlayer].Spawn();
                Game1.ActivePlayerFileData.StartPlayTimer();
                Player.EnterWorld(Game1.player[Game1.myPlayer]);
            }
            else
            {
                IntPtr systemMenu = Game1.GetSystemMenu(base.Window.Handle, false);
                int menuItemCount = Game1.GetMenuItemCount(systemMenu);
                Game1.RemoveMenu(systemMenu, menuItemCount - 1, 1024);
            }
            if (Game1.dedServ)
            {
                return;
            }
            Game1.clientUUID = Guid.NewGuid().ToString();
            keyBoardInput.newKeyEvent += delegate (char keyStroke)
            {
                if (Game1.keyCount < 10)
                {
                    Game1.keyInt[Game1.keyCount] = (int)keyStroke;
                    Game1.keyString[Game1.keyCount] = string.Concat(keyStroke);
                    Game1.keyCount++;
                }
            };
            base.Initialize();
            base.Window.AllowUserResizing = true;
            this.OpenSettings();
            if (Game1.screenWidth > GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width)
            {
                Game1.screenWidth = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width;
            }
            if (Game1.screenHeight > GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height)
            {
                Game1.screenHeight = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height;
            }

            Game1.graphics.ApplyChanges();

            this.CheckBunny();
            if (Lang.lang > 1)
            {
                Lang.setLang(true);
            }

            Lang.setLang(false);
            if (Lang.lang == 0)
            {
                Game1.menuMode = 1212;
            }

            this.SetTitle();
            this.OpenRecent();
            Star.SpawnStars();
            WorldGen.RandomizeWeather();
            this._achievements = new AchievementManager();
            AchievementInitializer.Load();
            DyeInitializer.Load();
            ScreenEffectInitializer.Load();
            ChatInitializer.Load();
            AchievementCompleteUI.Initialize();
            foreach (DisplayMode current in GraphicsAdapter.DefaultAdapter.SupportedDisplayModes)
            {
                if (current.Width >= Game1.minScreenW && current.Height >= Game1.minScreenH
                    && current.Width <= Game1.maxScreenW && current.Height <= Game1.maxScreenH)
                {
                    bool flag = true;
                    for (int num25 = 0; num25 < Game1.numDisplayModes; num25++)
                    {
                        if (current.Width == Game1.displayWidth[num25]
                            && current.Height == Game1.displayHeight[num25])
                        {
                            flag = false;
                            break;
                        }
                    }
                    if (flag)
                    {
                        Game1.displayHeight[Game1.numDisplayModes] = current.Height;
                        Game1.displayWidth[Game1.numDisplayModes] = current.Width;
                        Game1.numDisplayModes++;
                    }
                }
            }
            if (Game1.autoJoin)
            {
                Game1.LoadPlayers();
                Game1.menuMode = 1;
                Game1.menuMultiplayer = true;
            }
            Game1.fpsTimer.Start();
            Game1.updateTimer.Start();

        }//Initialize


        // LoadContent
        protected override void LoadContent()
        {
            TextureManager.Initialize();
            db = new DB();
            try
            {
                this.mapSectionTexture = new RenderTarget2D(base.GraphicsDevice, 200, 150);

                try
                {
                    //Game1.pixelShader = base.Content.Load<Effect>("PixelShader");
                }
                catch { }

                try
                {
                    //Game1.tileShader = base.Content.Load<Effect>("TileShader");
                }
                catch { }

                try
                {
                    //Game1.screenShader = base.Content.Load<Effect>("ScreenShader");
                }
                catch { }

                Game1.engine = new AudioEngine("Content" + Path.DirectorySeparatorChar + "TerrariaMusic.xgs");
                Game1.soundBank = new SoundBank(Game1.engine, "Content" + Path.DirectorySeparatorChar + "Sound Bank.xsb");

                try
                {
                    Game1.waveBank = new WaveBank(Game1.engine, "Content" + Path.DirectorySeparatorChar + "Wave Bank.xwb");
                }
                catch { }

                for (int i = 1; i < 40; i++)
                {
                    Game1.music[i] = Game1.soundBank.GetCue("Music_" + i);
                }
                Game1.soundMech[0] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Mech_0");
                Game1.soundInstanceMech[0] = Game1.soundMech[0].CreateInstance();
                Game1.soundGrab = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Grab");
                Game1.soundInstanceGrab = Game1.soundGrab.CreateInstance();
                Game1.soundPixie = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Pixie");
                Game1.soundInstancePixie = Game1.soundGrab.CreateInstance();
                Game1.soundDig[0] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Dig_0");
                Game1.soundInstanceDig[0] = Game1.soundDig[0].CreateInstance();
                Game1.soundDig[1] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Dig_1");
                Game1.soundInstanceDig[1] = Game1.soundDig[1].CreateInstance();
                Game1.soundDig[2] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Dig_2");
                Game1.soundInstanceDig[2] = Game1.soundDig[2].CreateInstance();
                Game1.soundTink[0] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Tink_0");
                Game1.soundInstanceTink[0] = Game1.soundTink[0].CreateInstance();
                Game1.soundTink[1] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Tink_1");
                Game1.soundInstanceTink[1] = Game1.soundTink[1].CreateInstance();
                Game1.soundTink[2] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Tink_2");
                Game1.soundInstanceTink[2] = Game1.soundTink[2].CreateInstance();
                Game1.soundPlayerHit[0] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Player_Hit_0");
                Game1.soundInstancePlayerHit[0] = Game1.soundPlayerHit[0].CreateInstance();
                Game1.soundPlayerHit[1] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Player_Hit_1");
                Game1.soundInstancePlayerHit[1] = Game1.soundPlayerHit[1].CreateInstance();
                Game1.soundPlayerHit[2] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Player_Hit_2");
                Game1.soundInstancePlayerHit[2] = Game1.soundPlayerHit[2].CreateInstance();
                Game1.soundFemaleHit[0] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Female_Hit_0");
                Game1.soundInstanceFemaleHit[0] = Game1.soundFemaleHit[0].CreateInstance();
                Game1.soundFemaleHit[1] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Female_Hit_1");
                Game1.soundInstanceFemaleHit[1] = Game1.soundFemaleHit[1].CreateInstance();
                Game1.soundFemaleHit[2] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Female_Hit_2");
                Game1.soundInstanceFemaleHit[2] = Game1.soundFemaleHit[2].CreateInstance();
                Game1.soundPlayerKilled = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Player_Killed");
                Game1.soundInstancePlayerKilled = Game1.soundPlayerKilled.CreateInstance();
                Game1.soundChat = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Chat");
                Game1.soundInstanceChat = Game1.soundChat.CreateInstance();
                Game1.soundGrass = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Grass");
                Game1.soundInstanceGrass = Game1.soundGrass.CreateInstance();
                Game1.soundDoorOpen = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Door_Opened");
                Game1.soundInstanceDoorOpen = Game1.soundDoorOpen.CreateInstance();
                Game1.soundDoorClosed = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Door_Closed");
                Game1.soundInstanceDoorClosed = Game1.soundDoorClosed.CreateInstance();
                Game1.soundMenuTick = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Menu_Tick");
                Game1.soundInstanceMenuTick = Game1.soundMenuTick.CreateInstance();
                Game1.soundMenuOpen = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Menu_Open");
                Game1.soundInstanceMenuOpen = Game1.soundMenuOpen.CreateInstance();
                Game1.soundMenuClose = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Menu_Close");
                Game1.soundInstanceMenuClose = Game1.soundMenuClose.CreateInstance();
                Game1.soundShatter = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Shatter");
                Game1.soundInstanceShatter = Game1.soundShatter.CreateInstance();
                Game1.soundCamera = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Camera");
                Game1.soundInstanceCamera = Game1.soundShatter.CreateInstance();
                for (int j = 0; j < Game1.soundCoin.Length; j++)
                {
                    Game1.soundCoin[j] = base.Content.Load<SoundEffect>(string.Concat(new object[]
                    {
                        "Sounds",
                        Path.DirectorySeparatorChar,
                        "Coin_",
                        j
                    }));
                    Game1.soundInstanceCoin[j] = Game1.soundCoin[j].CreateInstance();
                }
                for (int k = 0; k < Game1.soundDrip.Length; k++)
                {
                    Game1.soundDrip[k] = base.Content.Load<SoundEffect>(string.Concat(new object[]
                    {
                        "Sounds",
                        Path.DirectorySeparatorChar,
                        "Drip_",
                        k
                    }));
                    Game1.soundInstanceDrip[k] = Game1.soundDrip[k].CreateInstance();
                }
                for (int l = 0; l < Game1.soundZombie.Length; l++)
                {
                    Game1.soundZombie[l] = base.Content.Load<SoundEffect>(string.Concat(new object[]
                    {
                        "Sounds",
                        Path.DirectorySeparatorChar,
                        "Zombie_",
                        l
                    }));
                    Game1.soundInstanceZombie[l] = Game1.soundZombie[l].CreateInstance();
                }
                for (int m = 0; m < Game1.soundLiquid.Length; m++)
                {
                    Game1.soundLiquid[m] = base.Content.Load<SoundEffect>(string.Concat(new object[]
                    {
                        "Sounds",
                        Path.DirectorySeparatorChar,
                        "Liquid_",
                        m
                    }));
                    Game1.soundInstanceLiquid[m] = Game1.soundLiquid[m].CreateInstance();
                }
                for (int n = 0; n < Game1.soundRoar.Length; n++)
                {
                    Game1.soundRoar[n] = base.Content.Load<SoundEffect>(string.Concat(new object[]
                    {
                        "Sounds",
                        Path.DirectorySeparatorChar,
                        "Roar_",
                        n
                    }));
                    Game1.soundInstanceRoar[n] = Game1.soundRoar[n].CreateInstance();
                }
                Game1.soundSplash[0] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Splash_0");
                Game1.soundInstanceSplash[0] = Game1.soundRoar[0].CreateInstance();
                Game1.soundSplash[1] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Splash_1");
                Game1.soundInstanceSplash[1] = Game1.soundSplash[1].CreateInstance();
                Game1.soundDoubleJump = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Double_Jump");
                Game1.soundInstanceDoubleJump = Game1.soundRoar[0].CreateInstance();
                Game1.soundRun = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Run");
                Game1.soundInstanceRun = Game1.soundRun.CreateInstance();
                Game1.soundCoins = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Coins");
                Game1.soundInstanceCoins = Game1.soundCoins.CreateInstance();
                Game1.soundUnlock = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Unlock");
                Game1.soundInstanceUnlock = Game1.soundUnlock.CreateInstance();
                Game1.soundMaxMana = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "MaxMana");
                Game1.soundInstanceMaxMana = Game1.soundMaxMana.CreateInstance();
                Game1.soundDrown = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Drown");
                Game1.soundInstanceDrown = Game1.soundDrown.CreateInstance();
                for (int num = 1; num < 126; num++)
                {
                    Game1.soundItem[num] = base.Content.Load<SoundEffect>(string.Concat(new object[]
                    {
                        "Sounds",
                        Path.DirectorySeparatorChar,
                        "Item_",
                        num
                    }));
                    Game1.soundInstanceItem[num] = Game1.soundItem[num].CreateInstance();
                }
                for (int num2 = 1; num2 < 58; num2++)
                {
                    Game1.soundNPCHit[num2] = base.Content.Load<SoundEffect>(string.Concat(new object[]
                    {
                        "Sounds",
                        Path.DirectorySeparatorChar,
                        "NPC_Hit_",
                        num2
                    }));
                    Game1.soundInstanceNPCHit[num2] = Game1.soundNPCHit[num2].CreateInstance();
                }
                for (int num3 = 1; num3 < 63; num3++)
                {
                    Game1.soundNPCKilled[num3] = base.Content.Load<SoundEffect>(string.Concat(new object[]
                    {
                        "Sounds",
                        Path.DirectorySeparatorChar,
                        "NPC_Killed_",
                        num3
                    }));
                    Game1.soundInstanceNPCKilled[num3] = Game1.soundNPCKilled[num3].CreateInstance();
                }
                Game1.soundInstanceMoonlordCry = Game1.soundNPCKilled[10].CreateInstance();
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);

                Game1.musicVolume = 0f;
                Game1.soundVolume = 0f;
            }
            Game1.tileCrackTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "TileCracks");
            Game1.chestStackTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "ChestStack_0");
            Game1.chestStackTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "ChestStack_1");
            Game1.smartDigTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "SmartDig");
            this.iceBarrierTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "IceBarrier");
            Game1.frozenTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Frozen");
            for (int num4 = 0; num4 < Game1.PVPTexture.Length; num4++)
            {
                Game1.PVPTexture[num4] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "UI",
                    Path.DirectorySeparatorChar,
                    "PVP_",
                    num4
                }));
            }
            for (int num5 = 0; num5 < Game1.EquipPageTexture.Length; num5++)
            {
                Game1.EquipPageTexture[num5] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "UI",
                    Path.DirectorySeparatorChar,
                    "DisplaySlots_",
                    num5
                }));
            }
            for (int num6 = 0; num6 < Game1.craftToggleTexture.Length; num6++)
            {
                Game1.craftToggleTexture[num6] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "UI",
                    Path.DirectorySeparatorChar,
                    "Craft_Toggle_",
                    num6
                }));
            }
            for (int num7 = 0; num7 < this.infoIconTexture.Length; num7++)
            {
                this.infoIconTexture[num7] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "UI",
                    Path.DirectorySeparatorChar,
                    "InfoIcon_",
                    num7
                }));
            }
            for (int num8 = 0; num8 < Game1.reforgeTexture.Length; num8++)
            {
                Game1.reforgeTexture[num8] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "UI",
                    Path.DirectorySeparatorChar,
                    "Reforge_",
                    num8
                }));
            }
            for (int num9 = 0; num9 < Game1.cameraTexture.Length; num9++)
            {
                Game1.cameraTexture[num9] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "UI",
                    Path.DirectorySeparatorChar,
                    "Camera_",
                    num9
                }));
            }
            Game1.craftUpButtonTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecUp");
            Game1.craftDownButtonTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecDown");
            Game1.scrollLeftButtonTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecLeft");
            Game1.scrollRightButtonTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecRight");
            Game1.oneDropLogo = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "OneDropLogo");
            Game1.pulleyTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "PlayerPulley");
            Game1.timerTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Timer");
            Game1.wofTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "WallOfFlesh");
            Game1.wallOutlineTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wall_Outline");
            Game1.fadeTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "fade-out");
            Game1.ghostTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Ghost");
            Game1.evilCactusTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Evil_Cactus");
            Game1.goodCactusTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Good_Cactus");
            Game1.crimsonCactusTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Crimson_Cactus");
            Game1.wraithEyeTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wraith_Eyes");
            Game1.fireflyTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Firefly");
            Game1.fireflyJarTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "FireflyJar");
            Game1.lightningbugTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "LightningBug");
            Game1.lightningbugJarTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "LightningBugJar");
            AchievementCompleteUI.LoadContent();
            for (int num10 = 1; num10 <= 3; num10++)
            {
                Game1.jellyfishBowlTexture[num10 - 1] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "jellyfishBowl",
                    num10
                }));
            }
            Game1.glowSnailTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "GlowSnail");
            Game1.iceQueenTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "IceQueen");
            Game1.santaTankTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "SantaTank");
            Game1.jackHatTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "JackHat");
            Game1.treeFaceTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "TreeFace");
            Game1.pumpkingFaceTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "PumpkingFace");
            Game1.reaperEyeTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Reaper_Eyes");
            this.mapDeathTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapDeath");
            Game1.dukeFishronTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "DukeFishron");
            Game1.miniMinotaurTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MiniMinotaur");
            Game1.mapTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Map");
            this.mapBG1Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG1");
            this.mapBG2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG2");
            this.mapBG3Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG3");
            this.mapBG4Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG4");
            this.mapBG5Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG5");
            this.mapBG6Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG6");
            this.mapBG7Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG7");
            this.mapBG8Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG8");
            this.mapBG9Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG9");
            this.mapBG10Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG10");
            this.mapBG11Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG11");
            this.mapBG12Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG12");
            this.mapBG13Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG13");
            this.mapBG14Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG14");
            this.mapBG15Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MapBG15");
            this.hueTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Hue");
            Game1.colorSliderTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "ColorSlider");
            Game1.colorBarTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "ColorBar");
            Game1.colorBlipTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "ColorBlip");
            Game1.rainTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Rain");
            for (int num11 = 0; num11 < 214; num11++)
            {
                Game1.glowMaskTexture[num11] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Glow_",
                    num11
                }));
            }
            for (int num12 = 0; num12 < 69; num12++)
            {
                Game1.extraTexture[num12] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Extra_",
                    num12
                }));
            }
            for (int num13 = 0; num13 < 4; num13++)
            {
                Game1.coinTexture[num13] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Coin_",
                    num13
                }));
            }
            Game1.magicPixel = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MagicPixel");
            Game1.miniMapFrameTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MiniMapFrame");
            Game1.miniMapFrame2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "MiniMapFrame2");
            for (int num14 = 0; num14 < Game1.xmasTree.Length; num14++)
            {
                Game1.xmasTree[num14] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Xmas_",
                    num14
                }));
            }
            for (int num15 = 0; num15 < 4; num15++)
            {
                Game1.clothesTexture[num15] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Clothes_",
                    num15
                }));
            }
            for (int num16 = 0; num16 < Game1.FlameTexture.Length; num16++)
            {
                Game1.FlameTexture[num16] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Flame_",
                    num16
                }));
            }
            for (int num17 = 0; num17 < 3; num17++)
            {
                Game1.miniMapButtonTexture[num17] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "MiniMapButton_",
                    num17
                }));
            }
            for (int num18 = 0; num18 < 8; num18++)
            {
                Game1.mapIconTexture[num18] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Map_",
                    num18
                }));
            }
            for (int num19 = 0; num19 < Game1.underworldTexture.Length; num19++)
            {
                Game1.underworldTexture[num19] = base.Content.Load<Texture2D>("Images/Backgrounds/Underworld " + num19);
            }
            Game1.destTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dest1");
            Game1.destTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dest2");
            Game1.destTexture[2] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dest3");
            Game1.actuatorTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Actuator");
            Game1.wireTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wires");
            Game1.wire2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wires2");
            Game1.wire3Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Wires3");
            Game1.flyingCarpetTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "FlyingCarpet");
            Game1.hbTexture1 = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "HealthBar1");
            Game1.hbTexture2 = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "HealthBar2");
            Game1.loTexture = base.Content.Load<Texture2D>(string.Concat(new object[]
            {
                "Images",
                Path.DirectorySeparatorChar,
                "logo_",
                Game1.rand.Next(1, 9)
            }));
            Game1.spriteBatch = new SpriteBatch(base.GraphicsDevice);
            Game1.tileBatch = new TileBatch(base.GraphicsDevice);
            for (int num20 = 1; num20 < 2; num20++)
            {
                Game1.bannerTexture[num20] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "House_Banner_",
                    num20
                }));
            }
            for (int num21 = 0; num21 < Game1.npcHeadTexture.Length; num21++)
            {
                Game1.npcHeadTexture[num21] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "NPC_Head_",
                    num21
                }));
            }
            for (int num22 = 0; num22 < Game1.npcHeadBossTexture.Length; num22++)
            {
                Game1.npcHeadBossTexture[num22] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "NPC_Head_Boss_",
                    num22
                }));
            }
            for (int num23 = 1; num23 < Game1.BackPackTexture.Length; num23++)
            {
                Game1.BackPackTexture[num23] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "BackPack_",
                    num23
                }));
            }
            for (int num24 = 1; num24 < 191; num24++)
            {
                Game1.buffTexture[num24] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Buff_",
                    num24
                }));
            }
            this.LoadBackground(0);
            this.LoadBackground(49);
            Game1.minecartMountTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Minecart");
            for (int num25 = 0; num25 < Game1.rudolphMountTexture.Length; num25++)
            {
                Game1.rudolphMountTexture[num25] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Rudolph_",
                    num25
                }));
            }
            Game1.bunnyMountTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Bunny");
            Game1.pigronMountTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Pigron");
            Game1.slimeMountTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Slime");
            Game1.turtleMountTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Turtle");
            Game1.unicornMountTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Unicorn");
            Game1.minecartMechMountTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_MinecartMech");
            Game1.minecartMechMountTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_MinecartMechGlow");
            Game1.cuteFishronMountTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_CuteFishron1");
            Game1.cuteFishronMountTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_CuteFishron2");
            Game1.minecartWoodMountTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_MinecartWood");
            Game1.beeMountTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Bee");
            Game1.beeMountTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_BeeWings");
            Game1.UFOMountTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_UFO");
            Game1.UFOMountTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_UFOGlow");
            Game1.drillMountTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_DrillRing");
            Game1.drillMountTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_DrillSeat");
            Game1.drillMountTexture[2] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_DrillDiode");
            Game1.drillMountTexture[3] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Glow_DrillRing");
            Game1.drillMountTexture[4] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Glow_DrillSeat");
            Game1.drillMountTexture[5] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Glow_DrillDiode");
            Game1.scutlixMountTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Scutlix");
            Game1.scutlixMountTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_ScutlixEyes");
            Game1.scutlixMountTexture[2] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_ScutlixEyeGlow");
            for (int num26 = 0; num26 < 3601; num26++)
            {
                Game1.itemTexture[num26] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Item_",
                    num26
                }));
            }
            for (int num27 = 0; num27 < 6; num27++)
            {
                Game1.gemTexture[num27] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Gem_",
                    num27
                }));
            }
            for (int num28 = 0; num28 < 540; num28++)
            {
                NPC nPC = new NPC();
                nPC.SetDefaults(num28, -1f);
                Game1.npcName[num28] = nPC.name;
            }
            for (int num29 = 0; num29 < 22; num29++)
            {
                Game1.cloudTexture[num29] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Cloud_",
                    num29
                }));
            }
            for (int num30 = 0; num30 < 5; num30++)
            {
                Game1.starTexture[num30] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Star_",
                    num30
                }));
            }
            for (int num31 = 0; num31 < 12; num31++)
            {
                Game1.liquidTexture[num31] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Liquid_",
                    num31
                }));
            }
            this.waterfallManager.LoadContent(base.Content);
            Game1.npcToggleTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "House_1");
            Game1.npcToggleTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "House_2");
            Game1.HBLockTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Lock_0");
            Game1.HBLockTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Lock_1");
            Game1.gridTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Grid");
            Game1.trashTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Trash");
            Game1.cdTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "CoolDown");
            Game1.logoTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Logo");
            Game1.logo2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Logo2");
            Game1.dustTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dust");
            Game1.sunTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Sun");
            Game1.sun2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Sun2");
            Game1.sun3Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Sun3");
            Game1.blackTileTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Black_Tile");
            Game1.heartTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Heart");
            Game1.heart2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Heart2");
            Game1.bubbleTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Bubble");
            Game1.flameTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Flame");
            Game1.manaTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mana");
            for (int num32 = 0; num32 < Game1.cursorTextures.Length; num32++)
            {
                Game1.cursorTextures[num32] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "UI",
                    Path.DirectorySeparatorChar,
                    "Cursor_",
                    num32
                }));
            }
            Game1.ninjaTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Ninja");
            Game1.antLionTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "AntlionBody");
            Game1.spikeBaseTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Spike_Base");
            Game1.woodTexture[0] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_0");
            Game1.woodTexture[1] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_1");
            Game1.woodTexture[2] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_2");
            Game1.woodTexture[3] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_3");
            Game1.woodTexture[4] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_4");
            Game1.woodTexture[5] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_5");
            Game1.woodTexture[6] = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Tiles_5_6");
            Game1.pumpkinMoonTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Moon_Pumpkin");
            Game1.snowMoonTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Moon_Snow");
            for (int num33 = 0; num33 < Game1.moonTexture.Length; num33++)
            {
                Game1.moonTexture[num33] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Moon_",
                    num33
                }));
            }
            for (int num34 = 0; num34 < Game1.treeTopTexture.Length; num34++)
            {
                Game1.treeTopTexture[num34] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Tree_Tops_",
                    num34
                }));
            }
            for (int num35 = 0; num35 < Game1.treeBranchTexture.Length; num35++)
            {
                Game1.treeBranchTexture[num35] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Tree_Branches_",
                    num35
                }));
            }
            Game1.shroomCapTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Shroom_Tops");
            Game1.inventoryBackTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back");
            Game1.inventoryBack2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back2");
            Game1.inventoryBack3Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back3");
            Game1.inventoryBack4Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back4");
            Game1.inventoryBack5Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back5");
            Game1.inventoryBack6Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back6");
            Game1.inventoryBack7Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back7");
            Game1.inventoryBack8Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back8");
            Game1.inventoryBack9Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back9");
            Game1.inventoryBack10Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back10");
            Game1.inventoryBack11Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back11");
            Game1.inventoryBack12Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back12");
            Game1.inventoryBack13Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back13");
            Game1.inventoryBack14Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back14");
            Game1.inventoryBack15Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back15");
            Game1.hairStyleBackTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "HairStyleBack");
            Game1.clothesStyleBackTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "ClothesStyleBack");
            Game1.inventoryTickOffTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Tick_Off");
            Game1.inventoryTickOnTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Tick_On");
            Game1.textBackTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Text_Back");
            Game1.chatTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chat");
            Game1.chat2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chat2");
            Game1.chatBackTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chat_Back");
            Game1.teamTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Team");
            PlayerDataInitializer.Load();
            Game1.chaosTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chaos");
            Game1.EyeLaserTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Eye_Laser");
            Game1.BoneEyesTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Bone_Eyes");
            Game1.BoneLaserTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Bone_Laser");
            Game1.lightDiscTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Light_Disc");
            Game1.confuseTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Confuse");
            Game1.probeTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Probe");
            Game1.sunOrbTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "SunOrb");
            Game1.sunAltarTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "SunAltar");
            Game1.xmasLightTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "XmasLight");
            Game1.beetleTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "BeetleOrb");
            for (int num36 = 0; num36 < 16; num36++)
            {
                Game1.chainsTexture[num36] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Chains_",
                    num36
                }));
            }
            Game1.chain20Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain20");
            Game1.fishingLineTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "FishingLine");
            Game1.chainTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain");
            Game1.chain2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain2");
            Game1.chain3Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain3");
            Game1.chain4Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain4");
            Game1.chain5Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain5");
            Game1.chain6Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain6");
            Game1.chain7Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain7");
            Game1.chain8Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain8");
            Game1.chain9Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain9");
            Game1.chain10Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain10");
            Game1.chain11Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain11");
            Game1.chain12Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain12");
            Game1.chain13Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain13");
            Game1.chain14Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain14");
            Game1.chain15Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain15");
            Game1.chain16Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain16");
            Game1.chain17Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain17");
            Game1.chain18Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain18");
            Game1.chain19Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain19");
            Game1.chain20Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain20");
            Game1.chain21Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain21");
            Game1.chain22Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain22");
            Game1.chain23Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain23");
            Game1.chain24Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain24");
            Game1.chain25Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain25");
            Game1.chain26Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain26");
            Game1.chain27Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain27");
            Game1.chain28Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain28");
            Game1.chain29Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain29");
            Game1.chain30Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain30");
            Game1.chain31Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain31");
            Game1.chain32Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain32");
            Game1.chain33Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain33");
            Game1.chain34Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain34");
            Game1.chain35Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain35");
            Game1.chain36Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain36");
            Game1.chain37Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain37");
            Game1.chain38Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain38");
            Game1.chain39Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain39");
            Game1.chain40Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain40");
            Game1.eyeLaserSmallTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Eye_Laser_Small");
            Game1.boneArmTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Arm_Bone");
            Game1.pumpkingArmTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "PumpkingArm");
            Game1.pumpkingCloakTexture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "PumpkingCloak");
            Game1.boneArm2Texture = base.Content.Load<Texture2D>("Images" + Path.DirectorySeparatorChar + "Arm_Bone_2");
            for (int num37 = 1; num37 < Game1.gemChainTexture.Length; num37++)
            {
                Game1.gemChainTexture[num37] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "GemChain_",
                    num37
                }));
            }
            for (int num38 = 1; num38 < Game1.golemTexture.Length; num38++)
            {
                Game1.golemTexture[num38] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "GolemLights",
                    num38
                }));
            }
            Game1.fontItemStack = base.Content.Load<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Item_Stack");
            Game1.fontMouseText = base.Content.Load<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Mouse_Text");
            Game1.fontDeathText = base.Content.Load<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Death_Text");
            Game1.fontCombatText[0] = base.Content.Load<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Combat_Text");
            Game1.fontCombatText[1] = base.Content.Load<SpriteFont>("Fonts" + Path.DirectorySeparatorChar + "Combat_Crit");
            Mount.Initialize();
            Minecart.Initialize();

        }//LoadContent


        // UnloadContent
        protected override void UnloadContent()
        {
        }


        public static void stopMoonEvent()
        {
            if (Game1.pumpkinMoon)
            {
                Game1.pumpkinMoon = false;
                if (Game1.netMode != 1)
                {
                    NPC.waveKills = 0f;
                    NPC.waveCount = 0;
                }
            }
            if (Game1.snowMoon)
            {
                Game1.snowMoon = false;
                if (Game1.netMode != 1)
                {
                    NPC.waveKills = 0f;
                    NPC.waveCount = 0;
                }
            }
        }


        // startPumpkinMoon
        public static void startPumpkinMoon()
        {
            Game1.pumpkinMoon = true;
            Game1.snowMoon = false;
            Game1.bloodMoon = false;
            if (Game1.netMode != 1)
            {
                NPC.waveKills = 0f;
                NPC.waveCount = 1;
                string text = "First Wave: " + Game1.npcName[305];
                if (Game1.netMode == 0)
                {
                    Game1.NewText(text, 175, 75, 255, false);
                    return;
                }
                if (Game1.netMode == 2)
                {
                    NetMessage.SendData(25, -1, -1, text, 255, 175f, 75f, 255f, 0, 0, 0);
                }
            }
        }


        // startSnowMoon
        public static void startSnowMoon()
        {
            Game1.snowMoon = true;
            Game1.pumpkinMoon = false;
            Game1.bloodMoon = false;
            if (Game1.netMode != 1)
            {
                NPC.waveKills = 0f;
                NPC.waveCount = 1;
                string text = "First Wave: Zombie Elf and Gingerbread Man";
                if (Game1.netMode == 0)
                {
                    Game1.NewText(text, 175, 75, 255, false);
                    return;
                }
                if (Game1.netMode == 2)
                {
                    NetMessage.SendData(25, -1, -1, text, 255, 175f, 75f, 255f, 0, 0, 0);
                }
            }
        }//


        // UpdateMusic
        protected void UpdateMusic()
        {
            if (Game1.musicVolume == 0f)
            {
                Game1.curMusic = 0;
            }
            try
            {
                if (!Game1.dedServ)
                {
                    if (Game1.curMusic > 0)
                    {
                        if (!base.IsActive)
                        {
                            for (int i = 0; i < Game1.music.Length; i++)
                            {
                                if (Game1.music[i] != null && !Game1.music[i].IsPaused
                                    && Game1.music[i].IsPlaying && Game1.musicFade[i] > 0f)
                                {
                                    try
                                    {
                                        Game1.music[i].Pause();
                                    }
                                    catch (Exception)
                                    {
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (int j = 0; j < Game1.music.Length; j++)
                            {
                                if (Game1.music[j] != null && Game1.music[j].IsPaused
                                    && Game1.musicFade[j] > 0f)
                                {
                                    try
                                    {
                                        Game1.music[j].Resume();
                                    }
                                    catch (Exception)
                                    {
                                    }
                                }
                            }
                        }
                    }
                    bool flag = false;
                    bool flag2 = false;
                    bool flag3 = false;
                    bool flag4 = false;
                    bool flag5 = false;
                    bool flag6 = false;
                    bool flag7 = false;
                    bool flag8 = false;
                    bool flag9 = false;
                    bool flag10 = false;
                    bool flag11 = false;
                    Microsoft.Xna.Framework.Rectangle rectangle
                        = new Microsoft.Xna.Framework.Rectangle((int)Game1.screenPosition.X,
                        (int)Game1.screenPosition.Y, Game1.screenWidth, Game1.screenHeight);

                    int num = 5000;
                    for (int k = 0; k < 200; k++)
                    {
                        if (Game1.npc[k].active)
                        {
                            int num2 = 0;
                            int type = Game1.npc[k].type;
                            if (type <= 245)
                            {
                                if (type <= 126)
                                {
                                    if (type > 29)
                                    {
                                        switch (type)
                                        {
                                            case 111:
                                                goto IL_341;
                                            case 112:
                                                goto IL_394;
                                            case 113:
                                            case 114:
                                                break;
                                            default:
                                                switch (type)
                                                {
                                                    case 125:
                                                    case 126:
                                                        break;
                                                    default:
                                                        goto IL_394;
                                                }
                                                break;
                                        }
                                        num2 = 2;
                                        goto IL_394;
                                    }
                                    switch (type)
                                    {
                                        case 13:
                                        case 14:
                                        case 15:
                                            num2 = 1;
                                            goto IL_394;
                                        default:
                                            switch (type)
                                            {
                                                case 26:
                                                case 27:
                                                case 28:
                                                case 29:
                                                    break;
                                                default:
                                                    goto IL_394;
                                            }
                                            break;
                                    }
                                IL_341:
                                    num2 = 11;
                                }
                                else if (type <= 145)
                                {
                                    if (type == 134)
                                    {
                                        goto IL_34C;
                                    }
                                    switch (type)
                                    {
                                        case 143:
                                        case 144:
                                        case 145:
                                            goto IL_34C;
                                    }
                                }
                                else
                                {
                                    switch (type)
                                    {
                                        case 212:
                                        case 213:
                                        case 214:
                                        case 215:
                                        case 216:
                                            goto IL_351;
                                        case 217:
                                        case 218:
                                        case 219:
                                        case 220:
                                        case 221:
                                            break;
                                        case 222:
                                            num2 = 5;
                                            break;
                                        default:
                                            if (type == 245)
                                            {
                                                num2 = 4;
                                            }
                                            break;
                                    }
                                }
                            }
                            else
                            {
                                if (type <= 439)
                                {
                                    if (type <= 398)
                                    {
                                        switch (type)
                                        {
                                            case 262:
                                            case 263:
                                            case 264:
                                                num2 = 6;
                                                goto IL_394;
                                            case 265:
                                                goto IL_394;
                                            case 266:
                                                goto IL_34C;
                                            default:
                                                switch (type)
                                                {
                                                    case 381:
                                                    case 382:
                                                    case 383:
                                                    case 385:
                                                    case 386:
                                                    case 388:
                                                    case 389:
                                                    case 390:
                                                    case 391:
                                                    case 395:
                                                        break;
                                                    case 384:
                                                    case 387:
                                                    case 392:
                                                    case 393:
                                                    case 394:
                                                    case 396:
                                                    case 397:
                                                        goto IL_394;
                                                    case 398:
                                                        num2 = 7;
                                                        goto IL_394;
                                                    default:
                                                        goto IL_394;
                                                }
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        if (type == 422)
                                        {
                                            goto IL_370;
                                        }
                                        switch (type)
                                        {
                                            case 438:
                                                if (Game1.npc[k].ai[1] == 1f)
                                                {
                                                    num2 = 4;
                                                    goto IL_394;
                                                }
                                                goto IL_394;
                                            case 439:
                                                num2 = 4;
                                                goto IL_394;
                                            default:
                                                goto IL_394;
                                        }
                                    }
                                }
                                else if (type <= 507)
                                {
                                    switch (type)
                                    {
                                        case 491:
                                            goto IL_351;
                                        case 492:
                                            goto IL_394;
                                        case 493:
                                            goto IL_370;
                                        default:
                                            if (type != 507)
                                            {
                                                goto IL_394;
                                            }
                                            goto IL_370;
                                    }
                                }
                                else
                                {
                                    if (type == 517)
                                    {
                                        goto IL_370;
                                    }
                                    if (type != 520)
                                    {
                                        goto IL_394;
                                    }
                                }
                                num2 = 9;
                                goto IL_394;
                            IL_370:
                                num2 = 10;
                            }
                        IL_394:
                            if (num2 == 0 && Game1.npc[k].boss)
                            {
                                num2 = 1;
                            }
                            if (num2 == 0)
                            {
                                goto IL_488;
                            }
                            Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(Game1.npc[k].position.X + (float)(Game1.npc[k].width / 2)) - num, (int)(Game1.npc[k].position.Y + (float)(Game1.npc[k].height / 2)) - num, num * 2, num * 2);
                            if (!rectangle.Intersects(value))
                            {
                                goto IL_488;
                            }
                            if (num2 == 1)
                            {
                                flag = true;
                                break;
                            }
                            if (num2 == 2)
                            {
                                flag2 = true;
                                break;
                            }
                            if (num2 == 3)
                            {
                                flag3 = true;
                                break;
                            }
                            if (num2 == 4)
                            {
                                flag4 = true;
                                break;
                            }
                            if (num2 == 5)
                            {
                                flag5 = true;
                                break;
                            }
                            if (num2 == 6)
                            {
                                flag6 = true;
                                break;
                            }
                            if (num2 == 7)
                            {
                                flag7 = true;
                                break;
                            }
                            if (num2 == 8)
                            {
                                flag8 = true;
                                break;
                            }
                            if (num2 == 9)
                            {
                                flag9 = true;
                                break;
                            }
                            if (num2 == 10)
                            {
                                flag10 = true;
                                break;
                            }
                            if (num2 == 11)
                            {
                                flag11 = true;
                                break;
                            }
                            break;
                        IL_34C:
                            num2 = 3;
                            goto IL_394;
                        IL_351:
                            num2 = 8;
                            goto IL_394;
                        }
                    IL_488:;
                    }
                    int num3 = (int)((Game1.screenPosition.X + (float)(Game1.screenWidth / 2)) / 16f);
                    if (Game1.musicVolume == 0f)
                    {
                        this.newMusic = 0;
                    }
                    else if (Game1.gameMenu)
                    {
                        if (Game1.netMode != 2)
                        {
                            this.newMusic = 6;
                        }
                        else
                        {
                            this.newMusic = 0;
                        }
                    }
                    else
                    {
                        float num4 = (float)(Game1.maxTilesX / 4200);
                        num4 *= num4;
                        float num5 = (float)((double)((Game1.screenPosition.Y + (float)(Game1.screenHeight / 2)) / 16f - (65f + 10f * num4)) / (Game1.worldSurface / 5.0));
                        if (flag7)
                        {
                            this.newMusic = 38;
                        }
                        else if (flag9)
                        {
                            this.newMusic = 37;
                        }
                        else if (flag10)
                        {
                            this.newMusic = 34;
                        }
                        else if (flag6)
                        {
                            this.newMusic = 24;
                        }
                        else if (flag2)
                        {
                            this.newMusic = 12;
                        }
                        else if (flag)
                        {
                            this.newMusic = 5;
                        }
                        else if (flag3)
                        {
                            this.newMusic = 13;
                        }
                        else if (flag4)
                        {
                            this.newMusic = 17;
                        }
                        else if (flag5)
                        {
                            this.newMusic = 25;
                        }
                        else if (flag8)
                        {
                            this.newMusic = 35;
                        }
                        else if (flag11)
                        {
                            this.newMusic = 39;
                        }
                        else if (Game1.player[Game1.myPlayer].position.Y > (float)((Game1.maxTilesY - 200) * 16))
                        {
                            this.newMusic = 36;
                        }
                        else if (Game1.eclipse && (double)Game1.player[Game1.myPlayer].position.Y < Game1.worldSurface * 16.0 + (double)(Game1.screenHeight / 2))
                        {
                            this.newMusic = 27;
                        }
                        else if (num5 < 1f)
                        {
                            this.newMusic = 15;
                        }
                        else if (Game1.tile[(int)(Game1.player[Game1.myPlayer].Center.X / 16f), (int)(Game1.player[Game1.myPlayer].Center.Y / 16f)].wall == 87)
                        {
                            this.newMusic = 26;
                        }
                        else if ((Game1.bgStyle == 9 && (double)Game1.player[Game1.myPlayer].position.Y < Game1.worldSurface * 16.0 + (double)(Game1.screenHeight / 2)) || Game1.ugBack == 2)
                        {
                            this.newMusic = 29;
                        }
                        else if (Game1.player[Game1.myPlayer].ZoneCorrupt)
                        {
                            if ((double)Game1.player[Game1.myPlayer].position.Y > Game1.worldSurface * 16.0 + (double)(Game1.screenHeight / 2))
                            {
                                this.newMusic = 10;
                            }
                            else
                            {
                                this.newMusic = 8;
                            }
                        }
                        else if (Game1.player[Game1.myPlayer].ZoneCrimson)
                        {
                            if ((double)Game1.player[Game1.myPlayer].position.Y > Game1.worldSurface * 16.0 + (double)(Game1.screenHeight / 2))
                            {
                                this.newMusic = 33;
                            }
                            else
                            {
                                this.newMusic = 16;
                            }
                        }
                        else if (Game1.player[Game1.myPlayer].ZoneDungeon)
                        {
                            this.newMusic = 23;
                        }
                        else if (Game1.player[Game1.myPlayer].ZoneMeteor)
                        {
                            this.newMusic = 2;
                        }
                        else if (Game1.player[Game1.myPlayer].ZoneJungle)
                        {
                            this.newMusic = 7;
                        }
                        else if (Game1.player[Game1.myPlayer].ZoneSnow)
                        {
                            if ((double)Game1.player[Game1.myPlayer].position.Y > Game1.worldSurface * 16.0 + (double)(Game1.screenHeight / 2))
                            {
                                this.newMusic = 20;
                            }
                            else
                            {
                                this.newMusic = 14;
                            }
                        }
                        else if ((double)Game1.player[Game1.myPlayer].position.Y > Game1.worldSurface * 16.0 + (double)(Game1.screenHeight / 2))
                        {
                            if (Game1.player[Game1.myPlayer].ZoneHoly)
                            {
                                this.newMusic = 11;
                            }
                            else if (Game1.sandTiles > 2200)
                            {
                                this.newMusic = 21;
                            }
                            else
                            {
                                if (Game1.ugMusic == 0)
                                {
                                    Game1.ugMusic = 4;
                                }
                                if (!Game1.music[4].IsPlaying && !Game1.music[31].IsPlaying)
                                {
                                    if (Game1.musicFade[4] == 1f)
                                    {
                                        Game1.musicFade[31] = 1f;
                                    }
                                    if (Game1.musicFade[31] == 1f)
                                    {
                                        Game1.musicFade[4] = 1f;
                                    }
                                    int num6 = Game1.rand.Next(2);
                                    if (num6 == 0)
                                    {
                                        Game1.ugMusic = 4;
                                        Game1.musicFade[31] = 0f;
                                    }
                                    else if (num6 == 1)
                                    {
                                        Game1.ugMusic = 31;
                                        Game1.musicFade[4] = 0f;
                                    }
                                }
                                this.newMusic = Game1.ugMusic;
                            }
                        }
                        else if (Game1.dayTime && Game1.player[Game1.myPlayer].ZoneHoly)
                        {
                            if (Game1.cloudAlpha > 0f && !Game1.gameMenu)
                            {
                                this.newMusic = 19;
                            }
                            else
                            {
                                this.newMusic = 9;
                            }
                        }
                        else if ((double)(Game1.screenPosition.Y / 16f) < Game1.worldSurface + 10.0 && (num3 < 380 || num3 > Game1.maxTilesX - 380))
                        {
                            this.newMusic = 22;
                        }
                        else if (Game1.sandTiles > 1000)
                        {
                            this.newMusic = 21;
                        }
                        else if (Game1.dayTime)
                        {
                            if (Game1.cloudAlpha > 0f && !Game1.gameMenu)
                            {
                                this.newMusic = 19;
                            }
                            else
                            {
                                if (Game1.dayMusic == 0)
                                {
                                    Game1.dayMusic = 1;
                                }
                                if (!Game1.music[1].IsPlaying && !Game1.music[18].IsPlaying)
                                {
                                    int num7 = Game1.rand.Next(2);
                                    if (num7 == 0)
                                    {
                                        Game1.dayMusic = 1;
                                    }
                                    else if (num7 == 1)
                                    {
                                        Game1.dayMusic = 18;
                                    }
                                }
                                this.newMusic = Game1.dayMusic;
                            }
                        }
                        else if (!Game1.dayTime)
                        {
                            if (Game1.bloodMoon)
                            {
                                this.newMusic = 2;
                            }
                            else if (Game1.cloudAlpha > 0f && !Game1.gameMenu)
                            {
                                this.newMusic = 19;
                            }
                            else
                            {
                                this.newMusic = 3;
                            }
                        }
                        if ((double)(Game1.screenPosition.Y / 16f) < Game1.worldSurface + 10.0 && Game1.pumpkinMoon)
                        {
                            this.newMusic = 30;
                        }
                        if ((double)(Game1.screenPosition.Y / 16f) < Game1.worldSurface + 10.0 && Game1.snowMoon)
                        {
                            this.newMusic = 32;
                        }
                    }
                    if (Game1.gameMenu || Game1.musicVolume == 0f)
                    {
                        Game1.musicBox2 = -1;
                        Game1.musicBox = -1;
                    }
                    if (Game1.musicBox2 >= 0)
                    {
                        Game1.musicBox = Game1.musicBox2;
                    }
                    if (Game1.musicBox >= 0)
                    {
                        if (Game1.musicBox == 0)
                        {
                            this.newMusic = 1;
                        }
                        if (Game1.musicBox == 1)
                        {
                            this.newMusic = 2;
                        }
                        if (Game1.musicBox == 2)
                        {
                            this.newMusic = 3;
                        }
                        if (Game1.musicBox == 4)
                        {
                            this.newMusic = 4;
                        }
                        if (Game1.musicBox == 5)
                        {
                            this.newMusic = 5;
                        }
                        if (Game1.musicBox == 3)
                        {
                            this.newMusic = 6;
                        }
                        if (Game1.musicBox == 6)
                        {
                            this.newMusic = 7;
                        }
                        if (Game1.musicBox == 7)
                        {
                            this.newMusic = 8;
                        }
                        if (Game1.musicBox == 9)
                        {
                            this.newMusic = 9;
                        }
                        if (Game1.musicBox == 8)
                        {
                            this.newMusic = 10;
                        }
                        if (Game1.musicBox == 11)
                        {
                            this.newMusic = 11;
                        }
                        if (Game1.musicBox == 10)
                        {
                            this.newMusic = 12;
                        }
                        if (Game1.musicBox == 12)
                        {
                            this.newMusic = 13;
                        }
                        if (Game1.musicBox == 13)
                        {
                            this.newMusic = 14;
                        }
                        if (Game1.musicBox == 14)
                        {
                            this.newMusic = 15;
                        }
                        if (Game1.musicBox == 15)
                        {
                            this.newMusic = 16;
                        }
                        if (Game1.musicBox == 16)
                        {
                            this.newMusic = 17;
                        }
                        if (Game1.musicBox == 17)
                        {
                            this.newMusic = 18;
                        }
                        if (Game1.musicBox == 18)
                        {
                            this.newMusic = 19;
                        }
                        if (Game1.musicBox == 19)
                        {
                            this.newMusic = 20;
                        }
                        if (Game1.musicBox == 20)
                        {
                            this.newMusic = 21;
                        }
                        if (Game1.musicBox == 21)
                        {
                            this.newMusic = 22;
                        }
                        if (Game1.musicBox == 22)
                        {
                            this.newMusic = 23;
                        }
                        if (Game1.musicBox == 23)
                        {
                            this.newMusic = 24;
                        }
                        if (Game1.musicBox == 24)
                        {
                            this.newMusic = 25;
                        }
                        if (Game1.musicBox == 25)
                        {
                            this.newMusic = 26;
                        }
                        if (Game1.musicBox == 26)
                        {
                            this.newMusic = 27;
                        }
                        if (Game1.musicBox == 27)
                        {
                            this.newMusic = 29;
                        }
                        if (Game1.musicBox == 28)
                        {
                            this.newMusic = 30;
                        }
                        if (Game1.musicBox == 29)
                        {
                            this.newMusic = 31;
                        }
                        if (Game1.musicBox == 30)
                        {
                            this.newMusic = 32;
                        }
                        if (Game1.musicBox == 31)
                        {
                            this.newMusic = 33;
                        }
                        if (Game1.musicBox == 32)
                        {
                            this.newMusic = 38;
                        }
                        if (Game1.musicBox == 33)
                        {
                            this.newMusic = 37;
                        }
                        if (Game1.musicBox == 34)
                        {
                            this.newMusic = 35;
                        }
                        if (Game1.musicBox == 35)
                        {
                            this.newMusic = 36;
                        }
                        if (Game1.musicBox == 36)
                        {
                            this.newMusic = 34;
                        }
                        if (Game1.musicBox == 37)
                        {
                            this.newMusic = 39;
                        }
                    }
                    Game1.curMusic = this.newMusic;
                    float num8 = 1f;
                    if (NPC.MoonLordCountdown > 0)
                    {
                        num8 = (float)NPC.MoonLordCountdown / 3600f;
                        num8 *= num8;
                        if (NPC.MoonLordCountdown > 720)
                        {
                            num8 = MathHelper.Lerp(0f, 1f, num8);
                        }
                        else
                        {
                            num8 = 0f;
                            Game1.curMusic = 0;
                        }
                        if (NPC.MoonLordCountdown == 1 && Game1.curMusic >= 1 && Game1.curMusic < 40)
                        {
                            Game1.musicFade[Game1.curMusic] = 0f;
                        }
                    }
                    for (int l = 1; l < 40; l++)
                    {
                        if (l == 28)
                        {
                            if (Game1.cloudAlpha > 0f && (double)Game1.player[Game1.myPlayer].position.Y
                                < Game1.worldSurface * 16.0 + (double)(Game1.screenHeight / 2) && !Game1.player[Game1.myPlayer].ZoneSnow)
                            {
                                if (Game1.ambientVolume == 0f)
                                {
                                    if (Game1.music[l].IsPlaying)
                                    {
                                        Game1.music[l].Stop(AudioStopOptions.Immediate);
                                    }
                                }
                                else if (!Game1.music[l].IsPlaying)
                                {
                                    Game1.music[l] = Game1.soundBank.GetCue("Music_" + l);
                                    Game1.music[l].Play();
                                    Game1.music[l].SetVariable("Volume", Game1.musicFade[l] * Game1.ambientVolume);
                                }
                                else if (Game1.music[l].IsPaused)
                                {
                                    Game1.music[l].Resume();
                                }
                                else
                                {
                                    Game1.musicFade[l] += 0.005f;
                                    if (Game1.musicFade[l] > 1f)
                                    {
                                        Game1.musicFade[l] = 1f;
                                    }
                                    Game1.music[l].SetVariable("Volume", Game1.musicFade[l] * Game1.ambientVolume);
                                }
                            }
                            else if (Game1.music[l] != null)//(Game1.music[l].IsPlaying)
                            {
                                if (Game1.music[l].IsPlaying)
                                { 
                                if (Game1.musicFade[Game1.curMusic] > 0.25f)
                                {
                                    Game1.musicFade[l] -= 0.005f;
                                }
                                else if (Game1.curMusic == 0)
                                {
                                    Game1.musicFade[l] = 0f;
                                }
                                if (Game1.musicFade[l] <= 0f)
                                {
                                    Game1.musicFade[l] -= 0f;
                                    Game1.music[l].Stop(AudioStopOptions.Immediate);
                                }
                                else
                                {
                                    Game1.music[l].SetVariable("Volume", Game1.musicFade[l] * Game1.ambientVolume);
                                }
                            }
                            }
                            else
                            {
                                Game1.musicFade[l] = 0f;
                            }
                        }
                        else if (l == Game1.curMusic)
                        {
                            if (!Game1.music[l].IsPlaying)
                            {
                                Game1.music[l] = Game1.soundBank.GetCue("Music_" + l);
                                Game1.music[l].Play();
                                Game1.music[l].SetVariable("Volume", Game1.musicFade[l] * Game1.musicVolume * num8);
                            }
                            else
                            {
                                Game1.musicFade[l] += 0.005f;
                                if (Game1.musicFade[l] > 1f)
                                {
                                    Game1.musicFade[l] = 1f;
                                }
                                Game1.music[l].SetVariable("Volume", Game1.musicFade[l] * Game1.musicVolume * num8);
                            }
                        }
                        else if (Game1.music[l] != null)//(Game1.music[l].IsPlaying)
                        {
                            if (Game1.music[l].IsPlaying)
                            {
                                if (Game1.musicFade[Game1.curMusic] > 0.25f)
                                {
                                    Game1.musicFade[l] -= 0.005f;
                                }
                                else if (Game1.curMusic == 0)
                                {
                                    Game1.musicFade[l] = 0f;
                                }
                                if (Game1.musicFade[l] <= 0f)
                                {
                                    Game1.musicFade[l] -= 0f;
                                    Game1.music[l].Stop(AudioStopOptions.Immediate);
                                }
                                else
                                {
                                    Game1.music[l].SetVariable("Volume", Game1.musicFade[l] * Game1.musicVolume * num8);
                                }
                            }
                        }
                        else
                        {
                            Game1.musicFade[l] = 0f;
                        }
                    }
                    if (Game1.musicError > 0)
                    {
                        Game1.musicError--;
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine("[ex] Message: " + ex.Message);

                Game1.musicError++;
                if (Game1.musicError >= 100)
                {
                    Game1.musicError = 0;
                    Game1.musicVolume = 0f;
                }
            }
        
        }//UpdateMusic


        // snowing
        public static void snowing()
        {
            if (Game1.gamePaused)
            {
                return;
            }
            if (Game1.snowTiles > 0 && (double)Game1.player[Game1.myPlayer].position.Y < Game1.worldSurface * 16.0)
            {
                int maxValue = 800 / Game1.snowTiles;
                float num = (float)Game1.screenWidth / 1920f;
                int num2 = (int)(500f * num);
                num2 = (int)((float)num2 * (1f + 2f * Game1.cloudAlpha));
                float num3 = 1f + 50f * Game1.cloudAlpha;
                int num4 = 0;
                while ((float)num4 < num3)
                {
                    try
                    {
                        if ((float)Game1.snowDust >= (float)num2 * (Game1.gfxQuality / 2f + 0.5f) + (float)num2 * 0.1f)
                        {
                            break;
                        }
                        if (Game1.rand.Next(maxValue) == 0)
                        {
                            int num5 = Game1.rand.Next(Game1.screenWidth + 1000) - 500;
                            int num6 = (int)Game1.screenPosition.Y - Game1.rand.Next(50);
                            if (Game1.player[Game1.myPlayer].velocity.Y > 0f)
                            {
                                num6 -= (int)Game1.player[Game1.myPlayer].velocity.Y;
                            }
                            if (Game1.rand.Next(5) == 0)
                            {
                                num5 = Game1.rand.Next(500) - 500;
                            }
                            else if (Game1.rand.Next(5) == 0)
                            {
                                num5 = Game1.rand.Next(500) + Game1.screenWidth;
                            }
                            if (num5 < 0 || num5 > Game1.screenWidth)
                            {
                                num6 += Game1.rand.Next((int)((double)Game1.screenHeight * 0.5)) + (int)((double)Game1.screenHeight * 0.1);
                            }
                            num5 += (int)Game1.screenPosition.X;
                            int num7 = num5 / 16;
                            int num8 = num6 / 16;
                            if (Game1.tile[num7, num8] != null && Game1.tile[num7, num8].wall == 0)
                            {
                                int num9 = Dust.NewDust(new Vector2((float)num5, (float)num6), 10, 10, 76, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
                                Game1.dust[num9].scale += Game1.cloudAlpha * 0.2f;
                                Game1.dust[num9].velocity.Y = 3f + (float)Game1.rand.Next(30) * 0.1f;
                                Dust expr_291_cp_0 = Game1.dust[num9];
                                expr_291_cp_0.velocity.Y = expr_291_cp_0.velocity.Y * Game1.dust[num9].scale;
                                Game1.dust[num9].velocity.X = Game1.windSpeed + (float)Game1.rand.Next(-10, 10) * 0.1f;
                                Dust expr_2E4_cp_0 = Game1.dust[num9];
                                expr_2E4_cp_0.velocity.X = expr_2E4_cp_0.velocity.X + Game1.windSpeed * Game1.cloudAlpha * 10f;
                                Dust expr_30E_cp_0 = Game1.dust[num9];
                                expr_30E_cp_0.velocity.Y = expr_30E_cp_0.velocity.Y * (1f + 0.3f * Game1.cloudAlpha);
                                Game1.dust[num9].scale += Game1.cloudAlpha * 0.2f;
                                Game1.dust[num9].velocity *= 1f + Game1.cloudAlpha * 0.5f;
                            }
                        }
                    }
                    catch
                    {
                    }
                    num4++;
                }
            }
        }
        public static void checkXMas()
        {
            DateTime now = DateTime.Now;
            int day = now.Day;
            int month = now.Month;
            if (day >= 15 && month == 12)
            {
                Game1.xMas = true;
                return;
            }
            Game1.xMas = false;
        }
        public static void checkHalloween()
        {
            DateTime now = DateTime.Now;
            int day = now.Day;
            int month = now.Month;
            if (day >= 20 && month == 10)
            {
                Game1.halloween = true;
                return;
            }
            if (day <= 10 && month == 11)
            {
                Game1.halloween = true;
                return;
            }
            Game1.halloween = false;
        }
        public void updateCloudLayer()
        {
            if (Game1.netMode == 1)
            {
                return;
            }
            if (Game1.netMode == 0 && Game1.gameMenu)
            {
                return;
            }
            int num = 86400;
            int num2 = num / 24;
            float num3 = Math.Max(1f, 1f + 4f * Game1.cloudAlpha);
            if (Game1.cloudBGActive > 0f)
            {
                if (Game1.cloudBGActive > 1f)
                {
                    Game1.cloudBGActive -= (float)Game1.dayRate / num3;
                }
                if (Game1.cloudBGActive < 1f)
                {
                    Game1.cloudBGActive = 1f;
                }
                if (Game1.cloudBGActive == 1f && Game1.rand.Next((int)((float)(num2 * 2 / Math.Max(Game1.dayRate, 1)) * num3)) == 0)
                {
                    Game1.cloudBGActive = (float)(-(float)Game1.rand.Next(num2 * 4, num * 4));
                    if (Game1.netMode == 2)
                    {
                        NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
                        return;
                    }
                }
            }
            else
            {
                if (Game1.cloudBGActive < 0f)
                {
                    Game1.cloudBGActive += (float)Game1.dayRate * num3;
                    if (Game1.raining)
                    {
                        Game1.cloudBGActive += (float)(2 * Game1.dayRate) * num3;
                    }
                }
                if (Game1.cloudBGActive > 0f)
                {
                    Game1.cloudBGActive = 0f;
                }
                if (Game1.cloudBGActive == 0f && Game1.rand.Next((int)((float)(num2 * 8 / ((Game1.dayRate == 0) ? 1 : Game1.dayRate)) / num3)) == 0)
                {
                    Game1.cloudBGActive = (float)Game1.rand.Next(num2 * 3, num * 2);
                    if (Game1.netMode == 2)
                    {
                        NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
                    }
                }
            }
        }
        public static void TeleportEffect(Microsoft.Xna.Framework.Rectangle effectRect, int Style, int extraInfo = 0)
        {
            if (Style == 0)
            {
                Game1.PlaySound(2, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2, 6);
                int num = effectRect.Width * effectRect.Height / 5;
                for (int i = 0; i < num; i++)
                {
                    int num2 = Dust.NewDust(new Vector2((float)effectRect.X, (float)effectRect.Y), effectRect.Width, effectRect.Height, 159, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
                    Game1.dust[num2].scale = (float)Game1.rand.Next(20, 70) * 0.01f;
                    if (i < 10)
                    {
                        Game1.dust[num2].scale += 0.25f;
                    }
                    if (i < 5)
                    {
                        Game1.dust[num2].scale += 0.25f;
                    }
                }
                return;
            }
            if (Style == 1)
            {
                Game1.PlaySound(2, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2, 8);
                int num3 = effectRect.Width * effectRect.Height / 5;
                for (int j = 0; j < num3; j++)
                {
                    int num4 = Dust.NewDust(new Vector2((float)effectRect.X, (float)effectRect.Y), effectRect.Width, effectRect.Height, 164, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
                    Game1.dust[num4].scale = (float)Game1.rand.Next(20, 70) * 0.01f;
                    if (j < 10)
                    {
                        Game1.dust[num4].scale += 0.25f;
                    }
                    if (j < 5)
                    {
                        Game1.dust[num4].scale += 0.25f;
                    }
                }
                return;
            }
            if (Style == 2)
            {
                for (int k = 0; k < 50; k++)
                {
                    Game1.dust[Dust.NewDust(new Vector2((float)effectRect.X, (float)effectRect.Y), effectRect.Width, effectRect.Height, 58, 0f, 0f, 150, Microsoft.Xna.Framework.Color.GhostWhite, 1.2f)].velocity *= 0.5f;
                }
                return;
            }
            if (Style == 3)
            {
                Game1.PlaySound(2, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2, 6);
                for (int l = 0; l < 50; l++)
                {
                    int num5 = Dust.NewDust(new Vector2((float)effectRect.X, (float)effectRect.Y), effectRect.Width, effectRect.Height, 180, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
                    Game1.dust[num5].noGravity = true;
                    for (int m = 0; m < 5; m++)
                    {
                        if (Game1.rand.Next(3) == 0)
                        {
                            Game1.dust[num5].velocity *= 0.75f;
                        }
                    }
                    if (Game1.rand.Next(3) == 0)
                    {
                        Game1.dust[num5].velocity *= 2f;
                        Game1.dust[num5].scale *= 1.2f;
                    }
                    if (Game1.rand.Next(3) == 0)
                    {
                        Game1.dust[num5].velocity *= 2f;
                        Game1.dust[num5].scale *= 1.2f;
                    }
                    if (Game1.rand.Next(2) == 0)
                    {
                        Game1.dust[num5].fadeIn = (float)Game1.rand.Next(75, 100) * 0.01f;
                        Game1.dust[num5].scale = (float)Game1.rand.Next(25, 75) * 0.01f;
                    }
                    Game1.dust[num5].scale *= 0.8f;
                }
                return;
            }
            if (Style == 4)
            {
                Game1.PlaySound(2, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2, 8);
                int num6 = effectRect.Width * effectRect.Height / 5;
                for (int n = 0; n < num6; n++)
                {
                    Dust dust = Game1.dust[Dust.NewDust(effectRect.TopLeft(), effectRect.Width, effectRect.Height, 263, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f)];
                    dust.color = PortalHelper.GetPortalColor(extraInfo);
                    dust.noLight = true;
                    dust.noGravity = true;
                    dust.scale = 1.2f;
                    dust.fadeIn = 0.4f;
                    dust.color.A = 255;
                }
            }
        }
        public static void Ambience()
        {
            Game1.ambientCounter++;
            if (Game1.ambientCounter >= 15)
            {
                Game1.ambientCounter = 0;
                Game1.PlaySound(34, (int)Game1.ambientWaterfallX, (int)Game1.ambientWaterfallY, (int)Game1.ambientWaterfallStrength);
                float num = Math.Abs(Game1.ambientLavaX - (Game1.screenPosition.X + (float)(Game1.screenWidth / 2))) + Math.Abs(Game1.ambientLavaY - (Game1.screenPosition.Y + (float)(Game1.screenHeight / 2)));
                float num2 = Math.Abs(Game1.ambientLavafallX - (Game1.screenPosition.X + (float)(Game1.screenWidth / 2))) + Math.Abs(Game1.ambientLavafallY - (Game1.screenPosition.Y + (float)(Game1.screenHeight / 2)));
                float num3 = Game1.ambientLavaX;
                float num4 = Game1.ambientLavaY;
                if (num2 < num)
                {
                    num3 = Game1.ambientLavafallX;
                    num4 = Game1.ambientLavafallY;
                }
                float num5 = Game1.ambientLavafallStrength + Game1.ambientLavaStrength;
                Game1.PlaySound(35, (int)num3, (int)num4, (int)num5);
            }
        }
        public unsafe static void CritterCages()
        {
            if (Game1.critterCage)
            {
                for (int i = 0; i < Game1.cageFrames; i++)
                {
                    if (Game1.bunnyCageFrame[i] == 0)
                    {
                        Game1.bunnyCageFrameCounter[i]++;
                        if (Game1.bunnyCageFrameCounter[i] > Game1.rand.Next(30, 900))
                        {
                            if (Game1.rand.Next(3) != 0)
                            {
                                int num = Game1.rand.Next(7);
                                if (num == 0)
                                {
                                    Game1.bunnyCageFrame[i] = 4;
                                }
                                else if (num <= 2)
                                {
                                    Game1.bunnyCageFrame[i] = 2;
                                }
                                else
                                {
                                    Game1.bunnyCageFrame[i] = 1;
                                }
                            }
                            Game1.bunnyCageFrameCounter[i] = 0;
                        }
                    }
                    else if (Game1.bunnyCageFrame[i] == 1)
                    {
                        Game1.bunnyCageFrameCounter[i]++;
                        if (Game1.bunnyCageFrameCounter[i] >= 10)
                        {
                            Game1.bunnyCageFrameCounter[i] = 0;
                            Game1.bunnyCageFrame[i] = 0;
                        }
                    }
                    else if (Game1.bunnyCageFrame[i] >= 2 && Game1.bunnyCageFrame[i] <= 3)
                    {
                        Game1.bunnyCageFrameCounter[i]++;
                        if (Game1.bunnyCageFrameCounter[i] >= 10)
                        {
                            Game1.bunnyCageFrameCounter[i] = 0;
                            Game1.bunnyCageFrame[i]++;
                        }
                        if (Game1.bunnyCageFrame[i] > 3)
                        {
                            Game1.bunnyCageFrame[i] = 0;
                        }
                    }
                    else if (Game1.bunnyCageFrame[i] >= 4 && Game1.bunnyCageFrame[i] <= 10)
                    {
                        Game1.bunnyCageFrameCounter[i]++;
                        if (Game1.bunnyCageFrameCounter[i] >= 5)
                        {
                            Game1.bunnyCageFrameCounter[i] = 0;
                            Game1.bunnyCageFrame[i]++;
                        }
                    }
                    else if (Game1.bunnyCageFrame[i] == 11)
                    {
                        Game1.bunnyCageFrameCounter[i]++;
                        if (Game1.bunnyCageFrameCounter[i] > Game1.rand.Next(30, 900))
                        {
                            if (Game1.rand.Next(3) != 0)
                            {
                                if (Game1.rand.Next(7) == 0)
                                {
                                    Game1.bunnyCageFrame[i] = 13;
                                }
                                else
                                {
                                    Game1.bunnyCageFrame[i] = 12;
                                }
                            }
                            Game1.bunnyCageFrameCounter[i] = 0;
                        }
                    }
                    else if (Game1.bunnyCageFrame[i] == 12)
                    {
                        Game1.bunnyCageFrameCounter[i]++;
                        if (Game1.bunnyCageFrameCounter[i] >= 10)
                        {
                            Game1.bunnyCageFrameCounter[i] = 0;
                            Game1.bunnyCageFrame[i] = 11;
                        }
                    }
                    else if (Game1.bunnyCageFrame[i] >= 13)
                    {
                        Game1.bunnyCageFrameCounter[i]++;
                        if (Game1.bunnyCageFrameCounter[i] >= 5)
                        {
                            Game1.bunnyCageFrameCounter[i] = 0;
                            Game1.bunnyCageFrame[i]++;
                        }
                        if (Game1.bunnyCageFrame[i] > 21)
                        {
                            Game1.bunnyCageFrame[i] = 0;
                        }
                    }
                }
                for (int j = 0; j < Game1.cageFrames; j++)
                {
                    if (Game1.squirrelCageFrame[j] == 0)
                    {
                        Game1.squirrelCageFrameCounter[j]++;
                        if (Game1.squirrelCageFrameCounter[j] > Game1.rand.Next(30, 900))
                        {
                            if (Game1.rand.Next(3) != 0)
                            {
                                int num = Game1.rand.Next(7);
                                if (num == 0)
                                {
                                    Game1.squirrelCageFrame[j] = 4;
                                }
                                else if (num <= 2)
                                {
                                    Game1.squirrelCageFrame[j] = 2;
                                }
                                else
                                {
                                    Game1.squirrelCageFrame[j] = 1;
                                }
                            }
                            Game1.squirrelCageFrameCounter[j] = 0;
                        }
                    }
                    else if (Game1.squirrelCageFrame[j] == 1)
                    {
                        Game1.squirrelCageFrameCounter[j]++;
                        if (Game1.squirrelCageFrameCounter[j] >= 10)
                        {
                            Game1.squirrelCageFrameCounter[j] = 0;
                            Game1.squirrelCageFrame[j] = 0;
                        }
                    }
                    else if (Game1.squirrelCageFrame[j] >= 2 && Game1.squirrelCageFrame[j] <= 3)
                    {
                        Game1.squirrelCageFrameCounter[j]++;
                        if (Game1.squirrelCageFrameCounter[j] >= 5)
                        {
                            Game1.squirrelCageFrameCounter[j] = 0;
                            Game1.squirrelCageFrame[j]++;
                        }
                        if (Game1.squirrelCageFrame[j] > 3)
                        {
                            if (Game1.rand.Next(5) == 0)
                            {
                                Game1.squirrelCageFrame[j] = 0;
                            }
                            else
                            {
                                Game1.squirrelCageFrame[j] = 2;
                            }
                        }
                    }
                    else if (Game1.squirrelCageFrame[j] >= 4 && Game1.squirrelCageFrame[j] <= 8)
                    {
                        Game1.squirrelCageFrameCounter[j]++;
                        if (Game1.squirrelCageFrameCounter[j] >= 5)
                        {
                            Game1.squirrelCageFrameCounter[j] = 0;
                            Game1.squirrelCageFrame[j]++;
                        }
                    }
                    else if (Game1.squirrelCageFrame[j] == 9)
                    {
                        Game1.squirrelCageFrameCounter[j]++;
                        if (Game1.squirrelCageFrameCounter[j] > Game1.rand.Next(30, 900))
                        {
                            if (Game1.rand.Next(3) != 0)
                            {
                                int num = Game1.rand.Next(7);
                                if (num == 0)
                                {
                                    Game1.squirrelCageFrame[j] = 13;
                                }
                                else if (num <= 2)
                                {
                                    Game1.squirrelCageFrame[j] = 11;
                                }
                                else
                                {
                                    Game1.squirrelCageFrame[j] = 10;
                                }
                            }
                            Game1.squirrelCageFrameCounter[j] = 0;
                        }
                    }
                    else if (Game1.squirrelCageFrame[j] == 10)
                    {
                        Game1.squirrelCageFrameCounter[j]++;
                        if (Game1.squirrelCageFrameCounter[j] >= 10)
                        {
                            Game1.squirrelCageFrameCounter[j] = 0;
                            Game1.squirrelCageFrame[j] = 9;
                        }
                    }
                    else if (Game1.squirrelCageFrame[j] == 11 || Game1.squirrelCageFrame[j] == 12)
                    {
                        Game1.squirrelCageFrameCounter[j]++;
                        if (Game1.squirrelCageFrameCounter[j] >= 5)
                        {
                            Game1.squirrelCageFrame[j]++;
                            if (Game1.squirrelCageFrame[j] > 12)
                            {
                                if (Game1.rand.Next(5) != 0)
                                {
                                    Game1.squirrelCageFrame[j] = 11;
                                }
                                else
                                {
                                    Game1.squirrelCageFrame[j] = 9;
                                }
                            }
                            Game1.squirrelCageFrameCounter[j] = 0;
                        }
                    }
                    else if (Game1.squirrelCageFrame[j] >= 13)
                    {
                        Game1.squirrelCageFrameCounter[j]++;
                        if (Game1.squirrelCageFrameCounter[j] >= 5)
                        {
                            Game1.squirrelCageFrameCounter[j] = 0;
                            Game1.squirrelCageFrame[j]++;
                        }
                        if (Game1.squirrelCageFrame[j] > 17)
                        {
                            Game1.squirrelCageFrame[j] = 0;
                        }
                    }
                }
                for (int k = 0; k < Game1.cageFrames; k++)
                {
                    if (Game1.squirrelCageFrameOrange[k] == 0)
                    {
                        Game1.squirrelCageFrameCounterOrange[k]++;
                        if (Game1.squirrelCageFrameCounterOrange[k] > Game1.rand.Next(30, 900))
                        {
                            if (Game1.rand.Next(3) != 0)
                            {
                                int num = Game1.rand.Next(7);
                                if (num == 0)
                                {
                                    Game1.squirrelCageFrameOrange[k] = 4;
                                }
                                else if (num <= 2)
                                {
                                    Game1.squirrelCageFrameOrange[k] = 2;
                                }
                                else
                                {
                                    Game1.squirrelCageFrameOrange[k] = 1;
                                }
                            }
                            Game1.squirrelCageFrameCounterOrange[k] = 0;
                        }
                    }
                    else if (Game1.squirrelCageFrameOrange[k] == 1)
                    {
                        Game1.squirrelCageFrameCounterOrange[k]++;
                        if (Game1.squirrelCageFrameCounterOrange[k] >= 10)
                        {
                            Game1.squirrelCageFrameCounterOrange[k] = 0;
                            Game1.squirrelCageFrameOrange[k] = 0;
                        }
                    }
                    else if (Game1.squirrelCageFrameOrange[k] >= 2 && Game1.squirrelCageFrameOrange[k] <= 3)
                    {
                        Game1.squirrelCageFrameCounterOrange[k]++;
                        if (Game1.squirrelCageFrameCounterOrange[k] >= 5)
                        {
                            Game1.squirrelCageFrameCounterOrange[k] = 0;
                            Game1.squirrelCageFrameOrange[k]++;
                        }
                        if (Game1.squirrelCageFrameOrange[k] > 3)
                        {
                            if (Game1.rand.Next(5) == 0)
                            {
                                Game1.squirrelCageFrameOrange[k] = 0;
                            }
                            else
                            {
                                Game1.squirrelCageFrameOrange[k] = 2;
                            }
                        }
                    }
                    else if (Game1.squirrelCageFrameOrange[k] >= 4 && Game1.squirrelCageFrameOrange[k] <= 8)
                    {
                        Game1.squirrelCageFrameCounterOrange[k]++;
                        if (Game1.squirrelCageFrameCounterOrange[k] >= 5)
                        {
                            Game1.squirrelCageFrameCounterOrange[k] = 0;
                            Game1.squirrelCageFrameOrange[k]++;
                        }
                    }
                    else if (Game1.squirrelCageFrameOrange[k] == 9)
                    {
                        Game1.squirrelCageFrameCounterOrange[k]++;
                        if (Game1.squirrelCageFrameCounterOrange[k] > Game1.rand.Next(30, 900))
                        {
                            if (Game1.rand.Next(3) != 0)
                            {
                                int num = Game1.rand.Next(7);
                                if (num == 0)
                                {
                                    Game1.squirrelCageFrameOrange[k] = 13;
                                }
                                else if (num <= 2)
                                {
                                    Game1.squirrelCageFrameOrange[k] = 11;
                                }
                                else
                                {
                                    Game1.squirrelCageFrameOrange[k] = 10;
                                }
                            }
                            Game1.squirrelCageFrameCounterOrange[k] = 0;
                        }
                    }
                    else if (Game1.squirrelCageFrameOrange[k] == 10)
                    {
                        Game1.squirrelCageFrameCounterOrange[k]++;
                        if (Game1.squirrelCageFrameCounterOrange[k] >= 10)
                        {
                            Game1.squirrelCageFrameCounterOrange[k] = 0;
                            Game1.squirrelCageFrameOrange[k] = 9;
                        }
                    }
                    else if (Game1.squirrelCageFrameOrange[k] == 11 || Game1.squirrelCageFrameOrange[k] == 12)
                    {
                        Game1.squirrelCageFrameCounterOrange[k]++;
                        if (Game1.squirrelCageFrameCounterOrange[k] >= 5)
                        {
                            Game1.squirrelCageFrameOrange[k]++;
                            if (Game1.squirrelCageFrameOrange[k] > 12)
                            {
                                if (Game1.rand.Next(5) != 0)
                                {
                                    Game1.squirrelCageFrameOrange[k] = 11;
                                }
                                else
                                {
                                    Game1.squirrelCageFrameOrange[k] = 9;
                                }
                            }
                            Game1.squirrelCageFrameCounterOrange[k] = 0;
                        }
                    }
                    else if (Game1.squirrelCageFrameOrange[k] >= 13)
                    {
                        Game1.squirrelCageFrameCounterOrange[k]++;
                        if (Game1.squirrelCageFrameCounterOrange[k] >= 5)
                        {
                            Game1.squirrelCageFrameCounterOrange[k] = 0;
                            Game1.squirrelCageFrameOrange[k]++;
                        }
                        if (Game1.squirrelCageFrameOrange[k] > 17)
                        {
                            Game1.squirrelCageFrameOrange[k] = 0;
                        }
                    }
                }
                for (int l = 0; l < Game1.cageFrames; l++)
                {
                    if (Game1.mallardCageFrame[l] == 0 || Game1.mallardCageFrame[l] == 4)
                    {
                        Game1.mallardCageFrameCounter[l]++;
                        if (Game1.mallardCageFrameCounter[l] > Game1.rand.Next(45, 2700))
                        {
                            if ((Game1.mallardCageFrame[l] == 0 && Game1.rand.Next(3) != 0) || (Game1.mallardCageFrame[l] == 4 && Game1.rand.Next(5) == 0))
                            {
                                if (Game1.rand.Next(6) == 0)
                                {
                                    Game1.mallardCageFrame[l] = 5;
                                }
                                else if (Game1.rand.Next(3) == 0)
                                {
                                    if (Game1.mallardCageFrame[l] == 4)
                                    {
                                        Game1.mallardCageFrame[l] = 0;
                                    }
                                    else
                                    {
                                        Game1.mallardCageFrame[l] = 4;
                                    }
                                }
                                else
                                {
                                    Game1.mallardCageFrame[l] = 1;
                                }
                            }
                            Game1.mallardCageFrameCounter[l] = 0;
                        }
                    }
                    else if (Game1.mallardCageFrame[l] >= 1 && Game1.mallardCageFrame[l] <= 3)
                    {
                        Game1.mallardCageFrameCounter[l]++;
                        if (Game1.mallardCageFrameCounter[l] >= 5)
                        {
                            Game1.mallardCageFrameCounter[l] = 0;
                            Game1.mallardCageFrame[l]++;
                        }
                        if (Game1.mallardCageFrame[l] > 3)
                        {
                            if (Game1.rand.Next(5) == 0)
                            {
                                Game1.mallardCageFrame[l] = 0;
                            }
                            else
                            {
                                Game1.mallardCageFrame[l] = 1;
                            }
                        }
                    }
                    else if (Game1.mallardCageFrame[l] >= 5 && Game1.mallardCageFrame[l] <= 11)
                    {
                        Game1.mallardCageFrameCounter[l]++;
                        if (Game1.mallardCageFrameCounter[l] >= 5)
                        {
                            Game1.mallardCageFrameCounter[l] = 0;
                            Game1.mallardCageFrame[l]++;
                        }
                    }
                    else if (Game1.mallardCageFrame[l] == 12 || Game1.mallardCageFrame[l] == 16)
                    {
                        Game1.mallardCageFrameCounter[l]++;
                        if (Game1.mallardCageFrameCounter[l] > Game1.rand.Next(45, 2700))
                        {
                            if ((Game1.mallardCageFrame[l] == 12 && Game1.rand.Next(3) != 0) || (Game1.mallardCageFrame[l] == 16 && Game1.rand.Next(5) == 0))
                            {
                                if (Game1.rand.Next(6) == 0)
                                {
                                    Game1.mallardCageFrame[l] = 17;
                                }
                                else if (Game1.rand.Next(3) == 0)
                                {
                                    if (Game1.mallardCageFrame[l] == 16)
                                    {
                                        Game1.mallardCageFrame[l] = 12;
                                    }
                                    else
                                    {
                                        Game1.mallardCageFrame[l] = 16;
                                    }
                                }
                                else
                                {
                                    Game1.mallardCageFrame[l] = 13;
                                }
                            }
                            Game1.mallardCageFrameCounter[l] = 0;
                        }
                    }
                    else if (Game1.mallardCageFrame[l] >= 13 && Game1.mallardCageFrame[l] <= 15)
                    {
                        Game1.mallardCageFrameCounter[l]++;
                        if (Game1.mallardCageFrameCounter[l] >= 5)
                        {
                            Game1.mallardCageFrame[l]++;
                            if (Game1.mallardCageFrame[l] > 15)
                            {
                                if (Game1.rand.Next(5) != 0)
                                {
                                    Game1.mallardCageFrame[l] = 12;
                                }
                                else
                                {
                                    Game1.mallardCageFrame[l] = 13;
                                }
                            }
                            Game1.mallardCageFrameCounter[l] = 0;
                        }
                    }
                    else if (Game1.mallardCageFrame[l] >= 17)
                    {
                        Game1.mallardCageFrameCounter[l]++;
                        if (Game1.mallardCageFrameCounter[l] >= 5)
                        {
                            Game1.mallardCageFrameCounter[l] = 0;
                            Game1.mallardCageFrame[l]++;
                        }
                        if (Game1.mallardCageFrame[l] > 23)
                        {
                            Game1.mallardCageFrame[l] = 0;
                        }
                    }
                }
                for (int m = 0; m < Game1.cageFrames; m++)
                {
                    if (Game1.duckCageFrame[m] == 0 || Game1.duckCageFrame[m] == 4)
                    {
                        Game1.duckCageFrameCounter[m]++;
                        if (Game1.duckCageFrameCounter[m] > Game1.rand.Next(45, 2700))
                        {
                            if ((Game1.duckCageFrame[m] == 0 && Game1.rand.Next(3) != 0) || (Game1.duckCageFrame[m] == 4 && Game1.rand.Next(5) == 0))
                            {
                                if (Game1.rand.Next(6) == 0)
                                {
                                    Game1.duckCageFrame[m] = 5;
                                }
                                else if (Game1.rand.Next(3) == 0)
                                {
                                    if (Game1.duckCageFrame[m] == 4)
                                    {
                                        Game1.duckCageFrame[m] = 0;
                                    }
                                    else
                                    {
                                        Game1.duckCageFrame[m] = 4;
                                    }
                                }
                                else
                                {
                                    Game1.duckCageFrame[m] = 1;
                                }
                            }
                            Game1.duckCageFrameCounter[m] = 0;
                        }
                    }
                    else if (Game1.duckCageFrame[m] >= 1 && Game1.duckCageFrame[m] <= 3)
                    {
                        Game1.duckCageFrameCounter[m]++;
                        if (Game1.duckCageFrameCounter[m] >= 5)
                        {
                            Game1.duckCageFrameCounter[m] = 0;
                            Game1.duckCageFrame[m]++;
                        }
                        if (Game1.duckCageFrame[m] > 3)
                        {
                            if (Game1.rand.Next(5) == 0)
                            {
                                Game1.duckCageFrame[m] = 0;
                            }
                            else
                            {
                                Game1.duckCageFrame[m] = 1;
                            }
                        }
                    }
                    else if (Game1.duckCageFrame[m] >= 5 && Game1.duckCageFrame[m] <= 11)
                    {
                        Game1.duckCageFrameCounter[m]++;
                        if (Game1.duckCageFrameCounter[m] >= 5)
                        {
                            Game1.duckCageFrameCounter[m] = 0;
                            Game1.duckCageFrame[m]++;
                        }
                    }
                    else if (Game1.duckCageFrame[m] == 12 || Game1.duckCageFrame[m] == 16)
                    {
                        Game1.duckCageFrameCounter[m]++;
                        if (Game1.duckCageFrameCounter[m] > Game1.rand.Next(45, 2700))
                        {
                            if ((Game1.duckCageFrame[m] == 12 && Game1.rand.Next(3) != 0) || (Game1.duckCageFrame[m] == 16 && Game1.rand.Next(5) == 0))
                            {
                                if (Game1.rand.Next(6) == 0)
                                {
                                    Game1.duckCageFrame[m] = 17;
                                }
                                else if (Game1.rand.Next(3) == 0)
                                {
                                    if (Game1.duckCageFrame[m] == 16)
                                    {
                                        Game1.duckCageFrame[m] = 12;
                                    }
                                    else
                                    {
                                        Game1.duckCageFrame[m] = 16;
                                    }
                                }
                                else
                                {
                                    Game1.duckCageFrame[m] = 13;
                                }
                            }
                            Game1.duckCageFrameCounter[m] = 0;
                        }
                    }
                    else if (Game1.duckCageFrame[m] >= 13 && Game1.duckCageFrame[m] <= 15)
                    {
                        Game1.duckCageFrameCounter[m]++;
                        if (Game1.duckCageFrameCounter[m] >= 5)
                        {
                            Game1.duckCageFrame[m]++;
                            if (Game1.duckCageFrame[m] > 15)
                            {
                                if (Game1.rand.Next(5) != 0)
                                {
                                    Game1.duckCageFrame[m] = 12;
                                }
                                else
                                {
                                    Game1.duckCageFrame[m] = 13;
                                }
                            }
                            Game1.duckCageFrameCounter[m] = 0;
                        }
                    }
                    else if (Game1.duckCageFrame[m] >= 17)
                    {
                        Game1.duckCageFrameCounter[m]++;
                        if (Game1.duckCageFrameCounter[m] >= 5)
                        {
                            Game1.duckCageFrameCounter[m] = 0;
                            Game1.duckCageFrame[m]++;
                        }
                        if (Game1.duckCageFrame[m] > 23)
                        {
                            Game1.duckCageFrame[m] = 0;
                        }
                    }
                }
                for (int n = 0; n < Game1.cageFrames; n++)
                {
                    if (Game1.birdCageFrame[n] == 0)
                    {
                        Game1.birdCageFrameCounter[n]++;
                        if (Game1.birdCageFrameCounter[n] > Game1.rand.Next(30, 2700))
                        {
                            if (Game1.rand.Next(3) != 0)
                            {
                                if (Game1.rand.Next(3) != 0)
                                {
                                    Game1.birdCageFrame[n] = 2;
                                }
                                else
                                {
                                    Game1.birdCageFrame[n] = 1;
                                }
                            }
                            Game1.birdCageFrameCounter[n] = 0;
                        }
                    }
                    else if (Game1.birdCageFrame[n] == 1)
                    {
                        Game1.birdCageFrameCounter[n]++;
                        if (Game1.birdCageFrameCounter[n] > Game1.rand.Next(900, 18000) && Game1.rand.Next(3) == 0)
                        {
                            Game1.birdCageFrameCounter[n] = 0;
                            Game1.birdCageFrame[n] = 0;
                        }
                    }
                    else if (Game1.birdCageFrame[n] >= 2 && Game1.birdCageFrame[n] <= 5)
                    {
                        Game1.birdCageFrameCounter[n]++;
                        if (Game1.birdCageFrameCounter[n] >= 5)
                        {
                            Game1.birdCageFrameCounter[n] = 0;
                            if (Game1.birdCageFrame[n] == 3 && Game1.rand.Next(3) == 0)
                            {
                                Game1.birdCageFrame[n] = 13;
                            }
                            else
                            {
                                Game1.birdCageFrame[n]++;
                            }
                        }
                    }
                    else if (Game1.birdCageFrame[n] == 6)
                    {
                        Game1.birdCageFrameCounter[n]++;
                        if (Game1.birdCageFrameCounter[n] > Game1.rand.Next(45, 2700))
                        {
                            if (Game1.rand.Next(3) != 0)
                            {
                                if (Game1.rand.Next(6) == 0)
                                {
                                    Game1.birdCageFrame[n] = 7;
                                }
                                else if (Game1.rand.Next(6) == 0)
                                {
                                    Game1.birdCageFrame[n] = 11;
                                }
                            }
                            Game1.birdCageFrameCounter[n] = 0;
                        }
                    }
                    else if (Game1.birdCageFrame[n] >= 7 && Game1.birdCageFrame[n] <= 10)
                    {
                        Game1.birdCageFrameCounter[n]++;
                        if (Game1.birdCageFrameCounter[n] >= 5)
                        {
                            Game1.birdCageFrame[n]++;
                            if (Game1.birdCageFrame[n] > 10)
                            {
                                Game1.birdCageFrame[n] = 0;
                            }
                            Game1.birdCageFrameCounter[n] = 0;
                        }
                    }
                    else if (Game1.birdCageFrame[n] >= 11 && Game1.birdCageFrame[n] <= 13)
                    {
                        Game1.birdCageFrameCounter[n]++;
                        if (Game1.birdCageFrameCounter[n] >= 5)
                        {
                            Game1.birdCageFrame[n]++;
                            Game1.birdCageFrameCounter[n] = 0;
                        }
                    }
                    else if (Game1.birdCageFrame[n] == 14)
                    {
                        Game1.birdCageFrameCounter[n]++;
                        if (Game1.birdCageFrameCounter[n] > Game1.rand.Next(5, 600))
                        {
                            if (Game1.rand.Next(20) == 0)
                            {
                                Game1.birdCageFrame[n] = 16;
                            }
                            else if (Game1.rand.Next(20) == 0)
                            {
                                Game1.birdCageFrame[n] = 4;
                            }
                            else
                            {
                                Game1.birdCageFrame[n] = 15;
                            }
                            Game1.birdCageFrameCounter[n] = 0;
                        }
                    }
                    else if (Game1.birdCageFrame[n] == 15)
                    {
                        Game1.birdCageFrameCounter[n]++;
                        if (Game1.birdCageFrameCounter[n] >= 10)
                        {
                            Game1.birdCageFrameCounter[n] = 0;
                            Game1.birdCageFrame[n] = 14;
                        }
                    }
                    else if (Game1.birdCageFrame[n] >= 16 && Game1.birdCageFrame[n] <= 18)
                    {
                        Game1.birdCageFrameCounter[n]++;
                        if (Game1.birdCageFrameCounter[n] >= 5)
                        {
                            Game1.birdCageFrame[n]++;
                            if (Game1.birdCageFrame[n] > 18)
                            {
                                Game1.birdCageFrame[n] = 0;
                            }
                            Game1.birdCageFrameCounter[n] = 0;
                        }
                    }
                }
                for (int num2 = 0; num2 < Game1.cageFrames; num2++)
                {
                    if (Game1.blueBirdCageFrame[num2] == 0)
                    {
                        Game1.blueBirdCageFrameCounter[num2]++;
                        if (Game1.blueBirdCageFrameCounter[num2] > Game1.rand.Next(30, 2700))
                        {
                            if (Game1.rand.Next(3) != 0)
                            {
                                if (Game1.rand.Next(3) != 0)
                                {
                                    Game1.blueBirdCageFrame[num2] = 2;
                                }
                                else
                                {
                                    Game1.blueBirdCageFrame[num2] = 1;
                                }
                            }
                            Game1.blueBirdCageFrameCounter[num2] = 0;
                        }
                    }
                    else if (Game1.blueBirdCageFrame[num2] == 1)
                    {
                        Game1.blueBirdCageFrameCounter[num2]++;
                        if (Game1.blueBirdCageFrameCounter[num2] > Game1.rand.Next(900, 18000) && Game1.rand.Next(3) == 0)
                        {
                            Game1.blueBirdCageFrameCounter[num2] = 0;
                            Game1.blueBirdCageFrame[num2] = 0;
                        }
                    }
                    else if (Game1.blueBirdCageFrame[num2] >= 2 && Game1.blueBirdCageFrame[num2] <= 5)
                    {
                        Game1.blueBirdCageFrameCounter[num2]++;
                        if (Game1.blueBirdCageFrameCounter[num2] >= 5)
                        {
                            Game1.blueBirdCageFrameCounter[num2] = 0;
                            if (Game1.blueBirdCageFrame[num2] == 3 && Game1.rand.Next(3) == 0)
                            {
                                Game1.blueBirdCageFrame[num2] = 13;
                            }
                            else
                            {
                                Game1.blueBirdCageFrame[num2]++;
                            }
                        }
                    }
                    else if (Game1.blueBirdCageFrame[num2] == 6)
                    {
                        Game1.blueBirdCageFrameCounter[num2]++;
                        if (Game1.blueBirdCageFrameCounter[num2] > Game1.rand.Next(45, 2700))
                        {
                            if (Game1.rand.Next(3) != 0)
                            {
                                if (Game1.rand.Next(6) == 0)
                                {
                                    Game1.blueBirdCageFrame[num2] = 7;
                                }
                                else if (Game1.rand.Next(6) == 0)
                                {
                                    Game1.blueBirdCageFrame[num2] = 11;
                                }
                            }
                            Game1.blueBirdCageFrameCounter[num2] = 0;
                        }
                    }
                    else if (Game1.blueBirdCageFrame[num2] >= 7 && Game1.blueBirdCageFrame[num2] <= 10)
                    {
                        Game1.blueBirdCageFrameCounter[num2]++;
                        if (Game1.blueBirdCageFrameCounter[num2] >= 5)
                        {
                            Game1.blueBirdCageFrame[num2]++;
                            if (Game1.blueBirdCageFrame[num2] > 10)
                            {
                                Game1.blueBirdCageFrame[num2] = 0;
                            }
                            Game1.blueBirdCageFrameCounter[num2] = 0;
                        }
                    }
                    else if (Game1.blueBirdCageFrame[num2] >= 11 && Game1.blueBirdCageFrame[num2] <= 13)
                    {
                        Game1.blueBirdCageFrameCounter[num2]++;
                        if (Game1.blueBirdCageFrameCounter[num2] >= 5)
                        {
                            Game1.blueBirdCageFrame[num2]++;
                            Game1.blueBirdCageFrameCounter[num2] = 0;
                        }
                    }
                    else if (Game1.blueBirdCageFrame[num2] == 14)
                    {
                        Game1.blueBirdCageFrameCounter[num2]++;
                        if (Game1.blueBirdCageFrameCounter[num2] > Game1.rand.Next(5, 600))
                        {
                            if (Game1.rand.Next(20) == 0)
                            {
                                Game1.blueBirdCageFrame[num2] = 16;
                            }
                            else if (Game1.rand.Next(20) == 0)
                            {
                                Game1.blueBirdCageFrame[num2] = 4;
                            }
                            else
                            {
                                Game1.blueBirdCageFrame[num2] = 15;
                            }
                            Game1.blueBirdCageFrameCounter[num2] = 0;
                        }
                    }
                    else if (Game1.blueBirdCageFrame[num2] == 15)
                    {
                        Game1.blueBirdCageFrameCounter[num2]++;
                        if (Game1.blueBirdCageFrameCounter[num2] >= 10)
                        {
                            Game1.blueBirdCageFrameCounter[num2] = 0;
                            Game1.blueBirdCageFrame[num2] = 14;
                        }
                    }
                    else if (Game1.blueBirdCageFrame[num2] >= 16 && Game1.blueBirdCageFrame[num2] <= 18)
                    {
                        Game1.blueBirdCageFrameCounter[num2]++;
                        if (Game1.blueBirdCageFrameCounter[num2] >= 5)
                        {
                            Game1.blueBirdCageFrame[num2]++;
                            if (Game1.blueBirdCageFrame[num2] > 18)
                            {
                                Game1.blueBirdCageFrame[num2] = 0;
                            }
                            Game1.blueBirdCageFrameCounter[num2] = 0;
                        }
                    }
                }
                for (int num3 = 0; num3 < Game1.cageFrames; num3++)
                {
                    if (Game1.redBirdCageFrame[num3] == 0)
                    {
                        Game1.redBirdCageFrameCounter[num3]++;
                        if (Game1.redBirdCageFrameCounter[num3] > Game1.rand.Next(30, 2700))
                        {
                            if (Game1.rand.Next(3) != 0)
                            {
                                if (Game1.rand.Next(3) != 0)
                                {
                                    Game1.redBirdCageFrame[num3] = 2;
                                }
                                else
                                {
                                    Game1.redBirdCageFrame[num3] = 1;
                                }
                            }
                            Game1.redBirdCageFrameCounter[num3] = 0;
                        }
                    }
                    else if (Game1.redBirdCageFrame[num3] == 1)
                    {
                        Game1.redBirdCageFrameCounter[num3]++;
                        if (Game1.redBirdCageFrameCounter[num3] > Game1.rand.Next(900, 18000)
                            && Game1.rand.Next(3) == 0)
                        {
                            Game1.redBirdCageFrameCounter[num3] = 0;
                            Game1.redBirdCageFrame[num3] = 0;
                        }
                    }
                    else if (Game1.redBirdCageFrame[num3] >= 2 && Game1.redBirdCageFrame[num3] <= 5)
                    {
                        Game1.redBirdCageFrameCounter[num3]++;
                        if (Game1.redBirdCageFrameCounter[num3] >= 5)
                        {
                            Game1.redBirdCageFrameCounter[num3] = 0;
                            if (Game1.redBirdCageFrame[num3] == 3 && Game1.rand.Next(3) == 0)
                            {
                                Game1.redBirdCageFrame[num3] = 13;
                            }
                            else
                            {
                                Game1.redBirdCageFrame[num3]++;
                            }
                        }
                    }
                    else if (Game1.redBirdCageFrame[num3] == 6)
                    {
                        Game1.redBirdCageFrameCounter[num3]++;
                        if (Game1.redBirdCageFrameCounter[num3] > Game1.rand.Next(45, 2700))
                        {
                            if (Game1.rand.Next(3) != 0)
                            {
                                if (Game1.rand.Next(6) == 0)
                                {
                                    Game1.redBirdCageFrame[num3] = 7;
                                }
                                else if (Game1.rand.Next(6) == 0)
                                {
                                    Game1.redBirdCageFrame[num3] = 11;
                                }
                            }
                            Game1.redBirdCageFrameCounter[num3] = 0;
                        }
                    }
                    else if (Game1.redBirdCageFrame[num3] >= 7
                        && Game1.redBirdCageFrame[num3] <= 10)
                    {
                        Game1.redBirdCageFrameCounter[num3]++;
                        if (Game1.redBirdCageFrameCounter[num3] >= 5)
                        {
                            Game1.redBirdCageFrame[num3]++;
                            if (Game1.redBirdCageFrame[num3] > 10)
                            {
                                Game1.redBirdCageFrame[num3] = 0;
                            }
                            Game1.redBirdCageFrameCounter[num3] = 0;
                        }
                    }
                    else if (Game1.redBirdCageFrame[num3] >= 11
                        && Game1.redBirdCageFrame[num3] <= 13)
                    {
                        Game1.redBirdCageFrameCounter[num3]++;
                        if (Game1.redBirdCageFrameCounter[num3] >= 5)
                        {
                            Game1.redBirdCageFrame[num3]++;
                            Game1.redBirdCageFrameCounter[num3] = 0;
                        }
                    }
                    else if (Game1.redBirdCageFrame[num3] == 14)
                    {
                        Game1.redBirdCageFrameCounter[num3]++;
                        if (Game1.redBirdCageFrameCounter[num3] > Game1.rand.Next(5, 600))
                        {
                            if (Game1.rand.Next(20) == 0)
                            {
                                Game1.redBirdCageFrame[num3] = 16;
                            }
                            else if (Game1.rand.Next(20) == 0)
                            {
                                Game1.redBirdCageFrame[num3] = 4;
                            }
                            else
                            {
                                Game1.redBirdCageFrame[num3] = 15;
                            }
                            Game1.redBirdCageFrameCounter[num3] = 0;
                        }
                    }
                    else if (Game1.redBirdCageFrame[num3] == 15)
                    {
                        Game1.redBirdCageFrameCounter[num3]++;
                        if (Game1.redBirdCageFrameCounter[num3] >= 10)
                        {
                            Game1.redBirdCageFrameCounter[num3] = 0;
                            Game1.redBirdCageFrame[num3] = 14;
                        }
                    }
                    else if (Game1.redBirdCageFrame[num3] >= 16
                        && Game1.redBirdCageFrame[num3] <= 18)
                    {
                        Game1.redBirdCageFrameCounter[num3]++;
                        if (Game1.redBirdCageFrameCounter[num3] >= 5)
                        {
                            Game1.redBirdCageFrame[num3]++;
                            if (Game1.redBirdCageFrame[num3] > 18)
                            {
                                Game1.redBirdCageFrame[num3] = 0;
                            }
                            Game1.redBirdCageFrameCounter[num3] = 0;
                        }
                    }
                }
                for (int num4 = 0; num4 < 2; num4++)
                {
                    for (int num5 = 0; num5 < Game1.cageFrames; num5++)
                    {
                        if (Game1.scorpionCageFrame[num4, num5] == 0
                            || Game1.scorpionCageFrame[num4, num5] == 7)
                        {
                            Game1.scorpionCageFrameCounter[num4, num5]++;
                            if (Game1.scorpionCageFrameCounter[num4, num5] > Game1.rand.Next(30, 3600))
                            {
                                if (Game1.scorpionCageFrame[num4, num5] == 7)
                                {
                                    Game1.scorpionCageFrame[num4, num5] = 0;
                                }
                                else if (Game1.rand.Next(3) == 0)
                                {
                                    if (Game1.rand.Next(7) == 0)
                                    {
                                        Game1.scorpionCageFrame[num4, num5] = 1;
                                    }
                                    else if (Game1.rand.Next(4) == 0)
                                    {
                                        Game1.scorpionCageFrame[num4, num5] = 8;
                                    }
                                    else if (Game1.rand.Next(3) == 0)
                                    {
                                        Game1.scorpionCageFrame[num4, num5] = 7;
                                    }
                                    else
                                    {
                                        Game1.scorpionCageFrame[num4, num5] = 14;
                                    }
                                }
                                Game1.scorpionCageFrameCounter[num4, num5] = 0;
                            }
                        }
                        else if (Game1.scorpionCageFrame[num4, num5] >= 1
                            && Game1.scorpionCageFrame[num4, num5] <= 2)
                        {
                            Game1.scorpionCageFrameCounter[num4, num5]++;
                            if (Game1.scorpionCageFrameCounter[num4, num5] >= 10)
                            {
                                Game1.scorpionCageFrameCounter[num4, num5] = 0;
                                Game1.scorpionCageFrame[num4, num5]++;
                            }
                        }
                        else if (Game1.scorpionCageFrame[num4, num5] >= 8
                            && Game1.scorpionCageFrame[num4, num5] <= 10)
                        {
                            Game1.scorpionCageFrameCounter[num4, num5]++;
                            if (Game1.scorpionCageFrameCounter[num4, num5] >= 10)
                            {
                                Game1.scorpionCageFrameCounter[num4, num5] = 0;
                                Game1.scorpionCageFrame[num4, num5]++;
                            }
                        }
                        else if (Game1.scorpionCageFrame[num4, num5] == 11)
                        {
                            Game1.scorpionCageFrameCounter[num4, num5]++;
                            if (Game1.scorpionCageFrameCounter[num4, num5] > Game1.rand.Next(45, 5400))
                            {
                                if (Game1.rand.Next(6) == 0)
                                {
                                    Game1.scorpionCageFrame[num4, num5] = 12;
                                }
                                Game1.scorpionCageFrameCounter[num4, num5] = 0;
                            }
                        }
                        else if (Game1.scorpionCageFrame[num4, num5] >= 12
                            && Game1.scorpionCageFrame[num4, num5] <= 13)
                        {
                            Game1.scorpionCageFrameCounter[num4, num5]++;
                            if (Game1.scorpionCageFrameCounter[num4, num5] >= 10)
                            {
                                Game1.scorpionCageFrameCounter[num4, num5] = 0;
                                Game1.scorpionCageFrame[num4, num5]++;
                                if (Game1.scorpionCageFrame[num4, num5] > 13)
                                {
                                    Game1.scorpionCageFrame[num4, num5] = 0;
                                }
                            }
                        }
                        else if (Game1.scorpionCageFrame[num4, num5] >= 14
                            && Game1.scorpionCageFrame[num4, num5] <= 15)
                        {
                            Game1.scorpionCageFrameCounter[num4, num5]++;
                            if (Game1.scorpionCageFrameCounter[num4, num5] >= 5)
                            {
                                Game1.scorpionCageFrameCounter[num4, num5] = 0;
                                Game1.scorpionCageFrame[num4, num5]++;
                                if (Game1.scorpionCageFrame[num4, num5] > 15)
                                {
                                    Game1.scorpionCageFrame[num4, num5] = 14;
                                }
                                if (Game1.rand.Next(5) == 0)
                                {
                                    Game1.scorpionCageFrame[num4, num5] = 0;
                                }
                            }
                        }
                        else if (Game1.scorpionCageFrame[num4, num5] == 4
                            || Game1.scorpionCageFrame[num4, num5] == 3)
                        {
                            Game1.scorpionCageFrameCounter[num4, num5]++;
                            if (Game1.scorpionCageFrameCounter[num4, num5] > Game1.rand.Next(30, 3600))
                            {
                                if (Game1.scorpionCageFrame[num4, num5] == 3)
                                {
                                    Game1.scorpionCageFrame[num4, num5] = 4;
                                }
                                else if (Game1.rand.Next(3) == 0)
                                {
                                    if (Game1.rand.Next(5) == 0)
                                    {
                                        Game1.scorpionCageFrame[num4, num5] = 5;
                                    }
                                    else if (Game1.rand.Next(3) == 0)
                                    {
                                        Game1.scorpionCageFrame[num4, num5] = 3;
                                    }
                                    else
                                    {
                                        Game1.scorpionCageFrame[num4, num5] = 16;
                                    }
                                }
                                Game1.scorpionCageFrameCounter[num4, num5] = 0;
                            }
                        }
                        else if (Game1.scorpionCageFrame[num4, num5] >= 5
                            && Game1.scorpionCageFrame[num4, num5] <= 6)
                        {
                            Game1.scorpionCageFrameCounter[num4, num5]++;
                            if (Game1.scorpionCageFrameCounter[num4, num5] >= 10)
                            {
                                Game1.scorpionCageFrameCounter[num4, num5] = 0;
                                Game1.scorpionCageFrame[num4, num5]++;
                                if (Game1.scorpionCageFrame[num4, num5] > 7)
                                {
                                    Game1.scorpionCageFrame[num4, num5] = 0;
                                }
                            }
                        }
                        else if (Game1.scorpionCageFrame[num4, num5] >= 16
                            && Game1.scorpionCageFrame[num4, num5] <= 17)
                        {
                            Game1.scorpionCageFrameCounter[num4, num5]++;
                            if (Game1.scorpionCageFrameCounter[num4, num5] >= 5)
                            {
                                Game1.scorpionCageFrameCounter[num4, num5] = 0;
                                Game1.scorpionCageFrame[num4, num5]++;
                                if (Game1.scorpionCageFrame[num4, num5] > 17)
                                {
                                    Game1.scorpionCageFrame[num4, num5] = 16;
                                }
                                if (Game1.rand.Next(5) == 0)
                                {
                                    Game1.scorpionCageFrame[num4, num5] = 4;
                                }
                            }
                        }
                    }
                }
                for (int num6 = 0; num6 < Game1.cageFrames; num6++)
                {
                    if (Game1.penguinCageFrame[num6] == 0)
                    {
                        Game1.penguinCageFrameCounter[num6]++;
                        if (Game1.penguinCageFrameCounter[num6] > Game1.rand.Next(30, 1800))
                        {
                            if (Game1.rand.Next(2) == 0)
                            {
                                if (Game1.rand.Next(10) == 0)
                                {
                                    Game1.penguinCageFrame[num6] = 4;
                                }
                                else if (Game1.rand.Next(7) == 0)
                                {
                                    Game1.penguinCageFrame[num6] = 15;
                                }
                                else if (Game1.rand.Next(3) == 0)
                                {
                                    Game1.penguinCageFrame[num6] = 2;
                                }
                                else
                                {
                                    Game1.penguinCageFrame[num6] = 1;
                                }
                            }
                            Game1.penguinCageFrameCounter[num6] = 0;
                        }
                    }
                    else if (Game1.penguinCageFrame[num6] == 1)
                    {
                        Game1.penguinCageFrameCounter[num6]++;
                        if (Game1.penguinCageFrameCounter[num6] >= 10)
                        {
                            Game1.penguinCageFrameCounter[num6] = 0;
                            Game1.penguinCageFrame[num6] = 0;
                        }
                    }
                    else if (Game1.penguinCageFrame[num6] >= 2 && Game1.penguinCageFrame[num6] <= 3)
                    {
                        Game1.penguinCageFrameCounter[num6]++;
                        if (Game1.penguinCageFrameCounter[num6] >= 5)
                        {
                            Game1.penguinCageFrameCounter[num6] = 0;
                            Game1.penguinCageFrame[num6]++;
                            if (Game1.penguinCageFrame[num6] > 3)
                            {
                                if (Game1.rand.Next(3) == 0)
                                {
                                    Game1.penguinCageFrame[num6] = 0;
                                }
                                else
                                {
                                    Game1.penguinCageFrame[num6] = 2;
                                }
                            }
                        }
                    }
                    else if (Game1.penguinCageFrame[num6] >= 4 && Game1.penguinCageFrame[num6] <= 6)
                    {
                        Game1.penguinCageFrameCounter[num6]++;
                        if (Game1.penguinCageFrameCounter[num6] >= 10)
                        {
                            Game1.penguinCageFrameCounter[num6] = 0;
                            Game1.penguinCageFrame[num6]++;
                        }
                    }
                    else if (Game1.penguinCageFrame[num6] == 15)
                    {
                        Game1.penguinCageFrameCounter[num6]++;
                        if (Game1.penguinCageFrameCounter[num6] > Game1.rand.Next(10, 1800))
                        {
                            if (Game1.rand.Next(2) == 0)
                            {
                                Game1.penguinCageFrame[num6] = 0;
                            }
                            Game1.penguinCageFrameCounter[num6] = 0;
                        }
                    }
                    else if (Game1.penguinCageFrame[num6] == 8)
                    {
                        Game1.penguinCageFrameCounter[num6]++;
                        if (Game1.penguinCageFrameCounter[num6] > Game1.rand.Next(30, 3600))
                        {
                            if (Game1.rand.Next(2) == 0)
                            {
                                if (Game1.rand.Next(10) == 0)
                                {
                                    Game1.penguinCageFrame[num6] = 12;
                                }
                                else if (Game1.rand.Next(7) == 0)
                                {
                                    Game1.penguinCageFrame[num6] = 7;
                                }
                                else if (Game1.rand.Next(3) == 0)
                                {
                                    Game1.penguinCageFrame[num6] = 10;
                                }
                                else
                                {
                                    Game1.penguinCageFrame[num6] = 9;
                                }
                            }
                            Game1.penguinCageFrameCounter[num6] = 0;
                        }
                    }
                    else if (Game1.penguinCageFrame[num6] == 9)
                    {
                        Game1.penguinCageFrameCounter[num6]++;
                        if (Game1.penguinCageFrameCounter[num6] >= 10)
                        {
                            Game1.penguinCageFrameCounter[num6] = 0;
                            Game1.penguinCageFrame[num6] = 8;
                        }
                    }
                    else if (Game1.penguinCageFrame[num6] >= 10 && Game1.penguinCageFrame[num6] <= 11)
                    {
                        Game1.penguinCageFrameCounter[num6]++;
                        if (Game1.penguinCageFrameCounter[num6] >= 5)
                        {
                            Game1.penguinCageFrameCounter[num6] = 0;
                            Game1.penguinCageFrame[num6]++;
                            if (Game1.penguinCageFrame[num6] > 3)
                            {
                                if (Game1.rand.Next(3) == 0)
                                {
                                    Game1.penguinCageFrame[num6] = 8;
                                }
                                else
                                {
                                    Game1.penguinCageFrame[num6] = 10;
                                }
                            }
                        }
                    }
                    else if (Game1.penguinCageFrame[num6] >= 12 && Game1.penguinCageFrame[num6] <= 14)
                    {
                        Game1.penguinCageFrameCounter[num6]++;
                        if (Game1.penguinCageFrameCounter[num6] >= 10)
                        {
                            Game1.penguinCageFrameCounter[num6] = 0;
                            Game1.penguinCageFrame[num6]++;
                        }
                    }
                    else if (Game1.penguinCageFrame[num6] == 7)
                    {
                        Game1.penguinCageFrameCounter[num6]++;
                        if (Game1.penguinCageFrameCounter[num6] > Game1.rand.Next(10, 3600))
                        {
                            if (Game1.rand.Next(2) == 0)
                            {
                                Game1.penguinCageFrame[num6] = 8;
                            }
                            Game1.penguinCageFrameCounter[num6] = 0;
                        }
                    }
                }
                for (int num7 = 0; num7 < Game1.cageFrames; num7++)
                {
                    if (Game1.snailCageFrame[num7] >= 0 && Game1.snailCageFrame[num7] <= 13)
                    {
                        Game1.snailCageFrameCounter[num7]++;
                        if (Game1.snailCageFrameCounter[num7] > Game1.rand.Next(45, 3600))
                        {
                            if (Game1.snailCageFrame[num7] == 8 && Game1.rand.Next(2) == 0)
                            {
                                Game1.snailCageFrame[num7] = 14;
                            }
                            else if (Game1.snailCageFrame[num7] == 1 && Game1.rand.Next(3) == 0)
                            {
                                Game1.snailCageFrame[num7] = 19;
                            }
                            else if (Game1.snailCageFrame[num7] == 1 && Game1.rand.Next(3) == 0)
                            {
                                Game1.snailCageFrame[num7] = 20;
                            }
                            else
                            {
                                Game1.snailCageFrame[num7]++;
                                if (Game1.snailCageFrame[num7] > 13)
                                {
                                    Game1.snailCageFrame[num7] = 0;
                                }
                            }
                            Game1.snailCageFrameCounter[num7] = 0;
                        }
                    }
                    else if (Game1.snailCageFrame[num7] >= 14 && Game1.snailCageFrame[num7] <= 18)
                    {
                        Game1.snailCageFrameCounter[num7]++;
                        if (Game1.snailCageFrameCounter[num7] >= 5)
                        {
                            Game1.snailCageFrameCounter[num7] = 0;
                            Game1.snailCageFrame[num7]++;
                        }
                        if (Game1.snailCageFrame[num7] > 18)
                        {
                            Game1.snailCageFrame[num7] = 20;
                        }
                    }
                    else if (Game1.snailCageFrame[num7] == 19 || Game1.snailCageFrame[num7] == 20)
                    {
                        Game1.snailCageFrameCounter[num7]++;
                        if (Game1.snailCageFrameCounter[num7] > Game1.rand.Next(60, 7200))
                        {
                            Game1.snailCageFrameCounter[num7] = 0;
                            if (Game1.rand.Next(4) == 0)
                            {
                                if (Game1.rand.Next(3) == 0)
                                {
                                    Game1.snailCageFrame[num7] = 2;
                                }
                                else if (Game1.snailCageFrame[num7] == 19)
                                {
                                    Game1.snailCageFrame[num7] = 20;
                                }
                                else
                                {
                                    Game1.snailCageFrame[num7] = 19;
                                }
                            }
                        }
                    }
                }
                for (int num8 = 0; num8 < Game1.cageFrames; num8++)
                {
                    if (Game1.snail2CageFrame[num8] >= 0 && Game1.snail2CageFrame[num8] <= 13)
                    {
                        Game1.snail2CageFrameCounter[num8]++;
                        if (Game1.snail2CageFrameCounter[num8] > Game1.rand.Next(30, 2700))
                        {
                            if (Game1.snail2CageFrame[num8] == 8 && Game1.rand.Next(2) == 0)
                            {
                                Game1.snail2CageFrame[num8] = 14;
                            }
                            else if (Game1.snail2CageFrame[num8] == 1 && Game1.rand.Next(3) == 0)
                            {
                                Game1.snail2CageFrame[num8] = 19;
                            }
                            else if (Game1.snail2CageFrame[num8] == 1 && Game1.rand.Next(3) == 0)
                            {
                                Game1.snail2CageFrame[num8] = 20;
                            }
                            else
                            {
                                Game1.snail2CageFrame[num8]++;
                                if (Game1.snail2CageFrame[num8] > 13)
                                {
                                    Game1.snail2CageFrame[num8] = 0;
                                }
                            }
                            Game1.snail2CageFrameCounter[num8] = 0;
                        }
                    }
                    else if (Game1.snail2CageFrame[num8] >= 14 && Game1.snail2CageFrame[num8] <= 18)
                    {
                        Game1.snail2CageFrameCounter[num8]++;
                        if (Game1.snail2CageFrameCounter[num8] >= 5)
                        {
                            Game1.snail2CageFrameCounter[num8] = 0;
                            Game1.snail2CageFrame[num8]++;
                        }
                        if (Game1.snail2CageFrame[num8] > 18)
                        {
                            Game1.snail2CageFrame[num8] = 20;
                        }
                    }
                    else if (Game1.snail2CageFrame[num8] == 19 || Game1.snail2CageFrame[num8] == 20)
                    {
                        Game1.snail2CageFrameCounter[num8]++;
                        if (Game1.snail2CageFrameCounter[num8] > Game1.rand.Next(45, 5400))
                        {
                            Game1.snail2CageFrameCounter[num8] = 0;
                            if (Game1.rand.Next(4) == 0)
                            {
                                if (Game1.rand.Next(3) == 0)
                                {
                                    Game1.snail2CageFrame[num8] = 2;
                                }
                                else if (Game1.snail2CageFrame[num8] == 19)
                                {
                                    Game1.snail2CageFrame[num8] = 20;
                                }
                                else
                                {
                                    Game1.snail2CageFrame[num8] = 19;
                                }
                            }
                        }
                    }
                }

                for (int num9 = 0; num9 < Game1.cageFrames; num9++)
                {
                    if (Game1.frogCageFrame[num9] == 0)
                    {
                        Game1.frogCageFrameCounter[num9]++;
                        if (Game1.frogCageFrameCounter[num9] > Game1.rand.Next(45, 3600))
                        {
                            if (Game1.rand.Next(10) == 0)
                            {
                                Game1.frogCageFrame[num9] = 1;
                            }
                            else
                            {
                                Game1.frogCageFrame[num9] = 12;
                            }
                            Game1.frogCageFrameCounter[num9] = 0;
                        }
                    }
                    else if (Game1.frogCageFrame[num9] >= 1 && Game1.frogCageFrame[num9] <= 5)
                    {
                        Game1.frogCageFrameCounter[num9]++;
                        if (Game1.frogCageFrameCounter[num9] >= 5)
                        {
                            Game1.frogCageFrame[num9]++;
                            Game1.frogCageFrameCounter[num9] = 0;
                        }
                    }
                    else if (Game1.frogCageFrame[num9] >= 12 && Game1.frogCageFrame[num9] <= 17)
                    {
                        Game1.frogCageFrameCounter[num9]++;
                        if (Game1.frogCageFrameCounter[num9] >= 5)
                        {
                            Game1.frogCageFrameCounter[num9] = 0;
                            Game1.frogCageFrame[num9]++;
                        }
                        if (Game1.frogCageFrame[num9] > 17)
                        {
                            if (Game1.rand.Next(3) == 0)
                            {
                                Game1.frogCageFrame[num9] = 0;
                            }
                            else
                            {
                                Game1.frogCageFrame[num9] = 12;
                            }
                        }
                    }
                    else if (Game1.frogCageFrame[num9] == 6)
                    {
                        Game1.frogCageFrameCounter[num9]++;
                        if (Game1.frogCageFrameCounter[num9] > Game1.rand.Next(45, 3600))
                        {
                            if (Game1.rand.Next(10) == 0)
                            {
                                Game1.frogCageFrame[num9] = 7;
                            }
                            else
                            {
                                Game1.frogCageFrame[num9] = 18;
                            }
                            Game1.frogCageFrameCounter[num9] = 0;
                        }
                    }
                    else if (Game1.frogCageFrame[num9] >= 7 && Game1.frogCageFrame[num9] <= 11)
                    {
                        Game1.frogCageFrameCounter[num9]++;
                        if (Game1.frogCageFrameCounter[num9] >= 5)
                        {
                            Game1.frogCageFrame[num9]++;
                            Game1.frogCageFrameCounter[num9] = 0;
                            if (Game1.frogCageFrame[num9] > 11)
                            {
                                Game1.frogCageFrame[num9] = 0;
                            }
                        }
                    }
                    else if (Game1.frogCageFrame[num9] >= 18 && Game1.frogCageFrame[num9] <= 23)
                    {
                        Game1.frogCageFrameCounter[num9]++;
                        if (Game1.frogCageFrameCounter[num9] >= 5)
                        {
                            Game1.frogCageFrameCounter[num9] = 0;
                            Game1.frogCageFrame[num9]++;
                        }
                        if (Game1.frogCageFrame[num9] > 17)
                        {
                            if (Game1.rand.Next(3) == 0)
                            {
                                Game1.frogCageFrame[num9] = 6;
                            }
                            else
                            {
                                Game1.frogCageFrame[num9] = 18;
                            }
                        }
                    }
                }
                for (int num10 = 0; num10 < Game1.cageFrames; num10++)
                {
                    if (Game1.mouseCageFrame[num10] >= 0 && Game1.mouseCageFrame[num10] <= 1)
                    {
                        Game1.mouseCageFrameCounter[num10]++;
                        if (Game1.mouseCageFrameCounter[num10] >= 5)
                        {
                            Game1.mouseCageFrame[num10]++;
                            if (Game1.mouseCageFrame[num10] > 1)
                            {
                                Game1.mouseCageFrame[num10] = 0;
                            }
                            Game1.mouseCageFrameCounter[num10] = 0;
                            if (Game1.rand.Next(15) == 0)
                            {
                                Game1.mouseCageFrame[num10] = 4;
                            }
                        }
                    }
                    else if (Game1.mouseCageFrame[num10] >= 4 && Game1.mouseCageFrame[num10] <= 7)
                    {
                        Game1.mouseCageFrameCounter[num10]++;
                        if (Game1.mouseCageFrameCounter[num10] >= 5)
                        {
                            Game1.mouseCageFrameCounter[num10] = 0;
                            Game1.mouseCageFrame[num10]++;
                        }
                        if (Game1.mouseCageFrame[num10] > 7)
                        {
                            Game1.mouseCageFrame[num10] = 2;
                        }
                    }
                    else if (Game1.mouseCageFrame[num10] >= 2 && Game1.mouseCageFrame[num10] <= 3)
                    {
                        Game1.mouseCageFrameCounter[num10]++;
                        if (Game1.mouseCageFrameCounter[num10] >= 5)
                        {
                            Game1.mouseCageFrame[num10]++;
                            if (Game1.mouseCageFrame[num10] > 3)
                            {
                                Game1.mouseCageFrame[num10] = 2;
                            }
                            Game1.mouseCageFrameCounter[num10] = 0;
                            if (Game1.rand.Next(15) == 0)
                            {
                                Game1.mouseCageFrame[num10] = 8;
                            }
                            else if (Game1.rand.Next(15) == 0)
                            {
                                Game1.mouseCageFrame[num10] = 12;
                            }
                        }
                    }
                    else if (Game1.mouseCageFrame[num10] >= 8 && Game1.mouseCageFrame[num10] <= 11)
                    {
                        Game1.mouseCageFrameCounter[num10]++;
                        if (Game1.mouseCageFrameCounter[num10] >= 5)
                        {
                            Game1.mouseCageFrameCounter[num10] = 0;
                            Game1.mouseCageFrame[num10]++;
                        }
                        if (Game1.mouseCageFrame[num10] > 11)
                        {
                            Game1.mouseCageFrame[num10] = 0;
                        }
                    }
                    else if (Game1.mouseCageFrame[num10] >= 12 && Game1.mouseCageFrame[num10] <= 13)
                    {
                        Game1.mouseCageFrameCounter[num10]++;
                        if (Game1.mouseCageFrameCounter[num10] >= 5)
                        {
                            Game1.mouseCageFrameCounter[num10] = 0;
                            Game1.mouseCageFrame[num10]++;
                        }
                    }
                    else if (Game1.mouseCageFrame[num10] >= 14 && Game1.mouseCageFrame[num10] <= 17)
                    {
                        Game1.mouseCageFrameCounter[num10]++;
                        if (Game1.mouseCageFrameCounter[num10] >= 5)
                        {
                            Game1.mouseCageFrameCounter[num10] = 0;
                            Game1.mouseCageFrame[num10]++;
                            if (Game1.mouseCageFrame[num10] > 17 && Game1.rand.Next(20) != 0)
                            {
                                Game1.mouseCageFrame[num10] = 14;
                            }
                        }
                    }
                    else if (Game1.mouseCageFrame[num10] >= 18 && Game1.mouseCageFrame[num10] <= 19)
                    {
                        Game1.mouseCageFrameCounter[num10]++;
                        if (Game1.mouseCageFrameCounter[num10] >= 5)
                        {
                            Game1.mouseCageFrameCounter[num10] = 0;
                            Game1.mouseCageFrame[num10]++;
                            if (Game1.mouseCageFrame[num10] > 19)
                            {
                                Game1.mouseCageFrame[num10] = 0;
                            }
                        }
                    }
                }
                for (int num11 = 0; num11 < Game1.cageFrames; num11++)
                {
                    Game1.wormCageFrameCounter[num11]++;
                    if (Game1.wormCageFrameCounter[num11] >= Game1.rand.Next(30, 91))
                    {
                        Game1.wormCageFrameCounter[num11] = 0;
                        if (Game1.rand.Next(4) == 0)
                        {
                            Game1.wormCageFrame[num11]++;
                            if (Game1.wormCageFrame[num11] == 9 && Game1.rand.Next(2) == 0)
                            {
                                Game1.wormCageFrame[num11] = 0;
                            }
                            if (Game1.wormCageFrame[num11] > 18)
                            {
                                if (Game1.rand.Next(2) == 0)
                                {
                                    Game1.wormCageFrame[num11] = 9;
                                }
                                else
                                {
                                    Game1.wormCageFrame[num11] = 0;
                                }
                            }
                        }
                    }
                }
                int num12 = 0;
                for (int num13 = 0; num13 < 3; num13++)
                {
                    switch (num13)
                    {
                        case 0:
                            num12 = 24;
                            break;
                        case 1:
                            num12 = 31;
                            break;
                        case 2:
                            num12 = 34;
                            break;
                    }
                    for (int num14 = 0; num14 < Game1.cageFrames; num14++)
                    {
                        if (++Game1.slugCageFrameCounter[num13, num14] >= Game1.rand.Next(5, 15))
                        {
                            Game1.slugCageFrameCounter[num13, num14] = 0;
                            if (++Game1.slugCageFrame[num13, num14] >= num12)
                            {
                                Game1.slugCageFrame[num13, num14] = 0;
                            }
                        }
                    }
                }
                for (int num15 = 0; num15 < Game1.cageFrames; num15++)
                {
                    if (Game1.grasshopperCageFrame[num15] >= 0 && Game1.grasshopperCageFrame[num15] <= 1)
                    {
                        Game1.grasshopperCageFrameCounter[num15]++;
                        if (Game1.grasshopperCageFrameCounter[num15] >= 5)
                        {
                            Game1.grasshopperCageFrame[num15]++;
                            if (Game1.grasshopperCageFrame[num15] > 1)
                            {
                                Game1.grasshopperCageFrame[num15] = 0;
                            }
                            Game1.grasshopperCageFrameCounter[num15] = 0;
                            if (Game1.rand.Next(15) == 0)
                            {
                                Game1.grasshopperCageFrame[num15] = 2;
                            }
                        }
                    }
                    else if (Game1.grasshopperCageFrame[num15] >= 2 && Game1.grasshopperCageFrame[num15] <= 5)
                    {
                        Game1.grasshopperCageFrameCounter[num15]++;
                        if (Game1.grasshopperCageFrameCounter[num15] >= 5)
                        {
                            Game1.grasshopperCageFrameCounter[num15] = 0;
                            Game1.grasshopperCageFrame[num15]++;
                        }
                        if (Game1.grasshopperCageFrame[num15] > 5)
                        {
                            Game1.grasshopperCageFrame[num15] = 6;
                        }
                    }
                    else if (Game1.grasshopperCageFrame[num15] >= 6 && Game1.grasshopperCageFrame[num15] <= 7)
                    {
                        Game1.grasshopperCageFrameCounter[num15]++;
                        if (Game1.grasshopperCageFrameCounter[num15] >= 5)
                        {
                            Game1.grasshopperCageFrame[num15]++;
                            if (Game1.grasshopperCageFrame[num15] > 7)
                            {
                                Game1.grasshopperCageFrame[num15] = 6;
                            }
                            Game1.grasshopperCageFrameCounter[num15] = 0;
                            if (Game1.rand.Next(15) == 0)
                            {
                                Game1.grasshopperCageFrame[num15] = 8;
                            }
                        }
                    }
                    else if (Game1.grasshopperCageFrame[num15] >= 8 && Game1.grasshopperCageFrame[num15] <= 11)
                    {
                        Game1.grasshopperCageFrameCounter[num15]++;
                        if (Game1.grasshopperCageFrameCounter[num15] >= 5)
                        {
                            Game1.grasshopperCageFrameCounter[num15] = 0;
                            Game1.grasshopperCageFrame[num15]++;
                        }
                        if (Game1.grasshopperCageFrame[num15] > 11)
                        {
                            Game1.grasshopperCageFrame[num15] = 0;
                        }
                    }
                }
                for (int num16 = 0; num16 < Game1.cageFrames; num16++)
                {
                    byte maxValue = 5;
                    if (Game1.fishBowlFrameMode[num16] == 1)
                    {
                        if (Game1.rand.Next(900) == 0)
                        {
                            Game1.fishBowlFrameMode[num16] = (byte)Game1.rand.Next((int)maxValue);
                        }
                        Game1.fishBowlFrameCounter[num16]++;
                        if (Game1.fishBowlFrameCounter[num16] >= 5)
                        {
                            Game1.fishBowlFrameCounter[num16] = 0;
                            if (Game1.fishBowlFrame[num16] == 10)
                            {
                                if (Game1.rand.Next(20) == 0)
                                {
                                    Game1.fishBowlFrame[num16] = 11;
                                    Game1.fishBowlFrameMode[num16] = 0;
                                }
                                else
                                {
                                    Game1.fishBowlFrame[num16] = 1;
                                }
                            }
                            else
                            {
                                Game1.fishBowlFrame[num16]++;
                            }
                        }
                    }
                    else if (Game1.fishBowlFrameMode[num16] == 2)
                    {
                        if (Game1.rand.Next(3600) == 0)
                        {
                            Game1.fishBowlFrameMode[num16] = (byte)Game1.rand.Next((int)maxValue);
                        }
                        Game1.fishBowlFrameCounter[num16]++;
                        if (Game1.fishBowlFrameCounter[num16] >= 20)
                        {
                            Game1.fishBowlFrameCounter[num16] = 0;
                            if (Game1.fishBowlFrame[num16] == 10)
                            {
                                if (Game1.rand.Next(20) == 0)
                                {
                                    Game1.fishBowlFrame[num16] = 11;
                                    Game1.fishBowlFrameMode[num16] = 0;
                                }
                                else
                                {
                                    Game1.fishBowlFrame[num16] = 1;
                                }
                            }
                            else
                            {
                                Game1.fishBowlFrame[num16]++;
                            }
                        }
                    }
                    else if (Game1.fishBowlFrameMode[num16] == 3)
                    {
                        if (Game1.rand.Next(3600) == 0)
                        {
                            Game1.fishBowlFrameMode[num16] = (byte)Game1.rand.Next((int)maxValue);
                        }
                        Game1.fishBowlFrameCounter[num16]++;
                        if (Game1.fishBowlFrameCounter[num16] >= Game1.rand.Next(5, 3600))
                        {
                            Game1.fishBowlFrameCounter[num16] = 0;
                            if (Game1.fishBowlFrame[num16] == 10)
                            {
                                if (Game1.rand.Next(20) == 0)
                                {
                                    Game1.fishBowlFrame[num16] = 11;
                                    Game1.fishBowlFrameMode[num16] = 0;
                                }
                                else
                                {
                                    Game1.fishBowlFrame[num16] = 1;
                                }
                            }
                            else
                            {
                                Game1.fishBowlFrame[num16]++;
                            }
                        }
                    }
                    else if (Game1.fishBowlFrame[num16] <= 10)
                    {
                        if (Game1.rand.Next(3600) == 0)
                        {
                            Game1.fishBowlFrameMode[num16] = (byte)Game1.rand.Next((int)maxValue);
                        }
                        Game1.fishBowlFrameCounter[num16]++;
                        if (Game1.fishBowlFrameCounter[num16] >= 10)
                        {
                            Game1.fishBowlFrameCounter[num16] = 0;
                            if (Game1.fishBowlFrame[num16] == 10)
                            {
                                if (Game1.rand.Next(12) == 0)
                                {
                                    Game1.fishBowlFrame[num16] = 11;
                                }
                                else
                                {
                                    Game1.fishBowlFrame[num16] = 1;
                                }
                            }
                            else
                            {
                                Game1.fishBowlFrame[num16]++;
                            }
                        }
                    }
                    else if (Game1.fishBowlFrame[num16] == 12 || Game1.fishBowlFrame[num16] == 13)
                    {
                        Game1.fishBowlFrameCounter[num16]++;
                        if (Game1.fishBowlFrameCounter[num16] >= 10)
                        {
                            Game1.fishBowlFrameCounter[num16] = 0;
                            Game1.fishBowlFrame[num16]++;
                            if (Game1.fishBowlFrame[num16] > 13)
                            {
                                if (Game1.rand.Next(20) == 0)
                                {
                                    Game1.fishBowlFrame[num16] = 14;
                                }
                                else
                                {
                                    Game1.fishBowlFrame[num16] = 12;
                                }
                            }
                        }
                    }
                    else if (Game1.fishBowlFrame[num16] >= 11)
                    {
                        Game1.fishBowlFrameCounter[num16]++;
                        if (Game1.fishBowlFrameCounter[num16] >= 10)
                        {
                            Game1.fishBowlFrameCounter[num16] = 0;
                            Game1.fishBowlFrame[num16]++;
                            if (Game1.fishBowlFrame[num16] > 16)
                            {
                                Game1.fishBowlFrame[num16] = 4;
                            }
                        }
                    }
                }
                for (int num17 = 0; num17 < 9; num17++)
                {
                    for (int num18 = 0; num18 < Game1.cageFrames; num18++)
                    {
                        Game1.butterflyCageFrameCounter[num17, num18]++;
                        if (Game1.rand.Next(3600) == 0)
                        {
                            Game1.butterflyCageMode[num17, num18] = (byte)Game1.rand.Next(5);
                            if (Game1.rand.Next(2) == 0)
                            {
                                Game1.butterflyCageMode[num17, num18] += 10;
                            }
                        }
                        int num19 = Game1.rand.Next(3, 16);
                        if (Game1.butterflyCageMode[num17, num18] == 1 || Game1.butterflyCageMode[num17, num18] == 11)
                        {
                            num19 = 3;
                        }
                        if (Game1.butterflyCageMode[num17, num18] == 2 || Game1.butterflyCageMode[num17, num18] == 12)
                        {
                            num19 = 5;
                        }
                        if (Game1.butterflyCageMode[num17, num18] == 3 || Game1.butterflyCageMode[num17, num18] == 13)
                        {
                            num19 = 10;
                        }
                        if (Game1.butterflyCageMode[num17, num18] == 4 || Game1.butterflyCageMode[num17, num18] == 14)
                        {
                            num19 = 15;
                        }
                        if (Game1.butterflyCageMode[num17, num18] >= 10)
                        {
                            if (Game1.butterflyCageFrame[num17, num18] <= 7)
                            {
                                if (Game1.butterflyCageFrameCounter[num17, num18] >= num19)
                                {
                                    Game1.butterflyCageFrameCounter[num17, num18] = 0;
                                    Game1.butterflyCageFrame[num17, num18]--;
                                    if (Game1.butterflyCageFrame[num17, num18] < 0)
                                    {
                                        Game1.butterflyCageFrame[num17, num18] = 7;
                                    }
                                    if (Game1.butterflyCageFrame[num17, num18] == 1 
                                        || Game1.butterflyCageFrame[num17, num18] == 4 
                                        || Game1.butterflyCageFrame[num17, num18] == 6)
                                    {
                                        if (Game1.rand.Next(20) == 0)
                                        {
                                            Game1.butterflyCageFrame[num17, num18] += 8;
                                        }
                                        else if (Game1.rand.Next(6) == 0)
                                        {
                                            if (Game1.butterflyCageMode[num17, num18] >= 10)
                                            {
                                                Game1.butterflyCageMode[num17, num18] -= 10;
                                            }
                                            else
                                            {
                                                Game1.butterflyCageMode[num17, num18] += 10;
                                            }
                                        }
                                    }
                                }
                            }
                            else if (Game1.butterflyCageFrameCounter[num17, num18] >= num19)
                            {
                                Game1.butterflyCageFrameCounter[num17, num18] = 0;
                                Game1.butterflyCageFrame[num17, num18]--;
                                if (Game1.butterflyCageFrame[num17, num18] < 8)
                                {
                                    Game1.butterflyCageFrame[num17, num18] = 14;
                                }
                                if (Game1.butterflyCageFrame[num17, num18] == 9 
                                    || Game1.butterflyCageFrame[num17, num18] == 12 
                                    || Game1.butterflyCageFrame[num17, num18] == 14)
                                {
                                    if (Game1.rand.Next(20) == 0)
                                    {
                                        Game1.butterflyCageFrame[num17, num18] -= 8;
                                    }
                                    else if (Game1.rand.Next(6) == 0)
                                    {
                                        if (Game1.butterflyCageMode[num17, num18] >= 10)
                                        {
                                            Game1.butterflyCageMode[num17, num18] -= 10;
                                        }
                                        else
                                        {
                                            Game1.butterflyCageMode[num17, num18] += 10;
                                        }
                                    }
                                }
                            }
                        }
                        else if (Game1.butterflyCageFrame[num17, num18] <= 7)
                        {
                            if (Game1.butterflyCageFrameCounter[num17, num18] >= num19)
                            {
                                Game1.butterflyCageFrameCounter[num17, num18] = 0;
                                Game1.butterflyCageFrame[num17, num18]++;
                                if (Game1.butterflyCageFrame[num17, num18] > 7)
                                {
                                    Game1.butterflyCageFrame[num17, num18] = 0;
                                }
                                if ((Game1.butterflyCageFrame[num17, num18] == 1 
                                    || Game1.butterflyCageFrame[num17, num18] == 4 
                                    || Game1.butterflyCageFrame[num17, num18] == 6) 
                                    && Game1.rand.Next(10) == 0)
                                {
                                    Game1.butterflyCageFrame[num17, num18] += 8;
                                }
                            }
                        }
                        else if (Game1.butterflyCageFrameCounter[num17, num18] >= num19)
                        {
                            Game1.butterflyCageFrameCounter[num17, num18] = 0;
                            Game1.butterflyCageFrame[num17, num18]++;
                            if (Game1.butterflyCageFrame[num17, num18] > 15)
                            {
                                Game1.butterflyCageFrame[num17, num18] = 8;
                            }
                            if ((Game1.butterflyCageFrame[num17, num18] == 9 
                                || Game1.butterflyCageFrame[num17, num18] == 12 
                                || Game1.butterflyCageFrame[num17, num18] == 14) && Game1.rand.Next(10) == 0)
                            {
                                Game1.butterflyCageFrame[num17, num18] -= 8;
                            }
                        }
                    }
                }
                for (int num20 = 0; num20 < 3; num20++)
                {
                    for (int num21 = 0; num21 < Game1.cageFrames; num21++)
                    {
                        Game1.jellyfishCageFrameCounter[num20, num21]++;
                        if (Game1.jellyfishCageMode[num20, num21] == 0 && Game1.rand.Next(1800) == 0)
                        {
                            Game1.jellyfishCageMode[num20, num21] = 1;
                        }
                        if (Game1.jellyfishCageMode[num20, num21] == 2 && Game1.rand.Next(60) == 0)
                        {
                            Game1.jellyfishCageMode[num20, num21] = 3;
                        }
                        int num22 = 1;
                        if (Game1.jellyfishCageMode[num20, num21] == 0)
                        {
                            num22 = Game1.rand.Next(10, 20);
                        }
                        if (Game1.jellyfishCageMode[num20, num21] == 1)
                        {
                            num22 = Game1.rand.Next(15, 25);
                        }
                        if (Game1.jellyfishCageMode[num20, num21] == 2)
                        {
                            num22 = Game1.rand.Next(4, 9);
                        }
                        if (Game1.jellyfishCageMode[num20, num21] == 3)
                        {
                            num22 = Game1.rand.Next(15, 25);
                        }
                        if (Game1.jellyfishCageMode[num20, num21] == 0 
                            && Game1.jellyfishCageFrame[num20, num21] <= 3 
                            && Game1.jellyfishCageFrameCounter[num20, num21] >= num22)
                        {
                            Game1.jellyfishCageFrameCounter[num20, num21] = 0;
                            Game1.jellyfishCageFrame[num20, num21]++;
                            if (Game1.jellyfishCageFrame[num20, num21] >= 4)
                            {
                                Game1.jellyfishCageFrame[num20, num21] = 0;
                            }
                        }
                        if (Game1.jellyfishCageMode[num20, num21] == 1 
                            && Game1.jellyfishCageFrame[num20, num21] <= 7 
                            && Game1.jellyfishCageFrameCounter[num20, num21] >= num22)
                        {
                            Game1.jellyfishCageFrameCounter[num20, num21] = 0;
                            Game1.jellyfishCageFrame[num20, num21]++;
                            if (Game1.jellyfishCageFrame[num20, num21] >= 7)
                            {
                                Game1.jellyfishCageMode[num20, num21] = 2;
                            }
                        }
                        if (Game1.jellyfishCageMode[num20, num21] == 2 
                            && Game1.jellyfishCageFrame[num20, num21] <= 9 
                            && Game1.jellyfishCageFrameCounter[num20, num21] >= num22)
                        {
                            Game1.jellyfishCageFrameCounter[num20, num21] = 0;
                            Game1.jellyfishCageFrame[num20, num21]++;
                            if (Game1.jellyfishCageFrame[num20, num21] >= 9)
                            {
                                Game1.jellyfishCageFrame[num20, num21] = 7;
                            }
                        }
                        if (Game1.jellyfishCageMode[num20, num21] == 3
                            && Game1.jellyfishCageFrame[num20, num21] <= 10 
                            && Game1.jellyfishCageFrameCounter[num20, num21] >= num22)
                        {
                            Game1.jellyfishCageFrameCounter[num20, num21] = 0;
                            Game1.jellyfishCageFrame[num20, num21]++;
                            if (Game1.jellyfishCageFrame[num20, num21] >= 10)
                            {
                                Game1.jellyfishCageFrame[num20, num21] = 3;
                                Game1.jellyfishCageMode[num20, num21] = 0;
                            }
                        }
                    }
                }
            }
        }//UpdateDrawAnimations


        public static void UpdateDrawAnimations()
        {
            for (int i = 0; i < Game1.itemAnimationsRegistered.Count; i++)
            {
                int num = Game1.itemAnimationsRegistered[i];
                if (Game1.itemAnimations[num] != null)
                {
                    Game1.itemAnimations[num].Update();
                }
            }
        }

        // Update
        protected override void Update(GameTime gameTime)
        {
            if (Game1._largeMethodFix)
            {
                Game1._largeMethodFix = false;
                new Projectile().AI();
                new NPC().AI();
            }
            if (Game1._hasPendingNetmodeChange)
            {
                Game1.netMode = Game1._targetNetMode;
                Game1._hasPendingNetmodeChange = false;
            }
            Game1.tileNoFail[384] = true;
            if (CaptureManager.Instance.IsCapturing)
            {
                return;
            }
            if (Game1.ActivePlayerFileData != null)
            {
                Game1.ActivePlayerFileData.UpdatePlayTimer();
            }
            Game1.ignoreErrors = true;
            if (Game1.expertMode)
            {
                Game1.damageMultiplier = Game1.expertDamage;
                Game1.knockBackMultiplier = Game1.expertKnockBack;
            }
            else
            {
                Game1.damageMultiplier = 1f;
                Game1.knockBackMultiplier = 1f;
            }
            if (!Game1.GlobalTimerPaused)
            {
                Game1.GlobalTime += 0.0166666675f;
                if (Game1.GlobalTime > 3600f)
                {
                    Game1.GlobalTime -= 3600f;
                }
            }
            Game1.gameInactive = !base.IsActive;
            if (Game1.netMode == 2)
            {
                Game1.cloudAlpha = Game1.maxRaining;
            }
            if (base.IsActive && Game1.cloudAlpha > 0f)
            {
                Rain.MakeRain();
            }
            if (Game1.netMode != 1)
            {
                this.updateCloudLayer();
            }
            this.UpdateWeather();
            Game1.Ambience();
            if (Game1.netMode != 2)
            {
                if (Game1.ignoreErrors)
                {
                    try
                    {
                        Game1.snowing();
                        goto IL_13C;
                    }
                    catch
                    {
                        goto IL_13C;
                    }
                }
                Game1.snowing();
            }
        IL_13C:
            if (Game1.chTitle)
            {
                Game1.chTitle = false;
                this.SetTitle();
            }
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            WorldGen.destroyObject = false;
            if (Game1.gameMenu)
            {
                Game1.mapFullscreen = false;
            }
            if (Game1.dedServ)
            {
                if (Game1.dedServFPS)
                {
                    Game1.updateTime++;
                    if (!Game1.fpsTimer.IsRunning)
                    {
                        Game1.fpsTimer.Restart();
                    }
                    if (Game1.fpsTimer.ElapsedMilliseconds >= 1000L)
                    {
                        Game1.dedServCount1 += Game1.updateTime;
                        Game1.dedServCount2++;
                        float num = (float)Game1.dedServCount1 / (float)Game1.dedServCount2;

                        Debug.WriteLine(string.Concat(new object[]
                        {
                            Game1.updateTime,
                            "  (",
                            num,
                            ")"
                        }));
                        Game1.updateTime = 0;
                        Game1.fpsTimer.Restart();
                    }
                }
                else
                {
                    if (Game1.fpsTimer.IsRunning)
                    {
                        Game1.fpsTimer.Stop();
                    }
                    Game1.updateTime = 0;
                }
            }
            if (!Game1.dedServ)
            {
                if (Game1.superFast)
                {
                    base.IsFixedTimeStep = false;
                    Game1.graphics.SynchronizeWithVerticalRetrace = false;
                }
                else
                {
                    if (Game1.terrariasFixedTiming)
                    {
                        if (base.IsActive)
                        {
                            base.IsFixedTimeStep = false;
                        }
                        else
                        {
                            base.IsFixedTimeStep = true;
                        }
                    }
                    else
                    {
                        base.IsFixedTimeStep = true;
                        Game1.graphics.SynchronizeWithVerticalRetrace = true;
                    }
                    Game1.graphics.SynchronizeWithVerticalRetrace = true;
                }
                if (Game1.treeMntBG[1] == 94 || (Game1.treeMntBG[1] >= 114 && Game1.treeMntBG[1] <= 116))
                {
                    Game1.bgFrameCounter[0]++;
                    if (Game1.bgFrameCounter[0] >= 6)
                    {
                        Game1.bgFrameCounter[0] = 0;
                        Game1.bgFrame[0]++;
                        if (Game1.bgFrame[0] >= 4)
                        {
                            Game1.bgFrame[0] = 0;
                        }
                    }
                    if (Game1.bgFrame[0] == 0)
                    {
                        Game1.treeMntBG[1] = 94;
                    }
                    else if (Game1.bgFrame[0] == 1)
                    {
                        Game1.treeMntBG[1] = 114;
                    }
                    else if (Game1.bgFrame[0] == 2)
                    {
                        Game1.treeMntBG[1] = 115;
                    }
                    else
                    {
                        Game1.treeMntBG[1] = 116;
                    }
                    if (Game1.bgFrame[0] == 0)
                    {
                        Game1.treeMntBG[0] = 93;
                    }
                    else if (Game1.bgFrame[0] == 1)
                    {
                        Game1.treeMntBG[0] = 168;
                    }
                    else if (Game1.bgFrame[0] == 2)
                    {
                        Game1.treeMntBG[0] = 169;
                    }
                    else
                    {
                        Game1.treeMntBG[0] = 170;
                    }
                }
                if (Game1.treeMntBG[1] >= 180 && Game1.treeMntBG[1] <= 183)
                {
                    Game1.bgFrameCounter[0]++;
                    if (Game1.bgFrameCounter[0] >= 6)
                    {
                        Game1.bgFrameCounter[0] = 0;
                        Game1.bgFrame[0]++;
                        if (Game1.bgFrame[0] >= 4)
                        {
                            Game1.bgFrame[0] = 0;
                        }
                    }
                    if (Game1.bgFrame[0] == 0)
                    {
                        Game1.treeMntBG[1] = 180;
                    }
                    else if (Game1.bgFrame[0] == 1)
                    {
                        Game1.treeMntBG[1] = 181;
                    }
                    else if (Game1.bgFrame[0] == 2)
                    {
                        Game1.treeMntBG[1] = 182;
                    }
                    else
                    {
                        Game1.treeMntBG[1] = 183;
                    }
                }
                Animation.UpdateAll();
                AchievementCompleteUI.Update();
                this.UpdateMusic();
                if (Game1.showSplash)
                {
                    return;
                }
                if (!Game1.gameMenu && Game1.netMode == 1)
                {
                    if (!Game1.saveTime.IsRunning)
                    {
                        Game1.saveTime.Start();
                    }
                    if (Game1.saveTime.ElapsedMilliseconds > 300000L)
                    {
                        Game1.saveTime.Reset();
                        WorldGen.saveToonWhilePlaying();
                    }
                }
                else if (!Game1.gameMenu && Game1.autoSave)
                {
                    if (!Game1.saveTime.IsRunning)
                    {
                        Game1.saveTime.Start();
                    }
                    if (Game1.saveTime.ElapsedMilliseconds > 600000L)
                    {
                        Game1.saveTime.Reset();
                        WorldGen.saveToonWhilePlaying();
                        WorldGen.saveAndPlay();
                    }
                }
                else if (Game1.saveTime.IsRunning)
                {
                    Game1.saveTime.Stop();
                }
                if (Game1.teamCooldown > 0)
                {
                    Game1.teamCooldown--;
                }
                Game1.updateTime++;
                if (Game1.fpsTimer.ElapsedMilliseconds >= 1000L)
                {
                    if ((float)Game1.fpsCount >= 30f + 30f * Game1.gfxQuality)
                    {
                        Game1.gfxQuality += Game1.gfxRate;
                        Game1.gfxRate += 0.005f;
                    }
                    else if ((float)Game1.fpsCount < 29f + 30f * Game1.gfxQuality)
                    {
                        Game1.gfxRate = 0.01f;
                        Game1.gfxQuality -= 0.1f;
                    }
                    if (Game1.gfxQuality < 0f)
                    {
                        Game1.gfxQuality = 0f;
                    }
                    if (Game1.gfxQuality > 1f)
                    {
                        Game1.gfxQuality = 1f;
                    }
                    if (Game1.maxQ && base.IsActive)
                    {
                        Game1.gfxQuality = 1f;
                        Game1.maxQ = false;
                    }
                    Game1.updateRate = Game1.uCount;
                    Game1.frameRate = Game1.fpsCount;
                    Game1.fpsCount = 0;
                    Game1.fpsTimer.Restart();
                    Game1.updateTime = 0;
                    Game1.drawTime = 0;
                    Game1.uCount = 0;
                    if ((double)Game1.gfxQuality < 0.8)
                    {
                        Game1.mapTimeMax = (int)((1f - Game1.gfxQuality) * 60f);
                    }
                    else
                    {
                        Game1.mapTimeMax = 0;
                    }
                    int arg_6AA_0 = Game1.netMode;
                }
                if (Game1.terrariasFixedTiming)
                {
                    float num2 = 16f;
                    float num3 = (float)Game1.updateTimer.ElapsedMilliseconds;
                    if (num3 + Game1.uCarry < num2 && !Game1.superFast)
                    {
                        Game1.drawSkip = true;
                        return;
                    }
                    Game1.uCarry += num3 - num2;
                    if (Game1.uCarry > 1000f)
                    {
                        Game1.uCarry = 1000f;
                    }
                    Game1.updateTimer.Restart();
                }
                Game1.uCount++;
                Game1.drawSkip = false;
                if (Game1.qaStyle == 1)
                {
                    Game1.gfxQuality = 1f;
                }
                else if (Game1.qaStyle == 2)
                {
                    Game1.gfxQuality = 0.5f;
                }
                else if (Game1.qaStyle == 3)
                {
                    Game1.gfxQuality = 0f;
                }
                Game1.numDust = (int)(6000f * (Game1.gfxQuality * 0.7f + 0.3f));
                if ((double)Game1.gfxQuality < 0.9)
                {
                    Game1.numDust = (int)((float)Game1.numDust * Game1.gfxQuality);
                }
                if (Game1.numDust < 1000)
                {
                    Game1.numDust = 1000;
                }
                Gore.goreTime = (int)(600f * Game1.gfxQuality);
                Liquid.maxLiquid = (int)(2500f + 2500f * Game1.gfxQuality);
                Liquid.cycles = (int)(17f - 10f * Game1.gfxQuality);
                if (Game1.superFast)
                {
                    Game1.graphics.SynchronizeWithVerticalRetrace = false;
                    Game1.drawSkip = false;
                }
                if ((double)Game1.gfxQuality < 0.2)
                {
                    Lighting.maxRenderCount = 8;
                }
                else if ((double)Game1.gfxQuality < 0.4)
                {
                    Lighting.maxRenderCount = 7;
                }
                else if ((double)Game1.gfxQuality < 0.6)
                {
                    Lighting.maxRenderCount = 6;
                }
                else if ((double)Game1.gfxQuality < 0.8)
                {
                    Lighting.maxRenderCount = 5;
                }
                else
                {
                    Lighting.maxRenderCount = 4;
                }
                if (Liquid.quickSettle)
                {
                    Liquid.maxLiquid = Liquid.resLiquid;
                    Liquid.cycles = 1;
                }
                Game1.hasFocus = base.IsActive;
                if (!Game1.gameMenu || Game1.netMode == 2)
                {
                    WorldFile.tempRaining = Game1.raining;
                    WorldFile.tempRainTime = Game1.rainTime;
                    WorldFile.tempMaxRain = Game1.maxRaining;
                }
                if (!base.IsActive && Game1.netMode == 0)
                {
                    base.IsMouseVisible = true;
                    if (Game1.netMode != 2 && Game1.myPlayer >= 0)
                    {
                        Game1.player[Game1.myPlayer].delayUseItem = true;
                    }
                    Game1.mouseLeftRelease = false;
                    Game1.mouseRightRelease = false;
                    if (Game1.gameMenu)
                    {
                        Game1.UpdateMenu();
                    }
                    Game1.gamePaused = true;
                    return;
                }
                base.IsMouseVisible = false;
                EmoteBubble.UpdateAll();
                ScreenObstruction.Update();
                ScreenDarkness.Update();
                MoonlordDeathDrama.Update();
                Game1.CursorColor();
                Game1.mouseTextColor += (byte)Game1.mouseTextColorChange;
                if (Game1.mouseTextColor >= 250)
                {
                    Game1.mouseTextColorChange = -4;
                }
                if (Game1.mouseTextColor <= 175)
                {
                    Game1.mouseTextColorChange = 4;
                }
                Game1.demonTorch += (float)Game1.demonTorchDir * 0.01f;
                if (Game1.demonTorch > 1f)
                {
                    Game1.demonTorch = 1f;
                    Game1.demonTorchDir = -1;
                }
                if (Game1.demonTorch < 0f)
                {
                    Game1.demonTorch = 0f;
                    Game1.demonTorchDir = 1;
                }
                Game1.martianLight += (float)Game1.martianLightDir * 0.015f;
                if (Game1.martianLight > 1f)
                {
                    Game1.martianLight = 1f;
                    Game1.martianLightDir = -1;
                }
                if (Game1.martianLight < 0f)
                {
                    Game1.martianLight = 0f;
                    Game1.martianLightDir = 1;
                }
                int num4 = 7;
                if (this.DiscoStyle == 0)
                {
                    Game1.DiscoG += num4;
                    if (Game1.DiscoG >= 255)
                    {
                        Game1.DiscoG = 255;
                        this.DiscoStyle++;
                    }
                }
                if (this.DiscoStyle == 1)
                {
                    Game1.DiscoR -= num4;
                    if (Game1.DiscoR <= 0)
                    {
                        Game1.DiscoR = 0;
                        this.DiscoStyle++;
                    }
                }
                if (this.DiscoStyle == 2)
                {
                    Game1.DiscoB += num4;
                    if (Game1.DiscoB >= 255)
                    {
                        Game1.DiscoB = 255;
                        this.DiscoStyle++;
                    }
                }
                if (this.DiscoStyle == 3)
                {
                    Game1.DiscoG -= num4;
                    if (Game1.DiscoG <= 0)
                    {
                        Game1.DiscoG = 0;
                        this.DiscoStyle++;
                    }
                }
                if (this.DiscoStyle == 4)
                {
                    Game1.DiscoR += num4;
                    if (Game1.DiscoR >= 255)
                    {
                        Game1.DiscoR = 255;
                        this.DiscoStyle++;
                    }
                }
                if (this.DiscoStyle == 5)
                {
                    Game1.DiscoB -= num4;
                    if (Game1.DiscoB <= 0)
                    {
                        Game1.DiscoB = 0;
                        this.DiscoStyle = 0;
                    }
                }
                if (Game1.gFadeDir == 1)
                {
                    Game1.gFader += 0.1f;
                    Game1.gFade = (byte)Game1.gFader;
                    if (Game1.gFade > 150)
                    {
                        Game1.gFadeDir = 0;
                    }
                }
                else
                {
                    Game1.gFader -= 0.1f;
                    Game1.gFade = (byte)Game1.gFader;
                    if (Game1.gFade < 100)
                    {
                        Game1.gFadeDir = 1;
                    }
                }
                Game1.wFrCounter += Game1.windSpeed * 2f;
                if (Game1.wFrCounter > 4f)
                {
                    Game1.wFrCounter = 0f;
                    Game1.wFrame += 1f;
                }
                if (Game1.wFrCounter < 0f)
                {
                    Game1.wFrCounter = 4f;
                    Game1.wFrame -= 1f;
                }
                if (Game1.wFrame > 16f)
                {
                    Game1.wFrame = 1f;
                }
                if (Game1.wFrame < 1f)
                {
                    Game1.wFrame = 16f;
                }
                this.waterfallManager.UpdateFrame();
                byte[] expr_C4F_cp_0 = Game1.wallFrameCounter;
                int expr_C4F_cp_1 = 136;
                expr_C4F_cp_0[expr_C4F_cp_1] += 1;
                if (Game1.wallFrameCounter[136] >= 5)
                {
                    Game1.wallFrameCounter[136] = 0;
                    byte[] expr_C86_cp_0 = Game1.wallFrame;
                    int expr_C86_cp_1 = 136;
                    expr_C86_cp_0[expr_C86_cp_1] += 1;
                    if (Game1.wallFrame[136] > 7)
                    {
                        Game1.wallFrame[136] = 0;
                    }
                }
                byte[] expr_CBD_cp_0 = Game1.wallFrameCounter;
                int expr_CBD_cp_1 = 137;
                expr_CBD_cp_0[expr_CBD_cp_1] += 1;
                if (Game1.wallFrameCounter[137] >= 10)
                {
                    Game1.wallFrameCounter[137] = 0;
                    byte[] expr_CF5_cp_0 = Game1.wallFrame;
                    int expr_CF5_cp_1 = 137;
                    expr_CF5_cp_0[expr_CF5_cp_1] += 1;
                    if (Game1.wallFrame[137] > 7)
                    {
                        Game1.wallFrame[137] = 0;
                    }
                }
                byte[] expr_D2C_cp_0 = Game1.wallFrameCounter;
                int expr_D2C_cp_1 = 172;
                expr_D2C_cp_0[expr_D2C_cp_1] += 1;
                if (Game1.wallFrameCounter[172] >= 10)
                {
                    Game1.wallFrameCounter[172] = 0;
                    byte[] expr_D64_cp_0 = Game1.wallFrame;
                    int expr_D64_cp_1 = 172;
                    expr_D64_cp_0[expr_D64_cp_1] += 1;
                    if (Game1.wallFrame[172] > 7)
                    {
                        Game1.wallFrame[172] = 0;
                    }
                }
                byte[] expr_D9B_cp_0 = Game1.wallFrameCounter;
                int expr_D9B_cp_1 = 168;
                expr_D9B_cp_0[expr_D9B_cp_1] += 1;
                if (Game1.wallFrameCounter[168] >= 5)
                {
                    Game1.wallFrameCounter[168] = 0;
                    byte[] expr_DD2_cp_0 = Game1.wallFrame;
                    int expr_DD2_cp_1 = 168;
                    expr_DD2_cp_0[expr_DD2_cp_1] += 1;
                    if (Game1.wallFrame[168] > 7)
                    {
                        Game1.wallFrame[168] = 0;
                    }
                }
                byte[] expr_E09_cp_0 = Game1.wallFrameCounter;
                int expr_E09_cp_1 = 169;
                expr_E09_cp_0[expr_E09_cp_1] += 1;
                if (Game1.wallFrameCounter[169] >= 5)
                {
                    Game1.wallFrameCounter[169] = 0;
                    byte[] expr_E40_cp_0 = Game1.wallFrame;
                    int expr_E40_cp_1 = 169;
                    expr_E40_cp_0[expr_E40_cp_1] += 1;
                    if (Game1.wallFrame[169] > 7)
                    {
                        Game1.wallFrame[169] = 0;
                    }
                }
                byte[] expr_E77_cp_0 = Game1.wallFrameCounter;
                int expr_E77_cp_1 = 144;
                expr_E77_cp_0[expr_E77_cp_1] += 1;
                int num5 = 5;
                int num6 = 10;
                if ((int)Game1.wallFrameCounter[144] < num5)
                {
                    Game1.wallFrame[144] = 0;
                }
                else if ((int)Game1.wallFrameCounter[144] < num5)
                {
                    Game1.wallFrame[144] = 1;
                }
                else if ((int)Game1.wallFrameCounter[144] < num5 * 2)
                {
                    Game1.wallFrame[144] = 2;
                }
                else if ((int)Game1.wallFrameCounter[144] < num5 * 3)
                {
                    Game1.wallFrame[144] = 3;
                }
                else if ((int)Game1.wallFrameCounter[144] < num5 * 4)
                {
                    Game1.wallFrame[144] = 4;
                }
                else if ((int)Game1.wallFrameCounter[144] < num5 * 5)
                {
                    Game1.wallFrame[144] = 5;
                }
                else if ((int)Game1.wallFrameCounter[144] < num5 * 6)
                {
                    Game1.wallFrame[144] = 6;
                }
                else if ((int)Game1.wallFrameCounter[144] < num5 * 7)
                {
                    Game1.wallFrame[144] = 7;
                }
                else if ((int)Game1.wallFrameCounter[144] < num5 * (8 + num6))
                {
                    Game1.wallFrame[144] = 8;
                }
                else if ((int)Game1.wallFrameCounter[144] < num5 * (9 + num6))
                {
                    Game1.wallFrame[144] = 7;
                }
                else if ((int)Game1.wallFrameCounter[144] < num5 * (10 + num6))
                {
                    Game1.wallFrame[144] = 6;
                }
                else if ((int)Game1.wallFrameCounter[144] < num5 * (11 + num6))
                {
                    Game1.wallFrame[144] = 5;
                }
                else if ((int)Game1.wallFrameCounter[144] < num5 * (12 + num6))
                {
                    Game1.wallFrame[144] = 4;
                }
                else if ((int)Game1.wallFrameCounter[144] < num5 * (13 + num6))
                {
                    Game1.wallFrame[144] = 3;
                }
                else if ((int)Game1.wallFrameCounter[144] < num5 * (14 + num6))
                {
                    Game1.wallFrame[144] = 2;
                }
                else if ((int)Game1.wallFrameCounter[144] < num5 * (15 + num6))
                {
                    Game1.wallFrame[144] = 1;
                }
                else
                {
                    Game1.wallFrame[144] = 0;
                    if ((int)Game1.wallFrameCounter[144] > num5 * (16 + num6 * 2))
                    {
                        Game1.wallFrameCounter[144] = 0;
                    }
                }
                Game1.tileFrameCounter[12]++;
                if (Game1.tileFrameCounter[12] > 5)
                {
                    Game1.tileFrameCounter[12] = 0;
                    Game1.tileFrame[12]++;
                    if (Game1.tileFrame[12] >= 10)
                    {
                        Game1.tileFrame[12] = 0;
                    }
                }
                Game1.tileFrameCounter[17]++;
                if (Game1.tileFrameCounter[17] > 5)
                {
                    Game1.tileFrameCounter[17] = 0;
                    Game1.tileFrame[17]++;
                    if (Game1.tileFrame[17] >= 12)
                    {
                        Game1.tileFrame[17] = 0;
                    }
                }
                if (++Game1.tileFrameCounter[133] >= 4)
                {
                    Game1.tileFrameCounter[133] = 0;
                    if (++Game1.tileFrame[133] >= 6)
                    {
                        Game1.tileFrame[133] = 0;
                    }
                }
                Game1.tileFrameCounter[31]++;
                if (Game1.tileFrameCounter[31] > 10)
                {
                    Game1.tileFrameCounter[31] = 0;
                    Game1.tileFrame[31]++;
                    if (Game1.tileFrame[31] > 1)
                    {
                        Game1.tileFrame[31] = 0;
                    }
                }
                Game1.tileFrameCounter[77]++;
                if (Game1.tileFrameCounter[77] > 5)
                {
                    Game1.tileFrameCounter[77] = 0;
                    Game1.tileFrame[77]++;
                    if (Game1.tileFrame[77] >= 12)
                    {
                        Game1.tileFrame[77] = 0;
                    }
                }
                Game1.tileFrameCounter[106]++;
                if (Game1.tileFrameCounter[106] > 4)
                {
                    Game1.tileFrameCounter[106] = 0;
                    Game1.tileFrame[106]++;
                    if (Game1.tileFrame[106] >= 2)
                    {
                        Game1.tileFrame[106] = 0;
                    }
                }
                Game1.tileFrameCounter[207]++;
                if (Game1.tileFrameCounter[207] > 4)
                {
                    Game1.tileFrameCounter[207] = 0;
                    Game1.tileFrame[207]++;
                    if (Game1.tileFrame[207] >= 6)
                    {
                        Game1.tileFrame[207] = 0;
                    }
                }
                Game1.tileFrameCounter[215]++;
                if (Game1.tileFrameCounter[215] >= 4)
                {
                    Game1.tileFrameCounter[215] = 0;
                    Game1.tileFrame[215]++;
                    if (Game1.tileFrame[215] >= 8)
                    {
                        Game1.tileFrame[215] = 0;
                    }
                }
                Game1.tileFrameCounter[217]++;
                if (Game1.tileFrameCounter[217] > 4)
                {
                    Game1.tileFrameCounter[217] = 0;
                    Game1.tileFrame[217]++;
                    if (Game1.tileFrame[217] >= 5)
                    {
                        Game1.tileFrame[217] = 0;
                    }
                }
                Game1.tileFrameCounter[218]++;
                if (Game1.tileFrameCounter[218] > 4)
                {
                    Game1.tileFrameCounter[218] = 0;
                    Game1.tileFrame[218]++;
                    if (Game1.tileFrame[218] >= 2)
                    {
                        Game1.tileFrame[218] = 0;
                    }
                }
                Game1.tileFrameCounter[219]++;
                if (Game1.tileFrameCounter[219] > 4)
                {
                    Game1.tileFrameCounter[219] = 0;
                    Game1.tileFrame[219]++;
                    if (Game1.tileFrame[219] >= 10)
                    {
                        Game1.tileFrame[219] = 0;
                    }
                }
                Game1.tileFrameCounter[220]++;
                if (Game1.tileFrameCounter[220] > 4)
                {
                    Game1.tileFrameCounter[220] = 0;
                    Game1.tileFrame[220]++;
                    if (Game1.tileFrame[220] >= 4)
                    {
                        Game1.tileFrame[220] = 0;
                    }
                }
                Game1.tileFrameCounter[231]++;
                if (Game1.tileFrameCounter[231] > 16)
                {
                    Game1.tileFrameCounter[231] = 0;
                    Game1.tileFrame[231]++;
                    if (Game1.tileFrame[231] >= 7)
                    {
                        Game1.tileFrame[231] = 0;
                    }
                }
                Game1.tileFrameCounter[235]++;
                if (Game1.tileFrameCounter[235] > 20)
                {
                    Game1.tileFrameCounter[235] = 0;
                    Game1.tileFrame[235]++;
                    if (Game1.tileFrame[235] >= 4)
                    {
                        Game1.tileFrame[235] = 0;
                    }
                    if (Game1.tileFrame[235] > 1)
                    {
                        Game1.tileLighted[235] = true;
                    }
                    else
                    {
                        Game1.tileLighted[235] = false;
                    }
                }
                Game1.tileFrameCounter[238]++;
                if (Game1.tileFrameCounter[238] > 20)
                {
                    Game1.tileFrameCounter[238] = 0;
                    Game1.tileFrame[238]++;
                    if (Game1.tileFrame[238] >= 4)
                    {
                        Game1.tileFrame[238] = 0;
                    }
                }
                Game1.tileFrameCounter[243]++;
                if (Game1.tileFrameCounter[243] > 4)
                {
                    Game1.tileFrameCounter[243] = 0;
                    Game1.tileFrame[243]++;
                    if (Game1.tileFrame[243] >= 6)
                    {
                        Game1.tileFrame[243] = 0;
                    }
                }
                Game1.tileFrameCounter[244]++;
                if (Game1.tileFrameCounter[244] > 4)
                {
                    Game1.tileFrameCounter[244] = 0;
                    Game1.tileFrame[244]++;
                    if (Game1.tileFrame[244] >= 6)
                    {
                        Game1.tileFrame[244] = 0;
                    }
                }
                Game1.tileFrameCounter[247]++;
                if (Game1.tileFrameCounter[247] > 4)
                {
                    Game1.tileFrameCounter[247] = 0;
                    Game1.tileFrame[247]++;
                    if (Game1.tileFrame[247] > 7)
                    {
                        Game1.tileFrame[247] = 0;
                    }
                }
                Game1.tileFrameCounter[96]++;
                if (Game1.tileFrameCounter[96] > 4)
                {
                    Game1.tileFrameCounter[96] = 0;
                    Game1.tileFrame[96]++;
                    if (Game1.tileFrame[96] > 3)
                    {
                        Game1.tileFrame[96] = 0;
                    }
                }
                Game1.tileFrameCounter[171]++;
                if (Game1.tileFrameCounter[171] > 16)
                {
                    Game1.tileFrameCounter[171] = 0;
                    Game1.tileFrame[171]++;
                    if (Game1.tileFrame[171] > 3)
                    {
                        Game1.tileFrame[171] = 0;
                    }
                }
                Game1.tileFrameCounter[270]++;
                if (Game1.tileFrameCounter[270] > 8)
                {
                    Game1.tileFrameCounter[270] = 0;
                    Game1.tileFrame[270]++;
                    if (Game1.tileFrame[270] > 5)
                    {
                        Game1.tileFrame[270] = 0;
                    }
                }
                Game1.tileFrame[271] = Game1.tileFrame[270];
                Game1.tileFrameCounter[272]++;
                if (Game1.tileFrameCounter[272] >= 10)
                {
                    Game1.tileFrameCounter[272] = 0;
                    Game1.tileFrame[272]++;
                    if (Game1.tileFrame[272] > 1)
                    {
                        Game1.tileFrame[272] = 0;
                    }
                }
                Game1.tileFrameCounter[300]++;
                if (Game1.tileFrameCounter[300] >= 5)
                {
                    Game1.tileFrameCounter[300] = 0;
                    Game1.tileFrame[300]++;
                    if (Game1.tileFrame[300] > 6)
                    {
                        Game1.tileFrame[300] = 0;
                    }
                }
                Game1.tileFrameCounter[301]++;
                if (Game1.tileFrameCounter[301] >= 5)
                {
                    Game1.tileFrameCounter[301] = 0;
                    Game1.tileFrame[301]++;
                    if (Game1.tileFrame[301] > 7)
                    {
                        Game1.tileFrame[301] = 0;
                    }
                }
                Game1.tileFrameCounter[302]++;
                if (Game1.tileFrameCounter[302] >= 5)
                {
                    Game1.tileFrameCounter[302] = 0;
                    Game1.tileFrame[302]++;
                    if (Game1.tileFrame[302] > 3)
                    {
                        Game1.tileFrame[302] = 0;
                    }
                }
                Game1.tileFrameCounter[303]++;
                if (Game1.tileFrameCounter[303] >= 5)
                {
                    Game1.tileFrameCounter[303] = 0;
                    Game1.tileFrame[303]++;
                    if (Game1.tileFrame[303] > 4)
                    {
                        Game1.tileFrame[303] = 0;
                    }
                }
                Game1.tileFrameCounter[305]++;
                if (Game1.tileFrameCounter[305] >= 5)
                {
                    Game1.tileFrameCounter[305] = 0;
                    Game1.tileFrame[305]++;
                    if (Game1.tileFrame[305] > 11)
                    {
                        Game1.tileFrame[305] = 0;
                    }
                }
                Game1.tileFrameCounter[306]++;
                if (Game1.tileFrameCounter[306] >= 5)
                {
                    Game1.tileFrameCounter[306] = 0;
                    Game1.tileFrame[306]++;
                    if (Game1.tileFrame[306] > 11)
                    {
                        Game1.tileFrame[306] = 0;
                    }
                }
                Game1.tileFrameCounter[307]++;
                if (Game1.tileFrameCounter[307] >= 5)
                {
                    Game1.tileFrameCounter[307] = 0;
                    Game1.tileFrame[307]++;
                    if (Game1.tileFrame[307] > 1)
                    {
                        Game1.tileFrame[307] = 0;
                    }
                }
                Game1.tileFrameCounter[308]++;
                if (Game1.tileFrameCounter[308] >= 5)
                {
                    Game1.tileFrameCounter[308] = 0;
                    Game1.tileFrame[308]++;
                    if (Game1.tileFrame[308] > 7)
                    {
                        Game1.tileFrame[308] = 0;
                    }
                }
                Game1.tileFrameCounter[314]++;
                if (Game1.tileFrameCounter[314] >= 10)
                {
                    Game1.tileFrameCounter[314] = 0;
                    Game1.tileFrame[314]++;
                    if (Game1.tileFrame[314] > 4)
                    {
                        Game1.tileFrame[314] = 0;
                    }
                }
                Game1.tileFrameCounter[326]++;
                if (Game1.tileFrameCounter[326] >= 5)
                {
                    Game1.tileFrameCounter[326] = 0;
                    Game1.tileFrame[326]++;
                    if (Game1.tileFrame[326] > 7)
                    {
                        Game1.tileFrame[326] = 0;
                    }
                }
                Game1.tileFrameCounter[327]++;
                if (Game1.tileFrameCounter[327] >= 10)
                {
                    Game1.tileFrameCounter[327] = 0;
                    Game1.tileFrame[327]++;
                    if (Game1.tileFrame[327] > 7)
                    {
                        Game1.tileFrame[327] = 0;
                    }
                }
                Game1.tileFrameCounter[345]++;
                if (Game1.tileFrameCounter[345] >= 10)
                {
                    Game1.tileFrameCounter[345] = 0;
                    Game1.tileFrame[345]++;
                    if (Game1.tileFrame[345] > 7)
                    {
                        Game1.tileFrame[345] = 0;
                    }
                }
                Game1.tileFrameCounter[336]++;
                if (Game1.tileFrameCounter[336] >= 5)
                {
                    Game1.tileFrameCounter[336] = 0;
                    Game1.tileFrame[336]++;
                    if (Game1.tileFrame[336] > 3)
                    {
                        Game1.tileFrame[336] = 0;
                    }
                }
                Game1.tileFrameCounter[328]++;
                if (Game1.tileFrameCounter[328] >= 5)
                {
                    Game1.tileFrameCounter[328] = 0;
                    Game1.tileFrame[328]++;
                    if (Game1.tileFrame[328] > 7)
                    {
                        Game1.tileFrame[328] = 0;
                    }
                }
                Game1.tileFrameCounter[329]++;
                if (Game1.tileFrameCounter[329] >= 5)
                {
                    Game1.tileFrameCounter[329] = 0;
                    Game1.tileFrame[329]++;
                    if (Game1.tileFrame[329] > 7)
                    {
                        Game1.tileFrame[329] = 0;
                    }
                }
                for (int i = 340; i <= 344; i++)
                {
                    Game1.tileFrameCounter[i]++;
                    if (Game1.tileFrameCounter[i] >= 5)
                    {
                        Game1.tileFrameCounter[i] = 0;
                        Game1.tileFrame[i]++;
                        if (Game1.tileFrame[i] > 3)
                        {
                            Game1.tileFrame[i] = 0;
                        }
                    }
                }
                Game1.tileFrameCounter[351]++;
                if (Game1.tileFrameCounter[351] >= 5)
                {
                    Game1.tileFrameCounter[351] = 0;
                    Game1.tileFrame[351]++;
                    if (Game1.tileFrame[351] > 2)
                    {
                        Game1.tileFrame[351] = 0;
                    }
                }
                Game1.tileFrameCounter[354]++;
                if (Game1.tileFrameCounter[354] >= 5)
                {
                    Game1.tileFrameCounter[354] = 0;
                    Game1.tileFrame[354]++;
                    if (Game1.tileFrame[354] >= 8)
                    {
                        Game1.tileFrame[354] = 0;
                    }
                }
                Game1.tileFrame[355] = Game1.tileFrame[354];
                Game1.tileFrameCounter[377]++;
                if (Game1.tileFrameCounter[377] >= 5)
                {
                    Game1.tileFrameCounter[377] = 0;
                    Game1.tileFrame[377]++;
                    if (Game1.tileFrame[377] >= 4)
                    {
                        Game1.tileFrame[377] = 0;
                    }
                }
                Game1.tileFrameCounter[379]++;
                if (Game1.tileFrameCounter[379] >= 10)
                {
                    Game1.tileFrameCounter[379] = 0;
                    Game1.tileFrame[379]++;
                    if (Game1.tileFrame[379] >= 4)
                    {
                        Game1.tileFrame[379] = 0;
                    }
                }
                if (++Game1.tileFrameCounter[390] >= 8)
                {
                    Game1.tileFrameCounter[390] = 0;
                    if (++Game1.tileFrame[390] >= 7)
                    {
                        Game1.tileFrame[390] = 0;
                    }
                }
                if (++Game1.tileFrameCounter[228] >= 5)
                {
                    Game1.tileFrameCounter[228] = 0;
                    if (++Game1.tileFrame[228] >= 3)
                    {
                        Game1.tileFrame[228] = 0;
                    }
                }
                if (++Game1.tileFrameCounter[405] >= 5)
                {
                    Game1.tileFrameCounter[405] = 0;
                    if (++Game1.tileFrame[405] >= 8)
                    {
                        Game1.tileFrame[405] = 0;
                    }
                }
                if (++Game1.tileFrameCounter[406] >= 8)
                {
                    Game1.tileFrameCounter[406] = 0;
                    if (++Game1.tileFrame[406] >= 6)
                    {
                        Game1.tileFrame[406] = 0;
                    }
                }
                if (++Game1.tileFrame[412] >= 240)
                {
                    Game1.tileFrame[412] = 0;
                }
                if (++Game1.tileFrameCounter[410] >= 8)
                {
                    Game1.tileFrameCounter[410] = 0;
                    if (++Game1.tileFrame[410] >= 8)
                    {
                        Game1.tileFrame[410] = 0;
                    }
                }
                Game1.CritterCages();
                Game1.UpdateDrawAnimations();
                if (Game1.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F10) && !Game1.chatMode && !Game1.editSign && !Game1.editChest)
                {
                    if (Game1.frameRelease)
                    {
                        Game1.PlaySound(12, -1, -1, 1);
                        if (Game1.showFrameRate)
                        {
                            Game1.showFrameRate = false;
                        }
                        else
                        {
                            Game1.showFrameRate = true;
                        }
                    }
                    Game1.frameRelease = false;
                }
                else
                {
                    Game1.frameRelease = true;
                }
                if (Game1.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F9) && !Game1.chatMode && !Game1.editSign && !Game1.editChest)
                {
                    if (Game1.RGBRelease)
                    {
                        Game1.PlaySound(12, -1, -1, 1);
                        Lighting.NextLightMode();
                    }
                    Game1.RGBRelease = false;
                }
                else
                {
                    Game1.RGBRelease = true;
                }
                if (Game1.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F8) && !Game1.chatMode && !Game1.editSign && !Game1.editChest)
                {
                    if (Game1.netRelease)
                    {
                        Game1.PlaySound(12, -1, -1, 1);
                        if (Game1.netDiag)
                        {
                            Game1.netDiag = false;
                        }
                        else
                        {
                            Game1.netDiag = true;
                        }
                    }
                    Game1.netRelease = false;
                }
                else
                {
                    Game1.netRelease = true;
                }
                if (Game1.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F7) && !Game1.chatMode && !Game1.editSign && !Game1.editChest)
                {
                    if (Game1.drawRelease)
                    {
                        Game1.PlaySound(12, -1, -1, 1);
                        if (Game1.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) || Game1.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt))
                        {
                            TimeLogger.Start();
                        }
                        else if (Game1.drawDiag)
                        {
                            Game1.drawDiag = false;
                        }
                        else
                        {
                            Game1.drawDiag = true;
                        }
                    }
                    Game1.drawRelease = false;
                }
                else
                {
                    Game1.drawRelease = true;
                }
                if (Game1.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F11))
                {
                    if (Game1.releaseUI)
                    {
                        if (Game1.hideUI)
                        {
                            Game1.hideUI = false;
                        }
                        else
                        {
                            Game1.hideUI = true;
                        }
                    }
                    Game1.releaseUI = false;
                }
                else
                {
                    Game1.releaseUI = true;
                }
                if ((Game1.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) || Game1.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt)) && Game1.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && Game1.hasFocus)
                {
                    if (Game1.toggleFullscreen)
                    {
                        Game1.ToggleFullScreen();
                        Game1.chatRelease = false;
                    }
                    Game1.toggleFullscreen = false;
                }
                else
                {
                    Game1.toggleFullscreen = true;
                }
                if (!Game1.gamePad || Game1.gameMenu)
                {
                    Game1.oldMouseState = Game1.mouseState;
                    Game1.oldMouseWheel = Game1.mouseState.ScrollWheelValue;
                    Game1.mouseState = Mouse.GetState();
                    Game1.lastMouseX = Game1.mouseX;
                    Game1.lastMouseY = Game1.mouseY;
                    Game1.mouseX = Game1.mouseState.X;
                    Game1.mouseY = Game1.mouseState.Y;
                    Game1.mouseLeft = false;
                    Game1.mouseRight = false;
                    if (base.IsActive)
                    {
                        if (UserInterface.ActiveInstance.IsElementUnderMouse())
                        {
                            Game1.oldMouseWheel = Game1.mouseState.ScrollWheelValue;
                            Game1._isMouseLeftConsumedByUI = true;
                        }
                        else
                        {
                            if (Game1.mouseState.LeftButton == Microsoft.Xna.Framework.Input.ButtonState.Released)
                            {
                                Game1._isMouseLeftConsumedByUI = false;
                            }
                            if (!Game1._isMouseLeftConsumedByUI)
                            {
                                if (Game1.mouseState.LeftButton == Microsoft.Xna.Framework.Input.ButtonState.Pressed)
                                {
                                    Game1.mouseLeft = true;
                                }
                                if (Game1.mouseState.RightButton == Microsoft.Xna.Framework.Input.ButtonState.Pressed)
                                {
                                    Game1.mouseRight = true;
                                }
                            }
                        }
                    }
                }
                Game1.keyState = Keyboard.GetState();
                if (Game1.editSign)
                {
                    Game1.chatMode = false;
                }
                if (!Game1.chatMode)
                {
                    Game1.startChatLine = 0;
                }
                if (Game1.chatMode)
                {
                    Game1.showCount = (int)((float)(Game1.screenHeight / 3) / Game1.fontMouseText.MeasureString("1").Y) - 1;
                    if (Game1.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Up))
                    {
                        Game1.startChatLine++;
                        if (Game1.startChatLine + Game1.showCount >= Game1.numChatLines - 1)
                        {
                            Game1.startChatLine = Game1.numChatLines - Game1.showCount - 1;
                        }
                        if (Game1.chatLine[Game1.startChatLine + Game1.showCount].text == "")
                        {
                            Game1.startChatLine--;
                        }
                    }
                    else if (Game1.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Down))
                    {
                        Game1.startChatLine--;
                        if (Game1.startChatLine < 0)
                        {
                            Game1.startChatLine = 0;
                        }
                    }
                    if (Game1.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Escape))
                    {
                        Game1.chatMode = false;
                    }
                    string a = Game1.chatText;
                    Game1.chatText = Game1.GetInputText(Game1.chatText);
                    int num7 = Game1.screenWidth - 330;
                    if (a != Game1.chatText)
                    {
                        while (ChatManager.GetStringSize(Game1.fontMouseText, Game1.chatText, Vector2.One, -1f).X > (float)num7)
                        {
                            Game1.chatText = Game1.chatText.Substring(0, Game1.chatText.Length - 1);
                        }
                    }
                    if (a != Game1.chatText)
                    {
                        Game1.PlaySound(12, -1, -1, 1);
                    }
                    if (Game1.inputTextEnter && Game1.chatRelease)
                    {
                        if (Game1.chatText != "")
                        {
                            NetMessage.SendData(25, -1, -1, Game1.chatText, Game1.myPlayer, 0f, 0f, 0f, 0, 0, 0);
                        }
                        if (Game1.netMode == 0 && Game1.chatText != "")
                        {
                            Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
                            if (Game1.player[Game1.myPlayer].difficulty == 2)
                            {
                                white = Game1.hcColor;
                            }
                            else if (Game1.player[Game1.myPlayer].difficulty == 1)
                            {
                                white = Game1.mcColor;
                            }
                            string newText = Game1.chatText;
                            newText = NameTagHandler.GenerateTag(Game1.player[Game1.myPlayer].name) + " " + Game1.chatText;
                            Game1.player[Game1.myPlayer].chatOverhead.NewMessage(Game1.chatText, Game1.chatLength / 2);
                            Game1.NewText(newText, white.R, white.G, white.B, false);
                        }
                        Game1.chatText = "";
                        Game1.chatMode = false;
                        Game1.chatRelease = false;
                        Game1.player[Game1.myPlayer].releaseHook = false;
                        Game1.player[Game1.myPlayer].releaseThrow = false;
                        Game1.PlaySound(11, -1, -1, 1);
                    }
                }
                if (Game1.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && Game1.netMode == 1 && !Game1.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) && !Game1.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt) && Game1.hasFocus)
                {
                    if (Game1.chatRelease && !Game1.chatMode && !Game1.editSign && !Game1.editChest && !Game1.gameMenu && !Game1.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Escape))
                    {
                        Game1.PlaySound(10, -1, -1, 1);
                        Game1.chatMode = true;
                        Game1.clrInput();
                        Game1.chatText = "";
                    }
                    Game1.chatRelease = false;
                }
                else
                {
                    Game1.chatRelease = true;
                }
                if (Game1.gameMenu)
                {
                    Game1.UpdateMenu();
                    if (Game1.netMode != 2)
                    {
                        return;
                    }
                    Game1.gamePaused = false;
                }
                Game1.CheckInvasionProgressDisplay();
            }
            if (Game1.netMode == 1)
            {
                for (int j = 0; j < 59; j++)
                {
                    if (Game1.player[Game1.myPlayer].inventory[j].IsNotTheSameAs(Game1.clientPlayer.inventory[j]))
                    {
                        NetMessage.SendData(5, -1, -1, Game1.player[Game1.myPlayer].inventory[j].name, Game1.myPlayer, (float)j, (float)Game1.player[Game1.myPlayer].inventory[j].prefix, 0f, 0, 0, 0);
                    }
                }
                for (int k = 0; k < Game1.player[Game1.myPlayer].armor.Length; k++)
                {
                    if (Game1.player[Game1.myPlayer].armor[k].IsNotTheSameAs(Game1.clientPlayer.armor[k]))
                    {
                        NetMessage.SendData(5, -1, -1, Game1.player[Game1.myPlayer].armor[k].name, Game1.myPlayer, (float)(59 + k), (float)Game1.player[Game1.myPlayer].armor[k].prefix, 0f, 0, 0, 0);
                    }
                }
                for (int l = 0; l < Game1.player[Game1.myPlayer].miscEquips.Length; l++)
                {
                    if (Game1.player[Game1.myPlayer].miscEquips[l].IsNotTheSameAs(Game1.clientPlayer.miscEquips[l]))
                    {
                        NetMessage.SendData(5, -1, -1, "", Game1.myPlayer, (float)(58 + Game1.player[Game1.myPlayer].armor.Length + Game1.player[Game1.myPlayer].dye.Length + 1 + l), (float)Game1.player[Game1.myPlayer].miscEquips[l].prefix, 0f, 0, 0, 0);
                    }
                }
                for (int m = 0; m < Game1.player[Game1.myPlayer].miscDyes.Length; m++)
                {
                    if (Game1.player[Game1.myPlayer].miscDyes[m].IsNotTheSameAs(Game1.clientPlayer.miscDyes[m]))
                    {
                        NetMessage.SendData(5, -1, -1, "", Game1.myPlayer, (float)(58 + Game1.player[Game1.myPlayer].armor.Length + Game1.player[Game1.myPlayer].dye.Length + Game1.player[Game1.myPlayer].miscEquips.Length + 1 + m), (float)Game1.player[Game1.myPlayer].miscDyes[m].prefix, 0f, 0, 0, 0);
                    }
                }
                for (int n = 0; n < Game1.player[Game1.myPlayer].bank.item.Length; n++)
                {
                    if (Game1.player[Game1.myPlayer].bank.item[n].IsNotTheSameAs(Game1.clientPlayer.bank.item[n]))
                    {
                        NetMessage.SendData(5, -1, -1, "", Game1.myPlayer, (float)(58 + Game1.player[Game1.myPlayer].armor.Length + Game1.player[Game1.myPlayer].dye.Length + Game1.player[Game1.myPlayer].miscEquips.Length + Game1.player[Game1.myPlayer].miscDyes.Length + 1 + n), (float)Game1.player[Game1.myPlayer].bank.item[n].prefix, 0f, 0, 0, 0);
                    }
                }
                for (int num8 = 0; num8 < Game1.player[Game1.myPlayer].bank2.item.Length; num8++)
                {
                    if (Game1.player[Game1.myPlayer].bank2.item[num8].IsNotTheSameAs(Game1.clientPlayer.bank2.item[num8]))
                    {
                        NetMessage.SendData(5, -1, -1, "", Game1.myPlayer, (float)(58 + Game1.player[Game1.myPlayer].armor.Length + Game1.player[Game1.myPlayer].dye.Length + Game1.player[Game1.myPlayer].miscEquips.Length + Game1.player[Game1.myPlayer].miscDyes.Length + Game1.player[Game1.myPlayer].bank.item.Length + 1 + num8), (float)Game1.player[Game1.myPlayer].bank2.item[num8].prefix, 0f, 0, 0, 0);
                    }
                }
                if (Game1.player[Game1.myPlayer].trashItem.IsNotTheSameAs(Game1.clientPlayer.trashItem))
                {
                    NetMessage.SendData(5, -1, -1, "", Game1.myPlayer, (float)(58 + Game1.player[Game1.myPlayer].armor.Length + Game1.player[Game1.myPlayer].dye.Length + Game1.player[Game1.myPlayer].miscEquips.Length + Game1.player[Game1.myPlayer].miscDyes.Length + Game1.player[Game1.myPlayer].bank.item.Length + Game1.player[Game1.myPlayer].bank2.item.Length + 1), (float)Game1.player[Game1.myPlayer].trashItem.prefix, 0f, 0, 0, 0);
                }
                for (int num9 = 0; num9 < Game1.player[Game1.myPlayer].dye.Length; num9++)
                {
                    if (Game1.player[Game1.myPlayer].dye[num9].IsNotTheSameAs(Game1.clientPlayer.dye[num9]))
                    {
                        NetMessage.SendData(5, -1, -1, Game1.player[Game1.myPlayer].dye[0].name, Game1.myPlayer, (float)(58 + Game1.player[Game1.myPlayer].armor.Length + 1 + num9), (float)Game1.player[Game1.myPlayer].dye[num9].prefix, 0f, 0, 0, 0);
                    }
                }
                if (Game1.player[Game1.myPlayer].chest != Game1.clientPlayer.chest && Game1.player[Game1.myPlayer].chest < 0)
                {
                    if (Game1.player[Game1.myPlayer].editedChestName)
                    {
                        if (Game1.chest[Game1.clientPlayer.chest] != null)
                        {
                            NetMessage.SendData(33, -1, -1, Game1.chest[Game1.clientPlayer.chest].name, Game1.player[Game1.myPlayer].chest, 1f, 0f, 0f, 0, 0, 0);
                        }
                        else
                        {
                            NetMessage.SendData(33, -1, -1, "", Game1.player[Game1.myPlayer].chest, 0f, 0f, 0f, 0, 0, 0);
                        }
                        Game1.player[Game1.myPlayer].editedChestName = false;
                    }
                    else
                    {
                        NetMessage.SendData(33, -1, -1, "", Game1.player[Game1.myPlayer].chest, 0f, 0f, 0f, 0, 0, 0);
                    }
                }
                if (Game1.player[Game1.myPlayer].talkNPC != Game1.clientPlayer.talkNPC)
                {
                    NetMessage.SendData(40, -1, -1, "", Game1.myPlayer, 0f, 0f, 0f, 0, 0, 0);
                }
                bool flag = false;
                if (Game1.player[Game1.myPlayer].zone1 != Game1.clientPlayer.zone1)
                {
                    flag = true;
                }
                if (Game1.player[Game1.myPlayer].zone2 != Game1.clientPlayer.zone2)
                {
                    flag = true;
                }
                if (flag)
                {
                    NetMessage.SendData(36, -1, -1, "", Game1.myPlayer, 0f, 0f, 0f, 0, 0, 0);
                }
                if (Game1.player[Game1.myPlayer].statLife != Game1.clientPlayer.statLife || Game1.player[Game1.myPlayer].statLifeMax != Game1.clientPlayer.statLifeMax)
                {
                    Game1.player[Game1.myPlayer].netLife = true;
                }
                if (Game1.player[Game1.myPlayer].netLifeTime > 0)
                {
                    Game1.player[Game1.myPlayer].netLifeTime--;
                }
                else if (Game1.player[Game1.myPlayer].netLife)
                {
                    Game1.player[Game1.myPlayer].netLife = false;
                    Game1.player[Game1.myPlayer].netLifeTime = 60;
                    NetMessage.SendData(16, -1, -1, "", Game1.myPlayer, 0f, 0f, 0f, 0, 0, 0);
                }
                if (Game1.player[Game1.myPlayer].statMana != Game1.clientPlayer.statMana || Game1.player[Game1.myPlayer].statManaMax != Game1.clientPlayer.statManaMax)
                {
                    Game1.player[Game1.myPlayer].netMana = true;
                }
                if (Game1.player[Game1.myPlayer].netManaTime > 0)
                {
                    Game1.player[Game1.myPlayer].netManaTime--;
                }
                else if (Game1.player[Game1.myPlayer].netMana)
                {
                    Game1.player[Game1.myPlayer].netMana = false;
                    Game1.player[Game1.myPlayer].netManaTime = 60;
                    NetMessage.SendData(42, -1, -1, "", Game1.myPlayer, 0f, 0f, 0f, 0, 0, 0);
                }
                bool flag2 = false;
                for (int num10 = 0; num10 < 22; num10++)
                {
                    if (Game1.player[Game1.myPlayer].buffType[num10] != Game1.clientPlayer.buffType[num10])
                    {
                        flag2 = true;
                    }
                }
                if (flag2)
                {
                    NetMessage.SendData(50, -1, -1, "", Game1.myPlayer, 0f, 0f, 0f, 0, 0, 0);
                    NetMessage.SendData(13, -1, -1, "", Game1.myPlayer, 0f, 0f, 0f, 0, 0, 0);
                }
                bool flag3 = false;
                if (Game1.player[Game1.myPlayer].MinionTargetPoint != Game1.clientPlayer.MinionTargetPoint)
                {
                    flag3 = true;
                }
                if (flag3)
                {
                    NetMessage.SendData(99, -1, -1, "", Game1.myPlayer, 0f, 0f, 0f, 0, 0, 0);
                }
            }

            if (Game1.netMode == 1)
            {
                Game1.clientPlayer = (Player)Game1.player[Game1.myPlayer].clientClone();
            }

            if (Game1.netMode == 0 && (Game1.playerInventory 
                || Game1.npcChatText != "" || Game1.player[Game1.myPlayer].sign >= 0 
                || Game1.ingameOptionsWindow || Game1.achievementsWindow) && Game1.autoPause)
            {
                if (!Game1.chatMode && !Game1.editSign && !Game1.editChest && !Game1.blockInput)
                {
                    Microsoft.Xna.Framework.Input.Keys[] pressedKeys = Game1.keyState.GetPressedKeys();
                    if (Game1.blockKey != Microsoft.Xna.Framework.Input.Keys.None)
                    {
                        bool flag4 = false;
                        for (int num11 = 0; num11 < pressedKeys.Length; num11++)
                        {
                            if (pressedKeys[num11] == Game1.blockKey)
                            {
                                pressedKeys[num11] = Microsoft.Xna.Framework.Input.Keys.None;
                                flag4 = true;
                            }
                        }
                        if (!flag4)
                        {
                            Game1.blockKey = Microsoft.Xna.Framework.Input.Keys.None;
                        }
                    }
                    Game1.player[Game1.myPlayer].controlInv = false;
                    for (int num12 = 0; num12 < pressedKeys.Length; num12++)
                    {
                        string a2 = string.Concat(pressedKeys[num12]);
                        if (a2 == Game1.cInv)
                        {
                            Game1.player[Game1.myPlayer].controlInv = true;
                        }
                    }
                    if (Game1.player[Game1.myPlayer].controlInv)
                    {
                        if (Game1.player[Game1.myPlayer].releaseInventory)
                        {
                            Game1.player[Game1.myPlayer].ToggleInv();
                        }
                        Game1.player[Game1.myPlayer].releaseInventory = false;
                    }
                    else
                    {
                        Game1.player[Game1.myPlayer].releaseInventory = true;
                    }
                }
                if (Game1.playerInventory)
                {
                    int num13 = (Game1.mouseState.ScrollWheelValue - Game1.oldMouseWheel) / 120;
                    bool flag5 = true;
                    if (Game1.recBigList)
                    {
                        int num14 = 42;
                        int num15 = 340;
                        int num16 = 310;
                        int num17 = (Game1.screenWidth - num16 - 280) / num14;
                        int num18 = (Game1.screenHeight - num15 - 20) / num14;
                        if (new Microsoft.Xna.Framework.Rectangle(num16, num15, num17 * num14, num18 * num14).Contains(Game1.MouseScreen.ToPoint()))
                        {
                            int num19 = Math.Sign(num13);
                            while (num13 != 0)
                            {
                                if (num13 < 0)
                                {
                                    Game1.recStart -= num17;
                                    if (Game1.recStart < 0)
                                    {
                                        Game1.recStart = 0;
                                    }
                                }
                                else
                                {
                                    Game1.recStart += num17;
                                    Game1.PlaySound(12, -1, -1, 1);
                                    if (Game1.recStart > Game1.numAvailableRecipes - num17)
                                    {
                                        Game1.recStart = Game1.numAvailableRecipes - num17;
                                    }
                                }
                                num13 -= num19;
                            }
                        }
                    }
                    if (flag5)
                    {
                        Game1.focusRecipe += num13;
                        if (Game1.focusRecipe > Game1.numAvailableRecipes - 1)
                        {
                            Game1.focusRecipe = Game1.numAvailableRecipes - 1;
                        }
                        if (Game1.focusRecipe < 0)
                        {
                            Game1.focusRecipe = 0;
                        }
                    }
                    Game1.player[Game1.myPlayer].dropItemCheck();
                }
                Game1.player[Game1.myPlayer].head = Game1.player[Game1.myPlayer].armor[0].headSlot;
                Game1.player[Game1.myPlayer].body = Game1.player[Game1.myPlayer].armor[1].bodySlot;
                Game1.player[Game1.myPlayer].legs = Game1.player[Game1.myPlayer].armor[2].legSlot;
                if (!Game1.player[Game1.myPlayer].hostile)
                {
                    if (Game1.player[Game1.myPlayer].armor[10].headSlot >= 0)
                    {
                        Game1.player[Game1.myPlayer].head = Game1.player[Game1.myPlayer].armor[10].headSlot;
                    }
                    if (Game1.player[Game1.myPlayer].armor[11].bodySlot >= 0)
                    {
                        Game1.player[Game1.myPlayer].body = Game1.player[Game1.myPlayer].armor[11].bodySlot;
                    }
                    if (Game1.player[Game1.myPlayer].armor[12].legSlot >= 0)
                    {
                        Game1.player[Game1.myPlayer].legs = Game1.player[Game1.myPlayer].armor[12].legSlot;
                    }
                }
                if (Game1.editSign)
                {
                    if (Game1.player[Game1.myPlayer].sign == -1)
                    {
                        Game1.editSign = false;
                    }
                    else
                    {
                        Game1.npcChatText = Game1.GetInputText(Game1.npcChatText);
                        if (Game1.inputTextEnter)
                        {
                            byte[] bytes = new byte[]
                            {
                                10
                            };
                            Game1.npcChatText += Encoding.ASCII.GetString(bytes);
                        }
                        else if (Game1.inputTextEscape)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                            Game1.editSign = false;
                            Game1.blockKey = Microsoft.Xna.Framework.Input.Keys.Escape;
                            Game1.npcChatText = Game1.sign[Game1.player[Game1.myPlayer].sign].text;
                        }
                    }
                }
                else if (Game1.editChest)
                {
                    string text = Game1.GetInputText(Game1.npcChatText);
                    if (Game1.inputTextEnter)
                    {
                        Game1.PlaySound(12, -1, -1, 1);
                        Game1.editChest = false;
                        int num20 = Game1.player[Game1.myPlayer].chest;
                        if (Game1.npcChatText == Game1.defaultChestName)
                        {
                            Game1.npcChatText = "";
                        }
                        if (Game1.chest[num20].name != Game1.npcChatText)
                        {
                            Game1.chest[num20].name = Game1.npcChatText;
                            if (Game1.netMode == 1)
                            {
                                Game1.player[Game1.myPlayer].editedChestName = true;
                            }
                        }
                    }
                    else if (Game1.inputTextEscape)
                    {
                        Game1.PlaySound(12, -1, -1, 1);
                        Game1.editChest = false;
                        Game1.npcChatText = string.Empty;
                        Game1.blockKey = Microsoft.Xna.Framework.Input.Keys.Escape;
                    }
                    else if (text.Length <= 20)
                    {
                        Game1.npcChatText = text;
                    }
                }
                Game1.gamePaused = true;
                return;
            }
            Game1.gamePaused = false;
            if (!Game1.dedServ && (double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0 && Game1.netMode != 2)
            {
                Star.UpdateStars();
                Cloud.UpdateClouds();
            }
            PortalHelper.UpdatePortalPoints();
            Game1.tileSolid[379] = false;
            Game1.numPlayers = 0;
            int num21 = 0;
            while (num21 < 255)
            {
                if (Game1.ignoreErrors)
                {
                    try
                    {
                        Game1.player[num21].Update(num21);
                        goto IL_3BCD;
                    }
                    catch
                    {
                        goto IL_3BCD;
                    }
                }
                goto IL_3BBE;
            IL_3BCD:
                num21++;
                continue;
            IL_3BBE:
                Game1.player[num21].Update(num21);
                goto IL_3BCD;
            }
            if (Game1.netMode != 1)
            {
                try
                {
                    NPC.SpawnNPC();
                }
                catch
                {
                }
            }
            for (int num22 = 0; num22 < 255; num22++)
            {
                Game1.player[num22].activeNPCs = 0f;
                Game1.player[num22].townNPCs = 0f;
            }
            if (Game1.wof >= 0 && !Game1.npc[Game1.wof].active)
            {
                Game1.wof = -1;
            }
            if (NPC.golemBoss >= 0 && !Game1.npc[NPC.golemBoss].active)
            {
                NPC.golemBoss = -1;
            }
            if (NPC.plantBoss >= 0 && !Game1.npc[NPC.plantBoss].active)
            {
                NPC.plantBoss = -1;
            }
            if (NPC.crimsonBoss >= 0 && !Game1.npc[NPC.crimsonBoss].active)
            {
                NPC.crimsonBoss = -1;
            }
            NPC.taxCollector = false;
            int num23 = 0;
            while (num23 < 200)
            {
                if (Game1.ignoreErrors)
                {
                    try
                    {
                        Game1.npc[num23].UpdateNPC(num23);
                        goto IL_3CE8;
                    }
                    catch (Exception)
                    {
                        Game1.npc[num23] = new NPC();
                        goto IL_3CE8;
                    }
                }
                goto IL_3CD9;
            IL_3CE8:
                num23++;
                continue;
            IL_3CD9:
                Game1.npc[num23].UpdateNPC(num23);
                goto IL_3CE8;
            }
            int num24 = 0;
            while (num24 < 500)
            {
                if (Game1.ignoreErrors)
                {
                    try
                    {
                        Game1.gore[num24].Update();
                        goto IL_3D2F;
                    }
                    catch
                    {
                        Game1.gore[num24] = new Gore();
                        goto IL_3D2F;
                    }
                }
                goto IL_3D22;
            IL_3D2F:
                num24++;
                continue;
            IL_3D22:
                Game1.gore[num24].Update();
                goto IL_3D2F;
            }
            int num25 = 0;
            while (num25 < 1000)
            {
                Game1.ProjectileUpdateLoopIndex = num25;
                if (Game1.ignoreErrors)
                {
                    try
                    {
                        Game1.projectile[num25].Update(num25);
                        goto IL_3D81;
                    }
                    catch
                    {
                        Game1.projectile[num25] = new Projectile();
                        goto IL_3D81;
                    }
                }
                goto IL_3D72;
            IL_3D81:
                num25++;
                continue;
            IL_3D72:
                Game1.projectile[num25].Update(num25);
                goto IL_3D81;
            }
            Game1.ProjectileUpdateLoopIndex = -1;
            int num26 = 0;
            while (num26 < 400)
            {
                if (Game1.ignoreErrors)
                {
                    try
                    {
                        Game1.item[num26].UpdateItem(num26);
                        goto IL_3DD2;
                    }
                    catch
                    {
                        Game1.item[num26] = new Item();
                        goto IL_3DD2;
                    }
                }
                goto IL_3DC3;
            IL_3DD2:
                num26++;
                continue;
            IL_3DC3:
                Game1.item[num26].UpdateItem(num26);
                goto IL_3DD2;
            }
            if (Game1.ignoreErrors)
            {
                try
                {
                    Dust.UpdateDust();
                    goto IL_3E18;
                }
                catch
                {
                    for (int num27 = 0; num27 < 6000; num27++)
                    {
                        Game1.dust[num27] = new Dust();
                    }
                    goto IL_3E18;
                }
            }
            Dust.UpdateDust();
        IL_3E18:
            if (Game1.netMode != 2)
            {
                CombatText.UpdateCombatText();
                ItemText.UpdateItemText();
            }
            if (Game1.ignoreErrors)
            {
                try
                {
                    Game1.UpdateTime();
                    goto IL_3E46;
                }
                catch
                {
                    Game1.checkForSpawns = 0;
                    goto IL_3E46;
                }
            }
            Game1.UpdateTime();
        IL_3E46:
            Game1.tileSolid[379] = true;
            if (Game1.netMode != 1)
            {
                if (Game1.ignoreErrors)
                {
                    try
                    {
                        WorldGen.UpdateWorld();
                        Game1.UpdateInvasion();
                        goto IL_3E7A;
                    }
                    catch
                    {
                        goto IL_3E7A;
                    }
                }
                WorldGen.UpdateWorld();
                Game1.UpdateInvasion();
            }
        IL_3E7A:
            if (Game1.ignoreErrors)
            {
                try
                {
                    if (Game1.netMode == 2)
                    {
                        Game1.UpdateServer();
                    }
                    if (Game1.netMode == 1)
                    {
                        Game1.UpdateClient();
                    }
                    goto IL_3EC2;
                }
                catch
                {
                    int arg_3EA5_0 = Game1.netMode;
                    goto IL_3EC2;
                }
            }
            if (Game1.netMode == 2)
            {
                Game1.UpdateServer();
            }
            if (Game1.netMode == 1)
            {
                Game1.UpdateClient();
            }
        IL_3EC2:
            if (Game1.ignoreErrors)
            {
                try
                {
                    for (int num28 = 0; num28 < Game1.numChatLines; num28++)
                    {
                        if (Game1.chatLine[num28].showTime > 0)
                        {
                            Game1.chatLine[num28].showTime--;
                        }
                    }
                    goto IL_3F61;
                }
                catch
                {
                    for (int num29 = 0; num29 < Game1.numChatLines; num29++)
                    {
                        Game1.chatLine[num29] = new ChatLine();
                    }
                    goto IL_3F61;
                }
            }
            for (int num30 = 0; num30 < Game1.numChatLines; num30++)
            {
                if (Game1.chatLine[num30].showTime > 0)
                {
                    Game1.chatLine[num30].showTime--;
                }
            }
        IL_3F61:
            Game1.upTimer = (float)stopwatch.Elapsed.TotalMilliseconds;
            if (Game1.upTimerMaxDelay > 0f)
            {
                Game1.upTimerMaxDelay -= 1f;
            }
            else
            {
                Game1.upTimerMax = 0f;
            }

            if (Game1.upTimer > Game1.upTimerMax)
            {
                Game1.upTimerMax = Game1.upTimer;
                Game1.upTimerMaxDelay = 400f;
            }

            Chest.UpdateChestFrames();
            base.Update(gameTime);

        }


        // UpdateMenu
        private static void UpdateMenu()
        {
            AchievementCompleteUI.Clear();
            Game1.playerInventory = false;
            Game1.exitScale = 0.8f;
            if (Game1.netMode == 0)
            {
                Game1.maxRaining = 0f;
                Game1.raining = false;
                if (!Game1.grabSky)
                {
                    Game1.time += 86.4;
                    if (!Game1.dayTime)
                    {
                        if (Game1.time > 32400.0)
                        {
                            Game1.bloodMoon = false;
                            Game1.time = 0.0;
                            Game1.dayTime = true;
                            Game1.moonPhase++;
                            if (Game1.moonPhase >= 8)
                            {
                                Game1.moonPhase = 0;
                                return;
                            }
                        }
                    }
                    else if (Game1.time > 54000.0)
                    {
                        Game1.time = 0.0;
                        Game1.dayTime = false;
                        return;
                    }
                }
            }
            else if (Game1.netMode == 1)
            {
                Game1.UpdateTime();
            }
        }//

        public static void clrInput()
        {
            Game1.keyCount = 0;
        }//

        //RnD
        //[DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
        //public static extern short GetKeyState(int keyCode);
        public static short GetKeyState(int keyCode)
        {
            return default;
        }

        // 
        /*
        public static string GetInputText(string oldString)
        {
            if (!Game1.hasFocus)
                return oldString;

            Game1.inputTextEnter = false;
            Game1.inputTextEscape = false;
            string str1 = oldString;
            string newKeys = "";
            if (str1 == null)
                str1 = "";
            bool flag1 = false;
            if (Game1.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftControl)
                || Game1.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightControl))
            {
                if (Game1.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Z)
                    && !Game1.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Z))
                {
                    str1 = "";
                }
                else if (Game1.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.X)
                    && !Game1.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.X))
                {
                    // RnD
                    //Thread thread = new Thread((ThreadStart)(() =>
                    //{

                    if (oldString.Length <= 0)
                    {
                        return "";//return;
                    }

                    //Clipboard.SetText(oldString);
                    //}));


                    //thread.SetApartmentState(ApartmentState.STA);
                    //thread.Start();
                    //while (thread.IsAlive) ;
                    str1 = "";
                }
                else if (Game1.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.C)
                    && !Game1.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.C)
                    || Game1.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert)
                    && !Game1.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert))
                {
                    Thread thread = new Thread((ThreadStart)(() =>
                    {
                        if (oldString.Length <= 0)
                        {
                            //RnD
                            return;
                        }

                        //Clipboard.SetText(oldString);
                    }));
                    //thread.SetApartmentState(ApartmentState.STA);
                    thread.Start();

                    while (thread.IsAlive)
                    {
                        ;
                    }
                }
                else if (Game1.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.V)
                    && !Game1.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.V))
                {
                    Thread thread = new Thread((ThreadStart)(() =>
                    {
                        //RnD
                        string str2 = "";//Clipboard.GetText();
                        for (int index = 0; index < str2.Length; ++index)
                        {
                            if ((int)str2[index] < 32 || (int)str2[index] == (int)sbyte.MaxValue)
                                str2 = str2.Replace(string.Concat((object)str2[index--]), "");
                        }
                        // ISSUE: reference to a compiler-generated field
                        newKeys += str2;
                    }));

                    //thread.SetApartmentState(ApartmentState.STA);
                    thread.Start();
                    while (thread.IsAlive) ;
                }
            }
            else
            {
                if (Game1.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftShift)
                    || Game1.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightShift))
                {
                    if (Game1.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Delete)
                        && !Game1.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Delete))
                    {
                        Thread thread = new Thread((ThreadStart)(() =>
                        {
                            if (oldString.Length <= 0)
                            {
                                //RnD
                                return;
                            }

                            //Clipboard.SetText(oldString);
                        }));

                        //thread.SetApartmentState(ApartmentState.STA);
                        thread.Start();

                        while (thread.IsAlive) ;

                        str1 = "";
                    }
                    if (Game1.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert)
                        && !Game1.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert))
                    {
                        Thread thread = new Thread((ThreadStart)(() =>
                        {
                            string str2 = "";// Clipboard.GetText();
                            for (int index = 0; index < str2.Length; ++index)
                            {
                                if ((int)str2[index] < 32 || (int)str2[index] == (int)sbyte.MaxValue)
                                    str2 = str2.Replace(string.Concat((object)str2[index--]), "");
                            }
                            // ISSUE: reference to a compiler-generated field
                            newKeys += str2;
                        }));
                        //thread.SetApartmentState(ApartmentState.STA);
                        thread.Start();

                        while (thread.IsAlive)
                        {
                            ;
                        }
                    }
                }
                for (int index = 0; index < Game1.keyCount; ++index)
                {
                    int num = Game1.keyInt[index];
                    string str2 = Game1.keyString[index];
                    if (num == 13)
                        Game1.inputTextEnter = true;
                    else if (num == 27)
                        Game1.inputTextEscape = true;
                    else if (num >= 32 && num != (int)sbyte.MaxValue)
                        newKeys += str2;
                }
            }
            Game1.keyCount = 0;
            string text = str1 + newKeys;
            Game1.oldInputText = Game1.inputText;
            Game1.inputText = Keyboard.GetState();
            Microsoft.Xna.Framework.Input.Keys[] pressedKeys1 = Game1.inputText.GetPressedKeys();
            Microsoft.Xna.Framework.Input.Keys[] pressedKeys2 = Game1.oldInputText.GetPressedKeys();

            if (Game1.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Back) 
                && Game1.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Back))
            {
                if (Game1.backSpaceCount == 0)
                {
                    Game1.backSpaceCount = 7;
                    flag1 = true;
                }
                --Game1.backSpaceCount;
            }
            else
            {
                Game1.backSpaceCount = 15;
            }

            for (int index1 = 0; index1 < pressedKeys1.Length; ++index1)
            {
                bool flag2 = true;
                for (int index2 = 0; index2 < pressedKeys2.Length; ++index2)
                {
                    if (pressedKeys1[index1] == pressedKeys2[index2])
                        flag2 = false;
                }
                if (string.Concat((object)pressedKeys1[index1]) == "Back" && (flag2 || flag1) && text.Length > 0)
                {
                    TextSnippet[] textSnippetArray = ChatManager.ParseMessage(text, Microsoft.Xna.Framework.Color.White);
                    text = !textSnippetArray[textSnippetArray.Length - 1].DeleteWhole ? text.Substring(0, text.Length - 1) : text.Substring(0, text.Length - textSnippetArray[textSnippetArray.Length - 1].TextOriginal.Length);
                }
            }
            return text;

        }//GetInputText
        */

        public static string GetInputText(string oldString)
        {
            if (!Game1.hasFocus)
                return oldString;

            Game1.inputTextEnter = false;
            string inputText = oldString ?? "";

            Game1.oldInputText = Game1.inputText;

            //RnD
            /*
            Game1.inputText = Keyboard.GetState();
            bool flag1 = ((int) (ushort) Game1.GetKeyState(20) & (int) ushort.MaxValue) != 0;
            bool flag2 = false;
            if (Game1.inputText.IsKeyDown(Keys.LeftShift) || Game1.inputText.IsKeyDown(Keys.RightShift))
              flag2 = true;
            Keys[] pressedKeys1 = Game1.inputText.GetPressedKeys();
            Keys[] pressedKeys2 = Game1.oldInputText.GetPressedKeys();
            bool flag3 = false;
            if (Game1.inputText.IsKeyDown(Keys.Back) && Game1.oldInputText.IsKeyDown(Keys.Back))
            {
              if (Game1.backSpaceCount == 0)
              {
                Game1.backSpaceCount = 7;
                flag3 = true;
              }
              --Game1.backSpaceCount;
            }
            else
              Game1.backSpaceCount = 15;
            for (int index1 = 0; index1 < pressedKeys1.Length; ++index1)
            {
              bool flag4 = true;
              for (int index2 = 0; index2 < pressedKeys2.Length; ++index2)
              {
                if (pressedKeys1[index1] == pressedKeys2[index2])
                  flag4 = false;
              }
              string str = string.Concat((object) pressedKeys1[index1]);
              if (str == "Back" && (flag4 || flag3))
              {
                if (inputText.Length > 0)
                  inputText = inputText.Substring(0, inputText.Length - 1);
              }
              else if (flag4)
              {
                if (str == "Space")
                  str = " ";
                else if (str.Length == 1)
                {
                  int int32 = Convert.ToInt32(Convert.ToChar(str));
                  if (int32 >= 65 && int32 <= 90 && (!flag2 && !flag1 || flag2 && flag1))
                    str = string.Concat((object) Convert.ToChar(int32 + 32));
                }
                else if (str.Length == 2 && str.Substring(0, 1) == "D")
                {
                  str = str.Substring(1, 1);
                  if (flag2)
                  {
                    if (str == "1")
                      str = "!";
                    if (str == "2")
                      str = "@";
                    if (str == "3")
                      str = "#";
                    if (str == "4")
                      str = "$";
                    if (str == "5")
                      str = "%";
                    if (str == "6")
                      str = "^";
                    if (str == "7")
                      str = "&";
                    if (str == "8")
                      str = "*";
                    if (str == "9")
                      str = "(";
                    if (str == "0")
                      str = ")";
                  }
                }
                else if (str.Length == 7 && str.Substring(0, 6) == "NumPad")
                {
                  str = str.Substring(6, 1);
                }
                else
                {
                  switch (str)
                  {
                    case "Divide":
                      str = "/";
                      goto label_82;
                    case "Multiply":
                      str = "*";
                      goto label_82;
                    case "Subtract":
                      str = "-";
                      goto label_82;
                    case "Add":
                      str = "+";
                      goto label_82;
                    case "Decimal":
                      str = ".";
                      goto label_82;
                    case "OemSemicolon":
                      str = ";";
                      break;
                    case "OemPlus":
                      str = "=";
                      break;
                    case "OemComma":
                      str = ",";
                      break;
                    case "OemMinus":
                      str = "-";
                      break;
                    case "OemPeriod":
                      str = ".";
                      break;
                    case "OemQuestion":
                      str = "/";
                      break;
                    case "OemTilde":
                      str = "`";
                      break;
                    case "OemOpenBrackets":
                      str = "[";
                      break;
                    case "OemPipe":
                      str = "\\";
                      break;
                    case "OemCloseBrackets":
                      str = "]";
                      break;
                    case "OemQuotes":
                      str = "'";
                      break;
                    case "OemBackslash":
                      str = "\\";
                      break;
                  }
                  if (flag2)
                  {
                    switch (str)
                    {
                      case ";":
                        str = ":";
                        break;
                      case "=":
                        str = "+";
                        break;
                      case ",":
                        str = "<";
                        break;
                      case "-":
                        str = "_";
                        break;
                      case ".":
                        str = ">";
                        break;
                      case "/":
                        str = "?";
                        break;
                      case "`":
                        str = "~";
                        break;
                      case "[":
                        str = "{";
                        break;
                      case "\\":
                        str = "|";
                        break;
                      case "]":
                        str = "}";
                        break;
                      case "'":
                        str = "\"";
                        break;
                    }
                  }
                }
      label_82:
                if (str == "Enter")
                  Game1.inputTextEnter = true;
                if (str.Length == 1)
                  inputText += str;
              }
            }
            */
            inputText = "TEST";
            return inputText;
        }


        public void MouseText(string cursorText, int rare = 0, byte diff = 0)
        {
            int num = -1;
            if (this.mouseNPC > -1)
            {
                return;
            }
            if (cursorText == null)
            {
                return;
            }
            int num2 = Game1.mouseX + 10;
            int num3 = Game1.mouseY + 10;
            Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor);
            float num26;
            if (Game1.toolTip.itemId > 0)
            {
                rare = Game1.toolTip.rare;
                float knockBack = Game1.toolTip.knockBack;
                float num4 = 1f;
                if (Game1.toolTip.melee && Game1.player[Game1.myPlayer].kbGlove)
                {
                    num4 += 1f;
                }
                if (Game1.player[Game1.myPlayer].kbBuff)
                {
                    num4 += 0.5f;
                }
                if (num4 != 1f)
                {
                    Game1.toolTip.knockBack *= num4;
                }
                if (Game1.toolTip.ranged && Game1.player[Game1.myPlayer].shroomiteStealth)
                {
                    Game1.toolTip.knockBack *= 1f + (1f - Game1.player[Game1.myPlayer].stealth) * 0.5f;
                }
                int num5 = 20;
                int num6 = 1;
                string[] array = new string[num5];
                bool[] array2 = new bool[num5];
                bool[] array3 = new bool[num5];
                for (int i = 0; i < num5; i++)
                {
                    array2[i] = false;
                    array3[i] = false;
                }
                array[0] = Game1.toolTip.AffixName();
                if (Game1.toolTip.stack > 1)
                {
                    string[] array4;
                    string[] expr_179 = array4 = array;
                    int arg_1BD_1 = 0;
                    object obj = array4[0];
                    expr_179[arg_1BD_1] = string.Concat(new object[]
                    {
                        obj,
                        " (",
                        Game1.toolTip.stack,
                        ")"
                    });
                }
                if (Game1.toolTip.favorited)
                {
                    array[num6++] = Lang.tip[56];
                    array[num6++] = Lang.tip[57];
                }
                if (Game1.toolTip.social)
                {
                    array[num6] = Lang.tip[0];
                    num6++;
                    array[num6] = Lang.tip[1];
                    num6++;
                }
                else
                {
                    if (Game1.toolTip.damage > 0 && (!Game1.toolTip.notAmmo || Game1.toolTip.useStyle > 0))
                    {
                        float num7 = 5E-06f;
                        int damage = Game1.toolTip.damage;
                        if (Game1.toolTip.melee)
                        {
                            array[num6] = string.Concat((int)(Game1.player[Game1.myPlayer].meleeDamage * (float)damage + num7));
                            string[] array4;
                            IntPtr intPtr;
                            (array4 = array)[(int)(intPtr = (IntPtr)num6)] = array4[(int)intPtr] + Lang.tip[2];
                        }
                        else if (Game1.toolTip.ranged)
                        {
                            float num8 = (float)damage * Game1.player[Game1.myPlayer].rangedDamage;
                            if (Game1.toolTip.useAmmo == 1 || Game1.toolTip.useAmmo == 323)
                            {
                                num8 *= Game1.player[Game1.myPlayer].arrowDamage;
                            }
                            if (Game1.toolTip.useAmmo == 1 && Game1.player[Game1.myPlayer].archery)
                            {
                                num8 *= 1.2f;
                            }
                            if (Game1.toolTip.useAmmo == 14 || Game1.toolTip.useAmmo == 311)
                            {
                                num8 *= Game1.player[Game1.myPlayer].bulletDamage;
                            }
                            if (Game1.toolTip.useAmmo == 771 || Game1.toolTip.useAmmo == 246 || Game1.toolTip.useAmmo == 312 || Game1.toolTip.useAmmo == 514)
                            {
                                num8 *= Game1.player[Game1.myPlayer].rocketDamage;
                            }
                            array[num6] = string.Concat((int)(num8 + num7));
                            string[] array4;
                            IntPtr intPtr;
                            (array4 = array)[(int)(intPtr = (IntPtr)num6)] = array4[(int)intPtr] + Lang.tip[3];
                        }
                        else if (Game1.toolTip.magic)
                        {
                            array[num6] = string.Concat((int)(Game1.player[Game1.myPlayer].magicDamage * (float)damage + num7));
                            string[] array4;
                            IntPtr intPtr;
                            (array4 = array)[(int)(intPtr = (IntPtr)num6)] = array4[(int)intPtr] + Lang.tip[4];
                        }
                        else if (Game1.toolTip.thrown)
                        {
                            array[num6] = string.Concat((int)(Game1.player[Game1.myPlayer].thrownDamage * (float)damage + num7));
                            string[] array4;
                            IntPtr intPtr;
                            (array4 = array)[(int)(intPtr = (IntPtr)num6)] = array4[(int)intPtr] + Lang.tip[58];
                        }
                        else if (Game1.toolTip.summon)
                        {
                            array[num6] = string.Concat((int)(Game1.player[Game1.myPlayer].minionDamage * (float)damage + num7));
                            string[] array4;
                            IntPtr intPtr;
                            (array4 = array)[(int)(intPtr = (IntPtr)num6)] = array4[(int)intPtr] + Lang.tip[53];
                        }
                        else
                        {
                            array[num6] = string.Concat(damage);
                            string[] array4;
                            IntPtr intPtr;
                            (array4 = array)[(int)(intPtr = (IntPtr)num6)] = array4[(int)intPtr] + Lang.tip[55];
                        }
                        num6++;
                        if (Game1.toolTip.melee)
                        {
                            int num9 = Game1.player[Game1.myPlayer].meleeCrit - Game1.player[Game1.myPlayer].inventory[Game1.player[Game1.myPlayer].selectedItem].crit + Game1.toolTip.crit;
                            array[num6] = num9 + Lang.tip[5];
                            num6++;
                        }
                        else if (Game1.toolTip.ranged)
                        {
                            int num10 = Game1.player[Game1.myPlayer].rangedCrit - Game1.player[Game1.myPlayer].inventory[Game1.player[Game1.myPlayer].selectedItem].crit + Game1.toolTip.crit;
                            array[num6] = num10 + Lang.tip[5];
                            num6++;
                        }
                        else if (Game1.toolTip.magic)
                        {
                            int num11 = Game1.player[Game1.myPlayer].magicCrit - Game1.player[Game1.myPlayer].inventory[Game1.player[Game1.myPlayer].selectedItem].crit + Game1.toolTip.crit;
                            array[num6] = num11 + Lang.tip[5];
                            num6++;
                        }
                        else if (Game1.toolTip.thrown)
                        {
                            int num12 = Game1.player[Game1.myPlayer].thrownCrit - Game1.player[Game1.myPlayer].inventory[Game1.player[Game1.myPlayer].selectedItem].crit + Game1.toolTip.crit;
                            array[num6] = num12 + Lang.tip[5];
                            num6++;
                        }
                        if (Game1.toolTip.useStyle > 0 && !Game1.toolTip.summon)
                        {
                            if (Game1.toolTip.useAnimation <= 8)
                            {
                                array[num6] = Lang.tip[6];
                            }
                            else if (Game1.toolTip.useAnimation <= 20)
                            {
                                array[num6] = Lang.tip[7];
                            }
                            else if (Game1.toolTip.useAnimation <= 25)
                            {
                                array[num6] = Lang.tip[8];
                            }
                            else if (Game1.toolTip.useAnimation <= 30)
                            {
                                array[num6] = Lang.tip[9];
                            }
                            else if (Game1.toolTip.useAnimation <= 35)
                            {
                                array[num6] = Lang.tip[10];
                            }
                            else if (Game1.toolTip.useAnimation <= 45)
                            {
                                array[num6] = Lang.tip[11];
                            }
                            else if (Game1.toolTip.useAnimation <= 55)
                            {
                                array[num6] = Lang.tip[12];
                            }
                            else
                            {
                                array[num6] = Lang.tip[13];
                            }
                            num6++;
                        }
                        float num13 = Game1.toolTip.knockBack;
                        if (Game1.toolTip.summon)
                        {
                            num13 += Game1.player[Game1.myPlayer].minionKB;
                        }
                        if ((Game1.player[Game1.myPlayer].magicQuiver && Game1.toolTip.useAmmo == 1) || Game1.toolTip.useAmmo == 323)
                        {
                            num13 = (float)((int)(num13 * 1.1f));
                        }
                        if (Game1.player[Game1.myPlayer].inventory[Game1.player[Game1.myPlayer].selectedItem].itemId == 3106 && Game1.toolTip.itemId == 3106)
                        {
                            num13 += num13 * (1f - Game1.player[Game1.myPlayer].stealth);
                        }
                        if (num13 == 0f)
                        {
                            array[num6] = Lang.tip[14];
                        }
                        else if ((double)num13 <= 1.5)
                        {
                            array[num6] = Lang.tip[15];
                        }
                        else if (num13 <= 3f)
                        {
                            array[num6] = Lang.tip[16];
                        }
                        else if (num13 <= 4f)
                        {
                            array[num6] = Lang.tip[17];
                        }
                        else if (num13 <= 6f)
                        {
                            array[num6] = Lang.tip[18];
                        }
                        else if (num13 <= 7f)
                        {
                            array[num6] = Lang.tip[19];
                        }
                        else if (num13 <= 9f)
                        {
                            array[num6] = Lang.tip[20];
                        }
                        else if (num13 <= 11f)
                        {
                            array[num6] = Lang.tip[21];
                        }
                        else
                        {
                            array[num6] = Lang.tip[22];
                        }
                        num6++;
                    }
                    if (Game1.toolTip.fishingPole > 0)
                    {
                        array[num6] = Game1.toolTip.fishingPole + "% fishing power";
                        num6++;
                        array[num6] = "Requires bait to catch fish";
                        num6++;
                    }
                    if (Game1.toolTip.bait > 0)
                    {
                        array[num6] = Game1.toolTip.bait + "% bait power";
                        num6++;
                    }
                    if (Game1.toolTip.headSlot > 0 || Game1.toolTip.bodySlot > 0 || Game1.toolTip.legSlot > 0 || Game1.toolTip.accessory || Game1.projHook[Game1.toolTip.shoot] || Game1.toolTip.mountType != -1 || (Game1.toolTip.buffType > 0 && (Game1.lightPet[Game1.toolTip.buffType] || Game1.vanityPet[Game1.toolTip.buffType])))
                    {
                        array[num6] = Lang.tip[23];
                        num6++;
                    }
                    if (Game1.toolTip.tileWand > 0)
                    {
                        array[num6] = Lang.tip[52] + Lang.itemName(Game1.toolTip.tileWand, false);
                        num6++;
                    }
                    if (Game1.toolTip.questItem)
                    {
                        array[num6] = Lang.inter[65];
                        num6++;
                    }
                    if (Game1.toolTip.vanity)
                    {
                        array[num6] = Lang.tip[24];
                        num6++;
                    }
                    if (Game1.toolTip.defense > 0)
                    {
                        array[num6] = Game1.toolTip.defense + Lang.tip[25];
                        num6++;
                    }
                    if (Game1.toolTip.pick > 0)
                    {
                        array[num6] = Game1.toolTip.pick + Lang.tip[26];
                        num6++;
                    }
                    if (Game1.toolTip.axe > 0)
                    {
                        array[num6] = Game1.toolTip.axe * 5 + Lang.tip[27];
                        num6++;
                    }
                    if (Game1.toolTip.hammer > 0)
                    {
                        array[num6] = Game1.toolTip.hammer + Lang.tip[28];
                        num6++;
                    }
                    if (Game1.toolTip.tileBoost != 0)
                    {
                        int tileBoost = Game1.toolTip.tileBoost;
                        if (tileBoost > 0)
                        {
                            array[num6] = "+" + tileBoost + Lang.tip[54];
                        }
                        else
                        {
                            array[num6] = tileBoost + Lang.tip[54];
                        }
                        num6++;
                    }
                    if (Game1.toolTip.healLife > 0)
                    {
                        array[num6] = string.Concat(new object[]
                        {
                            Lang.tip[29],
                            " ",
                            Game1.toolTip.healLife,
                            " ",
                            Lang.tip[30]
                        });
                        num6++;
                    }
                    if (Game1.toolTip.healMana > 0)
                    {
                        array[num6] = string.Concat(new object[]
                        {
                            Lang.tip[29],
                            " ",
                            Game1.toolTip.healMana,
                            " ",
                            Lang.tip[31]
                        });
                        num6++;
                    }
                    if (Game1.toolTip.mana > 0 && (Game1.toolTip.itemId != 127 || !Game1.player[Game1.myPlayer].spaceGun))
                    {
                        array[num6] = string.Concat(new object[]
                        {
                            Lang.tip[32],
                            " ",
                            (int)((float)Game1.toolTip.mana * Game1.player[Game1.myPlayer].manaCost),
                            " ",
                            Lang.tip[31]
                        });
                        num6++;
                    }
                    if (Game1.toolTip.createWall > 0 || Game1.toolTip.createTile > -1)
                    {
                        if (Game1.toolTip.itemId != 213 && Game1.toolTip.tileWand < 1)
                        {
                            array[num6] = Lang.tip[33];
                            num6++;
                        }
                    }
                    else if (Game1.toolTip.ammo > 0 && !Game1.toolTip.notAmmo)
                    {
                        array[num6] = Lang.tip[34];
                        num6++;
                    }
                    else if (Game1.toolTip.consumable)
                    {
                        array[num6] = Lang.tip[35];
                        num6++;
                    }
                    if (Game1.toolTip.material)
                    {
                        array[num6] = Lang.tip[36];
                        num6++;
                    }
                    if (Game1.toolTip.toolTip != null)
                    {
                        if (Game1.toolTip.itemId >= 1533 && Game1.toolTip.itemId <= 1537 && !NPC.downedPlantBoss)
                        {
                            array[num6] = Lang.tip[59];
                        }
                        else
                        {
                            array[num6] = Game1.toolTip.toolTip;
                        }
                        num6++;
                    }
                    if (Game1.toolTip.toolTip2 != null)
                    {
                        array[num6] = Game1.toolTip.toolTip2;
                        num6++;
                    }
                    if (Game1.toolTip.buffType == 26 && Game1.expertMode)
                    {
                        array[num6] = Lang.misc[40];
                        num6++;
                    }
                    if (Game1.toolTip.buffTime > 0)
                    {
                        string text;
                        if (Game1.toolTip.buffTime / 60 >= 60)
                        {
                            text = Math.Round((double)(Game1.toolTip.buffTime / 60) / 60.0) + Lang.tip[37];
                        }
                        else
                        {
                            text = Math.Round((double)Game1.toolTip.buffTime / 60.0) + Lang.tip[38];
                        }
                        array[num6] = text;
                        num6++;
                    }
                    if (Game1.toolTip.itemId == 3262 || Game1.toolTip.itemId == 3282 || Game1.toolTip.itemId == 3283 || Game1.toolTip.itemId == 3284 || Game1.toolTip.itemId == 3285 || Game1.toolTip.itemId == 3286 || Game1.toolTip.itemId == 3316 || Game1.toolTip.itemId == 3315 || Game1.toolTip.itemId == 3317 || Game1.toolTip.itemId == 3389)
                    {
                        array[num6] = " ";
                        num = num6;
                        num6++;
                    }
                    if (Game1.toolTip.prefix > 0)
                    {
                        if (Game1.cpItem == null || Game1.cpItem.netID != Game1.toolTip.netID)
                        {
                            Game1.cpItem = new Item();
                            Game1.cpItem.netDefaults(Game1.toolTip.netID);
                        }
                        if (Game1.cpItem.damage != Game1.toolTip.damage)
                        {
                            double num14 = (double)((float)Game1.toolTip.damage - (float)Game1.cpItem.damage);
                            num14 = num14 / (double)((float)Game1.cpItem.damage) * 100.0;
                            num14 = Math.Round(num14);
                            if (num14 > 0.0)
                            {
                                array[num6] = "+" + num14 + Lang.tip[39];
                            }
                            else
                            {
                                array[num6] = num14 + Lang.tip[39];
                            }
                            if (num14 < 0.0)
                            {
                                array3[num6] = true;
                            }
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.cpItem.useAnimation != Game1.toolTip.useAnimation)
                        {
                            double num15 = (double)((float)Game1.toolTip.useAnimation - (float)Game1.cpItem.useAnimation);
                            num15 = num15 / (double)((float)Game1.cpItem.useAnimation) * 100.0;
                            num15 = Math.Round(num15);
                            num15 *= -1.0;
                            if (num15 > 0.0)
                            {
                                array[num6] = "+" + num15 + Lang.tip[40];
                            }
                            else
                            {
                                array[num6] = num15 + Lang.tip[40];
                            }
                            if (num15 < 0.0)
                            {
                                array3[num6] = true;
                            }
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.cpItem.crit != Game1.toolTip.crit)
                        {
                            double num16 = (double)((float)Game1.toolTip.crit - (float)Game1.cpItem.crit);
                            if (num16 > 0.0)
                            {
                                array[num6] = "+" + num16 + Lang.tip[41];
                            }
                            else
                            {
                                array[num6] = num16 + Lang.tip[41];
                            }
                            if (num16 < 0.0)
                            {
                                array3[num6] = true;
                            }
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.cpItem.mana != Game1.toolTip.mana)
                        {
                            double num17 = (double)((float)Game1.toolTip.mana - (float)Game1.cpItem.mana);
                            num17 = num17 / (double)((float)Game1.cpItem.mana) * 100.0;
                            num17 = Math.Round(num17);
                            if (num17 > 0.0)
                            {
                                array[num6] = "+" + num17 + Lang.tip[42];
                            }
                            else
                            {
                                array[num6] = num17 + Lang.tip[42];
                            }
                            if (num17 > 0.0)
                            {
                                array3[num6] = true;
                            }
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.cpItem.scale != Game1.toolTip.scale)
                        {
                            double num18 = (double)(Game1.toolTip.scale - Game1.cpItem.scale);
                            num18 = num18 / (double)Game1.cpItem.scale * 100.0;
                            num18 = Math.Round(num18);
                            if (num18 > 0.0)
                            {
                                array[num6] = "+" + num18 + Lang.tip[43];
                            }
                            else
                            {
                                array[num6] = num18 + Lang.tip[43];
                            }
                            if (num18 < 0.0)
                            {
                                array3[num6] = true;
                            }
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.cpItem.shootSpeed != Game1.toolTip.shootSpeed)
                        {
                            double num19 = (double)(Game1.toolTip.shootSpeed - Game1.cpItem.shootSpeed);
                            num19 = num19 / (double)Game1.cpItem.shootSpeed * 100.0;
                            num19 = Math.Round(num19);
                            if (num19 > 0.0)
                            {
                                array[num6] = "+" + num19 + Lang.tip[44];
                            }
                            else
                            {
                                array[num6] = num19 + Lang.tip[44];
                            }
                            if (num19 < 0.0)
                            {
                                array3[num6] = true;
                            }
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.cpItem.knockBack != knockBack)
                        {
                            double num20 = (double)(knockBack - Game1.cpItem.knockBack);
                            num20 = num20 / (double)Game1.cpItem.knockBack * 100.0;
                            num20 = Math.Round(num20);
                            if (num20 > 0.0)
                            {
                                array[num6] = "+" + num20 + Lang.tip[45];
                            }
                            else
                            {
                                array[num6] = num20 + Lang.tip[45];
                            }
                            if (num20 < 0.0)
                            {
                                array3[num6] = true;
                            }
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.toolTip.prefix == 62)
                        {
                            array[num6] = "+1" + Lang.tip[25];
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.toolTip.prefix == 63)
                        {
                            array[num6] = "+2" + Lang.tip[25];
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.toolTip.prefix == 64)
                        {
                            array[num6] = "+3" + Lang.tip[25];
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.toolTip.prefix == 65)
                        {
                            array[num6] = "+4" + Lang.tip[25];
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.toolTip.prefix == 66)
                        {
                            array[num6] = "+20 " + Lang.tip[31];
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.toolTip.prefix == 67)
                        {
                            array[num6] = "+2" + Lang.tip[5];
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.toolTip.prefix == 68)
                        {
                            array[num6] = "+4" + Lang.tip[5];
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.toolTip.prefix == 69)
                        {
                            array[num6] = "+1" + Lang.tip[39];
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.toolTip.prefix == 70)
                        {
                            array[num6] = "+2" + Lang.tip[39];
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.toolTip.prefix == 71)
                        {
                            array[num6] = "+3" + Lang.tip[39];
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.toolTip.prefix == 72)
                        {
                            array[num6] = "+4" + Lang.tip[39];
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.toolTip.prefix == 73)
                        {
                            array[num6] = "+1" + Lang.tip[46];
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.toolTip.prefix == 74)
                        {
                            array[num6] = "+2" + Lang.tip[46];
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.toolTip.prefix == 75)
                        {
                            array[num6] = "+3" + Lang.tip[46];
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.toolTip.prefix == 76)
                        {
                            array[num6] = "+4" + Lang.tip[46];
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.toolTip.prefix == 77)
                        {
                            array[num6] = "+1" + Lang.tip[47];
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.toolTip.prefix == 78)
                        {
                            array[num6] = "+2" + Lang.tip[47];
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.toolTip.prefix == 79)
                        {
                            array[num6] = "+3" + Lang.tip[47];
                            array2[num6] = true;
                            num6++;
                        }
                        if (Game1.toolTip.prefix == 80)
                        {
                            array[num6] = "+4" + Lang.tip[47];
                            array2[num6] = true;
                            num6++;
                        }
                    }
                    if (Game1.toolTip.wornArmor && Game1.player[Game1.myPlayer].setBonus != "")
                    {
                        array[num6] = Lang.tip[48] + " " + Game1.player[Game1.myPlayer].setBonus;
                        num6++;
                    }
                }
                if (Game1.toolTip.expert)
                {
                    array[num6] = "Expert";
                    num6++;
                }
                if (Game1.npcShop > 0)
                {
                    if (Game1.toolTip.value > 0)
                    {
                        string text2 = "";
                        int num21 = 0;
                        int num22 = 0;
                        int num23 = 0;
                        int num24 = 0;
                        int num25 = Game1.toolTip.value * Game1.toolTip.stack;
                        if (!Game1.toolTip.buy)
                        {
                            num25 = Game1.toolTip.value / 5 * Game1.toolTip.stack;
                        }
                        if (num25 < 1)
                        {
                            num25 = 1;
                        }
                        if (num25 >= 1000000)
                        {
                            num21 = num25 / 1000000;
                            num25 -= num21 * 1000000;
                        }
                        if (num25 >= 10000)
                        {
                            num22 = num25 / 10000;
                            num25 -= num22 * 10000;
                        }
                        if (num25 >= 100)
                        {
                            num23 = num25 / 100;
                            num25 -= num23 * 100;
                        }
                        if (num25 >= 1)
                        {
                            num24 = num25;
                        }
                        if (num21 > 0)
                        {
                            object obj = text2;
                            text2 = string.Concat(new object[]
                            {
                                obj,
                                num21,
                                " ",
                                Lang.inter[15],
                                " "
                            });
                        }
                        if (num22 > 0)
                        {
                            object obj = text2;
                            text2 = string.Concat(new object[]
                            {
                                obj,
                                num22,
                                " ",
                                Lang.inter[16],
                                " "
                            });
                        }
                        if (num23 > 0)
                        {
                            object obj = text2;
                            text2 = string.Concat(new object[]
                            {
                                obj,
                                num23,
                                " ",
                                Lang.inter[17],
                                " "
                            });
                        }
                        if (num24 > 0)
                        {
                            object obj = text2;
                            text2 = string.Concat(new object[]
                            {
                                obj,
                                num24,
                                " ",
                                Lang.inter[18],
                                " "
                            });
                        }
                        if (!Game1.toolTip.buy)
                        {
                            array[num6] = Lang.tip[49] + " " + text2;
                        }
                        else
                        {
                            array[num6] = Lang.tip[50] + " " + text2;
                        }
                        num6++;
                        num26 = (float)Game1.mouseTextColor / 255f;
                        if (num21 > 0)
                        {
                            color = new Microsoft.Xna.Framework.Color((int)((byte)(220f * num26)), 
                                (int)((byte)(220f * num26)), (int)((byte)(198f * num26)), (int)Game1.mouseTextColor);
                        }
                        else if (num22 > 0)
                        {
                            color = new Microsoft.Xna.Framework.Color((int)((byte)(224f * num26)),
                                (int)((byte)(201f * num26)), (int)((byte)(92f * num26)), (int)Game1.mouseTextColor);
                        }
                        else if (num23 > 0)
                        {
                            color = new Microsoft.Xna.Framework.Color((int)((byte)(181f * num26)), 
                                (int)((byte)(192f * num26)), (int)((byte)(193f * num26)), (int)Game1.mouseTextColor);
                        }
                        else if (num24 > 0)
                        {
                            color = new Microsoft.Xna.Framework.Color((int)((byte)(246f * num26)), 
                                (int)((byte)(138f * num26)), (int)((byte)(96f * num26)), (int)Game1.mouseTextColor);
                        }
                    }
                    else
                    {
                        num26 = (float)Game1.mouseTextColor / 255f;
                        array[num6] = Lang.tip[51];
                        num6++;
                        color = new Microsoft.Xna.Framework.Color((int)((byte)(120f * num26)), (int)((byte)(120f * num26)), (int)((byte)(120f * num26)), (int)Game1.mouseTextColor);
                    }
                }
                Vector2 zero = Vector2.Zero;
                int num27 = 0;
                for (int j = 0; j < num6; j++)
                {
                    Vector2 vector = Game1.fontMouseText.MeasureString(array[j]);
                    if (vector.X > zero.X)
                    {
                        zero.X = vector.X;
                    }
                    zero.Y += vector.Y + (float)num27;
                }
                num2 += Game1.toolTipDistance;
                num3 += Game1.toolTipDistance;
                if ((float)num2 + zero.X + 4f > (float)Game1.screenWidth)
                {
                    num2 = (int)((float)Game1.screenWidth - zero.X - 4f);
                }
                if ((float)num3 + zero.Y + 4f > (float)Game1.screenHeight)
                {
                    num3 = (int)((float)Game1.screenHeight - zero.Y - 4f);
                }
                int num28 = 0;
                num26 = (float)Game1.mouseTextColor / 255f;
                for (int k = 0; k < num6; k++)
                {
                    if (k == num)
                    {
                        float num29 = 1f;
                        int num30 = (int)((float)Game1.mouseTextColor * num29);
                        Microsoft.Xna.Framework.Color black = Microsoft.Xna.Framework.Color.Black;
                        for (int l = 0; l < 5; l++)
                        {
                            int num31 = num2;
                            int num32 = num3 + num28;
                            if (l == 4)
                            {
                                black = new Microsoft.Xna.Framework.Color(num30, num30, num30, num30);
                            }
                            if (l == 0)
                            {
                                num31--;
                            }
                            else if (l == 1)
                            {
                                num31++;
                            }
                            else if (l == 2)
                            {
                                num32--;
                            }
                            else if (l == 3)
                            {
                                num32++;
                            }
                            Game1.spriteBatch.Draw(
                                Game1.oneDropLogo, new Vector2((float)num31, (float)num32), 
                                null, black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                        }
                    }
                    else
                    {
                        for (int m = 0; m < 5; m++)
                        {
                            int num33 = num2;
                            int num34 = num3 + num28;
                            Microsoft.Xna.Framework.Color color2 = Microsoft.Xna.Framework.Color.Black;
                            if (m == 0)
                            {
                                num33 -= 2;
                            }
                            else if (m == 1)
                            {
                                num33 += 2;
                            }
                            else if (m == 2)
                            {
                                num34 -= 2;
                            }
                            else if (m == 3)
                            {
                                num34 += 2;
                            }
                            else
                            {
                                color2 = new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor);
                                if (k == 0)
                                {
                                    if (rare == -11)
                                    {
                                        color2 = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num26)), (int)((byte)(175f * num26)), (int)((byte)(0f * num26)), (int)Game1.mouseTextColor);
                                    }
                                    if (rare == -1)
                                    {
                                        color2 = new Microsoft.Xna.Framework.Color((int)((byte)(130f * num26)), (int)((byte)(130f * num26)), (int)((byte)(130f * num26)), (int)Game1.mouseTextColor);
                                    }
                                    if (rare == 1)
                                    {
                                        color2 = new Microsoft.Xna.Framework.Color((int)((byte)(150f * num26)), (int)((byte)(150f * num26)), (int)((byte)(255f * num26)), (int)Game1.mouseTextColor);
                                    }
                                    if (rare == 2)
                                    {
                                        color2 = new Microsoft.Xna.Framework.Color((int)((byte)(150f * num26)), (int)((byte)(255f * num26)), (int)((byte)(150f * num26)), (int)Game1.mouseTextColor);
                                    }
                                    if (rare == 3)
                                    {
                                        color2 = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num26)), (int)((byte)(200f * num26)), (int)((byte)(150f * num26)), (int)Game1.mouseTextColor);
                                    }
                                    if (rare == 4)
                                    {
                                        color2 = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num26)), (int)((byte)(150f * num26)), (int)((byte)(150f * num26)), (int)Game1.mouseTextColor);
                                    }
                                    if (rare == 5)
                                    {
                                        color2 = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num26)), (int)((byte)(150f * num26)), (int)((byte)(255f * num26)), (int)Game1.mouseTextColor);
                                    }
                                    if (rare == 6)
                                    {
                                        color2 = new Microsoft.Xna.Framework.Color((int)((byte)(210f * num26)), (int)((byte)(160f * num26)), (int)((byte)(255f * num26)), (int)Game1.mouseTextColor);
                                    }
                                    if (rare == 7)
                                    {
                                        color2 = new Microsoft.Xna.Framework.Color((int)((byte)(150f * num26)), (int)((byte)(255f * num26)), (int)((byte)(10f * num26)), (int)Game1.mouseTextColor);
                                    }
                                    if (rare == 8)
                                    {
                                        color2 = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num26)), (int)((byte)(255f * num26)), (int)((byte)(10f * num26)), (int)Game1.mouseTextColor);
                                    }
                                    if (rare == 9)
                                    {
                                        color2 = new Microsoft.Xna.Framework.Color((int)((byte)(5f * num26)), (int)((byte)(200f * num26)), (int)((byte)(255f * num26)), (int)Game1.mouseTextColor);
                                    }
                                    if (rare == 10)
                                    {
                                        color2 = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num26)), (int)((byte)(40f * num26)), (int)((byte)(100f * num26)), (int)Game1.mouseTextColor);
                                    }
                                    if (rare >= 11)
                                    {
                                        color2 = new Microsoft.Xna.Framework.Color((int)((byte)(180f * num26)), (int)((byte)(40f * num26)), (int)((byte)(255f * num26)), (int)Game1.mouseTextColor);
                                    }
                                    if (diff == 1)
                                    {
                                        color2 = new Microsoft.Xna.Framework.Color((int)((byte)((float)Game1.mcColor.R * num26)), (int)((byte)((float)Game1.mcColor.G * num26)), (int)((byte)((float)Game1.mcColor.B * num26)), (int)Game1.mouseTextColor);
                                    }
                                    if (diff == 2)
                                    {
                                        color2 = new Microsoft.Xna.Framework.Color((int)((byte)((float)Game1.hcColor.R * num26)), (int)((byte)((float)Game1.hcColor.G * num26)), (int)((byte)((float)Game1.hcColor.B * num26)), (int)Game1.mouseTextColor);
                                    }
                                    if (Game1.toolTip.expert || rare == -12)
                                    {
                                        color2 = new Microsoft.Xna.Framework.Color((int)((byte)((float)Game1.DiscoR * num26)), (int)((byte)((float)Game1.DiscoG * num26)), (int)((byte)((float)Game1.DiscoB * num26)), (int)Game1.mouseTextColor);
                                    }
                                }
                                else if (array2[k])
                                {
                                    if (array3[k])
                                    {
                                        color2 = new Microsoft.Xna.Framework.Color((int)((byte)(190f * num26)), (int)((byte)(120f * num26)), (int)((byte)(120f * num26)), (int)Game1.mouseTextColor);
                                    }
                                    else
                                    {
                                        color2 = new Microsoft.Xna.Framework.Color((int)((byte)(120f * num26)), (int)((byte)(190f * num26)), (int)((byte)(120f * num26)), (int)Game1.mouseTextColor);
                                    }
                                }
                                else if (k == num6 - 1)
                                {
                                    color2 = color;
                                }
                            }
                            Game1.spriteBatch.DrawString(Game1.fontMouseText, array[k], new Vector2((float)num33, (float)num34), color2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                        }
                    }
                    num28 += (int)(Game1.fontMouseText.MeasureString(array[k]).Y + (float)num27);
                }
                return;
            }
            if (Game1.buffString != "" && Game1.buffString != null)
            {
                for (int n = 0; n < 5; n++)
                {
                    int num35 = num2;
                    int num36 = num3 + (int)Game1.fontMouseText.MeasureString(Game1.buffString).Y;
                    Microsoft.Xna.Framework.Color black2 = Microsoft.Xna.Framework.Color.Black;
                    if (n == 0)
                    {
                        num35 -= 2;
                    }
                    else if (n == 1)
                    {
                        num35 += 2;
                    }
                    else if (n == 2)
                    {
                        num36 -= 2;
                    }
                    else if (n == 3)
                    {
                        num36 += 2;
                    }
                    else
                    {
                        black2 = new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor);
                    }
                    Game1.spriteBatch.DrawString(Game1.fontMouseText, Game1.buffString, new Vector2((float)num35, (float)num36), black2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                }
                if (Game1.bannerMouseOver)
                {
                    int num37 = 0;
                    for (int num38 = 0; num38 < 251; num38++)
                    {
                        if (Item.BannerToNPC(num38) != 0 && Game1.player[Game1.myPlayer].NPCBannerBuff[num38])
                        {
                            num37++;
                            for (int num39 = 0; num39 < 5; num39++)
                            {
                                int num40 = num2;
                                int num41 = num3 + (int)Game1.fontMouseText.MeasureString(Game1.buffString).Y + num37 * 20 + 10;
                                int num42 = (Game1.screenHeight - 250) / 20;
                                if (num37 > num42)
                                {
                                    num40 += 260;
                                    num41 -= num42 * 20;
                                }
                                if (num37 > num42 * 2)
                                {
                                    num40 += 260;
                                    num41 -= num42 * 20;
                                }
                                if (num37 > num42 * 3)
                                {
                                    num40 += 260;
                                    num41 -= num42 * 20;
                                }
                                Microsoft.Xna.Framework.Color black3 = Microsoft.Xna.Framework.Color.Black;
                                if (num39 == 0)
                                {
                                    num40 -= 2;
                                }
                                else if (num39 == 1)
                                {
                                    num40 += 2;
                                }
                                else if (num39 == 2)
                                {
                                    num41 -= 2;
                                }
                                else if (num39 == 3)
                                {
                                    num41 += 2;
                                }
                                else
                                {
                                    num26 = (float)Game1.mouseTextColor / 255f;
                                    black3 = new Microsoft.Xna.Framework.Color((int)((byte)(80f * num26)), (int)((byte)(255f * num26)), (int)((byte)(120f * num26)), (int)Game1.mouseTextColor);
                                }
                                Game1.spriteBatch.DrawString(Game1.fontMouseText, Lang.npcName(Item.BannerToNPC(num38), false), new Vector2((float)num40, (float)num41), black3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            }
                        }
                    }
                }
            }
            Vector2 vector2 = Game1.fontMouseText.MeasureString(cursorText);
            if ((float)num2 + vector2.X + 4f > (float)Game1.screenWidth)
            {
                num2 = (int)((float)Game1.screenWidth - vector2.X - 4f);
            }
            if ((float)num3 + vector2.Y + 4f > (float)Game1.screenHeight)
            {
                num3 = (int)((float)Game1.screenHeight - vector2.Y - 4f);
            }
            Game1.spriteBatch.DrawString(Game1.fontMouseText, cursorText, new Vector2((float)num2, (float)(num3 - 2)), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
            Game1.spriteBatch.DrawString(Game1.fontMouseText, cursorText, new Vector2((float)num2, (float)(num3 + 2)), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
            Game1.spriteBatch.DrawString(Game1.fontMouseText, cursorText, new Vector2((float)(num2 - 2), (float)num3), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
            Game1.spriteBatch.DrawString(Game1.fontMouseText, cursorText, new Vector2((float)(num2 + 2), (float)num3), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
            num26 = (float)Game1.mouseTextColor / 255f;
            Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor);
            if (rare == -11)
            {
                color3 = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num26)), (int)((byte)(175f * num26)), (int)((byte)(0f * num26)), (int)Game1.mouseTextColor);
            }
            if (rare == -10)
            {
                color3 = new Microsoft.Xna.Framework.Color((int)((byte)(65f * num26)), (int)((byte)(255f * num26)), (int)((byte)(110f * num26)), (int)Game1.mouseTextColor);
            }
            if (rare == -1)
            {
                color3 = new Microsoft.Xna.Framework.Color((int)((byte)(130f * num26)), (int)((byte)(130f * num26)), (int)((byte)(130f * num26)), (int)Game1.mouseTextColor);
            }
            if (rare == 1)
            {
                color3 = new Microsoft.Xna.Framework.Color((int)((byte)(150f * num26)), (int)((byte)(150f * num26)), (int)((byte)(255f * num26)), (int)Game1.mouseTextColor);
            }
            if (rare == 2)
            {
                color3 = new Microsoft.Xna.Framework.Color((int)((byte)(150f * num26)), (int)((byte)(255f * num26)), (int)((byte)(150f * num26)), (int)Game1.mouseTextColor);
            }
            if (rare == 3)
            {
                color3 = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num26)), (int)((byte)(200f * num26)), (int)((byte)(150f * num26)), (int)Game1.mouseTextColor);
            }
            if (rare == 4)
            {
                color3 = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num26)), (int)((byte)(150f * num26)), (int)((byte)(150f * num26)), (int)Game1.mouseTextColor);
            }
            if (rare == 5)
            {
                color3 = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num26)), (int)((byte)(150f * num26)), (int)((byte)(255f * num26)), (int)Game1.mouseTextColor);
            }
            if (rare == 6)
            {
                color3 = new Microsoft.Xna.Framework.Color((int)((byte)(210f * num26)), (int)((byte)(160f * num26)), (int)((byte)(255f * num26)), (int)Game1.mouseTextColor);
            }
            if (rare == 7)
            {
                color3 = new Microsoft.Xna.Framework.Color((int)((byte)(150f * num26)), (int)((byte)(255f * num26)), (int)((byte)(10f * num26)), (int)Game1.mouseTextColor);
            }
            if (rare == 8)
            {
                color3 = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num26)), (int)((byte)(255f * num26)), (int)((byte)(10f * num26)), (int)Game1.mouseTextColor);
            }
            if (rare == 9)
            {
                color3 = new Microsoft.Xna.Framework.Color((int)((byte)(5f * num26)), (int)((byte)(200f * num26)), (int)((byte)(255f * num26)), (int)Game1.mouseTextColor);
            }
            if (rare == 10)
            {
                color3 = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num26)), (int)((byte)(40f * num26)), (int)((byte)(100f * num26)), (int)Game1.mouseTextColor);
            }
            if (rare >= 11)
            {
                color3 = new Microsoft.Xna.Framework.Color((int)((byte)(180f * num26)), (int)((byte)(40f * num26)), (int)((byte)(255f * num26)), (int)Game1.mouseTextColor);
            }
            if (Game1.toolTip.expert || rare == -12)
            {
                color3 = new Microsoft.Xna.Framework.Color((int)((byte)((float)Game1.DiscoR * num26)), (int)((byte)((float)Game1.DiscoG * num26)), (int)((byte)((float)Game1.DiscoB * num26)), (int)Game1.mouseTextColor);
            }
            if (diff == 1)
            {
                color3 = new Microsoft.Xna.Framework.Color((int)((byte)((float)Game1.mcColor.R * num26)), (int)((byte)((float)Game1.mcColor.G * num26)), (int)((byte)((float)Game1.mcColor.B * num26)), (int)Game1.mouseTextColor);
            }
            if (diff == 2)
            {
                color3 = new Microsoft.Xna.Framework.Color((int)((byte)((float)Game1.hcColor.R * num26)), (int)((byte)((float)Game1.hcColor.G * num26)), (int)((byte)((float)Game1.hcColor.B * num26)), (int)Game1.mouseTextColor);
            }
            Game1.spriteBatch.DrawString(Game1.fontMouseText, cursorText, new Vector2((float)num2, (float)num3), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
        }


        protected void DrawFPS()
        {
            if (Game1.showFrameRate)
            {
                string text = string.Concat(Game1.frameRate);
                object obj = text;
                text = string.Concat(new object[]
                {
                    obj,
                    " (",
                    Liquid.numLiquid + LiquidBuffer.numLiquidBuffer,
                    ")"
                });
                object obj2 = text;
                text = string.Concat(new object[]
                {
                    obj2,
                    " (",
                    (int)(Game1.gfxQuality * 100f),
                    "%)"
                });
                int num = 4;
                if (!Game1.gameMenu)
                {
                    num = Game1.screenHeight - 24;
                }
                Game1.spriteBatch.DrawString(Game1.fontMouseText, text + " " + Game1.debugWords, new Vector2(4f, (float)num), new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
            }
        }
        public static Microsoft.Xna.Framework.Color shine(Microsoft.Xna.Framework.Color newColor, int type)
        {
            int num = (int)newColor.R;
            int num2 = (int)newColor.G;
            int num3 = (int)newColor.B;
            float num4 = 0.6f;
            if (type == 25)
            {
                num = (int)((float)newColor.R * 0.95f);
                num2 = (int)((float)newColor.G * 0.85f);
                num3 = (int)((double)((float)newColor.B) * 1.1);
            }
            else if (type == 117)
            {
                num = (int)((float)newColor.R * 1.1f);
                num2 = (int)((float)newColor.G * 1f);
                num3 = (int)((double)((float)newColor.B) * 1.2);
            }
            else
            {
                if (type == 204)
                {
                    num4 = 0.3f + (float)Game1.mouseTextColor / 300f;
                    num = (int)((float)newColor.R * (1.3f * num4));
                    if (num > 255)
                    {
                        num = 255;
                    }
                    return new Microsoft.Xna.Framework.Color(num, num2, num3, 255);
                }
                if (type == 211)
                {
                    num4 = 0.3f + (float)Game1.mouseTextColor / 300f;
                    num2 = (int)((float)newColor.G * (1.5f * num4));
                    num3 = (int)((float)newColor.B * (1.1f * num4));
                }
                else if (type == 147 || type == 161)
                {
                    num = (int)((float)newColor.R * 1.1f);
                    num2 = (int)((float)newColor.G * 1.12f);
                    num3 = (int)((double)((float)newColor.B) * 1.15);
                }
                else if (type == 163)
                {
                    num = (int)((float)newColor.R * 1.05f);
                    num2 = (int)((float)newColor.G * 1.1f);
                    num3 = (int)((double)((float)newColor.B) * 1.15);
                }
                else if (type == 164)
                {
                    num = (int)((float)newColor.R * 1.1f);
                    num2 = (int)((float)newColor.G * 1.1f);
                    num3 = (int)((double)((float)newColor.B) * 1.2);
                }
                else if (type == 178)
                {
                    num4 = 0.5f;
                    num = (int)((float)newColor.R * (1f + num4));
                    num2 = (int)((float)newColor.G * (1f + num4));
                    num3 = (int)((float)newColor.B * (1f + num4));
                }
                else if (type == 185 || type == 186)
                {
                    num4 = 0.3f;
                    num = (int)((float)newColor.R * (1f + num4));
                    num2 = (int)((float)newColor.G * (1f + num4));
                    num3 = (int)((float)newColor.B * (1f + num4));
                }
                else if (type >= 262 && type <= 268)
                {
                    num3 += 100;
                    num += 100;
                    num2 += 100;
                }
                else
                {
                    num = (int)((float)newColor.R * (1f + num4));
                    num2 = (int)((float)newColor.G * (1f + num4));
                    num3 = (int)((float)newColor.B * (1f + num4));
                }
            }
            if (num > 255)
            {
                num = 255;
            }
            if (num2 > 255)
            {
                num2 = 255;
            }
            if (num3 > 255)
            {
                num3 = 255;
            }
            newColor.R = (byte)num;
            newColor.G = (byte)num2;
            newColor.B = (byte)num3;
            return new Microsoft.Xna.Framework.Color((int)((byte)num), (int)((byte)num2), (int)((byte)num3), (int)newColor.A);
        }
        public static bool canDrawColorTree(int i, int j, int treeColor)
        {
            return Game1.tile[i, j] != null && Game1.tile[i, j].color() > 0 && (int)Game1.tile[i, j].color() < Game1.numTileColors && Game1.woodAltTexture[treeColor, (int)Game1.tile[i, j].color()] != null && !Game1.woodAltTexture[treeColor, (int)Game1.tile[i, j].color()].IsContentLost;
        }
        public static bool canDrawColorTile(int i, int j)
        {
            return Game1.tile[i, j] != null && Game1.tile[i, j].color() > 0 && (int)Game1.tile[i, j].color() < Game1.numTileColors && Game1.tileAltTextureDrawn[(int)Game1.tile[i, j].type, (int)Game1.tile[i, j].color()] && Game1.tileAltTextureInit[(int)Game1.tile[i, j].type, (int)Game1.tile[i, j].color()];
        }
        public static bool canDrawColorTile(ushort type, int color)
        {
            return color > 0 && color < Game1.numTileColors && Game1.tileAltTextureDrawn[(int)type, color] && Game1.tileAltTextureInit[(int)type, color];
        }
        public static bool canDrawColorWall(int i, int j)
        {
            return Game1.tile[i, j] != null && Game1.tile[i, j].wallColor() > 0 && Game1.wallAltTextureDrawn[(int)Game1.tile[i, j].wall, (int)Game1.tile[i, j].wallColor()] && Game1.wallAltTextureInit[(int)Game1.tile[i, j].wall, (int)Game1.tile[i, j].wallColor()];
        }
        protected void DrawTiles(bool solidOnly = true, int waterStyleOverride = -1)
        {
            if (!solidOnly)
            {
                Game1.critterCage = false;
            }
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            int num = (int)(255f * (1f - Game1.gfxQuality) + 30f * Game1.gfxQuality);
            int num2 = (int)(50f * (1f - Game1.gfxQuality) + 2f * Game1.gfxQuality);
            Vector2 zero = new Vector2((float)Game1.offScreenRange, (float)Game1.offScreenRange);
            if (Game1.drawToScreen)
            {
                zero = Vector2.Zero;
            }
            int num3 = 0;
            int[] array = new int[1000];
            int[] array2 = new int[1000];
            int num4 = array.Length - 1;
            int num5 = (int)((Game1.screenPosition.X - zero.X) / 16f - 1f);
            int num6 = (int)((Game1.screenPosition.X + (float)Game1.screenWidth + zero.X) / 16f) + 2;
            int num7 = (int)((Game1.screenPosition.Y - zero.Y) / 16f - 1f);
            int num8 = (int)((Game1.screenPosition.Y + (float)Game1.screenHeight + zero.Y) / 16f) + 5;
            if (num5 < 0)
            {
                num5 = 0;
            }
            if (num6 > Game1.maxTilesX)
            {
                num6 = Game1.maxTilesX;
            }
            if (num7 < 0)
            {
                num7 = 0;
            }
            if (num8 > Game1.maxTilesY)
            {
                num8 = Game1.maxTilesY;
            }
            if (Game1.sectionManager.FrameSectionsLeft > 0)
            {
                TimeLogger.DetailedDrawReset();
                WorldGen.SectionTileFrameWithCheck(num5, num7, num6, num8);
                TimeLogger.DetailedDrawTime(5);
            }
            Dictionary<Microsoft.Xna.Framework.Point, int> dictionary = new Dictionary<Microsoft.Xna.Framework.Point, int>();
            Dictionary<Microsoft.Xna.Framework.Point, int> dictionary2 = new Dictionary<Microsoft.Xna.Framework.Point, int>();
            Dictionary<Microsoft.Xna.Framework.Point, int> dictionary3 = new Dictionary<Microsoft.Xna.Framework.Point, int>();
            int num9 = 16;
            Microsoft.Xna.Framework.Color[] array3 = new Microsoft.Xna.Framework.Color[9];
            for (int i = num7; i < num8 + 4; i++)
            {
                for (int j = num5 - 2; j < num6 + 2; j++)
                {
                    if (j == 809)
                    {
                    }
                    Tile tile = Game1.tile[j, i];
                    if (tile == null)
                    {
                        tile = new Tile();
                        Game1.tile[j, i] = tile;
                        Game1.mapTime += 60;
                    }
                    ushort type = tile.type;
                    short num10 = tile.frameX;
                    short frameY = tile.frameY;
                    bool flag = Game1.tileSolid[(int)type];
                    if (type == 11)
                    {
                        flag = true;
                    }
                    if (tile.active() && flag == solidOnly)
                    {
                        if (!Game1.tileSetsLoaded[(int)type])
                        {
                            this.LoadTiles((int)type);
                        }
                        SpriteEffects effects = SpriteEffects.None;
                        if (type == 3 || type == 13 || type == 20 || type == 24 || type == 49 || type == 372 || type == 50 || type == 52 || type == 61 || type == 62 || type == 71 || type == 73 || type == 74 || type == 81 || type == 82 || type == 83 || type == 84 || type == 91 || type == 92 || type == 93 || type == 110 || type == 113 || type == 115 || type == 135 || type == 141 || type == 165 || type == 174 || type == 201 || type == 205 || type == 227 || type == 270 || type == 271 || type == 382)
                        {
                            if (j % 2 == 1)
                            {
                                effects = SpriteEffects.FlipHorizontally;
                            }
                        }
                        else if (type == 184)
                        {
                            if (frameY < 108)
                            {
                                if (j % 2 == 1)
                                {
                                    effects = SpriteEffects.FlipHorizontally;
                                }
                            }
                            else if (i % 2 == 1)
                            {
                                effects = SpriteEffects.FlipVertically;
                            }
                        }
                        else if (type == 185 && frameY == 0 && j % 2 == 1)
                        {
                            effects = SpriteEffects.FlipHorizontally;
                        }
                        Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
                        int num11 = 0;
                        int num12 = 16;
                        if (type >= 330 && type <= 333)
                        {
                            num11 += 2;
                        }
                        if (type == 4 && WorldGen.SolidTile(j, i - 1))
                        {
                            num11 = 2;
                            if (WorldGen.SolidTile(j - 1, i + 1) || WorldGen.SolidTile(j + 1, i + 1))
                            {
                                num11 = 4;
                            }
                        }
                        if (type == 336)
                        {
                            num11 = 2;
                        }
                        if ((type >= 275 && type <= 282) || type == 414 || type == 413)
                        {
                            num11 = 2;
                        }
                        if (type == 285 || type == 286 || type == 298 || type == 299 || type == 309 || type == 358 || type == 359 || type == 360 || type == 361 || type == 362 || type == 363 || type == 364 || type == 391 || type == 392 || type == 393 || type == 394 || type == 310)
                        {
                            num11 = 2;
                        }
                        if (type == 100 || type == 283)
                        {
                            num11 = 2;
                        }
                        if (type == 78 || type == 85 || type == 210 || type == 133 || type == 134 || type == 233)
                        {
                            num11 = 2;
                        }
                        if (type == 33 || type == 49 || type == 174 || type == 372)
                        {
                            num11 = -4;
                        }
                        if (type == 3 || type == 4 || type == 5 || type == 24 || type == 33 || type == 49 || type == 372 || type == 61 || type == 71 || type == 110 || type == 174 || type == 201 || type == 323 || type == 324)
                        {
                            num12 = 20;
                        }
                        else if (type == 16 || type == 17 || type == 18 || type == 20 || type == 26 || type == 32 || type == 352 || type == 69 || type == 72 || type == 77 || type == 79 || type == 80)
                        {
                            num12 = 18;
                        }
                        else if (type == 14 || type == 15 || type == 21 || type == 411)
                        {
                            if (frameY == 18)
                            {
                                num12 = 18;
                            }
                        }
                        else if (type == 172 || type == 376)
                        {
                            if (frameY % 38 == 18)
                            {
                                num12 = 18;
                            }
                        }
                        else if (type == 27)
                        {
                            if (frameY % 74 == 54)
                            {
                                num12 = 18;
                            }
                        }
                        else if (type == 137)
                        {
                            num12 = 18;
                        }
                        else if (type == 135)
                        {
                            num11 = 2;
                            num12 = 18;
                        }
                        else if (type == 378)
                        {
                            num11 = 2;
                        }
                        else if (type == 254)
                        {
                            num11 = 2;
                        }
                        else if (type == 132)
                        {
                            num11 = 2;
                            num12 = 18;
                        }
                        else if (type == 405)
                        {
                            num12 = 16;
                            if (frameY > 0)
                            {
                                num12 = 18;
                            }
                        }
                        else if (type == 406)
                        {
                            num12 = 16;
                            if (frameY % 54 >= 36)
                            {
                                num12 = 18;
                            }
                        }
                        else
                        {
                            num12 = 16;
                        }
                        if (type == 52)
                        {
                            num11 -= 2;
                        }
                        if (type == 324)
                        {
                            num11 = -2;
                        }
                        if (type == 231 || type == 238)
                        {
                            num11 += 2;
                        }
                        if (type == 207)
                        {
                            num11 = 2;
                        }
                        if (type == 4 || type == 5 || type == 323 || type == 324)
                        {
                            num9 = 20;
                        }
                        else
                        {
                            num9 = 16;
                        }
                        if (type == 73 || type == 74 || type == 113)
                        {
                            num11 -= 12;
                            num12 = 32;
                        }
                        if (type == 388 || type == 389)
                        {
                            TileObjectData tileData = TileObjectData.GetTileData((int)type, (int)(num10 / 18), 0);
                            int height = tileData.Height;
                            int num13 = height * 18 + 4;
                            num11 = -2;
                            if ((int)frameY == num13 - 20 || (int)frameY == num13 * 2 - 20 || frameY == 0 || (int)frameY == num13)
                            {
                                num12 = 18;
                            }
                        }
                        if (type == 410 && frameY == 36)
                        {
                            num12 = 18;
                        }
                        if (type == 227)
                        {
                            num9 = 32;
                            num12 = 38;
                            if (num10 == 238)
                            {
                                num11 -= 6;
                            }
                            else
                            {
                                num11 -= 20;
                            }
                        }
                        if (type == 185 || type == 186 || type == 187)
                        {
                            num11 = 2;
                            if (type == 185)
                            {
                                if (frameY == 18 && num10 >= 576 && num10 <= 882)
                                {
                                    Game1.tileShine2[185] = true;
                                }
                                else
                                {
                                    Game1.tileShine2[185] = false;
                                }
                            }
                            else if (type == 186)
                            {
                                if (num10 >= 864 && num10 <= 1170)
                                {
                                    Game1.tileShine2[186] = true;
                                }
                                else
                                {
                                    Game1.tileShine2[186] = false;
                                }
                            }
                        }
                        if (type == 178 && frameY <= 36)
                        {
                            num11 = 2;
                        }
                        if (type == 184)
                        {
                            num9 = 20;
                            if (frameY <= 36)
                            {
                                num11 = 2;
                            }
                            else if (frameY <= 108)
                            {
                                num11 = -2;
                            }
                        }
                        if (type == 28)
                        {
                            num11 += 2;
                        }
                        if (type == 81)
                        {
                            num11 -= 8;
                            num12 = 26;
                            num9 = 24;
                        }
                        if (type == 105)
                        {
                            num11 = 2;
                        }
                        if (type == 124)
                        {
                            num12 = 18;
                        }
                        if (type == 137)
                        {
                            num12 = 18;
                        }
                        if (type == 138)
                        {
                            num12 = 18;
                        }
                        if (type == 139 || type == 142 || type == 143)
                        {
                            num11 = 2;
                        }
                        int num14 = 0;
                        if (tile.halfBrick())
                        {
                            num14 = 8;
                        }
                        int num15 = Game1.tileFrame[(int)type] * 38;
                        int num16 = 0;
                        if (type == 272)
                        {
                            num15 = 0;
                        }
                        if (type == 106)
                        {
                            num15 = Game1.tileFrame[(int)type] * 54;
                        }
                        if (type >= 300 && type <= 308)
                        {
                            num15 = Game1.tileFrame[(int)type] * 54;
                            num11 = 2;
                        }
                        if (type == 354)
                        {
                            num15 = Game1.tileFrame[(int)type] * 54;
                            num11 = 2;
                        }
                        if (type == 355)
                        {
                            num15 = Game1.tileFrame[(int)type] * 54;
                            num11 = 2;
                        }
                        if (type == 377)
                        {
                            num15 = Game1.tileFrame[(int)type] * 38;
                            num11 = 2;
                        }
                        if (type == 379)
                        {
                            num15 = Game1.tileFrame[(int)type] * 90;
                        }
                        if (type == 349)
                        {
                            int num17 = (int)(num10 % 36);
                            int num18 = (int)(frameY % 54);
                            int num19;
                            if (Animation.GetTemporaryFrame(j - num17 / 18, i - num18 / 18, out num19))
                            {
                                num10 = (short)(36 * num19 + num17);
                            }
                        }
                        if (type == 390)
                        {
                            num15 = Game1.tileFrame[(int)type] * 36;
                        }
                        if (type == 412)
                        {
                            num15 = 0;
                            num11 = 2;
                        }
                        if (type == 406)
                        {
                            int num20 = Game1.tileFrame[(int)type];
                            if (frameY >= 108)
                            {
                                num20 = (int)(6 - frameY / 54);
                            }
                            else if (frameY >= 54)
                            {
                                num20 = Game1.tileFrame[(int)type] - 1;
                            }
                            num15 = num20 * 56;
                            num15 += (int)(frameY / 54 * 2);
                        }
                        if (type == 405)
                        {
                            int num21 = Game1.tileFrame[(int)type];
                            if (num10 >= 54)
                            {
                                num21 = 0;
                            }
                            num15 = num21 * 38;
                        }
                        if (type == 12)
                        {
                            num15 = Game1.tileFrame[(int)type] * 36;
                        }
                        if (type == 96)
                        {
                            num15 = Game1.tileFrame[(int)type] * 36;
                        }
                        if (type == 238)
                        {
                            num15 = Game1.tileFrame[(int)type] * 36;
                        }
                        if (type == 31)
                        {
                            num15 = Game1.tileFrame[(int)type] * 36;
                        }
                        if (type == 215)
                        {
                            if (frameY < 36)
                            {
                                num15 = Game1.tileFrame[(int)type] * 36;
                            }
                            else
                            {
                                num15 = 252;
                            }
                            num11 = 2;
                        }
                        if (type == 231)
                        {
                            num15 = Game1.tileFrame[(int)type] * 54;
                            num11 = 2;
                        }
                        if (type == 243)
                        {
                            num15 = Game1.tileFrame[(int)type] * 54;
                            num11 = 2;
                        }
                        if (type == 247)
                        {
                            num15 = Game1.tileFrame[(int)type] * 54;
                            num11 = 2;
                        }
                        if (type == 228)
                        {
                            num15 = Game1.tileFrame[(int)type] * 54;
                            num11 = 2;
                        }
                        if (type == 244)
                        {
                            num11 = 2;
                            if (num10 < 54)
                            {
                                num15 = Game1.tileFrame[(int)type] * 36;
                            }
                            else
                            {
                                num15 = 0;
                            }
                        }
                        if (type == 235)
                        {
                            num15 = Game1.tileFrame[(int)type] * 18;
                        }
                        if (type == 217 || type == 218)
                        {
                            num15 = Game1.tileFrame[(int)type] * 36;
                            num11 = 2;
                        }
                        if (type == 219 || type == 220)
                        {
                            num15 = Game1.tileFrame[(int)type] * 54;
                            num11 = 2;
                        }
                        if (type == 270 || type == 271)
                        {
                            int k = Game1.tileFrame[(int)type] + j % 6;
                            if (j % 2 == 0)
                            {
                                k += 3;
                            }
                            if (j % 3 == 0)
                            {
                                k += 3;
                            }
                            if (j % 4 == 0)
                            {
                                k += 3;
                            }
                            while (k > 5)
                            {
                                k -= 6;
                            }
                            num16 = k * 18;
                            num15 = 0;
                        }
                        if (type == 373 || type == 374 || type == 375)
                        {
                            int num22 = 60;
                            if (type == 374)
                            {
                                num22 = 120;
                            }
                            else if (type == 375)
                            {
                                num22 = 180;
                            }
                            if (Game1.rand.Next(num22 * 2) == 0 && tile.liquid == 0)
                            {
                                Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(j * 16, i * 16, 16, 16);
                                rectangle.X -= 34;
                                rectangle.Width += 68;
                                rectangle.Y -= 100;
                                rectangle.Height = 400;
                                bool flag2 = true;
                                for (int l = 0; l < 500; l++)
                                {
                                    if (Game1.gore[l].active && Game1.gore[l].type >= 706 && Game1.gore[l].type <= 717)
                                    {
                                        Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)Game1.gore[l].position.X, (int)Game1.gore[l].position.Y, 16, 16);
                                        if (rectangle.Intersects(value))
                                        {
                                            flag2 = false;
                                        }
                                    }
                                }
                                if (flag2)
                                {
                                    Vector2 position = new Vector2((float)(j * 16), (float)(i * 16));
                                    int type2 = 706;
                                    if (Game1.waterStyle > 1)
                                    {
                                        type2 = 706 + Game1.waterStyle - 1;
                                    }
                                    if (type == 374)
                                    {
                                        type2 = 716;
                                    }
                                    if (type == 375)
                                    {
                                        type2 = 717;
                                    }
                                    int num23 = Gore.NewGore(position, default(Vector2), type2, 1f);
                                    Game1.gore[num23].velocity *= 0f;
                                }
                            }
                        }
                        else
                        {
                            if ((type >= 275 && type <= 281) || type == 296 || type == 297 || type == 309 || type == 358 || type == 359 || type == 414 || type == 413)
                            {
                                Game1.critterCage = true;
                                int num24 = j - (int)(num10 / 18);
                                int num25 = i - (int)(frameY / 18);
                                int num26 = num24 / 6 * (num25 / 4);
                                num26 %= Game1.cageFrames;
                                if (type == 275 || type == 359)
                                {
                                    num15 = Game1.bunnyCageFrame[num26] * 54;
                                }
                                if (type == 276 || type == 414)
                                {
                                    num15 = Game1.squirrelCageFrame[num26] * 54;
                                }
                                if (type == 413)
                                {
                                    num15 = Game1.squirrelCageFrameOrange[num26] * 54;
                                }
                                if (type == 277)
                                {
                                    num15 = Game1.mallardCageFrame[num26] * 54;
                                }
                                if (type == 278)
                                {
                                    num15 = Game1.duckCageFrame[num26] * 54;
                                }
                                if (type == 279 || type == 358)
                                {
                                    num15 = Game1.birdCageFrame[num26] * 54;
                                }
                                if (type == 280)
                                {
                                    num15 = Game1.blueBirdCageFrame[num26] * 54;
                                }
                                if (type == 281)
                                {
                                    num15 = Game1.redBirdCageFrame[num26] * 54;
                                }
                                if (type == 296)
                                {
                                    num15 = Game1.scorpionCageFrame[0, num26] * 54;
                                }
                                if (type == 297)
                                {
                                    num15 = Game1.scorpionCageFrame[0, num26] * 54;
                                }
                                if (type == 309)
                                {
                                    num15 = Game1.penguinCageFrame[num26] * 54;
                                }
                            }
                            else if (type == 285 || type == 286 || type == 298 || type == 299 || type == 310 || type == 339 || (type >= 361 && type <= 364) || (type >= 391 && type <= 394))
                            {
                                Game1.critterCage = true;
                                int num27 = j - (int)(num10 / 18);
                                int num28 = i - (int)(frameY / 18);
                                int num29 = num27 / 3 * (num28 / 3);
                                num29 %= Game1.cageFrames;
                                if (type == 285)
                                {
                                    num15 = Game1.snailCageFrame[num29] * 36;
                                }
                                if (type == 286)
                                {
                                    num15 = Game1.snail2CageFrame[num29] * 36;
                                }
                                if (type == 298 || type == 361)
                                {
                                    num15 = Game1.frogCageFrame[num29] * 36;
                                }
                                if (type == 299 || type == 363)
                                {
                                    num15 = Game1.mouseCageFrame[num29] * 36;
                                }
                                if (type == 310 || type == 364 || type == 391)
                                {
                                    num15 = Game1.wormCageFrame[num29] * 36;
                                }
                                if (type == 339 || type == 362)
                                {
                                    num15 = Game1.grasshopperCageFrame[num29] * 36;
                                }
                                if (type == 392 || type == 393 || type == 394)
                                {
                                    num15 = Game1.slugCageFrame[(int)(type - 392), num29] * 36;
                                }
                            }
                            else if (type == 282 || (type >= 288 && type <= 295) || (type >= 316 && type <= 318) || type == 360)
                            {
                                Game1.critterCage = true;
                                int num30 = j - (int)(num10 / 18);
                                int num31 = i - (int)(frameY / 18);
                                int num32 = num30 / 2 * (num31 / 3);
                                num32 %= Game1.cageFrames;
                                if (type == 282)
                                {
                                    num15 = Game1.fishBowlFrame[num32] * 36;
                                }
                                else if ((type >= 288 && type <= 295) || type == 360)
                                {
                                    int num33 = (int)(type - 288);
                                    if (type == 360)
                                    {
                                        num33 = 8;
                                    }
                                    num15 = Game1.butterflyCageFrame[num33, num32] * 36;
                                }
                                else if (type >= 316 && type <= 318)
                                {
                                    int num34 = (int)(type - 316);
                                    num15 = Game1.jellyfishCageFrame[num34, num32] * 36;
                                }
                            }
                            else if (type == 207)
                            {
                                if (frameY >= 72)
                                {
                                    num15 = Game1.tileFrame[(int)type];
                                    int num35 = j;
                                    if (num10 % 36 != 0)
                                    {
                                        num35--;
                                    }
                                    num15 += num35 % 6;
                                    if (num15 >= 6)
                                    {
                                        num15 -= 6;
                                    }
                                    num15 *= 72;
                                }
                                else
                                {
                                    num15 = 0;
                                }
                            }
                            else if (type == 410)
                            {
                                if (frameY >= 56)
                                {
                                    num15 = Game1.tileFrame[(int)type];
                                    num15 *= 56;
                                }
                                else
                                {
                                    num15 = 0;
                                }
                            }
                            else if (type == 326 || type == 327 || type == 328 || type == 329 || type == 336 || type == 340 || type == 341 || type == 342 || type == 343 || type == 344 || type == 345 || type == 351)
                            {
                                num15 = Game1.tileFrame[(int)type] * 90;
                            }
                            Texture2D texture2D = null;
                            Microsoft.Xna.Framework.Rectangle empty = Microsoft.Xna.Framework.Rectangle.Empty;
                            Microsoft.Xna.Framework.Color color2 = Microsoft.Xna.Framework.Color.Transparent;
                            byte b = (byte)(100f + 150f * Game1.martianLight);
                            Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, 0);
                            Microsoft.Xna.Framework.Color color4 = new Microsoft.Xna.Framework.Color(100, 100, 100, 0);
                            Microsoft.Xna.Framework.Color color5 = new Microsoft.Xna.Framework.Color(150, 100, 50, 0);
                            ushort num36 = type;
                            if (num36 <= 79)
                            {
                                if (num36 <= 34)
                                {
                                    switch (num36)
                                    {
                                        case 10:
                                            {
                                                int num37 = (int)(frameY / 54);
                                                if (num37 == 32)
                                                {
                                                    texture2D = Game1.glowMaskTexture[57];
                                                    empty = new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY % 54), num9, num12);
                                                    color2 = color3;
                                                }
                                                break;
                                            }
                                        case 11:
                                            {
                                                int num37 = (int)(frameY / 54);
                                                if (num37 == 32)
                                                {
                                                    texture2D = Game1.glowMaskTexture[58];
                                                    empty = new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY % 54), num9, num12);
                                                    color2 = color3;
                                                }
                                                if (num37 == 33)
                                                {
                                                    texture2D = Game1.glowMaskTexture[119];
                                                    empty = new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY % 54), num9, num12);
                                                    color2 = color4;
                                                }
                                                break;
                                            }
                                        case 12:
                                        case 13:
                                        case 16:
                                        case 17:
                                        case 20:
                                            break;
                                        case 14:
                                            {
                                                int num37 = (int)(num10 / 54);
                                                if (num37 == 31)
                                                {
                                                    texture2D = Game1.glowMaskTexture[67];
                                                    empty = new Microsoft.Xna.Framework.Rectangle((int)(num10 % 54), (int)frameY, num9, num12);
                                                    color2 = color3;
                                                }
                                                if (num37 == 32)
                                                {
                                                    texture2D = Game1.glowMaskTexture[124];
                                                    empty = new Microsoft.Xna.Framework.Rectangle((int)(num10 % 54), (int)frameY, num9, num12);
                                                    color2 = color4;
                                                }
                                                break;
                                            }
                                        case 15:
                                            {
                                                int num37 = (int)(frameY / 40);
                                                if (num37 == 32)
                                                {
                                                    texture2D = Game1.glowMaskTexture[54];
                                                    empty = new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY % 40), num9, num12);
                                                    color2 = color3;
                                                }
                                                if (num37 == 33)
                                                {
                                                    texture2D = Game1.glowMaskTexture[116];
                                                    empty = new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY % 40), num9, num12);
                                                    color2 = color4;
                                                }
                                                break;
                                            }
                                        case 18:
                                            {
                                                int num37 = (int)(num10 / 36);
                                                if (num37 == 27)
                                                {
                                                    texture2D = Game1.glowMaskTexture[69];
                                                    empty = new Microsoft.Xna.Framework.Rectangle((int)(num10 % 36), (int)frameY, num9, num12);
                                                    color2 = color3;
                                                }
                                                if (num37 == 28)
                                                {
                                                    texture2D = Game1.glowMaskTexture[125];
                                                    empty = new Microsoft.Xna.Framework.Rectangle((int)(num10 % 36), (int)frameY, num9, num12);
                                                    color2 = color4;
                                                }
                                                break;
                                            }
                                        case 19:
                                            {
                                                int num37 = (int)(frameY / 18);
                                                if (num37 == 26)
                                                {
                                                    texture2D = Game1.glowMaskTexture[65];
                                                    empty = new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY % 18), num9, num12);
                                                    color2 = color3;
                                                }
                                                if (num37 == 27)
                                                {
                                                    texture2D = Game1.glowMaskTexture[112];
                                                    empty = new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY % 18), num9, num12);
                                                    color2 = color4;
                                                }
                                                break;
                                            }
                                        case 21:
                                            {
                                                int num37 = (int)(num10 / 36);
                                                if (num37 == 48)
                                                {
                                                    texture2D = Game1.glowMaskTexture[56];
                                                    empty = new Microsoft.Xna.Framework.Rectangle((int)(num10 % 36), (int)frameY, num9, num12);
                                                    color2 = color3;
                                                }
                                                if (num37 == 49)
                                                {
                                                    texture2D = Game1.glowMaskTexture[117];
                                                    empty = new Microsoft.Xna.Framework.Rectangle((int)(num10 % 36), (int)frameY, num9, num12);
                                                    color2 = color4;
                                                }
                                                break;
                                            }
                                        default:
                                            switch (num36)
                                            {
                                                case 33:
                                                    if (num10 / 18 == 0)
                                                    {
                                                        int num37 = (int)(frameY / 22);
                                                        if (num37 == 26)
                                                        {
                                                            texture2D = Game1.glowMaskTexture[61];
                                                            empty = new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY % 22), num9, num12);
                                                            color2 = color3;
                                                        }
                                                    }
                                                    break;
                                                case 34:
                                                    if (num10 / 54 == 0)
                                                    {
                                                        int num37 = (int)(frameY / 54);
                                                        if (num37 == 33)
                                                        {
                                                            texture2D = Game1.glowMaskTexture[55];
                                                            empty = new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY % 54), num9, num12);
                                                            color2 = color3;
                                                        }
                                                    }
                                                    break;
                                            }
                                            break;
                                    }
                                }
                                else if (num36 != 42)
                                {
                                    if (num36 == 79)
                                    {
                                        int num37 = (int)(frameY / 36);
                                        if (num37 == 27)
                                        {
                                            texture2D = Game1.glowMaskTexture[53];
                                            empty = new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY % 36), num9, num12);
                                            color2 = color3;
                                        }
                                        if (num37 == 28)
                                        {
                                            texture2D = Game1.glowMaskTexture[114];
                                            empty = new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY % 36), num9, num12);
                                            color2 = color4;
                                        }
                                    }
                                }
                                else
                                {
                                    int num37 = (int)(frameY / 36);
                                    if (num37 == 33)
                                    {
                                        texture2D = Game1.glowMaskTexture[63];
                                        empty = new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY % 36), num9, num12);
                                        color2 = color3;
                                    }
                                }
                            }
                            else if (num36 <= 104)
                            {
                                switch (num36)
                                {
                                    case 87:
                                        {
                                            int num37 = (int)(num10 / 54);
                                            if (num37 == 26)
                                            {
                                                texture2D = Game1.glowMaskTexture[64];
                                                empty = new Microsoft.Xna.Framework.Rectangle((int)(num10 % 54), (int)frameY, num9, num12);
                                                color2 = color3;
                                            }
                                            if (num37 == 27)
                                            {
                                                texture2D = Game1.glowMaskTexture[121];
                                                empty = new Microsoft.Xna.Framework.Rectangle((int)(num10 % 54), (int)frameY, num9, num12);
                                                color2 = color4;
                                            }
                                            break;
                                        }
                                    case 88:
                                        {
                                            int num37 = (int)(num10 / 54);
                                            if (num37 == 24)
                                            {
                                                texture2D = Game1.glowMaskTexture[59];
                                                empty = new Microsoft.Xna.Framework.Rectangle((int)(num10 % 54), (int)frameY, num9, num12);
                                                color2 = color3;
                                            }
                                            if (num37 == 25)
                                            {
                                                texture2D = Game1.glowMaskTexture[120];
                                                empty = new Microsoft.Xna.Framework.Rectangle((int)(num10 % 54), (int)frameY, num9, num12);
                                                color2 = color4;
                                            }
                                            break;
                                        }
                                    case 89:
                                        {
                                            int num37 = (int)(num10 / 54);
                                            if (num37 == 29)
                                            {
                                                texture2D = Game1.glowMaskTexture[66];
                                                empty = new Microsoft.Xna.Framework.Rectangle((int)(num10 % 54), (int)frameY, num9, num12);
                                                color2 = color3;
                                            }
                                            if (num37 == 30)
                                            {
                                                texture2D = Game1.glowMaskTexture[123];
                                                empty = new Microsoft.Xna.Framework.Rectangle((int)(num10 % 54), (int)frameY, num9, num12);
                                                color2 = color4;
                                            }
                                            break;
                                        }
                                    case 90:
                                        {
                                            int num37 = (int)(frameY / 36);
                                            if (num37 == 27)
                                            {
                                                texture2D = Game1.glowMaskTexture[52];
                                                empty = new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY % 36), num9, num12);
                                                color2 = color3;
                                            }
                                            if (num37 == 28)
                                            {
                                                texture2D = Game1.glowMaskTexture[113];
                                                empty = new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY % 36), num9, num12);
                                                color2 = color4;
                                            }
                                            break;
                                        }
                                    case 91:
                                    case 92:
                                        break;
                                    case 93:
                                        {
                                            int num37 = (int)(num10 / 54);
                                            if (num37 == 27)
                                            {
                                                texture2D = Game1.glowMaskTexture[62];
                                                empty = new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY % 54), num9, num12);
                                                color2 = color3;
                                            }
                                            break;
                                        }
                                    default:
                                        switch (num36)
                                        {
                                            case 100:
                                                if (num10 / 36 == 0)
                                                {
                                                    int num37 = (int)(frameY / 36);
                                                    if (num37 == 27)
                                                    {
                                                        texture2D = Game1.glowMaskTexture[68];
                                                        empty = new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY % 36), num9, num12);
                                                        color2 = color3;
                                                    }
                                                }
                                                break;
                                            case 101:
                                                {
                                                    int num37 = (int)(num10 / 54);
                                                    if (num37 == 28)
                                                    {
                                                        texture2D = Game1.glowMaskTexture[60];
                                                        empty = new Microsoft.Xna.Framework.Rectangle((int)(num10 % 54), (int)frameY, num9, num12);
                                                        color2 = color3;
                                                    }
                                                    if (num37 == 29)
                                                    {
                                                        texture2D = Game1.glowMaskTexture[115];
                                                        empty = new Microsoft.Xna.Framework.Rectangle((int)(num10 % 54), (int)frameY, num9, num12);
                                                        color2 = color4;
                                                    }
                                                    break;
                                                }
                                            case 104:
                                                {
                                                    int num37 = (int)(num10 / 36);
                                                    if (num37 == 24)
                                                    {
                                                        texture2D = Game1.glowMaskTexture[51];
                                                        empty = new Microsoft.Xna.Framework.Rectangle((int)(num10 % 36), (int)frameY, num9, num12);
                                                        color2 = color3;
                                                    }
                                                    if (num37 == 25)
                                                    {
                                                        texture2D = Game1.glowMaskTexture[118];
                                                        empty = new Microsoft.Xna.Framework.Rectangle((int)(num10 % 36), (int)frameY, num9, num12);
                                                        color2 = color4;
                                                    }
                                                    break;
                                                }
                                        }
                                        break;
                                }
                            }
                            else if (num36 != 172)
                            {
                                if (num36 == 184 && tile.frameX == 110)
                                {
                                    texture2D = Game1.glowMaskTexture[127];
                                    empty = new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12);
                                    color2 = color5;
                                }
                            }
                            else
                            {
                                int num37 = (int)(frameY / 38);
                                if (num37 == 28)
                                {
                                    texture2D = Game1.glowMaskTexture[88];
                                    empty = new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY % 38), num9, num12);
                                    color2 = color3;
                                }
                                if (num37 == 29)
                                {
                                    texture2D = Game1.glowMaskTexture[122];
                                    empty = new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY % 38), num9, num12);
                                    color2 = color4;
                                }
                            }
                            if (Game1.player[Game1.myPlayer].dangerSense)
                            {
                                bool flag3 = false || type == 135 || type == 137 || type == 138 || type == 141 || type == 210;
                                if (tile.slope() == 0 && !tile.inActive())
                                {
                                    flag3 = (flag3 || type == 32 || type == 69 || type == 48 || type == 232 || type == 352 || type == 51 || type == 229);
                                    if (!Game1.player[Game1.myPlayer].fireWalk)
                                    {
                                        flag3 = (flag3 || type == 37 || type == 58 || type == 76);
                                    }
                                    if (!Game1.player[Game1.myPlayer].iceSkate)
                                    {
                                        flag3 = (flag3 || type == 162);
                                    }
                                }
                                if (flag3)
                                {
                                    if (color.R < 255)
                                    {
                                        color.R = 255;
                                    }
                                    if (color.G < 50)
                                    {
                                        color.G = 50;
                                    }
                                    if (color.B < 50)
                                    {
                                        color.B = 50;
                                    }
                                    color.A = Game1.mouseTextColor;
                                    if (!Game1.gamePaused && base.IsActive && Game1.rand.Next(30) == 0)
                                    {
                                        int num38 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 60, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 0.3f);
                                        Game1.dust[num38].fadeIn = 1f;
                                        Game1.dust[num38].velocity *= 0.1f;
                                        Game1.dust[num38].noLight = true;
                                        Game1.dust[num38].noGravity = true;
                                    }
                                }
                            }
                            if (Game1.player[Game1.myPlayer].findTreasure)
                            {
                                bool flag4 = false;
                                if (type == 185 && frameY == 18 && num10 >= 576 && num10 <= 882)
                                {
                                    flag4 = true;
                                }
                                if (type == 186 && num10 >= 864 && num10 <= 1170)
                                {
                                    flag4 = true;
                                }
                                if (flag4 || Game1.tileSpelunker[(int)type] || (Game1.tileAlch[(int)type] && type != 82))
                                {
                                    byte b2 = 200;
                                    byte b3 = 170;
                                    if (color.R < b2)
                                    {
                                        color.R = b2;
                                    }
                                    if (color.G < b3)
                                    {
                                        color.G = b3;
                                    }
                                    color.A = Game1.mouseTextColor;
                                    if (!Game1.gamePaused && base.IsActive && Game1.rand.Next(60) == 0)
                                    {
                                        int num39 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 204, 0f, 0f, 150, default(Microsoft.Xna.Framework.Color), 0.3f);
                                        Game1.dust[num39].fadeIn = 1f;
                                        Game1.dust[num39].velocity *= 0.1f;
                                        Game1.dust[num39].noLight = true;
                                    }
                                }
                            }
                            if (!Game1.gamePaused && base.IsActive && (Lighting.lightMode < 2 || Game1.rand.Next(4) == 0))
                            {
                                if (type == 238 && Game1.rand.Next(10) == 0)
                                {
                                    int num40 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 168, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
                                    Game1.dust[num40].noGravity = true;
                                    Game1.dust[num40].alpha = 200;
                                }
                                if (type == 244 && num10 == 18 && frameY == 18 && Game1.rand.Next(2) == 0)
                                {
                                    if (Game1.rand.Next(500) == 0)
                                    {
                                        Gore.NewGore(new Vector2((float)(j * 16 + 8), (float)(i * 16 + 8)), default(Vector2), 415, (float)Game1.rand.Next(51, 101) * 0.01f);
                                    }
                                    else if (Game1.rand.Next(250) == 0)
                                    {
                                        Gore.NewGore(new Vector2((float)(j * 16 + 8), (float)(i * 16 + 8)), default(Vector2), 414, (float)Game1.rand.Next(51, 101) * 0.01f);
                                    }
                                    else if (Game1.rand.Next(80) == 0)
                                    {
                                        Gore.NewGore(new Vector2((float)(j * 16 + 8), (float)(i * 16 + 8)), default(Vector2), 413, (float)Game1.rand.Next(51, 101) * 0.01f);
                                    }
                                    else if (Game1.rand.Next(10) == 0)
                                    {
                                        Gore.NewGore(new Vector2((float)(j * 16 + 8), (float)(i * 16 + 8)), default(Vector2), 412, (float)Game1.rand.Next(51, 101) * 0.01f);
                                    }
                                    else if (Game1.rand.Next(3) == 0)
                                    {
                                        Gore.NewGore(new Vector2((float)(j * 16 + 8), (float)(i * 16 + 8)), default(Vector2), 411, (float)Game1.rand.Next(51, 101) * 0.01f);
                                    }
                                }
                                if (type == 165 && num10 >= 162 && num10 <= 214 && frameY == 72 && Game1.rand.Next(60) == 0)
                                {
                                    int num41 = Dust.NewDust(new Vector2((float)(j * 16 + 2), (float)(i * 16 + 6)), 8, 4, 153, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
                                    Game1.dust[num41].scale -= (float)Game1.rand.Next(3) * 0.1f;
                                    Game1.dust[num41].velocity.Y = 0f;
                                    Dust expr_21DF_cp_0 = Game1.dust[num41];
                                    expr_21DF_cp_0.velocity.X = expr_21DF_cp_0.velocity.X * 0.05f;
                                    Game1.dust[num41].alpha = 100;
                                }
                                if (type == 42 && num10 == 0)
                                {
                                    int num42 = (int)(frameY / 36);
                                    int num43 = (int)(frameY / 18 % 2);
                                    if (num42 == 7 && num43 == 1)
                                    {
                                        if (Game1.rand.Next(50) == 0)
                                        {
                                            int num44 = Dust.NewDust(new Vector2((float)(j * 16 + 4), (float)(i * 16 + 4)), 8, 8, 58, 0f, 0f, 150, default(Microsoft.Xna.Framework.Color), 1f);
                                            Game1.dust[num44].velocity *= 0.5f;
                                        }
                                        if (Game1.rand.Next(100) == 0)
                                        {
                                            int num45 = Gore.NewGore(new Vector2((float)(j * 16 - 2), (float)(i * 16 - 4)), default(Vector2), Game1.rand.Next(16, 18), 1f);
                                            Game1.gore[num45].scale *= 0.7f;
                                            Game1.gore[num45].velocity *= 0.25f;
                                        }
                                    }
                                    else if (num42 == 29 && num43 == 1 && Game1.rand.Next(40) == 0)
                                    {
                                        int num46 = Dust.NewDust(new Vector2((float)(j * 16 + 4), (float)(i * 16)), 8, 8, 59, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
                                        if (Game1.rand.Next(3) != 0)
                                        {
                                            Game1.dust[num46].noGravity = true;
                                        }
                                        Game1.dust[num46].velocity *= 0.3f;
                                        Dust expr_23C9_cp_0 = Game1.dust[num46];
                                        expr_23C9_cp_0.velocity.Y = expr_23C9_cp_0.velocity.Y - 1.5f;
                                    }
                                }
                                if (type == 215 && frameY < 36 && Game1.rand.Next(3) == 0 && ((Game1.drawToScreen && Game1.rand.Next(4) == 0) || !Game1.drawToScreen) && frameY == 0)
                                {
                                    int num47 = Dust.NewDust(new Vector2((float)(j * 16 + 2), (float)(i * 16 - 4)), 4, 8, 31, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
                                    if (num10 == 0)
                                    {
                                        Dust expr_2474_cp_0 = Game1.dust[num47];
                                        expr_2474_cp_0.position.X = expr_2474_cp_0.position.X + (float)Game1.rand.Next(8);
                                    }
                                    if (num10 == 36)
                                    {
                                        Dust expr_249F_cp_0 = Game1.dust[num47];
                                        expr_249F_cp_0.position.X = expr_249F_cp_0.position.X - (float)Game1.rand.Next(8);
                                    }
                                    Game1.dust[num47].alpha += Game1.rand.Next(100);
                                    Game1.dust[num47].velocity *= 0.2f;
                                    Dust expr_2501_cp_0 = Game1.dust[num47];
                                    expr_2501_cp_0.velocity.Y = expr_2501_cp_0.velocity.Y - (0.5f + (float)Game1.rand.Next(10) * 0.1f);
                                    Game1.dust[num47].fadeIn = 0.5f + (float)Game1.rand.Next(10) * 0.1f;
                                }
                                if (type == 4 && Game1.rand.Next(40) == 0 && num10 < 66)
                                {
                                    int num48 = (int)(frameY / 22);
                                    if (num48 == 0)
                                    {
                                        num48 = 6;
                                    }
                                    else if (num48 == 8)
                                    {
                                        num48 = 75;
                                    }
                                    else if (num48 == 9)
                                    {
                                        num48 = 135;
                                    }
                                    else if (num48 == 10)
                                    {
                                        num48 = 158;
                                    }
                                    else if (num48 == 11)
                                    {
                                        num48 = 169;
                                    }
                                    else if (num48 == 12)
                                    {
                                        num48 = 156;
                                    }
                                    else if (num48 == 13)
                                    {
                                        num48 = 234;
                                    }
                                    else if (num48 == 14)
                                    {
                                        num48 = 66;
                                    }
                                    else
                                    {
                                        num48 = 58 + num48;
                                    }
                                    int num49;
                                    if (num10 == 22)
                                    {
                                        num49 = Dust.NewDust(new Vector2((float)(j * 16 + 6), (float)(i * 16)), 4, 4, num48, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
                                    }
                                    else if (num10 == 44)
                                    {
                                        num49 = Dust.NewDust(new Vector2((float)(j * 16 + 2), (float)(i * 16)), 4, 4, num48, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
                                    }
                                    else
                                    {
                                        num49 = Dust.NewDust(new Vector2((float)(j * 16 + 4), (float)(i * 16)), 4, 4, num48, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
                                    }
                                    if (Game1.rand.Next(3) != 0)
                                    {
                                        Game1.dust[num49].noGravity = true;
                                    }
                                    Game1.dust[num49].velocity *= 0.3f;
                                    Dust expr_26F9_cp_0 = Game1.dust[num49];
                                    expr_26F9_cp_0.velocity.Y = expr_26F9_cp_0.velocity.Y - 1.5f;
                                    if (num48 == 66)
                                    {
                                        Game1.dust[num49].color = new Microsoft.Xna.Framework.Color(Game1.DiscoR, Game1.DiscoG, Game1.DiscoB);
                                        Game1.dust[num49].noGravity = true;
                                    }
                                }
                                if (type == 93 && Game1.rand.Next(40) == 0 && num10 == 0)
                                {
                                    int num50 = (int)(frameY / 54);
                                    if (frameY / 18 % 3 == 0)
                                    {
                                        int num51 = num50;
                                        if (num51 == 0)
                                        {
                                            goto IL_27CD;
                                        }
                                        int num52;
                                        switch (num51)
                                        {
                                            case 6:
                                            case 7:
                                            case 8:
                                            case 10:
                                            case 14:
                                            case 15:
                                            case 16:
                                                goto IL_27CD;
                                            case 20:
                                                num52 = 59;
                                                goto IL_27DB;
                                        }
                                        num52 = -1;
                                    IL_27DB:
                                        if (num52 != -1)
                                        {
                                            int num53 = Dust.NewDust(new Vector2((float)(j * 16 + 4), (float)(i * 16 + 2)), 4, 4, num52, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
                                            if (Game1.rand.Next(3) != 0)
                                            {
                                                Game1.dust[num53].noGravity = true;
                                            }
                                            Game1.dust[num53].velocity *= 0.3f;
                                            Dust expr_2867_cp_0 = Game1.dust[num53];
                                            expr_2867_cp_0.velocity.Y = expr_2867_cp_0.velocity.Y - 1.5f;
                                            goto IL_2878;
                                        }
                                        goto IL_2878;
                                    IL_27CD:
                                        num52 = 6;
                                        goto IL_27DB;
                                    }
                                }
                            IL_2878:
                                if (type == 100 && Game1.rand.Next(40) == 0 && num10 < 36)
                                {
                                    int num54 = (int)(frameY / 36);
                                    if (frameY / 18 % 2 == 0)
                                    {
                                        int num55;
                                        switch (num54)
                                        {
                                            case 0:
                                            case 2:
                                            case 5:
                                            case 7:
                                            case 8:
                                            case 10:
                                            case 12:
                                            case 14:
                                            case 15:
                                            case 16:
                                                num55 = 6;
                                                break;
                                            case 1:
                                            case 3:
                                            case 4:
                                            case 6:
                                            case 9:
                                            case 11:
                                            case 13:
                                            case 17:
                                            case 18:
                                            case 19:
                                                goto IL_2922;
                                            case 20:
                                                num55 = 59;
                                                break;
                                            default:
                                                goto IL_2922;
                                        }
                                    IL_2925:
                                        if (num55 != -1)
                                        {
                                            Vector2 position2;
                                            if (num10 == 0)
                                            {
                                                if (Game1.rand.Next(3) == 0)
                                                {
                                                    position2 = new Vector2((float)(j * 16 + 4), (float)(i * 16 + 2));
                                                }
                                                else
                                                {
                                                    position2 = new Vector2((float)(j * 16 + 14), (float)(i * 16 + 2));
                                                }
                                            }
                                            else if (Game1.rand.Next(3) == 0)
                                            {
                                                position2 = new Vector2((float)(j * 16 + 6), (float)(i * 16 + 2));
                                            }
                                            else
                                            {
                                                position2 = new Vector2((float)(j * 16), (float)(i * 16 + 2));
                                            }
                                            int num56 = Dust.NewDust(position2, 4, 4, num55, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
                                            if (Game1.rand.Next(3) != 0)
                                            {
                                                Game1.dust[num56].noGravity = true;
                                            }
                                            Game1.dust[num56].velocity *= 0.3f;
                                            Dust expr_2A20_cp_0 = Game1.dust[num56];
                                            expr_2A20_cp_0.velocity.Y = expr_2A20_cp_0.velocity.Y - 1.5f;
                                            goto IL_2A31;
                                        }
                                        goto IL_2A31;
                                    IL_2922:
                                        num55 = -1;
                                        goto IL_2925;
                                    }
                                }
                            IL_2A31:
                                if (type == 98 && Game1.rand.Next(40) == 0 && frameY == 0 && num10 == 0)
                                {
                                    int num57 = Dust.NewDust(new Vector2((float)(j * 16 + 12), (float)(i * 16 + 2)), 4, 4, 6, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
                                    if (Game1.rand.Next(3) != 0)
                                    {
                                        Game1.dust[num57].noGravity = true;
                                    }
                                    Game1.dust[num57].velocity *= 0.3f;
                                    Dust expr_2ADD_cp_0 = Game1.dust[num57];
                                    expr_2ADD_cp_0.velocity.Y = expr_2ADD_cp_0.velocity.Y - 1.5f;
                                }
                                if (type == 49 && Game1.rand.Next(2) == 0)
                                {
                                    int num58 = Dust.NewDust(new Vector2((float)(j * 16 + 4), (float)(i * 16 - 4)), 4, 4, 172, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
                                    if (Game1.rand.Next(3) == 0)
                                    {
                                        Game1.dust[num58].scale = 0.5f;
                                    }
                                    else
                                    {
                                        Game1.dust[num58].scale = 0.9f;
                                        Game1.dust[num58].noGravity = true;
                                    }
                                    Game1.dust[num58].velocity *= 0.3f;
                                    Dust expr_2BB4_cp_0 = Game1.dust[num58];
                                    expr_2BB4_cp_0.velocity.Y = expr_2BB4_cp_0.velocity.Y - 1.5f;
                                }
                                if (type == 372 && Game1.rand.Next(2) == 0)
                                {
                                    int num59 = Dust.NewDust(new Vector2((float)(j * 16 + 4), (float)(i * 16 - 4)), 4, 4, 242, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
                                    if (Game1.rand.Next(3) == 0)
                                    {
                                        Game1.dust[num59].scale = 0.5f;
                                    }
                                    else
                                    {
                                        Game1.dust[num59].scale = 0.9f;
                                        Game1.dust[num59].noGravity = true;
                                    }
                                    Game1.dust[num59].velocity *= 0.3f;
                                    Dust expr_2C8E_cp_0 = Game1.dust[num59];
                                    expr_2C8E_cp_0.velocity.Y = expr_2C8E_cp_0.velocity.Y - 1.5f;
                                }
                                if (type == 34 && Game1.rand.Next(40) == 0 && num10 < 54)
                                {
                                    int num60 = (int)(frameY / 54);
                                    int num61 = (int)(num10 / 18 % 3);
                                    int num62 = (int)(frameY / 18 % 3);
                                    if (num62 == 1 && num61 != 1)
                                    {
                                        int num51 = num60;
                                        int num63;
                                        switch (num51)
                                        {
                                            case 0:
                                            case 1:
                                            case 2:
                                            case 3:
                                            case 4:
                                            case 5:
                                            case 12:
                                            case 13:
                                            case 16:
                                                goto IL_2D60;
                                            case 6:
                                            case 7:
                                            case 8:
                                            case 9:
                                            case 10:
                                            case 11:
                                            case 14:
                                            case 15:
                                                goto IL_2D6B;
                                            default:
                                                switch (num51)
                                                {
                                                    case 19:
                                                    case 21:
                                                        goto IL_2D60;
                                                    case 20:
                                                        goto IL_2D6B;
                                                    default:
                                                        if (num51 != 25)
                                                        {
                                                            goto IL_2D6B;
                                                        }
                                                        num63 = 59;
                                                        break;
                                                }
                                                break;
                                        }
                                    IL_2D6E:
                                        if (num63 != -1)
                                        {
                                            int num64 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16 + 2)), 14, 6, num63, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
                                            if (Game1.rand.Next(3) != 0)
                                            {
                                                Game1.dust[num64].noGravity = true;
                                            }
                                            Game1.dust[num64].velocity *= 0.3f;
                                            Dust expr_2DF9_cp_0 = Game1.dust[num64];
                                            expr_2DF9_cp_0.velocity.Y = expr_2DF9_cp_0.velocity.Y - 1.5f;
                                            goto IL_2E0A;
                                        }
                                        goto IL_2E0A;
                                    IL_2D6B:
                                        num63 = -1;
                                        goto IL_2D6E;
                                    IL_2D60:
                                        num63 = 6;
                                        goto IL_2D6E;
                                    }
                                }
                            IL_2E0A:
                                if (type == 22 && Game1.rand.Next(400) == 0)
                                {
                                    Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
                                }
                                else if ((type == 23 || type == 24 || type == 32) && Game1.rand.Next(500) == 0)
                                {
                                    Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
                                }
                                else if (type == 25 && Game1.rand.Next(700) == 0)
                                {
                                    Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
                                }
                                else if (type == 112 && Game1.rand.Next(700) == 0)
                                {
                                    Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
                                }
                                else if (type == 31 && Game1.rand.Next(20) == 0)
                                {
                                    if (num10 >= 36)
                                    {
                                        int num65 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 5, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
                                        Game1.dust[num65].velocity.Y = 0f;
                                        Dust expr_2FF2_cp_0 = Game1.dust[num65];
                                        expr_2FF2_cp_0.velocity.X = expr_2FF2_cp_0.velocity.X * 0.3f;
                                    }
                                    else
                                    {
                                        Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
                                    }
                                }
                                else if (type == 26 && Game1.rand.Next(20) == 0)
                                {
                                    if (num10 >= 54)
                                    {
                                        int num66 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 5, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
                                        Game1.dust[num66].scale = 1.5f;
                                        Game1.dust[num66].noGravity = true;
                                        Game1.dust[num66].velocity *= 0.75f;
                                    }
                                    else
                                    {
                                        Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
                                    }
                                }
                                else if ((type == 71 || type == 72) && Game1.rand.Next(500) == 0)
                                {
                                    Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 41, 0f, 0f, 250, default(Microsoft.Xna.Framework.Color), 0.8f);
                                }
                                else if ((type == 17 || type == 77 || type == 133) && Game1.rand.Next(40) == 0)
                                {
                                    if (num10 == 18 & frameY == 18)
                                    {
                                        int num67 = Dust.NewDust(new Vector2((float)(j * 16 - 4), (float)(i * 16 - 6)), 8, 6, 6, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
                                        if (Game1.rand.Next(3) != 0)
                                        {
                                            Game1.dust[num67].noGravity = true;
                                        }
                                    }
                                }
                                else if (type == 405 && Game1.rand.Next(20) == 0)
                                {
                                    if (num10 == 18 & frameY == 18)
                                    {
                                        int num68 = Dust.NewDust(new Vector2((float)(j * 16 - 4), (float)(i * 16 - 6)), 24, 10, 6, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
                                        if (Game1.rand.Next(5) != 0)
                                        {
                                            Game1.dust[num68].noGravity = true;
                                        }
                                    }
                                }
                                else if (type == 406 && frameY == 54 && num10 == 0 && Game1.rand.Next(3) == 0)
                                {
                                    Vector2 position3 = new Vector2((float)(j * 16 + 16), (float)(i * 16 + 8));
                                    Vector2 velocity = new Vector2(0f, 0f);
                                    if (Game1.windSpeed < 0f)
                                    {
                                        velocity.X = -Game1.windSpeed;
                                    }
                                    int type3 = Game1.rand.Next(825, 828);
                                    if (Game1.rand.Next(4) == 0)
                                    {
                                        Gore.NewGore(position3, velocity, type3, Game1.rand.NextFloat() * 0.2f + 0.2f);
                                    }
                                    else if (Game1.rand.Next(2) == 0)
                                    {
                                        Gore.NewGore(position3, velocity, type3, Game1.rand.NextFloat() * 0.3f + 0.3f);
                                    }
                                    else
                                    {
                                        Gore.NewGore(position3, velocity, type3, Game1.rand.NextFloat() * 0.4f + 0.4f);
                                    }
                                }
                                else if (type == 37 && Game1.rand.Next(250) == 0)
                                {
                                    int num69 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 6, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), (float)Game1.rand.Next(3));
                                    if (Game1.dust[num69].scale > 1f)
                                    {
                                        Game1.dust[num69].noGravity = true;
                                    }
                                }
                                else if ((type == 58 || type == 76) && Game1.rand.Next(250) == 0)
                                {
                                    int num70 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 6, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), (float)Game1.rand.Next(3));
                                    if (Game1.dust[num70].scale > 1f)
                                    {
                                        Game1.dust[num70].noGravity = true;
                                    }
                                    Game1.dust[num70].noLight = true;
                                }
                                else if (type == 61)
                                {
                                    if (num10 == 144)
                                    {
                                        if (Game1.rand.Next(60) == 0)
                                        {
                                            int num71 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 44, 0f, 0f, 250, default(Microsoft.Xna.Framework.Color), 0.4f);
                                            Game1.dust[num71].fadeIn = 0.7f;
                                        }
                                        color.A = (byte)(245f - (float)Game1.mouseTextColor * 1.5f);
                                        color.R = (byte)(245f - (float)Game1.mouseTextColor * 1.5f);
                                        color.B = (byte)(245f - (float)Game1.mouseTextColor * 1.5f);
                                        color.G = (byte)(245f - (float)Game1.mouseTextColor * 1.5f);
                                    }
                                }
                                else if (Game1.tileShine[(int)type] > 0)
                                {
                                    Game1.tileShine[211] = 500;
                                    if (color.R > 20 || color.B > 20 || color.G > 20)
                                    {
                                        int num72 = (int)color.R;
                                        if ((int)color.G > num72)
                                        {
                                            num72 = (int)color.G;
                                        }
                                        if ((int)color.B > num72)
                                        {
                                            num72 = (int)color.B;
                                        }
                                        num72 /= 30;
                                        if (Game1.rand.Next(Game1.tileShine[(int)type]) < num72 && (type != 21 || (num10 >= 36 && num10 < 180) || (num10 >= 396 && num10 <= 409)))
                                        {
                                            Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
                                            if (type == 178)
                                            {
                                                int num73 = (int)(num10 / 18);
                                                if (num73 == 0)
                                                {
                                                    white = new Microsoft.Xna.Framework.Color(255, 0, 255, 255);
                                                }
                                                else if (num73 == 1)
                                                {
                                                    white = new Microsoft.Xna.Framework.Color(255, 255, 0, 255);
                                                }
                                                else if (num73 == 2)
                                                {
                                                    white = new Microsoft.Xna.Framework.Color(0, 0, 255, 255);
                                                }
                                                else if (num73 == 3)
                                                {
                                                    white = new Microsoft.Xna.Framework.Color(0, 255, 0, 255);
                                                }
                                                else if (num73 == 4)
                                                {
                                                    white = new Microsoft.Xna.Framework.Color(255, 0, 0, 255);
                                                }
                                                else if (num73 == 5)
                                                {
                                                    white = new Microsoft.Xna.Framework.Color(255, 255, 255, 255);
                                                }
                                                else if (num73 == 6)
                                                {
                                                    white = new Microsoft.Xna.Framework.Color(255, 255, 0, 255);
                                                }
                                                int num74 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 43, 0f, 0f, 254, white, 0.5f);
                                                Game1.dust[num74].velocity *= 0f;
                                            }
                                            else
                                            {
                                                if (type == 63)
                                                {
                                                    white = new Microsoft.Xna.Framework.Color(0, 0, 255, 255);
                                                }
                                                if (type == 64)
                                                {
                                                    white = new Microsoft.Xna.Framework.Color(255, 0, 0, 255);
                                                }
                                                if (type == 65)
                                                {
                                                    white = new Microsoft.Xna.Framework.Color(0, 255, 0, 255);
                                                }
                                                if (type == 66)
                                                {
                                                    white = new Microsoft.Xna.Framework.Color(255, 255, 0, 255);
                                                }
                                                if (type == 67)
                                                {
                                                    white = new Microsoft.Xna.Framework.Color(255, 0, 255, 255);
                                                }
                                                if (type == 68)
                                                {
                                                    white = new Microsoft.Xna.Framework.Color(255, 255, 255, 255);
                                                }
                                                if (type == 12)
                                                {
                                                    white = new Microsoft.Xna.Framework.Color(255, 0, 0, 255);
                                                }
                                                if (type == 204)
                                                {
                                                    white = new Microsoft.Xna.Framework.Color(255, 0, 0, 255);
                                                }
                                                if (type == 211)
                                                {
                                                    white = new Microsoft.Xna.Framework.Color(50, 255, 100, 255);
                                                }
                                                int num75 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 43, 0f, 0f, 254, white, 0.5f);
                                                Game1.dust[num75].velocity *= 0f;
                                            }
                                        }
                                    }
                                }
                            }
                            if (type == 21)
                            {
                                Microsoft.Xna.Framework.Point key = new Microsoft.Xna.Framework.Point(j, i);
                                if (num10 % 36 != 0)
                                {
                                    key.X--;
                                }
                                if (frameY % 36 != 0)
                                {
                                    key.Y--;
                                }
                                if (!dictionary.ContainsKey(key))
                                {
                                    dictionary[key] = Chest.FindChest(key.X, key.Y);
                                }
                                int num76 = (int)(num10 / 18);
                                int num77 = (int)(frameY / 18);
                                int num78 = (int)(num10 / 36);
                                int num79 = num76 * 18;
                                num16 = num79 - (int)num10;
                                int num80 = num77 * 18;
                                if (dictionary[key] != -1)
                                {
                                    int frame = Game1.chest[dictionary[key]].frame;
                                    if (frame == 1)
                                    {
                                        num80 += 38;
                                    }
                                    if (frame == 2)
                                    {
                                        num80 += 76;
                                    }
                                }
                                num15 = num80 - (int)frameY;
                                if (num77 != 0)
                                {
                                    num12 = 18;
                                }
                                if (num78 == 48 || num78 == 49)
                                {
                                    empty = new Microsoft.Xna.Framework.Rectangle(16 * (num76 % 2), (int)frameY + num15, num9, num12);
                                }
                            }
                            if (type == 378)
                            {
                                Microsoft.Xna.Framework.Point key2 = new Microsoft.Xna.Framework.Point(j, i);
                                if (num10 % 36 != 0)
                                {
                                    key2.X--;
                                }
                                if (frameY % 54 != 0)
                                {
                                    key2.Y -= (int)(frameY / 18);
                                }
                                if (!dictionary2.ContainsKey(key2))
                                {
                                    dictionary2[key2] = TETrainingDummy.Find(key2.X, key2.Y);
                                }
                                if (dictionary2[key2] != -1)
                                {
                                    int num81 = ((TETrainingDummy)TileEntity.ByID[dictionary2[key2]]).npc;
                                    if (num81 != -1)
                                    {
                                        int num82 = Game1.npc[num81].frame.Y / 55;
                                        num82 *= 54;
                                        num82 += (int)frameY;
                                        num15 = num82 - (int)frameY;
                                    }
                                }
                            }
                            if (type == 395)
                            {
                                Microsoft.Xna.Framework.Point key3 = new Microsoft.Xna.Framework.Point(j, i);
                                if (num10 % 36 != 0)
                                {
                                    key3.X--;
                                }
                                if (frameY % 36 != 0)
                                {
                                    key3.Y--;
                                }
                                if (!dictionary3.ContainsKey(key3))
                                {
                                    dictionary3[key3] = TEItemFrame.Find(key3.X, key3.Y);
                                    if (dictionary3[key3] != -1)
                                    {
                                        array[num3] = key3.X;
                                        array2[num3] = key3.Y;
                                        num3++;
                                    }
                                }
                            }
                            if (type == 269 || type == 128)
                            {
                                int num83 = (int)(frameY / 18);
                                if (num83 == 2)
                                {
                                    if (num10 >= 100)
                                    {
                                        bool flag5 = false;
                                        int m = (int)Game1.tile[j, i - 1].frameX;
                                        if (m >= 100)
                                        {
                                            int num84 = 0;
                                            while (m >= 100)
                                            {
                                                num84++;
                                                m -= 100;
                                            }
                                            int num51 = num84;
                                            if (num51 <= 36)
                                            {
                                                if (num51 != 15 && num51 != 36)
                                                {
                                                    goto IL_3C24;
                                                }
                                            }
                                            else
                                            {
                                                switch (num51)
                                                {
                                                    case 41:
                                                    case 42:
                                                        break;
                                                    default:
                                                        switch (num51)
                                                        {
                                                            case 58:
                                                            case 59:
                                                            case 60:
                                                            case 61:
                                                            case 62:
                                                            case 63:
                                                                break;
                                                            default:
                                                                goto IL_3C24;
                                                        }
                                                        break;
                                                }
                                            }
                                            flag5 = true;
                                        }
                                    IL_3C24:
                                        if (!flag5)
                                        {
                                            array[num3] = j;
                                            array2[num3] = i;
                                            num3++;
                                        }
                                    }
                                    if (Game1.tile[j, i - 1].frameX >= 100)
                                    {
                                        array[num3] = j;
                                        array2[num3] = i - 1;
                                        num3++;
                                    }
                                    if (Game1.tile[j, i - 2].frameX >= 100)
                                    {
                                        array[num3] = j;
                                        array2[num3] = i - 2;
                                        num3++;
                                    }
                                }
                            }
                            if (type == 5 && frameY >= 198 && num10 >= 22)
                            {
                                array[num3] = j;
                                array2[num3] = i;
                                num3++;
                            }
                            if (type == 323 && num10 <= 132 && num10 >= 88)
                            {
                                array[num3] = j;
                                array2[num3] = i;
                                num3++;
                            }
                            if (type == 412 && num10 == 0 && frameY == 0)
                            {
                                array[num3] = j;
                                array2[num3] = i;
                                num3++;
                            }
                            if (type == 237 && num10 == 18 && frameY == 0)
                            {
                                array[num3] = j;
                                array2[num3] = i;
                                num3++;
                            }
                            if (type == 334)
                            {
                                int num85 = (int)(frameY / 18);
                                if (num85 == 1 && num10 >= 5000)
                                {
                                    int n = (int)Game1.tile[j, i].frameX;
                                    int num86 = 0;
                                    while (n >= 5000)
                                    {
                                        num86++;
                                        n -= 5000;
                                    }
                                    if (num86 == 1 || num86 == 4)
                                    {
                                        array[num3] = j;
                                        array2[num3] = i;
                                        num3++;
                                    }
                                }
                            }
                            if (type == 5 && frameY >= 198 && num10 >= 22)
                            {
                                array[num3] = j;
                                array2[num3] = i;
                                num3++;
                            }
                            if (type == 323 && num10 <= 132 && num10 >= 88)
                            {
                                array[num3] = j;
                                array2[num3] = i;
                                num3++;
                            }
                            if (type == 412 && num10 == 0 && frameY == 0)
                            {
                                array[num3] = j;
                                array2[num3] = i;
                                num3++;
                            }
                            if (type == 237 && num10 == 18 && frameY == 0)
                            {
                                array[num3] = j;
                                array2[num3] = i;
                                num3++;
                            }
                            if (type == 72 && num10 >= 36)
                            {
                                int num87 = 0;
                                if (frameY == 18)
                                {
                                    num87 = 1;
                                }
                                else if (frameY == 36)
                                {
                                    num87 = 2;
                                }
                                Game1.spriteBatch.Draw(Game1.shroomCapTexture, 
                                    new Vector2((float)(j * 16 - (int)Game1.screenPosition.X - 22), 
                                    (float)(i * 16 - (int)Game1.screenPosition.Y - 26)) + zero, 
                                    new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(
                                        num87 * 62, 0, 60, 42)), Lighting.GetColor(j, i), 0f,
                                    default(Vector2), 1f, effects, 0f);
                            }
                            if (color.R >= 1 || color.G >= 1 || color.B >= 1)
                            {
                                Tile tile2 = Game1.tile[j + 1, i];
                                Tile tile3 = Game1.tile[j - 1, i];
                                Tile tile4 = Game1.tile[j, i - 1];
                                Tile tile5 = Game1.tile[j, i + 1];
                                if (tile2 == null)
                                {
                                    tile2 = new Tile();
                                    Game1.tile[j + 1, i] = tile2;
                                }
                                if (tile3 == null)
                                {
                                    tile3 = new Tile();
                                    Game1.tile[j - 1, i] = tile3;
                                }
                                if (tile4 == null)
                                {
                                    tile4 = new Tile();
                                    Game1.tile[j, i - 1] = tile4;
                                }
                                if (tile5 == null)
                                {
                                    tile5 = new Tile();
                                    Game1.tile[j, i + 1] = tile5;
                                }
                                if (solidOnly && flag && !tile.inActive() && !Game1.tileSolidTop[(int)type])
                                {
                                    bool flag6 = false;
                                    if (tile.halfBrick())
                                    {
                                        int num88 = 160;
                                        if (((int)tile3.liquid > num88 || (int)tile2.liquid > num88) && this.waterfallManager.CheckForWaterfall(j, i))
                                        {
                                            flag6 = true;
                                        }
                                    }
                                    if (!flag6)
                                    {
                                        int num89 = 0;
                                        bool flag7 = false;
                                        bool flag8 = false;
                                        bool flag9 = false;
                                        bool flag10 = false;
                                        int num90 = 0;
                                        bool flag11 = false;
                                        int num91 = (int)tile.slope();
                                        if (tile3.liquid > 0 && num91 != 1 && num91 != 3)
                                        {
                                            flag7 = true;
                                            switch (tile3.liquidType())
                                            {
                                                case 0:
                                                    flag11 = true;
                                                    break;
                                                case 1:
                                                    num90 = 1;
                                                    break;
                                                case 2:
                                                    num90 = 11;
                                                    break;
                                            }
                                            if ((int)tile3.liquid > num89)
                                            {
                                                num89 = (int)tile3.liquid;
                                            }
                                        }
                                        if (tile2.liquid > 0 && num91 != 2 && num91 != 4)
                                        {
                                            flag8 = true;
                                            switch (tile2.liquidType())
                                            {
                                                case 0:
                                                    flag11 = true;
                                                    break;
                                                case 1:
                                                    num90 = 1;
                                                    break;
                                                case 2:
                                                    num90 = 11;
                                                    break;
                                            }
                                            if ((int)tile2.liquid > num89)
                                            {
                                                num89 = (int)tile2.liquid;
                                            }
                                        }
                                        if (tile4.liquid > 0 && num91 != 3 && num91 != 4)
                                        {
                                            flag9 = true;
                                            switch (tile4.liquidType())
                                            {
                                                case 0:
                                                    flag11 = true;
                                                    break;
                                                case 1:
                                                    num90 = 1;
                                                    break;
                                                case 2:
                                                    num90 = 11;
                                                    break;
                                            }
                                        }
                                        if (tile5.liquid > 0 && num91 != 1 && num91 != 2)
                                        {
                                            if (tile5.liquid > 240)
                                            {
                                                flag10 = true;
                                            }
                                            switch (tile5.liquidType())
                                            {
                                                case 0:
                                                    flag11 = true;
                                                    break;
                                                case 1:
                                                    num90 = 1;
                                                    break;
                                                case 2:
                                                    num90 = 11;
                                                    break;
                                            }
                                        }
                                        if (waterStyleOverride != -1)
                                        {
                                            Game1.waterStyle = waterStyleOverride;
                                        }
                                        if (num90 == 0)
                                        {
                                            num90 = Game1.waterStyle;
                                        }
                                        if ((flag9 || flag10 || flag7 || flag8) && (!flag11 || num90 != 1))
                                        {
                                            Microsoft.Xna.Framework.Color color6 = Lighting.GetColor(j, i);
                                            Vector2 value2 = new Vector2((float)(j * 16), (float)(i * 16));
                                            Microsoft.Xna.Framework.Rectangle value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16);
                                            if (flag10 && (flag7 || flag8))
                                            {
                                                flag7 = true;
                                                flag8 = true;
                                            }
                                            if ((!flag9 || (!flag7 && !flag8)) && (!flag10 || !flag9))
                                            {
                                                if (flag9)
                                                {
                                                    value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 4);
                                                    if (tile.halfBrick() || tile.slope() != 0)
                                                    {
                                                        value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 12);
                                                    }
                                                }
                                                else if (flag10 && !flag7 && !flag8)
                                                {
                                                    value2 = new Vector2((float)(j * 16), (float)(i * 16 + 12));
                                                    value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 4);
                                                }
                                                else
                                                {
                                                    float num92 = (float)(256 - num89);
                                                    num92 /= 32f;
                                                    int y = 4;
                                                    if (tile4.liquid == 0 && !WorldGen.SolidTile(j, i - 1))
                                                    {
                                                        y = 0;
                                                    }
                                                    if ((flag7 && flag8) || tile.halfBrick() || tile.slope() != 0)
                                                    {
                                                        value2 = new Vector2((float)(j * 16), (float)(i * 16 + (int)num92 * 2));
                                                        value3 = new Microsoft.Xna.Framework.Rectangle(0, y, 16, 16 - (int)num92 * 2);
                                                    }
                                                    else if (flag7)
                                                    {
                                                        value2 = new Vector2((float)(j * 16), (float)(i * 16 + (int)num92 * 2));
                                                        value3 = new Microsoft.Xna.Framework.Rectangle(0, y, 4, 16 - (int)num92 * 2);
                                                    }
                                                    else
                                                    {
                                                        value2 = new Vector2((float)(j * 16 + 12), (float)(i * 16 + (int)num92 * 2));
                                                        value3 = new Microsoft.Xna.Framework.Rectangle(0, y, 4, 16 - (int)num92 * 2);
                                                    }
                                                }
                                            }
                                            float num93 = 0.5f;
                                            if (num90 == 1)
                                            {
                                                num93 = 1f;
                                            }
                                            else if (num90 == 11)
                                            {
                                                num93 *= 1.7f;
                                                if (num93 > 1f)
                                                {
                                                    num93 = 1f;
                                                }
                                            }
                                            if ((double)i < Game1.worldSurface || num93 > 1f)
                                            {
                                                num93 = 1f;
                                                if (tile4.wall > 0 || tile3.wall > 0 || tile2.wall > 0 || tile5.wall > 0)
                                                {
                                                    num93 = 0.65f;
                                                }
                                                if (tile.wall > 0)
                                                {
                                                    num93 = 0.5f;
                                                }
                                            }
                                            if (tile.halfBrick() && tile4.liquid > 0 && tile.wall > 0)
                                            {
                                                num93 = 0f;
                                            }
                                            float num94 = (float)color6.R * num93;
                                            float num95 = (float)color6.G * num93;
                                            float num96 = (float)color6.B * num93;
                                            float num97 = (float)color6.A * num93;

                                            color6 = new Microsoft.Xna.Framework.Color((int)((byte)num94), 
                                                (int)((byte)num95), (int)((byte)num96), (int)((byte)num97));

                                            Game1.spriteBatch.Draw(Game1.liquidTexture[num90], 
                                                value2 - Game1.screenPosition + zero, 
                                                new Microsoft.Xna.Framework.Rectangle?(value3), 
                                                color6, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                        }
                                    }
                                }
                                if (type == 314)
                                {
                                    if (tile.inActive())
                                    {
                                        color = tile.actColor(color);
                                    }
                                    else if (Game1.tileShine2[(int)type])
                                    {
                                        color = Game1.shine(color, (int)type);
                                    }
                                    int num98;
                                    int num99;
                                    Minecart.TrackColors(j, i, tile, out num98, out num99);
                                    Texture2D texture;
                                    if (Game1.canDrawColorTile(type, num98))
                                    {
                                        texture = Game1.tileAltTexture[(int)type, num98];
                                    }
                                    else
                                    {
                                        texture = Game1.tileTexture[(int)type];
                                    }
                                    Texture2D texture2;
                                    if (Game1.canDrawColorTile(type, num99))
                                    {
                                        texture2 = Game1.tileAltTexture[(int)type, num99];
                                    }
                                    else
                                    {
                                        texture2 = Game1.tileTexture[(int)type];
                                    }
                                    tile.frameNumber();
                                    if (frameY != -1)
                                    {
                                        Game1.spriteBatch.Draw(texture2, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X), (float)(i * 16 - (int)Game1.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect((int)frameY, Game1.tileFrame[314])), color, 0f, default(Vector2), 1f, effects, 0f);
                                    }
                                    Game1.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X), (float)(i * 16 - (int)Game1.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect((int)num10, Game1.tileFrame[314])), color, 0f, default(Vector2), 1f, effects, 0f);
                                    if (Minecart.DrawLeftDecoration((int)frameY))
                                    {
                                        Game1.spriteBatch.Draw(texture2, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X), (float)((i + 1) * 16 - (int)Game1.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect(36, 0)), color, 0f, default(Vector2), 1f, effects, 0f);
                                    }
                                    if (Minecart.DrawLeftDecoration((int)num10))
                                    {
                                        Game1.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X), (float)((i + 1) * 16 - (int)Game1.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect(36, 0)), color, 0f, default(Vector2), 1f, effects, 0f);
                                    }
                                    if (Minecart.DrawRightDecoration((int)frameY))
                                    {
                                        Game1.spriteBatch.Draw(texture2, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X), (float)((i + 1) * 16 - (int)Game1.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect(37, Game1.tileFrame[314])), color, 0f, default(Vector2), 1f, effects, 0f);
                                    }
                                    if (Minecart.DrawRightDecoration((int)num10))
                                    {
                                        Game1.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X), (float)((i + 1) * 16 - (int)Game1.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect(37, 0)), color, 0f, default(Vector2), 1f, effects, 0f);
                                    }
                                    if (Minecart.DrawBumper((int)num10))
                                    {
                                        Game1.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X), (float)((i - 1) * 16 - (int)Game1.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect(39, 0)), color, 0f, default(Vector2), 1f, effects, 0f);
                                    }
                                    else if (Minecart.DrawBouncyBumper((int)num10))
                                    {
                                        Game1.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X), (float)((i - 1) * 16 - (int)Game1.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(Minecart.GetSourceRect(38, 0)), color, 0f, default(Vector2), 1f, effects, 0f);
                                    }
                                }
                                else if (type == 51)
                                {
                                    Microsoft.Xna.Framework.Color color7 = Lighting.GetColor(j, i);
                                    float num100 = 0.5f;
                                    float num101 = (float)color7.R * num100;
                                    float num102 = (float)color7.G * num100;
                                    float num103 = (float)color7.B * num100;
                                    float num104 = (float)color7.A * num100;
                                    color7 = new Microsoft.Xna.Framework.Color((int)((byte)num101), (int)((byte)num102), (int)((byte)num103), (int)((byte)num104));
                                    if (Game1.canDrawColorTile(j, i))
                                    {
                                        Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), color7, 0f, default(Vector2), 1f, effects, 0f);
                                    }
                                    else
                                    {
                                        Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), color7, 0f, default(Vector2), 1f, effects, 0f);
                                    }
                                }
                                else if (type == 171)
                                {
                                    if (num7 > i - (int)frameY && frameY == 7)
                                    {
                                        num11 -= (int)(16 * frameY);
                                        num10 = Game1.tile[j, i - (int)frameY].frameX;
                                        frameY = Game1.tile[j, i - (int)frameY].frameY;
                                    }
                                    if (num10 >= 10)
                                    {
                                        int num105 = 0;
                                        if ((frameY & 1) == 1)
                                        {
                                            num105++;
                                        }
                                        if ((frameY & 2) == 2)
                                        {
                                            num105 += 2;
                                        }
                                        if ((frameY & 4) == 4)
                                        {
                                            num105 += 4;
                                        }
                                        int num106 = 0;
                                        if ((frameY & 8) == 8)
                                        {
                                            num106++;
                                        }
                                        if ((frameY & 16) == 16)
                                        {
                                            num106 += 2;
                                        }
                                        if ((frameY & 32) == 32)
                                        {
                                            num106 += 4;
                                        }
                                        int num107 = 0;
                                        if ((frameY & 64) == 64)
                                        {
                                            num107++;
                                        }
                                        if ((frameY & 128) == 128)
                                        {
                                            num107 += 2;
                                        }
                                        if ((frameY & 256) == 256)
                                        {
                                            num107 += 4;
                                        }
                                        if ((frameY & 512) == 512)
                                        {
                                            num107 += 8;
                                        }
                                        int num108 = 0;
                                        if ((frameY & 1024) == 1024)
                                        {
                                            num108++;
                                        }
                                        if ((frameY & 2048) == 2048)
                                        {
                                            num108 += 2;
                                        }
                                        if ((frameY & 4096) == 4096)
                                        {
                                            num108 += 4;
                                        }
                                        if ((frameY & 8192) == 8192)
                                        {
                                            num108 += 8;
                                        }
                                        Microsoft.Xna.Framework.Color color8 = Lighting.GetColor(j + 1, i + 4);
                                        Game1.spriteBatch.Draw(Game1.xmasTree[0], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 64, 128)), color8, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                        if (num105 > 0)
                                        {
                                            num105--;
                                            Microsoft.Xna.Framework.Color color9 = color8;
                                            if (num105 != 3)
                                            {
                                                color9 = new Microsoft.Xna.Framework.Color(255, 255, 255, 255);
                                            }
                                            Game1.spriteBatch.Draw(Game1.xmasTree[3], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(66 * num105, 0, 64, 128)), color9, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                        }
                                        if (num106 > 0)
                                        {
                                            num106--;
                                            Game1.spriteBatch.Draw(Game1.xmasTree[1], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(66 * num106, 0, 64, 128)), color8, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                        }
                                        if (num107 > 0)
                                        {
                                            num107--;
                                            Game1.spriteBatch.Draw(Game1.xmasTree[2], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(66 * num107, 0, 64, 128)), color8, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                        }
                                        if (num108 > 0)
                                        {
                                            num108--;
                                            Game1.spriteBatch.Draw(Game1.xmasTree[4], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(66 * num108, 130 * Game1.tileFrame[171], 64, 128)), new Microsoft.Xna.Framework.Color(255, 255, 255, 255), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                        }
                                    }
                                }
                                else if (type == 160 && !tile.halfBrick())
                                {
                                    Microsoft.Xna.Framework.Color color10 = default(Microsoft.Xna.Framework.Color);
                                    color10 = new Microsoft.Xna.Framework.Color(Game1.DiscoR, Game1.DiscoG, Game1.DiscoB, 255);
                                    if (tile.inActive())
                                    {
                                        color10 = tile.actColor(color10);
                                    }
                                    if (tile.slope() == 0)
                                    {
                                        Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), color10, 0f, default(Vector2), 1f, effects, 0f);
                                    }
                                    else if (tile.slope() > 2)
                                    {
                                        if (tile.slope() == 3)
                                        {
                                            for (int num109 = 0; num109 < 8; num109++)
                                            {
                                                int num110 = 2;
                                                int num111 = num109 * 2;
                                                int num112 = num109 * -2;
                                                int num113 = 16 - num109 * 2;
                                                if (Game1.canDrawColorTile(j, i))
                                                {
                                                    Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num111, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + num109 * num110 + num112)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num111, (int)(frameY + 16) - num113, num110, num113)), color10, 0f, default(Vector2), 1f, effects, 0f);
                                                }
                                                else
                                                {
                                                    Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num111, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + num109 * num110 + num112)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num111, (int)(frameY + 16) - num113, num110, num113)), color10, 0f, default(Vector2), 1f, effects, 0f);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            for (int num114 = 0; num114 < 8; num114++)
                                            {
                                                int num115 = 2;
                                                int num116 = 16 - num114 * num115 - num115;
                                                int num117 = 16 - num114 * num115;
                                                int num118 = num114 * -2;
                                                if (Game1.canDrawColorTile(j, i))
                                                {
                                                    Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num116, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + num114 * num115 + num118)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num116, (int)(frameY + 16) - num117, num115, num117)), color10, 0f, default(Vector2), 1f, effects, 0f);
                                                }
                                                else
                                                {
                                                    Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num116, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + num114 * num115 + num118)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num116, (int)(frameY + 16) - num117, num115, num117)), color10, 0f, default(Vector2), 1f, effects, 0f);
                                                }
                                            }
                                        }
                                        if (Game1.canDrawColorTile(j, i))
                                        {
                                            Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, 16, 2)), color10, 0f, default(Vector2), 1f, effects, 0f);
                                        }
                                        else
                                        {
                                            Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, 16, 2)), color10, 0f, default(Vector2), 1f, effects, 0f);
                                        }
                                    }
                                    else
                                    {
                                        if (tile.slope() == 1)
                                        {
                                            for (int num119 = 0; num119 < 8; num119++)
                                            {
                                                int num120 = 2;
                                                int num121 = num119 * 2;
                                                int height2 = 14 - num119 * num120;
                                                Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num121, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + num119 * num120)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num121, (int)frameY, num120, height2)), color10, 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                        }
                                        if (tile.slope() == 2)
                                        {
                                            for (int num122 = 0; num122 < 8; num122++)
                                            {
                                                int num123 = 2;
                                                int num124 = 16 - num122 * num123 - num123;
                                                int height3 = 14 - num122 * num123;
                                                Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num124, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + num122 * num123)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num124, (int)frameY, num123, height3)), color10, 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                        }
                                        Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + 14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY + 14), 16, 2)), color10, 0f, default(Vector2), 1f, effects, 0f);
                                    }
                                }
                                else if (tile.slope() > 0)
                                {
                                    if (tile.inActive())
                                    {
                                        color = tile.actColor(color);
                                    }
                                    else if (Game1.tileShine2[(int)type])
                                    {
                                        color = Game1.shine(color, (int)type);
                                    }
                                    if (tile.type == 19)
                                    {
                                        if (Game1.canDrawColorTile(j, i))
                                        {
                                            Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
                                        }
                                        else
                                        {
                                            Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
                                        }
                                        if (tile.slope() == 1 && Game1.tile[j + 1, i + 1].active() && Game1.tile[j + 1, i + 1].slope() != 2 && !Game1.tile[j + 1, i + 1].halfBrick() && !TileID.Sets.BlocksStairs[(int)Game1.tile[j + 1, i + 1].type] && !TileID.Sets.BlocksStairsAbove[(int)Game1.tile[j, i + 1].type])
                                        {
                                            if (Game1.tile[j + 1, i + 1].type == 19 && Game1.tile[j + 1, i + 1].slope() == 0)
                                            {
                                                if (Game1.canDrawColorTile(j, i))
                                                {
                                                    Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + 16)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(324, (int)frameY, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                }
                                                else
                                                {
                                                    Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + 16)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(324, (int)frameY, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                }
                                            }
                                            else if (Game1.canDrawColorTile(j, i))
                                            {
                                                Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + 16)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(198, (int)frameY, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                            else
                                            {
                                                Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + 16)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(198, (int)frameY, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                        }
                                        else if (tile.slope() == 2 && Game1.tile[j - 1, i + 1].active() && Game1.tile[j - 1, i + 1].slope() != 1 && !Game1.tile[j - 1, i + 1].halfBrick() && !TileID.Sets.BlocksStairs[(int)Game1.tile[j - 1, i + 1].type] && !TileID.Sets.BlocksStairsAbove[(int)Game1.tile[j, i + 1].type])
                                        {
                                            if (Game1.tile[j - 1, i + 1].type == 19 && Game1.tile[j - 1, i + 1].slope() == 0)
                                            {
                                                if (Game1.canDrawColorTile(j, i))
                                                {
                                                    Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + 16)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(306, (int)frameY, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                }
                                                else
                                                {
                                                    Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + 16)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(306, (int)frameY, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                }
                                            }
                                            else if (Game1.canDrawColorTile(j, i))
                                            {
                                                Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + 16)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(162, (int)frameY, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                            else
                                            {
                                                Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + 16)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(162, (int)frameY, 16, 16)), color, 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                        }
                                    }
                                    else if (tile.slope() > 2)
                                    {
                                        if (tile.slope() == 3)
                                        {
                                            for (int num125 = 0; num125 < 8; num125++)
                                            {
                                                int num126 = 2;
                                                int num127 = num125 * 2;
                                                int num128 = num125 * -2;
                                                int num129 = 16 - num125 * 2;
                                                if (Game1.canDrawColorTile(j, i))
                                                {
                                                    Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num127, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + num125 * num126 + num128)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num127 + num16, (int)(frameY + 16) - num129 + num15, num126, num129)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                }
                                                else
                                                {
                                                    Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num127, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + num125 * num126 + num128)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num127 + num16, (int)(frameY + 16) - num129 + num15, num126, num129)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            for (int num130 = 0; num130 < 8; num130++)
                                            {
                                                int num131 = 2;
                                                int num132 = 16 - num130 * num131 - num131;
                                                int num133 = 16 - num130 * num131;
                                                int num134 = num130 * -2;
                                                if (Game1.canDrawColorTile(j, i))
                                                {
                                                    Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num132, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + num130 * num131 + num134)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num132 + num16, (int)(frameY + 16) - num133 + num15, num131, num133)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                }
                                                else
                                                {
                                                    Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num132, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + num130 * num131 + num134)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num132 + num16, (int)(frameY + 16) - num133 + num15, num131, num133)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                }
                                            }
                                        }
                                        if (Game1.canDrawColorTile(j, i))
                                        {
                                            Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num16, (int)frameY + num15, 16, 2)), color, 0f, default(Vector2), 1f, effects, 0f);
                                        }
                                        else
                                        {
                                            Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num16, (int)frameY + num15, 16, 2)), color, 0f, default(Vector2), 1f, effects, 0f);
                                        }
                                    }
                                    else
                                    {
                                        if (tile.slope() == 1)
                                        {
                                            for (int num135 = 0; num135 < 8; num135++)
                                            {
                                                int num136 = 2;
                                                int num137 = num135 * 2;
                                                int height4 = 14 - num135 * num136;
                                                if (Game1.canDrawColorTile(j, i))
                                                {
                                                    Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num137, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + num135 * num136)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num137 + num16, (int)frameY + num15, num136, height4)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                }
                                                else
                                                {
                                                    Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num137, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + num135 * num136)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num137 + num16, (int)frameY + num15, num136, height4)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                }
                                            }
                                        }
                                        if (tile.slope() == 2)
                                        {
                                            for (int num138 = 0; num138 < 8; num138++)
                                            {
                                                int num139 = 2;
                                                int num140 = 16 - num138 * num139 - num139;
                                                int height5 = 14 - num138 * num139;
                                                if (Game1.canDrawColorTile(j, i))
                                                {
                                                    Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num140, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + num138 * num139)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num140 + num16, (int)frameY + num15, num139, height5)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                }
                                                else
                                                {
                                                    Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num140, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + num138 * num139)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num140 + num16, (int)frameY + num15, num139, height5)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                }
                                            }
                                        }
                                        if (Game1.canDrawColorTile(j, i))
                                        {
                                            Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + 14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num16, (int)(frameY + 14) + num15, 16, 2)), color, 0f, default(Vector2), 1f, effects, 0f);
                                        }
                                        else
                                        {
                                            Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + 14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num16, (int)(frameY + 14) + num15, 16, 2)), color, 0f, default(Vector2), 1f, effects, 0f);
                                        }
                                    }
                                }
                                else if (type == 129)
                                {
                                    Vector2 value4 = new Vector2(0f, 0f);
                                    if (frameY < 36)
                                    {
                                        value4.Y += (float)(2 * (frameY == 0).ToDirectionInt());
                                    }
                                    else
                                    {
                                        value4.X += (float)(2 * (frameY == 36).ToDirectionInt());
                                    }
                                    Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero + value4, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(255, 255, 255, 100), 0f, default(Vector2), 1f, effects, 0f);
                                }
                                else if (Game1.tileAlch[(int)type])
                                {
                                    num12 = 20;
                                    num11 = 0;
                                    int num141 = (int)type;
                                    int num142 = (int)(num10 / 18);
                                    if (num141 > 82)
                                    {
                                        if (num142 == 0 && Game1.dayTime)
                                        {
                                            num141 = 84;
                                        }
                                        if (num142 == 1 && !Game1.dayTime)
                                        {
                                            num141 = 84;
                                        }
                                        if (num142 == 3 && !Game1.dayTime && (Game1.bloodMoon || Game1.moonPhase == 0))
                                        {
                                            num141 = 84;
                                        }
                                        if (num142 == 4 && (Game1.raining || Game1.cloudAlpha > 0f))
                                        {
                                            num141 = 84;
                                        }
                                        if (num142 == 5 && !Game1.raining && Game1.time > 40500.0)
                                        {
                                            num141 = 84;
                                        }
                                    }
                                    if (num141 == 84)
                                    {
                                        if (num142 == 0 && Game1.rand.Next(100) == 0)
                                        {
                                            int num143 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16 - 4)), 16, 16, 19, 0f, 0f, 160, default(Microsoft.Xna.Framework.Color), 0.1f);
                                            Dust expr_69E3_cp_0 = Game1.dust[num143];
                                            expr_69E3_cp_0.velocity.X = expr_69E3_cp_0.velocity.X / 2f;
                                            Dust expr_6A01_cp_0 = Game1.dust[num143];
                                            expr_6A01_cp_0.velocity.Y = expr_6A01_cp_0.velocity.Y / 2f;
                                            Game1.dust[num143].noGravity = true;
                                            Game1.dust[num143].fadeIn = 1f;
                                        }
                                        if (num142 == 1 && Game1.rand.Next(100) == 0)
                                        {
                                            Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 41, 0f, 0f, 250, default(Microsoft.Xna.Framework.Color), 0.8f);
                                        }
                                        if (num142 == 3)
                                        {
                                            if (Game1.rand.Next(200) == 0)
                                            {
                                                int num144 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 14, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 0.2f);
                                                Game1.dust[num144].fadeIn = 1.2f;
                                            }
                                            if (Game1.rand.Next(75) == 0)
                                            {
                                                int num145 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 27, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f);
                                                Dust expr_6B44_cp_0 = Game1.dust[num145];
                                                expr_6B44_cp_0.velocity.X = expr_6B44_cp_0.velocity.X / 2f;
                                                Dust expr_6B62_cp_0 = Game1.dust[num145];
                                                expr_6B62_cp_0.velocity.Y = expr_6B62_cp_0.velocity.Y / 2f;
                                            }
                                        }
                                        if (num142 == 4 && Game1.rand.Next(150) == 0)
                                        {
                                            int num146 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 8, 16, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
                                            Dust expr_6BD7_cp_0 = Game1.dust[num146];
                                            expr_6BD7_cp_0.velocity.X = expr_6BD7_cp_0.velocity.X / 3f;
                                            Dust expr_6BF5_cp_0 = Game1.dust[num146];
                                            expr_6BF5_cp_0.velocity.Y = expr_6BF5_cp_0.velocity.Y / 3f;
                                            Dust expr_6C13_cp_0 = Game1.dust[num146];
                                            expr_6C13_cp_0.velocity.Y = expr_6C13_cp_0.velocity.Y - 0.7f;
                                            Game1.dust[num146].alpha = 50;
                                            Game1.dust[num146].scale *= 0.1f;
                                            Game1.dust[num146].fadeIn = 0.9f;
                                            Game1.dust[num146].noGravity = true;
                                        }
                                        if (num142 == 5)
                                        {
                                            if (Game1.rand.Next(40) == 0)
                                            {
                                                int num147 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16 - 6)), 16, 16, 6, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1.5f);
                                                Dust expr_6CCC_cp_0 = Game1.dust[num147];
                                                expr_6CCC_cp_0.velocity.Y = expr_6CCC_cp_0.velocity.Y - 2f;
                                                Game1.dust[num147].noGravity = true;
                                            }
                                            color.A = (byte)(Game1.mouseTextColor / 2);
                                            color.G = Game1.mouseTextColor;
                                            color.B = Game1.mouseTextColor;
                                        }
                                        if (num142 == 6)
                                        {
                                            if (Game1.rand.Next(30) == 0)
                                            {
                                                Microsoft.Xna.Framework.Color newColor = new Microsoft.Xna.Framework.Color(50, 255, 255, 255);
                                                int num148 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 43, 0f, 0f, 254, newColor, 0.5f);
                                                Game1.dust[num148].velocity *= 0f;
                                            }
                                            byte b4 = (byte)((Game1.mouseTextColor + color.G * 2) / 3);
                                            byte b5 = (byte)((Game1.mouseTextColor + color.B * 2) / 3);
                                            if (b4 > color.G)
                                            {
                                                color.G = b4;
                                            }
                                            if (b5 > color.B)
                                            {
                                                color.B = b5;
                                            }
                                        }
                                    }
                                    if (Game1.canDrawColorTile(j, i))
                                    {
                                        Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                    }
                                    else
                                    {
                                        this.LoadTiles(num141);
                                        Game1.spriteBatch.Draw(Game1.tileTexture[num141], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                    }
                                }
                                else if (type == 80)
                                {
                                    bool flag12 = false;
                                    bool flag13 = false;
                                    bool flag14 = false;
                                    if (!Game1.canDrawColorTile(j, i))
                                    {
                                        int num149 = j;
                                        if (num10 == 36)
                                        {
                                            num149--;
                                        }
                                        if (num10 == 54)
                                        {
                                            num149++;
                                        }
                                        if (num10 == 108)
                                        {
                                            if (frameY == 18)
                                            {
                                                num149--;
                                            }
                                            else
                                            {
                                                num149++;
                                            }
                                        }
                                        int num150 = i;
                                        bool flag15 = false;
                                        if (Game1.tile[num149, num150].type == 80 && Game1.tile[num149, num150].active())
                                        {
                                            flag15 = true;
                                        }
                                        while (!Game1.tile[num149, num150].active() || !Game1.tileSolid[(int)Game1.tile[num149, num150].type] || !flag15)
                                        {
                                            if (Game1.tile[num149, num150].type == 80 && Game1.tile[num149, num150].active())
                                            {
                                                flag15 = true;
                                            }
                                            num150++;
                                            if (num150 > i + 20)
                                            {
                                                break;
                                            }
                                        }
                                        if (Game1.tile[num149, num150].type == 112)
                                        {
                                            flag12 = true;
                                        }
                                        if (Game1.tile[num149, num150].type == 116)
                                        {
                                            flag13 = true;
                                        }
                                        if (Game1.tile[num149, num150].type == 234)
                                        {
                                            flag14 = true;
                                        }
                                    }
                                    if (flag12)
                                    {
                                        Game1.spriteBatch.Draw(Game1.evilCactusTexture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                    }
                                    else if (flag14)
                                    {
                                        Game1.spriteBatch.Draw(Game1.crimsonCactusTexture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                    }
                                    else if (flag13)
                                    {
                                        Game1.spriteBatch.Draw(Game1.goodCactusTexture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                    }
                                    else if (Game1.canDrawColorTile(j, i))
                                    {
                                        Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                    }
                                    else
                                    {
                                        Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                    }
                                }
                                else if (type == 272 && !tile.halfBrick() && !Game1.tile[j - 1, i].halfBrick() && !Game1.tile[j + 1, i].halfBrick())
                                {
                                    int num151 = Game1.tileFrame[(int)type];
                                    num151 += j % 2;
                                    num151 += i % 2;
                                    num151 += j % 3;
                                    for (num151 += i % 3; num151 > 1; num151 -= 2)
                                    {
                                    }
                                    num151 *= 90;
                                    if (tile.inActive())
                                    {
                                        color = tile.actColor(color);
                                    }
                                    else if (Game1.tileShine2[(int)type])
                                    {
                                        color = Game1.shine(color, (int)type);
                                    }
                                    if (Game1.canDrawColorTile(j, i))
                                    {
                                        Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY + num151, num9, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                    }
                                    else
                                    {
                                        Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY + num151, num9, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                    }
                                }
                                else
                                {
                                    if (type == 160)
                                    {
                                        color = new Microsoft.Xna.Framework.Color(Game1.DiscoR, Game1.DiscoG, Game1.DiscoB, 255);
                                    }
                                    if (type != 19 && type != 380 && Game1.tileSolid[(int)type] && !TileID.Sets.NotReallySolid[(int)type] && !tile.halfBrick() && (Game1.tile[j - 1, i].halfBrick() || Game1.tile[j + 1, i].halfBrick()))
                                    {
                                        if (tile.inActive())
                                        {
                                            color = tile.actColor(color);
                                        }
                                        else if (Game1.tileShine2[(int)type])
                                        {
                                            color = Game1.shine(color, (int)type);
                                        }
                                        if (Game1.tile[j - 1, i].halfBrick() && Game1.tile[j + 1, i].halfBrick())
                                        {
                                            if (Game1.canDrawColorTile(j, i))
                                            {
                                                Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY + 8), num9, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(126, 0, 16, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                            else
                                            {
                                                Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY + 8), num9, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                if (!Game1.tile[j, i - 1].bottomSlope() && Game1.tile[j, i - 1].type == type)
                                                {
                                                    Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(90, 0, 16, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                }
                                                else
                                                {
                                                    Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(126, 0, 16, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                }
                                            }
                                        }
                                        else if (Game1.tile[j - 1, i].halfBrick())
                                        {
                                            if (Game1.canDrawColorTile(j, i))
                                            {
                                                Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY + 8), num9, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + 4f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)(num10 + 4), (int)frameY, num9 - 4, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(126, 0, 4, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                            else
                                            {
                                                Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY + 8), num9, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + 4f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)(num10 + 4), (int)frameY, num9 - 4, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(126, 0, 4, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                        }
                                        else if (Game1.tile[j + 1, i].halfBrick())
                                        {
                                            if (Game1.canDrawColorTile(j, i))
                                            {
                                                Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY + 8), num9, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9 - 4, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + 12f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(138, 0, 4, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                            else
                                            {
                                                Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)(frameY + 8), num9, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9 - 4, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + 12f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(138, 0, 4, 8)), color, 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                        }
                                        else if (Game1.canDrawColorTile(j, i))
                                        {
                                            Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                        }
                                        else
                                        {
                                            Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                        }
                                    }
                                    else if (Lighting.lightMode < 2 && Game1.tileSolid[(int)type] && type != 137 && type != 235 && type != 388 && !tile.halfBrick() && !tile.inActive())
                                    {
                                        if ((int)color.R > num || (double)color.G > (double)num * 1.1 || (double)color.B > (double)num * 1.2)
                                        {
                                            Lighting.GetColor9Slice(j, i, ref array3);
                                            bool flag16 = tile.inActive();
                                            bool flag17 = Game1.tileShine2[(int)type];
                                            Texture2D texture;
                                            if (Game1.canDrawColorTile(j, i))
                                            {
                                                texture = Game1.tileAltTexture[(int)type, (int)tile.color()];
                                            }
                                            else
                                            {
                                                texture = Game1.tileTexture[(int)type];
                                            }
                                            for (int num152 = 0; num152 < 9; num152++)
                                            {
                                                int num153 = 0;
                                                int num154 = 0;
                                                int width = 4;
                                                int height6 = 4;
                                                switch (num152)
                                                {
                                                    case 1:
                                                        width = 8;
                                                        num153 = 4;
                                                        break;
                                                    case 2:
                                                        num153 = 12;
                                                        break;
                                                    case 3:
                                                        height6 = 8;
                                                        num154 = 4;
                                                        break;
                                                    case 4:
                                                        width = 8;
                                                        height6 = 8;
                                                        num153 = 4;
                                                        num154 = 4;
                                                        break;
                                                    case 5:
                                                        num153 = 12;
                                                        num154 = 4;
                                                        height6 = 8;
                                                        break;
                                                    case 6:
                                                        num154 = 12;
                                                        break;
                                                    case 7:
                                                        width = 8;
                                                        height6 = 4;
                                                        num153 = 4;
                                                        num154 = 12;
                                                        break;
                                                    case 8:
                                                        num153 = 12;
                                                        num154 = 12;
                                                        break;
                                                }
                                                Microsoft.Xna.Framework.Color color11 = color;
                                                Microsoft.Xna.Framework.Color color12 = array3[num152];
                                                color11.R = (byte)((color.R + color12.R) / 2);
                                                color11.G = (byte)((color.G + color12.G) / 2);
                                                color11.B = (byte)((color.B + color12.B) / 2);
                                                if (flag16)
                                                {
                                                    color11 = tile.actColor(color11);
                                                }
                                                else if (flag17)
                                                {
                                                    color11 = Game1.shine(color11, (int)type);
                                                }
                                                Game1.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num153, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + num154)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num153 + num16, (int)frameY + num154 + num15, width, height6)), color11, 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                        }
                                        else if ((int)color.R > num2 || (double)color.G > (double)num2 * 1.1 || (double)color.B > (double)num2 * 1.2)
                                        {
                                            Lighting.GetColor4Slice(j, i, ref array3);
                                            bool flag18 = tile.inActive();
                                            bool flag19 = Game1.tileShine2[(int)type];
                                            Texture2D texture;
                                            if (Game1.canDrawColorTile(j, i))
                                            {
                                                texture = Game1.tileAltTexture[(int)type, (int)tile.color()];
                                            }
                                            else
                                            {
                                                texture = Game1.tileTexture[(int)type];
                                            }
                                            for (int num155 = 0; num155 < 4; num155++)
                                            {
                                                int num156 = 0;
                                                int num157 = 0;
                                                switch (num155)
                                                {
                                                    case 1:
                                                        num156 = 8;
                                                        break;
                                                    case 2:
                                                        num157 = 8;
                                                        break;
                                                    case 3:
                                                        num156 = 8;
                                                        num157 = 8;
                                                        break;
                                                }
                                                Microsoft.Xna.Framework.Color color13 = color;
                                                Microsoft.Xna.Framework.Color color14 = array3[num155];
                                                color13.R = (byte)((color.R + color14.R) / 2);
                                                color13.G = (byte)((color.G + color14.G) / 2);
                                                color13.B = (byte)((color.B + color14.B) / 2);
                                                if (flag18)
                                                {
                                                    color13 = tile.actColor(color13);
                                                }
                                                else if (flag19)
                                                {
                                                    color13 = Game1.shine(color13, (int)type);
                                                }
                                                Game1.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num156, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + num157)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num156 + num16, (int)frameY + num157 + num15, 8, 8)), color13, 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                        }
                                        else
                                        {
                                            if (tile.inActive())
                                            {
                                                color = tile.actColor(color);
                                            }
                                            else if (Game1.tileShine2[(int)type])
                                            {
                                                color = Game1.shine(color, (int)type);
                                            }
                                            Texture2D texture;
                                            if (Game1.canDrawColorTile(j, i))
                                            {
                                                texture = Game1.tileAltTexture[(int)type, (int)tile.color()];
                                            }
                                            else
                                            {
                                                texture = Game1.tileTexture[(int)type];
                                            }
                                            Game1.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num16, (int)frameY + num15, num9, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                        }
                                    }
                                    else
                                    {
                                        if (Lighting.lightMode < 2 && Game1.tileShine2[(int)type])
                                        {
                                            if (type == 21)
                                            {
                                                if (num10 >= 36 && num10 < 178)
                                                {
                                                    color = Game1.shine(color, (int)type);
                                                }
                                            }
                                            else if (!tile.inActive())
                                            {
                                                color = Game1.shine(color, (int)type);
                                            }
                                        }
                                        if (tile.inActive())
                                        {
                                            color = tile.actColor(color);
                                        }
                                        if (type == 128 || type == 269)
                                        {
                                            int num158;
                                            for (num158 = (int)num10; num158 >= 100; num158 -= 100)
                                            {
                                            }
                                            Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num158, (int)frameY, num9, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                        }
                                        else if (type == 334)
                                        {
                                            int num159 = (int)num10;
                                            int num160 = 0;
                                            while (num159 >= 5000)
                                            {
                                                num159 -= 5000;
                                                num160++;
                                            }
                                            if (num160 != 0)
                                            {
                                                num159 = (num160 - 1) * 18;
                                            }
                                            Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num159, (int)frameY, num9, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                        }
                                        else if (type == 5)
                                        {
                                            int num161 = j;
                                            int num162 = i;
                                            if (num10 == 66 && frameY <= 45)
                                            {
                                                num161++;
                                            }
                                            if (num10 == 88 && frameY >= 66 && frameY <= 110)
                                            {
                                                num161--;
                                            }
                                            if (num10 == 22 && frameY >= 132)
                                            {
                                                num161--;
                                            }
                                            if (num10 == 44 && frameY >= 132)
                                            {
                                                num161++;
                                            }
                                            while (Game1.tile[num161, num162].active() && Game1.tile[num161, num162].type == 5)
                                            {
                                                num162++;
                                            }
                                            int treeVariant = Game1.GetTreeVariant(num161, num162);
                                            if (treeVariant == -1)
                                            {
                                                if (Game1.canDrawColorTile(j, i))
                                                {
                                                    Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                }
                                                else
                                                {
                                                    Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                }
                                            }
                                            else if (Game1.canDrawColorTree(j, i, treeVariant))
                                            {
                                                Game1.spriteBatch.Draw(Game1.woodAltTexture[treeVariant, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                            else
                                            {
                                                Game1.spriteBatch.Draw(Game1.woodTexture[treeVariant], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                        }
                                        else if (type == 323)
                                        {
                                            int num163 = -1;
                                            int num164 = j;
                                            int num165 = i;
                                            while (Game1.tile[num164, num165].active() && Game1.tile[num164, num165].type == 323)
                                            {
                                                num165++;
                                            }
                                            if (Game1.tile[num164, num165].active() && Game1.tile[num164, num165].type == 53)
                                            {
                                                num163 = 0;
                                            }
                                            if (Game1.tile[num164, num165].active() && Game1.tile[num164, num165].type == 234)
                                            {
                                                num163 = 1;
                                            }
                                            if (Game1.tile[num164, num165].active() && Game1.tile[num164, num165].type == 116)
                                            {
                                                num163 = 2;
                                            }
                                            if (Game1.tile[num164, num165].active() && Game1.tile[num164, num165].type == 112)
                                            {
                                                num163 = 3;
                                            }
                                            int y2 = 22 * num163;
                                            int num166 = (int)frameY;
                                            if (Game1.canDrawColorTile(j, i))
                                            {
                                                Game1.spriteBatch.Draw(Game1.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num166, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, y2, num9, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                            else
                                            {
                                                Game1.spriteBatch.Draw(Game1.tileTexture[(int)type], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num166, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, y2, num9, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                        }
                                        else
                                        {
                                            if (num14 == 8 && (!Game1.tile[j, i + 1].active() || !Game1.tileSolid[(int)Game1.tile[j, i + 1].type] || Game1.tile[j, i + 1].halfBrick()))
                                            {
                                                Texture2D texture;
                                                if (Game1.canDrawColorTile(j, i))
                                                {
                                                    texture = Game1.tileAltTexture[(int)type, (int)tile.color()];
                                                }
                                                else
                                                {
                                                    texture = Game1.tileTexture[(int)type];
                                                }
                                                if (type == 19)
                                                {
                                                    Game1.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + num14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                }
                                                else
                                                {
                                                    Game1.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + num14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12 - num14 - 4)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                    Game1.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(144, 66, num9, 4)), color, 0f, default(Vector2), 1f, effects, 0f);
                                                }
                                            }
                                            else
                                            {
                                                Texture2D texture;
                                                if (Game1.canDrawColorTile(j, i))
                                                {
                                                    texture = Game1.tileAltTexture[(int)type, (int)tile.color()];
                                                }
                                                else
                                                {
                                                    texture = Game1.tileTexture[(int)type];
                                                }
                                                Game1.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + num14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num16, (int)frameY + num15, num9, num12 - num14)), color, 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                            if (type == 27)
                                            {
                                                int num167 = 14;
                                                Game1.spriteBatch.Draw(Game1.FlameTexture[num167], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY + num15, num9, num12)), new Microsoft.Xna.Framework.Color(255, 255, 255, 255), 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                            if (type == 215 && frameY < 36)
                                            {
                                                int num168 = 15;
                                                Microsoft.Xna.Framework.Color color15 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
                                                if (num10 / 54 == 5)
                                                {
                                                    color15 = new Microsoft.Xna.Framework.Color((float)Game1.DiscoR / 255f, (float)Game1.DiscoG / 255f, (float)Game1.DiscoB / 255f, 0f);
                                                }
                                                Game1.spriteBatch.Draw(Game1.FlameTexture[num168], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY + num15, num9, num12)), color15, 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                            if (type == 286)
                                            {
                                                Game1.spriteBatch.Draw(Game1.glowSnailTexture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num16, (int)frameY + num15, num9, num12)), new Microsoft.Xna.Framework.Color(75, 100, 255, 0), 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                            if (type == 270)
                                            {
                                                Game1.spriteBatch.Draw(Game1.fireflyJarTexture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num16, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                            if (type == 271)
                                            {
                                                Game1.spriteBatch.Draw(Game1.lightningbugJarTexture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num16, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                            if (type == 316 || type == 317 || type == 318)
                                            {
                                                int num169 = j - (int)(num10 / 18);
                                                int num170 = i - (int)(frameY / 18);
                                                int num171 = num169 / 2 * (num170 / 3);
                                                num171 %= Game1.cageFrames;
                                                Game1.spriteBatch.Draw(Game1.jellyfishBowlTexture[(int)(type - 316)], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num16, (int)frameY + Game1.jellyfishCageFrame[(int)(type - 316), num171] * 36, num9, num12)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                            if (type == 149 && num10 < 54)
                                            {
                                                Game1.spriteBatch.Draw(Game1.xmasLightTexture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                            if (type == 300 || type == 302 || type == 303 || type == 306)
                                            {
                                                int num172 = 9;
                                                if (type == 302)
                                                {
                                                    num172 = 10;
                                                }
                                                if (type == 303)
                                                {
                                                    num172 = 11;
                                                }
                                                if (type == 306)
                                                {
                                                    num172 = 12;
                                                }
                                                Game1.spriteBatch.Draw(Game1.FlameTexture[num172], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY + num15, num9, num12)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                            else if (Game1.tileFlame[(int)type])
                                            {
                                                ulong num173 = Game1._tileFrameSeed ^ (ulong)((long)j << 32 | (long)((ulong)i));
                                                int num174 = (int)type;
                                                int num175 = 0;
                                                if (num174 == 4)
                                                {
                                                    num175 = 0;
                                                }
                                                else if (num174 == 33 || num174 == 174)
                                                {
                                                    num175 = 1;
                                                }
                                                else if (num174 == 100 || num174 == 173)
                                                {
                                                    num175 = 2;
                                                }
                                                else if (num174 == 34)
                                                {
                                                    num175 = 3;
                                                }
                                                else if (num174 == 93)
                                                {
                                                    num175 = 4;
                                                }
                                                else if (num174 == 49)
                                                {
                                                    num175 = 5;
                                                }
                                                else if (num174 == 372)
                                                {
                                                    num175 = 16;
                                                }
                                                else if (num174 == 98)
                                                {
                                                    num175 = 6;
                                                }
                                                else if (num174 == 35)
                                                {
                                                    num175 = 7;
                                                }
                                                else if (num174 == 42)
                                                {
                                                    num175 = 13;
                                                }
                                                if (num175 == 7)
                                                {
                                                    for (int num176 = 0; num176 < 4; num176++)
                                                    {
                                                        float num177 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.15f;
                                                        float num178 = (float)Utils.RandomInt(ref num173, -10, 10) * 0.15f;
                                                        num177 = 0f;
                                                        num178 = 0f;
                                                        Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num177, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num178) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                    }
                                                }
                                                else if (num175 == 1)
                                                {
                                                    int num179 = (int)(Game1.tile[j, i].frameY / 22);
                                                    if (num179 == 5 || num179 == 6 || num179 == 7 || num179 == 10)
                                                    {
                                                        for (int num180 = 0; num180 < 7; num180++)
                                                        {
                                                            float num181 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.075f;
                                                            float num182 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.075f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num181, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num182) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num179 == 8)
                                                    {
                                                        for (int num183 = 0; num183 < 7; num183++)
                                                        {
                                                            float num184 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.3f;
                                                            float num185 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.3f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num184, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num185) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num179 == 12)
                                                    {
                                                        for (int num186 = 0; num186 < 7; num186++)
                                                        {
                                                            float num187 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.1f;
                                                            float num188 = (float)Utils.RandomInt(ref num173, -10, 1) * 0.15f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num187, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num188) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num179 == 14)
                                                    {
                                                        for (int num189 = 0; num189 < 8; num189++)
                                                        {
                                                            float num190 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.1f;
                                                            float num191 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.1f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num190, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num191) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num179 == 16)
                                                    {
                                                        for (int num192 = 0; num192 < 4; num192++)
                                                        {
                                                            float num193 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.15f;
                                                            float num194 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.15f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num193, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num194) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num179 == 27 || num179 == 28)
                                                    {
                                                        Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                    }
                                                    else
                                                    {
                                                        for (int num195 = 0; num195 < 7; num195++)
                                                        {
                                                            float num196 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.15f;
                                                            float num197 = (float)Utils.RandomInt(ref num173, -10, 1) * 0.35f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num196, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num197) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                }
                                                else if (num175 == 2)
                                                {
                                                    int num198 = (int)(Game1.tile[j, i].frameY / 36);
                                                    if (num198 == 3)
                                                    {
                                                        for (int num199 = 0; num199 < 3; num199++)
                                                        {
                                                            float num200 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.05f;
                                                            float num201 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.15f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num200, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num201) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num198 == 6)
                                                    {
                                                        for (int num202 = 0; num202 < 5; num202++)
                                                        {
                                                            float num203 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.15f;
                                                            float num204 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.15f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num203, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num204) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num198 == 9)
                                                    {
                                                        for (int num205 = 0; num205 < 7; num205++)
                                                        {
                                                            float num206 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.3f;
                                                            float num207 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.3f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num206, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num207) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num198 == 11)
                                                    {
                                                        for (int num208 = 0; num208 < 7; num208++)
                                                        {
                                                            float num209 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.1f;
                                                            float num210 = (float)Utils.RandomInt(ref num173, -10, 1) * 0.15f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num209, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num210) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num198 == 13)
                                                    {
                                                        for (int num211 = 0; num211 < 8; num211++)
                                                        {
                                                            float num212 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.1f;
                                                            float num213 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.1f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num212, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num213) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num198 == 28 || num198 == 29)
                                                    {
                                                        Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                    }
                                                    else
                                                    {
                                                        for (int num214 = 0; num214 < 7; num214++)
                                                        {
                                                            float num215 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.15f;
                                                            float num216 = (float)Utils.RandomInt(ref num173, -10, 1) * 0.35f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num215, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num216) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                }
                                                else if (num175 == 3)
                                                {
                                                    int num217 = (int)(Game1.tile[j, i].frameY / 54);
                                                    if (num217 == 8)
                                                    {
                                                        for (int num218 = 0; num218 < 7; num218++)
                                                        {
                                                            float num219 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.075f;
                                                            float num220 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.075f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num219, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num220) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num217 == 9)
                                                    {
                                                        for (int num221 = 0; num221 < 3; num221++)
                                                        {
                                                            float num222 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.05f;
                                                            float num223 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.15f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num222, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num223) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num217 == 11)
                                                    {
                                                        for (int num224 = 0; num224 < 7; num224++)
                                                        {
                                                            float num225 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.3f;
                                                            float num226 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.3f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num225, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num226) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num217 == 15)
                                                    {
                                                        for (int num227 = 0; num227 < 7; num227++)
                                                        {
                                                            float num228 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.1f;
                                                            float num229 = (float)Utils.RandomInt(ref num173, -10, 1) * 0.15f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num228, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num229) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num217 == 17 || num217 == 20)
                                                    {
                                                        for (int num230 = 0; num230 < 7; num230++)
                                                        {
                                                            float num231 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.075f;
                                                            float num232 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.075f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num231, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num232) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num217 == 18)
                                                    {
                                                        for (int num233 = 0; num233 < 8; num233++)
                                                        {
                                                            float num234 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.1f;
                                                            float num235 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.1f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num234, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num235) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num217 == 34 || num217 == 35)
                                                    {
                                                        Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                    }
                                                    else
                                                    {
                                                        for (int num236 = 0; num236 < 7; num236++)
                                                        {
                                                            float num237 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.15f;
                                                            float num238 = (float)Utils.RandomInt(ref num173, -10, 1) * 0.35f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num237, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num238) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                }
                                                else if (num175 == 4)
                                                {
                                                    int num239 = (int)(Game1.tile[j, i].frameY / 54);
                                                    if (num239 == 1)
                                                    {
                                                        for (int num240 = 0; num240 < 3; num240++)
                                                        {
                                                            float num241 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.15f;
                                                            float num242 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.15f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num241, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num242) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num239 == 2 || num239 == 4)
                                                    {
                                                        for (int num243 = 0; num243 < 7; num243++)
                                                        {
                                                            float num244 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.075f;
                                                            float num245 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.075f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num244, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num245) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num239 == 3)
                                                    {
                                                        for (int num246 = 0; num246 < 7; num246++)
                                                        {
                                                            float num247 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.2f;
                                                            float num248 = (float)Utils.RandomInt(ref num173, -20, 1) * 0.35f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num247, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num248) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num239 == 5)
                                                    {
                                                        for (int num249 = 0; num249 < 7; num249++)
                                                        {
                                                            float num250 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.3f;
                                                            float num251 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.3f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num250, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num251) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num239 == 9)
                                                    {
                                                        for (int num252 = 0; num252 < 7; num252++)
                                                        {
                                                            float num253 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.1f;
                                                            float num254 = (float)Utils.RandomInt(ref num173, -10, 1) * 0.15f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num253, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num254) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num239 == 13)
                                                    {
                                                        for (int num255 = 0; num255 < 8; num255++)
                                                        {
                                                            float num256 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.1f;
                                                            float num257 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.1f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num256, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num257) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num239 == 12)
                                                    {
                                                        float num258 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.01f;
                                                        float num259 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.01f;
                                                        Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num258, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num259) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(Utils.RandomInt(ref num173, 90, 111), Utils.RandomInt(ref num173, 90, 111), Utils.RandomInt(ref num173, 90, 111), 0), 0f, default(Vector2), 1f, effects, 0f);
                                                    }
                                                    else if (num239 == 28 || num239 == 29)
                                                    {
                                                        Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                    }
                                                    else
                                                    {
                                                        for (int num260 = 0; num260 < 7; num260++)
                                                        {
                                                            float num261 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.15f;
                                                            float num262 = (float)Utils.RandomInt(ref num173, -10, 1) * 0.35f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num261, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num262) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                }
                                                else if (num175 == 13)
                                                {
                                                    int num263 = (int)(frameY / 36);
                                                    if (num263 == 1 || num263 == 3 || num263 == 6 || num263 == 8 || num263 == 19 || num263 == 27 || num263 == 29 || num263 == 30 || num263 == 31 || num263 == 32 || num263 == 36)
                                                    {
                                                        for (int num264 = 0; num264 < 7; num264++)
                                                        {
                                                            float num265 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.15f;
                                                            float num266 = (float)Utils.RandomInt(ref num173, -10, 1) * 0.35f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num265, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num266) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(100, 100, 100, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num263 == 25 || num263 == 16 || num263 == 2)
                                                    {
                                                        for (int num267 = 0; num267 < 7; num267++)
                                                        {
                                                            float num268 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.15f;
                                                            float num269 = (float)Utils.RandomInt(ref num173, -10, 1) * 0.1f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num268, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num269) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(50, 50, 50, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num263 == 29)
                                                    {
                                                        for (int num270 = 0; num270 < 7; num270++)
                                                        {
                                                            float num271 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.15f;
                                                            float num272 = (float)Utils.RandomInt(ref num173, -10, 1) * 0.15f;
                                                            Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num271, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num272) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(25, 25, 25, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                        }
                                                    }
                                                    else if (num263 == 34 || num263 == 35)
                                                    {
                                                        Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(75, 75, 75, 0), 0f, default(Vector2), 1f, effects, 0f);
                                                    }
                                                }
                                                else
                                                {
                                                    for (int num273 = 0; num273 < 7; num273++)
                                                    {
                                                        Microsoft.Xna.Framework.Color color16 = new Microsoft.Xna.Framework.Color(100, 100, 100, 0);
                                                        if (frameY / 22 == 14)
                                                        {
                                                            color16 = new Microsoft.Xna.Framework.Color((float)Game1.DiscoR / 255f, (float)Game1.DiscoG / 255f, (float)Game1.DiscoB / 255f, 0f);
                                                        }
                                                        float num274 = (float)Utils.RandomInt(ref num173, -10, 11) * 0.15f;
                                                        float num275 = (float)Utils.RandomInt(ref num173, -10, 1) * 0.35f;
                                                        Game1.spriteBatch.Draw(Game1.FlameTexture[num175], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + num274, (float)(i * 16 - (int)Game1.screenPosition.Y + num11) + num275) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), color16, 0f, default(Vector2), 1f, effects, 0f);
                                                    }
                                                }
                                            }
                                            if (type == 144)
                                            {
                                                Game1.spriteBatch.Draw(Game1.timerTexture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                            if (type == 237)
                                            {
                                                Game1.spriteBatch.Draw(Game1.sunAltarTexture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), new Microsoft.Xna.Framework.Color((int)(Game1.mouseTextColor / 2), (int)(Game1.mouseTextColor / 2), (int)(Game1.mouseTextColor / 2), 0), 0f, default(Vector2), 1f, effects, 0f);
                                            }
                                        }
                                    }
                                }
                            }
                            if (Game1.tileGlowMask[(int)tile.type] != 0)
                            {
                                Texture2D texture = Game1.glowMaskTexture[(int)Game1.tileGlowMask[(int)tile.type]];
                                double num276 = Game1.time * 0.08;
                                Microsoft.Xna.Framework.Color color17 = Microsoft.Xna.Framework.Color.White;
                                if (tile.type == 350)
                                {
                                    color17 = new Microsoft.Xna.Framework.Color(new Vector4((float)(-(float)Math.Cos(((int)(num276 / 6.283) % 3 == 1) ? num276 : 0.0) * 0.2 + 0.2)));
                                }
                                if (tile.type == 381)
                                {
                                    color17 = color5;
                                }
                                if (tile.type == 370)
                                {
                                    color17 = color4;
                                }
                                if (tile.type == 390)
                                {
                                    color17 = color4;
                                }
                                if (tile.type == 391)
                                {
                                    color17 = new Microsoft.Xna.Framework.Color(250, 250, 250, 200);
                                }
                                if (tile.slope() == 0 && !tile.halfBrick())
                                {
                                    Game1.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num16, (int)frameY + num15, num9, num12)), color17, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
                                }
                                else if (tile.halfBrick())
                                {
                                    Game1.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Game1.screenPosition.Y + 10)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10 + num16, (int)frameY + num15 + 10, num9, 6)), color17, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
                                }
                                else
                                {
                                    byte b6 = tile.slope();
                                    for (int num277 = 0; num277 < 8; num277++)
                                    {
                                        int num278 = num277 << 1;
                                        Microsoft.Xna.Framework.Rectangle value5 = new Microsoft.Xna.Framework.Rectangle((int)num10 + num16, (int)frameY + num15 + num277 * 2, num278, 2);
                                        int num279 = 0;
                                        switch (b6)
                                        {
                                            case 2:
                                                value5.X = 16 - num278;
                                                num279 = 16 - num278;
                                                break;
                                            case 3:
                                                value5.Width = 16 - num278;
                                                break;
                                            case 4:
                                                value5.Width = 14 - num278;
                                                value5.X = num278 + 2;
                                                num279 = num278 + 2;
                                                break;
                                        }
                                        Game1.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num279, (float)(i * 16 - (int)Game1.screenPosition.Y + num277 * 2)) + zero, new Microsoft.Xna.Framework.Rectangle?(value5), color17, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
                                    }
                                }
                            }
                            if (texture2D != null)
                            {
                                int num280 = 0;
                                int num281 = 0;
                                Game1.spriteBatch.Draw(texture2D, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num280, (float)(i * 16 - (int)Game1.screenPosition.Y + num11 + num281)) + zero, new Microsoft.Xna.Framework.Rectangle?(empty), color2, 0f, default(Vector2), 1f, effects, 0f);
                            }
                        }
                    }
                }
            }
            if (solidOnly)
            {
                this.DrawTileCracks(1);
            }
            for (int num282 = array.Length - 1; num282 > num4; num282--)
            {
                int num283 = array[num282];
                int num284 = array2[num282];
                Tile tile6 = Game1.tile[num283, num284];
                ushort type4 = tile6.type;
                short frameX = tile6.frameX;
                short frameY2 = tile6.frameY;
                if ((type4 == 128 || type4 == 269) && frameX >= 100)
                {
                    int num285 = (int)(frameY2 / 18);
                    int num286 = (int)frameX;
                    int num287 = 0;
                    while (num286 >= 100)
                    {
                        num287++;
                        num286 -= 100;
                    }
                    int num288 = -4;
                    SpriteEffects effects2 = SpriteEffects.FlipHorizontally;
                    if (num286 >= 36)
                    {
                        effects2 = SpriteEffects.None;
                        num288 = -4;
                    }
                    if (num285 == 0)
                    {
                        this.LoadArmorHead(num287);
                        Game1.spriteBatch.Draw(Game1.armorHeadTexture[num287], new Vector2((float)(num283 * 16 - (int)Game1.screenPosition.X + num288), (float)(num284 * 16 - (int)Game1.screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 36)), Lighting.GetColor(num283, num284), 0f, default(Vector2), 1f, effects2, 0f);
                    }
                    else if (num285 == 1)
                    {
                        bool flag20 = false;
                        int num289 = Player.SetMatch(1, num287, type4 != 128, ref flag20);
                        if (num289 != -1)
                        {
                            this.LoadArmorLegs(num289);
                            Game1.spriteBatch.Draw(Game1.armorLegTexture[num289], new Vector2((float)(num283 * 16 - (int)Game1.screenPosition.X + num288), (float)(num284 * 16 - (int)Game1.screenPosition.Y - 28)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num283, num284), 0f, default(Vector2), 1f, effects2, 0f);
                        }
                        this.LoadArmorBody(num287);
                        if (type4 == 269)
                        {
                            Game1.spriteBatch.Draw(Game1.femaleBodyTexture[num287], new Vector2((float)(num283 * 16 - (int)Game1.screenPosition.X + num288), (float)(num284 * 16 - (int)Game1.screenPosition.Y - 28)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num283, num284), 0f, default(Vector2), 1f, effects2, 0f);
                        }
                        else
                        {
                            Game1.spriteBatch.Draw(Game1.armorBodyTexture[num287], new Vector2((float)(num283 * 16 - (int)Game1.screenPosition.X + num288), (float)(num284 * 16 - (int)Game1.screenPosition.Y - 28)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num283, num284), 0f, default(Vector2), 1f, effects2, 0f);
                        }
                    }
                    else if (num285 == 2)
                    {
                        int num290 = num287;
                        switch (num290)
                        {
                            case 83:
                                if (type4 == 128)
                                {
                                    num290 = 117;
                                }
                                break;
                            case 84:
                                if (type4 == 128)
                                {
                                    num290 = 120;
                                }
                                break;
                        }
                        this.LoadArmorLegs(num290);
                        Game1.spriteBatch.Draw(Game1.armorLegTexture[num290], new Vector2((float)(num283 * 16 - (int)Game1.screenPosition.X + num288), (float)(num284 * 16 - (int)Game1.screenPosition.Y - 44)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num283, num284), 0f, default(Vector2), 1f, effects2, 0f);
                    }
                }
            }
            for (int num291 = 0; num291 < num3; num291++)
            {
                int num292 = array[num291];
                int num293 = array2[num291];
                Tile tile7 = Game1.tile[num292, num293];
                ushort type5 = tile7.type;
                short frameX2 = tile7.frameX;
                short frameY3 = tile7.frameY;
                if (type5 == 237)
                {
                    Game1.spriteBatch.Draw(Game1.sunOrbTexture, new Vector2((float)(num292 * 16 - (int)Game1.screenPosition.X) + (float)num9 / 2f, (float)(num293 * 16 - (int)Game1.screenPosition.Y - 36)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.sunOrbTexture.Width, Game1.sunOrbTexture.Height)), new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, 0), Game1.sunCircle, new Vector2((float)(Game1.sunOrbTexture.Width / 2), (float)(Game1.sunOrbTexture.Height / 2)), 1f, SpriteEffects.None, 0f);
                }
                if ((type5 == 128 || type5 == 269) && frameX2 >= 100)
                {
                    int num294 = (int)(frameY3 / 18);
                    int num295 = (int)frameX2;
                    int num296 = 0;
                    while (num295 >= 100)
                    {
                        num296++;
                        num295 -= 100;
                    }
                    int num297 = -4;
                    SpriteEffects effects3 = SpriteEffects.FlipHorizontally;
                    if (num295 >= 36)
                    {
                        effects3 = SpriteEffects.None;
                        num297 = -4;
                    }
                    if (num294 == 0)
                    {
                        this.LoadArmorHead(num296);
                        Game1.spriteBatch.Draw(Game1.armorHeadTexture[num296], new Vector2((float)(num292 * 16 - (int)Game1.screenPosition.X + num297), (float)(num293 * 16 - (int)Game1.screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 36)), Lighting.GetColor(num292, num293), 0f, default(Vector2), 1f, effects3, 0f);
                    }
                    else if (num294 == 1)
                    {
                        bool flag21 = false;
                        int num298 = Player.SetMatch(1, num296, type5 != 128, ref flag21);
                        if (num298 != -1)
                        {
                            this.LoadArmorLegs(num298);
                            Game1.spriteBatch.Draw(Game1.armorLegTexture[num298], new Vector2((float)(num292 * 16 - (int)Game1.screenPosition.X + num297), (float)(num293 * 16 - (int)Game1.screenPosition.Y - 28)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num292, num293), 0f, default(Vector2), 1f, effects3, 0f);
                        }
                        this.LoadArmorBody(num296);
                        if (type5 == 269)
                        {
                            Game1.spriteBatch.Draw(Game1.femaleBodyTexture[num296], new Vector2((float)(num292 * 16 - (int)Game1.screenPosition.X + num297), (float)(num293 * 16 - (int)Game1.screenPosition.Y - 28)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num292, num293), 0f, default(Vector2), 1f, effects3, 0f);
                        }
                        else
                        {
                            Game1.spriteBatch.Draw(Game1.armorBodyTexture[num296], new Vector2((float)(num292 * 16 - (int)Game1.screenPosition.X + num297), (float)(num293 * 16 - (int)Game1.screenPosition.Y - 28)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num292, num293), 0f, default(Vector2), 1f, effects3, 0f);
                        }
                    }
                    else if (num294 == 2)
                    {
                        int num299 = num296;
                        switch (num299)
                        {
                            case 83:
                                if (type5 == 128)
                                {
                                    num299 = 117;
                                }
                                break;
                            case 84:
                                if (type5 == 128)
                                {
                                    num299 = 120;
                                }
                                break;
                        }
                        this.LoadArmorLegs(num299);
                        Game1.spriteBatch.Draw(Game1.armorLegTexture[num299], new Vector2((float)(num292 * 16 - (int)Game1.screenPosition.X + num297), (float)(num293 * 16 - (int)Game1.screenPosition.Y - 44)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num292, num293), 0f, default(Vector2), 1f, effects3, 0f);
                    }
                }
                if (type5 == 334 && frameX2 >= 5000)
                {
                    short arg_CB8D_0 = (short)(frameY3 / 18);
                    int num300 = (int)frameX2;
                    int num301 = 0;
                    int num302 = num300 % 5000;
                    num302 -= 100;
                    while (num300 >= 5000)
                    {
                        num301++;
                        num300 -= 5000;
                    }
                    int num303 = (int)Game1.tile[num292 + 1, num293].frameX;
                    if (num303 >= 25000)
                    {
                        num303 -= 25000;
                    }
                    else
                    {
                        num303 -= 10000;
                    }
                    Item item = new Item();
                    item.netDefaults(num302);
                    item.Prefix(num303);
                    Texture2D texture2D2 = Game1.itemTexture[item.itemId];
                    Microsoft.Xna.Framework.Rectangle value6;
                    if (Game1.itemAnimations[item.itemId] != null)
                    {
                        value6 = Game1.itemAnimations[item.itemId].GetFrame(texture2D2);
                    }
                    else
                    {
                        value6 = texture2D2.Frame(1, 1, 0, 0);
                    }
                    int width2 = value6.Width;
                    int height7 = value6.Height;
                    float num304 = 1f;
                    if (width2 > 40 || height7 > 40)
                    {
                        if (width2 > height7)
                        {
                            num304 = 40f / (float)width2;
                        }
                        else
                        {
                            num304 = 40f / (float)height7;
                        }
                    }
                    num304 *= item.scale;
                    SpriteEffects effects4 = SpriteEffects.None;
                    if (num301 >= 3)
                    {
                        effects4 = SpriteEffects.FlipHorizontally;
                    }
                    Microsoft.Xna.Framework.Color color18 = Lighting.GetColor(num292, num293);
                    Game1.spriteBatch.Draw(texture2D2, new Vector2((float)(num292 * 16 - (int)Game1.screenPosition.X + 24), (float)(num293 * 16 - (int)Game1.screenPosition.Y + 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(value6), Lighting.GetColor(num292, num293), 0f, new Vector2((float)(width2 / 2), (float)(height7 / 2)), num304, effects4, 0f);
                    if (item.color != default(Microsoft.Xna.Framework.Color))
                    {
                        Game1.spriteBatch.Draw(texture2D2, new Vector2((float)(num292 * 16 - (int)Game1.screenPosition.X + 24), (float)(num293 * 16 - (int)Game1.screenPosition.Y + 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(value6), item.GetColor(color18), 0f, new Vector2((float)(width2 / 2), (float)(height7 / 2)), num304, effects4, 0f);
                    }
                }
                if (type5 == 395)
                {
                    TEItemFrame tEItemFrame = (TEItemFrame)TileEntity.ByPosition[new Point16(num292, num293)];
                    Item item2 = tEItemFrame.item;
                    Texture2D texture2D3 = Game1.itemTexture[item2.itemId];
                    Microsoft.Xna.Framework.Rectangle value7;
                    if (Game1.itemAnimations[item2.itemId] != null)
                    {
                        value7 = Game1.itemAnimations[item2.itemId].GetFrame(texture2D3);
                    }
                    else
                    {
                        value7 = texture2D3.Frame(1, 1, 0, 0);
                    }
                    int width3 = value7.Width;
                    int height8 = value7.Height;
                    float num305 = 1f;
                    if (width3 > 20 || height8 > 20)
                    {
                        if (width3 > height8)
                        {
                            num305 = 20f / (float)width3;
                        }
                        else
                        {
                            num305 = 20f / (float)height8;
                        }
                    }
                    num305 *= item2.scale;
                    SpriteEffects effects5 = SpriteEffects.None;
                    Microsoft.Xna.Framework.Color color19 = Lighting.GetColor(num292, num293);
                    Microsoft.Xna.Framework.Color color20 = color19;
                    float num306 = 1f;
                    ItemSlot.GetItemLight(ref color20, ref num306, item2, false);
                    num305 *= num306;
                    Game1.spriteBatch.Draw(texture2D3, new Vector2((float)(num292 * 16 - (int)Game1.screenPosition.X + 16), (float)(num293 * 16 - (int)Game1.screenPosition.Y + 16)) + zero, new Microsoft.Xna.Framework.Rectangle?(value7), color20, 0f, new Vector2((float)(width3 / 2), (float)(height8 / 2)), num305, effects5, 0f);
                    if (item2.color != default(Microsoft.Xna.Framework.Color))
                    {
                        Game1.spriteBatch.Draw(texture2D3, new Vector2((float)(num292 * 16 - (int)Game1.screenPosition.X + 16), (float)(num293 * 16 - (int)Game1.screenPosition.Y + 16)) + zero, new Microsoft.Xna.Framework.Rectangle?(value7), item2.GetColor(color19), 0f, new Vector2((float)(width3 / 2), (float)(height8 / 2)), num305, effects5, 0f);
                    }
                }
                if (type5 == 412)
                {
                    Texture2D texture2D4 = Game1.glowMaskTexture[202];
                    int num307 = Game1.tileFrame[(int)type5] / 60;
                    int frameY4 = (num307 + 1) % 4;
                    float num308 = (float)(Game1.tileFrame[(int)type5] % 60) / 60f;
                    Microsoft.Xna.Framework.Color value8 = new Microsoft.Xna.Framework.Color(255, 255, 255, 255);
                    Game1.spriteBatch.Draw(texture2D4, new Vector2((float)(num292 * 16 - (int)Game1.screenPosition.X), (float)(num293 * 16 - (int)Game1.screenPosition.Y + 2)) + zero, new Microsoft.Xna.Framework.Rectangle?(texture2D4.Frame(1, 4, 0, num307)), value8 * (1f - num308), 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
                    Game1.spriteBatch.Draw(texture2D4, new Vector2((float)(num292 * 16 - (int)Game1.screenPosition.X), (float)(num293 * 16 - (int)Game1.screenPosition.Y + 2)) + zero, new Microsoft.Xna.Framework.Rectangle?(texture2D4.Frame(1, 4, 0, frameY4)), value8 * num308, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
                }
                try
                {
                    if (type5 == 5 && frameY3 >= 198 && frameX2 >= 22)
                    {
                        int num309 = 0;
                        if (frameX2 == 22)
                        {
                            if (frameY3 == 220)
                            {
                                num309 = 1;
                            }
                            else if (frameY3 == 242)
                            {
                                num309 = 2;
                            }
                            int num310 = 0;
                            int num311 = 80;
                            int num312 = 80;
                            int num313 = 32;
                            int num314 = 0;
                            int num315 = num293;
                            while (num315 < num293 + 100)
                            {
                                if (Game1.tile[num292, num315].type == 2)
                                {
                                    num310 = Game1.GetTreeStyle(num292);
                                    break;
                                }
                                if (Game1.tile[num292, num315].type == 23)
                                {
                                    num310 = 1;
                                    break;
                                }
                                if (Game1.tile[num292, num315].type == 70)
                                {
                                    num310 = 14;
                                    break;
                                }
                                if (Game1.tile[num292, num315].type == 60)
                                {
                                    num310 = 2;
                                    if (WorldGen.jungleBG == 1)
                                    {
                                        num310 = 11;
                                    }
                                    if ((double)num315 > Game1.worldSurface)
                                    {
                                        num310 = 13;
                                    }
                                    num311 = 114;
                                    num312 = 96;
                                    num313 = 48;
                                    break;
                                }
                                if (Game1.tile[num292, num315].type == 147)
                                {
                                    num310 = 4;
                                    if (WorldGen.snowBG == 0)
                                    {
                                        num310 = 12;
                                        if (num292 % 10 == 0)
                                        {
                                            num310 = 18;
                                        }
                                    }
                                    if (WorldGen.snowBG != 2 && WorldGen.snowBG != 3 && WorldGen.snowBG != 32 && WorldGen.snowBG != 4 && WorldGen.snowBG != 42)
                                    {
                                        break;
                                    }
                                    if (WorldGen.snowBG % 2 == 0)
                                    {
                                        if (num292 < Game1.maxTilesX / 2)
                                        {
                                            num310 = 16;
                                            break;
                                        }
                                        num310 = 17;
                                        break;
                                    }
                                    else
                                    {
                                        if (num292 > Game1.maxTilesX / 2)
                                        {
                                            num310 = 16;
                                            break;
                                        }
                                        num310 = 17;
                                        break;
                                    }
                                }
                                else
                                {
                                    if (Game1.tile[num292, num315].type == 199)
                                    {
                                        num310 = 5;
                                        break;
                                    }
                                    if (Game1.tile[num292, num315].type == 109)
                                    {
                                        num310 = 3;
                                        num312 = 140;
                                        if (num292 % 3 == 1)
                                        {
                                            num309 += 3;
                                            break;
                                        }
                                        if (num292 % 3 == 2)
                                        {
                                            num309 += 6;
                                            break;
                                        }
                                        break;
                                    }
                                    else
                                    {
                                        num315++;
                                    }
                                }
                            }
                            if (num310 == 14)
                            {
                                float num316 = (float)Game1.rand.Next(28, 42) * 0.005f;
                                num316 += (float)(270 - (int)Game1.mouseTextColor) / 1000f;
                                Lighting.AddLight(num292, num293, 0.1f, 0.2f + num316 / 2f, 0.7f + num316);
                            }
                            if (tile7.color() > 0)
                            {
                                Game1.checkTreeAlt[num310, (int)tile7.color()] = true;
                            }
                            if (tile7.color() > 0 && Game1.treeAltTextureDrawn[num310, (int)tile7.color()])
                            {
                                Game1.spriteBatch.Draw(Game1.treeTopAltTexture[num310, (int)tile7.color()], new Vector2((float)(num292 * 16 - (int)Game1.screenPosition.X - num313), (float)(num293 * 16 - (int)Game1.screenPosition.Y - num312 + 16 + num314)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num309 * (num311 + 2), 0, num311, num312)), Lighting.GetColor(num292, num293), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            }
                            else
                            {
                                Game1.spriteBatch.Draw(Game1.treeTopTexture[num310], new Vector2((float)(num292 * 16 - (int)Game1.screenPosition.X - num313), (float)(num293 * 16 - (int)Game1.screenPosition.Y - num312 + 16 + num314)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num309 * (num311 + 2), 0, num311, num312)), Lighting.GetColor(num292, num293), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            }
                        }
                        else if (frameX2 == 44)
                        {
                            if (frameY3 == 220)
                            {
                                num309 = 1;
                            }
                            else if (frameY3 == 242)
                            {
                                num309 = 2;
                            }
                            int num317 = 0;
                            int num318 = num293;
                            while (num318 < num293 + 100)
                            {
                                if (Game1.tile[num292 + 1, num318].type == 2)
                                {
                                    num317 = Game1.GetTreeStyle(num292 + 1);
                                    break;
                                }
                                if (Game1.tile[num292 + 1, num318].type == 23)
                                {
                                    num317 = 1;
                                    break;
                                }
                                if (Game1.tile[num292 + 1, num318].type == 70)
                                {
                                    num317 = 14;
                                    break;
                                }
                                if (Game1.tile[num292 + 1, num318].type == 60)
                                {
                                    num317 = 2;
                                    if ((double)num318 > Game1.worldSurface)
                                    {
                                        num317 = 13;
                                        break;
                                    }
                                    break;
                                }
                                else if (Game1.tile[num292 + 1, num318].type == 147)
                                {
                                    num317 = 4;
                                    if (WorldGen.snowBG == 0)
                                    {
                                        num317 = 12;
                                        break;
                                    }
                                    break;
                                }
                                else
                                {
                                    if (Game1.tile[num292 + 1, num318].type == 199)
                                    {
                                        num317 = 5;
                                        break;
                                    }
                                    if (Game1.tile[num292 + 1, num318].type == 109)
                                    {
                                        num317 = 3;
                                        if (num292 % 3 == 1)
                                        {
                                            num309 += 3;
                                            break;
                                        }
                                        if (num292 % 3 == 2)
                                        {
                                            num309 += 6;
                                            break;
                                        }
                                        break;
                                    }
                                    else
                                    {
                                        num318++;
                                    }
                                }
                            }
                            if (num317 == 14)
                            {
                                float num319 = (float)Game1.rand.Next(28, 42) * 0.005f;
                                num319 += (float)(270 - (int)Game1.mouseTextColor) / 1000f;
                                Lighting.AddLight(num292, num293, 0.1f, 0.2f + num319 / 2f, 0.7f + num319);
                            }
                            if (tile7.color() > 0)
                            {
                                Game1.checkTreeAlt[num317, (int)tile7.color()] = true;
                            }
                            if (tile7.color() > 0 && Game1.treeAltTextureDrawn[num317, (int)tile7.color()])
                            {
                                Game1.spriteBatch.Draw(Game1.treeBranchAltTexture[num317, (int)tile7.color()], new Vector2((float)(num292 * 16 - (int)Game1.screenPosition.X - 24), (float)(num293 * 16 - (int)Game1.screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num309 * 42, 40, 40)), Lighting.GetColor(num292, num293), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            }
                            else
                            {
                                Game1.spriteBatch.Draw(Game1.treeBranchTexture[num317], new Vector2((float)(num292 * 16 - (int)Game1.screenPosition.X - 24), (float)(num293 * 16 - (int)Game1.screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num309 * 42, 40, 40)), Lighting.GetColor(num292, num293), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            }
                        }
                        else if (frameX2 == 66)
                        {
                            if (frameY3 == 220)
                            {
                                num309 = 1;
                            }
                            else if (frameY3 == 242)
                            {
                                num309 = 2;
                            }
                            int num320 = 0;
                            int num321 = num293;
                            while (num321 < num293 + 100)
                            {
                                if (Game1.tile[num292 - 1, num321].type == 2)
                                {
                                    num320 = Game1.GetTreeStyle(num292 - 1);
                                    break;
                                }
                                if (Game1.tile[num292 - 1, num321].type == 23)
                                {
                                    num320 = 1;
                                    break;
                                }
                                if (Game1.tile[num292 - 1, num321].type == 70)
                                {
                                    num320 = 14;
                                    break;
                                }
                                if (Game1.tile[num292 - 1, num321].type == 60)
                                {
                                    num320 = 2;
                                    if ((double)num321 > Game1.worldSurface)
                                    {
                                        num320 = 13;
                                        break;
                                    }
                                    break;
                                }
                                else if (Game1.tile[num292 - 1, num321].type == 147)
                                {
                                    num320 = 4;
                                    if (WorldGen.snowBG == 0)
                                    {
                                        num320 = 12;
                                        break;
                                    }
                                    break;
                                }
                                else
                                {
                                    if (Game1.tile[num292 - 1, num321].type == 199)
                                    {
                                        num320 = 5;
                                        break;
                                    }
                                    if (Game1.tile[num292 - 1, num321].type == 109)
                                    {
                                        num320 = 3;
                                        if (num292 % 3 == 1)
                                        {
                                            num309 += 3;
                                            break;
                                        }
                                        if (num292 % 3 == 2)
                                        {
                                            num309 += 6;
                                            break;
                                        }
                                        break;
                                    }
                                    else
                                    {
                                        num321++;
                                    }
                                }
                            }
                            if (num320 == 14)
                            {
                                float num322 = (float)Game1.rand.Next(28, 42) * 0.005f;
                                num322 += (float)(270 - (int)Game1.mouseTextColor) / 1000f;
                                Lighting.AddLight(num292, num293, 0.1f, 0.2f + num322 / 2f, 0.7f + num322);
                            }
                            if (tile7.color() > 0)
                            {
                                Game1.checkTreeAlt[num320, (int)tile7.color()] = true;
                            }
                            if (tile7.color() > 0 && Game1.treeAltTextureDrawn[num320, (int)tile7.color()])
                            {
                                Game1.spriteBatch.Draw(Game1.treeBranchAltTexture[num320, (int)tile7.color()], new Vector2((float)(num292 * 16 - (int)Game1.screenPosition.X), (float)(num293 * 16 - (int)Game1.screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(42, num309 * 42, 40, 40)), Lighting.GetColor(num292, num293), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            }
                            else
                            {
                                Game1.spriteBatch.Draw(Game1.treeBranchTexture[num320], new Vector2((float)(num292 * 16 - (int)Game1.screenPosition.X), (float)(num293 * 16 - (int)Game1.screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(42, num309 * 42, 40, 40)), Lighting.GetColor(num292, num293), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            }
                        }
                    }
                    if (type5 == 323 && frameX2 >= 88 && frameX2 <= 132)
                    {
                        int num323 = 0;
                        if (frameX2 == 110)
                        {
                            num323 = 1;
                        }
                        else if (frameX2 == 132)
                        {
                            num323 = 2;
                        }
                        int num324 = 15;
                        int num325 = 0;
                        int num326 = 80;
                        int num327 = 80;
                        int num328 = 32;
                        int num329 = 0;
                        for (int num330 = num293; num330 < num293 + 100; num330++)
                        {
                            if (Game1.tile[num292, num330].type == 53)
                            {
                                num325 = 0;
                                break;
                            }
                            if (Game1.tile[num292, num330].type == 234)
                            {
                                num325 = 1;
                                break;
                            }
                            if (Game1.tile[num292, num330].type == 116)
                            {
                                num325 = 2;
                                break;
                            }
                            if (Game1.tile[num292, num330].type == 112)
                            {
                                num325 = 3;
                                break;
                            }
                        }
                        int frameY5 = (int)Game1.tile[num292, num293].frameY;
                        int y3 = num325 * 82;
                        if (tile7.color() > 0)
                        {
                            Game1.checkTreeAlt[num324, (int)tile7.color()] = true;
                        }
                        if (tile7.color() > 0 && Game1.treeAltTextureDrawn[num324, (int)tile7.color()])
                        {
                            Game1.spriteBatch.Draw(Game1.treeTopAltTexture[num324, (int)tile7.color()], new Vector2((float)(num292 * 16 - (int)Game1.screenPosition.X - num328 + frameY5), (float)(num293 * 16 - (int)Game1.screenPosition.Y - num327 + 16 + num329)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num323 * (num326 + 2), y3, num326, num327)), Lighting.GetColor(num292, num293), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                        }
                        else
                        {
                            Game1.spriteBatch.Draw(Game1.treeTopTexture[num324], new Vector2((float)(num292 * 16 - (int)Game1.screenPosition.X - num328 + frameY5), (float)(num293 * 16 - (int)Game1.screenPosition.Y - num327 + 16 + num329)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num323 * (num326 + 2), y3, num326, num327)), Lighting.GetColor(num292, num293), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                        }
                    }
                }
                catch
                {
                }
            }
            if (TileObject.objectPreview.Active && Game1.player[Game1.myPlayer].showItemIcon && Game1.placementPreview && !CaptureManager.Instance.Active)
            {
                this.LoadTiles((int)TileObject.objectPreview.Type);
                TileObject.DrawPreview(Game1.spriteBatch, TileObject.objectPreview, Game1.screenPosition - zero);
            }
            if (solidOnly)
            {
                TimeLogger.DrawTime(0, stopwatch.Elapsed.TotalMilliseconds);
                return;
            }
            TimeLogger.DrawTime(1, stopwatch.Elapsed.TotalMilliseconds);
        }
        protected void DrawGoreBehind()
        {
            for (int i = 0; i < 500; i++)
            {
                if (Game1.gore[i].active && Game1.gore[i].type > 0 && Game1.gore[i].type >= 706 && Game1.gore[i].type <= 717 && (Game1.gore[i].frame < 7 || Game1.gore[i].frame > 9))
                {
                    this.LoadGore(Game1.gore[i].type);
                    if (Game1.gore[i].numFrames > 1)
                    {
                        int num = Game1.goreTexture[Game1.gore[i].type].Height / (int)Game1.gore[i].numFrames;
                        Microsoft.Xna.Framework.Color alpha = Game1.gore[i].GetAlpha(Lighting.GetColor((int)((double)Game1.gore[i].position.X + (double)Game1.goreTexture[Game1.gore[i].type].Width * 0.5) / 16, (int)(((double)Game1.gore[i].position.Y + (double)num * 0.5) / 16.0)));
                        Game1.spriteBatch.Draw(Game1.goreTexture[Game1.gore[i].type], new Vector2(Game1.gore[i].position.X - Game1.screenPosition.X + (float)(Game1.goreTexture[Game1.gore[i].type].Width / 2), Game1.gore[i].position.Y - Game1.screenPosition.Y + (float)(num / 2) - 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num * (int)Game1.gore[i].frame, Game1.goreTexture[Game1.gore[i].type].Width, num)), alpha, Game1.gore[i].rotation, new Vector2((float)(Game1.goreTexture[Game1.gore[i].type].Width / 2), (float)(num / 2)), Game1.gore[i].scale, SpriteEffects.None, 0f);
                    }
                    else
                    {
                        Microsoft.Xna.Framework.Color alpha2 = Game1.gore[i].GetAlpha(Lighting.GetColor((int)((double)Game1.gore[i].position.X + (double)Game1.goreTexture[Game1.gore[i].type].Width * 0.5) / 16, (int)(((double)Game1.gore[i].position.Y + (double)Game1.goreTexture[Game1.gore[i].type].Height * 0.5) / 16.0)));
                        Game1.spriteBatch.Draw(Game1.goreTexture[Game1.gore[i].type], new Vector2(Game1.gore[i].position.X - Game1.screenPosition.X + (float)(Game1.goreTexture[Game1.gore[i].type].Width / 2), Game1.gore[i].position.Y - Game1.screenPosition.Y + (float)(Game1.goreTexture[Game1.gore[i].type].Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.goreTexture[Game1.gore[i].type].Width, Game1.goreTexture[Game1.gore[i].type].Height)), alpha2, Game1.gore[i].rotation, new Vector2((float)(Game1.goreTexture[Game1.gore[i].type].Width / 2), (float)(Game1.goreTexture[Game1.gore[i].type].Height / 2)), Game1.gore[i].scale, SpriteEffects.None, 0f);
                    }
                }
            }
        }
        protected void DrawGore()
        {
            Game1.drawBackGore = false;
            for (int i = 0; i < 500; i++)
            {
                if (Game1.gore[i].active && Game1.gore[i].type > 0)
                {
                    if (Game1.gore[i].type >= 706 && Game1.gore[i].type <= 717 && (Game1.gore[i].frame < 7 || Game1.gore[i].frame > 9))
                    {
                        Game1.drawBackGore = true;
                    }
                    else
                    {
                        this.LoadGore(Game1.gore[i].type);
                        if (Game1.gore[i].numFrames > 1)
                        {
                            int num = Game1.goreTexture[Game1.gore[i].type].Height / (int)Game1.gore[i].numFrames;
                            Microsoft.Xna.Framework.Color alpha = Game1.gore[i].GetAlpha(Lighting.GetColor((int)((double)Game1.gore[i].position.X + (double)Game1.goreTexture[Game1.gore[i].type].Width * 0.5) / 16, (int)(((double)Game1.gore[i].position.Y + (double)num * 0.5) / 16.0)));
                            Game1.spriteBatch.Draw(Game1.goreTexture[Game1.gore[i].type], new Vector2(Game1.gore[i].position.X - Game1.screenPosition.X + (float)(Game1.goreTexture[Game1.gore[i].type].Width / 2), Game1.gore[i].position.Y - Game1.screenPosition.Y + (float)(num / 2) - 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num * (int)Game1.gore[i].frame, Game1.goreTexture[Game1.gore[i].type].Width, num)), alpha, Game1.gore[i].rotation, new Vector2((float)(Game1.goreTexture[Game1.gore[i].type].Width / 2), (float)(num / 2)), Game1.gore[i].scale, SpriteEffects.None, 0f);
                        }
                        else
                        {
                            Microsoft.Xna.Framework.Color alpha2 = Game1.gore[i].GetAlpha(Lighting.GetColor((int)((double)Game1.gore[i].position.X + (double)Game1.goreTexture[Game1.gore[i].type].Width * 0.5) / 16, (int)(((double)Game1.gore[i].position.Y + (double)Game1.goreTexture[Game1.gore[i].type].Height * 0.5) / 16.0)));
                            Game1.spriteBatch.Draw(Game1.goreTexture[Game1.gore[i].type], new Vector2(Game1.gore[i].position.X - Game1.screenPosition.X + (float)(Game1.goreTexture[Game1.gore[i].type].Width / 2), Game1.gore[i].position.Y - Game1.screenPosition.Y + (float)(Game1.goreTexture[Game1.gore[i].type].Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.goreTexture[Game1.gore[i].type].Width, Game1.goreTexture[Game1.gore[i].type].Height)), alpha2, Game1.gore[i].rotation, new Vector2((float)(Game1.goreTexture[Game1.gore[i].type].Width / 2), (float)(Game1.goreTexture[Game1.gore[i].type].Height / 2)), Game1.gore[i].scale, SpriteEffects.None, 0f);
                        }
                    }
                }
            }
            TimeLogger.DetailedDrawTime(24);
        }
        protected void DrawHealthBar(float X, float Y, int Health, int MaxHealth, float alpha, float scale = 1f)
        {
            if (Health <= 0)
            {
                return;
            }
            float num = (float)Health / (float)MaxHealth;
            if (num > 1f)
            {
                num = 1f;
            }
            int num2 = (int)(36f * num);
            float num3 = X - 18f * scale;
            float num4 = Y;
            if (Game1.player[Game1.myPlayer].gravDir == -1f)
            {
                num4 -= Game1.screenPosition.Y;
                num4 = Game1.screenPosition.Y + (float)Game1.screenHeight - num4;
            }
            float num5 = 0f;
            float num6 = 255f;
            num -= 0.1f;
            float num7;
            float num8;
            if ((double)num > 0.5)
            {
                num7 = 255f;
                num8 = 255f * (1f - num) * 2f;
            }
            else
            {
                num7 = 255f * num * 2f;
                num8 = 255f;
            }
            float num9 = 0.95f;
            num8 = num8 * alpha * num9;
            num7 = num7 * alpha * num9;
            num6 = num6 * alpha * num9;
            if (num8 < 0f)
            {
                num8 = 0f;
            }
            if (num8 > 255f)
            {
                num8 = 255f;
            }
            if (num7 < 0f)
            {
                num7 = 0f;
            }
            if (num7 > 255f)
            {
                num7 = 255f;
            }
            if (num6 < 0f)
            {
                num6 = 0f;
            }
            if (num6 > 255f)
            {
                num6 = 255f;
            }
            Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)((byte)num8), (int)((byte)num7), (int)((byte)num5), (int)((byte)num6));
            if (num2 < 3)
            {
                num2 = 3;
            }
            if (num2 < 34)
            {
                if (num2 < 36)
                {
                    Game1.spriteBatch.Draw(Game1.hbTexture2, new Vector2(num3 - Game1.screenPosition.X + (float)num2 * scale, num4 - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(2, 0, 2, Game1.hbTexture2.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
                }
                if (num2 < 34)
                {
                    Game1.spriteBatch.Draw(Game1.hbTexture2, new Vector2(num3 - Game1.screenPosition.X + (float)(num2 + 2) * scale, num4 - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num2 + 2, 0, 36 - num2 - 2, Game1.hbTexture2.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
                }
                if (num2 > 2)
                {
                    Game1.spriteBatch.Draw(Game1.hbTexture1, new Vector2(num3 - Game1.screenPosition.X, num4 - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, num2 - 2, Game1.hbTexture1.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
                }
                Game1.spriteBatch.Draw(Game1.hbTexture1, new Vector2(num3 - Game1.screenPosition.X + (float)(num2 - 2) * scale, num4 - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(32, 0, 2, Game1.hbTexture1.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
                return;
            }
            if (num2 < 36)
            {
                Game1.spriteBatch.Draw(Game1.hbTexture2, new Vector2(num3 - Game1.screenPosition.X + (float)num2 * scale, num4 - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num2, 0, 36 - num2, Game1.hbTexture2.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
            }
            Game1.spriteBatch.Draw(Game1.hbTexture1, new Vector2(num3 - Game1.screenPosition.X, num4 - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, num2, Game1.hbTexture1.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
        }
        public static float NPCAddHeight(int i)
        {
            float num = 0f;
            if (Game1.npc[i].type == 125)
            {
                num = 30f;
            }
            else if (Game1.npc[i].type == 54)
            {
                num = 2f;
            }
            else if (Game1.npc[i].type == 205)
            {
                num = 8f;
            }
            else if (Game1.npc[i].type == 182)
            {
                num = 24f;
            }
            else if (Game1.npc[i].type == 178)
            {
                num = 2f;
            }
            else if (Game1.npc[i].type == 126)
            {
                num = 30f;
            }
            else if (Game1.npc[i].type == 6 || Game1.npc[i].type == 173)
            {
                num = 26f;
            }
            else if (Game1.npc[i].type == 94)
            {
                num = 14f;
            }
            else if (Game1.npc[i].type == 7 || Game1.npc[i].type == 8 || Game1.npc[i].type == 9)
            {
                num = 13f;
            }
            else if (Game1.npc[i].type == 98 || Game1.npc[i].type == 99 || Game1.npc[i].type == 100)
            {
                num = 13f;
            }
            else if (Game1.npc[i].type == 95 || Game1.npc[i].type == 96 || Game1.npc[i].type == 97)
            {
                num = 13f;
            }
            else if (Game1.npc[i].type == 10 || Game1.npc[i].type == 11 || Game1.npc[i].type == 12)
            {
                num = 8f;
            }
            else if (Game1.npc[i].type == 13 || Game1.npc[i].type == 14 || Game1.npc[i].type == 15)
            {
                num = 26f;
            }
            else if (Game1.npc[i].type == 175)
            {
                num = 4f;
            }
            else if (Game1.npc[i].type == 520)
            {
                num = 2f;
            }
            else if (Game1.npc[i].type >= 412 && Game1.npc[i].type <= 414)
            {
                num = 18f;
            }
            else if (Game1.npc[i].type == 48)
            {
                num = 32f;
            }
            else if (Game1.npc[i].type == 49 || Game1.npc[i].type == 51)
            {
                num = 4f;
            }
            else if (Game1.npc[i].type == 60)
            {
                num = 10f;
            }
            else if (Game1.npc[i].type == 62 || Game1.npc[i].type == 66 || Game1.npc[i].type == 156)
            {
                num = 14f;
            }
            else if (Game1.npc[i].type == 63 || Game1.npc[i].type == 64 || Game1.npc[i].type == 103)
            {
                num = 4f;
            }
            else if (Game1.npc[i].type == 65)
            {
                num = 14f;
            }
            else if (Game1.npc[i].type == 69)
            {
                num = 4f;
            }
            else if (Game1.npc[i].type == 70)
            {
                num = -4f;
            }
            else if (Game1.npc[i].type == 72)
            {
                num = -2f;
            }
            else if (Game1.npc[i].type == 83 || Game1.npc[i].type == 84)
            {
                num = 20f;
            }
            else if (Game1.npc[i].type == 150 || Game1.npc[i].type == 151 || Game1.npc[i].type == 158)
            {
                num = 10f;
            }
            else if (Game1.npc[i].type == 152)
            {
                num = 6f;
            }
            else if (Game1.npc[i].type == 153 || Game1.npc[i].type == 154)
            {
                num = 4f;
            }
            else if (Game1.npc[i].type == 165 || Game1.npc[i].type == 237 || Game1.npc[i].type == 238 || Game1.npc[i].type == 240)
            {
                num = 10f;
            }
            else if (Game1.npc[i].type == 39 || Game1.npc[i].type == 40 || Game1.npc[i].type == 41)
            {
                num = 26f;
            }
            else if (Game1.npc[i].type >= 87 && Game1.npc[i].type <= 92)
            {
                num = 56f;
            }
            else if (Game1.npc[i].type >= 134 && Game1.npc[i].type <= 136)
            {
                num = 30f;
            }
            else if (Game1.npc[i].type == 169)
            {
                num = 8f;
            }
            else if (Game1.npc[i].type == 174)
            {
                num = 6f;
            }
            else if (Game1.npc[i].type == 369)
            {
                num = 2f;
            }
            else if (Game1.npc[i].type == 376)
            {
                num = 6f;
            }
            if (Game1.npc[i].townNPC && Game1.npc[i].ai[0] == 5f)
            {
                num -= 4f;
            }
            return num * Game1.npc[i].scale;
        }
        protected void DrawProjectiles()
        {
            Game1.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
            int num = 0;
            int num2 = 0;
            if (Game1.ignoreErrors)
            {
                for (int i = 0; i < 1000; i++)
                {
                    if (Game1.projectile[i].active && Game1.projectile[i].type > 0 && !Game1.projectile[i].hide)
                    {
                        num++;
                        try
                        {
                            int num3 = 0;
                            if (Game1.projHook[Game1.projectile[i].type] && Game1.projectile[i].owner != 255)
                            {
                                num3 = Game1.player[Game1.projectile[i].owner].cGrapple;
                            }
                            if (Game1.projPet[Game1.projectile[i].type] && !Game1.projectile[i].minion && Game1.projectile[i].owner != 255 && Game1.projectile[i].damage == 0 && !ProjectileID.Sets.LightPet[Game1.projectile[i].type])
                            {
                                num3 = Game1.player[Game1.projectile[i].owner].cPet;
                            }
                            if (!Game1.projectile[i].minion && Game1.projectile[i].owner != 255 && Game1.projectile[i].damage == 0 && ProjectileID.Sets.LightPet[Game1.projectile[i].type])
                            {
                                num3 = Game1.player[Game1.projectile[i].owner].cLight;
                            }
                            if (Game1.projectile[i].type == 623 && Game1.projectile[i].owner != 255)
                            {
                                num3 = Game1.player[Game1.projectile[i].owner].cPet;
                            }
                            if (num3 != 0)
                            {
                                if (num2 == 0)
                                {
                                    Game1.spriteBatch.End();
                                    Game1.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
                                }
                                GameShaders.Armor.ApplySecondary(num3, Game1.player[Game1.projectile[i].owner], null);
                            }
                            else if (num2 != 0)
                            {
                                Game1.spriteBatch.End();
                                Game1.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
                            }
                            num2 = num3;
                            this.DrawProj(i);
                        }
                        catch (Exception e)
                        {
                            TimeLogger.DrawException(e);
                            Game1.projectile[i].active = false;
                        }
                    }
                }
            }
            else
            {
                for (int j = 0; j < 1000; j++)
                {
                    if (Game1.projectile[j].active && Game1.projectile[j].type > 0 && !Game1.projectile[j].hide)
                    {
                        int num4 = 0;
                        if (Game1.projHook[Game1.projectile[j].type] && Game1.projectile[j].owner != 255)
                        {
                            num4 = Game1.player[Game1.projectile[j].owner].cGrapple;
                        }
                        if (Game1.projPet[Game1.projectile[j].type] && !Game1.projectile[j].minion && Game1.projectile[j].owner != 255 && Game1.projectile[j].damage == 0 && !ProjectileID.Sets.LightPet[Game1.projectile[j].type])
                        {
                            num4 = Game1.player[Game1.projectile[j].owner].cPet;
                        }
                        if (!Game1.projectile[j].minion && Game1.projectile[j].owner != 255 && Game1.projectile[j].damage == 0 && ProjectileID.Sets.LightPet[Game1.projectile[j].type])
                        {
                            num4 = Game1.player[Game1.projectile[j].owner].cLight;
                        }
                        if (Game1.projectile[j].type == 623 && Game1.projectile[j].owner != 255)
                        {
                            num4 = Game1.player[Game1.projectile[j].owner].cPet;
                        }
                        if (num4 != 0)
                        {
                            if (num2 == 0)
                            {
                                Game1.spriteBatch.End();
                                Game1.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
                            }
                            GameShaders.Armor.ApplySecondary(num4, Game1.player[Game1.projectile[j].owner], null);
                        }
                        else if (num2 != 0)
                        {
                            Game1.spriteBatch.End();
                            Game1.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
                        }
                        num2 = num4;
                        this.DrawProj(j);
                    }
                }
            }
            Game1.spriteBatch.End();
            TimeLogger.DetailedDrawTime(20);
        }
        protected void DrawPlayers()
        {
            Game1.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
            for (int i = 0; i < 255; i++)
            {
                Player player = Game1.player[i];
                if (player.active && !player.outOfRange)
                {
                    if (Game1.gamePaused)
                    {
                        player.PlayerFrame();
                    }
                    if (player.ghost)
                    {
                        for (int j = 0; j < 3; j++)
                        {
                            this.DrawGhost(player, player.shadowPos[j], 0.5f + 0.2f * (float)j);
                        }
                        this.DrawGhost(player, player.position, 0f);
                    }
                    else
                    {
                        if (player.inventory[player.selectedItem].flame || player.head == 137 || player.wings == 22)
                        {
                            player.itemFlameCount--;
                            if (player.itemFlameCount <= 0)
                            {
                                player.itemFlameCount = 5;
                                for (int k = 0; k < 7; k++)
                                {
                                    player.itemFlamePos[k].X = (float)Game1.rand.Next(-10, 11) * 0.15f;
                                    player.itemFlamePos[k].Y = (float)Game1.rand.Next(-10, 1) * 0.35f;
                                }
                            }
                        }
                        bool flag = false;
                        bool flag2 = false;
                        bool flag3 = false;
                        bool flag4 = false;
                        if (player.head == 111 && player.body == 73 && player.legs == 62)
                        {
                            flag2 = true;
                            flag3 = true;
                        }
                        if (player.head == 134 && player.body == 95 && player.legs == 79)
                        {
                            flag2 = true;
                            flag3 = true;
                        }
                        if (player.head == 107 && player.body == 69 && player.legs == 58)
                        {
                            flag2 = true;
                            flag = true;
                        }
                        if (player.head == 108 && player.body == 70 && player.legs == 59)
                        {
                            flag2 = true;
                            flag = true;
                        }
                        if (player.head == 109 && player.body == 71 && player.legs == 60)
                        {
                            flag2 = true;
                            flag = true;
                        }
                        if (player.head == 110 && player.body == 72 && player.legs == 61)
                        {
                            flag2 = true;
                            flag = true;
                        }
                        if (player.head == 193 && player.body == 194 && player.legs == 134)
                        {
                            flag2 = true;
                            flag4 = true;
                            flag3 = true;
                        }
                        if (player.mount.Active && player.mount.Type == 3 && player.velocity.Y != 0f && !player.SlimeDontHyperJump)
                        {
                            flag = true;
                        }
                        if (player.mount.Active && player.mount.Type == 10 && Math.Abs(player.velocity.X) > player.mount.DashSpeed - player.mount.RunSpeed / 2f)
                        {
                            flag = true;
                        }
                        if (player.body == 67 && player.legs == 56 && player.head >= 103 && player.head <= 105)
                        {
                            flag = true;
                        }
                        if ((player.head == 78 || player.head == 79 || player.head == 80) && player.body == 51 && player.legs == 47)
                        {
                            flag2 = true;
                        }
                        if (player.head == 171 && player.body == 177 && player.legs == 112)
                        {
                            flag = true;
                            flag3 = true;
                        }
                        if (player.head == 169 && player.body == 175 && player.legs == 110)
                        {
                            flag = true;
                        }
                        if (player.head == 170 && player.body == 176 && player.legs == 111)
                        {
                            flag4 = true;
                            flag3 = true;
                        }
                        if (player.eocDash > 0)
                        {
                            int num = player.eocDash / 4;
                            if (num > 3)
                            {
                                num = 3;
                            }
                            for (int l = 0; l < num; l++)
                            {
                                this.DrawPlayer(player, player.shadowPos[l], player.shadowRotation[l], player.shadowOrigin[l], 0.5f + 0.2f * (float)l);
                            }
                        }
                        else if (player.dashDelay < 0)
                        {
                            flag = true;
                        }
                        if (player.head == 5 && player.body == 5 && player.legs == 5)
                        {
                            flag = true;
                        }
                        if (player.head == 74 && player.body == 48 && player.legs == 44)
                        {
                            flag = true;
                        }
                        if (player.head == 76 && player.body == 49 && player.legs == 45)
                        {
                            flag = true;
                        }
                        if (player.head == 7 && player.body == 7 && player.legs == 7)
                        {
                            flag = true;
                        }
                        if (player.head == 22 && player.body == 14 && player.legs == 14)
                        {
                            flag = true;
                        }
                        if (player.dye[0].dye == 30 && player.dye[1].dye == 30 && player.dye[2].dye == 30 && player.head == 4 && player.body == 27 && player.legs == 26)
                        {
                            flag = true;
                            flag3 = true;
                        }
                        if (player.head == 189 && player.body == 190 && player.legs == 130)
                        {
                            flag3 = true;
                        }
                        if (player.body == 17 && player.legs == 16 && (player.head == 29 || player.head == 30 || player.head == 31))
                        {
                            flag = true;
                        }
                        if (player.body == 19 && player.legs == 18 && (player.head == 35 || player.head == 36 || player.head == 37))
                        {
                            flag3 = true;
                        }
                        if (player.body == 24 && player.legs == 23 && (player.head == 41 || player.head == 42 || player.head == 43))
                        {
                            flag3 = true;
                            flag = true;
                        }
                        if (player.head == 157 && player.legs == 98 && player.body != 105)
                        {
                            int arg_62A_0 = player.body;
                        }
                        if (player.body == 36 && player.head == 56)
                        {
                            flag3 = true;
                        }
                        if (player.stoned || player.stealth != 1f)
                        {
                            flag3 = false;
                            flag = false;
                            flag2 = false;
                        }
                        Vector2 position;
                        if (player.invis)
                        {
                            flag3 = false;
                            flag = false;
                            flag2 = false;
                            position = player.position;
                            if (player.aggro <= -750)
                            {
                                this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, 1f);
                            }
                            else
                            {
                                player.invis = false;
                                this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, 0f);
                                player.invis = true;
                            }
                        }
                        if (flag3)
                        {
                            Vector2 arg_6D7_0 = player.position;
                            if (!Game1.gamePaused)
                            {
                                player.ghostFade += player.ghostDir * 0.075f;
                            }
                            if ((double)player.ghostFade < 0.1)
                            {
                                player.ghostDir = 1f;
                                player.ghostFade = 0.1f;
                            }
                            else if ((double)player.ghostFade > 0.9)
                            {
                                player.ghostDir = -1f;
                                player.ghostFade = 0.9f;
                            }
                            float num2 = player.ghostFade * 5f;
                            for (int m = 0; m < 4; m++)
                            {
                                float num3 = 0;
                                float num4 = 0;
                                switch (m)
                                {
                                    case 0:
                                        num3 = num2;
                                        num4 = 0f;
                                        goto IL_7AF;
                                    case 1:
                                        num3 = -num2;
                                        num4 = 0f;
                                        goto IL_7AF;
                                    case 2:
                                        num3 = 0f;
                                        num4 = num2;
                                        goto IL_7AF;
                                    case 3:
                                        num3 = 0f;
                                        num4 = -num2;
                                        goto IL_7AF;
                                }
                            IL_7AF:
                                position = new Vector2(player.position.X + num3, player.position.Y + player.gfxOffY + num4);
                                this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, player.ghostFade);
                            }
                        }
                        if (flag)
                        {
                            for (int n = 0; n < 3; n++)
                            {
                                this.DrawPlayer(player, player.shadowPos[n], player.shadowRotation[n], player.shadowOrigin[n], 0.5f + 0.2f * (float)n);
                            }
                        }
                        if (flag4)
                        {
                            for (int num5 = 0; num5 < 3; num5++)
                            {
                                this.DrawPlayer(player, Vector2.Lerp(player.shadowPos[num5], player.position + new Vector2(0f, player.gfxOffY), 0.5f), player.shadowRotation[num5], player.shadowOrigin[num5], MathHelper.Lerp(1f, 0.5f + 0.2f * (float)num5, 0.5f));
                            }
                        }
                        if (flag2)
                        {
                            for (int num6 = 0; num6 < 4; num6++)
                            {
                                position.X = player.position.X + (float)Game1.rand.Next(-20, 21) * 0.1f;
                                position.Y = player.position.Y + (float)Game1.rand.Next(-20, 21) * 0.1f + player.gfxOffY;
                                this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, 0.9f);
                            }
                        }
                        if (player.shadowDodge)
                        {
                            player.shadowDodgeCount += 1f;
                            if (player.shadowDodgeCount > 30f)
                            {
                                player.shadowDodgeCount = 30f;
                            }
                        }
                        else
                        {
                            player.shadowDodgeCount -= 1f;
                            if (player.shadowDodgeCount < 0f)
                            {
                                player.shadowDodgeCount = 0f;
                            }
                        }
                        if (player.shadowDodgeCount > 0f)
                        {
                            Vector2 arg_9E6_0 = player.position;
                            position.X = player.position.X + player.shadowDodgeCount;
                            position.Y = player.position.Y + player.gfxOffY;
                            this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, 0.5f + (float)Game1.rand.Next(-10, 11) * 0.005f);
                            position.X = player.position.X - player.shadowDodgeCount;
                            this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, 0.5f + (float)Game1.rand.Next(-10, 11) * 0.005f);
                        }
                        position = player.position;
                        position.Y += player.gfxOffY;
                        if (player.stoned)
                        {
                            this.DrawPlayerStoned(player, position);
                        }
                        else if (!player.invis)
                        {
                            this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, 0f);
                        }
                    }
                }
            }
            Game1.spriteBatch.End();
            TimeLogger.DetailedDrawTime(21);
        }
        protected void DrawNPCs(bool behindTiles = false)
        {
            bool flag = false;
            Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)Game1.screenPosition.X - 300, (int)Game1.screenPosition.Y - 300, Game1.screenWidth + 600, Game1.screenHeight + 600);
            for (int i = 199; i >= 0; i--)
            {
                try
                {
                    if (Game1.npc[i].active && Game1.npc[i].type > 0 && Game1.npc[i].type < 540 && !Game1.npc[i].hide && Game1.npc[i].behindTiles == behindTiles)
                    {
                        if (Game1.npc[i].type == 125 || Game1.npc[i].type == 126)
                        {
                            if (!flag)
                            {
                                flag = true;
                                for (int j = 0; j < 200; j++)
                                {
                                    if (Game1.npc[j].active && i != j && (Game1.npc[j].type == 125 || Game1.npc[j].type == 126))
                                    {
                                        float num = Game1.npc[j].position.X + (float)Game1.npc[j].width * 0.5f;
                                        float num2 = Game1.npc[j].position.Y + (float)Game1.npc[j].height * 0.5f;
                                        Vector2 vector = new Vector2(Game1.npc[i].position.X + (float)Game1.npc[i].width * 0.5f, Game1.npc[i].position.Y + (float)Game1.npc[i].height * 0.5f);
                                        float num3 = num - vector.X;
                                        float num4 = num2 - vector.Y;
                                        float rotation = (float)Math.Atan2((double)num4, (double)num3) - 1.57f;
                                        bool flag2 = true;
                                        float num5 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
                                        if (num5 > 2000f)
                                        {
                                            flag2 = false;
                                        }
                                        while (flag2)
                                        {
                                            num5 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
                                            if (num5 < 40f)
                                            {
                                                flag2 = false;
                                            }
                                            else
                                            {
                                                num5 = (float)Game1.chain12Texture.Height / num5;
                                                num3 *= num5;
                                                num4 *= num5;
                                                vector.X += num3;
                                                vector.Y += num4;
                                                num3 = num - vector.X;
                                                num4 = num2 - vector.Y;
                                                Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
                                                Game1.spriteBatch.Draw(Game1.chain12Texture, new Vector2(vector.X - Game1.screenPosition.X, vector.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain12Texture.Width, Game1.chain12Texture.Height)), color, rotation, new Vector2((float)Game1.chain12Texture.Width * 0.5f, (float)Game1.chain12Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (Game1.npc[i].type == 263 && Game1.npc[i].aiStyle == 52 && NPC.plantBoss >= 0)
                        {
                            Vector2 vector2 = new Vector2(Game1.npc[i].position.X + (float)(Game1.npc[i].width / 2), Game1.npc[i].position.Y + (float)(Game1.npc[i].height / 2));
                            float num6 = Game1.npc[NPC.plantBoss].Center.X - vector2.X;
                            float num7 = Game1.npc[NPC.plantBoss].Center.Y - vector2.Y;
                            float rotation2 = (float)Math.Atan2((double)num7, (double)num6) - 1.57f;
                            bool flag3 = true;
                            while (flag3)
                            {
                                int num8 = 16;
                                int num9 = 32;
                                float num10 = (float)Math.Sqrt((double)(num6 * num6 + num7 * num7));
                                if (num10 < (float)num9)
                                {
                                    num8 = (int)num10 - num9 + num8;
                                    flag3 = false;
                                }
                                num10 = (float)num8 / num10;
                                num6 *= num10;
                                num7 *= num10;
                                vector2.X += num6;
                                vector2.Y += num7;
                                num6 = Game1.npc[NPC.plantBoss].Center.X - vector2.X;
                                num7 = Game1.npc[NPC.plantBoss].Center.Y - vector2.Y;
                                Microsoft.Xna.Framework.Color color2 = Lighting.GetColor((int)vector2.X / 16, (int)(vector2.Y / 16f));
                                Game1.spriteBatch.Draw(Game1.chain26Texture, new Vector2(vector2.X - Game1.screenPosition.X, vector2.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain26Texture.Width, num8)), color2, rotation2, new Vector2((float)Game1.chain26Texture.Width * 0.5f, (float)Game1.chain26Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                            }
                        }
                        else if (Game1.npc[i].type == 264 && Game1.npc[i].aiStyle == 53 && NPC.plantBoss >= 0)
                        {
                            int num11 = NPC.plantBoss;
                            if (Game1.npc[i].ai[3] > 0f)
                            {
                                num11 = (int)Game1.npc[i].ai[3] - 1;
                            }
                            Vector2 vector3 = new Vector2(Game1.npc[i].position.X + (float)(Game1.npc[i].width / 2), Game1.npc[i].position.Y + (float)(Game1.npc[i].height / 2));
                            float num12 = Game1.npc[num11].Center.X - vector3.X;
                            float num13 = Game1.npc[num11].Center.Y - vector3.Y;
                            float rotation3 = (float)Math.Atan2((double)num13, (double)num12) - 1.57f;
                            bool flag4 = true;
                            while (flag4)
                            {
                                int num14 = 16;
                                int num15 = 32;
                                float num16 = (float)Math.Sqrt((double)(num12 * num12 + num13 * num13));
                                if (num16 < (float)num15)
                                {
                                    num14 = (int)num16 - num15 + num14;
                                    flag4 = false;
                                }
                                num16 = (float)num14 / num16;
                                num12 *= num16;
                                num13 *= num16;
                                vector3.X += num12;
                                vector3.Y += num13;
                                num12 = Game1.npc[num11].Center.X - vector3.X;
                                num13 = Game1.npc[num11].Center.Y - vector3.Y;
                                Microsoft.Xna.Framework.Color color3 = Lighting.GetColor((int)vector3.X / 16, (int)(vector3.Y / 16f));
                                Game1.spriteBatch.Draw(Game1.chain27Texture, new Vector2(vector3.X - Game1.screenPosition.X, vector3.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain27Texture.Width, num14)), color3, rotation3, new Vector2((float)Game1.chain27Texture.Width * 0.5f, (float)Game1.chain27Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                            }
                        }
                        if (rectangle.Intersects(new Microsoft.Xna.Framework.Rectangle((int)Game1.npc[i].position.X, (int)Game1.npc[i].position.Y, Game1.npc[i].width, Game1.npc[i].height)))
                        {
                            this.DrawNPC(i, behindTiles);
                        }
                    }
                }
                catch
                {
                    Game1.npc[i].active = false;
                }
            }
        }
        protected void DrawNPC(int i, bool behindTiles)
        {
            int type = Game1.npc[i].type;
            this.LoadNPC(type);
            if (Game1.npc[i].setFrameSize)
            {
                Game1.npc[i].frame = new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.npcTexture[type].Width, Game1.npcTexture[type].Height / Game1.npcFrameCount[type]);
                Game1.npc[i].setFrameSize = false;
            }
            if (type == 101)
            {
                bool flag = true;
                Vector2 vector = new Vector2(Game1.npc[i].position.X + (float)(Game1.npc[i].width / 2), Game1.npc[i].position.Y + (float)(Game1.npc[i].height / 2));
                float num = Game1.npc[i].ai[0] * 16f + 8f - vector.X;
                float num2 = Game1.npc[i].ai[1] * 16f + 8f - vector.Y;
                float rotation = (float)Math.Atan2((double)num2, (double)num) - 1.57f;
                bool flag2 = true;
                while (flag2)
                {
                    float num3 = 0.75f;
                    int height = 28;
                    float num4 = (float)Math.Sqrt((double)(num * num + num2 * num2));
                    if (num4 < 28f * num3)
                    {
                        height = (int)num4 - 40 + 28;
                        flag2 = false;
                    }
                    num4 = 20f * num3 / num4;
                    num *= num4;
                    num2 *= num4;
                    vector.X += num;
                    vector.Y += num2;
                    num = Game1.npc[i].ai[0] * 16f + 8f - vector.X;
                    num2 = Game1.npc[i].ai[1] * 16f + 8f - vector.Y;
                    Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
                    if (!flag)
                    {
                        flag = true;
                        Game1.spriteBatch.Draw(Game1.chain10Texture, new Vector2(vector.X - Game1.screenPosition.X, vector.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain10Texture.Width, height)), color, rotation, new Vector2((float)Game1.chain10Texture.Width * 0.5f, (float)Game1.chain10Texture.Height * 0.5f), num3, SpriteEffects.None, 0f);
                    }
                    else
                    {
                        flag = false;
                        Game1.spriteBatch.Draw(Game1.chain11Texture, new Vector2(vector.X - Game1.screenPosition.X, vector.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain10Texture.Width, height)), color, rotation, new Vector2((float)Game1.chain10Texture.Width * 0.5f, (float)Game1.chain10Texture.Height * 0.5f), num3, SpriteEffects.None, 0f);
                    }
                }
            }
            else if (Game1.npc[i].aiStyle == 13)
            {
                Vector2 vector2 = new Vector2(Game1.npc[i].position.X + (float)(Game1.npc[i].width / 2), Game1.npc[i].position.Y + (float)(Game1.npc[i].height / 2));
                float num5 = Game1.npc[i].ai[0] * 16f + 8f - vector2.X;
                float num6 = Game1.npc[i].ai[1] * 16f + 8f - vector2.Y;
                float rotation2 = (float)Math.Atan2((double)num6, (double)num5) - 1.57f;
                bool flag3 = true;
                while (flag3)
                {
                    int num7 = 28;
                    int num8 = 40;
                    if (type == 259 || type == 260)
                    {
                        num8 = 20;
                        num7 = 12;
                    }
                    float num9 = (float)Math.Sqrt((double)(num5 * num5 + num6 * num6));
                    if (num9 < (float)num8)
                    {
                        num7 = (int)num9 - num8 + num7;
                        flag3 = false;
                    }
                    num9 = (float)num7 / num9;
                    num5 *= num9;
                    num6 *= num9;
                    vector2.X += num5;
                    vector2.Y += num6;
                    num5 = Game1.npc[i].ai[0] * 16f + 8f - vector2.X;
                    num6 = Game1.npc[i].ai[1] * 16f + 8f - vector2.Y;
                    Microsoft.Xna.Framework.Color color2 = Lighting.GetColor((int)vector2.X / 16, (int)(vector2.Y / 16f));
                    if (type == 259 || type == 260)
                    {
                        color2.B = 255;
                        if (color2.R < 100)
                        {
                            color2.R = 100;
                        }
                        if (color2.G < 150)
                        {
                            color2.G = 150;
                        }
                    }
                    if (type == 56)
                    {
                        Game1.spriteBatch.Draw(Game1.chain5Texture, new Vector2(vector2.X - Game1.screenPosition.X, vector2.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain4Texture.Width, num7)), color2, rotation2, new Vector2((float)Game1.chain4Texture.Width * 0.5f, (float)Game1.chain4Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    }
                    else if (type == 175)
                    {
                        Game1.spriteBatch.Draw(Game1.chain14Texture, new Vector2(vector2.X - Game1.screenPosition.X, vector2.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain14Texture.Width, num7)), color2, rotation2, new Vector2((float)Game1.chain14Texture.Width * 0.5f, (float)Game1.chain14Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    }
                    else if (type == 259)
                    {
                        Game1.spriteBatch.Draw(Game1.chain24Texture, new Vector2(vector2.X - Game1.screenPosition.X, vector2.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain24Texture.Width, num7)), color2, rotation2, new Vector2((float)Game1.chain24Texture.Width * 0.5f, (float)Game1.chain24Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    }
                    else if (type == 260)
                    {
                        Game1.spriteBatch.Draw(Game1.chain25Texture, new Vector2(vector2.X - Game1.screenPosition.X, vector2.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain25Texture.Width, num7)), color2, rotation2, new Vector2((float)Game1.chain25Texture.Width * 0.5f, (float)Game1.chain25Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    }
                    else
                    {
                        Game1.spriteBatch.Draw(Game1.chain4Texture, new Vector2(vector2.X - Game1.screenPosition.X, vector2.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain4Texture.Width, num7)), color2, rotation2, new Vector2((float)Game1.chain4Texture.Width * 0.5f, (float)Game1.chain4Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            if (type == 327)
            {
                float rotation3 = 0f;
                Vector2 vector3 = new Vector2(Game1.npc[i].Center.X, Game1.npc[i].Center.Y + 80f);
                int num10 = (int)Game1.npc[i].localAI[1];
                Microsoft.Xna.Framework.Color color3 = Lighting.GetColor((int)vector3.X / 16, (int)(vector3.Y / 16f));
                Game1.spriteBatch.Draw(Game1.pumpkingCloakTexture, new Vector2(vector3.X - Game1.screenPosition.X, vector3.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.pumpkingCloakTexture.Height / 5 * num10, Game1.pumpkingCloakTexture.Width, Game1.pumpkingCloakTexture.Height / 5)), color3, rotation3, new Vector2((float)Game1.pumpkingCloakTexture.Width * 0.5f, (float)Game1.pumpkingCloakTexture.Height * 0.5f / 5f), 1f, SpriteEffects.None, 0f);
            }
            if (type == 328)
            {
                Vector2 vector4 = new Vector2(Game1.npc[i].position.X + (float)Game1.npc[i].width * 0.5f - 5f * Game1.npc[i].ai[0], Game1.npc[i].position.Y + 20f);
                for (int j = 0; j < 2; j++)
                {
                    float num11 = Game1.npc[(int)Game1.npc[i].ai[1]].position.X + (float)(Game1.npc[(int)Game1.npc[i].ai[1]].width / 2) - vector4.X;
                    float num12 = Game1.npc[(int)Game1.npc[i].ai[1]].position.Y + (float)(Game1.npc[(int)Game1.npc[i].ai[1]].height / 2) - 30f - vector4.Y;
                    float num13;
                    if (j == 0)
                    {
                        num11 -= 200f * Game1.npc[i].ai[0];
                        num12 += 130f;
                        num13 = (float)Math.Sqrt((double)(num11 * num11 + num12 * num12));
                        num13 = 92f / num13;
                        vector4.X += num11 * num13;
                        vector4.Y += num12 * num13;
                    }
                    else
                    {
                        num11 -= 50f * Game1.npc[i].ai[0];
                        num12 += 80f;
                        num13 = (float)Math.Sqrt((double)(num11 * num11 + num12 * num12));
                        num13 = 60f / num13;
                        vector4.X += num11 * num13;
                        vector4.Y += num12 * num13;
                    }
                    float rotation4 = (float)Math.Atan2((double)num12, (double)num11) - 1.57f;
                    Microsoft.Xna.Framework.Color color4 = Lighting.GetColor((int)vector4.X / 16, (int)(vector4.Y / 16f));
                    Game1.spriteBatch.Draw(Game1.pumpkingArmTexture, new Vector2(vector4.X - Game1.screenPosition.X, vector4.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.pumpkingArmTexture.Width, Game1.pumpkingArmTexture.Height)), color4, rotation4, new Vector2((float)Game1.pumpkingArmTexture.Width * 0.5f, (float)Game1.pumpkingArmTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    if (j == 0)
                    {
                        vector4.X += num11 * num13 / 2f;
                        vector4.Y += num12 * num13 / 2f;
                    }
                }
            }
            if (type == 36)
            {
                Vector2 vector5 = new Vector2(Game1.npc[i].position.X + (float)Game1.npc[i].width * 0.5f - 5f * Game1.npc[i].ai[0], Game1.npc[i].position.Y + 20f);
                for (int k = 0; k < 2; k++)
                {
                    float num14 = Game1.npc[(int)Game1.npc[i].ai[1]].position.X + (float)(Game1.npc[(int)Game1.npc[i].ai[1]].width / 2) - vector5.X;
                    float num15 = Game1.npc[(int)Game1.npc[i].ai[1]].position.Y + (float)(Game1.npc[(int)Game1.npc[i].ai[1]].height / 2) - vector5.Y;
                    float num16;
                    if (k == 0)
                    {
                        num14 -= 200f * Game1.npc[i].ai[0];
                        num15 += 130f;
                        num16 = (float)Math.Sqrt((double)(num14 * num14 + num15 * num15));
                        num16 = 92f / num16;
                        vector5.X += num14 * num16;
                        vector5.Y += num15 * num16;
                    }
                    else
                    {
                        num14 -= 50f * Game1.npc[i].ai[0];
                        num15 += 80f;
                        num16 = (float)Math.Sqrt((double)(num14 * num14 + num15 * num15));
                        num16 = 60f / num16;
                        vector5.X += num14 * num16;
                        vector5.Y += num15 * num16;
                    }
                    float rotation5 = (float)Math.Atan2((double)num15, (double)num14) - 1.57f;
                    Microsoft.Xna.Framework.Color color5 = Lighting.GetColor((int)vector5.X / 16, (int)(vector5.Y / 16f));
                    Game1.spriteBatch.Draw(Game1.boneArmTexture, new Vector2(vector5.X - Game1.screenPosition.X, vector5.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.boneArmTexture.Width, Game1.boneArmTexture.Height)), color5, rotation5, new Vector2((float)Game1.boneArmTexture.Width * 0.5f, (float)Game1.boneArmTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    if (k == 0)
                    {
                        vector5.X += num14 * num16 / 2f;
                        vector5.Y += num15 * num16 / 2f;
                    }
                    else if (base.IsActive)
                    {
                        vector5.X += num14 * num16 - 16f;
                        vector5.Y += num15 * num16 - 6f;
                        int num17 = Dust.NewDust(new Vector2(vector5.X, vector5.Y), 30, 10, 5, num14 * 0.02f, num15 * 0.02f, 0, default(Microsoft.Xna.Framework.Color), 2f);
                        Game1.dust[num17].noGravity = true;
                    }
                }
            }
            if (Game1.npc[i].aiStyle == 47)
            {
                Vector2 vector6 = new Vector2(Game1.npc[i].Center.X, Game1.npc[i].Center.Y);
                float num18 = Game1.npc[NPC.golemBoss].Center.X - vector6.X;
                float num19 = Game1.npc[NPC.golemBoss].Center.Y - vector6.Y;
                num19 -= 7f;
                if (type == 247)
                {
                    num18 -= 70f;
                }
                else
                {
                    num18 += 66f;
                }
                float rotation6 = (float)Math.Atan2((double)num19, (double)num18) - 1.57f;
                bool flag4 = true;
                while (flag4)
                {
                    float num20 = (float)Math.Sqrt((double)(num18 * num18 + num19 * num19));
                    if (num20 < 16f)
                    {
                        flag4 = false;
                    }
                    else
                    {
                        num20 = 16f / num20;
                        num18 *= num20;
                        num19 *= num20;
                        vector6.X += num18;
                        vector6.Y += num19;
                        num18 = Game1.npc[NPC.golemBoss].Center.X - vector6.X;
                        num19 = Game1.npc[NPC.golemBoss].Center.Y - vector6.Y;
                        num19 -= 7f;
                        if (type == 247)
                        {
                            num18 -= 70f;
                        }
                        else
                        {
                            num18 += 66f;
                        }
                        Microsoft.Xna.Framework.Color color6 = Lighting.GetColor((int)vector6.X / 16, (int)(vector6.Y / 16f));
                        Game1.spriteBatch.Draw(Game1.chain21Texture, new Vector2(vector6.X - Game1.screenPosition.X, vector6.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain21Texture.Width, Game1.chain21Texture.Height)), color6, rotation6, new Vector2((float)Game1.chain21Texture.Width * 0.5f, (float)Game1.chain21Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            if (Game1.npc[i].aiStyle >= 33 && Game1.npc[i].aiStyle <= 36)
            {
                Vector2 vector7 = new Vector2(Game1.npc[i].position.X + (float)Game1.npc[i].width * 0.5f - 5f * Game1.npc[i].ai[0], Game1.npc[i].position.Y + 20f);
                for (int l = 0; l < 2; l++)
                {
                    float num21 = Game1.npc[(int)Game1.npc[i].ai[1]].position.X + (float)(Game1.npc[(int)Game1.npc[i].ai[1]].width / 2) - vector7.X;
                    float num22 = Game1.npc[(int)Game1.npc[i].ai[1]].position.Y + (float)(Game1.npc[(int)Game1.npc[i].ai[1]].height / 2) - vector7.Y;
                    float num23;
                    if (l == 0)
                    {
                        num21 -= 200f * Game1.npc[i].ai[0];
                        num22 += 130f;
                        num23 = (float)Math.Sqrt((double)(num21 * num21 + num22 * num22));
                        num23 = 92f / num23;
                        vector7.X += num21 * num23;
                        vector7.Y += num22 * num23;
                    }
                    else
                    {
                        num21 -= 50f * Game1.npc[i].ai[0];
                        num22 += 80f;
                        num23 = (float)Math.Sqrt((double)(num21 * num21 + num22 * num22));
                        num23 = 60f / num23;
                        vector7.X += num21 * num23;
                        vector7.Y += num22 * num23;
                    }
                    float rotation7 = (float)Math.Atan2((double)num22, (double)num21) - 1.57f;
                    Microsoft.Xna.Framework.Color color7 = Lighting.GetColor((int)vector7.X / 16, (int)(vector7.Y / 16f));
                    Game1.spriteBatch.Draw(Game1.boneArm2Texture, new Vector2(vector7.X - Game1.screenPosition.X, vector7.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.boneArmTexture.Width, Game1.boneArmTexture.Height)), color7, rotation7, new Vector2((float)Game1.boneArmTexture.Width * 0.5f, (float)Game1.boneArmTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    if (l == 0)
                    {
                        vector7.X += num21 * num23 / 2f;
                        vector7.Y += num22 * num23 / 2f;
                    }
                    else if (base.IsActive)
                    {
                        vector7.X += num21 * num23 - 16f;
                        vector7.Y += num22 * num23 - 6f;
                        int num24 = Dust.NewDust(new Vector2(vector7.X, vector7.Y), 30, 10, 6, num21 * 0.02f, num22 * 0.02f, 0, default(Microsoft.Xna.Framework.Color), 2.5f);
                        Game1.dust[num24].noGravity = true;
                    }
                }
            }
            if (Game1.npc[i].aiStyle == 20)
            {
                Vector2 vector8 = new Vector2(Game1.npc[i].position.X + (float)(Game1.npc[i].width / 2), Game1.npc[i].position.Y + (float)(Game1.npc[i].height / 2));
                float num25 = Game1.npc[i].ai[1] - vector8.X;
                float num26 = Game1.npc[i].ai[2] - vector8.Y;
                float num27 = (float)Math.Atan2((double)num26, (double)num25) - 1.57f;
                Game1.npc[i].rotation = num27;
                bool flag5 = true;
                while (flag5)
                {
                    int height2 = 12;
                    float num28 = (float)Math.Sqrt((double)(num25 * num25 + num26 * num26));
                    if (num28 < 20f)
                    {
                        height2 = (int)num28 - 20 + 12;
                        flag5 = false;
                    }
                    num28 = 12f / num28;
                    num25 *= num28;
                    num26 *= num28;
                    vector8.X += num25;
                    vector8.Y += num26;
                    num25 = Game1.npc[i].ai[1] - vector8.X;
                    num26 = Game1.npc[i].ai[2] - vector8.Y;
                    Microsoft.Xna.Framework.Color color8 = Lighting.GetColor((int)vector8.X / 16, (int)(vector8.Y / 16f));
                    Game1.spriteBatch.Draw(Game1.chainTexture, new Vector2(vector8.X - Game1.screenPosition.X, vector8.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chainTexture.Width, height2)), color8, num27, new Vector2((float)Game1.chainTexture.Width * 0.5f, (float)Game1.chainTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                }
                Game1.spriteBatch.Draw(Game1.spikeBaseTexture, new Vector2(Game1.npc[i].ai[1] - Game1.screenPosition.X, Game1.npc[i].ai[2] - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.spikeBaseTexture.Width, Game1.spikeBaseTexture.Height)), Lighting.GetColor((int)Game1.npc[i].ai[1] / 16, (int)(Game1.npc[i].ai[2] / 16f)), num27 - 0.75f, new Vector2((float)Game1.spikeBaseTexture.Width * 0.5f, (float)Game1.spikeBaseTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
            }
            Microsoft.Xna.Framework.Color color9 = Lighting.GetColor((int)((double)Game1.npc[i].position.X + (double)Game1.npc[i].width * 0.5) / 16, (int)(((double)Game1.npc[i].position.Y + (double)Game1.npc[i].height * 0.5) / 16.0));
            if (type >= 277 && type <= 280)
            {
                if (color9.R < 255)
                {
                    color9.R = 255;
                }
                if (color9.G < 175)
                {
                    color9.G = 175;
                }
            }
            if (type == -4)
            {
                int num29 = (int)color9.R;
                int num30 = (int)color9.G;
                int num31 = (int)color9.B;
                num29 *= 2;
                if (num29 > 255)
                {
                    num29 = 255;
                }
                num30 *= 2;
                if (num30 > 255)
                {
                    num30 = 255;
                }
                num31 *= 2;
                if (num31 > 255)
                {
                    num31 = 255;
                }
                color9 = new Microsoft.Xna.Framework.Color(num29, num30, num31);
            }
            if (behindTiles && type != 113 && type != 114)
            {
                int num32 = (int)((Game1.npc[i].position.X - 8f) / 16f);
                int num33 = (int)((Game1.npc[i].position.X + (float)Game1.npc[i].width + 8f) / 16f);
                int num34 = (int)((Game1.npc[i].position.Y - 8f) / 16f);
                int num35 = (int)((Game1.npc[i].position.Y + (float)Game1.npc[i].height + 8f) / 16f);
                for (int m = num32; m <= num33; m++)
                {
                    for (int n = num34; n <= num35; n++)
                    {
                        if (Lighting.Brightness(m, n) == 0f)
                        {
                            color9 = Microsoft.Xna.Framework.Color.Black;
                        }
                    }
                }
            }
            float num36 = 1f;
            float num37 = 1f;
            float num38 = 1f;
            float a = 1f;
            if (Game1.npc[i].poisoned)
            {
                if (Game1.rand.Next(30) == 0)
                {
                    int num39 = Dust.NewDust(Game1.npc[i].position, Game1.npc[i].width, Game1.npc[i].height, 46, 0f, 0f, 120, default(Microsoft.Xna.Framework.Color), 0.2f);
                    Game1.dust[num39].noGravity = true;
                    Game1.dust[num39].fadeIn = 1.9f;
                }
                num36 *= 0.65f;
                num38 *= 0.75f;
                color9 = Game1.buffColor(color9, num36, num37, num38, a);
            }
            if (Game1.npc[i].venom)
            {
                if (Game1.rand.Next(10) == 0)
                {
                    int num40 = Dust.NewDust(Game1.npc[i].position, Game1.npc[i].width, Game1.npc[i].height, 171, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 0.5f);
                    Game1.dust[num40].noGravity = true;
                    Game1.dust[num40].fadeIn = 1.5f;
                }
                num37 *= 0.45f;
                num36 *= 0.75f;
                color9 = Game1.buffColor(color9, num36, num37, num38, a);
            }
            if (Game1.npc[i].midas)
            {
                num38 *= 0.3f;
                num36 *= 0.85f;
                color9 = Game1.buffColor(color9, num36, num37, num38, a);
            }
            if (Game1.npc[i].shadowFlame && Game1.rand.Next(5) < 4)
            {
                int num41 = Dust.NewDust(new Vector2(Game1.npc[i].position.X - 2f, Game1.npc[i].position.Y - 2f), Game1.npc[i].width + 4, Game1.npc[i].height + 4, 27, Game1.npc[i].velocity.X * 0.4f, Game1.npc[i].velocity.Y * 0.4f, 180, default(Microsoft.Xna.Framework.Color), 1.95f);
                Game1.dust[num41].noGravity = true;
                Game1.dust[num41].velocity *= 0.75f;
                Dust expr_1C79_cp_0 = Game1.dust[num41];
                expr_1C79_cp_0.velocity.X = expr_1C79_cp_0.velocity.X * 0.75f;
                Dust expr_1C97_cp_0 = Game1.dust[num41];
                expr_1C97_cp_0.velocity.Y = expr_1C97_cp_0.velocity.Y - 1f;
                if (Game1.rand.Next(4) == 0)
                {
                    Game1.dust[num41].noGravity = false;
                    Game1.dust[num41].scale *= 0.5f;
                }
            }
            if (Game1.npc[i].onFire)
            {
                if (Game1.rand.Next(4) < 3)
                {
                    int num42 = Dust.NewDust(new Vector2(Game1.npc[i].position.X - 2f, Game1.npc[i].position.Y - 2f), Game1.npc[i].width + 4, Game1.npc[i].height + 4, 6, Game1.npc[i].velocity.X * 0.4f, Game1.npc[i].velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 3.5f);
                    Game1.dust[num42].noGravity = true;
                    Game1.dust[num42].velocity *= 1.8f;
                    Dust expr_1DD0_cp_0 = Game1.dust[num42];
                    expr_1DD0_cp_0.velocity.Y = expr_1DD0_cp_0.velocity.Y - 0.5f;
                    if (Game1.rand.Next(4) == 0)
                    {
                        Game1.dust[num42].noGravity = false;
                        Game1.dust[num42].scale *= 0.5f;
                    }
                }
                Lighting.AddLight((int)(Game1.npc[i].position.X / 16f), (int)(Game1.npc[i].position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
            }
            if (Game1.npc[i].daybreak)
            {
                if (Game1.rand.Next(4) < 3)
                {
                    int num43 = Dust.NewDust(new Vector2(Game1.npc[i].position.X - 2f, Game1.npc[i].position.Y - 2f), Game1.npc[i].width + 4, Game1.npc[i].height + 4, 158, Game1.npc[i].velocity.X * 0.4f, Game1.npc[i].velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 3.5f);
                    Game1.dust[num43].noGravity = true;
                    Game1.dust[num43].velocity *= 2.8f;
                    Dust expr_1F57_cp_0 = Game1.dust[num43];
                    expr_1F57_cp_0.velocity.Y = expr_1F57_cp_0.velocity.Y - 0.5f;
                    if (Game1.rand.Next(4) == 0)
                    {
                        Game1.dust[num43].noGravity = false;
                        Game1.dust[num43].scale *= 0.5f;
                    }
                }
                Lighting.AddLight((int)(Game1.npc[i].position.X / 16f), (int)(Game1.npc[i].position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
            }
            if (Game1.npc[i].dryadWard && Game1.npc[i].velocity.X != 0f && Game1.rand.Next(4) == 0)
            {
                int num44 = Dust.NewDust(new Vector2(Game1.npc[i].position.X - 2f, Game1.npc[i].position.Y + (float)Game1.npc[i].height - 2f), Game1.npc[i].width + 4, 4, 163, Game1.npc[i].velocity.X * 0.4f, Game1.npc[i].velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 1.5f);
                Game1.dust[num44].noGravity = true;
                Game1.dust[num44].noLight = true;
                Game1.dust[num44].velocity *= 0f;
            }
            if (Game1.npc[i].dryadBane && Game1.rand.Next(4) == 0)
            {
                int num45 = Dust.NewDust(new Vector2(Game1.npc[i].position.X - 2f, Game1.npc[i].position.Y), Game1.npc[i].width + 4, Game1.npc[i].height, 163, Game1.npc[i].velocity.X * 0.4f, Game1.npc[i].velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 1.5f);
                Game1.dust[num45].noGravity = true;
                Game1.dust[num45].velocity *= new Vector2(Game1.rand.NextFloat() * 4f - 2f, 0f);
                Game1.dust[num45].noLight = true;
            }
            if (Game1.npc[i].loveStruck && Game1.rand.Next(5) == 0)
            {
                Vector2 value = new Vector2((float)Game1.rand.Next(-10, 11), (float)Game1.rand.Next(-10, 11));
                value.Normalize();
                value.X *= 0.66f;
                int num46 = Gore.NewGore(Game1.npc[i].position + new Vector2((float)Game1.rand.Next(Game1.npc[i].width + 1), (float)Game1.rand.Next(Game1.npc[i].height + 1)), value * (float)Game1.rand.Next(3, 6) * 0.33f, 331, (float)Game1.rand.Next(40, 121) * 0.01f);
                Game1.gore[num46].sticky = false;
                Game1.gore[num46].velocity *= 0.4f;
                Gore expr_2324_cp_0 = Game1.gore[num46];
                expr_2324_cp_0.velocity.Y = expr_2324_cp_0.velocity.Y - 0.6f;
            }
            if (Game1.npc[i].stinky)
            {
                num36 *= 0.7f;
                num38 *= 0.55f;
                color9 = Game1.buffColor(color9, num36, num37, num38, a);
                if (Game1.rand.Next(5) == 0)
                {
                    Vector2 value2 = new Vector2((float)Game1.rand.Next(-10, 11), (float)Game1.rand.Next(-10, 11));
                    value2.Normalize();
                    value2.X *= 0.66f;
                    value2.Y = Math.Abs(value2.Y);
                    Vector2 vector9 = value2 * (float)Game1.rand.Next(3, 5) * 0.25f;
                    int num47 = Dust.NewDust(Game1.npc[i].position, Game1.npc[i].width, Game1.npc[i].height, 188, vector9.X, vector9.Y * 0.5f, 100, default(Microsoft.Xna.Framework.Color), 1.5f);
                    Game1.dust[num47].velocity *= 0.1f;
                    Dust expr_2470_cp_0 = Game1.dust[num47];
                    expr_2470_cp_0.velocity.Y = expr_2470_cp_0.velocity.Y - 0.5f;
                }
            }
            if (Game1.npc[i].dripping && Game1.rand.Next(4) != 0)
            {
                Vector2 position = Game1.npc[i].position;
                position.X -= 2f;
                position.Y -= 2f;
                if (Game1.rand.Next(2) == 0)
                {
                    int num48 = Dust.NewDust(position, Game1.npc[i].width + 4, Game1.npc[i].height + 2, 211, 0f, 0f, 50, default(Microsoft.Xna.Framework.Color), 0.8f);
                    if (Game1.rand.Next(2) == 0)
                    {
                        Game1.dust[num48].alpha += 25;
                    }
                    if (Game1.rand.Next(2) == 0)
                    {
                        Game1.dust[num48].alpha += 25;
                    }
                    Game1.dust[num48].noLight = true;
                    Game1.dust[num48].velocity *= 0.2f;
                    Dust expr_25AD_cp_0 = Game1.dust[num48];
                    expr_25AD_cp_0.velocity.Y = expr_25AD_cp_0.velocity.Y + 0.2f;
                    Game1.dust[num48].velocity += Game1.npc[i].velocity;
                }
                else
                {
                    int num49 = Dust.NewDust(position, Game1.npc[i].width + 8, Game1.npc[i].height + 8, 211, 0f, 0f, 50, default(Microsoft.Xna.Framework.Color), 1.1f);
                    if (Game1.rand.Next(2) == 0)
                    {
                        Game1.dust[num49].alpha += 25;
                    }
                    if (Game1.rand.Next(2) == 0)
                    {
                        Game1.dust[num49].alpha += 25;
                    }
                    Game1.dust[num49].noLight = true;
                    Game1.dust[num49].noGravity = true;
                    Game1.dust[num49].velocity *= 0.2f;
                    Dust expr_26BC_cp_0 = Game1.dust[num49];
                    expr_26BC_cp_0.velocity.Y = expr_26BC_cp_0.velocity.Y + 1f;
                    Game1.dust[num49].velocity += Game1.npc[i].velocity;
                }
            }
            if (Game1.npc[i].drippingSlime)
            {
                if (Game1.rand.Next(4) != 0)
                {
                    int alpha = 175;
                    Microsoft.Xna.Framework.Color newColor = new Microsoft.Xna.Framework.Color(0, 80, 255, 100);
                    Vector2 position2 = Game1.npc[i].position;
                    position2.X -= 2f;
                    position2.Y -= 2f;
                    if (Game1.rand.Next(2) == 0)
                    {
                        int num50 = Dust.NewDust(position2, Game1.npc[i].width + 4, Game1.npc[i].height + 2, 4, 0f, 0f, alpha, newColor, 1.4f);
                        if (Game1.rand.Next(2) == 0)
                        {
                            Game1.dust[num50].alpha += 25;
                        }
                        if (Game1.rand.Next(2) == 0)
                        {
                            Game1.dust[num50].alpha += 25;
                        }
                        Game1.dust[num50].noLight = true;
                        Game1.dust[num50].velocity *= 0.2f;
                        Dust expr_2825_cp_0 = Game1.dust[num50];
                        expr_2825_cp_0.velocity.Y = expr_2825_cp_0.velocity.Y + 0.2f;
                        Game1.dust[num50].velocity += Game1.npc[i].velocity;
                    }
                }
                num36 *= 0.8f;
                num37 *= 0.8f;
                color9 = Game1.buffColor(color9, num36, num37, num38, a);
            }
            if (Game1.npc[i].ichor)
            {
                color9 = new Microsoft.Xna.Framework.Color(255, 255, 0, 255);
            }
            if (Game1.npc[i].onFrostBurn)
            {
                if (Game1.rand.Next(4) < 3)
                {
                    int num51 = Dust.NewDust(new Vector2(Game1.npc[i].position.X - 2f, Game1.npc[i].position.Y - 2f), Game1.npc[i].width + 4, Game1.npc[i].height + 4, 135, Game1.npc[i].velocity.X * 0.4f, Game1.npc[i].velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 3.5f);
                    Game1.dust[num51].noGravity = true;
                    Game1.dust[num51].velocity *= 1.8f;
                    Dust expr_299C_cp_0 = Game1.dust[num51];
                    expr_299C_cp_0.velocity.Y = expr_299C_cp_0.velocity.Y - 0.5f;
                    if (Game1.rand.Next(4) == 0)
                    {
                        Game1.dust[num51].noGravity = false;
                        Game1.dust[num51].scale *= 0.5f;
                    }
                }
                Lighting.AddLight((int)(Game1.npc[i].position.X / 16f), (int)(Game1.npc[i].position.Y / 16f + 1f), 0.1f, 0.6f, 1f);
            }
            if (Game1.npc[i].onFire2)
            {
                if (Game1.rand.Next(4) < 3)
                {
                    int num52 = Dust.NewDust(new Vector2(Game1.npc[i].position.X - 2f, Game1.npc[i].position.Y - 2f), Game1.npc[i].width + 4, Game1.npc[i].height + 4, 75, Game1.npc[i].velocity.X * 0.4f, Game1.npc[i].velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 3.5f);
                    Game1.dust[num52].noGravity = true;
                    Game1.dust[num52].velocity *= 1.8f;
                    Dust expr_2B20_cp_0 = Game1.dust[num52];
                    expr_2B20_cp_0.velocity.Y = expr_2B20_cp_0.velocity.Y - 0.5f;
                    if (Game1.rand.Next(4) == 0)
                    {
                        Game1.dust[num52].noGravity = false;
                        Game1.dust[num52].scale *= 0.5f;
                    }
                }
                Lighting.AddLight((int)(Game1.npc[i].position.X / 16f), (int)(Game1.npc[i].position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
            }
            if (Game1.player[Game1.myPlayer].detectCreature && Game1.npc[i].lifeMax > 1)
            {
                byte b;
                byte b2;
                byte b3;
                if (Game1.npc[i].friendly || Game1.npc[i].catchItem > 0 || (Game1.npc[i].damage == 0 && Game1.npc[i].lifeMax == 5))
                {
                    b = 50;
                    b2 = 255;
                    b3 = 50;
                }
                else
                {
                    b = 255;
                    b2 = 50;
                    b3 = 50;
                }
                if (color9.R < b)
                {
                    color9.R = b;
                }
                if (color9.G < b2)
                {
                    color9.G = b2;
                }
                if (color9.B < b3)
                {
                    color9.B = b3;
                }
            }
            if (type == 50)
            {
                Vector2 zero = Vector2.Zero;
                float num53 = 0f;
                zero.Y -= Game1.npc[i].velocity.Y;
                zero.X -= Game1.npc[i].velocity.X * 2f;
                num53 += Game1.npc[i].velocity.X * 0.05f;
                if (Game1.npc[i].frame.Y == 120)
                {
                    zero.Y += 2f;
                }
                if (Game1.npc[i].frame.Y == 360)
                {
                    zero.Y -= 2f;
                }
                if (Game1.npc[i].frame.Y == 480)
                {
                    zero.Y -= 6f;
                }
                Game1.spriteBatch.Draw(Game1.ninjaTexture, new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) + zero.X, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)(Game1.npc[i].height / 2) + zero.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.ninjaTexture.Width, Game1.ninjaTexture.Height)), color9, num53, new Vector2((float)(Game1.ninjaTexture.Width / 2), (float)(Game1.ninjaTexture.Height / 2)), 1f, SpriteEffects.None, 0f);
            }
            if (type == 71)
            {
                Vector2 zero2 = Vector2.Zero;
                float num54 = 0f;
                zero2.Y -= Game1.npc[i].velocity.Y * 0.3f;
                zero2.X -= Game1.npc[i].velocity.X * 0.6f;
                num54 += Game1.npc[i].velocity.X * 0.09f;
                if (Game1.npc[i].frame.Y == 120)
                {
                    zero2.Y += 2f;
                }
                if (Game1.npc[i].frame.Y == 360)
                {
                    zero2.Y -= 2f;
                }
                if (Game1.npc[i].frame.Y == 480)
                {
                    zero2.Y -= 6f;
                }
                Game1.spriteBatch.Draw(Game1.itemTexture[327], new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) + zero2.X, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)(Game1.npc[i].height / 2) + zero2.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.itemTexture[327].Width, Game1.itemTexture[327].Height)), color9, num54, new Vector2((float)(Game1.itemTexture[327].Width / 2), (float)(Game1.itemTexture[327].Height / 2)), 1f, SpriteEffects.None, 0f);
            }
            if (type == 69)
            {
                Game1.spriteBatch.Draw(Game1.antLionTexture, new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2), Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height + 14f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.antLionTexture.Width, Game1.antLionTexture.Height)), color9, -Game1.npc[i].rotation * 0.3f, new Vector2((float)(Game1.antLionTexture.Width / 2), (float)(Game1.antLionTexture.Height / 2)), 1f, SpriteEffects.None, 0f);
            }
            if (type == 1 && Game1.npc[i].ai[1] > 0f)
            {
                int num55 = (int)Game1.npc[i].ai[1];
                float num56 = 1f;
                float num57 = 22f * Game1.npc[i].scale;
                float num58 = 18f * Game1.npc[i].scale;
                float num59 = (float)Game1.itemTexture[num55].Width;
                float num60 = (float)Game1.itemTexture[num55].Height;
                if (num59 > num57)
                {
                    num56 *= num57 / num59;
                    num59 *= num56;
                    num60 *= num56;
                }
                if (num60 > num58)
                {
                    num56 *= num58 / num60;
                    num59 *= num56;
                    num60 *= num56;
                }
                float num61 = -1f;
                float num62 = 1f;
                int num63 = Game1.npc[i].frame.Y / (Game1.npcTexture[type].Height / Game1.npcFrameCount[type]);
                num62 -= (float)num63;
                num61 += (float)(num63 * 2);
                float num64 = 0.2f;
                num64 -= 0.3f * (float)num63;
                Game1.spriteBatch.Draw(Game1.itemTexture[num55], new Vector2(Game1.npc[i].Center.X - Game1.screenPosition.X + num61, Game1.npc[i].Center.Y - Game1.screenPosition.Y + Game1.npc[i].gfxOffY + num62), null, color9, num64, new Vector2((float)(Game1.itemTexture[num55].Width / 2), (float)(Game1.itemTexture[num55].Height / 2)), num56, SpriteEffects.None, 0f);
            }
            float num65 = 0f;
            float num66 = Game1.NPCAddHeight(i);
            Vector2 vector10 = new Vector2((float)(Game1.npcTexture[type].Width / 2), (float)(Game1.npcTexture[type].Height / Game1.npcFrameCount[type] / 2));
            if (type == 108 || type == 124)
            {
                num65 = 2f;
            }
            else if (type == 357)
            {
                num65 = Game1.npc[i].localAI[0];
            }
            else if (type == 467)
            {
                num65 = 7f;
            }
            else if (type == 537)
            {
                num65 = 2f;
            }
            else if (type == 509)
            {
                num65 = -6f;
            }
            else if (type == 490)
            {
                num65 = 4f;
            }
            else if (type == 484)
            {
                num65 = 2f;
            }
            else if (type == 483)
            {
                num65 = 14f;
            }
            else if (type == 477)
            {
                num66 = 22f;
            }
            else if (type == 478)
            {
                num65 -= 2f;
            }
            else if (type == 469 && Game1.npc[i].ai[2] == 1f)
            {
                num65 = 14f;
            }
            else if (type == 4)
            {
                vector10 = new Vector2(55f, 107f);
            }
            else if (type == 125)
            {
                vector10 = new Vector2(55f, 107f);
            }
            else if (type == 126)
            {
                vector10 = new Vector2(55f, 107f);
            }
            else if (type == 63 || type == 64 || type == 103)
            {
                vector10.Y += 4f;
            }
            else if (type == 69)
            {
                vector10.Y += 8f;
            }
            else if (type == 262)
            {
                vector10.Y = 77f;
                num66 += 26f;
            }
            else if (type == 264)
            {
                vector10.Y = 21f;
                num66 += 2f;
            }
            else if (type == 266)
            {
                num66 += 50f;
            }
            else if (type == 268)
            {
                num66 += 16f;
            }
            else if (type == 288)
            {
                num66 += 6f;
            }
            if (Game1.npc[i].aiStyle == 10 || type == 72)
            {
                color9 = Microsoft.Xna.Framework.Color.White;
            }
            SpriteEffects spriteEffects = SpriteEffects.None;
            if (Game1.npc[i].spriteDirection == 1)
            {
                spriteEffects = SpriteEffects.FlipHorizontally;
            }
            if (type == 124 && Game1.npc[i].localAI[0] == 0f)
            {
                int num67 = 0;
                if (Game1.npc[i].frame.Y > 56)
                {
                    num67 += 4;
                }
                num67 += Game1.npc[i].frame.Y / 56;
                if (num67 >= Game1.OffsetsPlayerHeadgear.Length)
                {
                    num67 = 0;
                }
                float y = Game1.OffsetsPlayerHeadgear[num67].Y;
                this.LoadProjectile(582);
                Texture2D texture2D = Game1.projectileTexture[582];
                Vector2 vector11 = Game1.npc[i].Center - Game1.screenPosition;
                vector11 -= new Vector2((float)texture2D.Width, (float)(texture2D.Height / Game1.npcFrameCount[type])) * Game1.npc[i].scale / 2f;
                vector11 += new Vector2(0f, num65 + num66 + Game1.npc[i].gfxOffY + y);
                vector11 += new Vector2((float)(-(float)Game1.npc[i].spriteDirection * 2), -2f);
                Game1.spriteBatch.Draw(texture2D, vector11, null, Game1.npc[i].GetAlpha(color9), Game1.npc[i].rotation, texture2D.Size() * new Vector2(0f, 0.5f), Game1.npc[i].scale, spriteEffects, 0f);
            }
            if (type == 427 || type == 426 || type == 428 || type == 509 || type == 521 || type == 523)
            {
                Texture2D texture2D2 = Game1.npcTexture[type];
                Microsoft.Xna.Framework.Color value3 = Microsoft.Xna.Framework.Color.White;
                float amount = 0f;
                float amount2 = 0f;
                int num68 = 0;
                int num69 = 0;
                int num70 = 1;
                int num71 = 15;
                int num72 = 0;
                float scale = Game1.npc[i].scale;
                float value4 = Game1.npc[i].scale;
                int num73 = 0;
                float num74 = 0f;
                float scaleFactor = 0f;
                float num75 = 0f;
                Microsoft.Xna.Framework.Color color10 = color9;
                int num76 = type;
                switch (num76)
                {
                    case 426:
                        num73 = 4;
                        scaleFactor = 4f;
                        num74 = (float)Math.Cos((double)(Game1.GlobalTime % 1.2f / 1.2f * 6.28318548f)) / 2f + 0.5f;
                        value3 = Microsoft.Xna.Framework.Color.Turquoise;
                        amount = 0.5f;
                        num68 = 6;
                        num69 = 2;
                        num71 = num68;
                        break;
                    case 427:
                        num68 = 8;
                        num69 = 2;
                        num71 = num68 * 3;
                        break;
                    default:
                        if (num76 != 509)
                        {
                            switch (num76)
                            {
                                case 521:
                                    num68 = 10;
                                    num69 = 2;
                                    num71 = num68;
                                    num72 = 1;
                                    value4 = 0.3f;
                                    break;
                                case 523:
                                    num73 = 3;
                                    scaleFactor = 10f * Game1.npc[i].scale;
                                    amount = 0.5f;
                                    amount2 = 0.8f;
                                    value3 = Microsoft.Xna.Framework.Color.HotPink;
                                    value3.A = 128;
                                    num75 = Game1.npc[i].localAI[0];
                                    num74 = Game1.npc[i].localAI[1];
                                    break;
                            }
                        }
                        else
                        {
                            num68 = 6;
                            num69 = 2;
                            num71 = num68 * 3;
                        }
                        break;
                }
                for (int num77 = num70; num77 < num68; num77 += num69)
                {
                    Vector2 arg_388D_0 = Game1.npc[i].oldPos[num77];
                    Microsoft.Xna.Framework.Color color11 = color10;
                    color11 = Microsoft.Xna.Framework.Color.Lerp(color11, value3, amount);
                    color11 = Game1.npc[i].GetAlpha(color11);
                    color11 *= (float)(num68 - num77) / (float)num71;
                    float arg_38CE_0 = Game1.npc[i].rotation;
                    if (num72 == 1)
                    {
                        float arg_38E3_0 = Game1.npc[i].oldRot[num77];
                    }
                    float scale2 = MathHelper.Lerp(scale, value4, 1f - (float)(num68 - num77) / (float)num71);
                    Vector2 vector12 = Game1.npc[i].oldPos[num77] + new Vector2((float)Game1.npc[i].width, (float)Game1.npc[i].height) / 2f - Game1.screenPosition;
                    vector12 -= new Vector2((float)texture2D2.Width, (float)(texture2D2.Height / Game1.npcFrameCount[type])) * Game1.npc[i].scale / 2f;
                    vector12 += vector10 * Game1.npc[i].scale + new Vector2(0f, num65 + num66 + Game1.npc[i].gfxOffY);
                    Game1.spriteBatch.Draw(texture2D2, vector12, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), color11, Game1.npc[i].rotation, vector10, scale2, spriteEffects, 0f);
                }
                for (int num78 = 0; num78 < num73; num78++)
                {
                    Microsoft.Xna.Framework.Color color12 = color9;
                    color12 = Microsoft.Xna.Framework.Color.Lerp(color12, value3, amount);
                    color12 = Game1.npc[i].GetAlpha(color12);
                    color12 = Microsoft.Xna.Framework.Color.Lerp(color12, value3, amount2);
                    color12 *= 1f - num74;
                    Vector2 vector13 = Game1.npc[i].Center + ((float)num78 / (float)num73 * 6.28318548f + Game1.npc[i].rotation + num75).ToRotationVector2() * scaleFactor * num74 - Game1.screenPosition;
                    vector13 -= new Vector2((float)texture2D2.Width, (float)(texture2D2.Height / Game1.npcFrameCount[type])) * Game1.npc[i].scale / 2f;
                    vector13 += vector10 * Game1.npc[i].scale + new Vector2(0f, num65 + num66 + Game1.npc[i].gfxOffY);
                    Game1.spriteBatch.Draw(texture2D2, vector13, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), color12, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                }
                Vector2 vector14 = Game1.npc[i].Center - Game1.screenPosition;
                vector14 -= new Vector2((float)texture2D2.Width, (float)(texture2D2.Height / Game1.npcFrameCount[type])) * Game1.npc[i].scale / 2f;
                vector14 += vector10 * Game1.npc[i].scale + new Vector2(0f, num65 + num66 + Game1.npc[i].gfxOffY);
                Game1.spriteBatch.Draw(texture2D2, vector14, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), Game1.npc[i].GetAlpha(color9), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                if (type == 427)
                {
                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[152], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                    return;
                }
                if (type == 426)
                {
                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[153], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                    return;
                }
            }
            else
            {
                if (type == 371 || (type >= 454 && type <= 459))
                {
                    Texture2D texture2D3 = Game1.npcTexture[type];
                    Vector2 vector15 = Game1.npc[i].Center - Game1.screenPosition;
                    vector15 -= new Vector2((float)texture2D3.Width, (float)(texture2D3.Height / Game1.npcFrameCount[type])) * Game1.npc[i].scale / 2f;
                    vector15 += vector10 * Game1.npc[i].scale + new Vector2(0f, num65 + num66 + Game1.npc[i].gfxOffY);
                    Game1.spriteBatch.Draw(texture2D3, vector15, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), Game1.npc[i].GetAlpha(color9), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                    return;
                }
                if (type == 493 || type == 507 || type == 422 || type == 517)
                {
                    Texture2D texture2D4 = Game1.npcTexture[type];
                    Vector2 vector16 = Game1.npc[i].Center - Game1.screenPosition;
                    Vector2 value5 = vector16 - new Vector2(300f, 310f);
                    vector16 -= new Vector2((float)texture2D4.Width, (float)(texture2D4.Height / Game1.npcFrameCount[type])) * Game1.npc[i].scale / 2f;
                    vector16 += vector10 * Game1.npc[i].scale + new Vector2(0f, num65 + num66 + Game1.npc[i].gfxOffY);
                    Game1.spriteBatch.Draw(texture2D4, vector16, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), Game1.npc[i].GetAlpha(color9), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                    if (type == 493)
                    {
                        texture2D4 = Game1.glowMaskTexture[132];
                        float scaleFactor2 = 4f + (Game1.npc[i].GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 4f;
                        for (int num79 = 0; num79 < 4; num79++)
                        {
                            Game1.spriteBatch.Draw(texture2D4, vector16 + Game1.npc[i].velocity.RotatedBy((double)((float)num79 * 1.57079637f), default(Vector2)) * scaleFactor2, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0) * Game1.npc[i].Opacity, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                        }
                    }
                    else if (type == 507)
                    {
                        texture2D4 = Game1.glowMaskTexture[143];
                        float scaleFactor3 = 4f + (Game1.npc[i].GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 4f;
                        for (int num80 = 0; num80 < 4; num80++)
                        {
                            Game1.spriteBatch.Draw(texture2D4, vector16 + Game1.npc[i].velocity.RotatedBy((double)((float)num80 * 1.57079637f), default(Vector2)) * scaleFactor3, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0) * Game1.npc[i].Opacity, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                        }
                    }
                    else if (type == 422)
                    {
                        texture2D4 = Game1.glowMaskTexture[149];
                        float scaleFactor4 = 4f + (Game1.npc[i].GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 4f;
                        for (int num81 = 0; num81 < 4; num81++)
                        {
                            Game1.spriteBatch.Draw(texture2D4, vector16 + Game1.npc[i].velocity.RotatedBy((double)((float)num81 * 1.57079637f), default(Vector2)) * scaleFactor4, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0) * Game1.npc[i].Opacity, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                        }
                    }
                    else if (type == 517)
                    {
                        texture2D4 = Game1.glowMaskTexture[162];
                        float scaleFactor5 = 2f + (Game1.npc[i].GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 9f;
                        for (int num82 = 0; num82 < 4; num82++)
                        {
                            Game1.spriteBatch.Draw(texture2D4, vector16 + Game1.npc[i].velocity.RotatedBy((double)((float)num82 * 1.57079637f), default(Vector2)) * scaleFactor5 + Vector2.UnitX * 2f, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0) * Game1.npc[i].Opacity, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                        }
                    }
                    int num83 = 0;
                    string key = "";
                    int num76 = type;
                    if (num76 <= 493)
                    {
                        if (num76 != 422)
                        {
                            if (num76 == 493)
                            {
                                num83 = NPC.ShieldStrengthTowerStardust;
                                key = "Stardust";
                            }
                        }
                        else
                        {
                            num83 = NPC.ShieldStrengthTowerVortex;
                            key = "Vortex";
                        }
                    }
                    else if (num76 != 507)
                    {
                        if (num76 == 517)
                        {
                            num83 = NPC.ShieldStrengthTowerSolar;
                            key = "Solar";
                        }
                    }
                    else
                    {
                        num83 = NPC.ShieldStrengthTowerNebula;
                        key = "Nebula";
                    }
                    float num84 = (float)num83 / (float)NPC.ShieldStrengthTowerMax;
                    if (num83 > 0)
                    {
                        Game1.spriteBatch.End();
                        Game1.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.PointWrap, DepthStencilState.Default, RasterizerState.CullNone);
                        float num85 = 0f;
                        if (Game1.npc[i].ai[3] > 0f && Game1.npc[i].ai[3] <= 30f)
                        {
                            num85 = 1f - Game1.npc[i].ai[3] / 30f;
                        }
                        Filters.Scene[key].GetShader().UseIntensity(1f + num85).UseProgress(0f);
                        DrawData value6 = new DrawData(TextureManager.Load("Images/Misc/Perlin"), value5 + new Vector2(300f, 300f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 600, 600)), Microsoft.Xna.Framework.Color.White * (num84 * 0.8f + 0.2f), Game1.npc[i].rotation, new Vector2(300f, 300f), Game1.npc[i].scale * (1f + num85 * 0.05f), spriteEffects, 0);
                        GameShaders.Misc["ForceField"].UseColor(new Vector3(1f + num85 * 0.5f));
                        GameShaders.Misc["ForceField"].Apply(new DrawData?(value6));
                        value6.Draw(Game1.spriteBatch);
                        Game1.spriteBatch.End();
                        Game1.spriteBatch.Begin();
                        return;
                    }
                    if (Game1.npc[i].ai[3] > 0f)
                    {
                        Game1.spriteBatch.End();
                        Game1.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.PointWrap, DepthStencilState.Default, RasterizerState.CullNone);
                        float num86 = Game1.npc[i].ai[3] / 120f;
                        float num87 = Math.Min(Game1.npc[i].ai[3] / 30f, 1f);
                        Filters.Scene[key].GetShader().UseIntensity(Math.Min(5f, 15f * num86) + 1f).UseProgress(num86);
                        DrawData value7 = new DrawData(TextureManager.Load("Images/Misc/Perlin"), value5 + new Vector2(300f, 300f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 600, 600)), new Microsoft.Xna.Framework.Color(new Vector4(1f - (float)Math.Sqrt((double)num87))), Game1.npc[i].rotation, new Vector2(300f, 300f), Game1.npc[i].scale * (1f + num87), spriteEffects, 0);
                        GameShaders.Misc["ForceField"].UseColor(new Vector3(2f));
                        GameShaders.Misc["ForceField"].Apply(new DrawData?(value7));
                        value7.Draw(Game1.spriteBatch);
                        Game1.spriteBatch.End();
                        Game1.spriteBatch.Begin();
                        return;
                    }
                    Filters.Scene[key].GetShader().UseIntensity(0f).UseProgress(0f);
                    return;
                }
                else
                {
                    if (type == 402)
                    {
                        this.LoadNPC(403);
                        this.LoadNPC(404);
                        NPC nPC = Game1.npc[i];
                        Texture2D texture2D5 = Game1.npcTexture[nPC.type];
                        Vector2 vector17 = nPC.Center - Game1.screenPosition;
                        vector17 -= new Vector2((float)texture2D5.Width, (float)(texture2D5.Height / Game1.npcFrameCount[nPC.type])) * nPC.scale / 2f;
                        vector17 += vector10 * nPC.scale + new Vector2(0f, num65 + num66 + nPC.gfxOffY);
                        int num88 = 0;
                        float num89 = 2f / (float)nPC.oldPos.Length * 0.7f;
                        int num90 = nPC.oldPos.Length - 1;
                        while ((float)num90 >= 1f)
                        {
                            if (num88 == 0)
                            {
                                texture2D5 = Game1.npcTexture[404];
                            }
                            else
                            {
                                texture2D5 = Game1.npcTexture[403];
                            }
                            Game1.spriteBatch.Draw(texture2D5, vector17 + nPC.oldPos[num90] - nPC.position, null, nPC.GetAlpha(color9) * (0.8f - num89 * (float)num90 / 2f), nPC.oldRot[num90], vector10, nPC.scale, spriteEffects, 0f);
                            if (num88 == 0)
                            {
                                texture2D5 = Game1.glowMaskTexture[134];
                            }
                            else
                            {
                                texture2D5 = Game1.glowMaskTexture[133];
                            }
                            Game1.spriteBatch.Draw(texture2D5, vector17 + nPC.oldPos[num90] - nPC.position, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * (1f - num89 * (float)num90 / 2f), nPC.oldRot[num90], vector10, nPC.scale, spriteEffects, 0f);
                            num88++;
                            num90 -= 2;
                        }
                        texture2D5 = Game1.npcTexture[nPC.type];
                        Game1.spriteBatch.Draw(texture2D5, vector17, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), Game1.npc[i].GetAlpha(color9), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                        texture2D5 = Game1.glowMaskTexture[135];
                        Game1.spriteBatch.Draw(texture2D5, vector17, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                        return;
                    }
                    if (type == 519)
                    {
                        NPC nPC2 = Game1.npc[i];
                        Texture2D texture2D6 = Game1.npcTexture[nPC2.type];
                        Vector2 vector18 = nPC2.Center - Game1.screenPosition;
                        vector18 -= new Vector2((float)texture2D6.Width, (float)(texture2D6.Height / Game1.npcFrameCount[nPC2.type])) * nPC2.scale / 2f;
                        vector18 += vector10 * nPC2.scale + new Vector2(0f, num65 + num66 + nPC2.gfxOffY);
                        texture2D6 = Game1.npcTexture[nPC2.type];
                        Game1.spriteBatch.Draw(texture2D6, vector18, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), Game1.npc[i].GetAlpha(color9), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                        int num91 = 0;
                        float num92 = 1f / (float)nPC2.oldPos.Length * 0.7f;
                        int num93 = nPC2.oldPos.Length - 1;
                        while ((float)num93 >= 0f)
                        {
                            float num94 = (float)(nPC2.oldPos.Length - num93) / (float)nPC2.oldPos.Length;
                            Microsoft.Xna.Framework.Color color13 = Microsoft.Xna.Framework.Color.Pink;
                            color13 *= 1f - num92 * (float)num93 / 1f;
                            color13.A = (byte)((float)color13.A * (1f - num94));
                            Game1.spriteBatch.Draw(texture2D6, vector18 + nPC2.oldPos[num93] - nPC2.position, null, color13, nPC2.oldRot[num93], vector10, nPC2.scale * MathHelper.Lerp(0.3f, 1.1f, num94), spriteEffects, 0f);
                            num91++;
                            num93--;
                        }
                        return;
                    }
                    if (type == 522)
                    {
                        NPC nPC3 = Game1.npc[i];
                        Texture2D texture2D7 = Game1.npcTexture[nPC3.type];
                        Vector2 vector19 = nPC3.Center - Game1.screenPosition;
                        vector19 -= new Vector2((float)texture2D7.Width, (float)(texture2D7.Height / Game1.npcFrameCount[nPC3.type])) * nPC3.scale / 2f;
                        vector19 += vector10 * nPC3.scale + new Vector2(0f, num65 + num66 + nPC3.gfxOffY);
                        int num95 = 0;
                        float num96 = 1f / (float)nPC3.oldPos.Length * 1.1f;
                        int num97 = nPC3.oldPos.Length - 1;
                        while ((float)num97 >= 0f)
                        {
                            float num98 = (float)(nPC3.oldPos.Length - num97) / (float)nPC3.oldPos.Length;
                            Microsoft.Xna.Framework.Color color14 = Microsoft.Xna.Framework.Color.White;
                            color14 *= 1f - num96 * (float)num97 / 1f;
                            color14.A = (byte)((float)color14.A * (1f - num98));
                            Game1.spriteBatch.Draw(texture2D7, vector19 + nPC3.oldPos[num97] - nPC3.position, null, color14, nPC3.oldRot[num97], vector10, nPC3.scale * MathHelper.Lerp(0.8f, 0.3f, num98), spriteEffects, 0f);
                            num95++;
                            num97--;
                        }
                        texture2D7 = Game1.extraTexture[57];
                        Game1.spriteBatch.Draw(texture2D7, vector19, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), 0f, texture2D7.Size() / 2f, Game1.npc[i].scale, spriteEffects, 0f);
                        return;
                    }
                    if (type == 488)
                    {
                        return;
                    }
                    if (type == 370 || type == 372 || type == 373)
                    {
                        Texture2D texture2D8 = Game1.npcTexture[type];
                        Microsoft.Xna.Framework.Color color15 = Microsoft.Xna.Framework.Color.White;
                        float amount3 = 0f;
                        bool flag6 = type == 370 && Game1.npc[i].ai[0] > 4f;
                        bool flag7 = type == 370 && Game1.npc[i].ai[0] > 9f;
                        int num99 = 120;
                        int num100 = 60;
                        Microsoft.Xna.Framework.Color color16 = color9;
                        if (flag7)
                        {
                            color9 = Game1.buffColor(color9, 0.4f, 0.8f, 0.4f, 1f);
                        }
                        else if (flag6)
                        {
                            color9 = Game1.buffColor(color9, 0.5f, 0.7f, 0.5f, 1f);
                        }
                        else if (type == 370 && Game1.npc[i].ai[0] == 4f && Game1.npc[i].ai[2] > (float)num99)
                        {
                            float num101 = Game1.npc[i].ai[2] - (float)num99;
                            num101 /= (float)num100;
                            color9 = Game1.buffColor(color9, 1f - 0.5f * num101, 1f - 0.3f * num101, 1f - 0.5f * num101, 1f);
                        }
                        int num102 = 10;
                        int num103 = 2;
                        if (type == 370)
                        {
                            if (Game1.npc[i].ai[0] == -1f)
                            {
                                num102 = 0;
                            }
                            if (Game1.npc[i].ai[0] == 0f || Game1.npc[i].ai[0] == 5f || Game1.npc[i].ai[0] == 10f)
                            {
                                num102 = 7;
                            }
                            if (Game1.npc[i].ai[0] == 1f)
                            {
                                color15 = Microsoft.Xna.Framework.Color.Blue;
                                amount3 = 0.5f;
                            }
                            else
                            {
                                color16 = color9;
                            }
                        }
                        else if ((type == 372 || type == 373) && Game1.npc[i].ai[0] == 1f)
                        {
                            color15 = Microsoft.Xna.Framework.Color.Blue;
                            amount3 = 0.5f;
                        }
                        for (int num104 = 1; num104 < num102; num104 += num103)
                        {
                            Vector2 arg_5293_0 = Game1.npc[i].oldPos[num104];
                            Microsoft.Xna.Framework.Color color17 = color16;
                            color17 = Microsoft.Xna.Framework.Color.Lerp(color17, color15, amount3);
                            color17 = Game1.npc[i].GetAlpha(color17);
                            color17 *= (float)(num102 - num104) / 15f;
                            Vector2 vector20 = Game1.npc[i].oldPos[num104] + new Vector2((float)Game1.npc[i].width, (float)Game1.npc[i].height) / 2f - Game1.screenPosition;
                            vector20 -= new Vector2((float)texture2D8.Width, (float)(texture2D8.Height / Game1.npcFrameCount[type])) * Game1.npc[i].scale / 2f;
                            vector20 += vector10 * Game1.npc[i].scale + new Vector2(0f, num65 + num66 + Game1.npc[i].gfxOffY);
                            Game1.spriteBatch.Draw(texture2D8, vector20, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), color17, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                        }
                        int num105 = 0;
                        float num106 = 0f;
                        float scaleFactor6 = 0f;
                        if (type == 370)
                        {
                            if (Game1.npc[i].ai[0] == -1f)
                            {
                                num105 = 0;
                            }
                            if (Game1.npc[i].ai[0] == 3f || Game1.npc[i].ai[0] == 8f)
                            {
                                int num107 = 60;
                                int num108 = 30;
                                if (Game1.npc[i].ai[2] > (float)num107)
                                {
                                    num105 = 6;
                                    num106 = 1f - (float)Math.Cos((double)((Game1.npc[i].ai[2] - (float)num107) / (float)num108 * 6.28318548f));
                                    num106 /= 3f;
                                    scaleFactor6 = 40f;
                                }
                            }
                            if (Game1.npc[i].ai[0] == 4f && Game1.npc[i].ai[2] > (float)num99)
                            {
                                num105 = 6;
                                num106 = 1f - (float)Math.Cos((double)((Game1.npc[i].ai[2] - (float)num99) / (float)num100 * 6.28318548f));
                                num106 /= 3f;
                                scaleFactor6 = 60f;
                            }
                            if (Game1.npc[i].ai[0] == 9f && Game1.npc[i].ai[2] > (float)num99)
                            {
                                num105 = 6;
                                num106 = 1f - (float)Math.Cos((double)((Game1.npc[i].ai[2] - (float)num99) / (float)num100 * 6.28318548f));
                                num106 /= 3f;
                                scaleFactor6 = 60f;
                            }
                            if (Game1.npc[i].ai[0] == 12f)
                            {
                                num105 = 6;
                                num106 = 1f - (float)Math.Cos((double)(Game1.npc[i].ai[2] / 30f * 6.28318548f));
                                num106 /= 3f;
                                scaleFactor6 = 20f;
                            }
                        }
                        for (int num109 = 0; num109 < num105; num109++)
                        {
                            Microsoft.Xna.Framework.Color color18 = color9;
                            color18 = Microsoft.Xna.Framework.Color.Lerp(color18, color15, amount3);
                            color18 = Game1.npc[i].GetAlpha(color18);
                            color18 *= 1f - num106;
                            Vector2 vector21 = Game1.npc[i].Center + ((float)num109 / (float)num105 * 6.28318548f + Game1.npc[i].rotation).ToRotationVector2() * scaleFactor6 * num106 - Game1.screenPosition;
                            vector21 -= new Vector2((float)texture2D8.Width, (float)(texture2D8.Height / Game1.npcFrameCount[type])) * Game1.npc[i].scale / 2f;
                            vector21 += vector10 * Game1.npc[i].scale + new Vector2(0f, num65 + num66 + Game1.npc[i].gfxOffY);
                            Game1.spriteBatch.Draw(texture2D8, vector21, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), color18, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                        }
                        Vector2 vector22 = Game1.npc[i].Center - Game1.screenPosition;
                        vector22 -= new Vector2((float)texture2D8.Width, (float)(texture2D8.Height / Game1.npcFrameCount[type])) * Game1.npc[i].scale / 2f;
                        vector22 += vector10 * Game1.npc[i].scale + new Vector2(0f, num65 + num66 + Game1.npc[i].gfxOffY);
                        Game1.spriteBatch.Draw(texture2D8, vector22, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), Game1.npc[i].GetAlpha(color9), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                        if (type == 370 && Game1.npc[i].ai[0] >= 4f)
                        {
                            texture2D8 = Game1.dukeFishronTexture;
                            Microsoft.Xna.Framework.Color color19 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.White, Microsoft.Xna.Framework.Color.Yellow, 0.5f);
                            color15 = Microsoft.Xna.Framework.Color.Yellow;
                            amount3 = 1f;
                            num106 = 0.5f;
                            scaleFactor6 = 10f;
                            num103 = 1;
                            if (Game1.npc[i].ai[0] == 4f)
                            {
                                float num110 = Game1.npc[i].ai[2] - (float)num99;
                                num110 /= (float)num100;
                                color15 *= num110;
                                color19 *= num110;
                            }
                            if (Game1.npc[i].ai[0] == 12f)
                            {
                                float num111 = Game1.npc[i].ai[2];
                                num111 /= 30f;
                                if (num111 > 0.5f)
                                {
                                    num111 = 1f - num111;
                                }
                                num111 *= 2f;
                                num111 = 1f - num111;
                                color15 *= num111;
                                color19 *= num111;
                            }
                            for (int num112 = 1; num112 < num102; num112 += num103)
                            {
                                Vector2 arg_592D_0 = Game1.npc[i].oldPos[num112];
                                Microsoft.Xna.Framework.Color color20 = color19;
                                color20 = Microsoft.Xna.Framework.Color.Lerp(color20, color15, amount3);
                                color20 *= (float)(num102 - num112) / 15f;
                                Vector2 vector23 = Game1.npc[i].oldPos[num112] + new Vector2((float)Game1.npc[i].width, (float)Game1.npc[i].height) / 2f - Game1.screenPosition;
                                vector23 -= new Vector2((float)texture2D8.Width, (float)(texture2D8.Height / Game1.npcFrameCount[type])) * Game1.npc[i].scale / 2f;
                                vector23 += vector10 * Game1.npc[i].scale + new Vector2(0f, num65 + num66 + Game1.npc[i].gfxOffY);
                                Game1.spriteBatch.Draw(texture2D8, vector23, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), color20, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                            }
                            for (int num113 = 1; num113 < num105; num113++)
                            {
                                Microsoft.Xna.Framework.Color color21 = color19;
                                color21 = Microsoft.Xna.Framework.Color.Lerp(color21, color15, amount3);
                                color21 = Game1.npc[i].GetAlpha(color21);
                                color21 *= 1f - num106;
                                Vector2 vector24 = Game1.npc[i].Center + ((float)num113 / (float)num105 * 6.28318548f + Game1.npc[i].rotation).ToRotationVector2() * scaleFactor6 * num106 - Game1.screenPosition;
                                vector24 -= new Vector2((float)texture2D8.Width, (float)(texture2D8.Height / Game1.npcFrameCount[type])) * Game1.npc[i].scale / 2f;
                                vector24 += vector10 * Game1.npc[i].scale + new Vector2(0f, num65 + num66 + Game1.npc[i].gfxOffY);
                                Game1.spriteBatch.Draw(texture2D8, vector24, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), color21, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                            }
                            Game1.spriteBatch.Draw(texture2D8, vector22, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), color19, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                            return;
                        }
                    }
                    else
                    {
                        if (type == 439 || type == 440)
                        {
                            int num114 = Game1.npc[i].frame.Y / (Game1.npcTexture[type].Height / Game1.npcFrameCount[type]);
                            Texture2D texture2D9 = Game1.npcTexture[type];
                            Texture2D texture2D10 = Game1.extraTexture[30];
                            Microsoft.Xna.Framework.Rectangle rectangle = texture2D10.Frame(1, 1, 0, 0);
                            rectangle.Height /= 2;
                            if (num114 >= 4)
                            {
                                rectangle.Y += rectangle.Height;
                            }
                            Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
                            float amount4 = 0f;
                            Microsoft.Xna.Framework.Color color22 = color9;
                            int num115 = 0;
                            int num116 = 0;
                            int num117 = 0;
                            if (Game1.npc[i].ai[0] == -1f)
                            {
                                if (Game1.npc[i].ai[1] >= 320f && Game1.npc[i].ai[1] < 960f)
                                {
                                    white = Microsoft.Xna.Framework.Color.White;
                                    amount4 = 0.5f;
                                    num115 = 6;
                                    num116 = 2;
                                    num117 = 1;
                                }
                            }
                            else if (Game1.npc[i].ai[0] == 1f)
                            {
                                white = Microsoft.Xna.Framework.Color.White;
                                amount4 = 0.5f;
                                num115 = 4;
                                num116 = 2;
                                num117 = 1;
                            }
                            else
                            {
                                color22 = color9;
                            }
                            for (int num118 = num117; num118 < num115; num118 += num116)
                            {
                                Vector2 arg_5D56_0 = Game1.npc[i].oldPos[num118];
                                Microsoft.Xna.Framework.Color color23 = color22;
                                color23 = Microsoft.Xna.Framework.Color.Lerp(color23, white, amount4);
                                color23 = Game1.npc[i].GetAlpha(color23);
                                color23 *= (float)(num115 - num118) / (float)num115;
                                color23.A = 100;
                                Vector2 vector25 = Game1.npc[i].oldPos[num118] + new Vector2((float)Game1.npc[i].width, (float)Game1.npc[i].height) / 2f - Game1.screenPosition;
                                vector25 -= rectangle.Size() * Game1.npc[i].scale / 2f;
                                vector25 += vector10 * Game1.npc[i].scale + new Vector2(0f, num65 + num66 + Game1.npc[i].gfxOffY);
                                Game1.spriteBatch.Draw(texture2D10, vector25, new Microsoft.Xna.Framework.Rectangle?(rectangle), color23, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                            }
                            int num119 = 0;
                            float num120 = 0f;
                            float scaleFactor7 = 0f;
                            if (Game1.npc[i].ai[0] == 5f && Game1.npc[i].ai[1] >= 0f && Game1.npc[i].ai[1] < 30f)
                            {
                                num119 = 4;
                                num120 = 1f - (float)Math.Cos((double)((Game1.npc[i].ai[1] - 0f) / 30f * 3.14159274f));
                                num120 /= 2f;
                                scaleFactor7 = 70f;
                            }
                            for (int num121 = 0; num121 < num119; num121++)
                            {
                                Microsoft.Xna.Framework.Color color24 = color9;
                                color24 = Microsoft.Xna.Framework.Color.Lerp(color24, white, amount4);
                                color24 = Game1.npc[i].GetAlpha(color24);
                                color24 *= 1f - num120;
                                Vector2 vector26 = Game1.npc[i].Center + ((float)num121 / (float)num119 * 6.28318548f + Game1.npc[i].rotation).ToRotationVector2() * scaleFactor7 * num120 - Game1.screenPosition;
                                vector26 -= new Vector2((float)texture2D9.Width, (float)(texture2D9.Height / Game1.npcFrameCount[type])) * Game1.npc[i].scale / 2f;
                                vector26 += vector10 * Game1.npc[i].scale + new Vector2(0f, num65 + num66 + Game1.npc[i].gfxOffY);
                                Game1.spriteBatch.Draw(texture2D10, vector26, new Microsoft.Xna.Framework.Rectangle?(rectangle), color24, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                            }
                            Vector2 vector27 = Game1.npc[i].Center - Game1.screenPosition;
                            vector27 -= new Vector2((float)texture2D9.Width, (float)(texture2D9.Height / Game1.npcFrameCount[type])) * Game1.npc[i].scale / 2f;
                            vector27 += vector10 * Game1.npc[i].scale + new Vector2(0f, num65 + num66 + Game1.npc[i].gfxOffY);
                            Game1.spriteBatch.Draw(texture2D9, vector27, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), Game1.npc[i].GetAlpha(color9), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                            return;
                        }
                        if (type == 392 || type == 393 || type == 394 || type == 395)
                        {
                            Texture2D texture = Game1.npcTexture[type];
                            Vector2 vector28 = Game1.npc[i].Center - Game1.screenPosition + Vector2.UnitY * Game1.npc[i].gfxOffY;
                            vector28 = vector28.Floor();
                            float scaleFactor8 = 0f;
                            if (type == 393)
                            {
                                scaleFactor8 = -8f;
                            }
                            Game1.spriteBatch.Draw(texture, vector28, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), Game1.npc[i].GetAlpha(color9), Game1.npc[i].rotation, vector10 + Vector2.UnitY * scaleFactor8, Game1.npc[i].scale, spriteEffects, 0f);
                            if (type == 392)
                            {
                                Game1.spriteBatch.Draw(Game1.glowMaskTexture[48], vector28, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), Game1.npc[i].rotation, vector10 + Vector2.UnitY * scaleFactor8, Game1.npc[i].scale, spriteEffects, 0f);
                            }
                            if (type == 395)
                            {
                                Game1.spriteBatch.Draw(Game1.glowMaskTexture[49], vector28, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), Game1.npc[i].rotation, vector10 + Vector2.UnitY * scaleFactor8, Game1.npc[i].scale, spriteEffects, 0f);
                            }
                            if (type == 394)
                            {
                                Game1.spriteBatch.Draw(Game1.glowMaskTexture[50], vector28, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), Game1.npc[i].rotation, vector10 + Vector2.UnitY * scaleFactor8, Game1.npc[i].scale, spriteEffects, 0f);
                                return;
                            }
                        }
                        else
                        {
                            if (type == 83 || type == 84 || type == 179)
                            {
                                Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), Microsoft.Xna.Framework.Color.White, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                return;
                            }
                            if (type >= 87 && type <= 92)
                            {
                                Microsoft.Xna.Framework.Color alpha2 = Game1.npc[i].GetAlpha(color9);
                                byte b4 = (byte)((Game1.tileColor.R + Game1.tileColor.G + Game1.tileColor.B) / 3);
                                if (alpha2.R < b4)
                                {
                                    alpha2.R = b4;
                                }
                                if (alpha2.G < b4)
                                {
                                    alpha2.G = b4;
                                }
                                if (alpha2.B < b4)
                                {
                                    alpha2.B = b4;
                                }
                                Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), alpha2, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                return;
                            }
                            if (type == 491)
                            {
                                NPC nPC4 = Game1.npc[i];
                                Texture2D texture2D11 = Game1.npcTexture[nPC4.type];
                                Microsoft.Xna.Framework.Rectangle rectangle2 = nPC4.frame;
                                Vector2 origin = rectangle2.OriginFlip(new Vector2(208f, 460f), spriteEffects);
                                Vector2 vector29 = nPC4.Center - Game1.screenPosition;
                                Vector2 value8 = new Vector2((float)(spriteEffects.HasFlag(SpriteEffects.FlipHorizontally) ? -1 : 1), 1f);
                                Microsoft.Xna.Framework.Color alpha3 = nPC4.GetAlpha(color9);
                                Game1.spriteBatch.Draw(texture2D11, vector29, new Microsoft.Xna.Framework.Rectangle?(rectangle2), alpha3, nPC4.rotation, origin, nPC4.scale, spriteEffects, 0f);
                                int num122 = (int)nPC4.localAI[3] / 8;
                                texture2D11 = Game1.extraTexture[40];
                                rectangle2 = texture2D11.Frame(1, 4, 0, num122 % 4);
                                origin = rectangle2.Size() * new Vector2(0.5f, 1f);
                                Game1.spriteBatch.Draw(texture2D11, vector29 + (new Vector2(102f, -384f) * value8).RotatedBy((double)nPC4.rotation, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(rectangle2), alpha3, nPC4.rotation, origin, nPC4.scale, spriteEffects, 0f);
                                texture2D11 = Game1.extraTexture[41];
                                rectangle2 = texture2D11.Frame(1, 8, 0, num122 % 8);
                                origin = rectangle2.Size() * new Vector2(0.5f, 0f) + new Vector2(0f, 10f);
                                for (int num123 = 0; num123 < 5; num123++)
                                {
                                    Game1.spriteBatch.Draw(texture2D11, vector29 + (new Vector2((float)(-96 + 34 * num123), 40f) * value8).RotatedBy((double)nPC4.rotation, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(rectangle2), alpha3, nPC4.rotation, origin, nPC4.scale, spriteEffects, 0f);
                                }
                                texture2D11 = Game1.extraTexture[42];
                                rectangle2 = texture2D11.Frame(1, 4, 0, num122 % 4);
                                origin = rectangle2.Size() * new Vector2(0.5f, 0f);
                                for (int num124 = 0; num124 < 2; num124++)
                                {
                                    Game1.spriteBatch.Draw(texture2D11, vector29 + (new Vector2((float)(158 - 106 * num124), -302f) * value8).RotatedBy((double)nPC4.rotation, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(rectangle2), alpha3, nPC4.rotation, origin, nPC4.scale, spriteEffects, 0f);
                                }
                                texture2D11 = Game1.extraTexture[43];
                                rectangle2 = texture2D11.Frame(1, 4, 0, num122 % 4);
                                origin = rectangle2.Size() * new Vector2(0.5f, 0f);
                                for (int num125 = 0; num125 < 2; num125++)
                                {
                                    Game1.spriteBatch.Draw(texture2D11, vector29 + (new Vector2((float)(42 - 178 * num125), -444f) * value8).RotatedBy((double)nPC4.rotation, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(rectangle2), alpha3, nPC4.rotation, origin, nPC4.scale, spriteEffects, 0f);
                                }
                                texture2D11 = Game1.extraTexture[44];
                                rectangle2 = texture2D11.Frame(1, 4, 0, num122 % 4);
                                origin = rectangle2.Size() * new Vector2(0.5f, 0f);
                                Game1.spriteBatch.Draw(texture2D11, vector29 + (new Vector2(-134f, -302f) * value8).RotatedBy((double)nPC4.rotation, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(rectangle2), alpha3, nPC4.rotation, origin, nPC4.scale, spriteEffects, 0f);
                                texture2D11 = Game1.extraTexture[45];
                                rectangle2 = texture2D11.Frame(1, 4, 0, (2 + num122) % 4);
                                origin = rectangle2.Size() * new Vector2(0.5f, 0f);
                                Game1.spriteBatch.Draw(texture2D11, vector29 + (new Vector2(-60f, -330f) * value8).RotatedBy((double)nPC4.rotation, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(rectangle2), alpha3, nPC4.rotation, origin, nPC4.scale, spriteEffects, 0f);
                                this.LoadNPC(492);
                                if (Game1.NPCLoaded[492])
                                {
                                    texture2D11 = Game1.npcTexture[492];
                                    rectangle2 = texture2D11.Frame(1, 9, 0, 0);
                                    origin = rectangle2.Size() * new Vector2(0.5f, 0f) + new Vector2(0f, 10f);
                                    for (int num126 = 0; num126 < 4; num126++)
                                    {
                                        int num127 = (int)nPC4.ai[num126];
                                        if (num127 >= 0)
                                        {
                                            rectangle2.Y = Game1.npc[num127].frame.Y;
                                            Game1.spriteBatch.Draw(texture2D11, vector29 + (new Vector2((float)(-122 + 68 * num126), -20f) * value8).RotatedBy((double)nPC4.rotation, default(Vector2)), new Microsoft.Xna.Framework.Rectangle?(rectangle2), alpha3, nPC4.rotation, origin, nPC4.scale, spriteEffects, 0f);
                                        }
                                    }
                                    return;
                                }
                            }
                            else
                            {
                                if (type == 398)
                                {
                                    bool flag8 = false;
                                    Texture2D texture2 = Game1.npcTexture[type];
                                    Texture2D texture3 = Game1.extraTexture[16];
                                    Texture2D texture2D12 = Game1.extraTexture[14];
                                    float num128 = 340f;
                                    float scaleFactor9 = 0.5f;
                                    Vector2 value9 = new Vector2(220f, -60f);
                                    Vector2 vector30 = new Vector2(76f, 66f);
                                    Texture2D texture2D13 = Game1.extraTexture[13];
                                    Vector2 origin2 = new Vector2((float)texture2D13.Width, 278f);
                                    Vector2 origin3 = new Vector2(0f, 278f);
                                    Vector2 value10 = new Vector2(0f, 76f);
                                    Vector2 center = Game1.npc[i].Center;
                                    Microsoft.Xna.Framework.Point point = (Game1.npc[i].Center + new Vector2(0f, -150f)).ToTileCoordinates();
                                    Microsoft.Xna.Framework.Color alpha4 = Game1.npc[i].GetAlpha(Microsoft.Xna.Framework.Color.Lerp(Lighting.GetColor(point.X, point.Y), Microsoft.Xna.Framework.Color.White, 0.3f));
                                    for (int num129 = 0; num129 < 2; num129++)
                                    {
                                        bool flag9 = num129 == 0;
                                        Vector2 value11 = new Vector2((float)(flag9 ? -1 : 1), 1f);
                                        int num130 = -1;
                                        for (int num131 = 0; num131 < 200; num131++)
                                        {
                                            if (Game1.npc[num131].active && Game1.npc[num131].type == 397 && Game1.npc[num131].ai[2] == (float)num129 && Game1.npc[num131].ai[3] == (float)i)
                                            {
                                                num130 = num131;
                                                break;
                                            }
                                        }
                                        if (num130 != -1)
                                        {
                                            Vector2 vector31 = center + value9 * value11;
                                            Vector2 value12 = Game1.npc[num130].Center + value10;
                                            Vector2 vector32 = (value12 - vector31) * scaleFactor9;
                                            if (flag8)
                                            {
                                                Game1.dust[Dust.NewDust(vector31 + vector32, 0, 0, 6, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f)].noGravity = true;
                                            }
                                            float num132 = (float)Math.Acos((double)(vector32.Length() / num128)) * -value11.X;
                                            SpriteEffects effects = flag9 ? SpriteEffects.None : SpriteEffects.FlipHorizontally;
                                            Vector2 origin4 = vector30;
                                            if (!flag9)
                                            {
                                                origin4.X = (float)texture2D12.Width - origin4.X;
                                            }
                                            Game1.spriteBatch.Draw(texture2D12, vector31 - Game1.screenPosition, null, alpha4, vector32.ToRotation() - num132 - 1.57079637f, origin4, 1f, effects, 0f);
                                            if (flag8)
                                            {
                                                Game1.dust[Dust.NewDust(vector31, 0, 0, 6, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f)].noGravity = true;
                                            }
                                            if (flag8)
                                            {
                                                Game1.dust[Dust.NewDust(center, 0, 0, 6, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f)].noGravity = true;
                                            }
                                            if (flag8)
                                            {
                                                Game1.dust[Dust.NewDust(vector31 + new Vector2(0f, num128).RotatedBy((double)(vector32.ToRotation() - num132 - 1.57079637f), default(Vector2)), 0, 0, 6, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f)].noGravity = true;
                                            }
                                        }
                                    }
                                    Game1.spriteBatch.Draw(texture2D13, center - Game1.screenPosition, null, alpha4, 0f, origin2, 1f, SpriteEffects.None, 0f);
                                    Game1.spriteBatch.Draw(texture2D13, center - Game1.screenPosition, null, alpha4, 0f, origin3, 1f, SpriteEffects.FlipHorizontally, 0f);
                                    Game1.spriteBatch.Draw(texture3, center - Game1.screenPosition, null, alpha4, 0f, new Vector2(112f, 101f), 1f, SpriteEffects.None, 0f);
                                    Game1.spriteBatch.Draw(texture2, center - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), alpha4, 0f, Game1.npc[i].frame.Size() / 2f, 1f, SpriteEffects.None, 0f);
                                    return;
                                }
                                if (type == 397)
                                {
                                    Texture2D texture2D14 = Game1.npcTexture[type];
                                    float num133 = 0.5f;
                                    Vector2 value13 = new Vector2(220f, -60f);
                                    Vector2 value14 = new Vector2(0f, 76f);
                                    Texture2D texture2D15 = Game1.extraTexture[15];
                                    Vector2 vector33 = new Vector2(60f, 30f);
                                    float num134 = 340f;
                                    Vector2 center2 = Game1.npc[(int)Game1.npc[i].ai[3]].Center;
                                    Microsoft.Xna.Framework.Point point2 = Game1.npc[i].Center.ToTileCoordinates();
                                    Microsoft.Xna.Framework.Color alpha5 = Game1.npc[i].GetAlpha(Microsoft.Xna.Framework.Color.Lerp(Lighting.GetColor(point2.X, point2.Y), Microsoft.Xna.Framework.Color.White, 0.3f));
                                    bool flag10 = Game1.npc[i].ai[2] == 0f;
                                    Vector2 value15 = new Vector2((float)(flag10 ? -1 : 1), 1f);
                                    Vector2 origin5 = new Vector2(120f, 180f);
                                    if (!flag10)
                                    {
                                        origin5.X = (float)texture2D14.Width - origin5.X;
                                    }
                                    Texture2D texture2D16 = Game1.extraTexture[17];
                                    Texture2D texture2D17 = Game1.extraTexture[19];
                                    Vector2 vector34 = new Vector2(26f, 42f);
                                    if (!flag10)
                                    {
                                        vector34.X = (float)texture2D16.Width - vector34.X;
                                    }
                                    Vector2 value16 = new Vector2(30f, 66f);
                                    Vector2 value17 = new Vector2(1f * -value15.X, 3f);
                                    Texture2D texture2D18 = Game1.extraTexture[26];
                                    Microsoft.Xna.Framework.Rectangle value18 = texture2D18.Frame(1, 1, 0, 0);
                                    value18.Height /= 4;
                                    Vector2 value19 = center2 + value13 * value15;
                                    Vector2 vector35 = Game1.npc[i].Center + value14;
                                    Vector2 vector36 = value19 - vector35;
                                    vector36 *= 1f - num133;
                                    Vector2 origin6 = vector33;
                                    if (!flag10)
                                    {
                                        origin6.X = (float)texture2D15.Width - origin6.X;
                                    }
                                    float num135 = (float)Math.Acos((double)(vector36.Length() / num134)) * -value15.X;
                                    Game1.spriteBatch.Draw(texture2D15, vector35 - Game1.screenPosition, null, alpha5, vector36.ToRotation() + num135 - 1.57079637f, origin6, 1f, spriteEffects, 0f);
                                    if (Game1.npc[i].ai[0] == -2f)
                                    {
                                        int num136 = (int)Game1.npc[i].ai[1];
                                        num136 /= 8;
                                        value18.Y += value18.Height * num136;
                                        Game1.spriteBatch.Draw(texture2D18, Game1.npc[i].Center - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(value18), alpha5, 0f, vector34 - new Vector2(4f, 4f), 1f, spriteEffects, 0f);
                                    }
                                    else
                                    {
                                        Game1.spriteBatch.Draw(texture2D16, Game1.npc[i].Center - Game1.screenPosition, null, alpha5, 0f, vector34, 1f, spriteEffects, 0f);
                                        Vector2 value20 = Utils.Vector2FromElipse(Game1.npc[i].localAI[0].ToRotationVector2(), value16 * Game1.npc[i].localAI[1]);
                                        Game1.spriteBatch.Draw(texture2D17, Game1.npc[i].Center - Game1.screenPosition + value20 + value17, null, alpha5, 0f, new Vector2((float)texture2D17.Width, (float)texture2D17.Height) / 2f, 1f, SpriteEffects.None, 0f);
                                    }
                                    Game1.spriteBatch.Draw(texture2D14, Game1.npc[i].Center - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), alpha5, 0f, origin5, 1f, spriteEffects, 0f);
                                    return;
                                }
                                if (type == 396)
                                {
                                    Texture2D texture4 = Game1.npcTexture[type];
                                    Vector2 origin7 = new Vector2(191f, 130f);
                                    Texture2D texture5 = Game1.extraTexture[18];
                                    Texture2D texture2D19 = Game1.extraTexture[19];
                                    Vector2 vector37 = new Vector2(19f, 34f);
                                    Vector2 value21 = new Vector2(27f, 59f);
                                    Vector2 value22 = new Vector2(0f, 0f);
                                    Texture2D texture2D20 = Game1.extraTexture[25];
                                    Vector2 value23 = new Vector2(0f, 214f).RotatedBy((double)Game1.npc[i].rotation, default(Vector2));
                                    Microsoft.Xna.Framework.Rectangle rectangle3 = texture2D20.Frame(1, 1, 0, 0);
                                    rectangle3.Height /= 3;
                                    rectangle3.Y += rectangle3.Height * (int)(Game1.npc[i].localAI[2] / 7f);
                                    Texture2D texture2D21 = Game1.extraTexture[29];
                                    Vector2 value24 = new Vector2(0f, 4f).RotatedBy((double)Game1.npc[i].rotation, default(Vector2));
                                    Microsoft.Xna.Framework.Rectangle rectangle4 = texture2D21.Frame(1, 1, 0, 0);
                                    rectangle4.Height /= 4;
                                    rectangle4.Y += rectangle4.Height * (int)(Game1.npc[i].localAI[3] / 5f);
                                    Texture2D texture2D22 = Game1.extraTexture[26];
                                    Microsoft.Xna.Framework.Rectangle value25 = texture2D22.Frame(1, 1, 0, 0);
                                    value25.Height /= 4;
                                    Vector2 arg_7869_0 = Game1.npc[(int)Game1.npc[i].ai[3]].Center;
                                    Microsoft.Xna.Framework.Point point3 = Game1.npc[i].Center.ToTileCoordinates();
                                    Microsoft.Xna.Framework.Color alpha6 = Game1.npc[i].GetAlpha(Microsoft.Xna.Framework.Color.Lerp(Lighting.GetColor(point3.X, point3.Y), Microsoft.Xna.Framework.Color.White, 0.3f));
                                    if (Game1.npc[i].ai[0] < 0f)
                                    {
                                        int num137 = (int)Game1.npc[i].ai[1];
                                        num137 /= 8;
                                        value25.Y += value25.Height * num137;
                                        Game1.spriteBatch.Draw(texture2D22, Game1.npc[i].Center - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(value25), alpha6, Game1.npc[i].rotation, vector37 + new Vector2(4f, 4f), 1f, spriteEffects, 0f);
                                    }
                                    else
                                    {
                                        Game1.spriteBatch.Draw(texture5, Game1.npc[i].Center - Game1.screenPosition, null, alpha6, Game1.npc[i].rotation, vector37, 1f, spriteEffects, 0f);
                                        Vector2 value26 = Utils.Vector2FromElipse(Game1.npc[i].localAI[0].ToRotationVector2(), value21 * Game1.npc[i].localAI[1]);
                                        Game1.spriteBatch.Draw(texture2D19, Game1.npc[i].Center - Game1.screenPosition + value26 + value22, null, alpha6, Game1.npc[i].rotation, new Vector2((float)texture2D19.Width, (float)texture2D19.Height) / 2f, 1f, SpriteEffects.None, 0f);
                                    }
                                    Game1.spriteBatch.Draw(texture4, Game1.npc[i].Center - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), alpha6, Game1.npc[i].rotation, origin7, 1f, spriteEffects, 0f);
                                    Game1.spriteBatch.Draw(texture2D21, (Game1.npc[i].Center - Game1.screenPosition + value24).Floor(), new Microsoft.Xna.Framework.Rectangle?(rectangle4), alpha6, Game1.npc[i].rotation, rectangle4.Size() / 2f, 1f, spriteEffects, 0f);
                                    Game1.spriteBatch.Draw(texture2D20, (Game1.npc[i].Center - Game1.screenPosition + value23).Floor(), new Microsoft.Xna.Framework.Rectangle?(rectangle3), alpha6, Game1.npc[i].rotation, rectangle3.Size() / 2f, 1f, spriteEffects, 0f);
                                    return;
                                }
                                if (type == 400)
                                {
                                    Texture2D texture6 = Game1.npcTexture[type];
                                    Texture2D texture2D23 = Game1.extraTexture[19];
                                    Vector2 origin8 = new Vector2(40f, 40f);
                                    Vector2 value27 = new Vector2(30f, 30f);
                                    Vector2 arg_7BF3_0 = Game1.npc[i].Center;
                                    Microsoft.Xna.Framework.Point point4 = Game1.npc[i].Center.ToTileCoordinates();
                                    Microsoft.Xna.Framework.Color alpha7 = Game1.npc[i].GetAlpha(Microsoft.Xna.Framework.Color.Lerp(Lighting.GetColor(point4.X, point4.Y), Microsoft.Xna.Framework.Color.White, 0.3f));
                                    Game1.spriteBatch.Draw(texture6, Game1.npc[i].Center - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), alpha7, Game1.npc[i].rotation, origin8, 1f, spriteEffects, 0f);
                                    Vector2 value28 = Utils.Vector2FromElipse(Game1.npc[i].localAI[0].ToRotationVector2(), value27 * Game1.npc[i].localAI[1]);
                                    Game1.spriteBatch.Draw(texture2D23, Game1.npc[i].Center - Game1.screenPosition + value28, null, alpha7, Game1.npc[i].rotation, texture2D23.Size() / 2f, Game1.npc[i].localAI[2], SpriteEffects.None, 0f);
                                    return;
                                }
                                if (type == 384)
                                {
                                    return;
                                }
                                if (type == 416)
                                {
                                    int num138 = -1;
                                    int num139 = (int)Game1.npc[i].ai[0];
                                    Vector2 position3 = Game1.npc[i].position;
                                    Vector2 spinningpoint = Vector2.Zero;
                                    if (Game1.npc[num139].active && Game1.npc[num139].type == 415)
                                    {
                                        num138 = num139;
                                    }
                                    if (num138 != -1)
                                    {
                                        Vector2 position4 = Game1.npc[i].position;
                                        Game1.npc[i].Bottom = Game1.npc[num138].Bottom;
                                        position3 = Game1.npc[i].position;
                                        Game1.npc[i].position = position4;
                                        Game1.npc[i].gfxOffY = Game1.npc[num138].gfxOffY;
                                        spinningpoint = Game1.npc[num138].velocity;
                                    }
                                    Microsoft.Xna.Framework.Rectangle frame = Game1.npc[i].frame;
                                    Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2(position3.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, position3.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame), Game1.npc[i].GetAlpha(color9), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    if (Game1.npc[i].color != default(Microsoft.Xna.Framework.Color))
                                    {
                                        Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2(position3.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, position3.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame), Game1.npc[i].GetColor(color9), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[156], position3 + Game1.npc[i].Size * new Vector2(0.5f, 1f) - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    float scaleFactor10 = 0.5f + (Game1.npc[i].GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
                                    for (int num140 = 0; num140 < 4; num140++)
                                    {
                                        Game1.spriteBatch.Draw(Game1.glowMaskTexture[156], position3 + Game1.npc[i].Size * new Vector2(0.5f, 1f) - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY) + spinningpoint.RotatedBy((double)((float)num140 * 1.57079637f), default(Vector2)) * scaleFactor10, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                    return;
                                }
                                if (type == 399)
                                {
                                    Texture2D texture2D24 = Game1.npcTexture[type];
                                    Vector2 vec = Game1.npc[i].position - Game1.screenPosition + Vector2.UnitY * Game1.npc[i].gfxOffY;
                                    vec = vec.Floor();
                                    float num141 = 5f;
                                    int num142 = 0;
                                    while ((float)num142 < num141)
                                    {
                                        float num143 = 1f - (Game1.GlobalTime + (float)num142) % num141 / num141;
                                        Microsoft.Xna.Framework.Color color25 = Microsoft.Xna.Framework.Color.LimeGreen;
                                        if (Game1.npc[i].ai[0] == 1f)
                                        {
                                            color25 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.LimeGreen, Microsoft.Xna.Framework.Color.Red, MathHelper.Clamp(Game1.npc[i].ai[1] / 20f, 0f, 1f));
                                        }
                                        if (Game1.npc[i].ai[0] == 2f)
                                        {
                                            color25 = Microsoft.Xna.Framework.Color.Red;
                                        }
                                        color25 *= 1f - num143;
                                        color25.A = 0;
                                        for (int num144 = 0; num144 < 2; num144++)
                                        {
                                            Game1.spriteBatch.Draw(Game1.extraTexture[27], Game1.npc[i].Center - Game1.screenPosition + Vector2.UnitY * (Game1.npc[i].gfxOffY - 4f + 6f), null, color25, 1.57079637f, new Vector2(10f, 48f), num143 * 4f, SpriteEffects.None, 0f);
                                        }
                                        num142++;
                                    }
                                    Game1.spriteBatch.Draw(texture2D24, new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), Game1.npc[i].GetAlpha(color9), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    texture2D24 = Game1.glowMaskTexture[100];
                                    Game1.spriteBatch.Draw(texture2D24, new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(127 - Game1.npc[i].alpha / 2, 127 - Game1.npc[i].alpha / 2, 127 - Game1.npc[i].alpha / 2, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    texture2D24 = Game1.extraTexture[20];
                                    Microsoft.Xna.Framework.Rectangle value29 = texture2D24.Frame(1, 4, 0, (int)Game1.npc[i].ai[0] + 1);
                                    Vector2 position5 = new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)texture2D24.Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY + 18f + 6f);
                                    Game1.spriteBatch.Draw(texture2D24, position5, new Microsoft.Xna.Framework.Rectangle?(value29), Game1.npc[i].GetAlpha(color9), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    texture2D24 = Game1.glowMaskTexture[101];
                                    Game1.spriteBatch.Draw(texture2D24, position5, new Microsoft.Xna.Framework.Rectangle?(value29), new Microsoft.Xna.Framework.Color(127 - Game1.npc[i].alpha / 2, 127 - Game1.npc[i].alpha / 2, 127 - Game1.npc[i].alpha / 2, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    return;
                                }
                                if (type == 94)
                                {
                                    for (int num145 = 1; num145 < 6; num145 += 2)
                                    {
                                        Vector2 arg_8A22_0 = Game1.npc[i].oldPos[num145];
                                        Microsoft.Xna.Framework.Color alpha8 = Game1.npc[i].GetAlpha(color9);
                                        alpha8.R = (byte)((int)alpha8.R * (10 - num145) / 15);
                                        alpha8.G = (byte)((int)alpha8.G * (10 - num145) / 15);
                                        alpha8.B = (byte)((int)alpha8.B * (10 - num145) / 15);
                                        alpha8.A = (byte)((int)alpha8.A * (10 - num145) / 15);
                                        Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2(Game1.npc[i].oldPos[num145].X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].oldPos[num145].Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), alpha8, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                }
                                if (type == 125 || type == 126 || type == 127 || type == 128 || type == 129 || type == 130 || type == 131 || type == 139 || type == 140)
                                {
                                    for (int num146 = 9; num146 >= 0; num146 -= 2)
                                    {
                                        Vector2 arg_8C54_0 = Game1.npc[i].oldPos[num146];
                                        Microsoft.Xna.Framework.Color alpha9 = Game1.npc[i].GetAlpha(color9);
                                        alpha9.R = (byte)((int)alpha9.R * (10 - num146) / 20);
                                        alpha9.G = (byte)((int)alpha9.G * (10 - num146) / 20);
                                        alpha9.B = (byte)((int)alpha9.B * (10 - num146) / 20);
                                        alpha9.A = (byte)((int)alpha9.A * (10 - num146) / 20);
                                        Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2(Game1.npc[i].oldPos[num146].X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].oldPos[num146].Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), alpha9, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                }
                                if (type == 417 && Game1.npc[i].ai[0] >= 6f && Game1.npc[i].ai[0] <= 6f)
                                {
                                    for (int num147 = 5; num147 >= 0; num147--)
                                    {
                                        Vector2 arg_8E7E_0 = Game1.npc[i].oldPos[num147];
                                        Microsoft.Xna.Framework.Color alpha10 = Game1.npc[i].GetAlpha(color9);
                                        alpha10.R = (byte)((int)alpha10.R * (10 - num147) / 20);
                                        alpha10.G = (byte)((int)alpha10.G * (10 - num147) / 20);
                                        alpha10.B = (byte)((int)alpha10.B * (10 - num147) / 20);
                                        alpha10.A = (byte)((int)alpha10.A * (10 - num147) / 20);
                                        Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2(Game1.npc[i].oldPos[num147].X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].oldPos[num147].Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), alpha10, Game1.npc[i].oldRot[num147], vector10, MathHelper.Lerp(0.5f, 1f, (5f - (float)num147) / 6f), spriteEffects, 0f);
                                    }
                                }
                                if (type == 419 && Game1.npc[i].ai[2] <= -9f)
                                {
                                    int num148 = Game1.glowMaskTexture[154].Height / Game1.npcFrameCount[type];
                                    int num149 = Game1.npc[i].frame.Y / num148;
                                    for (int num150 = 6; num150 >= 0; num150--)
                                    {
                                        Vector2 arg_90DF_0 = Game1.npc[i].oldPos[num150];
                                        Microsoft.Xna.Framework.Color white2 = Microsoft.Xna.Framework.Color.White;
                                        white2.R = (byte)(255 * (10 - num150) / 20);
                                        white2.G = (byte)(255 * (10 - num150) / 20);
                                        white2.B = (byte)(255 * (10 - num150) / 20);
                                        white2.A = 0;
                                        Microsoft.Xna.Framework.Rectangle frame2 = Game1.npc[i].frame;
                                        int num151 = (num149 - 3 - num150) % 3;
                                        if (num151 < 0)
                                        {
                                            num151 += 3;
                                        }
                                        num151 += 5;
                                        frame2.Y = num148 * num151;
                                        Game1.spriteBatch.Draw(Game1.glowMaskTexture[154], new Vector2(Game1.npc[i].oldPos[num150].X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].oldPos[num150].Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66), new Microsoft.Xna.Framework.Rectangle?(frame2), white2, Game1.npc[i].oldRot[num150], vector10, MathHelper.Lerp(0.75f, 1.2f, (10f - (float)num150) / 10f), spriteEffects, 0f);
                                    }
                                }
                                if (type == 418 && (Game1.npc[i].ai[0] == 2f || Game1.npc[i].ai[0] == 4f))
                                {
                                    Texture2D texture2D25 = Game1.extraTexture[55];
                                    Vector2 origin9 = new Vector2((float)(texture2D25.Width / 2), (float)(texture2D25.Height / 8 + 14));
                                    int num152 = (int)Game1.npc[i].ai[1] / 2;
                                    float num153 = -1.57079637f * (float)Game1.npc[i].spriteDirection;
                                    float num154 = Game1.npc[i].ai[1] / 45f;
                                    if (num154 > 1f)
                                    {
                                        num154 = 1f;
                                    }
                                    num152 %= 4;
                                    for (int num155 = 6; num155 >= 0; num155--)
                                    {
                                        Vector2 arg_93D2_0 = Game1.npc[i].oldPos[num155];
                                        Microsoft.Xna.Framework.Color color26 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Gold, Microsoft.Xna.Framework.Color.OrangeRed, num154);
                                        color26 = Microsoft.Xna.Framework.Color.Lerp(color26, Microsoft.Xna.Framework.Color.Blue, (float)num155 / 12f);
                                        color26.A = (byte)(64f * num154);
                                        color26.R = (byte)((int)color26.R * (10 - num155) / 20);
                                        color26.G = (byte)((int)color26.G * (10 - num155) / 20);
                                        color26.B = (byte)((int)color26.B * (10 - num155) / 20);
                                        color26.A = (byte)((int)color26.A * (10 - num155) / 20);
                                        color26 *= num154;
                                        int num156 = (num152 - num155) % 4;
                                        if (num156 < 0)
                                        {
                                            num156 += 4;
                                        }
                                        Microsoft.Xna.Framework.Rectangle value30 = texture2D25.Frame(1, 4, 0, num156);
                                        Game1.spriteBatch.Draw(texture2D25, new Vector2(Game1.npc[i].oldPos[num155].X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].oldPos[num155].Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66), new Microsoft.Xna.Framework.Rectangle?(value30), color26, Game1.npc[i].oldRot[num155] + num153, origin9, MathHelper.Lerp(0.1f, 1.2f, (10f - (float)num155) / 10f), spriteEffects, 0f);
                                    }
                                }
                                if (type == 516)
                                {
                                    int num157 = Game1.npcTexture[type].Height / Game1.npcFrameCount[type];
                                    int num158 = Game1.npc[i].frame.Y / num157;
                                    for (int num159 = 6; num159 >= 0; num159--)
                                    {
                                        Vector2 arg_968E_0 = Game1.npc[i].oldPos[num159];
                                        Microsoft.Xna.Framework.Color color27 = Microsoft.Xna.Framework.Color.White;
                                        color27.R = (byte)(255 * (10 - num159) / 20);
                                        color27.G = (byte)(255 * (10 - num159) / 20);
                                        color27.B = (byte)(255 * (10 - num159) / 20);
                                        color27.A = (byte)(255 * (10 - num159) / 20);
                                        color27 = Microsoft.Xna.Framework.Color.Lerp(color27, Microsoft.Xna.Framework.Color.Transparent, (float)num159 / 6f);
                                        Microsoft.Xna.Framework.Rectangle frame3 = Game1.npc[i].frame;
                                        int num160 = (num158 - 4 - num159) % 4;
                                        if (num160 < 0)
                                        {
                                            num160 += 4;
                                        }
                                        frame3.Y = num157 * num160;
                                        Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2(Game1.npc[i].oldPos[num159].X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].oldPos[num159].Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66), new Microsoft.Xna.Framework.Rectangle?(frame3), color27, Game1.npc[i].rotation, vector10, MathHelper.Lerp(0.35f, 1.2f, (10f - (float)num159) / 10f), spriteEffects, 0f);
                                    }
                                }
                                Microsoft.Xna.Framework.Rectangle frame4 = Game1.npc[i].frame;
                                if (type == 182 || type == 289)
                                {
                                    frame4.Height -= 2;
                                }
                                if (Game1.npc[i].aiStyle == 7)
                                {
                                    NPC n2 = Game1.npc[i];
                                    this.DrawNPCExtras(n2, true, num66, num65, color9, vector10, spriteEffects);
                                }
                                if (type == 346 && (double)Game1.npc[i].life < (double)Game1.npc[i].lifeMax * 0.5)
                                {
                                    Game1.spriteBatch.Draw(Game1.santaTankTexture, new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame4), Game1.npc[i].GetAlpha(color9), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 356)
                                {
                                    frame4.Height--;
                                    Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame4), Game1.npc[i].GetAlpha(color9), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 360)
                                {
                                    float num161 = 0f;
                                    if (Game1.npc[i].ai[2] == 0f)
                                    {
                                        if (Game1.npc[i].rotation == 3.14f || Game1.npc[i].rotation == -3.14f)
                                        {
                                            num66 = 2f;
                                        }
                                        if (Game1.npc[i].direction < 0 && (Game1.npc[i].rotation == 1.57f || Game1.npc[i].rotation == 4.71f))
                                        {
                                            num161 = 1f;
                                        }
                                        if (Game1.npc[i].direction > 0 && (Game1.npc[i].rotation == 1.57f || Game1.npc[i].rotation == 4.71f))
                                        {
                                            num161 = -1f;
                                        }
                                    }
                                    Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale + num161, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame4), Game1.npc[i].GetAlpha(color9), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 266 && Game1.npc[i].life < Game1.npc[i].lifeMax && Game1.expertMode)
                                {
                                    Microsoft.Xna.Framework.Color alpha11 = Game1.npc[i].GetAlpha(color9);
                                    float num162 = 1f - (float)Game1.npc[i].life / (float)Game1.npc[i].lifeMax;
                                    num162 *= num162;
                                    alpha11.R = (byte)((float)alpha11.R * num162);
                                    alpha11.G = (byte)((float)alpha11.G * num162);
                                    alpha11.B = (byte)((float)alpha11.B * num162);
                                    alpha11.A = (byte)((float)alpha11.A * num162);
                                    for (int num163 = 0; num163 < 4; num163++)
                                    {
                                        Vector2 position6 = Game1.npc[i].position;
                                        float num164 = Math.Abs(Game1.npc[i].Center.X - Game1.player[Game1.myPlayer].Center.X);
                                        float num165 = Math.Abs(Game1.npc[i].Center.Y - Game1.player[Game1.myPlayer].Center.Y);
                                        if (num163 == 0 || num163 == 2)
                                        {
                                            position6.X = Game1.player[Game1.myPlayer].Center.X + num164;
                                        }
                                        else
                                        {
                                            position6.X = Game1.player[Game1.myPlayer].Center.X - num164;
                                        }
                                        position6.X -= (float)(Game1.npc[i].width / 2);
                                        if (num163 == 0 || num163 == 1)
                                        {
                                            position6.Y = Game1.player[Game1.myPlayer].Center.Y + num165;
                                        }
                                        else
                                        {
                                            position6.Y = Game1.player[Game1.myPlayer].Center.Y - num165;
                                        }
                                        position6.Y -= (float)(Game1.npc[i].height / 2);
                                        Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2(position6.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, position6.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame4), alpha11, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                    Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame4), Game1.npc[i].GetAlpha(color9), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 421 && Game1.npc[i].ai[0] == 5f)
                                {
                                    Player player = Game1.player[Game1.npc[i].target];
                                    if (player.gravDir == -1f)
                                    {
                                        spriteEffects |= SpriteEffects.FlipVertically;
                                    }
                                    Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2((float)(player.direction * 4), player.gfxOffY) + ((player.gravDir == 1f) ? player.Top : player.Bottom) - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(frame4), Game1.npc[i].GetAlpha(color9), Game1.npc[i].rotation, frame4.Size() / 2f, Game1.npc[i].scale, spriteEffects, 0f);
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[146], new Vector2((float)(player.direction * 4), player.gfxOffY) + ((player.gravDir == 1f) ? player.Top : player.Bottom) - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(frame4), Game1.npc[i].GetAlpha(color9), Game1.npc[i].rotation, frame4.Size() / 2f, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 518)
                                {
                                    Vector2 value31 = new Vector2(-10f, 0f);
                                    Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame4), Game1.npc[i].GetAlpha(color9), Game1.npc[i].rotation, vector10 + value31, Game1.npc[i].scale, spriteEffects, 0f);
                                    if (Game1.npc[i].color != default(Microsoft.Xna.Framework.Color))
                                    {
                                        Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame4), Game1.npc[i].GetColor(color9), Game1.npc[i].rotation, vector10 + value31, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                }
                                else
                                {
                                    Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame4), Game1.npc[i].GetAlpha(color9), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    if (Game1.npc[i].color != default(Microsoft.Xna.Framework.Color))
                                    {
                                        Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame4), Game1.npc[i].GetColor(color9), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                }
                                if (Game1.npc[i].confused)
                                {
                                    Game1.spriteBatch.Draw(Game1.confuseTexture, new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 - (float)Game1.confuseTexture.Height - 20f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.confuseTexture.Width, Game1.confuseTexture.Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, 70), Game1.npc[i].velocity.X * -0.05f, new Vector2((float)(Game1.confuseTexture.Width / 2), (float)(Game1.confuseTexture.Height / 2)), Game1.essScale + 0.2f, SpriteEffects.None, 0f);
                                }
                                if (type >= 134 && type <= 136 && color9 != Microsoft.Xna.Framework.Color.Black)
                                {
                                    Game1.spriteBatch.Draw(Game1.destTexture[type - 134], new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * (1f - (float)Game1.npc[i].alpha / 255f), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 125)
                                {
                                    Game1.spriteBatch.Draw(Game1.EyeLaserTexture, new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 139)
                                {
                                    Game1.spriteBatch.Draw(Game1.probeTexture, new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 127)
                                {
                                    Game1.spriteBatch.Draw(Game1.BoneEyesTexture, new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 131)
                                {
                                    Game1.spriteBatch.Draw(Game1.BoneLaserTexture, new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 120)
                                {
                                    for (int num166 = 1; num166 < Game1.npc[i].oldPos.Length; num166++)
                                    {
                                        Vector2 arg_B147_0 = Game1.npc[i].oldPos[num166];
                                        Microsoft.Xna.Framework.Color color28 = default(Microsoft.Xna.Framework.Color);
                                        color28.R = (byte)(150 * (10 - num166) / 15);
                                        color28.G = (byte)(100 * (10 - num166) / 15);
                                        color28.B = (byte)(150 * (10 - num166) / 15);
                                        color28.A = (byte)(50 * (10 - num166) / 15);
                                        Game1.spriteBatch.Draw(Game1.chaosTexture, new Vector2(Game1.npc[i].oldPos[num166].X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].oldPos[num166].Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), color28, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                }
                                else if (type == 137 || type == 138)
                                {
                                    for (int num167 = 1; num167 < Game1.npc[i].oldPos.Length; num167++)
                                    {
                                        Vector2 arg_B33B_0 = Game1.npc[i].oldPos[num167];
                                        Microsoft.Xna.Framework.Color color29 = default(Microsoft.Xna.Framework.Color);
                                        color29.R = (byte)(150 * (10 - num167) / 15);
                                        color29.G = (byte)(100 * (10 - num167) / 15);
                                        color29.B = (byte)(150 * (10 - num167) / 15);
                                        color29.A = (byte)(50 * (10 - num167) / 15);
                                        Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2(Game1.npc[i].oldPos[num167].X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].oldPos[num167].Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), color29, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                }
                                else if (type == 327)
                                {
                                    Game1.spriteBatch.Draw(Game1.pumpkingFaceTexture, new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), Microsoft.Xna.Framework.Color.White, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    for (int num168 = 1; num168 < 10; num168++)
                                    {
                                        Microsoft.Xna.Framework.Color color30 = new Microsoft.Xna.Framework.Color(110 - num168 * 10, 110 - num168 * 10, 110 - num168 * 10, 110 - num168 * 10);
                                        Vector2 value32 = new Vector2((float)Game1.rand.Next(-10, 11) * 0.2f, (float)Game1.rand.Next(-10, 11) * 0.2f);
                                        Game1.spriteBatch.Draw(Game1.pumpkingFaceTexture, new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66) + value32, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), color30, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                }
                                else if (type == 325)
                                {
                                    Game1.spriteBatch.Draw(Game1.treeFaceTexture, new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), Microsoft.Xna.Framework.Color.White, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    for (int num169 = 1; num169 < 10; num169++)
                                    {
                                        Microsoft.Xna.Framework.Color color31 = new Microsoft.Xna.Framework.Color(110 - num169 * 10, 110 - num169 * 10, 110 - num169 * 10, 110 - num169 * 10);
                                        Vector2 value33 = new Vector2((float)Game1.rand.Next(-10, 11) * 0.2f, (float)Game1.rand.Next(-10, 11) * 0.2f);
                                        Game1.spriteBatch.Draw(Game1.treeFaceTexture, new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66) + value33, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), color31, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                }
                                else if (type == 345)
                                {
                                    Game1.spriteBatch.Draw(Game1.iceQueenTexture, new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), Microsoft.Xna.Framework.Color.White, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    for (int num170 = 1; num170 < 5; num170++)
                                    {
                                        Microsoft.Xna.Framework.Color color32 = new Microsoft.Xna.Framework.Color(100 - num170 * 10, 100 - num170 * 10, 100 - num170 * 10, 100 - num170 * 10);
                                        Game1.spriteBatch.Draw(Game1.iceQueenTexture, new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66) - Game1.npc[i].velocity * (float)num170 * 0.2f, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), color32, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                }
                                else if (type == 355)
                                {
                                    Game1.spriteBatch.Draw(Game1.fireflyTexture, new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 358)
                                {
                                    Game1.spriteBatch.Draw(Game1.lightningbugTexture, new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 82)
                                {
                                    Game1.spriteBatch.Draw(Game1.wraithEyeTexture, new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), Microsoft.Xna.Framework.Color.White, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    for (int num171 = 1; num171 < 10; num171++)
                                    {
                                        Microsoft.Xna.Framework.Color color33 = new Microsoft.Xna.Framework.Color(110 - num171 * 10, 110 - num171 * 10, 110 - num171 * 10, 110 - num171 * 10);
                                        Game1.spriteBatch.Draw(Game1.wraithEyeTexture, new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66) - Game1.npc[i].velocity * (float)num171 * 0.5f, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), color33, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                }
                                else if (type == 253)
                                {
                                    Game1.spriteBatch.Draw(Game1.reaperEyeTexture, new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 3f + vector10.Y * Game1.npc[i].scale + num66), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), Microsoft.Xna.Framework.Color.White, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    for (int num172 = 1; num172 < 20; num172++)
                                    {
                                        Microsoft.Xna.Framework.Color color34 = new Microsoft.Xna.Framework.Color(210 - num172 * 20, 210 - num172 * 20, 210 - num172 * 20, 210 - num172 * 20);
                                        Game1.spriteBatch.Draw(Game1.reaperEyeTexture, new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 3f + vector10.Y * Game1.npc[i].scale + num66) - Game1.npc[i].velocity * (float)num172 * 0.5f, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), color34, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                }
                                else if (type == 245 && Game1.npc[i].alpha == 0)
                                {
                                    Microsoft.Xna.Framework.Color color35 = new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, 0);
                                    Game1.spriteBatch.Draw(Game1.golemTexture[3], new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame4), color35, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 246)
                                {
                                    Microsoft.Xna.Framework.Color color36 = new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, 0);
                                    if (Game1.npc[i].frame.Y < 222)
                                    {
                                        Game1.spriteBatch.Draw(Game1.golemTexture[1], new Vector2(Game1.npc[i].Center.X - Game1.screenPosition.X - 20f, Game1.npc[i].Center.Y - Game1.screenPosition.Y - 27f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.golemTexture[1].Width, Game1.golemTexture[1].Height / 2)), color36, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                    }
                                    else if (Game1.npc[i].frame.Y < 444)
                                    {
                                        Game1.spriteBatch.Draw(Game1.golemTexture[2], new Vector2(Game1.npc[i].Center.X - Game1.screenPosition.X + 26f, Game1.npc[i].Center.Y - Game1.screenPosition.Y - 28f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.golemTexture[2].Width, Game1.golemTexture[2].Height / 4)), color36, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                    }
                                    else
                                    {
                                        Game1.spriteBatch.Draw(Game1.golemTexture[2], new Vector2(Game1.npc[i].Center.X - Game1.screenPosition.X - 38f, Game1.npc[i].Center.Y - Game1.screenPosition.Y - 28f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.golemTexture[2].Height / 2, Game1.golemTexture[2].Width, Game1.golemTexture[2].Height / 4)), color36, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                    }
                                }
                                else if (type == 249)
                                {
                                    Microsoft.Xna.Framework.Color color37 = new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, 0);
                                    Game1.spriteBatch.Draw(Game1.golemTexture[1], new Vector2(Game1.npc[i].Center.X - Game1.screenPosition.X - 20f, Game1.npc[i].Center.Y - Game1.screenPosition.Y - 47f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.golemTexture[1].Width, Game1.golemTexture[1].Height / 2)), color37, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                }
                                else if (type == 383)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[11], new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame4), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    if (Game1.npc[i].ai[2] != 0f && Game1.npc[(int)Game1.npc[i].ai[2] - 1].active && Game1.npc[(int)Game1.npc[i].ai[2] - 1].type == 384)
                                    {
                                        float arg_CB5F_0 = Game1.npc[i].ai[2];
                                        Game1.spriteBatch.Draw(Game1.npcTexture[384], new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), null, new Microsoft.Xna.Framework.Color(100, 100, 100, 0), Game1.npc[i].rotation, new Vector2((float)Game1.npcTexture[384].Width, (float)Game1.npcTexture[384].Height) / 2f, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                }
                                else if (type == 381)
                                {
                                    Vector2 vector38 = Vector2.Zero;
                                    Vector2 zero3 = Vector2.Zero;
                                    int num173 = Game1.npcTexture[type].Height / Game1.npcFrameCount[type];
                                    int num174 = Game1.npc[i].frame.Y / num173;
                                    Microsoft.Xna.Framework.Rectangle value34 = new Microsoft.Xna.Framework.Rectangle(0, 0, 32, 42);
                                    switch (num174)
                                    {
                                        case 0:
                                            vector38 += new Vector2(8f, 32f);
                                            break;
                                        case 1:
                                            vector38 += new Vector2(6f, 72f);
                                            break;
                                        case 2:
                                            vector38 += new Vector2(8f, 126f);
                                            break;
                                        case 3:
                                            vector38 += new Vector2(6f, 174f);
                                            break;
                                        case 4:
                                            vector38 += new Vector2(6f, 224f);
                                            break;
                                        case 5:
                                            vector38 += new Vector2(8f, 272f);
                                            break;
                                        case 6:
                                            vector38 += new Vector2(10f, 318f);
                                            break;
                                        case 7:
                                            vector38 += new Vector2(14f, 366f);
                                            break;
                                        case 8:
                                            vector38 += new Vector2(10f, 414f);
                                            break;
                                    }
                                    vector38.Y -= (float)(num173 * num174);
                                    vector38 -= vector10;
                                    int num175 = 2;
                                    if (Game1.npc[i].ai[2] > 0f)
                                    {
                                        num175 = (int)Game1.npc[i].ai[2] - 1;
                                    }
                                    if (Game1.npc[i].velocity.Y != 0f)
                                    {
                                        num175 = 3;
                                    }
                                    value34.Y += 44 * num175;
                                    switch (num175)
                                    {
                                        case 0:
                                            zero3 = new Vector2(10f, 18f);
                                            break;
                                        case 1:
                                            zero3 = new Vector2(8f, 20f);
                                            break;
                                        case 2:
                                            zero3 = new Vector2(8f, 20f);
                                            break;
                                        case 3:
                                            zero3 = new Vector2(8f, 20f);
                                            break;
                                        case 4:
                                            zero3 = new Vector2(6f, 18f);
                                            break;
                                    }
                                    if (spriteEffects.HasFlag(SpriteEffects.FlipHorizontally))
                                    {
                                        vector38.X *= -1f;
                                        zero3.X = (float)value34.Width - zero3.X;
                                    }
                                    vector38 += Game1.npc[i].Center;
                                    vector38 -= Game1.screenPosition;
                                    vector38.Y += Game1.npc[i].gfxOffY;
                                    Game1.spriteBatch.Draw(Game1.extraTexture[0], vector38, new Microsoft.Xna.Framework.Rectangle?(value34), color9, Game1.npc[i].rotation, zero3, Game1.npc[i].scale, spriteEffects, 0f);
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[24], vector38, new Microsoft.Xna.Framework.Rectangle?(value34), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), Game1.npc[i].rotation, zero3, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 382)
                                {
                                    Vector2 vector39 = Vector2.Zero;
                                    Vector2 zero4 = Vector2.Zero;
                                    int num176 = Game1.npcTexture[type].Height / Game1.npcFrameCount[type];
                                    int num177 = Game1.npc[i].frame.Y / num176;
                                    Microsoft.Xna.Framework.Rectangle value35 = new Microsoft.Xna.Framework.Rectangle(0, 0, 30, 42);
                                    switch (num177)
                                    {
                                        case 0:
                                            vector39 += new Vector2(8f, 30f);
                                            break;
                                        case 1:
                                            vector39 += new Vector2(6f, 68f);
                                            break;
                                        case 2:
                                            vector39 += new Vector2(8f, 120f);
                                            break;
                                        case 3:
                                            vector39 += new Vector2(6f, 166f);
                                            break;
                                        case 4:
                                            vector39 += new Vector2(6f, 214f);
                                            break;
                                        case 5:
                                            vector39 += new Vector2(8f, 260f);
                                            break;
                                        case 6:
                                            vector39 += new Vector2(14f, 304f);
                                            break;
                                        case 7:
                                            vector39 += new Vector2(14f, 350f);
                                            break;
                                        case 8:
                                            vector39 += new Vector2(10f, 396f);
                                            break;
                                    }
                                    vector39.Y -= (float)(num176 * num177);
                                    vector39 -= vector10;
                                    int num178 = 2;
                                    if (Game1.npc[i].ai[2] > 0f)
                                    {
                                        num178 = (int)Game1.npc[i].ai[2] - 1;
                                    }
                                    if (Game1.npc[i].velocity.Y != 0f)
                                    {
                                        num178 = 3;
                                    }
                                    value35.Y += 44 * num178;
                                    switch (num178)
                                    {
                                        case 0:
                                            zero4 = new Vector2(10f, 18f);
                                            break;
                                        case 1:
                                            zero4 = new Vector2(8f, 20f);
                                            break;
                                        case 2:
                                            zero4 = new Vector2(8f, 20f);
                                            break;
                                        case 3:
                                            zero4 = new Vector2(8f, 20f);
                                            break;
                                        case 4:
                                            zero4 = new Vector2(6f, 18f);
                                            break;
                                    }
                                    if (spriteEffects.HasFlag(SpriteEffects.FlipHorizontally))
                                    {
                                        vector39.X *= -1f;
                                        zero4.X = (float)value35.Width - zero4.X;
                                    }
                                    vector39 += Game1.npc[i].Center;
                                    vector39 -= Game1.screenPosition;
                                    vector39.Y += Game1.npc[i].gfxOffY;
                                    Game1.spriteBatch.Draw(Game1.extraTexture[1], vector39, new Microsoft.Xna.Framework.Rectangle?(value35), color9, Game1.npc[i].rotation, zero4, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 520)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[164], new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame4), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    Vector2 vector40 = Vector2.Zero;
                                    Vector2 origin10 = new Vector2(4f, 4f);
                                    int num179 = Game1.npcTexture[type].Height / Game1.npcFrameCount[type];
                                    int arg_D5E8_0 = Game1.npc[i].frame.Y / num179;
                                    if (spriteEffects.HasFlag(SpriteEffects.FlipHorizontally))
                                    {
                                        vector40.X *= -1f;
                                        origin10.X = (float)Game1.extraTexture[56].Width - origin10.X;
                                    }
                                    vector40 += Game1.npc[i].Top + new Vector2(0f, 20f);
                                    vector40 -= Game1.screenPosition;
                                    vector40.Y += Game1.npc[i].gfxOffY;
                                    float num180 = Game1.npc[i].localAI[3];
                                    if (spriteEffects.HasFlag(SpriteEffects.FlipHorizontally))
                                    {
                                        num180 += 3.14159274f;
                                    }
                                    Game1.spriteBatch.Draw(Game1.extraTexture[56], vector40, null, color9, num180, origin10, Game1.npc[i].scale, spriteEffects, 0f);
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[165], vector40, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), num180, origin10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 386)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[31], new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame4), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 387)
                                {
                                    Microsoft.Xna.Framework.Color color38 = new Microsoft.Xna.Framework.Color(1f, 1f, 1f, 1f) * 0.75f;
                                    if (Game1.npc[i].ai[0] > 0f)
                                    {
                                        float amount5 = (Game1.npc[i].ai[0] + 1f) / 60f;
                                        color38 = Microsoft.Xna.Framework.Color.Lerp(color38, Microsoft.Xna.Framework.Color.White, amount5);
                                        color38.A = (byte)MathHelper.Lerp((float)color38.A, 0f, amount5);
                                    }
                                    color38 *= (255f - (float)Game1.npc[i].alpha) / 255f;
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[32], new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame4), color38, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 388)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[33], new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame4), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 389)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[34], new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame4), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 4 && Game1.npc[i].ai[1] >= 4f && Game1.npc[i].ai[0] == 3f)
                                {
                                    for (int num181 = 1; num181 < Game1.npc[i].oldPos.Length; num181++)
                                    {
                                        Vector2 arg_DD71_0 = Game1.npc[i].oldPos[num181];
                                        Microsoft.Xna.Framework.Color color39 = color9;
                                        color39.R = (byte)(0.5 * (double)color39.R * (double)(10 - num181) / 20.0);
                                        color39.G = (byte)(0.5 * (double)color39.G * (double)(10 - num181) / 20.0);
                                        color39.B = (byte)(0.5 * (double)color39.B * (double)(10 - num181) / 20.0);
                                        color39.A = (byte)(0.5 * (double)color39.A * (double)(10 - num181) / 20.0);
                                        Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2(Game1.npc[i].oldPos[num181].X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].oldPos[num181].Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), color39, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                }
                                else if (type == 437)
                                {
                                    Microsoft.Xna.Framework.Color white3 = Microsoft.Xna.Framework.Color.White;
                                    white3.A = 200;
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[109], new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(frame4), white3, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[108], new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + num65 + Game1.npc[i].gfxOffY), null, white3, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 471 && Game1.npc[i].ai[3] < 0f)
                                {
                                    for (int num182 = 1; num182 < Game1.npc[i].oldPos.Length; num182++)
                                    {
                                        Vector2 arg_E247_0 = Game1.npc[i].oldPos[num182];
                                        Microsoft.Xna.Framework.Color color40 = color9;
                                        color40.R = (byte)(0.5 * (double)color40.R * (double)(10 - num182) / 20.0);
                                        color40.G = (byte)(0.5 * (double)color40.G * (double)(10 - num182) / 20.0);
                                        color40.B = (byte)(0.5 * (double)color40.B * (double)(10 - num182) / 20.0);
                                        color40.A = (byte)(0.5 * (double)color40.A * (double)(10 - num182) / 20.0);
                                        Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2(Game1.npc[i].oldPos[num182].X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].oldPos[num182].Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), color40, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                }
                                else if (type == 477 && Game1.npc[i].velocity.Length() > 9f)
                                {
                                    for (int num183 = 1; num183 < Game1.npc[i].oldPos.Length; num183++)
                                    {
                                        Vector2 arg_E4AE_0 = Game1.npc[i].oldPos[num183];
                                        Microsoft.Xna.Framework.Color color41 = color9;
                                        color41.R = (byte)(0.5 * (double)color41.R * (double)(10 - num183) / 20.0);
                                        color41.G = (byte)(0.5 * (double)color41.G * (double)(10 - num183) / 20.0);
                                        color41.B = (byte)(0.5 * (double)color41.B * (double)(10 - num183) / 20.0);
                                        color41.A = (byte)(0.5 * (double)color41.A * (double)(10 - num183) / 20.0);
                                        Microsoft.Xna.Framework.Rectangle frame5 = Game1.npc[i].frame;
                                        int num184 = Game1.npcTexture[type].Height / Game1.npcFrameCount[type];
                                        frame5.Y -= num184 * num183;
                                        while (frame5.Y < 0)
                                        {
                                            frame5.Y += num184 * Game1.npcFrameCount[type];
                                        }
                                        Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2(Game1.npc[i].oldPos[num183].X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].oldPos[num183].Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66), new Microsoft.Xna.Framework.Rectangle?(frame5), color41, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                }
                                if (type == 479 && (double)Game1.npc[i].velocity.Length() > 6.5)
                                {
                                    for (int num185 = 1; num185 < Game1.npc[i].oldPos.Length; num185++)
                                    {
                                        Vector2 arg_E778_0 = Game1.npc[i].oldPos[num185];
                                        Microsoft.Xna.Framework.Color color42 = color9;
                                        color42.R = (byte)(0.5 * (double)color42.R * (double)(10 - num185) / 20.0);
                                        color42.G = (byte)(0.5 * (double)color42.G * (double)(10 - num185) / 20.0);
                                        color42.B = (byte)(0.5 * (double)color42.B * (double)(10 - num185) / 20.0);
                                        color42.A = (byte)(0.5 * (double)color42.A * (double)(10 - num185) / 20.0);
                                        Microsoft.Xna.Framework.Rectangle frame6 = Game1.npc[i].frame;
                                        int num186 = Game1.npcTexture[type].Height / Game1.npcFrameCount[type];
                                        frame6.Y -= num186 * num185;
                                        while (frame6.Y < 0)
                                        {
                                            frame6.Y += num186 * Game1.npcFrameCount[type];
                                        }
                                        Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2(Game1.npc[i].oldPos[num185].X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].oldPos[num185].Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66), new Microsoft.Xna.Framework.Rectangle?(frame6), color42, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                }
                                else if (type == 472)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[110], new Vector2(Game1.npc[i].position.X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].position.Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (Game1.npc[i].aiStyle == 87)
                                {
                                    if ((int)Game1.npc[i].ai[0] == 4 || Game1.npc[i].ai[0] == 5f || Game1.npc[i].ai[0] == 6f)
                                    {
                                        for (int num187 = 1; num187 < Game1.npc[i].oldPos.Length; num187++)
                                        {
                                            Vector2 arg_EBD1_0 = Game1.npc[i].oldPos[num187];
                                            Microsoft.Xna.Framework.Color color43 = color9;
                                            color43.R = (byte)(0.5 * (double)color43.R * (double)(10 - num187) / 20.0);
                                            color43.G = (byte)(0.5 * (double)color43.G * (double)(10 - num187) / 20.0);
                                            color43.B = (byte)(0.5 * (double)color43.B * (double)(10 - num187) / 20.0);
                                            color43.A = (byte)(0.5 * (double)color43.A * (double)(10 - num187) / 20.0);
                                            Game1.spriteBatch.Draw(Game1.npcTexture[type], new Vector2(Game1.npc[i].oldPos[num187].X - Game1.screenPosition.X + (float)(Game1.npc[i].width / 2) - (float)Game1.npcTexture[type].Width * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, Game1.npc[i].oldPos[num187].Y - Game1.screenPosition.Y + (float)Game1.npc[i].height - (float)Game1.npcTexture[type].Height * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), color43, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                        }
                                    }
                                }
                                else if (type == 50)
                                {
                                    Texture2D texture2D26 = Game1.extraTexture[39];
                                    Vector2 center3 = Game1.npc[i].Center;
                                    float num188 = 0f;
                                    switch (Game1.npc[i].frame.Y / (Game1.npcTexture[type].Height / Game1.npcFrameCount[type]))
                                    {
                                        case 0:
                                            num188 = 2f;
                                            break;
                                        case 1:
                                            num188 = -6f;
                                            break;
                                        case 2:
                                            num188 = 2f;
                                            break;
                                        case 3:
                                            num188 = 10f;
                                            break;
                                        case 4:
                                            num188 = 2f;
                                            break;
                                        case 5:
                                            num188 = 0f;
                                            break;
                                    }
                                    center3.Y += Game1.npc[i].gfxOffY - (70f - num188) * Game1.npc[i].scale;
                                    Game1.spriteBatch.Draw(texture2D26, center3 - Game1.screenPosition, null, color9, 0f, texture2D26.Size() / 2f, 1f, spriteEffects, 0f);
                                }
                                else if (type == 411)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[136], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 409)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[138], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 410)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[137], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 407)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[139], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 405)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[141], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 406)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[142], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 424)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[144], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 423)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[145], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 421)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[146], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 420)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[147], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 425)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[150], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 429)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[151], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 418)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[161], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    float scaleFactor11 = 0.25f + (Game1.npc[i].GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 0.25f;
                                    for (int num189 = 0; num189 < 4; num189++)
                                    {
                                        Game1.spriteBatch.Draw(Game1.glowMaskTexture[161], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY) + Game1.npc[i].velocity.RotatedBy((double)((float)num189 * 1.57079637f), default(Vector2)) * scaleFactor11, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                }
                                else if (type >= 412 && type <= 414)
                                {
                                    Microsoft.Xna.Framework.Color color44 = new Microsoft.Xna.Framework.Color(255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 0);
                                    int num190 = 157 + type - 412;
                                    if (type == 414 && Game1.npc[i].localAI[2] != 0f)
                                    {
                                        int num191 = (int)Game1.npc[i].localAI[2];
                                        if (Game1.npc[i].localAI[2] < 0f)
                                        {
                                            num191 = 128 + (int)Game1.npc[i].localAI[2];
                                        }
                                        int num192 = 255 - num191;
                                        color44 = new Microsoft.Xna.Framework.Color(num192, num191, num191, num192);
                                    }
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[num190], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), color44, Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 415)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[155], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    float scaleFactor12 = 0.5f + (Game1.npc[i].GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
                                    for (int num193 = 0; num193 < 4; num193++)
                                    {
                                        Game1.spriteBatch.Draw(Game1.glowMaskTexture[155], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY) + Game1.npc[i].velocity.RotatedBy((double)((float)num193 * 1.57079637f), default(Vector2)) * scaleFactor12, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                }
                                else if (type == 419)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[154], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    if (Game1.npc[i].ai[2] >= -6f)
                                    {
                                        float scaleFactor13 = 0.5f + (Game1.npc[i].GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
                                        for (int num194 = 0; num194 < 4; num194++)
                                        {
                                            Game1.spriteBatch.Draw(Game1.glowMaskTexture[154], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY) + Game1.npc[i].velocity.RotatedBy((double)((float)num194 * 1.57079637f), default(Vector2)) * scaleFactor13, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                        }
                                    }
                                    else
                                    {
                                        float scaleFactor14 = 4f;
                                        for (int num195 = 0; num195 < 4; num195++)
                                        {
                                            Game1.spriteBatch.Draw(Game1.glowMaskTexture[154], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY) + Vector2.UnitX.RotatedBy((double)((float)num195 * 1.57079637f), default(Vector2)) * scaleFactor14, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                        }
                                    }
                                }
                                else if (type == 417)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[160], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    float scaleFactor15 = 0.25f + (Game1.npc[i].GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 0.25f;
                                    for (int num196 = 0; num196 < 4; num196++)
                                    {
                                        Game1.spriteBatch.Draw(Game1.glowMaskTexture[160], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY) + Game1.npc[i].velocity.RotatedBy((double)((float)num196 * 1.57079637f), default(Vector2)) * scaleFactor15, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                }
                                else if (type == 516)
                                {
                                    Game1.spriteBatch.Draw(Game1.npcTexture[type], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    float scaleFactor16 = 0.5f + (Game1.npc[i].GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
                                    for (int num197 = 0; num197 < 4; num197++)
                                    {
                                        Game1.spriteBatch.Draw(Game1.npcTexture[type], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY) + Game1.npc[i].velocity.RotatedBy((double)((float)num197 * 1.57079637f), default(Vector2)) * scaleFactor16, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                }
                                else if (type == 518)
                                {
                                    Vector2 value36 = new Vector2(-10f, 0f);
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[163], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha, 255 - Game1.npc[i].alpha), Game1.npc[i].rotation, vector10 + value36, Game1.npc[i].scale, spriteEffects, 0f);
                                    float scaleFactor17 = 0.5f + (Game1.npc[i].GetAlpha(color9).ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
                                    for (int num198 = 0; num198 < 4; num198++)
                                    {
                                        Game1.spriteBatch.Draw(Game1.glowMaskTexture[163], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY) + Game1.npc[i].velocity.RotatedBy((double)((float)num198 * 1.57079637f), default(Vector2)) * scaleFactor17, new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), Game1.npc[i].rotation, vector10 + value36, Game1.npc[i].scale, spriteEffects, 0f);
                                    }
                                }
                                else if (type == 525)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[169], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 100), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 526)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[170], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 100), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 527)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[171], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 100), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 533)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[172], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 100), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 160)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[166], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                else if (type == 209)
                                {
                                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[167], Game1.npc[i].Bottom - Game1.screenPosition + new Vector2((float)(-(float)Game1.npcTexture[type].Width) * Game1.npc[i].scale / 2f + vector10.X * Game1.npc[i].scale, (float)(-(float)Game1.npcTexture[type].Height) * Game1.npc[i].scale / (float)Game1.npcFrameCount[type] + 4f + vector10.Y * Game1.npc[i].scale + num66 + Game1.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Game1.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 128 - Game1.npc[i].alpha / 2, 0), Game1.npc[i].rotation, vector10, Game1.npc[i].scale, spriteEffects, 0f);
                                }
                                if (Game1.npc[i].aiStyle == 7)
                                {
                                    NPC n3 = Game1.npc[i];
                                    this.DrawNPCExtras(n3, false, num66, num65, color9, vector10, spriteEffects);
                                }
                            }
                        }
                    }
                }
            }
        }
        protected void DrawNPCExtras(NPC n, bool beforeDraw, float addHeight, float addY, Microsoft.Xna.Framework.Color npcColor, Vector2 halfSize, SpriteEffects npcSpriteEffect)
        {
            if (NPCID.Sets.AttackType[n.type] == 1 && n.ai[0] == 12f && !beforeDraw)
            {
                if (n.type == 228 || n.type == 229 || n.type == 209)
                {
                    return;
                }
                float num = n.ai[2];
                Vector2 value = Game1.OffsetsNPCOffhand[2];
                if (n.spriteDirection == 1)
                {
                    value.X *= -1f;
                }
                Vector2 vector = n.Bottom - value;
                if (n.type == 22 && n.ai[2] > -0.1f)
                {
                    vector.Y += 4f;
                }
                if (n.type == 368 && Game1.hardMode && n.ai[2] > -0.1f)
                {
                    vector.Y += 4f;
                }
                if (n.type == 368 && !Game1.hardMode && n.ai[2] < -0.1f)
                {
                    vector.Y -= 8f;
                }
                float rotation = num * 1.57079637f * (float)n.spriteDirection;
                float num2 = 1f;
                int num3 = 0;
                int num4 = 4;
                if (n.type == 19)
                {
                    num3 = (Game1.hardMode ? 98 : 95);
                    if (Game1.hardMode)
                    {
                        vector.X -= (float)(10 * n.direction);
                        vector.Y += 4f;
                    }
                }
                else if (n.type == 22)
                {
                    num3 = 39;
                    num4 = 18;
                }
                else if (n.type == 178)
                {
                    num3 = 434;
                }
                else if (n.type == 227)
                {
                    num3 = 3350;
                    num4 = 16;
                    num2 = 0.85f;
                }
                else if (n.type == 368)
                {
                    num3 = (Game1.hardMode ? 2223 : 2269);
                    if (Game1.hardMode)
                    {
                        num4 = 18;
                    }
                    else
                    {
                        if (n.ai[2] < -0.1f)
                        {
                            num4 = 28;
                        }
                        num2 = 0.75f;
                    }
                }
                Texture2D texture2D = Game1.itemTexture[num3];
                int num5 = (int)this.DrawPlayerItemPos(1f, num3).X - num4;
                Vector2 origin = new Vector2((float)(-(float)num5), (float)(texture2D.Height / 2));
                if (n.spriteDirection == -1)
                {
                    origin = new Vector2((float)(texture2D.Width + num5), (float)(texture2D.Height / 2));
                }
                Game1.spriteBatch.Draw(texture2D, new Vector2((float)((int)(vector.X - Game1.screenPosition.X)), (float)((int)(vector.Y - Game1.screenPosition.Y))), null, npcColor, rotation, origin, n.scale * num2, npcSpriteEffect ^ SpriteEffects.FlipHorizontally, 0f);
                if (n.type == 22 && n.frame.Y / (Game1.npcTexture[n.type].Height / Game1.npcFrameCount[n.type]) >= 21)
                {
                    Texture2D texture2D2 = Game1.extraTexture[52];
                    Microsoft.Xna.Framework.Rectangle value2 = texture2D2.Frame(1, 5, 0, n.frame.Y / (Game1.npcTexture[n.type].Height / Game1.npcFrameCount[n.type]) - 21);
                    Game1.spriteBatch.Draw(texture2D2, new Vector2(n.position.X - Game1.screenPosition.X + (float)(n.width / 2) - (float)Game1.npcTexture[n.type].Width * n.scale / 2f + halfSize.X * n.scale, n.position.Y - Game1.screenPosition.Y + (float)n.height - (float)Game1.npcTexture[n.type].Height * n.scale / (float)Game1.npcFrameCount[n.type] + 4f + halfSize.Y * n.scale + addHeight + addY + n.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(value2), n.GetAlpha(npcColor), n.rotation, halfSize, n.scale, npcSpriteEffect, 0f);
                }
                else if (n.type == 368 && n.frame.Y / (Game1.npcTexture[n.type].Height / Game1.npcFrameCount[n.type]) >= 21)
                {
                    Texture2D texture2D3 = Game1.extraTexture[53];
                    Microsoft.Xna.Framework.Rectangle value3 = texture2D3.Frame(1, 5, 0, n.frame.Y / (Game1.npcTexture[n.type].Height / Game1.npcFrameCount[n.type]) - 21);
                    Game1.spriteBatch.Draw(texture2D3, new Vector2(n.position.X - Game1.screenPosition.X + (float)(n.width / 2) - (float)Game1.npcTexture[n.type].Width * n.scale / 2f + halfSize.X * n.scale, n.position.Y - Game1.screenPosition.Y + (float)n.height - (float)Game1.npcTexture[n.type].Height * n.scale / (float)Game1.npcFrameCount[n.type] + 4f + halfSize.Y * n.scale + addHeight + addY + n.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(value3), n.GetAlpha(npcColor), n.rotation, halfSize, n.scale, npcSpriteEffect, 0f);
                }
            }
            if (NPCID.Sets.AttackType[n.type] == 2 && n.ai[0] == 14f && !beforeDraw)
            {
                Texture2D texture2D4 = Game1.extraTexture[51];
                Vector2 vector2 = n.Bottom + new Vector2(0f, n.gfxOffY + 4f);
                Microsoft.Xna.Framework.Rectangle rectangle = texture2D4.Frame(1, 4, 0, (int)n.frameCounter % 48 / 12);
                Vector2 origin2 = rectangle.Size() * new Vector2(0.5f, 1f);
                Game1.spriteBatch.Draw(texture2D4, new Vector2((float)((int)(vector2.X - Game1.screenPosition.X)), (float)((int)(vector2.Y - Game1.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(rectangle), NPCID.Sets.MagicAuraColor[n.type], 0f, origin2, n.scale, npcSpriteEffect ^ SpriteEffects.FlipHorizontally, 0f);
            }
            if (NPCID.Sets.AttackType[n.type] == 3 && n.ai[0] == 15f)
            {
                Texture2D texture2D5 = Game1.itemTexture[4];
                int num6 = 32;
                float scaleFactor = 0f;
                Vector2 zero = Vector2.Zero;
                if (n.type == 207)
                {
                    texture2D5 = Game1.itemTexture[3349];
                    scaleFactor = 0.15f;
                    if (beforeDraw)
                    {
                        return;
                    }
                    if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
                    {
                        zero.Y = 12f;
                    }
                }
                else if (n.type == 353)
                {
                    texture2D5 = Game1.itemTexture[3352];
                    scaleFactor = 0.15f;
                    if (!beforeDraw)
                    {
                        return;
                    }
                    if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
                    {
                        zero.Y = 12f;
                    }
                }
                else if (n.type == 441)
                {
                    texture2D5 = Game1.itemTexture[3351];
                    num6 = 28;
                    scaleFactor = 0.1f;
                    if (!beforeDraw)
                    {
                        return;
                    }
                    if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
                    {
                        zero.Y = 12f;
                    }
                }
                Tuple<Vector2, float> swingStats = n.GetSwingStats(NPCID.Sets.AttackTime[n.type] * 2, (int)n.ai[1], n.spriteDirection, num6, num6);
                Vector2 vector3 = swingStats.Item1 + (swingStats.Item1 - n.Center) * scaleFactor + zero;
                Vector2 origin3 = texture2D5.Size() * new Vector2((float)((n.spriteDirection == 1) ? 0 : 1), 1f);
                Game1.spriteBatch.Draw(texture2D5, new Vector2((float)((int)(vector3.X - Game1.screenPosition.X)), (float)((int)(vector3.Y - Game1.screenPosition.Y))), null, NPCID.Sets.MagicAuraColor[n.type], swingStats.Item2, origin3, n.scale, npcSpriteEffect ^ SpriteEffects.FlipHorizontally, 0f);
            }
        }
        public void DrawProj(int i)
        {
            float num = 0f;
            float num2 = 0f;
            Projectile projectile = Game1.projectile[i];
            this.LoadProjectile(projectile.type);
            Vector2 mountedCenter = Game1.player[projectile.owner].MountedCenter;
            if (projectile.aiStyle == 99)
            {
                Vector2 vector = mountedCenter;
                vector.Y += Game1.player[projectile.owner].gfxOffY;
                float num3 = projectile.Center.X - vector.X;
                float num4 = projectile.Center.Y - vector.Y;
                Math.Sqrt((double)(num3 * num3 + num4 * num4));
                float rotation = (float)Math.Atan2((double)num4, (double)num3) - 1.57f;
                if (!projectile.counterweight)
                {
                    int num5 = -1;
                    if (projectile.position.X + (float)(projectile.width / 2) < Game1.player[projectile.owner].position.X + (float)(Game1.player[projectile.owner].width / 2))
                    {
                        num5 = 1;
                    }
                    num5 *= -1;
                    Game1.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num4 * (float)num5), (double)(num3 * (float)num5));
                }
                bool flag = true;
                if (num3 == 0f && num4 == 0f)
                {
                    flag = false;
                }
                else
                {
                    float num6 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
                    num6 = 12f / num6;
                    num3 *= num6;
                    num4 *= num6;
                    vector.X -= num3 * 0.1f;
                    vector.Y -= num4 * 0.1f;
                    num3 = projectile.position.X + (float)projectile.width * 0.5f - vector.X;
                    num4 = projectile.position.Y + (float)projectile.height * 0.5f - vector.Y;
                }
                while (flag)
                {
                    float num7 = 12f;
                    float num8 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
                    float num9 = num8;
                    if (float.IsNaN(num8) || float.IsNaN(num9))
                    {
                        flag = false;
                    }
                    else
                    {
                        if (num8 < 20f)
                        {
                            num7 = num8 - 8f;
                            flag = false;
                        }
                        num8 = 12f / num8;
                        num3 *= num8;
                        num4 *= num8;
                        vector.X += num3;
                        vector.Y += num4;
                        num3 = projectile.position.X + (float)projectile.width * 0.5f - vector.X;
                        num4 = projectile.position.Y + (float)projectile.height * 0.1f - vector.Y;
                        if (num9 > 12f)
                        {
                            float num10 = 0.3f;
                            float num11 = Math.Abs(projectile.velocity.X) + Math.Abs(projectile.velocity.Y);
                            if (num11 > 16f)
                            {
                                num11 = 16f;
                            }
                            num11 = 1f - num11 / 16f;
                            num10 *= num11;
                            num11 = num9 / 80f;
                            if (num11 > 1f)
                            {
                                num11 = 1f;
                            }
                            num10 *= num11;
                            if (num10 < 0f)
                            {
                                num10 = 0f;
                            }
                            num10 *= num11;
                            num10 *= 0.5f;
                            if (num4 > 0f)
                            {
                                num4 *= 1f + num10;
                                num3 *= 1f - num10;
                            }
                            else
                            {
                                num11 = Math.Abs(projectile.velocity.X) / 3f;
                                if (num11 > 1f)
                                {
                                    num11 = 1f;
                                }
                                num11 -= 0.5f;
                                num10 *= num11;
                                if (num10 > 0f)
                                {
                                    num10 *= 2f;
                                }
                                num4 *= 1f + num10;
                                num3 *= 1f - num10;
                            }
                        }
                        rotation = (float)Math.Atan2((double)num4, (double)num3) - 1.57f;
                        int stringColor = Game1.player[projectile.owner].stringColor;
                        Microsoft.Xna.Framework.Color color = WorldGen.paintColor(stringColor);
                        if (color.R < 75)
                        {
                            color.R = 75;
                        }
                        if (color.G < 75)
                        {
                            color.G = 75;
                        }
                        if (color.B < 75)
                        {
                            color.B = 75;
                        }
                        if (stringColor == 13)
                        {
                            color = new Microsoft.Xna.Framework.Color(20, 20, 20);
                        }
                        else if (stringColor == 14 || stringColor == 0)
                        {
                            color = new Microsoft.Xna.Framework.Color(200, 200, 200);
                        }
                        else if (stringColor == 28)
                        {
                            color = new Microsoft.Xna.Framework.Color(163, 116, 91);
                        }
                        else if (stringColor == 27)
                        {
                            color = new Microsoft.Xna.Framework.Color(Game1.DiscoR, Game1.DiscoG, Game1.DiscoB);
                        }
                        color.A = (byte)((float)color.A * 0.4f);
                        float num12 = 0.5f;
                        color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f), color);
                        color = new Microsoft.Xna.Framework.Color((int)((byte)((float)color.R * num12)), (int)((byte)((float)color.G * num12)), (int)((byte)((float)color.B * num12)), (int)((byte)((float)color.A * num12)));
                        Game1.spriteBatch.Draw(Game1.fishingLineTexture, new Vector2(vector.X - Game1.screenPosition.X + (float)Game1.fishingLineTexture.Width * 0.5f, vector.Y - Game1.screenPosition.Y + (float)Game1.fishingLineTexture.Height * 0.5f) - new Vector2(6f, 0f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.fishingLineTexture.Width, (int)num7)), color, rotation, new Vector2((float)Game1.fishingLineTexture.Width * 0.5f, 0f), 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            if (projectile.bobber && Game1.player[projectile.owner].inventory[Game1.player[projectile.owner].selectedItem].holdStyle > 0)
            {
                num = mountedCenter.X;
                num2 = mountedCenter.Y;
                num2 += Game1.player[projectile.owner].gfxOffY;
                int type = Game1.player[projectile.owner].inventory[Game1.player[projectile.owner].selectedItem].itemId;
                float gravDir = Game1.player[projectile.owner].gravDir;
                if (type == 2289)
                {
                    num += (float)(43 * Game1.player[projectile.owner].direction);
                    if (Game1.player[projectile.owner].direction < 0)
                    {
                        num -= 13f;
                    }
                    num2 -= 36f * gravDir;
                }
                else if (type == 2291)
                {
                    num += (float)(43 * Game1.player[projectile.owner].direction);
                    if (Game1.player[projectile.owner].direction < 0)
                    {
                        num -= 13f;
                    }
                    num2 -= 34f * gravDir;
                }
                else if (type == 2292)
                {
                    num += (float)(46 * Game1.player[projectile.owner].direction);
                    if (Game1.player[projectile.owner].direction < 0)
                    {
                        num -= 13f;
                    }
                    num2 -= 34f * gravDir;
                }
                else if (type == 2293)
                {
                    num += (float)(43 * Game1.player[projectile.owner].direction);
                    if (Game1.player[projectile.owner].direction < 0)
                    {
                        num -= 13f;
                    }
                    num2 -= 34f * gravDir;
                }
                else if (type == 2294)
                {
                    num += (float)(43 * Game1.player[projectile.owner].direction);
                    if (Game1.player[projectile.owner].direction < 0)
                    {
                        num -= 13f;
                    }
                    num2 -= 30f * gravDir;
                }
                else if (type == 2295)
                {
                    num += (float)(43 * Game1.player[projectile.owner].direction);
                    if (Game1.player[projectile.owner].direction < 0)
                    {
                        num -= 13f;
                    }
                    num2 -= 30f * gravDir;
                }
                else if (type == 2296)
                {
                    num += (float)(43 * Game1.player[projectile.owner].direction);
                    if (Game1.player[projectile.owner].direction < 0)
                    {
                        num -= 13f;
                    }
                    num2 -= 30f * gravDir;
                }
                else if (type == 2421)
                {
                    num += (float)(47 * Game1.player[projectile.owner].direction);
                    if (Game1.player[projectile.owner].direction < 0)
                    {
                        num -= 13f;
                    }
                    num2 -= 36f * gravDir;
                }
                else if (type == 2422)
                {
                    num += (float)(47 * Game1.player[projectile.owner].direction);
                    if (Game1.player[projectile.owner].direction < 0)
                    {
                        num -= 13f;
                    }
                    num2 -= 32f * gravDir;
                }
                if (gravDir == -1f)
                {
                    num2 -= 12f;
                }
                Vector2 value = new Vector2(num, num2);
                value = Game1.player[projectile.owner].RotatedRelativePoint(value + new Vector2(8f), true) - new Vector2(8f);
                float num13 = projectile.position.X + (float)projectile.width * 0.5f - value.X;
                float num14 = projectile.position.Y + (float)projectile.height * 0.5f - value.Y;
                Math.Sqrt((double)(num13 * num13 + num14 * num14));
                float rotation2 = (float)Math.Atan2((double)num14, (double)num13) - 1.57f;
                bool flag2 = true;
                if (num13 == 0f && num14 == 0f)
                {
                    flag2 = false;
                }
                else
                {
                    float num15 = (float)Math.Sqrt((double)(num13 * num13 + num14 * num14));
                    num15 = 12f / num15;
                    num13 *= num15;
                    num14 *= num15;
                    value.X -= num13;
                    value.Y -= num14;
                    num13 = projectile.position.X + (float)projectile.width * 0.5f - value.X;
                    num14 = projectile.position.Y + (float)projectile.height * 0.5f - value.Y;
                }
                while (flag2)
                {
                    float num16 = 12f;
                    float num17 = (float)Math.Sqrt((double)(num13 * num13 + num14 * num14));
                    float num18 = num17;
                    if (float.IsNaN(num17) || float.IsNaN(num18))
                    {
                        flag2 = false;
                    }
                    else
                    {
                        if (num17 < 20f)
                        {
                            num16 = num17 - 8f;
                            flag2 = false;
                        }
                        num17 = 12f / num17;
                        num13 *= num17;
                        num14 *= num17;
                        value.X += num13;
                        value.Y += num14;
                        num13 = projectile.position.X + (float)projectile.width * 0.5f - value.X;
                        num14 = projectile.position.Y + (float)projectile.height * 0.1f - value.Y;
                        if (num18 > 12f)
                        {
                            float num19 = 0.3f;
                            float num20 = Math.Abs(projectile.velocity.X) + Math.Abs(projectile.velocity.Y);
                            if (num20 > 16f)
                            {
                                num20 = 16f;
                            }
                            num20 = 1f - num20 / 16f;
                            num19 *= num20;
                            num20 = num18 / 80f;
                            if (num20 > 1f)
                            {
                                num20 = 1f;
                            }
                            num19 *= num20;
                            if (num19 < 0f)
                            {
                                num19 = 0f;
                            }
                            num20 = 1f - projectile.localAI[0] / 100f;
                            num19 *= num20;
                            if (num14 > 0f)
                            {
                                num14 *= 1f + num19;
                                num13 *= 1f - num19;
                            }
                            else
                            {
                                num20 = Math.Abs(projectile.velocity.X) / 3f;
                                if (num20 > 1f)
                                {
                                    num20 = 1f;
                                }
                                num20 -= 0.5f;
                                num19 *= num20;
                                if (num19 > 0f)
                                {
                                    num19 *= 2f;
                                }
                                num14 *= 1f + num19;
                                num13 *= 1f - num19;
                            }
                        }
                        rotation2 = (float)Math.Atan2((double)num14, (double)num13) - 1.57f;
                        Microsoft.Xna.Framework.Color color2 = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(200, 200, 200, 100));
                        if (type == 2294)
                        {
                            color2 = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(100, 180, 230, 100));
                        }
                        if (type == 2295)
                        {
                            color2 = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(250, 90, 70, 100));
                        }
                        if (type == 2293)
                        {
                            color2 = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(203, 190, 210, 100));
                        }
                        if (type == 2421)
                        {
                            color2 = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(183, 77, 112, 100));
                        }
                        if (type == 2422)
                        {
                            color2 = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), new Microsoft.Xna.Framework.Color(255, 226, 116, 100));
                        }
                        Game1.spriteBatch.Draw(Game1.fishingLineTexture, new Vector2(value.X - Game1.screenPosition.X + (float)Game1.fishingLineTexture.Width * 0.5f, value.Y - Game1.screenPosition.Y + (float)Game1.fishingLineTexture.Height * 0.5f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.fishingLineTexture.Width, (int)num16)), color2, rotation2, new Vector2((float)Game1.fishingLineTexture.Width * 0.5f, 0f), 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            else if (projectile.type == 32)
            {
                Vector2 vector2 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
                float num21 = mountedCenter.X - vector2.X;
                float num22 = mountedCenter.Y - vector2.Y;
                float rotation3 = (float)Math.Atan2((double)num22, (double)num21) - 1.57f;
                bool flag3 = true;
                if (num21 == 0f && num22 == 0f)
                {
                    flag3 = false;
                }
                else
                {
                    float num23 = (float)Math.Sqrt((double)(num21 * num21 + num22 * num22));
                    num23 = 8f / num23;
                    num21 *= num23;
                    num22 *= num23;
                    vector2.X -= num21;
                    vector2.Y -= num22;
                    num21 = mountedCenter.X - vector2.X;
                    num22 = mountedCenter.Y - vector2.Y;
                }
                while (flag3)
                {
                    float num24 = (float)Math.Sqrt((double)(num21 * num21 + num22 * num22));
                    if (num24 < 28f)
                    {
                        flag3 = false;
                    }
                    else if (float.IsNaN(num24))
                    {
                        flag3 = false;
                    }
                    else
                    {
                        num24 = 28f / num24;
                        num21 *= num24;
                        num22 *= num24;
                        vector2.X += num21;
                        vector2.Y += num22;
                        num21 = mountedCenter.X - vector2.X;
                        num22 = mountedCenter.Y - vector2.Y;
                        Microsoft.Xna.Framework.Color color3 = Lighting.GetColor((int)vector2.X / 16, (int)(vector2.Y / 16f));
                        Game1.spriteBatch.Draw(Game1.chain5Texture, new Vector2(vector2.X - Game1.screenPosition.X, vector2.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain5Texture.Width, Game1.chain5Texture.Height)), color3, rotation3, new Vector2((float)Game1.chain5Texture.Width * 0.5f, (float)Game1.chain5Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            else if (projectile.type == 73)
            {
                Vector2 vector3 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
                float num25 = mountedCenter.X - vector3.X;
                float num26 = mountedCenter.Y - vector3.Y;
                float rotation4 = (float)Math.Atan2((double)num26, (double)num25) - 1.57f;
                bool flag4 = true;
                while (flag4)
                {
                    float num27 = (float)Math.Sqrt((double)(num25 * num25 + num26 * num26));
                    if (num27 < 25f)
                    {
                        flag4 = false;
                    }
                    else if (float.IsNaN(num27))
                    {
                        flag4 = false;
                    }
                    else
                    {
                        num27 = 12f / num27;
                        num25 *= num27;
                        num26 *= num27;
                        vector3.X += num25;
                        vector3.Y += num26;
                        num25 = mountedCenter.X - vector3.X;
                        num26 = mountedCenter.Y - vector3.Y;
                        Microsoft.Xna.Framework.Color color4 = Lighting.GetColor((int)vector3.X / 16, (int)(vector3.Y / 16f));
                        Game1.spriteBatch.Draw(Game1.chain8Texture, new Vector2(vector3.X - Game1.screenPosition.X, vector3.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain8Texture.Width, Game1.chain8Texture.Height)), color4, rotation4, new Vector2((float)Game1.chain8Texture.Width * 0.5f, (float)Game1.chain8Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            else if (projectile.type == 186)
            {
                float num28 = projectile.ai[1];
                float num29 = projectile.position.Y - num28;
                float num30 = (float)Game1.chain17Texture.Height - num29;
                if (num29 > 0f && projectile.ai[1] > 0f)
                {
                    Microsoft.Xna.Framework.Color color5 = Lighting.GetColor((int)projectile.position.X / 16, (int)projectile.position.Y / 16);
                    Game1.spriteBatch.Draw(Game1.chain17Texture, new Vector2(projectile.position.X - Game1.screenPosition.X, num28 - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, (int)num30, Game1.chain17Texture.Width, (int)num29)), color5, 0f, new Vector2(0f, 0f), 1f, SpriteEffects.None, 0f);
                }
            }
            else if (projectile.type == 74)
            {
                Vector2 vector4 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
                float num31 = mountedCenter.X - vector4.X;
                float num32 = mountedCenter.Y - vector4.Y;
                float rotation5 = (float)Math.Atan2((double)num32, (double)num31) - 1.57f;
                bool flag5 = true;
                while (flag5)
                {
                    float num33 = (float)Math.Sqrt((double)(num31 * num31 + num32 * num32));
                    if (num33 < 25f)
                    {
                        flag5 = false;
                    }
                    else if (float.IsNaN(num33))
                    {
                        flag5 = false;
                    }
                    else
                    {
                        num33 = 12f / num33;
                        num31 *= num33;
                        num32 *= num33;
                        vector4.X += num31;
                        vector4.Y += num32;
                        num31 = mountedCenter.X - vector4.X;
                        num32 = mountedCenter.Y - vector4.Y;
                        Microsoft.Xna.Framework.Color color6 = Lighting.GetColor((int)vector4.X / 16, (int)(vector4.Y / 16f));
                        Game1.spriteBatch.Draw(Game1.chain9Texture, new Vector2(vector4.X - Game1.screenPosition.X, vector4.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain8Texture.Width, Game1.chain8Texture.Height)), color6, rotation5, new Vector2((float)Game1.chain8Texture.Width * 0.5f, (float)Game1.chain8Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            else if (projectile.type == 171)
            {
                Vector2 vector5 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
                float num34 = -projectile.velocity.X;
                float num35 = -projectile.velocity.Y;
                float num36 = 1f;
                if (projectile.ai[0] <= 17f)
                {
                    num36 = projectile.ai[0] / 17f;
                }
                int num37 = (int)(30f * num36);
                float num38 = 1f;
                if (projectile.ai[0] <= 30f)
                {
                    num38 = projectile.ai[0] / 30f;
                }
                float num39 = 0.4f * num38;
                float num40 = num39;
                num35 += num40;
                Vector2[] array = new Vector2[num37];
                float[] array2 = new float[num37];
                for (int j = 0; j < num37; j++)
                {
                    float num41 = (float)Math.Sqrt((double)(num34 * num34 + num35 * num35));
                    float num42 = 5.6f;
                    if (Math.Abs(num34) + Math.Abs(num35) < 1f)
                    {
                        num42 *= Math.Abs(num34) + Math.Abs(num35) / 1f;
                    }
                    num41 = num42 / num41;
                    num34 *= num41;
                    num35 *= num41;
                    float num43 = (float)Math.Atan2((double)num35, (double)num34) - 1.57f;
                    array[j].X = vector5.X;
                    array[j].Y = vector5.Y;
                    array2[j] = num43;
                    vector5.X += num34;
                    vector5.Y += num35;
                    num34 = -projectile.velocity.X;
                    num35 = -projectile.velocity.Y;
                    num40 += num39;
                    num35 += num40;
                }
                for (int k = num37 - 1; k >= 0; k--)
                {
                    vector5.X = array[k].X;
                    vector5.Y = array[k].Y;
                    float rotation6 = array2[k];
                    Microsoft.Xna.Framework.Color color7 = Lighting.GetColor((int)vector5.X / 16, (int)(vector5.Y / 16f));
                    Game1.spriteBatch.Draw(Game1.chain16Texture, new Vector2(vector5.X - Game1.screenPosition.X, vector5.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain16Texture.Width, Game1.chain16Texture.Height)), color7, rotation6, new Vector2((float)Game1.chain16Texture.Width * 0.5f, (float)Game1.chain16Texture.Height * 0.5f), 0.8f, SpriteEffects.None, 0f);
                }
            }
            else if (projectile.type == 475)
            {
                Vector2 vector6 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
                float num44 = -projectile.velocity.X;
                float num45 = -projectile.velocity.Y;
                float num46 = 1f;
                if (projectile.ai[0] <= 17f)
                {
                    num46 = projectile.ai[0] / 17f;
                }
                int num47 = (int)(30f * num46);
                float num48 = 1f;
                if (projectile.ai[0] <= 30f)
                {
                    num48 = projectile.ai[0] / 30f;
                }
                float num49 = 0.4f * num48;
                float num50 = num49;
                num45 += num50;
                Vector2[] array3 = new Vector2[num47];
                float[] array4 = new float[num47];
                for (int l = 0; l < num47; l++)
                {
                    float num51 = (float)Math.Sqrt((double)(num44 * num44 + num45 * num45));
                    float num52 = 5.6f;
                    if (Math.Abs(num44) + Math.Abs(num45) < 1f)
                    {
                        num52 *= Math.Abs(num44) + Math.Abs(num45) / 1f;
                    }
                    num51 = num52 / num51;
                    num44 *= num51;
                    num45 *= num51;
                    float num53 = (float)Math.Atan2((double)num45, (double)num44) - 1.57f;
                    array3[l].X = vector6.X;
                    array3[l].Y = vector6.Y;
                    array4[l] = num53;
                    vector6.X += num44;
                    vector6.Y += num45;
                    num44 = -projectile.velocity.X;
                    num45 = -projectile.velocity.Y;
                    num50 += num49;
                    num45 += num50;
                }
                int num54 = 0;
                for (int m = num47 - 1; m >= 0; m--)
                {
                    vector6.X = array3[m].X;
                    vector6.Y = array3[m].Y;
                    float rotation7 = array4[m];
                    Microsoft.Xna.Framework.Color color8 = Lighting.GetColor((int)vector6.X / 16, (int)(vector6.Y / 16f));
                    if (num54 % 2 == 0)
                    {
                        Game1.spriteBatch.Draw(Game1.chain38Texture, new Vector2(vector6.X - Game1.screenPosition.X, vector6.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain38Texture.Width, Game1.chain38Texture.Height)), color8, rotation7, new Vector2((float)Game1.chain38Texture.Width * 0.5f, (float)Game1.chain38Texture.Height * 0.5f), 0.8f, SpriteEffects.None, 0f);
                    }
                    else
                    {
                        Game1.spriteBatch.Draw(Game1.chain39Texture, new Vector2(vector6.X - Game1.screenPosition.X, vector6.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain39Texture.Width, Game1.chain39Texture.Height)), color8, rotation7, new Vector2((float)Game1.chain39Texture.Width * 0.5f, (float)Game1.chain39Texture.Height * 0.5f), 0.8f, SpriteEffects.None, 0f);
                    }
                    num54++;
                }
            }
            else if (projectile.type == 505 || projectile.type == 506)
            {
                Vector2 vector7 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
                float num55 = -projectile.velocity.X;
                float num56 = -projectile.velocity.Y;
                float num57 = 1f;
                if (projectile.ai[0] <= 17f)
                {
                    num57 = projectile.ai[0] / 17f;
                }
                int num58 = (int)(30f * num57);
                float num59 = 1f;
                if (projectile.ai[0] <= 30f)
                {
                    num59 = projectile.ai[0] / 30f;
                }
                float num60 = 0.4f * num59;
                float num61 = num60;
                num56 += num61;
                Vector2[] array5 = new Vector2[num58];
                float[] array6 = new float[num58];
                for (int n = 0; n < num58; n++)
                {
                    float num62 = (float)Math.Sqrt((double)(num55 * num55 + num56 * num56));
                    float num63 = 5.6f;
                    if (Math.Abs(num55) + Math.Abs(num56) < 1f)
                    {
                        num63 *= Math.Abs(num55) + Math.Abs(num56) / 1f;
                    }
                    num62 = num63 / num62;
                    num55 *= num62;
                    num56 *= num62;
                    float num64 = (float)Math.Atan2((double)num56, (double)num55) - 1.57f;
                    array5[n].X = vector7.X;
                    array5[n].Y = vector7.Y;
                    array6[n] = num64;
                    vector7.X += num55;
                    vector7.Y += num56;
                    num55 = -projectile.velocity.X;
                    num56 = -projectile.velocity.Y;
                    num61 += num60;
                    num56 += num61;
                }
                int num65 = 0;
                for (int num66 = num58 - 1; num66 >= 0; num66--)
                {
                    vector7.X = array5[num66].X;
                    vector7.Y = array5[num66].Y;
                    float rotation8 = array6[num66];
                    Microsoft.Xna.Framework.Color color9 = Lighting.GetColor((int)vector7.X / 16, (int)(vector7.Y / 16f));
                    int num67 = 4;
                    if (projectile.type == 506)
                    {
                        num67 = 6;
                    }
                    num67 += num65 % 2;
                    Game1.spriteBatch.Draw(Game1.chainsTexture[num67], new Vector2(vector7.X - Game1.screenPosition.X, vector7.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chainsTexture[num67].Width, Game1.chainsTexture[num67].Height)), color9, rotation8, new Vector2((float)Game1.chainsTexture[num67].Width * 0.5f, (float)Game1.chainsTexture[num67].Height * 0.5f), 0.8f, SpriteEffects.None, 0f);
                    num65++;
                }
            }
            else if (projectile.type == 165)
            {
                Vector2 vector8 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
                float num68 = mountedCenter.X - vector8.X;
                float num69 = mountedCenter.Y - vector8.Y;
                float rotation9 = (float)Math.Atan2((double)num69, (double)num68) - 1.57f;
                bool flag6 = true;
                while (flag6)
                {
                    float num70 = (float)Math.Sqrt((double)(num68 * num68 + num69 * num69));
                    if (num70 < 25f)
                    {
                        flag6 = false;
                    }
                    else if (float.IsNaN(num70))
                    {
                        flag6 = false;
                    }
                    else
                    {
                        num70 = 24f / num70;
                        num68 *= num70;
                        num69 *= num70;
                        vector8.X += num68;
                        vector8.Y += num69;
                        num68 = mountedCenter.X - vector8.X;
                        num69 = mountedCenter.Y - vector8.Y;
                        Microsoft.Xna.Framework.Color color10 = Lighting.GetColor((int)vector8.X / 16, (int)(vector8.Y / 16f));
                        Game1.spriteBatch.Draw(Game1.chain15Texture, new Vector2(vector8.X - Game1.screenPosition.X, vector8.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain15Texture.Width, Game1.chain15Texture.Height)), color10, rotation9, new Vector2((float)Game1.chain15Texture.Width * 0.5f, (float)Game1.chain15Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            else if (projectile.type >= 230 && projectile.type <= 235)
            {
                int num71 = projectile.type - 229;
                Vector2 vector9 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
                float num72 = mountedCenter.X - vector9.X;
                float num73 = mountedCenter.Y - vector9.Y;
                float rotation10 = (float)Math.Atan2((double)num73, (double)num72) - 1.57f;
                bool flag7 = true;
                while (flag7)
                {
                    float num74 = (float)Math.Sqrt((double)(num72 * num72 + num73 * num73));
                    if (num74 < 25f)
                    {
                        flag7 = false;
                    }
                    else if (float.IsNaN(num74))
                    {
                        flag7 = false;
                    }
                    else
                    {
                        num74 = (float)Game1.gemChainTexture[num71].Height / num74;
                        num72 *= num74;
                        num73 *= num74;
                        vector9.X += num72;
                        vector9.Y += num73;
                        num72 = mountedCenter.X - vector9.X;
                        num73 = mountedCenter.Y - vector9.Y;
                        Microsoft.Xna.Framework.Color color11 = Lighting.GetColor((int)vector9.X / 16, (int)(vector9.Y / 16f));
                        Game1.spriteBatch.Draw(Game1.gemChainTexture[num71], new Vector2(vector9.X - Game1.screenPosition.X, vector9.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.gemChainTexture[num71].Width, Game1.gemChainTexture[num71].Height)), color11, rotation10, new Vector2((float)Game1.gemChainTexture[num71].Width * 0.5f, (float)Game1.gemChainTexture[num71].Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            else if (projectile.type == 256)
            {
                Vector2 vector10 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
                float num75 = mountedCenter.X - vector10.X;
                float num76 = mountedCenter.Y - vector10.Y;
                float num77 = (float)Math.Atan2((double)num76, (double)num75) - 1.57f;
                bool flag8 = true;
                while (flag8)
                {
                    float num78 = (float)Math.Sqrt((double)(num75 * num75 + num76 * num76));
                    if (num78 < 26f)
                    {
                        flag8 = false;
                    }
                    else if (float.IsNaN(num78))
                    {
                        flag8 = false;
                    }
                    else
                    {
                        num78 = 26f / num78;
                        num75 *= num78;
                        num76 *= num78;
                        vector10.X += num75;
                        vector10.Y += num76;
                        num75 = Game1.player[projectile.owner].position.X + (float)(Game1.player[projectile.owner].width / 2) - vector10.X;
                        num76 = Game1.player[projectile.owner].position.Y + (float)(Game1.player[projectile.owner].height / 2) - vector10.Y;
                        Microsoft.Xna.Framework.Color color12 = Lighting.GetColor((int)vector10.X / 16, (int)(vector10.Y / 16f));
                        Game1.spriteBatch.Draw(Game1.chain20Texture, new Vector2(vector10.X - Game1.screenPosition.X, vector10.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain20Texture.Width, Game1.chain20Texture.Height)), color12, num77 - 0.785f, new Vector2((float)Game1.chain20Texture.Width * 0.5f, (float)Game1.chain20Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            else if (projectile.type == 322)
            {
                Vector2 vector11 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
                float num79 = mountedCenter.X - vector11.X;
                float num80 = mountedCenter.Y - vector11.Y;
                float rotation11 = (float)Math.Atan2((double)num80, (double)num79) - 1.57f;
                bool flag9 = true;
                while (flag9)
                {
                    float num81 = (float)Math.Sqrt((double)(num79 * num79 + num80 * num80));
                    if (num81 < 22f)
                    {
                        flag9 = false;
                    }
                    else if (float.IsNaN(num81))
                    {
                        flag9 = false;
                    }
                    else
                    {
                        num81 = 22f / num81;
                        num79 *= num81;
                        num80 *= num81;
                        vector11.X += num79;
                        vector11.Y += num80;
                        num79 = mountedCenter.X - vector11.X;
                        num80 = mountedCenter.Y - vector11.Y;
                        Microsoft.Xna.Framework.Color color13 = Lighting.GetColor((int)vector11.X / 16, (int)(vector11.Y / 16f));
                        Game1.spriteBatch.Draw(Game1.chain29Texture, new Vector2(vector11.X - Game1.screenPosition.X, vector11.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain29Texture.Width, Game1.chain29Texture.Height)), color13, rotation11, new Vector2((float)Game1.chain29Texture.Width * 0.5f, (float)Game1.chain29Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            else if (projectile.type == 315)
            {
                Vector2 vector12 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
                float num82 = mountedCenter.X - vector12.X;
                float num83 = mountedCenter.Y - vector12.Y;
                float rotation12 = (float)Math.Atan2((double)num83, (double)num82) - 1.57f;
                bool flag10 = true;
                while (flag10)
                {
                    float num84 = (float)Math.Sqrt((double)(num82 * num82 + num83 * num83));
                    if (num84 < 50f)
                    {
                        flag10 = false;
                    }
                    else if (float.IsNaN(num84))
                    {
                        flag10 = false;
                    }
                    else
                    {
                        num84 = 40f / num84;
                        num82 *= num84;
                        num83 *= num84;
                        vector12.X += num82;
                        vector12.Y += num83;
                        num82 = mountedCenter.X - vector12.X;
                        num83 = mountedCenter.Y - vector12.Y;
                        Microsoft.Xna.Framework.Color color14 = Lighting.GetColor((int)vector12.X / 16, (int)(vector12.Y / 16f));
                        Game1.spriteBatch.Draw(Game1.chain28Texture, new Vector2(vector12.X - Game1.screenPosition.X, vector12.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain28Texture.Width, Game1.chain28Texture.Height)), color14, rotation12, new Vector2((float)Game1.chain28Texture.Width * 0.5f, (float)Game1.chain28Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            else if (projectile.type == 331)
            {
                Vector2 vector13 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
                float num85 = mountedCenter.X - vector13.X;
                float num86 = mountedCenter.Y - vector13.Y;
                float rotation13 = (float)Math.Atan2((double)num86, (double)num85) - 1.57f;
                bool flag11 = true;
                while (flag11)
                {
                    float num87 = (float)Math.Sqrt((double)(num85 * num85 + num86 * num86));
                    if (num87 < 30f)
                    {
                        flag11 = false;
                    }
                    else if (float.IsNaN(num87))
                    {
                        flag11 = false;
                    }
                    else
                    {
                        num87 = 24f / num87;
                        num85 *= num87;
                        num86 *= num87;
                        vector13.X += num85;
                        vector13.Y += num86;
                        num85 = mountedCenter.X - vector13.X;
                        num86 = mountedCenter.Y - vector13.Y;
                        Microsoft.Xna.Framework.Color color15 = Lighting.GetColor((int)vector13.X / 16, (int)(vector13.Y / 16f));
                        Game1.spriteBatch.Draw(Game1.chain30Texture, new Vector2(vector13.X - Game1.screenPosition.X, vector13.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain30Texture.Width, Game1.chain30Texture.Height)), color15, rotation13, new Vector2((float)Game1.chain30Texture.Width * 0.5f, (float)Game1.chain30Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            else if (projectile.type == 332)
            {
                int num88 = 0;
                Vector2 vector14 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
                float num89 = mountedCenter.X - vector14.X;
                float num90 = mountedCenter.Y - vector14.Y;
                float rotation14 = (float)Math.Atan2((double)num90, (double)num89) - 1.57f;
                bool flag12 = true;
                while (flag12)
                {
                    float num91 = (float)Math.Sqrt((double)(num89 * num89 + num90 * num90));
                    if (num91 < 30f)
                    {
                        flag12 = false;
                    }
                    else if (float.IsNaN(num91))
                    {
                        flag12 = false;
                    }
                    else
                    {
                        int i2 = (int)vector14.X / 16;
                        int j2 = (int)vector14.Y / 16;
                        if (num88 == 0)
                        {
                            Lighting.AddLight(i2, j2, 0f, 0.2f, 0.2f);
                        }
                        if (num88 == 1)
                        {
                            Lighting.AddLight(i2, j2, 0.1f, 0.2f, 0f);
                        }
                        if (num88 == 2)
                        {
                            Lighting.AddLight(i2, j2, 0.2f, 0.1f, 0f);
                        }
                        if (num88 == 3)
                        {
                            Lighting.AddLight(i2, j2, 0.2f, 0f, 0.2f);
                        }
                        num91 = 16f / num91;
                        num89 *= num91;
                        num90 *= num91;
                        vector14.X += num89;
                        vector14.Y += num90;
                        num89 = mountedCenter.X - vector14.X;
                        num90 = mountedCenter.Y - vector14.Y;
                        Microsoft.Xna.Framework.Color color16 = Lighting.GetColor((int)vector14.X / 16, (int)(vector14.Y / 16f));
                        Game1.spriteBatch.Draw(Game1.chain31Texture, new Vector2(vector14.X - Game1.screenPosition.X, vector14.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.chain31Texture.Height / 4 * num88, Game1.chain31Texture.Width, Game1.chain31Texture.Height / 4)), color16, rotation14, new Vector2((float)Game1.chain30Texture.Width * 0.5f, (float)(Game1.chain30Texture.Height / 8)), 1f, SpriteEffects.None, 0f);
                        Game1.spriteBatch.Draw(Game1.chain32Texture, new Vector2(vector14.X - Game1.screenPosition.X, vector14.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.chain31Texture.Height / 4 * num88, Game1.chain31Texture.Width, Game1.chain31Texture.Height / 4)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), rotation14, new Vector2((float)Game1.chain30Texture.Width * 0.5f, (float)(Game1.chain30Texture.Height / 8)), 1f, SpriteEffects.None, 0f);
                        num88++;
                        if (num88 > 3)
                        {
                            num88 = 0;
                        }
                    }
                }
            }
            else if (projectile.type == 372 || projectile.type == 383 || projectile.type == 396 || projectile.type == 403 || projectile.type == 404 || projectile.type == 446 || (projectile.type >= 486 && projectile.type <= 489) || (projectile.type >= 646 && projectile.type <= 649))
            {
                Texture2D texture2D = null;
                Microsoft.Xna.Framework.Color transparent = Microsoft.Xna.Framework.Color.Transparent;
                Texture2D texture2D2 = Game1.chain33Texture;
                if (projectile.type == 383)
                {
                    texture2D2 = Game1.chain34Texture;
                }
                if (projectile.type == 396)
                {
                    texture2D2 = Game1.chain35Texture;
                }
                if (projectile.type == 403)
                {
                    texture2D2 = Game1.chain36Texture;
                }
                if (projectile.type == 404)
                {
                    texture2D2 = Game1.chain37Texture;
                }
                if (projectile.type == 446)
                {
                    texture2D2 = Game1.extraTexture[3];
                }
                if (projectile.type >= 486 && projectile.type <= 489)
                {
                    texture2D2 = Game1.chainsTexture[projectile.type - 486];
                }
                if (projectile.type >= 646 && projectile.type <= 649)
                {
                    texture2D2 = Game1.chainsTexture[projectile.type - 646 + 8];
                    texture2D = Game1.chainsTexture[projectile.type - 646 + 12];
                    transparent = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
                }
                Vector2 vector15 = projectile.Center;
                Microsoft.Xna.Framework.Rectangle? sourceRectangle = null;
                Vector2 origin = new Vector2((float)texture2D2.Width * 0.5f, (float)texture2D2.Height * 0.5f);
                float num92 = (float)texture2D2.Height;
                float num93 = 0f;
                if (projectile.type == 446)
                {
                    int num94 = 7;
                    int num95 = (int)projectile.localAI[0] / num94;
                    sourceRectangle = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, texture2D2.Height / 4 * num95, texture2D2.Width, texture2D2.Height / 4));
                    origin.Y /= 4f;
                    num92 /= 4f;
                }
                int type2 = projectile.type;
                if (type2 != 383)
                {
                    if (type2 != 446)
                    {
                        switch (type2)
                        {
                            case 487:
                                num93 = 8f;
                                break;
                            case 489:
                                num93 = 10f;
                                break;
                        }
                    }
                    else
                    {
                        num93 = 20f;
                    }
                }
                else
                {
                    num93 = 14f;
                }
                if (num93 != 0f)
                {
                    float num96 = -1.57f;
                    Vector2 value2 = new Vector2((float)Math.Cos((double)(projectile.rotation + num96)), (float)Math.Sin((double)(projectile.rotation + num96)));
                    vector15 -= value2 * num93;
                    value2 = mountedCenter - vector15;
                    value2.Normalize();
                    vector15 -= value2 * num92 / 2f;
                }
                Vector2 vector16 = mountedCenter - vector15;
                float rotation15 = (float)Math.Atan2((double)vector16.Y, (double)vector16.X) - 1.57f;
                bool flag13 = true;
                if (float.IsNaN(vector15.X) && float.IsNaN(vector15.Y))
                {
                    flag13 = false;
                }
                if (float.IsNaN(vector16.X) && float.IsNaN(vector16.Y))
                {
                    flag13 = false;
                }
                while (flag13)
                {
                    float num97 = vector16.Length();
                    if (num97 < num92 + 1f)
                    {
                        flag13 = false;
                    }
                    else
                    {
                        Vector2 value3 = vector16;
                        value3.Normalize();
                        vector15 += value3 * num92;
                        vector16 = mountedCenter - vector15;
                        Microsoft.Xna.Framework.Color color17 = Lighting.GetColor((int)vector15.X / 16, (int)(vector15.Y / 16f));
                        if (projectile.type == 396)
                        {
                            color17 *= (float)(255 - projectile.alpha) / 255f;
                        }
                        if (projectile.type == 446)
                        {
                            color17 = projectile.GetAlpha(color17);
                        }
                        if (projectile.type == 488)
                        {
                            Lighting.AddLight(vector15, 0.2f, 0f, 0.175f);
                            color17 = new Microsoft.Xna.Framework.Color(255, 255, 255, 255);
                        }
                        if (projectile.type >= 646 && projectile.type <= 649)
                        {
                            color17 = projectile.GetAlpha(color17);
                        }
                        Game1.spriteBatch.Draw(texture2D2, vector15 - Game1.screenPosition, sourceRectangle, color17, rotation15, origin, 1f, SpriteEffects.None, 0f);
                        if (texture2D != null)
                        {
                            Game1.spriteBatch.Draw(texture2D, vector15 - Game1.screenPosition, sourceRectangle, transparent, rotation15, origin, 1f, SpriteEffects.None, 0f);
                        }
                    }
                }
            }
            else if (projectile.aiStyle == 7)
            {
                Vector2 vector17 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
                float num98 = mountedCenter.X - vector17.X;
                float num99 = mountedCenter.Y - vector17.Y;
                float rotation16 = (float)Math.Atan2((double)num99, (double)num98) - 1.57f;
                bool flag14 = true;
                while (flag14)
                {
                    float num100 = (float)Math.Sqrt((double)(num98 * num98 + num99 * num99));
                    if (num100 < 25f)
                    {
                        flag14 = false;
                    }
                    else if (float.IsNaN(num100))
                    {
                        flag14 = false;
                    }
                    else
                    {
                        num100 = 12f / num100;
                        num98 *= num100;
                        num99 *= num100;
                        vector17.X += num98;
                        vector17.Y += num99;
                        num98 = mountedCenter.X - vector17.X;
                        num99 = mountedCenter.Y - vector17.Y;
                        Microsoft.Xna.Framework.Color color18 = Lighting.GetColor((int)vector17.X / 16, (int)(vector17.Y / 16f));
                        Game1.spriteBatch.Draw(Game1.chainTexture, new Vector2(vector17.X - Game1.screenPosition.X, vector17.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chainTexture.Width, Game1.chainTexture.Height)), color18, rotation16, new Vector2((float)Game1.chainTexture.Width * 0.5f, (float)Game1.chainTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            else if (projectile.type == 262)
            {
                float num101 = projectile.Center.X;
                float num102 = projectile.Center.Y;
                float num103 = projectile.velocity.X;
                float num104 = projectile.velocity.Y;
                float num105 = (float)Math.Sqrt((double)(num103 * num103 + num104 * num104));
                num105 = 4f / num105;
                if (projectile.ai[0] == 0f)
                {
                    num101 -= projectile.velocity.X * num105;
                    num102 -= projectile.velocity.Y * num105;
                }
                else
                {
                    num101 += projectile.velocity.X * num105;
                    num102 += projectile.velocity.Y * num105;
                }
                Vector2 vector18 = new Vector2(num101, num102);
                num103 = mountedCenter.X - vector18.X;
                num104 = mountedCenter.Y - vector18.Y;
                float rotation17 = (float)Math.Atan2((double)num104, (double)num103) - 1.57f;
                if (projectile.alpha == 0)
                {
                    int num106 = -1;
                    if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
                    {
                        num106 = 1;
                    }
                    if (Game1.player[projectile.owner].direction == 1)
                    {
                        Game1.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num104 * (float)num106), (double)(num103 * (float)num106));
                    }
                    else
                    {
                        Game1.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num104 * (float)num106), (double)(num103 * (float)num106));
                    }
                }
                bool flag15 = true;
                while (flag15)
                {
                    float num107 = (float)Math.Sqrt((double)(num103 * num103 + num104 * num104));
                    if (num107 < 25f)
                    {
                        flag15 = false;
                    }
                    else if (float.IsNaN(num107))
                    {
                        flag15 = false;
                    }
                    else
                    {
                        num107 = 12f / num107;
                        num103 *= num107;
                        num104 *= num107;
                        vector18.X += num103;
                        vector18.Y += num104;
                        num103 = mountedCenter.X - vector18.X;
                        num104 = mountedCenter.Y - vector18.Y;
                        Microsoft.Xna.Framework.Color color19 = Lighting.GetColor((int)vector18.X / 16, (int)(vector18.Y / 16f));
                        Game1.spriteBatch.Draw(Game1.chain22Texture, new Vector2(vector18.X - Game1.screenPosition.X, vector18.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain22Texture.Width, Game1.chain22Texture.Height)), color19, rotation17, new Vector2((float)Game1.chain22Texture.Width * 0.5f, (float)Game1.chain22Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            else if (projectile.type == 273)
            {
                float num108 = projectile.Center.X;
                float num109 = projectile.Center.Y;
                float num110 = projectile.velocity.X;
                float num111 = projectile.velocity.Y;
                float num112 = (float)Math.Sqrt((double)(num110 * num110 + num111 * num111));
                num112 = 4f / num112;
                if (projectile.ai[0] == 0f)
                {
                    num108 -= projectile.velocity.X * num112;
                    num109 -= projectile.velocity.Y * num112;
                }
                else
                {
                    num108 += projectile.velocity.X * num112;
                    num109 += projectile.velocity.Y * num112;
                }
                Vector2 vector19 = new Vector2(num108, num109);
                num110 = mountedCenter.X - vector19.X;
                num111 = mountedCenter.Y - vector19.Y;
                float rotation18 = (float)Math.Atan2((double)num111, (double)num110) - 1.57f;
                if (projectile.alpha == 0)
                {
                    int num113 = -1;
                    if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
                    {
                        num113 = 1;
                    }
                    if (Game1.player[projectile.owner].direction == 1)
                    {
                        Game1.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num111 * (float)num113), (double)(num110 * (float)num113));
                    }
                    else
                    {
                        Game1.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num111 * (float)num113), (double)(num110 * (float)num113));
                    }
                }
                bool flag16 = true;
                while (flag16)
                {
                    float num114 = (float)Math.Sqrt((double)(num110 * num110 + num111 * num111));
                    if (num114 < 25f)
                    {
                        flag16 = false;
                    }
                    else if (float.IsNaN(num114))
                    {
                        flag16 = false;
                    }
                    else
                    {
                        num114 = 12f / num114;
                        num110 *= num114;
                        num111 *= num114;
                        vector19.X += num110;
                        vector19.Y += num111;
                        num110 = mountedCenter.X - vector19.X;
                        num111 = mountedCenter.Y - vector19.Y;
                        Microsoft.Xna.Framework.Color color20 = Lighting.GetColor((int)vector19.X / 16, (int)(vector19.Y / 16f));
                        Game1.spriteBatch.Draw(Game1.chain23Texture, new Vector2(vector19.X - Game1.screenPosition.X, vector19.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain23Texture.Width, Game1.chain23Texture.Height)), color20, rotation18, new Vector2((float)Game1.chain23Texture.Width * 0.5f, (float)Game1.chain23Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            else if (projectile.type == 481)
            {
                float num115 = projectile.Center.X;
                float num116 = projectile.Center.Y;
                float num117 = projectile.velocity.X;
                float num118 = projectile.velocity.Y;
                float num119 = (float)Math.Sqrt((double)(num117 * num117 + num118 * num118));
                num119 = 4f / num119;
                if (projectile.ai[0] == 0f)
                {
                    num115 -= projectile.velocity.X * num119;
                    num116 -= projectile.velocity.Y * num119;
                }
                else
                {
                    num115 += projectile.velocity.X * num119;
                    num116 += projectile.velocity.Y * num119;
                }
                Vector2 vector20 = new Vector2(num115, num116);
                num117 = mountedCenter.X - vector20.X;
                num118 = mountedCenter.Y - vector20.Y;
                float rotation19 = (float)Math.Atan2((double)num118, (double)num117) - 1.57f;
                if (projectile.alpha == 0)
                {
                    int num120 = -1;
                    if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
                    {
                        num120 = 1;
                    }
                    if (Game1.player[projectile.owner].direction == 1)
                    {
                        Game1.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num118 * (float)num120), (double)(num117 * (float)num120));
                    }
                    else
                    {
                        Game1.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num118 * (float)num120), (double)(num117 * (float)num120));
                    }
                }
                bool flag17 = true;
                while (flag17)
                {
                    float num121 = 0.85f;
                    float num122 = (float)Math.Sqrt((double)(num117 * num117 + num118 * num118));
                    float num123 = num122;
                    if ((double)num122 < (double)Game1.chain40Texture.Height * 1.5)
                    {
                        flag17 = false;
                    }
                    else if (float.IsNaN(num122))
                    {
                        flag17 = false;
                    }
                    else
                    {
                        num122 = (float)Game1.chain40Texture.Height * num121 / num122;
                        num117 *= num122;
                        num118 *= num122;
                        vector20.X += num117;
                        vector20.Y += num118;
                        num117 = mountedCenter.X - vector20.X;
                        num118 = mountedCenter.Y - vector20.Y;
                        if (num123 > (float)(Game1.chain40Texture.Height * 2))
                        {
                            for (int num124 = 0; num124 < 2; num124++)
                            {
                                float num125 = 0.75f;
                                float num126;
                                if (num124 == 0)
                                {
                                    num126 = Math.Abs(Game1.player[projectile.owner].velocity.X);
                                }
                                else
                                {
                                    num126 = Math.Abs(Game1.player[projectile.owner].velocity.Y);
                                }
                                if (num126 > 10f)
                                {
                                    num126 = 10f;
                                }
                                num126 /= 10f;
                                num125 *= num126;
                                num126 = num123 / 80f;
                                if (num126 > 1f)
                                {
                                    num126 = 1f;
                                }
                                num125 *= num126;
                                if (num125 < 0f)
                                {
                                    num125 = 0f;
                                }
                                if (!float.IsNaN(num125))
                                {
                                    if (num124 == 0)
                                    {
                                        if (Game1.player[projectile.owner].velocity.X < 0f && projectile.Center.X < mountedCenter.X)
                                        {
                                            num118 *= 1f - num125;
                                        }
                                        if (Game1.player[projectile.owner].velocity.X > 0f && projectile.Center.X > mountedCenter.X)
                                        {
                                            num118 *= 1f - num125;
                                        }
                                    }
                                    else
                                    {
                                        if (Game1.player[projectile.owner].velocity.Y < 0f && projectile.Center.Y < mountedCenter.Y)
                                        {
                                            num117 *= 1f - num125;
                                        }
                                        if (Game1.player[projectile.owner].velocity.Y > 0f && projectile.Center.Y > mountedCenter.Y)
                                        {
                                            num117 *= 1f - num125;
                                        }
                                    }
                                }
                            }
                        }
                        Microsoft.Xna.Framework.Color color21 = Lighting.GetColor((int)vector20.X / 16, (int)(vector20.Y / 16f));
                        Game1.spriteBatch.Draw(Game1.chain40Texture, new Vector2(vector20.X - Game1.screenPosition.X, vector20.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain40Texture.Width, Game1.chain40Texture.Height)), color21, rotation19, new Vector2((float)Game1.chain40Texture.Width * 0.5f, (float)Game1.chain40Texture.Height * 0.5f), num121, SpriteEffects.None, 0f);
                    }
                }
            }
            else if (projectile.type == 271)
            {
                float num127 = projectile.Center.X;
                float num128 = projectile.Center.Y;
                float num129 = projectile.velocity.X;
                float num130 = projectile.velocity.Y;
                float num131 = (float)Math.Sqrt((double)(num129 * num129 + num130 * num130));
                num131 = 4f / num131;
                if (projectile.ai[0] == 0f)
                {
                    num127 -= projectile.velocity.X * num131;
                    num128 -= projectile.velocity.Y * num131;
                }
                else
                {
                    num127 += projectile.velocity.X * num131;
                    num128 += projectile.velocity.Y * num131;
                }
                Vector2 vector21 = new Vector2(num127, num128);
                num129 = mountedCenter.X - vector21.X;
                num130 = mountedCenter.Y - vector21.Y;
                float rotation20 = (float)Math.Atan2((double)num130, (double)num129) - 1.57f;
                if (projectile.alpha == 0)
                {
                    int num132 = -1;
                    if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
                    {
                        num132 = 1;
                    }
                    if (Game1.player[projectile.owner].direction == 1)
                    {
                        Game1.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num130 * (float)num132), (double)(num129 * (float)num132));
                    }
                    else
                    {
                        Game1.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num130 * (float)num132), (double)(num129 * (float)num132));
                    }
                }
                bool flag18 = true;
                while (flag18)
                {
                    float num133 = (float)Math.Sqrt((double)(num129 * num129 + num130 * num130));
                    if (num133 < 25f)
                    {
                        flag18 = false;
                    }
                    else if (float.IsNaN(num133))
                    {
                        flag18 = false;
                    }
                    else
                    {
                        num133 = 12f / num133;
                        num129 *= num133;
                        num130 *= num133;
                        vector21.X += num129;
                        vector21.Y += num130;
                        num129 = mountedCenter.X - vector21.X;
                        num130 = mountedCenter.Y - vector21.Y;
                        Microsoft.Xna.Framework.Color color22 = Lighting.GetColor((int)vector21.X / 16, (int)(vector21.Y / 16f));
                        Game1.spriteBatch.Draw(Game1.chain18Texture, new Vector2(vector21.X - Game1.screenPosition.X, vector21.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain18Texture.Width, Game1.chain18Texture.Height)), color22, rotation20, new Vector2((float)Game1.chain18Texture.Width * 0.5f, (float)Game1.chain18Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            else if (projectile.aiStyle == 13)
            {
                float num134 = projectile.position.X + 8f;
                float num135 = projectile.position.Y + 2f;
                float num136 = projectile.velocity.X;
                float num137 = projectile.velocity.Y;
                if (num136 == 0f && num137 == 0f)
                {
                    num137 = 0.0001f;
                }
                float num138 = (float)Math.Sqrt((double)(num136 * num136 + num137 * num137));
                num138 = 20f / num138;
                if (projectile.ai[0] == 0f)
                {
                    num134 -= projectile.velocity.X * num138;
                    num135 -= projectile.velocity.Y * num138;
                }
                else
                {
                    num134 += projectile.velocity.X * num138;
                    num135 += projectile.velocity.Y * num138;
                }
                Vector2 vector22 = new Vector2(num134, num135);
                num136 = mountedCenter.X - vector22.X;
                num137 = mountedCenter.Y - vector22.Y;
                float rotation21 = (float)Math.Atan2((double)num137, (double)num136) - 1.57f;
                if (projectile.alpha == 0)
                {
                    int num139 = -1;
                    if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
                    {
                        num139 = 1;
                    }
                    if (Game1.player[projectile.owner].direction == 1)
                    {
                        Game1.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num137 * (float)num139), (double)(num136 * (float)num139));
                    }
                    else
                    {
                        Game1.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num137 * (float)num139), (double)(num136 * (float)num139));
                    }
                }
                bool flag19 = true;
                while (flag19)
                {
                    float num140 = (float)Math.Sqrt((double)(num136 * num136 + num137 * num137));
                    if (num140 < 25f)
                    {
                        flag19 = false;
                    }
                    else if (float.IsNaN(num140))
                    {
                        flag19 = false;
                    }
                    else
                    {
                        num140 = 12f / num140;
                        num136 *= num140;
                        num137 *= num140;
                        vector22.X += num136;
                        vector22.Y += num137;
                        num136 = mountedCenter.X - vector22.X;
                        num137 = mountedCenter.Y - vector22.Y;
                        Microsoft.Xna.Framework.Color color23 = Lighting.GetColor((int)vector22.X / 16, (int)(vector22.Y / 16f));
                        Game1.spriteBatch.Draw(Game1.chainTexture, new Vector2(vector22.X - Game1.screenPosition.X, vector22.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chainTexture.Width, Game1.chainTexture.Height)), color23, rotation21, new Vector2((float)Game1.chainTexture.Width * 0.5f, (float)Game1.chainTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            else if (projectile.type == 190)
            {
                float x = projectile.position.X + (float)(projectile.width / 2);
                float y = projectile.position.Y + (float)(projectile.height / 2);
                float num141 = projectile.velocity.X;
                float num142 = projectile.velocity.Y;
                Math.Sqrt((double)(num141 * num141 + num142 * num142));
                Vector2 vector23 = new Vector2(x, y);
                num141 = mountedCenter.X - vector23.X;
                num142 = mountedCenter.Y + Game1.player[projectile.owner].gfxOffY - vector23.Y;
                Math.Atan2((double)num142, (double)num141);
                if (projectile.alpha == 0)
                {
                    int num143 = -1;
                    if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
                    {
                        num143 = 1;
                    }
                    if (Game1.player[projectile.owner].direction == 1)
                    {
                        Game1.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num142 * (float)num143), (double)(num141 * (float)num143));
                    }
                    else
                    {
                        Game1.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num142 * (float)num143), (double)(num141 * (float)num143));
                    }
                }
            }
            else if (projectile.aiStyle == 15)
            {
                Vector2 vector24 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
                float num144 = mountedCenter.X - vector24.X;
                float num145 = mountedCenter.Y - vector24.Y;
                float rotation22 = (float)Math.Atan2((double)num145, (double)num144) - 1.57f;
                if (projectile.alpha == 0)
                {
                    int num146 = -1;
                    if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
                    {
                        num146 = 1;
                    }
                    if (Game1.player[projectile.owner].direction == 1)
                    {
                        Game1.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num145 * (float)num146), (double)(num144 * (float)num146));
                    }
                    else
                    {
                        Game1.player[projectile.owner].itemRotation = (float)Math.Atan2((double)(num145 * (float)num146), (double)(num144 * (float)num146));
                    }
                }
                bool flag20 = true;
                while (flag20)
                {
                    float num147 = (float)Math.Sqrt((double)(num144 * num144 + num145 * num145));
                    if (num147 < 25f)
                    {
                        flag20 = false;
                    }
                    else if (float.IsNaN(num147))
                    {
                        flag20 = false;
                    }
                    else
                    {
                        if (projectile.type == 154 || projectile.type == 247)
                        {
                            num147 = 18f / num147;
                        }
                        else
                        {
                            num147 = 12f / num147;
                        }
                        num144 *= num147;
                        num145 *= num147;
                        vector24.X += num144;
                        vector24.Y += num145;
                        num144 = mountedCenter.X - vector24.X;
                        num145 = mountedCenter.Y - vector24.Y;
                        Microsoft.Xna.Framework.Color color24 = Lighting.GetColor((int)vector24.X / 16, (int)(vector24.Y / 16f));
                        if (projectile.type == 25)
                        {
                            Game1.spriteBatch.Draw(Game1.chain2Texture, new Vector2(vector24.X - Game1.screenPosition.X, vector24.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain2Texture.Width, Game1.chain2Texture.Height)), color24, rotation22, new Vector2((float)Game1.chain2Texture.Width * 0.5f, (float)Game1.chain2Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                        }
                        else if (projectile.type == 35)
                        {
                            Game1.spriteBatch.Draw(Game1.chain6Texture, new Vector2(vector24.X - Game1.screenPosition.X, vector24.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain6Texture.Width, Game1.chain6Texture.Height)), color24, rotation22, new Vector2((float)Game1.chain6Texture.Width * 0.5f, (float)Game1.chain6Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                        }
                        else if (projectile.type == 247)
                        {
                            Game1.spriteBatch.Draw(Game1.chain19Texture, new Vector2(vector24.X - Game1.screenPosition.X, vector24.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain19Texture.Width, Game1.chain19Texture.Height)), color24, rotation22, new Vector2((float)Game1.chain19Texture.Width * 0.5f, (float)Game1.chain19Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                        }
                        else if (projectile.type == 63)
                        {
                            Game1.spriteBatch.Draw(Game1.chain7Texture, new Vector2(vector24.X - Game1.screenPosition.X, vector24.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain7Texture.Width, Game1.chain7Texture.Height)), color24, rotation22, new Vector2((float)Game1.chain7Texture.Width * 0.5f, (float)Game1.chain7Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                        }
                        else if (projectile.type == 154)
                        {
                            Game1.spriteBatch.Draw(Game1.chain13Texture, new Vector2(vector24.X - Game1.screenPosition.X, vector24.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain13Texture.Width, Game1.chain13Texture.Height)), color24, rotation22, new Vector2((float)Game1.chain13Texture.Width * 0.5f, (float)Game1.chain13Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                        }
                        else
                        {
                            Game1.spriteBatch.Draw(Game1.chain3Texture, new Vector2(vector24.X - Game1.screenPosition.X, vector24.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain3Texture.Width, Game1.chain3Texture.Height)), color24, rotation22, new Vector2((float)Game1.chain3Texture.Width * 0.5f, (float)Game1.chain3Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                        }
                    }
                }
            }
            Microsoft.Xna.Framework.Color color25 = Lighting.GetColor((int)((double)projectile.position.X + (double)projectile.width * 0.5) / 16, (int)(((double)projectile.position.Y + (double)projectile.height * 0.5) / 16.0));
            if (projectile.hide && !ProjectileID.Sets.DontAttachHideToAlpha[projectile.type])
            {
                color25 = Lighting.GetColor((int)mountedCenter.X / 16, (int)(mountedCenter.Y / 16f));
            }
            if (projectile.type == 14)
            {
                color25 = Microsoft.Xna.Framework.Color.White;
            }
            int num148 = 0;
            int num149 = 0;
            if (projectile.type == 175)
            {
                num148 = 10;
            }
            if (projectile.type == 392)
            {
                num148 = -2;
            }
            if (projectile.type == 499)
            {
                num148 = 12;
            }
            if (projectile.bobber)
            {
                num148 = 8;
            }
            if (projectile.type == 519)
            {
                num148 = 6;
                num149 -= 6;
            }
            if (projectile.type == 520)
            {
                num148 = 12;
            }
            if (projectile.type == 492)
            {
                num149 -= 4;
                num148 += 5;
            }
            if (projectile.type == 498)
            {
                num148 = 6;
            }
            if (projectile.type == 489)
            {
                num148 = -2;
            }
            if (projectile.type == 486)
            {
                num148 = -6;
            }
            if (projectile.type == 525)
            {
                num148 = 5;
            }
            if (projectile.type == 488)
            {
                num149 -= 8;
            }
            if (projectile.type == 373)
            {
                num149 = -10;
                num148 = 6;
            }
            if (projectile.type == 375)
            {
                num149 = -11;
                num148 = 12;
            }
            if (projectile.type == 423)
            {
                num149 = -5;
            }
            if (projectile.type == 346)
            {
                num148 = 4;
            }
            if (projectile.type == 331)
            {
                num149 = -4;
            }
            if (projectile.type == 254)
            {
                num148 = 3;
            }
            if (projectile.type == 273)
            {
                num149 = 2;
            }
            if (projectile.type == 335)
            {
                num148 = 6;
            }
            if (projectile.type == 162)
            {
                num148 = 1;
                num149 = 1;
            }
            if (projectile.type == 377)
            {
                num148 = -6;
            }
            if (projectile.type == 353)
            {
                num148 = 36;
                num149 = -12;
            }
            if (projectile.type == 324)
            {
                num148 = 22;
                num149 = -6;
            }
            if (projectile.type == 266)
            {
                num148 = 10;
                num149 = -10;
            }
            if (projectile.type == 319)
            {
                num148 = 10;
                num149 = -12;
            }
            if (projectile.type == 315)
            {
                num148 = -13;
                num149 = -6;
            }
            if (projectile.type == 313 && projectile.height != 54)
            {
                num149 = -12;
                num148 = 20;
            }
            if (projectile.type == 314)
            {
                num149 = -8;
                num148 = 0;
            }
            if (projectile.type == 269)
            {
                num148 = 18;
                num149 = -14;
            }
            if (projectile.type == 268)
            {
                num148 = 22;
                num149 = -2;
            }
            if (projectile.type == 18)
            {
                num148 = 3;
                num149 = 3;
            }
            if (projectile.type == 16)
            {
                num148 = 6;
            }
            if (projectile.type == 17 || projectile.type == 31)
            {
                num148 = 2;
            }
            if (projectile.type == 25 || projectile.type == 26 || projectile.type == 35 || projectile.type == 63 || projectile.type == 154)
            {
                num148 = 6;
                num149 -= 6;
            }
            if (projectile.type == 28 || projectile.type == 37 || projectile.type == 75)
            {
                num148 = 8;
            }
            if (projectile.type == 29 || projectile.type == 470 || projectile.type == 637)
            {
                num148 = 11;
            }
            if (projectile.type == 43)
            {
                num148 = 4;
            }
            if (projectile.type == 208)
            {
                num148 = 2;
                num149 -= 12;
            }
            if (projectile.type == 209)
            {
                num148 = 4;
                num149 -= 8;
            }
            if (projectile.type == 210)
            {
                num148 = 2;
                num149 -= 22;
            }
            if (projectile.type == 251)
            {
                num148 = 18;
                num149 -= 10;
            }
            if (projectile.type == 163 || projectile.type == 310)
            {
                num148 = 10;
            }
            if (projectile.type == 69 || projectile.type == 70)
            {
                num148 = 4;
                num149 = 4;
            }
            float num150 = (float)(Game1.projectileTexture[projectile.type].Width - projectile.width) * 0.5f + (float)projectile.width * 0.5f;
            if (projectile.type == 50 || projectile.type == 53 || projectile.type == 515)
            {
                num149 = -8;
            }
            if (projectile.type == 473)
            {
                num149 = -6;
                num148 = 2;
            }
            if (projectile.type == 72 || projectile.type == 86 || projectile.type == 87)
            {
                num149 = -16;
                num148 = 8;
            }
            if (projectile.type == 74)
            {
                num149 = -6;
            }
            if (projectile.type == 99)
            {
                num148 = 1;
            }
            if (projectile.type == 111)
            {
                num148 = 18;
                num149 = -16;
            }
            if (projectile.type == 334)
            {
                num149 = -18;
                num148 = 8;
            }
            if (projectile.type == 200)
            {
                num148 = 12;
                num149 = -12;
            }
            if (projectile.type == 211)
            {
                num148 = 14;
                num149 = 0;
            }
            if (projectile.type == 236)
            {
                num148 = 30;
                num149 = -14;
            }
            if (projectile.type >= 191 && projectile.type <= 194)
            {
                num148 = 26;
                if (projectile.direction == 1)
                {
                    num149 = -10;
                }
                else
                {
                    num149 = -22;
                }
            }
            if (projectile.type >= 390 && projectile.type <= 392)
            {
                num149 = 4 * projectile.direction;
            }
            if (projectile.type == 112)
            {
                num148 = 12;
            }
            int arg_5334_0 = projectile.type;
            if (projectile.type == 517)
            {
                num148 = 6;
            }
            if (projectile.type == 516)
            {
                num148 = 6;
            }
            if (projectile.type == 127)
            {
                num148 = 8;
            }
            if (projectile.type == 155)
            {
                num148 = 3;
                num149 = 3;
            }
            if (projectile.type == 397)
            {
                num150 -= 1f;
                num148 = -2;
                num149 = -2;
            }
            if (projectile.type == 398)
            {
                num148 = 8;
            }
            SpriteEffects spriteEffects = SpriteEffects.None;
            if (projectile.spriteDirection == -1)
            {
                spriteEffects = SpriteEffects.FlipHorizontally;
            }
            if (projectile.type == 221)
            {
                for (int num151 = 1; num151 < 10; num151++)
                {
                    float num152 = projectile.velocity.X * (float)num151 * 0.5f;
                    float num153 = projectile.velocity.Y * (float)num151 * 0.5f;
                    Microsoft.Xna.Framework.Color alpha = projectile.GetAlpha(color25);
                    float num154 = 0f;
                    if (num151 == 1)
                    {
                        num154 = 0.9f;
                    }
                    if (num151 == 2)
                    {
                        num154 = 0.8f;
                    }
                    if (num151 == 3)
                    {
                        num154 = 0.7f;
                    }
                    if (num151 == 4)
                    {
                        num154 = 0.6f;
                    }
                    if (num151 == 5)
                    {
                        num154 = 0.5f;
                    }
                    if (num151 == 6)
                    {
                        num154 = 0.4f;
                    }
                    if (num151 == 7)
                    {
                        num154 = 0.3f;
                    }
                    if (num151 == 8)
                    {
                        num154 = 0.2f;
                    }
                    if (num151 == 9)
                    {
                        num154 = 0.1f;
                    }
                    alpha.R = (byte)((float)alpha.R * num154);
                    alpha.G = (byte)((float)alpha.G * num154);
                    alpha.B = (byte)((float)alpha.B * num154);
                    alpha.A = (byte)((float)alpha.A * num154);
                    int num155 = Game1.projectileTexture[projectile.type].Height / Game1.projFrames[projectile.type];
                    int y2 = num155 * projectile.frame;
                    Game1.spriteBatch.Draw(Game1.projectileTexture[projectile.type], new Vector2(projectile.position.X - Game1.screenPosition.X + num150 + (float)num149 - num152, projectile.position.Y - Game1.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num153), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y2, Game1.projectileTexture[projectile.type].Width, num155)), alpha, projectile.rotation, new Vector2(num150, (float)(projectile.height / 2 + num148)), projectile.scale, spriteEffects, 0f);
                }
            }
            if (projectile.type == 408 || projectile.type == 435 || projectile.type == 436 || projectile.type == 438 || projectile.type == 452 || projectile.type == 454 || projectile.type == 459 || projectile.type == 462 || projectile.type == 503 || projectile.type == 532 || projectile.type == 533 || projectile.type == 573 || projectile.type == 582 || projectile.type == 585 || projectile.type == 592 || projectile.type == 601 || projectile.type == 636 || projectile.type == 638 || projectile.type == 640 || projectile.type == 639 || projectile.type == 424 || projectile.type == 425 || projectile.type == 426)
            {
                Texture2D texture2D3 = Game1.projectileTexture[projectile.type];
                int num156 = Game1.projectileTexture[projectile.type].Height / Game1.projFrames[projectile.type];
                int y3 = num156 * projectile.frame;
                Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(0, y3, texture2D3.Width, num156);
                Vector2 origin2 = rectangle.Size() / 2f;
                if (projectile.type == 503)
                {
                    origin2.Y = 70f;
                }
                if (projectile.type == 438)
                {
                }
                if (projectile.type == 452)
                {
                }
                if (projectile.type == 408)
                {
                }
                if (projectile.type == 636)
                {
                    origin2.Y = 10f;
                }
                if (projectile.type == 638)
                {
                    origin2.Y = 2f;
                }
                if (projectile.type == 640 || projectile.type == 639)
                {
                    origin2.Y = 5f;
                }
                int num157 = 8;
                int num158 = 2;
                float value4 = 1f;
                float num159 = 0f;
                if (projectile.type == 503)
                {
                    num157 = 9;
                    num158 = 3;
                    value4 = 0.5f;
                }
                else if (projectile.type == 582)
                {
                    num157 = 10;
                    num158 = 2;
                    value4 = 0.7f;
                    num159 = 0.2f;
                }
                else if (projectile.type == 638)
                {
                    num157 = 5;
                    num158 = 1;
                    value4 = 1f;
                }
                else if (projectile.type == 639)
                {
                    num157 = 10;
                    num158 = 1;
                    value4 = 1f;
                }
                else if (projectile.type == 640)
                {
                    num157 = 20;
                    num158 = 1;
                    value4 = 1f;
                }
                else if (projectile.type == 436)
                {
                    num158 = 2;
                    value4 = 0.5f;
                }
                else if (projectile.type == 424 || projectile.type == 425 || projectile.type == 426)
                {
                    num157 = 10;
                    num158 = 2;
                    value4 = 0.6f;
                }
                else if (projectile.type == 438)
                {
                    num157 = 10;
                    num158 = 2;
                    value4 = 1f;
                }
                else if (projectile.type == 452)
                {
                    num157 = 10;
                    num158 = 3;
                    value4 = 0.5f;
                }
                else if (projectile.type == 454)
                {
                    num157 = 5;
                    num158 = 1;
                    value4 = 0.2f;
                }
                else if (projectile.type == 462)
                {
                    num157 = 7;
                    num158 = 1;
                    value4 = 0.2f;
                }
                else if (projectile.type == 585)
                {
                    num157 = 7;
                    num158 = 1;
                    value4 = 0.2f;
                }
                else if (projectile.type == 459)
                {
                    num157 = (int)(projectile.scale * 8f);
                    num158 = num157 / 4;
                    if (num158 < 1)
                    {
                        num158 = 1;
                    }
                    value4 = 0.3f;
                }
                else if (projectile.type == 532)
                {
                    num157 = 10;
                    num158 = 1;
                    value4 = 0.7f;
                    num159 = 0.2f;
                }
                else if (projectile.type == 592)
                {
                    num157 = 10;
                    num158 = 2;
                    value4 = 1f;
                }
                else if (projectile.type == 601)
                {
                    num157 = 8;
                    num158 = 1;
                    value4 = 0.3f;
                }
                else if (projectile.type == 636)
                {
                    num157 = 20;
                    num158 = 3;
                    value4 = 0.5f;
                }
                else if (projectile.type == 533)
                {
                    if (projectile.ai[0] >= 6f && projectile.ai[0] <= 8f)
                    {
                        num157 = ((projectile.ai[0] == 6f) ? 8 : 4);
                        num158 = 1;
                        if (projectile.ai[0] != 7f)
                        {
                            num159 = 0.2f;
                        }
                    }
                    else
                    {
                        num158 = (num157 = 0);
                    }
                }
                for (int num160 = 1; num160 < num157; num160 += num158)
                {
                    Microsoft.Xna.Framework.Color color26 = color25;
                    if (projectile.type == 408 || projectile.type == 435)
                    {
                        color26 = Microsoft.Xna.Framework.Color.Lerp(color26, Microsoft.Xna.Framework.Color.Blue, 0.5f);
                    }
                    else if (projectile.type == 436)
                    {
                        color26 = Microsoft.Xna.Framework.Color.Lerp(color26, Microsoft.Xna.Framework.Color.LimeGreen, 0.5f);
                    }
                    else if (projectile.type >= 424 && projectile.type <= 426)
                    {
                        color26 = Microsoft.Xna.Framework.Color.Lerp(color26, Microsoft.Xna.Framework.Color.Red, 0.5f);
                    }
                    else if (projectile.type == 640 || projectile.type == 639)
                    {
                        color26.A = 127;
                    }
                    color26 = projectile.GetAlpha(color26);
                    if (projectile.type == 438)
                    {
                        color26.G /= (byte)num160;
                        color26.B /= (byte)num160;
                    }
                    else if (projectile.type == 592)
                    {
                        color26.R /= (byte)num160;
                        color26.G /= (byte)num160;
                    }
                    else if (projectile.type == 640)
                    {
                        color26.R /= (byte)num160;
                        color26.A /= (byte)num160;
                    }
                    else if (projectile.type >= 424 && projectile.type <= 426)
                    {
                        color26.B /= (byte)num160;
                        color26.G /= (byte)num160;
                        color26.A /= (byte)num160;
                    }
                    color26 *= (float)(num157 - num160) / ((float)ProjectileID.Sets.TrailCacheLength[projectile.type] * 1.5f);
                    Vector2 value5 = projectile.oldPos[num160];
                    float num161 = projectile.rotation;
                    SpriteEffects effects = spriteEffects;
                    if (ProjectileID.Sets.TrailingMode[projectile.type] == 2)
                    {
                        num161 = projectile.oldRot[num160];
                        effects = ((projectile.oldSpriteDirection[num160] == -1) ? SpriteEffects.FlipHorizontally : SpriteEffects.None);
                    }
                    Game1.spriteBatch.Draw(texture2D3, value5 + projectile.Size / 2f - Game1.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(rectangle), color26, num161 + projectile.rotation * num159 * (float)(num160 - 1) * (float)(-(float)spriteEffects.HasFlag(SpriteEffects.FlipHorizontally).ToDirectionInt()), origin2, MathHelper.Lerp(projectile.scale, value4, (float)num160 / 15f), effects, 0f);
                }
                Microsoft.Xna.Framework.Color color27 = projectile.GetAlpha(color25);
                if (projectile.type == 640)
                {
                    color27 = Microsoft.Xna.Framework.Color.Transparent;
                }
                Game1.spriteBatch.Draw(texture2D3, projectile.Center - Game1.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(rectangle), color27, projectile.rotation, origin2, projectile.scale, spriteEffects, 0f);
                if (projectile.type == 503)
                {
                    Game1.spriteBatch.Draw(Game1.extraTexture[36], projectile.Center - Game1.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(rectangle), Microsoft.Xna.Framework.Color.White, projectile.localAI[0], origin2, projectile.scale, spriteEffects, 0f);
                }
                else if (projectile.type == 533)
                {
                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[128], projectile.Center - Game1.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(rectangle), Microsoft.Xna.Framework.Color.White * 0.3f, projectile.rotation, origin2, projectile.scale, spriteEffects, 0f);
                }
                else if (projectile.type == 601)
                {
                    Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
                    white.A = 0;
                    Game1.spriteBatch.Draw(texture2D3, projectile.Center - Game1.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(rectangle), white, projectile.rotation, origin2, projectile.scale * 0.7f, spriteEffects, 0f);
                }
            }
            else if (projectile.type == 440 || projectile.type == 449 || projectile.type == 606)
            {
                Microsoft.Xna.Framework.Rectangle value6 = new Microsoft.Xna.Framework.Rectangle((int)Game1.screenPosition.X - 500, (int)Game1.screenPosition.Y - 500, Game1.screenWidth + 1000, Game1.screenHeight + 1000);
                if (projectile.getRect().Intersects(value6))
                {
                    Vector2 value7 = new Vector2(projectile.position.X - Game1.screenPosition.X + num150 + (float)num149, projectile.position.Y - Game1.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY);
                    float num162 = 100f;
                    float scaleFactor = 3f;
                    if (projectile.type == 606)
                    {
                        num162 = 150f;
                        scaleFactor = 3f;
                    }
                    if (projectile.ai[1] == 1f)
                    {
                        num162 = (float)((int)projectile.localAI[0]);
                    }
                    for (int num163 = 1; num163 <= (int)projectile.localAI[0]; num163++)
                    {
                        Vector2 value8 = Vector2.Normalize(projectile.velocity) * (float)num163 * scaleFactor;
                        Microsoft.Xna.Framework.Color color28 = projectile.GetAlpha(color25);
                        color28 *= (num162 - (float)num163) / num162;
                        color28.A = 0;
                        Game1.spriteBatch.Draw(Game1.projectileTexture[projectile.type], value7 - value8, null, color28, projectile.rotation, new Vector2(num150, (float)(projectile.height / 2 + num148)), projectile.scale, spriteEffects, 0f);
                    }
                }
            }
            else if (projectile.type == 586)
            {
                float num164 = 300f;
                if (projectile.ai[0] >= 100f)
                {
                    num164 = MathHelper.Lerp(300f, 600f, (projectile.ai[0] - 100f) / 200f);
                }
                if (num164 > 600f)
                {
                    num164 = 600f;
                }
                if (projectile.ai[0] >= 500f)
                {
                    num164 = MathHelper.Lerp(600f, 1200f, (projectile.ai[0] - 500f) / 100f);
                }
                float rotation23 = projectile.rotation;
                Texture2D texture2D4 = Game1.projectileTexture[projectile.type];
                Microsoft.Xna.Framework.Color alpha2 = projectile.GetAlpha(color25);
                alpha2.A /= 2;
                int num165 = (int)(projectile.ai[0] / 6f);
                Vector2 spinningpoint = new Vector2(0f, -num164);
                int num166 = 0;
                while ((float)num166 < 10f)
                {
                    Microsoft.Xna.Framework.Rectangle rectangle2 = texture2D4.Frame(1, 5, 0, (num165 + num166) % 5);
                    float num167 = rotation23 + 0.628318548f * (float)num166;
                    Vector2 position = spinningpoint.RotatedBy((double)num167, default(Vector2)) / 3f + projectile.Center - Game1.screenPosition;
                    Game1.spriteBatch.Draw(texture2D4, position, new Microsoft.Xna.Framework.Rectangle?(rectangle2), alpha2, num167, rectangle2.Size() / 2f, projectile.scale, SpriteEffects.None, 0f);
                    num166++;
                }
                int num168 = 0;
                while ((float)num168 < 20f)
                {
                    Microsoft.Xna.Framework.Rectangle rectangle3 = texture2D4.Frame(1, 5, 0, (num165 + num168) % 5);
                    float num169 = -rotation23 + 0.314159274f * (float)num168;
                    num169 *= 2f;
                    Vector2 position2 = spinningpoint.RotatedBy((double)num169, default(Vector2)) + projectile.Center - Game1.screenPosition;
                    Game1.spriteBatch.Draw(texture2D4, position2, new Microsoft.Xna.Framework.Rectangle?(rectangle3), alpha2, num169, rectangle3.Size() / 2f, projectile.scale, SpriteEffects.None, 0f);
                    num168++;
                }
            }
            else if (projectile.type == 536 || projectile.type == 591 || projectile.type == 607)
            {
                Texture2D texture2D5 = Game1.projectileTexture[projectile.type];
                Vector2 position3 = projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Game1.screenPosition;
                Vector2 scale = new Vector2(1f, projectile.velocity.Length() / (float)texture2D5.Height);
                Game1.spriteBatch.Draw(texture2D5, position3, null, projectile.GetAlpha(color25), projectile.rotation, texture2D5.Frame(1, 1, 0, 0).Bottom(), scale, spriteEffects, 0f);
            }
            else if (projectile.type == 409)
            {
                Texture2D texture2D6 = Game1.projectileTexture[projectile.type];
                int num170 = Game1.projectileTexture[projectile.type].Height / Game1.projFrames[projectile.type];
                int y4 = num170 * projectile.frame;
                int num171 = 10;
                int num172 = 2;
                float value9 = 0.5f;
                for (int num173 = 1; num173 < num171; num173 += num172)
                {
                    Vector2 arg_6791_0 = Game1.npc[i].oldPos[num173];
                    Microsoft.Xna.Framework.Color color29 = color25;
                    color29 = projectile.GetAlpha(color29);
                    color29 *= (float)(num171 - num173) / 15f;
                    Game1.spriteBatch.Draw(texture2D6, projectile.oldPos[num173] + new Vector2((float)projectile.width, (float)projectile.height) / 2f - Game1.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y4, texture2D6.Width, num170)), color29, projectile.rotation, new Vector2((float)texture2D6.Width / 2f, (float)num170 / 2f), MathHelper.Lerp(projectile.scale, value9, (float)num173 / 15f), spriteEffects, 0f);
                }
                Game1.spriteBatch.Draw(texture2D6, projectile.Center - Game1.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y4, texture2D6.Width, num170)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D6.Width / 2f, (float)num170 / 2f), projectile.scale, spriteEffects, 0f);
            }
            else if (projectile.type == 437)
            {
                Texture2D texture2D7 = Game1.projectileTexture[projectile.type];
                int num174 = Game1.projectileTexture[projectile.type].Height / Game1.projFrames[projectile.type];
                int y5 = num174 * projectile.frame;
                int num175 = 10;
                int num176 = 2;
                float value10 = 0.2f;
                for (int num177 = 1; num177 < num175; num177 += num176)
                {
                    Vector2 arg_6A0A_0 = Game1.npc[i].oldPos[num177];
                    Microsoft.Xna.Framework.Color color30 = color25;
                    color30 = projectile.GetAlpha(color30);
                    color30 *= (float)(num175 - num177) / 15f;
                    Game1.spriteBatch.Draw(texture2D7, projectile.oldPos[num177] + new Vector2((float)projectile.width, (float)projectile.height) / 2f - Game1.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y5, texture2D7.Width, num174)), color30, projectile.rotation, new Vector2((float)texture2D7.Width / 2f, (float)num174 / 2f), MathHelper.Lerp(projectile.scale, value10, (float)num177 / 15f), spriteEffects, 0f);
                }
                Game1.spriteBatch.Draw(texture2D7, projectile.Center - Game1.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y5, texture2D7.Width, num174)), Microsoft.Xna.Framework.Color.White, projectile.rotation, new Vector2((float)texture2D7.Width / 2f, (float)num174 / 2f), projectile.scale + 0.2f, spriteEffects, 0f);
                Game1.spriteBatch.Draw(texture2D7, projectile.Center - Game1.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y5, texture2D7.Width, num174)), projectile.GetAlpha(Microsoft.Xna.Framework.Color.White), projectile.rotation, new Vector2((float)texture2D7.Width / 2f, (float)num174 / 2f), projectile.scale + 0.2f, spriteEffects, 0f);
            }
            else if (projectile.type == 384 || projectile.type == 386)
            {
                Texture2D texture2D8 = Game1.projectileTexture[projectile.type];
                int num178 = Game1.projectileTexture[projectile.type].Height / Game1.projFrames[projectile.type];
                int y6 = num178 * projectile.frame;
                Game1.spriteBatch.Draw(texture2D8, projectile.Center - Game1.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y6, texture2D8.Width, num178)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D8.Width / 2f, (float)num178 / 2f), projectile.scale, spriteEffects, 0f);
            }
            else if (projectile.type == 439 || projectile.type == 460 || projectile.type == 600 || projectile.type == 615 || projectile.type == 630 || projectile.type == 633)
            {
                Texture2D texture2D9 = Game1.projectileTexture[projectile.type];
                int num179 = Game1.projectileTexture[projectile.type].Height / Game1.projFrames[projectile.type];
                int y7 = num179 * projectile.frame;
                Vector2 vector25 = (projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Game1.screenPosition).Floor();
                float scale2 = 1f;
                if (Game1.player[projectile.owner].shroomiteStealth && Game1.player[projectile.owner].inventory[Game1.player[projectile.owner].selectedItem].ranged)
                {
                    float num180 = Game1.player[projectile.owner].stealth;
                    if ((double)num180 < 0.03)
                    {
                        num180 = 0.03f;
                    }
                    float arg_6EF0_0 = (1f + num180 * 10f) / 11f;
                    color25 *= num180;
                    scale2 = num180;
                }
                if (Game1.player[projectile.owner].setVortex && Game1.player[projectile.owner].inventory[Game1.player[projectile.owner].selectedItem].ranged)
                {
                    float num181 = Game1.player[projectile.owner].stealth;
                    if ((double)num181 < 0.03)
                    {
                        num181 = 0.03f;
                    }
                    float arg_6F91_0 = (1f + num181 * 10f) / 11f;
                    color25 = color25.MultiplyRGBA(new Microsoft.Xna.Framework.Color(Vector4.Lerp(Vector4.One, new Vector4(0f, 0.12f, 0.16f, 0f), 1f - num181)));
                    scale2 = num181;
                }
                Game1.spriteBatch.Draw(texture2D9, vector25, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y7, texture2D9.Width, num179)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D9.Width / 2f, (float)num179 / 2f), projectile.scale, spriteEffects, 0f);
                if (projectile.type == 439)
                {
                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[35], vector25, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y7, texture2D9.Width, num179)), new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * scale2, projectile.rotation, new Vector2((float)texture2D9.Width / 2f, (float)num179 / 2f), projectile.scale, spriteEffects, 0f);
                }
                else if (projectile.type == 615)
                {
                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[192], vector25, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y7, texture2D9.Width, num179)), new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * scale2, projectile.rotation, new Vector2((float)texture2D9.Width / 2f, (float)num179 / 2f), projectile.scale, spriteEffects, 0f);
                }
                else if (projectile.type == 630)
                {
                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[200], vector25, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y7, texture2D9.Width, num179)), new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * scale2, projectile.rotation, new Vector2((float)texture2D9.Width / 2f, (float)num179 / 2f), projectile.scale, spriteEffects, 0f);
                    if (projectile.localAI[0] > 0f)
                    {
                        int frameY = 6 - (int)(projectile.localAI[0] / 1f);
                        texture2D9 = Game1.extraTexture[65];
                        Game1.spriteBatch.Draw(texture2D9, vector25 + Vector2.Normalize(projectile.velocity) * 2f, new Microsoft.Xna.Framework.Rectangle?(texture2D9.Frame(1, 6, 0, frameY)), new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * scale2, projectile.rotation, new Vector2((float)(spriteEffects.HasFlag(SpriteEffects.FlipHorizontally) ? texture2D9.Width : 0), (float)num179 / 2f - 2f), projectile.scale, spriteEffects, 0f);
                    }
                }
                else if (projectile.type == 600)
                {
                    Microsoft.Xna.Framework.Color portalColor = PortalHelper.GetPortalColor(projectile.owner, (int)projectile.ai[1]);
                    portalColor.A = 70;
                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[173], vector25, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y7, texture2D9.Width, num179)), portalColor, projectile.rotation, new Vector2((float)texture2D9.Width / 2f, (float)num179 / 2f), projectile.scale, spriteEffects, 0f);
                }
                else if (projectile.type == 460)
                {
                    if (Math.Abs(projectile.rotation - 1.57079637f) > 1.57079637f)
                    {
                        spriteEffects |= SpriteEffects.FlipVertically;
                    }
                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[102], vector25, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y7, texture2D9.Width, num179)), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), projectile.rotation - 1.57079637f, new Vector2((float)texture2D9.Width / 2f, (float)num179 / 2f), projectile.scale, spriteEffects, 0f);
                    if (projectile.ai[0] > 180f && Game1.projectile[(int)projectile.ai[1]].type == 461)
                    {
                        this.DrawProj((int)projectile.ai[1]);
                    }
                }
                else if (projectile.type == 633)
                {
                    float scaleFactor2 = (float)Math.Cos((double)(6.28318548f * (projectile.ai[0] / 30f))) * 2f + 2f;
                    if (projectile.ai[0] > 120f)
                    {
                        scaleFactor2 = 4f;
                    }
                    for (float num182 = 0f; num182 < 4f; num182 += 1f)
                    {
                        Game1.spriteBatch.Draw(texture2D9, vector25 + Vector2.UnitY.RotatedBy((double)(num182 * 6.28318548f / 4f), default(Vector2)) * scaleFactor2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y7, texture2D9.Width, num179)), projectile.GetAlpha(color25).MultiplyRGBA(new Microsoft.Xna.Framework.Color(255, 255, 255, 0)) * 0.03f, projectile.rotation, new Vector2((float)texture2D9.Width / 2f, (float)num179 / 2f), projectile.scale, spriteEffects, 0f);
                    }
                }
            }
            else if (projectile.type == 442)
            {
                Texture2D texture2D10 = Game1.projectileTexture[projectile.type];
                int num183 = Game1.projectileTexture[projectile.type].Height / Game1.projFrames[projectile.type];
                int y8 = num183 * projectile.frame;
                Vector2 position4 = projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Game1.screenPosition;
                Game1.spriteBatch.Draw(texture2D10, position4, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y8, texture2D10.Width, num183)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D10.Width / 2f, (float)num183 / 2f), projectile.scale, spriteEffects, 0f);
                Game1.spriteBatch.Draw(Game1.glowMaskTexture[37], position4, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y8, texture2D10.Width, num183)), new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * (1f - (float)projectile.alpha / 255f), projectile.rotation, new Vector2((float)texture2D10.Width / 2f, (float)num183 / 2f), projectile.scale, spriteEffects, 0f);
            }
            else if (projectile.type == 447)
            {
                Texture2D texture2D11 = Game1.projectileTexture[projectile.type];
                Texture2D texture2D12 = Game1.extraTexture[4];
                int num184 = texture2D11.Height / Game1.projFrames[projectile.type];
                int y9 = num184 * projectile.frame;
                int num185 = texture2D12.Height / Game1.projFrames[projectile.type];
                int num186 = num185 * projectile.frame;
                Microsoft.Xna.Framework.Rectangle value11 = new Microsoft.Xna.Framework.Rectangle(0, num186, texture2D12.Width, num185);
                Vector2 vector26 = projectile.position + new Vector2((float)projectile.width, 0f) / 2f + Vector2.UnitY * projectile.gfxOffY - Game1.screenPosition;
                Game1.spriteBatch.Draw(Game1.extraTexture[4], vector26, new Microsoft.Xna.Framework.Rectangle?(value11), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)(texture2D12.Width / 2), 0f), projectile.scale, spriteEffects, 0f);
                int num187 = projectile.height - num184 - 14;
                if (num187 < 0)
                {
                    num187 = 0;
                }
                if (num187 > 0)
                {
                    if (num186 == num185 * 3)
                    {
                        num186 = num185 * 2;
                    }
                    Game1.spriteBatch.Draw(Game1.extraTexture[4], vector26 + Vector2.UnitY * (float)(num185 - 1), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num186 + num185 - 1, texture2D12.Width, 1)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)(texture2D12.Width / 2), 0f), new Vector2(1f, (float)num187), spriteEffects, 0f);
                }
                value11.Width = texture2D11.Width;
                value11.Y = y9;
                Game1.spriteBatch.Draw(texture2D11, vector26 + Vector2.UnitY * (float)(num185 - 1 + num187), new Microsoft.Xna.Framework.Rectangle?(value11), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D11.Width / 2f, 0f), projectile.scale, spriteEffects, 0f);
            }
            else if (projectile.type == 455)
            {
                if (projectile.velocity == Vector2.Zero)
                {
                    return;
                }
                Texture2D texture2D13 = Game1.projectileTexture[projectile.type];
                Texture2D texture2D14 = Game1.extraTexture[21];
                Texture2D texture2D15 = Game1.extraTexture[22];
                float num188 = projectile.localAI[1];
                Microsoft.Xna.Framework.Color color31 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.9f;
                Game1.spriteBatch.Draw(texture2D13, projectile.Center - Game1.screenPosition, null, color31, projectile.rotation, texture2D13.Size() / 2f, projectile.scale, SpriteEffects.None, 0f);
                num188 -= (float)(texture2D13.Height / 2 + texture2D15.Height) * projectile.scale;
                Vector2 value12 = projectile.Center;
                value12 += projectile.velocity * projectile.scale * (float)texture2D13.Height / 2f;
                if (num188 > 0f)
                {
                    float num189 = 0f;
                    Microsoft.Xna.Framework.Rectangle value13 = new Microsoft.Xna.Framework.Rectangle(0, 16 * (projectile.timeLeft / 3 % 5), texture2D14.Width, 16);
                    while (num189 + 1f < num188)
                    {
                        if (num188 - num189 < (float)value13.Height)
                        {
                            value13.Height = (int)(num188 - num189);
                        }
                        Game1.spriteBatch.Draw(texture2D14, value12 - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(value13), color31, projectile.rotation, new Vector2((float)(value13.Width / 2), 0f), projectile.scale, SpriteEffects.None, 0f);
                        num189 += (float)value13.Height * projectile.scale;
                        value12 += projectile.velocity * (float)value13.Height * projectile.scale;
                        value13.Y += 16;
                        if (value13.Y + value13.Height > texture2D14.Height)
                        {
                            value13.Y = 0;
                        }
                    }
                }
                Game1.spriteBatch.Draw(texture2D15, value12 - Game1.screenPosition, null, color31, projectile.rotation, texture2D15.Frame(1, 1, 0, 0).Top(), projectile.scale, SpriteEffects.None, 0f);
            }
            else if (projectile.type == 461)
            {
                if (projectile.velocity == Vector2.Zero)
                {
                    return;
                }
                Texture2D texture2D16 = Game1.projectileTexture[projectile.type];
                float num190 = projectile.localAI[1];
                Microsoft.Xna.Framework.Color color32 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.9f;
                Microsoft.Xna.Framework.Rectangle rectangle4 = new Microsoft.Xna.Framework.Rectangle(0, 0, texture2D16.Width, 22);
                Vector2 value14 = new Vector2(0f, Game1.player[projectile.owner].gfxOffY);
                Game1.spriteBatch.Draw(texture2D16, projectile.Center.Floor() - Game1.screenPosition + value14, new Microsoft.Xna.Framework.Rectangle?(rectangle4), color32, projectile.rotation, rectangle4.Size() / 2f, projectile.scale, SpriteEffects.None, 0f);
                num190 -= 33f * projectile.scale;
                Vector2 value15 = projectile.Center.Floor();
                value15 += projectile.velocity * projectile.scale * 10.5f;
                rectangle4 = new Microsoft.Xna.Framework.Rectangle(0, 25, texture2D16.Width, 28);
                if (num190 > 0f)
                {
                    float num191 = 0f;
                    while (num191 + 1f < num190)
                    {
                        if (num190 - num191 < (float)rectangle4.Height)
                        {
                            rectangle4.Height = (int)(num190 - num191);
                        }
                        Game1.spriteBatch.Draw(texture2D16, value15 - Game1.screenPosition + value14, new Microsoft.Xna.Framework.Rectangle?(rectangle4), color32, projectile.rotation, new Vector2((float)(rectangle4.Width / 2), 0f), projectile.scale, SpriteEffects.None, 0f);
                        num191 += (float)rectangle4.Height * projectile.scale;
                        value15 += projectile.velocity * (float)rectangle4.Height * projectile.scale;
                    }
                }
                rectangle4 = new Microsoft.Xna.Framework.Rectangle(0, 56, texture2D16.Width, 22);
                Game1.spriteBatch.Draw(texture2D16, value15 - Game1.screenPosition + value14, new Microsoft.Xna.Framework.Rectangle?(rectangle4), color32, projectile.rotation, texture2D16.Frame(1, 1, 0, 0).Top(), projectile.scale, SpriteEffects.None, 0f);
            }
            else if (projectile.type == 632)
            {
                if (projectile.velocity == Vector2.Zero)
                {
                    return;
                }
                Texture2D tex = Game1.projectileTexture[projectile.type];
                float num192 = projectile.localAI[1];
                float prismHue = projectile.GetPrismHue(projectile.ai[0]);
                Microsoft.Xna.Framework.Color value16 = Game1.hslToRgb(prismHue, 1f, 0.5f);
                value16.A = 0;
                Vector2 value17 = projectile.Center.Floor();
                value17 += projectile.velocity * projectile.scale * 10.5f;
                num192 -= projectile.scale * 14.5f * projectile.scale;
                Vector2 vector27 = new Vector2(projectile.scale);
                DelegateMethods.f_1 = 1f;
                DelegateMethods.c_1 = value16 * 0.75f * projectile.Opacity;
                Utils.DrawLaser(Game1.spriteBatch, tex, value17 - Game1.screenPosition, value17 + projectile.velocity * num192 - Game1.screenPosition, vector27, new Utils.LaserLineFraming(DelegateMethods.RainbowLaserDraw));
                DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * 0.75f * projectile.Opacity;
                Utils.DrawLaser(Game1.spriteBatch, tex, value17 - Game1.screenPosition, value17 + projectile.velocity * num192 - Game1.screenPosition, vector27 / 2f, new Utils.LaserLineFraming(DelegateMethods.RainbowLaserDraw));
            }
            else if (projectile.type == 642)
            {
                if (projectile.velocity == Vector2.Zero)
                {
                    return;
                }
                Texture2D tex2 = Game1.projectileTexture[projectile.type];
                float num193 = projectile.localAI[1];
                Microsoft.Xna.Framework.Color c_ = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
                Vector2 value18 = projectile.Center.Floor();
                num193 -= projectile.scale * 10.5f;
                Vector2 vector28 = new Vector2(projectile.scale);
                DelegateMethods.f_1 = 1f;
                DelegateMethods.c_1 = c_;
                DelegateMethods.i_1 = 54000 - (int)Game1.time / 2;
                Utils.DrawLaser(Game1.spriteBatch, tex2, value18 - Game1.screenPosition, value18 + projectile.velocity * num193 - Game1.screenPosition, vector28, new Utils.LaserLineFraming(DelegateMethods.TurretLaserDraw));
                DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * 0.75f * projectile.Opacity;
                Utils.DrawLaser(Game1.spriteBatch, tex2, value18 - Game1.screenPosition, value18 + projectile.velocity * num193 - Game1.screenPosition, vector28 / 2f, new Utils.LaserLineFraming(DelegateMethods.TurretLaserDraw));
            }
            else if (projectile.type == 611)
            {
                Texture2D texture2D17 = Game1.projectileTexture[projectile.type];
                Microsoft.Xna.Framework.Color alpha3 = projectile.GetAlpha(color25);
                if (projectile.velocity == Vector2.Zero)
                {
                    return;
                }
                float num194 = projectile.velocity.Length() + 16f;
                bool flag21 = num194 < 100f;
                Vector2 value19 = Vector2.Normalize(projectile.velocity);
                Microsoft.Xna.Framework.Rectangle rectangle5 = new Microsoft.Xna.Framework.Rectangle(0, 2, texture2D17.Width, 40);
                Vector2 value20 = new Vector2(0f, Game1.player[projectile.owner].gfxOffY);
                float rotation24 = projectile.rotation + 3.14159274f;
                Game1.spriteBatch.Draw(texture2D17, projectile.Center.Floor() - Game1.screenPosition + value20, new Microsoft.Xna.Framework.Rectangle?(rectangle5), alpha3, rotation24, rectangle5.Size() / 2f - Vector2.UnitY * 4f, projectile.scale, SpriteEffects.None, 0f);
                num194 -= 40f * projectile.scale;
                Vector2 vector29 = projectile.Center.Floor();
                vector29 += value19 * projectile.scale * 24f;
                rectangle5 = new Microsoft.Xna.Framework.Rectangle(0, 68, texture2D17.Width, 18);
                if (num194 > 0f)
                {
                    float num195 = 0f;
                    while (num195 + 1f < num194)
                    {
                        if (num194 - num195 < (float)rectangle5.Height)
                        {
                            rectangle5.Height = (int)(num194 - num195);
                        }
                        Game1.spriteBatch.Draw(texture2D17, vector29 - Game1.screenPosition + value20, new Microsoft.Xna.Framework.Rectangle?(rectangle5), alpha3, rotation24, new Vector2((float)(rectangle5.Width / 2), 0f), projectile.scale, SpriteEffects.None, 0f);
                        num195 += (float)rectangle5.Height * projectile.scale;
                        vector29 += value19 * (float)rectangle5.Height * projectile.scale;
                    }
                }
                Vector2 value21 = vector29;
                vector29 = projectile.Center.Floor();
                vector29 += value19 * projectile.scale * 24f;
                rectangle5 = new Microsoft.Xna.Framework.Rectangle(0, 46, texture2D17.Width, 18);
                int num196 = 18;
                if (flag21)
                {
                    num196 = 9;
                }
                float num197 = num194;
                if (num194 > 0f)
                {
                    float num198 = 0f;
                    float num199 = num197 / (float)num196;
                    num198 += num199 * 0.25f;
                    vector29 += value19 * num199 * 0.25f;
                    for (int num200 = 0; num200 < num196; num200++)
                    {
                        float num201 = num199;
                        if (num200 == 0)
                        {
                            num201 *= 0.75f;
                        }
                        Game1.spriteBatch.Draw(texture2D17, vector29 - Game1.screenPosition + value20, new Microsoft.Xna.Framework.Rectangle?(rectangle5), alpha3, rotation24, new Vector2((float)(rectangle5.Width / 2), 0f), projectile.scale, SpriteEffects.None, 0f);
                        num198 += num201;
                        vector29 += value19 * num201;
                    }
                }
                rectangle5 = new Microsoft.Xna.Framework.Rectangle(0, 90, texture2D17.Width, 48);
                Game1.spriteBatch.Draw(texture2D17, value21 - Game1.screenPosition + value20, new Microsoft.Xna.Framework.Rectangle?(rectangle5), alpha3, rotation24, texture2D17.Frame(1, 1, 0, 0).Top(), projectile.scale, SpriteEffects.None, 0f);
            }
            else if (projectile.type == 537)
            {
                if (projectile.velocity == Vector2.Zero)
                {
                    return;
                }
                Texture2D texture2D18 = Game1.projectileTexture[projectile.type];
                float num202 = projectile.localAI[1];
                Microsoft.Xna.Framework.Color color33 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.9f;
                Microsoft.Xna.Framework.Rectangle rectangle6 = new Microsoft.Xna.Framework.Rectangle(0, 0, texture2D18.Width, 22);
                Vector2 value22 = new Vector2(0f, Game1.npc[(int)projectile.ai[1]].gfxOffY);
                Game1.spriteBatch.Draw(texture2D18, projectile.Center.Floor() - Game1.screenPosition + value22, new Microsoft.Xna.Framework.Rectangle?(rectangle6), color33, projectile.rotation, rectangle6.Size() / 2f, projectile.scale, SpriteEffects.None, 0f);
                num202 -= 33f * projectile.scale;
                Vector2 value23 = projectile.Center.Floor();
                value23 += projectile.velocity * projectile.scale * 10.5f;
                rectangle6 = new Microsoft.Xna.Framework.Rectangle(0, 25, texture2D18.Width, 28);
                if (num202 > 0f)
                {
                    float num203 = 0f;
                    while (num203 + 1f < num202)
                    {
                        if (num202 - num203 < (float)rectangle6.Height)
                        {
                            rectangle6.Height = (int)(num202 - num203);
                        }
                        Game1.spriteBatch.Draw(texture2D18, value23 - Game1.screenPosition + value22, new Microsoft.Xna.Framework.Rectangle?(rectangle6), color33, projectile.rotation, new Vector2((float)(rectangle6.Width / 2), 0f), projectile.scale, SpriteEffects.None, 0f);
                        num203 += (float)rectangle6.Height * projectile.scale;
                        value23 += projectile.velocity * (float)rectangle6.Height * projectile.scale;
                    }
                }
                rectangle6 = new Microsoft.Xna.Framework.Rectangle(0, 56, texture2D18.Width, 22);
                Game1.spriteBatch.Draw(texture2D18, value23 - Game1.screenPosition + value22, new Microsoft.Xna.Framework.Rectangle?(rectangle6), color33, projectile.rotation, texture2D18.Frame(1, 1, 0, 0).Top(), projectile.scale, SpriteEffects.None, 0f);
            }
            else if (projectile.type == 456)
            {
                Texture2D texture2D19 = Game1.projectileTexture[projectile.type];
                Texture2D texture2D20 = Game1.extraTexture[23];
                Texture2D texture2D21 = Game1.extraTexture[24];
                Vector2 value24 = new Vector2(0f, 216f);
                Vector2 value25 = Game1.npc[(int)Math.Abs(projectile.ai[0]) - 1].Center - projectile.Center + value24;
                float num204 = value25.Length();
                Vector2 value26 = Vector2.Normalize(value25);
                Microsoft.Xna.Framework.Rectangle rectangle7 = texture2D19.Frame(1, 1, 0, 0);
                rectangle7.Height /= 4;
                rectangle7.Y += projectile.frame * rectangle7.Height;
                color25 = Microsoft.Xna.Framework.Color.Lerp(color25, Microsoft.Xna.Framework.Color.White, 0.3f);
                Game1.spriteBatch.Draw(texture2D19, projectile.Center - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(rectangle7), projectile.GetAlpha(color25), projectile.rotation, rectangle7.Size() / 2f, projectile.scale, SpriteEffects.None, 0f);
                num204 -= (float)(rectangle7.Height / 2 + texture2D21.Height) * projectile.scale;
                Vector2 vector30 = projectile.Center;
                vector30 += value26 * projectile.scale * (float)rectangle7.Height / 2f;
                if (num204 > 0f)
                {
                    float num205 = 0f;
                    Microsoft.Xna.Framework.Rectangle rectangle8 = new Microsoft.Xna.Framework.Rectangle(0, 0, texture2D20.Width, texture2D20.Height);
                    while (num205 + 1f < num204)
                    {
                        if (num204 - num205 < (float)rectangle8.Height)
                        {
                            rectangle8.Height = (int)(num204 - num205);
                        }
                        Microsoft.Xna.Framework.Point point = vector30.ToTileCoordinates();
                        Microsoft.Xna.Framework.Color color34 = Lighting.GetColor(point.X, point.Y);
                        color34 = Microsoft.Xna.Framework.Color.Lerp(color34, Microsoft.Xna.Framework.Color.White, 0.3f);
                        Game1.spriteBatch.Draw(texture2D20, vector30 - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(rectangle8), projectile.GetAlpha(color34), projectile.rotation, rectangle8.Bottom(), projectile.scale, SpriteEffects.None, 0f);
                        num205 += (float)rectangle8.Height * projectile.scale;
                        vector30 += value26 * (float)rectangle8.Height * projectile.scale;
                    }
                }
                Microsoft.Xna.Framework.Point point2 = vector30.ToTileCoordinates();
                Microsoft.Xna.Framework.Color color35 = Lighting.GetColor(point2.X, point2.Y);
                color35 = Microsoft.Xna.Framework.Color.Lerp(color35, Microsoft.Xna.Framework.Color.White, 0.3f);
                Microsoft.Xna.Framework.Rectangle value27 = texture2D21.Frame(1, 1, 0, 0);
                if (num204 < 0f)
                {
                    value27.Height += (int)num204;
                }
                Game1.spriteBatch.Draw(texture2D21, vector30 - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(value27), color35, projectile.rotation, new Vector2((float)value27.Width / 2f, (float)value27.Height), projectile.scale, SpriteEffects.None, 0f);
            }
            else if (projectile.type == 443)
            {
                Texture2D texture2D22 = Game1.projectileTexture[projectile.type];
                float num206 = 30f;
                float num207 = num206 * 4f;
                float num208 = 6.28318548f * projectile.ai[0] / num206;
                float num209 = 6.28318548f * projectile.ai[0] / num207;
                Vector2 vector31 = -Vector2.UnitY.RotatedBy((double)num208, default(Vector2));
                float scale3 = 0.75f + vector31.Y * 0.25f;
                float scale4 = 0.8f - vector31.Y * 0.2f;
                int num210 = Game1.projectileTexture[projectile.type].Height / Game1.projFrames[projectile.type];
                int y10 = num210 * projectile.frame;
                Vector2 position5 = projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Game1.screenPosition;
                Game1.spriteBatch.Draw(texture2D22, position5, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y10, texture2D22.Width, num210)), projectile.GetAlpha(color25), projectile.rotation + num209, new Vector2((float)texture2D22.Width / 2f, (float)num210 / 2f), scale3, spriteEffects, 0f);
                Game1.spriteBatch.Draw(texture2D22, position5, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y10, texture2D22.Width, num210)), projectile.GetAlpha(color25), projectile.rotation + (6.28318548f - num209), new Vector2((float)texture2D22.Width / 2f, (float)num210 / 2f), scale4, spriteEffects, 0f);
            }
            else if (projectile.type == 444 || projectile.type == 446 || projectile.type == 490 || projectile.type == 464 || projectile.type == 502 || projectile.type == 538 || projectile.type == 540 || projectile.type == 579 || projectile.type == 578 || projectile.type == 583 || projectile.type == 584 || projectile.type == 616 || projectile.type == 617 || projectile.type == 618 || projectile.type == 641 || (projectile.type >= 646 && projectile.type <= 649))
            {
                Vector2 position6 = projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Game1.screenPosition;
                Texture2D texture2D23 = Game1.projectileTexture[projectile.type];
                Microsoft.Xna.Framework.Color alpha4 = projectile.GetAlpha(color25);
                Vector2 origin3 = new Vector2((float)texture2D23.Width, (float)texture2D23.Height) / 2f;
                if (projectile.type == 446)
                {
                    origin3.Y = 4f;
                }
                if (projectile.type == 502)
                {
                    this.LoadProjectile(250);
                    Texture2D texture2D24 = Game1.projectileTexture[250];
                    Vector2 origin4 = new Vector2((float)(texture2D24.Width / 2), 0f);
                    Vector2 value28 = new Vector2((float)projectile.width, (float)projectile.height) / 2f;
                    Microsoft.Xna.Framework.Color white2 = Microsoft.Xna.Framework.Color.White;
                    white2.A = 127;
                    for (int num211 = projectile.oldPos.Length - 1; num211 > 0; num211--)
                    {
                        Vector2 vector32 = projectile.oldPos[num211] + value28;
                        if (!(vector32 == value28))
                        {
                            Vector2 vector33 = projectile.oldPos[num211 - 1] + value28;
                            float rotation25 = (vector33 - vector32).ToRotation() - 1.57079637f;
                            Vector2 scale5 = new Vector2(1f, Vector2.Distance(vector32, vector33) / (float)texture2D24.Height);
                            Microsoft.Xna.Framework.Color color36 = white2 * (1f - (float)num211 / (float)projectile.oldPos.Length);
                            Game1.spriteBatch.Draw(texture2D24, vector32 - Game1.screenPosition, null, color36, rotation25, origin4, scale5, spriteEffects, 0f);
                        }
                    }
                }
                else if (projectile.type == 540 && projectile.velocity != Vector2.Zero)
                {
                    float num212 = 0f;
                    if (projectile.ai[0] >= 10f)
                    {
                        num212 = (projectile.ai[0] - 10f) / 10f;
                    }
                    if (projectile.ai[0] >= 20f)
                    {
                        num212 = (20f - projectile.ai[0]) / 10f;
                    }
                    if (num212 > 1f)
                    {
                        num212 = 1f;
                    }
                    if (num212 < 0f)
                    {
                        num212 = 0f;
                    }
                    if (num212 != 0f)
                    {
                        Texture2D texture2D25 = Game1.extraTexture[47];
                        Vector2 origin5 = new Vector2((float)(texture2D25.Width / 2), 0f);
                        Microsoft.Xna.Framework.Color color37 = alpha4 * num212 * 0.7f;
                        Vector2 vector34 = projectile.Center - Game1.screenPosition;
                        Vector2 value29 = projectile.velocity.ToRotation().ToRotationVector2() * (float)texture2D23.Width / 3f;
                        value29 = Vector2.Zero;
                        vector34 += value29;
                        float rotation26 = projectile.velocity.ToRotation() - 1.57079637f;
                        Vector2 scale6 = new Vector2(1f, (projectile.velocity.Length() - value29.Length() * 2f) / (float)texture2D25.Height);
                        Game1.spriteBatch.Draw(texture2D25, vector34, null, color37, rotation26, origin5, scale6, SpriteEffects.None, 0f);
                    }
                }
                if (projectile.type == 578 || projectile.type == 579 || projectile.type == 641)
                {
                    Microsoft.Xna.Framework.Color color38 = alpha4 * 0.8f;
                    color38.A /= 2;
                    Microsoft.Xna.Framework.Color color39 = Microsoft.Xna.Framework.Color.Lerp(alpha4, Microsoft.Xna.Framework.Color.Black, 0.5f);
                    color39.A = alpha4.A;
                    float num213 = 0.95f + (projectile.rotation * 0.75f).ToRotationVector2().Y * 0.1f;
                    color39 *= num213;
                    float scale7 = 0.6f + projectile.scale * 0.6f * num213;
                    Game1.spriteBatch.Draw(Game1.extraTexture[50], position6, null, color39, -projectile.rotation + 0.35f, origin3, scale7, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
                    Game1.spriteBatch.Draw(Game1.extraTexture[50], position6, null, alpha4, -projectile.rotation, origin3, projectile.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
                    Game1.spriteBatch.Draw(texture2D23, position6, null, color38, -projectile.rotation * 0.7f, origin3, projectile.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
                    Game1.spriteBatch.Draw(Game1.extraTexture[50], position6, null, alpha4 * 0.8f, projectile.rotation * 0.5f, origin3, projectile.scale * 0.9f, spriteEffects, 0f);
                    alpha4.A = 0;
                }
                if (projectile.type == 617)
                {
                    Microsoft.Xna.Framework.Color color40 = alpha4 * 0.8f;
                    color40.A /= 2;
                    Microsoft.Xna.Framework.Color color41 = Microsoft.Xna.Framework.Color.Lerp(alpha4, Microsoft.Xna.Framework.Color.Black, 0.5f);
                    color41.A = alpha4.A;
                    float num214 = 0.95f + (projectile.rotation * 0.75f).ToRotationVector2().Y * 0.1f;
                    color41 *= num214;
                    float scale8 = 0.6f + projectile.scale * 0.6f * num214;
                    Game1.spriteBatch.Draw(Game1.extraTexture[50], position6, null, color41, -projectile.rotation + 0.35f, origin3, scale8, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
                    Game1.spriteBatch.Draw(Game1.extraTexture[50], position6, null, alpha4, -projectile.rotation, origin3, projectile.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
                    Game1.spriteBatch.Draw(texture2D23, position6, null, color40, -projectile.rotation * 0.7f, origin3, projectile.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
                    Game1.spriteBatch.Draw(Game1.extraTexture[50], position6, null, alpha4 * 0.8f, projectile.rotation * 0.5f, origin3, projectile.scale * 0.9f, spriteEffects, 0f);
                    alpha4.A = 0;
                }
                bool flag22 = false;
                if (!(flag22 | (projectile.type == 464 && projectile.ai[1] != 1f)))
                {
                    Game1.spriteBatch.Draw(texture2D23, position6, null, alpha4, projectile.rotation, origin3, projectile.scale, spriteEffects, 0f);
                }
                if (projectile.type == 464 && projectile.ai[1] != 1f)
                {
                    texture2D23 = Game1.extraTexture[35];
                    Microsoft.Xna.Framework.Rectangle rectangle9 = texture2D23.Frame(1, 3, 0, 0);
                    origin3 = rectangle9.Size() / 2f;
                    Vector2 value30 = new Vector2(0f, -720f).RotatedBy((double)projectile.velocity.ToRotation(), default(Vector2));
                    float scaleFactor3 = projectile.ai[0] % 45f / 45f;
                    Vector2 spinningpoint2 = value30 * scaleFactor3;
                    for (int num215 = 0; num215 < 6; num215++)
                    {
                        float num216 = (float)num215 * 6.28318548f / 6f;
                        Vector2 value31 = projectile.Center + spinningpoint2.RotatedBy((double)num216, default(Vector2));
                        Game1.spriteBatch.Draw(texture2D23, value31 - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(rectangle9), alpha4, num216 + projectile.velocity.ToRotation() + 3.14159274f, origin3, projectile.scale, spriteEffects, 0f);
                        rectangle9.Y += rectangle9.Height;
                        if (rectangle9.Y >= texture2D23.Height)
                        {
                            rectangle9.Y = 0;
                        }
                    }
                }
                else if (projectile.type == 490)
                {
                    Game1.spriteBatch.Draw(Game1.extraTexture[34], position6, null, alpha4, -projectile.rotation, Game1.extraTexture[34].Size() / 2f, projectile.scale, spriteEffects, 0f);
                    Game1.spriteBatch.Draw(texture2D23, position6, null, alpha4, projectile.rotation, origin3, projectile.scale * 0.42f, spriteEffects, 0f);
                    Game1.spriteBatch.Draw(Game1.extraTexture[34], position6, null, alpha4, -projectile.rotation, Game1.extraTexture[34].Size() / 2f, projectile.scale * 0.42f, spriteEffects, 0f);
                }
                else if (projectile.type == 616)
                {
                    texture2D23 = Game1.glowMaskTexture[193];
                    Game1.spriteBatch.Draw(texture2D23, position6, null, new Microsoft.Xna.Framework.Color(127, 127, 127, 0), projectile.rotation, origin3, projectile.scale, spriteEffects, 0f);
                }
                else if (projectile.type >= 646 && projectile.type <= 649)
                {
                    texture2D23 = Game1.glowMaskTexture[203 + projectile.type - 646];
                    Game1.spriteBatch.Draw(texture2D23, position6, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 127), projectile.rotation, origin3, projectile.scale, spriteEffects, 0f);
                }
            }
            else if (projectile.type == 465 || projectile.type == 467 || projectile.type == 468 || projectile.type == 500 || projectile.type == 518 || projectile.type == 535 || projectile.type == 539 || projectile.type == 575 || projectile.type == 574 || projectile.type == 589 || projectile.type == 590 || projectile.type == 593 || projectile.type == 602 || projectile.type == 596 || projectile.type == 612 || projectile.type == 613 || projectile.type == 614 || projectile.type == 623 || projectile.type == 625 || projectile.type == 626 || projectile.type == 627 || projectile.type == 628 || projectile.type == 634 || projectile.type == 635 || projectile.type == 643 || projectile.type == 644 || projectile.type == 645 || projectile.type == 650)
            {
                Vector2 vector35 = projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Game1.screenPosition;
                Texture2D texture2D26 = Game1.projectileTexture[projectile.type];
                Microsoft.Xna.Framework.Rectangle rectangle10 = texture2D26.Frame(1, Game1.projFrames[projectile.type], 0, projectile.frame);
                Microsoft.Xna.Framework.Color alpha5 = projectile.GetAlpha(color25);
                Vector2 origin6 = rectangle10.Size() / 2f;
                if (projectile.type == 539)
                {
                    if (projectile.ai[0] >= 210f)
                    {
                        float num217 = projectile.ai[0] - 210f;
                        num217 /= 20f;
                        if (num217 > 1f)
                        {
                            num217 = 1f;
                        }
                        Game1.spriteBatch.Draw(Game1.extraTexture[46], vector35, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 128) * num217, projectile.rotation, new Vector2(17f, 22f), projectile.scale, spriteEffects, 0f);
                    }
                }
                else if (projectile.type == 602)
                {
                    origin6.X = (float)(rectangle10.Width - 6);
                    origin6.Y -= 1f;
                    rectangle10.Height -= 2;
                }
                else if (projectile.type == 589)
                {
                    rectangle10 = texture2D26.Frame(5, 1, (int)projectile.ai[1], 0);
                    origin6 = rectangle10.Size() / 2f;
                }
                else if (projectile.type == 590)
                {
                    rectangle10 = texture2D26.Frame(3, 1, projectile.frame, 0);
                    origin6 = rectangle10.Size() / 2f;
                }
                else if (projectile.type == 650)
                {
                    origin6.Y -= 4f;
                }
                else if (projectile.type == 623)
                {
                    alpha5.A /= 2;
                }
                else if (projectile.type >= 625 && projectile.type <= 628)
                {
                    alpha5.A /= 2;
                }
                else if (projectile.type == 644)
                {
                    Microsoft.Xna.Framework.Color color42 = Game1.hslToRgb(projectile.ai[0], 1f, 0.5f).MultiplyRGBA(new Microsoft.Xna.Framework.Color(255, 255, 255, 0));
                    Game1.spriteBatch.Draw(texture2D26, vector35, new Microsoft.Xna.Framework.Rectangle?(rectangle10), color42, projectile.rotation, origin6, projectile.scale * 2f, spriteEffects, 0f);
                    Game1.spriteBatch.Draw(texture2D26, vector35, new Microsoft.Xna.Framework.Rectangle?(rectangle10), color42, 0f, origin6, projectile.scale * 2f, spriteEffects, 0f);
                    if (projectile.ai[1] != -1f && projectile.Opacity > 0.3f)
                    {
                        Vector2 vector36 = Game1.projectile[(int)projectile.ai[1]].Center - projectile.Center;
                        Vector2 vector37 = new Vector2(1f, vector36.Length() / (float)texture2D26.Height);
                        float rotation27 = vector36.ToRotation() + 1.57079637f;
                        float num218 = MathHelper.Distance(30f, projectile.localAI[1]) / 20f;
                        num218 = MathHelper.Clamp(num218, 0f, 1f);
                        if (num218 > 0f)
                        {
                            Game1.spriteBatch.Draw(texture2D26, vector35 + vector36 / 2f, new Microsoft.Xna.Framework.Rectangle?(rectangle10), color42 * num218, rotation27, origin6, vector37, spriteEffects, 0f);
                            Game1.spriteBatch.Draw(texture2D26, vector35 + vector36 / 2f, new Microsoft.Xna.Framework.Rectangle?(rectangle10), alpha5 * num218, rotation27, origin6, vector37 / 2f, spriteEffects, 0f);
                        }
                    }
                }
                Game1.spriteBatch.Draw(texture2D26, vector35, new Microsoft.Xna.Framework.Rectangle?(rectangle10), alpha5, projectile.rotation, origin6, projectile.scale, spriteEffects, 0f);
                if (projectile.type == 535)
                {
                    for (int num219 = 0; num219 < 1000; num219++)
                    {
                        if (Game1.projectile[num219].active && Game1.projectile[num219].owner == projectile.owner && Game1.projectile[num219].type == 536)
                        {
                            this.DrawProj(num219);
                        }
                    }
                }
                else if (projectile.type == 644)
                {
                    Game1.spriteBatch.Draw(texture2D26, vector35, new Microsoft.Xna.Framework.Rectangle?(rectangle10), alpha5, 0f, origin6, projectile.scale, spriteEffects, 0f);
                }
                else if (projectile.type == 602)
                {
                    texture2D26 = Game1.extraTexture[60];
                    Microsoft.Xna.Framework.Color color43 = alpha5;
                    color43.A = 0;
                    color43 *= 0.3f;
                    origin6 = texture2D26.Size() / 2f;
                    Game1.spriteBatch.Draw(texture2D26, vector35, null, color43, projectile.rotation - 1.57079637f, origin6, projectile.scale, spriteEffects, 0f);
                    texture2D26 = Game1.extraTexture[59];
                    color43 = alpha5;
                    color43.A = 0;
                    color43 *= 0.13f;
                    origin6 = texture2D26.Size() / 2f;
                    Game1.spriteBatch.Draw(texture2D26, vector35, null, color43, projectile.rotation - 1.57079637f, origin6, projectile.scale * 0.9f, spriteEffects, 0f);
                }
                else if (projectile.type == 539)
                {
                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[140], vector35, new Microsoft.Xna.Framework.Rectangle?(rectangle10), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), projectile.rotation, origin6, projectile.scale, spriteEffects, 0f);
                }
                else if (projectile.type == 613)
                {
                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[189], vector35, new Microsoft.Xna.Framework.Rectangle?(rectangle10), new Microsoft.Xna.Framework.Color(128 - projectile.alpha / 2, 128 - projectile.alpha / 2, 128 - projectile.alpha / 2, 0), projectile.rotation, origin6, projectile.scale, spriteEffects, 0f);
                }
                else if (projectile.type == 614)
                {
                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[190], vector35, new Microsoft.Xna.Framework.Rectangle?(rectangle10), new Microsoft.Xna.Framework.Color(128 - projectile.alpha / 2, 128 - projectile.alpha / 2, 128 - projectile.alpha / 2, 0), projectile.rotation, origin6, projectile.scale, spriteEffects, 0f);
                }
                else if (projectile.type == 574)
                {
                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[148], vector35, new Microsoft.Xna.Framework.Rectangle?(rectangle10), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), projectile.rotation, origin6, projectile.scale, spriteEffects, 0f);
                }
                else if (projectile.type == 590)
                {
                    Game1.spriteBatch.Draw(Game1.glowMaskTexture[168], vector35, new Microsoft.Xna.Framework.Rectangle?(rectangle10), new Microsoft.Xna.Framework.Color(127 - projectile.alpha / 2, 127 - projectile.alpha / 2, 127 - projectile.alpha / 2, 0), projectile.rotation, origin6, projectile.scale, spriteEffects, 0f);
                }
                else if (projectile.type == 623 || (projectile.type >= 625 && projectile.type <= 628))
                {
                    if (Game1.player[projectile.owner].ghostFade != 0f)
                    {
                        float scaleFactor4 = Game1.player[projectile.owner].ghostFade * 5f;
                        for (float num220 = 0f; num220 < 4f; num220 += 1f)
                        {
                            Game1.spriteBatch.Draw(texture2D26, vector35 + Vector2.UnitY.RotatedBy((double)(num220 * 6.28318548f / 4f), default(Vector2)) * scaleFactor4, new Microsoft.Xna.Framework.Rectangle?(rectangle10), alpha5 * 0.1f, projectile.rotation, origin6, projectile.scale, spriteEffects, 0f);
                        }
                    }
                }
                else if (projectile.type == 643)
                {
                    float scaleFactor5 = (float)Math.Cos((double)(6.28318548f * (projectile.localAI[0] / 60f))) + 3f + 3f;
                    for (float num221 = 0f; num221 < 4f; num221 += 1f)
                    {
                        Game1.spriteBatch.Draw(texture2D26, vector35 + Vector2.UnitY.RotatedBy((double)(num221 * 1.57079637f), default(Vector2)) * scaleFactor5, new Microsoft.Xna.Framework.Rectangle?(rectangle10), alpha5 * 0.2f, projectile.rotation, origin6, projectile.scale, spriteEffects, 0f);
                    }
                }
                else if (projectile.type == 650)
                {
                    int num222 = (int)(projectile.localAI[0] / 6.28318548f);
                    float f = projectile.localAI[0] % 6.28318548f - 3.14159274f;
                    float num223 = (float)Math.IEEERemainder((double)projectile.localAI[1], 1.0);
                    if (num223 < 0f)
                    {
                        num223 += 1f;
                    }
                    int num224 = (int)Math.Floor((double)projectile.localAI[1]);
                    float scaleFactor6 = 5f;
                    float scale9 = 1f + (float)num224 * 0.02f;
                    if ((float)num222 == 1f)
                    {
                        scaleFactor6 = 7f;
                    }
                    Vector2 value32 = f.ToRotationVector2() * num223 * scaleFactor6 * projectile.scale;
                    texture2D26 = Game1.extraTexture[66];
                    Game1.spriteBatch.Draw(texture2D26, vector35 + value32, null, alpha5, projectile.rotation, texture2D26.Size() / 2f, scale9, SpriteEffects.None, 0f);
                }
            }
            else if (projectile.type == 466)
            {
                Vector2 end = projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Game1.screenPosition;
                Texture2D tex3 = Game1.extraTexture[33];
                projectile.GetAlpha(color25);
                Vector2 scale10 = new Vector2(projectile.scale) / 2f;
                for (int num225 = 0; num225 < 3; num225++)
                {
                    if (num225 == 0)
                    {
                        scale10 = new Vector2(projectile.scale) * 0.6f;
                        DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(115, 204, 219, 0) * 0.5f;
                    }
                    else if (num225 == 1)
                    {
                        scale10 = new Vector2(projectile.scale) * 0.4f;
                        DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(113, 251, 255, 0) * 0.5f;
                    }
                    else
                    {
                        scale10 = new Vector2(projectile.scale) * 0.2f;
                        DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.5f;
                    }
                    DelegateMethods.f_1 = 1f;
                    for (int num226 = projectile.oldPos.Length - 1; num226 > 0; num226--)
                    {
                        if (!(projectile.oldPos[num226] == Vector2.Zero))
                        {
                            Vector2 start = projectile.oldPos[num226] + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Game1.screenPosition;
                            Vector2 end2 = projectile.oldPos[num226 - 1] + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Game1.screenPosition;
                            Utils.DrawLaser(Game1.spriteBatch, tex3, start, end2, scale10, new Utils.LaserLineFraming(DelegateMethods.LightningLaserDraw));
                        }
                    }
                    if (projectile.oldPos[0] != Vector2.Zero)
                    {
                        DelegateMethods.f_1 = 1f;
                        Vector2 start2 = projectile.oldPos[0] + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Game1.screenPosition;
                        Utils.DrawLaser(Game1.spriteBatch, tex3, start2, end, scale10, new Utils.LaserLineFraming(DelegateMethods.LightningLaserDraw));
                    }
                }
            }
            else if (projectile.type == 580)
            {
                Vector2 end3 = projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Game1.screenPosition;
                Texture2D tex4 = Game1.extraTexture[33];
                projectile.GetAlpha(color25);
                Vector2 scale11 = new Vector2(projectile.scale) / 2f;
                for (int num227 = 0; num227 < 2; num227++)
                {
                    float num228 = (projectile.localAI[1] == -1f || projectile.localAI[1] == 1f) ? -0.2f : 0f;
                    if (num227 == 0)
                    {
                        scale11 = new Vector2(projectile.scale) * (0.5f + num228);
                        DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(115, 244, 219, 0) * 0.5f;
                    }
                    else
                    {
                        scale11 = new Vector2(projectile.scale) * (0.3f + num228);
                        DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.5f;
                    }
                    DelegateMethods.f_1 = 1f;
                    for (int num229 = projectile.oldPos.Length - 1; num229 > 0; num229--)
                    {
                        if (!(projectile.oldPos[num229] == Vector2.Zero))
                        {
                            Vector2 start3 = projectile.oldPos[num229] + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Game1.screenPosition;
                            Vector2 end4 = projectile.oldPos[num229 - 1] + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Game1.screenPosition;
                            Utils.DrawLaser(Game1.spriteBatch, tex4, start3, end4, scale11, new Utils.LaserLineFraming(DelegateMethods.LightningLaserDraw));
                        }
                    }
                    if (projectile.oldPos[0] != Vector2.Zero)
                    {
                        DelegateMethods.f_1 = 1f;
                        Vector2 start4 = projectile.oldPos[0] + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Game1.screenPosition;
                        Utils.DrawLaser(Game1.spriteBatch, tex4, start4, end3, scale11, new Utils.LaserLineFraming(DelegateMethods.LightningLaserDraw));
                    }
                }
            }
            else if (projectile.type == 445)
            {
                Vector2 vector38 = projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Game1.screenPosition;
                Texture2D texture2D27 = Game1.projectileTexture[projectile.type];
                Microsoft.Xna.Framework.Color alpha6 = projectile.GetAlpha(color25);
                Vector2 vector39 = Game1.player[projectile.owner].RotatedRelativePoint(mountedCenter, true) + Vector2.UnitY * Game1.player[projectile.owner].gfxOffY;
                Vector2 vector40 = vector38 + Game1.screenPosition - vector39;
                Vector2 value33 = Vector2.Normalize(vector40);
                float num230 = vector40.Length();
                float num231 = vector40.ToRotation() + 1.57079637f;
                float num232 = -5f;
                float num233 = num232 + 30f;
                new Vector2(2f, num230 - num233);
                Vector2 value34 = Vector2.Lerp(vector38 + Game1.screenPosition, vector39 + value33 * num233, 0.5f);
                Vector2 vector41 = -Vector2.UnitY.RotatedBy((double)(projectile.localAI[0] / 60f * 3.14159274f), default(Vector2));
                Vector2[] array7 = new Vector2[]
                {
                    vector41,
                    vector41.RotatedBy(1.5707963705062866, default(Vector2)),
                    vector41.RotatedBy(3.1415927410125732, default(Vector2)),
                    vector41.RotatedBy(4.71238911151886, default(Vector2))
                };
                if (num230 > num233)
                {
                    for (int num234 = 0; num234 < 2; num234++)
                    {
                        Microsoft.Xna.Framework.Color color44 = Microsoft.Xna.Framework.Color.White;
                        if (num234 % 2 == 0)
                        {
                            color44 = Microsoft.Xna.Framework.Color.LimeGreen;
                            color44.A = 128;
                            color44 *= 0.5f;
                        }
                        else
                        {
                            color44 = Microsoft.Xna.Framework.Color.CornflowerBlue;
                            color44.A = 128;
                            color44 *= 0.5f;
                        }
                        Vector2 value35 = new Vector2(array7[num234].X, 0f).RotatedBy((double)num231, default(Vector2)) * 4f;
                        Game1.spriteBatch.Draw(Game1.magicPixel, value34 - Game1.screenPosition + value35, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), color44, num231, Vector2.One / 2f, new Vector2(2f, num230 - num233), spriteEffects, 0f);
                    }
                }
                Texture2D texture2D28 = Game1.itemTexture[Game1.player[projectile.owner].inventory[Game1.player[projectile.owner].selectedItem].itemId];
                Microsoft.Xna.Framework.Color color45 = Lighting.GetColor((int)vector39.X / 16, (int)vector39.Y / 16);
                Game1.spriteBatch.Draw(texture2D28, vector39 - Game1.screenPosition + value33 * num232, null, color45, projectile.rotation + 1.57079637f + ((spriteEffects == SpriteEffects.None) ? 3.14159274f : 0f), new Vector2((float)((spriteEffects == SpriteEffects.None) ? 0 : texture2D28.Width), (float)texture2D28.Height / 2f) + Vector2.UnitY * 1f, Game1.player[projectile.owner].inventory[Game1.player[projectile.owner].selectedItem].scale, spriteEffects, 0f);
                Game1.spriteBatch.Draw(Game1.glowMaskTexture[39], vector39 - Game1.screenPosition + value33 * num232, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), projectile.rotation + 1.57079637f + ((spriteEffects == SpriteEffects.None) ? 3.14159274f : 0f), new Vector2((float)((spriteEffects == SpriteEffects.None) ? 0 : texture2D28.Width), (float)texture2D28.Height / 2f) + Vector2.UnitY * 1f, Game1.player[projectile.owner].inventory[Game1.player[projectile.owner].selectedItem].scale, spriteEffects, 0f);
                if (num230 > num233)
                {
                    for (int num235 = 2; num235 < 4; num235++)
                    {
                        Microsoft.Xna.Framework.Color color46 = Microsoft.Xna.Framework.Color.White;
                        if (num235 % 2 == 0)
                        {
                            color46 = Microsoft.Xna.Framework.Color.LimeGreen;
                            color46.A = 128;
                            color46 *= 0.5f;
                        }
                        else
                        {
                            color46 = Microsoft.Xna.Framework.Color.CornflowerBlue;
                            color46.A = 128;
                            color46 *= 0.5f;
                        }
                        Vector2 value36 = new Vector2(array7[num235].X, 0f).RotatedBy((double)num231, default(Vector2)) * 4f;
                        Game1.spriteBatch.Draw(Game1.magicPixel, value34 - Game1.screenPosition + value36, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), color46, num231, Vector2.One / 2f, new Vector2(2f, num230 - num233), spriteEffects, 0f);
                    }
                }
                float num236 = projectile.localAI[0] / 60f;
                if (num236 > 0.5f)
                {
                    num236 = 1f - num236;
                }
                Game1.spriteBatch.Draw(texture2D27, vector38, null, alpha6 * num236 * 2f, projectile.rotation, new Vector2((float)texture2D27.Width, (float)texture2D27.Height) / 2f, projectile.scale, spriteEffects, 0f);
                Game1.spriteBatch.Draw(Game1.glowMaskTexture[40], vector38, null, alpha6 * (0.5f - num236) * 2f, projectile.rotation, new Vector2((float)texture2D27.Width, (float)texture2D27.Height) / 2f, projectile.scale, spriteEffects, 0f);
            }
            else if ((projectile.type >= 393 && projectile.type <= 395) || projectile.type == 398 || projectile.type == 423 || projectile.type == 450)
            {
                Texture2D texture2D29 = Game1.projectileTexture[projectile.type];
                int num237 = Game1.projectileTexture[projectile.type].Height / Game1.projFrames[projectile.type];
                int y11 = num237 * projectile.frame;
                Game1.spriteBatch.Draw(texture2D29, projectile.Center - Game1.screenPosition + new Vector2(0f, projectile.gfxOffY - 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y11, texture2D29.Width, num237)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D29.Width / 2f, (float)num237 / 2f), projectile.scale, spriteEffects, 0f);
                if (projectile.type == 398)
                {
                    texture2D29 = Game1.miniMinotaurTexture;
                    Game1.spriteBatch.Draw(texture2D29, projectile.Center - Game1.screenPosition + new Vector2(0f, projectile.gfxOffY - 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y11, texture2D29.Width, num237)), new Microsoft.Xna.Framework.Color(250, 250, 250, projectile.alpha), projectile.rotation, new Vector2((float)texture2D29.Width / 2f, (float)num237 / 2f), projectile.scale, spriteEffects, 0f);
                }
                if (projectile.type == 423)
                {
                    texture2D29 = Game1.glowMaskTexture[0];
                    Game1.spriteBatch.Draw(texture2D29, projectile.Center - Game1.screenPosition + new Vector2(0f, projectile.gfxOffY - 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y11, texture2D29.Width, num237)), new Microsoft.Xna.Framework.Color(250, 250, 250, projectile.alpha), projectile.rotation, new Vector2((float)texture2D29.Width / 2f, (float)num237 / 2f), projectile.scale, spriteEffects, 0f);
                }
            }
            else if (projectile.type == 385)
            {
                Texture2D texture2D30 = Game1.projectileTexture[projectile.type];
                int num238 = texture2D30.Height / Game1.projFrames[projectile.type];
                int y12 = num238 * projectile.frame;
                int num239 = 8;
                int num240 = 2;
                float value37 = 0.4f;
                for (int num241 = 1; num241 < num239; num241 += num240)
                {
                    Vector2 arg_BD7A_0 = projectile.oldPos[num241];
                    Microsoft.Xna.Framework.Color color47 = color25;
                    color47 = projectile.GetAlpha(color47);
                    color47 *= (float)(num239 - num241) / 15f;
                    Microsoft.Xna.Framework.Color alpha7 = projectile.GetAlpha(color25);
                    Game1.spriteBatch.Draw(texture2D30, projectile.oldPos[num241] + new Vector2((float)projectile.width, (float)projectile.height) / 2f - Game1.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y12, texture2D30.Width, num238)), Microsoft.Xna.Framework.Color.Lerp(alpha7, color47, 0.3f), projectile.rotation, new Vector2((float)texture2D30.Width / 2f, (float)num238 / 2f), MathHelper.Lerp(projectile.scale, value37, (float)num241 / 15f), spriteEffects, 0f);
                }
                Game1.spriteBatch.Draw(texture2D30, projectile.Center - Game1.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y12, texture2D30.Width, num238)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D30.Width / 2f, (float)num238 / 2f), projectile.scale, spriteEffects, 0f);
            }
            else if (projectile.type == 388)
            {
                Texture2D texture2D31 = Game1.projectileTexture[projectile.type];
                int num242 = texture2D31.Height / Game1.projFrames[projectile.type];
                int y13 = num242 * projectile.frame;
                int num243;
                int num244;
                if (projectile.ai[0] == 2f)
                {
                    num243 = 10;
                    num244 = 1;
                }
                else
                {
                    num244 = 2;
                    num243 = 5;
                }
                for (int num245 = 1; num245 < num243; num245 += num244)
                {
                    Vector2 arg_C023_0 = Game1.npc[i].oldPos[num245];
                    Microsoft.Xna.Framework.Color color48 = color25;
                    color48 = projectile.GetAlpha(color48);
                    color48 *= (float)(num243 - num245) / 15f;
                    Vector2 position7 = projectile.oldPos[num245] - Game1.screenPosition + new Vector2(num150 + (float)num149, (float)(projectile.height / 2) + projectile.gfxOffY);
                    Game1.spriteBatch.Draw(texture2D31, position7, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y13, texture2D31.Width, num242)), color48, projectile.rotation, new Vector2(num150, (float)(projectile.height / 2 + num148)), projectile.scale, spriteEffects, 0f);
                }
                Game1.spriteBatch.Draw(texture2D31, projectile.position - Game1.screenPosition + new Vector2(num150 + (float)num149, (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y13, texture2D31.Width, num242)), projectile.GetAlpha(color25), projectile.rotation, new Vector2(num150, (float)(projectile.height / 2 + num148)), projectile.scale, spriteEffects, 0f);
            }
            else if (Game1.projFrames[projectile.type] > 1)
            {
                int num246 = Game1.projectileTexture[projectile.type].Height / Game1.projFrames[projectile.type];
                int y14 = num246 * projectile.frame;
                if (projectile.type == 111)
                {
                    int r = (int)Game1.player[projectile.owner].shirtColor.R;
                    int g = (int)Game1.player[projectile.owner].shirtColor.G;
                    int b = (int)Game1.player[projectile.owner].shirtColor.B;
                    Microsoft.Xna.Framework.Color oldColor = new Microsoft.Xna.Framework.Color((int)((byte)r), (int)((byte)g), (int)((byte)b));
                    color25 = Lighting.GetColor((int)((double)projectile.position.X + (double)projectile.width * 0.5) / 16, (int)(((double)projectile.position.Y + (double)projectile.height * 0.5) / 16.0), oldColor);
                    Game1.spriteBatch.Draw(Game1.projectileTexture[projectile.type], new Vector2(projectile.position.X - Game1.screenPosition.X + num150 + (float)num149, projectile.position.Y - Game1.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y14, Game1.projectileTexture[projectile.type].Width, num246)), projectile.GetAlpha(color25), projectile.rotation, new Vector2(num150, (float)(projectile.height / 2 + num148)), projectile.scale, spriteEffects, 0f);
                }
                else
                {
                    Game1.spriteBatch.Draw(Game1.projectileTexture[projectile.type], new Vector2(projectile.position.X - Game1.screenPosition.X + num150 + (float)num149, projectile.position.Y - Game1.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y14, Game1.projectileTexture[projectile.type].Width, num246 - 1)), projectile.GetAlpha(color25), projectile.rotation, new Vector2(num150, (float)(projectile.height / 2 + num148)), projectile.scale, spriteEffects, 0f);
                    if (projectile.type == 387)
                    {
                        Game1.spriteBatch.Draw(Game1.eyeLaserSmallTexture, new Vector2(projectile.position.X - Game1.screenPosition.X + num150 + (float)num149, projectile.position.Y - Game1.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y14, Game1.projectileTexture[projectile.type].Width, num246)), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), projectile.rotation, new Vector2(num150, (float)(projectile.height / 2 + num148)), projectile.scale, spriteEffects, 0f);
                    }
                }
            }
            else if (projectile.type == 383 || projectile.type == 399)
            {
                Texture2D texture2D32 = Game1.projectileTexture[projectile.type];
                Game1.spriteBatch.Draw(texture2D32, projectile.Center - Game1.screenPosition, null, projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D32.Width, (float)texture2D32.Height) / 2f, projectile.scale, spriteEffects, 0f);
            }
            else if (projectile.type == 157 || projectile.type == 378)
            {
                Game1.spriteBatch.Draw(Game1.projectileTexture[projectile.type], new Vector2(projectile.position.X - Game1.screenPosition.X + (float)(projectile.width / 2), projectile.position.Y - Game1.screenPosition.Y + (float)(projectile.height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.projectileTexture[projectile.type].Width, Game1.projectileTexture[projectile.type].Height)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)(Game1.projectileTexture[projectile.type].Width / 2), (float)(Game1.projectileTexture[projectile.type].Height / 2)), projectile.scale, spriteEffects, 0f);
            }
            else if (projectile.type == 306)
            {
                Game1.spriteBatch.Draw(Game1.projectileTexture[projectile.type], new Vector2(projectile.position.X - Game1.screenPosition.X + (float)(projectile.width / 2), projectile.position.Y - Game1.screenPosition.Y + (float)(projectile.height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.projectileTexture[projectile.type].Width, Game1.projectileTexture[projectile.type].Height)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)(Game1.projectileTexture[projectile.type].Width / 2), (float)(Game1.projectileTexture[projectile.type].Height / 2)), projectile.scale, spriteEffects, 0f);
            }
            else if (projectile.type == 256)
            {
                Game1.spriteBatch.Draw(Game1.projectileTexture[projectile.type], new Vector2(projectile.position.X - Game1.screenPosition.X + (float)(projectile.width / 2), projectile.position.Y - Game1.screenPosition.Y + (float)(projectile.height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.projectileTexture[projectile.type].Width, Game1.projectileTexture[projectile.type].Height)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)(Game1.projectileTexture[projectile.type].Width / 2), (float)(Game1.projectileTexture[projectile.type].Height / 2)), projectile.scale, spriteEffects, 0f);
            }
            else if (projectile.aiStyle == 27)
            {
                Game1.spriteBatch.Draw(Game1.projectileTexture[projectile.type], new Vector2(projectile.position.X - Game1.screenPosition.X + (float)(projectile.width / 2), projectile.position.Y - Game1.screenPosition.Y + (float)(projectile.height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.projectileTexture[projectile.type].Width, Game1.projectileTexture[projectile.type].Height)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)Game1.projectileTexture[projectile.type].Width, 0f), projectile.scale, spriteEffects, 0f);
            }
            else if (projectile.aiStyle == 19)
            {
                Vector2 zero = Vector2.Zero;
                if (projectile.spriteDirection == -1)
                {
                    zero.X = (float)Game1.projectileTexture[projectile.type].Width;
                }
                Game1.spriteBatch.Draw(Game1.projectileTexture[projectile.type], new Vector2(projectile.position.X - Game1.screenPosition.X + (float)(projectile.width / 2), projectile.position.Y - Game1.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.projectileTexture[projectile.type].Width, Game1.projectileTexture[projectile.type].Height)), projectile.GetAlpha(color25), projectile.rotation, zero, projectile.scale, spriteEffects, 0f);
            }
            else if (projectile.type == 451)
            {
                Game1.spriteBatch.Draw(Game1.projectileTexture[projectile.type], projectile.Center - Game1.screenPosition, null, projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)Game1.projectileTexture[projectile.type].Width, 0f), projectile.scale, spriteEffects, 0f);
            }
            else if (projectile.type == 434)
            {
                Vector2 value38 = new Vector2(projectile.ai[0], projectile.ai[1]);
                Vector2 v = projectile.position - value38;
                float num247 = (float)Math.Sqrt((double)(v.X * v.X + v.Y * v.Y));
                new Vector2(4f, num247);
                float rotation28 = v.ToRotation() + 1.57079637f;
                Vector2 value39 = Vector2.Lerp(projectile.position, value38, 0.5f);
                Microsoft.Xna.Framework.Color color49 = Microsoft.Xna.Framework.Color.Red;
                color49.A = 0;
                Microsoft.Xna.Framework.Color color50 = Microsoft.Xna.Framework.Color.White;
                color49 *= projectile.localAI[0];
                color50 *= projectile.localAI[0];
                float num248 = (float)Math.Sqrt((double)(projectile.damage / 50));
                Game1.spriteBatch.Draw(Game1.magicPixel, value39 - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), color49, rotation28, Vector2.One / 2f, new Vector2(2f * num248, num247 + 8f), spriteEffects, 0f);
                Game1.spriteBatch.Draw(Game1.magicPixel, value39 - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), color49, rotation28, Vector2.One / 2f, new Vector2(4f * num248, num247), spriteEffects, 0f);
                Game1.spriteBatch.Draw(Game1.magicPixel, value39 - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), color50, rotation28, Vector2.One / 2f, new Vector2(2f * num248, num247), spriteEffects, 0f);
            }
            else
            {
                if (projectile.type == 94 && projectile.ai[1] > 6f)
                {
                    for (int num249 = 0; num249 < 10; num249++)
                    {
                        Microsoft.Xna.Framework.Color alpha8 = projectile.GetAlpha(color25);
                        float num250 = (float)(9 - num249) / 9f;
                        alpha8.R = (byte)((float)alpha8.R * num250);
                        alpha8.G = (byte)((float)alpha8.G * num250);
                        alpha8.B = (byte)((float)alpha8.B * num250);
                        alpha8.A = (byte)((float)alpha8.A * num250);
                        float num251 = (float)(9 - num249) / 9f;
                        Game1.spriteBatch.Draw(Game1.projectileTexture[projectile.type], new Vector2(projectile.oldPos[num249].X - Game1.screenPosition.X + num150 + (float)num149, projectile.oldPos[num249].Y - Game1.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.projectileTexture[projectile.type].Width, Game1.projectileTexture[projectile.type].Height)), alpha8, projectile.rotation, new Vector2(num150, (float)(projectile.height / 2 + num148)), num251 * projectile.scale, spriteEffects, 0f);
                    }
                }
                if (projectile.type == 301)
                {
                    for (int num252 = 0; num252 < 10; num252++)
                    {
                        Microsoft.Xna.Framework.Color alpha9 = projectile.GetAlpha(color25);
                        float num253 = (float)(9 - num252) / 9f;
                        alpha9.R = (byte)((float)alpha9.R * num253);
                        alpha9.G = (byte)((float)alpha9.G * num253);
                        alpha9.B = (byte)((float)alpha9.B * num253);
                        alpha9.A = (byte)((float)alpha9.A * num253);
                        float num254 = (float)(9 - num252) / 9f;
                        Game1.spriteBatch.Draw(Game1.projectileTexture[projectile.type], new Vector2(projectile.oldPos[num252].X - Game1.screenPosition.X + num150 + (float)num149, projectile.oldPos[num252].Y - Game1.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.projectileTexture[projectile.type].Width, Game1.projectileTexture[projectile.type].Height)), alpha9, projectile.rotation, new Vector2(num150, (float)(projectile.height / 2 + num148)), num254 * projectile.scale, spriteEffects, 0f);
                    }
                }
                if (projectile.type == 323 && projectile.alpha == 0)
                {
                    for (int num255 = 1; num255 < 8; num255++)
                    {
                        float num256 = projectile.velocity.X * (float)num255;
                        float num257 = projectile.velocity.Y * (float)num255;
                        Microsoft.Xna.Framework.Color alpha10 = projectile.GetAlpha(color25);
                        float num258 = 0f;
                        if (num255 == 1)
                        {
                            num258 = 0.7f;
                        }
                        if (num255 == 2)
                        {
                            num258 = 0.6f;
                        }
                        if (num255 == 3)
                        {
                            num258 = 0.5f;
                        }
                        if (num255 == 4)
                        {
                            num258 = 0.4f;
                        }
                        if (num255 == 5)
                        {
                            num258 = 0.3f;
                        }
                        if (num255 == 6)
                        {
                            num258 = 0.2f;
                        }
                        if (num255 == 7)
                        {
                            num258 = 0.1f;
                        }
                        alpha10.R = (byte)((float)alpha10.R * num258);
                        alpha10.G = (byte)((float)alpha10.G * num258);
                        alpha10.B = (byte)((float)alpha10.B * num258);
                        alpha10.A = (byte)((float)alpha10.A * num258);
                        Game1.spriteBatch.Draw(Game1.projectileTexture[projectile.type], new Vector2(projectile.position.X - Game1.screenPosition.X + num150 + (float)num149 - num256, projectile.position.Y - Game1.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num257), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.projectileTexture[projectile.type].Width, Game1.projectileTexture[projectile.type].Height)), alpha10, projectile.rotation, new Vector2(num150, (float)(projectile.height / 2 + num148)), num258 + 0.2f, spriteEffects, 0f);
                    }
                }
                if (projectile.type == 117 && projectile.ai[0] > 3f)
                {
                    for (int num259 = 1; num259 < 5; num259++)
                    {
                        float num260 = projectile.velocity.X * (float)num259;
                        float num261 = projectile.velocity.Y * (float)num259;
                        Microsoft.Xna.Framework.Color alpha11 = projectile.GetAlpha(color25);
                        float num262 = 0f;
                        if (num259 == 1)
                        {
                            num262 = 0.4f;
                        }
                        if (num259 == 2)
                        {
                            num262 = 0.3f;
                        }
                        if (num259 == 3)
                        {
                            num262 = 0.2f;
                        }
                        if (num259 == 4)
                        {
                            num262 = 0.1f;
                        }
                        alpha11.R = (byte)((float)alpha11.R * num262);
                        alpha11.G = (byte)((float)alpha11.G * num262);
                        alpha11.B = (byte)((float)alpha11.B * num262);
                        alpha11.A = (byte)((float)alpha11.A * num262);
                        Game1.spriteBatch.Draw(Game1.projectileTexture[projectile.type], new Vector2(projectile.position.X - Game1.screenPosition.X + num150 + (float)num149 - num260, projectile.position.Y - Game1.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num261), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.projectileTexture[projectile.type].Width, Game1.projectileTexture[projectile.type].Height)), alpha11, projectile.rotation, new Vector2(num150, (float)(projectile.height / 2 + num148)), projectile.scale, spriteEffects, 0f);
                    }
                }
                if (projectile.bobber)
                {
                    if (projectile.ai[1] > 0f && projectile.ai[1] < 3601f && projectile.ai[0] == 1f)
                    {
                        int num263 = (int)projectile.ai[1];
                        Vector2 center = projectile.Center;
                        float num264 = projectile.rotation;
                        Vector2 vector42 = center;
                        float num265 = num - vector42.X;
                        float num266 = num2 - vector42.Y;
                        num264 = (float)Math.Atan2((double)num266, (double)num265);
                        if (projectile.velocity.X > 0f)
                        {
                            spriteEffects = SpriteEffects.None;
                            num264 = (float)Math.Atan2((double)num266, (double)num265);
                            num264 += 0.785f;
                            if (projectile.ai[1] == 2342f)
                            {
                                num264 -= 0.785f;
                            }
                        }
                        else
                        {
                            spriteEffects = SpriteEffects.FlipHorizontally;
                            num264 = (float)Math.Atan2((double)(-(double)num266), (double)(-(double)num265));
                            num264 -= 0.785f;
                            if (projectile.ai[1] == 2342f)
                            {
                                num264 += 0.785f;
                            }
                        }
                        Game1.spriteBatch.Draw(Game1.itemTexture[num263], new Vector2(center.X - Game1.screenPosition.X, center.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.itemTexture[num263].Width, Game1.itemTexture[num263].Height)), color25, num264, new Vector2((float)(Game1.itemTexture[num263].Width / 2), (float)(Game1.itemTexture[num263].Height / 2)), projectile.scale, spriteEffects, 0f);
                    }
                    else if (projectile.ai[0] <= 1f)
                    {
                        Game1.spriteBatch.Draw(Game1.projectileTexture[projectile.type], new Vector2(projectile.position.X - Game1.screenPosition.X + num150 + (float)num149, projectile.position.Y - Game1.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.projectileTexture[projectile.type].Width, Game1.projectileTexture[projectile.type].Height)), projectile.GetAlpha(color25), projectile.rotation, new Vector2(num150, (float)(projectile.height / 2 + num148)), projectile.scale, spriteEffects, 0f);
                    }
                }
                else
                {
                    Game1.spriteBatch.Draw(Game1.projectileTexture[projectile.type], new Vector2(projectile.position.X - Game1.screenPosition.X + num150 + (float)num149, projectile.position.Y - Game1.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.projectileTexture[projectile.type].Width, Game1.projectileTexture[projectile.type].Height)), projectile.GetAlpha(color25), projectile.rotation, new Vector2(num150, (float)(projectile.height / 2 + num148)), projectile.scale, spriteEffects, 0f);
                    if (projectile.glowMask != -1)
                    {
                        Game1.spriteBatch.Draw(Game1.glowMaskTexture[(int)projectile.glowMask], new Vector2(projectile.position.X - Game1.screenPosition.X + num150 + (float)num149, projectile.position.Y - Game1.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.projectileTexture[projectile.type].Width, Game1.projectileTexture[projectile.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, projectile.alpha), projectile.rotation, new Vector2(num150, (float)(projectile.height / 2 + num148)), projectile.scale, spriteEffects, 0f);
                    }
                    if (projectile.type == 473)
                    {
                        Game1.spriteBatch.Draw(Game1.projectileTexture[projectile.type], new Vector2(projectile.position.X - Game1.screenPosition.X + num150 + (float)num149, projectile.position.Y - Game1.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.projectileTexture[projectile.type].Width, Game1.projectileTexture[projectile.type].Height)), new Microsoft.Xna.Framework.Color(255, 255, 0, 0), projectile.rotation, new Vector2(num150, (float)(projectile.height / 2 + num148)), projectile.scale, spriteEffects, 0f);
                    }
                }
                if (projectile.type == 106)
                {
                    Game1.spriteBatch.Draw(Game1.lightDiscTexture, new Vector2(projectile.position.X - Game1.screenPosition.X + num150 + (float)num149, projectile.position.Y - Game1.screenPosition.Y + (float)(projectile.height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.projectileTexture[projectile.type].Width, Game1.projectileTexture[projectile.type].Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), projectile.rotation, new Vector2(num150, (float)(projectile.height / 2 + num148)), projectile.scale, spriteEffects, 0f);
                }
                if (projectile.type == 554 || projectile.type == 603)
                {
                    for (int num267 = 1; num267 < 5; num267++)
                    {
                        float num268 = projectile.velocity.X * (float)num267 * 0.5f;
                        float num269 = projectile.velocity.Y * (float)num267 * 0.5f;
                        Microsoft.Xna.Framework.Color alpha12 = projectile.GetAlpha(color25);
                        float num270 = 0f;
                        if (num267 == 1)
                        {
                            num270 = 0.4f;
                        }
                        if (num267 == 2)
                        {
                            num270 = 0.3f;
                        }
                        if (num267 == 3)
                        {
                            num270 = 0.2f;
                        }
                        if (num267 == 4)
                        {
                            num270 = 0.1f;
                        }
                        alpha12.R = (byte)((float)alpha12.R * num270);
                        alpha12.G = (byte)((float)alpha12.G * num270);
                        alpha12.B = (byte)((float)alpha12.B * num270);
                        alpha12.A = (byte)((float)alpha12.A * num270);
                        Game1.spriteBatch.Draw(Game1.projectileTexture[projectile.type], new Vector2(projectile.position.X - Game1.screenPosition.X + num150 + (float)num149 - num268, projectile.position.Y - Game1.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num269), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.projectileTexture[projectile.type].Width, Game1.projectileTexture[projectile.type].Height)), alpha12, projectile.rotation, new Vector2(num150, (float)(projectile.height / 2 + num148)), projectile.scale, spriteEffects, 0f);
                    }
                }
                else if (projectile.type == 604)
                {
                    int num271 = (int)projectile.ai[1] + 1;
                    if (num271 > 7)
                    {
                        num271 = 7;
                    }
                    for (int num272 = 1; num272 < num271; num272++)
                    {
                        float num273 = projectile.velocity.X * (float)num272 * 1.5f;
                        float num274 = projectile.velocity.Y * (float)num272 * 1.5f;
                        Microsoft.Xna.Framework.Color alpha13 = projectile.GetAlpha(color25);
                        if (num272 == 1)
                        {
                        }
                        if (num272 == 2)
                        {
                        }
                        if (num272 == 3)
                        {
                        }
                        if (num272 == 4)
                        {
                        }
                        float num275 = 0.4f - (float)num272 * 0.06f;
                        num275 *= 1f - (float)projectile.alpha / 255f;
                        alpha13.R = (byte)((float)alpha13.R * num275);
                        alpha13.G = (byte)((float)alpha13.G * num275);
                        alpha13.B = (byte)((float)alpha13.B * num275);
                        alpha13.A = (byte)((float)alpha13.A * num275 / 2f);
                        float num276 = projectile.scale;
                        num276 -= (float)num272 * 0.1f;
                        Game1.spriteBatch.Draw(Game1.projectileTexture[projectile.type], new Vector2(projectile.position.X - Game1.screenPosition.X + num150 + (float)num149 - num273, projectile.position.Y - Game1.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num274), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.projectileTexture[projectile.type].Width, Game1.projectileTexture[projectile.type].Height)), alpha13, projectile.rotation, new Vector2(num150, (float)(projectile.height / 2 + num148)), num276, spriteEffects, 0f);
                    }
                }
                else if (projectile.type == 553)
                {
                    for (int num277 = 1; num277 < 5; num277++)
                    {
                        float num278 = projectile.velocity.X * (float)num277 * 0.4f;
                        float num279 = projectile.velocity.Y * (float)num277 * 0.4f;
                        Microsoft.Xna.Framework.Color alpha14 = projectile.GetAlpha(color25);
                        float num280 = 0f;
                        if (num277 == 1)
                        {
                            num280 = 0.4f;
                        }
                        if (num277 == 2)
                        {
                            num280 = 0.3f;
                        }
                        if (num277 == 3)
                        {
                            num280 = 0.2f;
                        }
                        if (num277 == 4)
                        {
                            num280 = 0.1f;
                        }
                        alpha14.R = (byte)((float)alpha14.R * num280);
                        alpha14.G = (byte)((float)alpha14.G * num280);
                        alpha14.B = (byte)((float)alpha14.B * num280);
                        alpha14.A = (byte)((float)alpha14.A * num280);
                        Game1.spriteBatch.Draw(Game1.projectileTexture[projectile.type], new Vector2(projectile.position.X - Game1.screenPosition.X + num150 + (float)num149 - num278, projectile.position.Y - Game1.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num279), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.projectileTexture[projectile.type].Width, Game1.projectileTexture[projectile.type].Height)), alpha14, projectile.rotation, new Vector2(num150, (float)(projectile.height / 2 + num148)), projectile.scale, spriteEffects, 0f);
                    }
                }
            }
            if (projectile.type == 525)
            {
                Vector2 vector43 = projectile.position - Game1.screenPosition;
                if ((float)Game1.mouseX > vector43.X && (float)Game1.mouseX < vector43.X + (float)projectile.width && (float)Game1.mouseY > vector43.Y && (float)Game1.mouseY < vector43.Y + (float)projectile.height)
                {
                    int num281 = (int)(Game1.player[Game1.myPlayer].Center.X / 16f);
                    int num282 = (int)(Game1.player[Game1.myPlayer].Center.Y / 16f);
                    int num283 = (int)projectile.Center.X / 16;
                    int num284 = (int)projectile.Center.Y / 16;
                    int lastTileRangeX = Game1.player[Game1.myPlayer].lastTileRangeX;
                    int lastTileRangeY = Game1.player[Game1.myPlayer].lastTileRangeY;
                    if (num281 >= num283 - lastTileRangeX && num281 <= num283 + lastTileRangeX + 1 && num282 >= num284 - lastTileRangeY && num282 <= num284 + lastTileRangeY + 1)
                    {
                        Game1.player[Game1.myPlayer].noThrow = 2;
                        Game1.player[Game1.myPlayer].showItemIcon = true;
                        Game1.player[Game1.myPlayer].showItemIcon2 = 3213;
                        if (Game1.mouseRight && Game1.mouseRightRelease)
                        {
                            Game1.mouseRightRelease = false;
                            if (Game1.player[Game1.myPlayer].chest == -2)
                            {
                                Game1.PlaySound(2, -1, -1, 59);
                                Game1.player[Game1.myPlayer].chest = -1;
                                Recipe.FindRecipes();
                                return;
                            }
                            Game1.player[Game1.myPlayer].flyingPigChest = i;
                            Game1.player[Game1.myPlayer].chest = -2;
                            Game1.player[Game1.myPlayer].chestX = (int)(projectile.Center.X / 16f);
                            Game1.player[Game1.myPlayer].chestY = (int)(projectile.Center.Y / 16f);
                            Game1.playerInventory = true;
                            Game1.PlaySound(2, -1, -1, 59);
                            Recipe.FindRecipes();
                        }
                    }
                }
            }
        }

        private static Microsoft.Xna.Framework.Color buffColor(Microsoft.Xna.Framework.Color newColor, float R, float G, float B, float A)
        {
            newColor.R = (byte)((float)newColor.R * R);
            newColor.G = (byte)((float)newColor.G * G);
            newColor.B = (byte)((float)newColor.B * B);
            newColor.A = (byte)((float)newColor.A * A);
            return newColor;
        }

        protected void CacheNPCDraws()
        {
            this.DrawCacheNPCsMoonMoon.Clear();
            this.DrawCacheNPCsOverPlayers.Clear();
            this.DrawCacheNPCProjectiles.Clear();
            for (int i = 0; i < 200; i++)
            {
                if (Game1.npc[i].active)
                {
                    if (Game1.npc[i].type == 398 && Game1.npc[i].ai[0] >= 0f)
                    {
                        int num = i;
                        int num2 = -1;
                        int num3 = -1;
                        int num4 = -1;
                        for (int j = 0; j < 200; j++)
                        {
                            if (Game1.npc[j].active && Game1.npc[j].ai[3] == (float)num)
                            {
                                if (num2 == -1 && Game1.npc[j].type == 397 && Game1.npc[j].ai[2] == 0f)
                                {
                                    num2 = j;
                                }
                                if (num3 == -1 && Game1.npc[j].type == 397 && Game1.npc[j].ai[2] == 1f)
                                {
                                    num3 = j;
                                }
                                if (num4 == -1 && Game1.npc[j].type == 396)
                                {
                                    num4 = j;
                                }
                                if (num2 != -1 && num3 != -1 && num4 != -1)
                                {
                                    break;
                                }
                            }
                        }
                        if (num2 != -1 && num3 != -1 && num4 != -1)
                        {
                            this.DrawCacheNPCsMoonMoon.Add(num);
                            if (num2 != -1)
                            {
                                this.DrawCacheNPCsMoonMoon.Add(num2);
                            }
                            if (num3 != -1)
                            {
                                this.DrawCacheNPCsMoonMoon.Add(num3);
                            }
                            if (num4 != -1)
                            {
                                this.DrawCacheNPCsMoonMoon.Add(num4);
                            }
                        }
                    }
                    else if (Game1.npc[i].type == 421 && Game1.npc[i].ai[0] == 5f)
                    {
                        this.DrawCacheNPCsOverPlayers.Add(i);
                    }
                    else if (Game1.npc[i].type == 516 || Game1.npc[i].type == 519)
                    {
                        this.DrawCacheNPCProjectiles.Add(i);
                    }
                }
            }
        }

        protected void CacheProjDraws()
        {
            this.DrawCacheProjsBackground.Clear();
            this.DrawCacheProjsWorms.Clear();
            for (int i = 0; i < 1000; i++)
            {
                if (Game1.projectile[i].active)
                {
                    if (Game1.projectile[i].type == 578 || Game1.projectile[i].type == 579 || Game1.projectile[i].type == 641 || Game1.projectile[i].type == 598 || Game1.projectile[i].type == 617 || Game1.projectile[i].type == 636)
                    {
                        this.DrawCacheProjsBackground.Add(i);
                    }
                    if (Game1.projectile[i].type == 625 || Game1.projectile[i].type == 626 || Game1.projectile[i].type == 627 || Game1.projectile[i].type == 628)
                    {
                        this.DrawCacheProjsWorms.Add(i);
                    }
                }
            }
        }
        protected void DrawCachedNPCs(List<int> npcCache, bool behindTiles)
        {
            for (int i = 0; i < npcCache.Count; i++)
            {
                try
                {
                    this.DrawNPC(npcCache[i], behindTiles);
                }
                catch
                {
                    Game1.npc[npcCache[i]].active = false;
                }
            }
        }
        protected void DrawCachedProjs(List<int> projCache)
        {
            Game1.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
            for (int i = 0; i < projCache.Count; i++)
            {
                try
                {
                    this.DrawProj(projCache[i]);
                }
                catch (Exception e)
                {
                    TimeLogger.DrawException(e);
                    Game1.projectile[projCache[i]].active = false;
                }
            }
            Game1.spriteBatch.End();
        }
        protected void SortDrawCacheWorms()
        {
            List<int> drawCacheProjsWorms = this.DrawCacheProjsWorms;
            if (drawCacheProjsWorms.Count == 0)
            {
                return;
            }
            List<List<int>> list = new List<List<int>>();
            for (int i = 0; i < drawCacheProjsWorms.Count; i++)
            {
                int num = drawCacheProjsWorms[i];
                if (Game1.projectile[num].type == 628)
                {
                    drawCacheProjsWorms.Remove(num);
                    List<int> list2 = new List<int>();
                    list2.Insert(0, num);
                    int num2 = (int)Game1.projectile[num].ai[0];
                    while (!list2.Contains(num2) && Game1.projectile[num2].active && Game1.projectile[num2].type >= 625 && Game1.projectile[num2].type <= 627)
                    {
                        list2.Insert(0, num2);
                        drawCacheProjsWorms.Remove(num2);
                        num2 = (int)Game1.projectile[num2].ai[0];
                    }
                    list.Add(list2);
                    i = -1;
                }
            }
            List<int> list3 = new List<int>(this.DrawCacheProjsWorms);
            list.Add(list3);
            this.DrawCacheProjsWorms.Clear();
            for (int j = 0; j < list.Count; j++)
            {
                for (int k = 0; k < list[j].Count; k++)
                {
                    this.DrawCacheProjsWorms.Add(list[j][k]);
                }
            }
            for (int l = 0; l < this.DrawCacheProjsWorms.Count; l++)
            {
                Projectile projectile = Game1.projectile[this.DrawCacheProjsWorms[l]];
                if (projectile.type != 625)
                {
                    Vector2 vector = Game1.projectile[(int)projectile.ai[0]].Center - projectile.Center;
                    if (vector != Vector2.Zero)
                    {
                        float num3 = Game1.projectile[(int)projectile.ai[0]].scale * 16f;
                        float num4 = vector.Length();
                        float num5 = num3 - num4;
                        if (num5 != 0f)
                        {
                            projectile.Center += Vector2.Normalize(vector) * -num5;
                        }
                    }
                }
            }
        }
        protected void DrawWoF()
        {
            if (Game1.wof >= 0 && Game1.player[Game1.myPlayer].gross)
            {
                for (int i = 0; i < 255; i++)
                {
                    if (Game1.player[i].active && Game1.player[i].tongued && !Game1.player[i].dead)
                    {
                        float num = Game1.npc[Game1.wof].position.X + (float)(Game1.npc[Game1.wof].width / 2);
                        float num2 = Game1.npc[Game1.wof].position.Y + (float)(Game1.npc[Game1.wof].height / 2);
                        Vector2 vector = new Vector2(Game1.player[i].position.X + (float)Game1.player[i].width * 0.5f, Game1.player[i].position.Y + (float)Game1.player[i].height * 0.5f);
                        float num3 = num - vector.X;
                        float num4 = num2 - vector.Y;
                        float rotation = (float)Math.Atan2((double)num4, (double)num3) - 1.57f;
                        bool flag = true;
                        while (flag)
                        {
                            float num5 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
                            if (num5 < 40f)
                            {
                                flag = false;
                            }
                            else
                            {
                                num5 = (float)Game1.chain12Texture.Height / num5;
                                num3 *= num5;
                                num4 *= num5;
                                vector.X += num3;
                                vector.Y += num4;
                                num3 = num - vector.X;
                                num4 = num2 - vector.Y;
                                Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
                                Game1.spriteBatch.Draw(Game1.chain12Texture, new Vector2(vector.X - Game1.screenPosition.X, vector.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain12Texture.Width, Game1.chain12Texture.Height)), color, rotation, new Vector2((float)Game1.chain12Texture.Width * 0.5f, (float)Game1.chain12Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
                            }
                        }
                    }
                }
                for (int j = 0; j < 200; j++)
                {
                    if (Game1.npc[j].active && Game1.npc[j].aiStyle == 29)
                    {
                        float num6 = Game1.npc[Game1.wof].position.X + (float)(Game1.npc[Game1.wof].width / 2);
                        float num7 = Game1.npc[Game1.wof].position.Y;
                        float num8 = (float)(Game1.wofB - Game1.wofT);
                        bool flag2 = false;
                        if (Game1.npc[j].frameCounter > 7.0)
                        {
                            flag2 = true;
                        }
                        num7 = (float)Game1.wofT + num8 * Game1.npc[j].ai[0];
                        Vector2 vector2 = new Vector2(Game1.npc[j].position.X + (float)(Game1.npc[j].width / 2), Game1.npc[j].position.Y + (float)(Game1.npc[j].height / 2));
                        float num9 = num6 - vector2.X;
                        float num10 = num7 - vector2.Y;
                        float rotation2 = (float)Math.Atan2((double)num10, (double)num9) - 1.57f;
                        bool flag3 = true;
                        while (flag3)
                        {
                            SpriteEffects effects = SpriteEffects.None;
                            if (flag2)
                            {
                                effects = SpriteEffects.FlipHorizontally;
                                flag2 = false;
                            }
                            else
                            {
                                flag2 = true;
                            }
                            int height = 28;
                            float num11 = (float)Math.Sqrt((double)(num9 * num9 + num10 * num10));
                            if (num11 < 40f)
                            {
                                height = (int)num11 - 40 + 28;
                                flag3 = false;
                            }
                            num11 = 28f / num11;
                            num9 *= num11;
                            num10 *= num11;
                            vector2.X += num9;
                            vector2.Y += num10;
                            num9 = num6 - vector2.X;
                            num10 = num7 - vector2.Y;
                            Microsoft.Xna.Framework.Color color2 = Lighting.GetColor((int)vector2.X / 16, (int)(vector2.Y / 16f));
                            Game1.spriteBatch.Draw(Game1.chain12Texture, new Vector2(vector2.X - Game1.screenPosition.X, vector2.Y - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chain4Texture.Width, height)), color2, rotation2, new Vector2((float)Game1.chain4Texture.Width * 0.5f, (float)Game1.chain4Texture.Height * 0.5f), 1f, effects, 0f);
                        }
                    }
                }
                int num12 = 140;
                float num13 = (float)Game1.wofT;
                float num14 = (float)Game1.wofB;
                num14 = Game1.screenPosition.Y + (float)Game1.screenHeight;
                float num15 = (float)((int)((num13 - Game1.screenPosition.Y) / (float)num12) + 1);
                num15 *= (float)num12;
                if (num15 > 0f)
                {
                    num13 -= num15;
                }
                float num16 = num13;
                float num17 = Game1.npc[Game1.wof].position.X;
                float num18 = num14 - num13;
                bool flag4 = true;
                SpriteEffects effects2 = SpriteEffects.None;
                if (Game1.npc[Game1.wof].spriteDirection == 1)
                {
                    effects2 = SpriteEffects.FlipHorizontally;
                }
                if (Game1.npc[Game1.wof].direction > 0)
                {
                    num17 -= 80f;
                }
                int num19 = 0;
                if (!Game1.gamePaused)
                {
                    Game1.wofF++;
                }
                if (Game1.wofF > 12)
                {
                    num19 = 280;
                    if (Game1.wofF > 17)
                    {
                        Game1.wofF = 0;
                    }
                }
                else if (Game1.wofF > 6)
                {
                    num19 = 140;
                }
                while (flag4)
                {
                    num18 = num14 - num16;
                    if (num18 > (float)num12)
                    {
                        num18 = (float)num12;
                    }
                    bool flag5 = true;
                    int num20 = 0;
                    while (flag5)
                    {
                        int x = (int)(num17 + (float)(Game1.wofTexture.Width / 2)) / 16;
                        int y = (int)(num16 + (float)num20) / 16;
                        Game1.spriteBatch.Draw(Game1.wofTexture, new Vector2(num17 - Game1.screenPosition.X, num16 + (float)num20 - Game1.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num19 + num20, Game1.wofTexture.Width, 16)), Lighting.GetColor(x, y), 0f, default(Vector2), 1f, effects2, 0f);
                        num20 += 16;
                        if ((float)num20 >= num18)
                        {
                            flag5 = false;
                        }
                    }
                    num16 += (float)num12;
                    if (num16 >= num14)
                    {
                        flag4 = false;
                    }
                }
            }
        }
        protected void DrawGhost(Player drawPlayer, Vector2 Position, float shadow = 0f)
        {
            SpriteEffects effects;
            if (drawPlayer.direction == 1)
            {
                effects = SpriteEffects.None;
            }
            else
            {
                effects = SpriteEffects.FlipHorizontally;
            }
            Microsoft.Xna.Framework.Color immuneAlpha = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)drawPlayer.position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)drawPlayer.position.Y + (double)drawPlayer.height * 0.5) / 16, new Microsoft.Xna.Framework.Color((int)(Game1.mouseTextColor / 2 + 100), (int)(Game1.mouseTextColor / 2 + 100), (int)(Game1.mouseTextColor / 2 + 100), (int)(Game1.mouseTextColor / 2 + 100))), shadow);
            Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(0, Game1.ghostTexture.Height / 4 * drawPlayer.ghostFrame, Game1.ghostTexture.Width, Game1.ghostTexture.Height / 4);
            Vector2 origin = new Vector2((float)value.Width * 0.5f, (float)value.Height * 0.5f);
            Game1.spriteBatch.Draw(Game1.ghostTexture, new Vector2((float)((int)(drawPlayer.position.X - Game1.screenPosition.X + (float)(value.Width / 2))), (float)((int)(drawPlayer.position.Y - Game1.screenPosition.Y + (float)(value.Height / 2)))), new Microsoft.Xna.Framework.Rectangle?(value), immuneAlpha, 0f, origin, 1f, effects, 0f);
        }
        protected Vector2 DrawPlayerItemPos(float gravdir, int itemtype)
        {
            float num = 10f;
            Vector2 result = new Vector2((float)(Game1.itemTexture[itemtype].Width / 2), (float)(Game1.itemTexture[itemtype].Height / 2));
            if (itemtype == 95)
            {
                num = 6f;
                result.Y += 2f * gravdir;
            }
            else if (itemtype == 1295)
            {
                num = 4f;
            }
            else if (itemtype == 3350)
            {
                num = 2f;
            }
            else if (itemtype == 2624)
            {
                num = 4f;
            }
            else if (itemtype == 3018)
            {
                num = 2f;
            }
            else if (itemtype == 3007)
            {
                num = 4f;
                result.Y += 4f * gravdir;
            }
            else if (itemtype == 3107)
            {
                num = 4f;
                result.Y += 2f * gravdir;
            }
            else if (itemtype == 3008)
            {
                num = -12f;
                result.Y += 2f * gravdir;
            }
            else if (itemtype == 1255)
            {
                num = 6f;
                result.Y += 0f * gravdir;
            }
            else if (itemtype == 2269)
            {
                num = 2f;
                result.Y += 2f * gravdir;
            }
            else if (itemtype == 1265)
            {
                num = -8f;
                result.Y += 4f * gravdir;
            }
            else if (itemtype == 2272)
            {
                num = 0f;
                result.Y += 4f * gravdir;
            }
            else if (itemtype == 3029)
            {
                num = 4f;
            }
            else if (itemtype == 2796)
            {
                num = -28f;
                result.Y += 2f * gravdir;
            }
            else if (itemtype == 2797)
            {
                num = 0f;
            }
            else if (itemtype == 2610)
            {
                num = 0f;
            }
            else if (itemtype == 2623)
            {
                num = -30f;
                result.Y -= 4f * gravdir;
            }
            else if (itemtype == 3546)
            {
                num = -14f;
                result.Y -= 6f * gravdir;
            }
            else if (itemtype == 1835)
            {
                num = -2f;
                result.Y += 2f * gravdir;
            }
            else if (itemtype == 2624)
            {
                num = -4f;
            }
            else if (itemtype == 2888)
            {
                num = 6f;
            }
            else if (itemtype == 2223)
            {
                num = 2f;
                result.Y -= 2f * gravdir;
            }
            else if (itemtype == 1782)
            {
                num = 0f;
                result.Y += 4f * gravdir;
            }
            else if (itemtype == 1929)
            {
                num = 0f;
                result.Y += 2f * gravdir;
            }
            else if (itemtype == 2270)
            {
                num = -4f;
            }
            else if (itemtype == 1784)
            {
                num = 0f;
                result.Y += 4f * gravdir;
            }
            else if (itemtype == 1000)
            {
                num = 6f;
                result.Y += 0f * gravdir;
            }
            else if (itemtype == 1178)
            {
                num = 4f;
                result.Y += 0f * gravdir;
            }
            else if (itemtype == 1319)
            {
                num = 0f;
                result.Y += 0f * gravdir;
            }
            else if (itemtype == 1297)
            {
                num = -8f;
                result.Y += 0f * gravdir;
            }
            else if (itemtype == 1121)
            {
                num = 6f;
                result.Y -= 2f * gravdir;
            }
            else if (itemtype == 1314)
            {
                num = 2f;
            }
            else if (itemtype == 1258)
            {
                num = 2f;
                result.Y -= 2f * gravdir;
            }
            else if (itemtype == 1155)
            {
                num = -10f;
                result.Y -= 2f * gravdir;
            }
            else if (itemtype == 1156)
            {
                num = -2f;
            }
            else if (itemtype == 96)
            {
                num = -8f;
                result.Y += 2f * gravdir;
            }
            else if (itemtype == 1870)
            {
                num = -8f;
                result.Y += 2f * gravdir;
            }
            else if (itemtype == 1260)
            {
                num = -8f;
                result.Y += 2f * gravdir;
            }
            else if (itemtype == 1254)
            {
                num = -6f;
                result.Y += 2f * gravdir;
            }
            else if (itemtype == 98)
            {
                num = -5f;
                result.Y -= 2f * gravdir;
            }
            else if (itemtype == 534)
            {
                num = -2f;
                result.Y += 1f * gravdir;
            }
            else if (itemtype == 679)
            {
                num = 0f;
                result.Y += 2f * gravdir;
            }
            else if (itemtype == 964)
            {
                num = 0f;
                result.Y += 0f * gravdir;
            }
            else if (itemtype == 533)
            {
                num = -7f;
                result.Y -= 2f * gravdir;
            }
            else if (itemtype == 1553)
            {
                num = -10f;
                result.Y -= 2f * gravdir;
            }
            else if (itemtype == 506)
            {
                num = 0f;
                result.Y -= 2f * gravdir;
            }
            else if (itemtype == 1910)
            {
                num = 0f;
                result.Y -= 2f * gravdir;
            }
            else if (itemtype == 494 || itemtype == 508)
            {
                num = -2f;
            }
            else if (itemtype == 434)
            {
                num = 0f;
                result.Y -= 2f * gravdir;
            }
            else if (itemtype == 514)
            {
                num = 0f;
                result.Y += 3f * gravdir;
            }
            else if (itemtype == 435 || itemtype == 436 || itemtype == 481 || itemtype == 578 || itemtype == 1187 || itemtype == 1194 || itemtype == 1201 || itemtype == 1229)
            {
                num = -2f;
                result.Y -= 2f * gravdir;
            }
            else if (itemtype == 197)
            {
                num = -5f;
                result.Y += 4f * gravdir;
            }
            else if (itemtype == 126)
            {
                num = 4f;
                result.Y += 4f * gravdir;
            }
            else if (itemtype == 800)
            {
                num = 4f;
                result.Y += 2f * gravdir;
            }
            else if (itemtype == 127)
            {
                num = 4f;
                result.Y += 2f * gravdir;
            }
            else if (itemtype == 157)
            {
                num = 6f;
                result.Y += 2f * gravdir;
            }
            else if (itemtype == 160)
            {
                num = -8f;
            }
            else if (itemtype == 164 || itemtype == 219)
            {
                num = 0f;
                result.Y += 2f * gravdir;
            }
            else if (itemtype == 165 || itemtype == 272)
            {
                num = 4f;
                result.Y += 4f * gravdir;
            }
            else if (itemtype == 266)
            {
                num = 0f;
                result.Y += 2f * gravdir;
            }
            else if (itemtype == 281)
            {
                num = 6f;
                result.Y -= 6f * gravdir;
            }
            else if (itemtype == 986)
            {
                num = 6f;
                result.Y -= 10f * gravdir;
            }
            else if (itemtype == 682)
            {
                num = 4f;
            }
            else if (itemtype == 758)
            {
                num -= 20f;
                result.Y += 0f * gravdir;
            }
            else if (itemtype == 759)
            {
                num -= 18f;
                result.Y += 2f * gravdir;
            }
            else if (itemtype == 760)
            {
                num -= 12f;
                result.Y += 2f * gravdir;
            }
            else if (itemtype == 1946)
            {
                num -= 12f;
                result.Y += 2f * gravdir;
            }
            else if (itemtype == 779)
            {
                num = 0f;
                result.Y += 2f * gravdir;
            }
            else if (itemtype == 905)
            {
                num = -5f;
                result.Y += 0f * gravdir;
            }
            else if (itemtype == 930)
            {
                num = 4f;
                result.Y += 2f * gravdir;
            }
            result.X = num;
            return result;
        }
        protected Microsoft.Xna.Framework.Color quickAlpha(Microsoft.Xna.Framework.Color oldColor, float Alpha)
        {
            Microsoft.Xna.Framework.Color result = oldColor;
            result.R = (byte)((float)result.R * Alpha);
            result.G = (byte)((float)result.G * Alpha);
            result.B = (byte)((float)result.B * Alpha);
            result.A = (byte)((float)result.A * Alpha);
            return result;
        }
        protected void DrawPlayerHead(Player drawPlayer, float X, float Y, float Alpha = 1f, float Scale = 1f)
        {
            int shaderId = 0;
            int skinVariant = drawPlayer.skinVariant;
            short hairDye = (short)drawPlayer.hairDye;
            for (int i = 0; i < 16 + drawPlayer.extraAccessorySlots * 2; i++)
            {
                int num = i % 10;
                if (drawPlayer.dye[num] != null && drawPlayer.armor[i].itemId > 0 && drawPlayer.armor[i].stack > 0 && drawPlayer.armor[i].faceSlot > 0 && drawPlayer.armor[i].faceSlot < 9)
                {
                    byte arg_74_0 = drawPlayer.dye[num].dye;
                }
            }
            if (drawPlayer.face > 0 && drawPlayer.face < 9)
            {
                this.LoadAccFace((int)drawPlayer.face);
            }
            if (drawPlayer.dye[0] != null)
            {
                shaderId = (int)drawPlayer.dye[0].dye;
            }
            this.LoadHair(drawPlayer.hair);
            Microsoft.Xna.Framework.Color color = this.quickAlpha(Microsoft.Xna.Framework.Color.White, Alpha);
            Microsoft.Xna.Framework.Color color2 = this.quickAlpha(drawPlayer.eyeColor, Alpha);
            Microsoft.Xna.Framework.Color color3 = this.quickAlpha(drawPlayer.GetHairColor(false), Alpha);
            Microsoft.Xna.Framework.Color color4 = this.quickAlpha(drawPlayer.skinColor, Alpha);
            Microsoft.Xna.Framework.Color color5 = this.quickAlpha(Microsoft.Xna.Framework.Color.White, Alpha);
            SpriteEffects spriteEffects = SpriteEffects.None;
            if (drawPlayer.direction < 0)
            {
                spriteEffects = SpriteEffects.FlipHorizontally;
            }
            Vector2 vector = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.4f);
            Vector2 position = drawPlayer.position;
            Microsoft.Xna.Framework.Rectangle bodyFrame = drawPlayer.bodyFrame;
            drawPlayer.bodyFrame.Y = 0;
            drawPlayer.position = Game1.screenPosition;
            drawPlayer.position.X = drawPlayer.position.X + X;
            drawPlayer.position.Y = drawPlayer.position.Y + Y;
            drawPlayer.position.X = drawPlayer.position.X - 6f;
            drawPlayer.position.Y = drawPlayer.position.Y - 4f;
            float num2 = (float)drawPlayer.mount.PlayerHeadOffset;
            drawPlayer.position.Y = drawPlayer.position.Y - num2;
            if (drawPlayer.head > 0 && drawPlayer.head < 194)
            {
                this.LoadArmorHead(drawPlayer.head);
            }
            if (drawPlayer.face > 0 && drawPlayer.face < 9)
            {
                this.LoadAccFace((int)drawPlayer.face);
            }
            if (drawPlayer.head != 38 && drawPlayer.head != 135)
            {
                Game1.spriteBatch.Draw(Game1.playerTextures[skinVariant, 0], new Vector2(drawPlayer.position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
                Game1.spriteBatch.Draw(Game1.playerTextures[skinVariant, 1], new Vector2(drawPlayer.position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
                Game1.spriteBatch.Draw(Game1.playerTextures[skinVariant, 2], new Vector2(drawPlayer.position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color2, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
            }
            if (drawPlayer.head == 10 || drawPlayer.head == 12 || drawPlayer.head == 28 || drawPlayer.head == 62 || drawPlayer.head == 97 || drawPlayer.head == 106 || drawPlayer.head == 113 || drawPlayer.head == 116 || drawPlayer.head == 119 || drawPlayer.head == 133 || drawPlayer.head == 138 || drawPlayer.head == 139 || drawPlayer.head == 163 || drawPlayer.head == 178)
            {
                DrawData value = new DrawData(Game1.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
                GameShaders.Armor.Apply(shaderId, drawPlayer, new DrawData?(value));
                value.Draw(Game1.spriteBatch);
    
                //Game1.pixelShader.CurrentTechnique.Passes[0].Apply();

                if (!drawPlayer.invis)
                {
                    Microsoft.Xna.Framework.Rectangle bodyFrame2 = drawPlayer.bodyFrame;
                    bodyFrame2.Y -= 336;
                    if (bodyFrame2.Y < 0)
                    {
                        bodyFrame2.Y = 0;
                    }
                    value = new DrawData(Game1.playerHairTexture[drawPlayer.hair], new Vector2(drawPlayer.position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(bodyFrame2), color3, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
                    GameShaders.Hair.Apply(hairDye, drawPlayer, new DrawData?(value));
                    value.Draw(Game1.spriteBatch);

                    //Game1.pixelShader.CurrentTechnique.Passes[0].Apply();
                }
            }
            if (drawPlayer.head == 161 || drawPlayer.head == 14 || drawPlayer.head == 15 || drawPlayer.head == 16 || drawPlayer.head == 18 || drawPlayer.head == 21 || drawPlayer.head == 24 || drawPlayer.head == 25 || drawPlayer.head == 26 || drawPlayer.head == 40 || drawPlayer.head == 44 || drawPlayer.head == 51 || drawPlayer.head == 56 || drawPlayer.head == 59 || drawPlayer.head == 60 || drawPlayer.head == 67 || drawPlayer.head == 68 || drawPlayer.head == 69 || drawPlayer.head == 114 || drawPlayer.head == 121 || drawPlayer.head == 126 || drawPlayer.head == 130 || drawPlayer.head == 136 || drawPlayer.head == 140 || drawPlayer.head == 145 || drawPlayer.head == 158 || drawPlayer.head == 159)
            {
                Microsoft.Xna.Framework.Rectangle bodyFrame3 = drawPlayer.bodyFrame;
                bodyFrame3.Y -= 336;
                if (bodyFrame3.Y < 0)
                {
                    bodyFrame3.Y = 0;
                }
                if (!drawPlayer.invis)
                {
                    DrawData value2 = new DrawData(Game1.playerHairAltTexture[drawPlayer.hair], new Vector2(drawPlayer.position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(bodyFrame3), color3, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
                    GameShaders.Hair.Apply(hairDye, drawPlayer, new DrawData?(value2));
                    value2.Draw(Game1.spriteBatch);
                    //Game1.pixelShader.CurrentTechnique.Passes[0].Apply();
                }
            }
            if (drawPlayer.head == 23)
            {
                Microsoft.Xna.Framework.Rectangle bodyFrame4 = drawPlayer.bodyFrame;
                bodyFrame4.Y -= 336;
                if (bodyFrame4.Y < 0)
                {
                    bodyFrame4.Y = 0;
                }
                DrawData value3;
                if (!drawPlayer.invis)
                {
                    value3 = new DrawData(Game1.playerHairTexture[drawPlayer.hair], new Vector2(drawPlayer.position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(bodyFrame4), color3, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
                    GameShaders.Hair.Apply(hairDye, drawPlayer, new DrawData?(value3));
                    value3.Draw(Game1.spriteBatch);
                    //Game1.pixelShader.CurrentTechnique.Passes[0].Apply();
                }
                value3 = new DrawData(Game1.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
                GameShaders.Armor.Apply(shaderId, drawPlayer, new DrawData?(value3));
                value3.Draw(Game1.spriteBatch);
                //Game1.pixelShader.CurrentTechnique.Passes[0].Apply();
            }
            else if (drawPlayer.head == 14 || drawPlayer.head == 56 || drawPlayer.head == 158)
            {
                Microsoft.Xna.Framework.Rectangle bodyFrame5 = drawPlayer.bodyFrame;
                if (drawPlayer.head == 158)
                {
                    bodyFrame5.Height -= 2;
                }
                int num3 = 0;
                if (bodyFrame5.Y == bodyFrame5.Height * 6)
                {
                    bodyFrame5.Height -= 2;
                }
                else if (bodyFrame5.Y == bodyFrame5.Height * 7)
                {
                    num3 = -2;
                }
                else if (bodyFrame5.Y == bodyFrame5.Height * 8)
                {
                    num3 = -2;
                }
                else if (bodyFrame5.Y == bodyFrame5.Height * 9)
                {
                    num3 = -2;
                }
                else if (bodyFrame5.Y == bodyFrame5.Height * 10)
                {
                    num3 = -2;
                }
                else if (bodyFrame5.Y == bodyFrame5.Height * 13)
                {
                    bodyFrame5.Height -= 2;
                }
                else if (bodyFrame5.Y == bodyFrame5.Height * 14)
                {
                    num3 = -2;
                }
                else if (bodyFrame5.Y == bodyFrame5.Height * 15)
                {
                    num3 = -2;
                }
                else if (bodyFrame5.Y == bodyFrame5.Height * 16)
                {
                    num3 = -2;
                }
                bodyFrame5.Y += num3;
                DrawData value4 = new DrawData(Game1.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f + (float)num3) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(bodyFrame5), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
                GameShaders.Armor.Apply(shaderId, drawPlayer, new DrawData?(value4));
                value4.Draw(Game1.spriteBatch);
                //Game1.pixelShader.CurrentTechnique.Passes[0].Apply();
            }
            else if (drawPlayer.head > 0 && drawPlayer.head < 194 && drawPlayer.head != 28)
            {
                DrawData value5 = new DrawData(Game1.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
                GameShaders.Armor.Apply(shaderId, drawPlayer, new DrawData?(value5));
                value5.Draw(Game1.spriteBatch);
                //Game1.pixelShader.CurrentTechnique.Passes[0].Apply();
            }
            else
            {
                Microsoft.Xna.Framework.Rectangle bodyFrame6 = drawPlayer.bodyFrame;
                bodyFrame6.Y -= 336;
                if (bodyFrame6.Y < 0)
                {
                    bodyFrame6.Y = 0;
                }
                DrawData value6 = new DrawData(Game1.playerHairTexture[drawPlayer.hair], new Vector2(drawPlayer.position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(bodyFrame6), color3, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
                GameShaders.Hair.Apply(hairDye, drawPlayer, new DrawData?(value6));
                value6.Draw(Game1.spriteBatch);
                //Game1.pixelShader.CurrentTechnique.Passes[0].Apply();
            }
            if (drawPlayer.face > 0 && drawPlayer.face < 9)
            {
                DrawData value7;
                if (drawPlayer.face == 7)
                {
                    value7 = new DrawData(Game1.accFaceTexture[(int)drawPlayer.face], new Vector2((float)((int)(drawPlayer.position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), new Microsoft.Xna.Framework.Color(200, 200, 200, 150), drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
                }
                else
                {
                    value7 = new DrawData(Game1.accFaceTexture[(int)drawPlayer.face], new Vector2((float)((int)(drawPlayer.position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
                }
                GameShaders.Armor.Apply(shaderId, drawPlayer, new DrawData?(value7));
                value7.Draw(Game1.spriteBatch);
                //Game1.pixelShader.CurrentTechnique.Passes[0].Apply();
            }
            drawPlayer.position = position;
            drawPlayer.bodyFrame.Y = bodyFrame.Y;
        }

        protected void DrawPlayerStoned(Player drawPlayer, Vector2 Position)
        {
            if (drawPlayer.dead)
            {
                return;
            }
            SpriteEffects effects;
            if (drawPlayer.direction == 1)
            {
                effects = SpriteEffects.None;
            }
            else
            {
                effects = SpriteEffects.FlipHorizontally;
            }
            Game1.spriteBatch.Draw(Game1.extraTexture[37], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 8f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), null, Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.5) / 16, Microsoft.Xna.Framework.Color.White), 0f, new Vector2((float)(Game1.extraTexture[37].Width / 2), (float)(Game1.extraTexture[37].Height / 2)), 1f, effects, 0f);
        }
        public void DrawPlayer(Player drawPlayer, Vector2 Position, float rotation, Vector2 rotationOrigin, float shadow = 0f)
        {
            DrawData value = default(DrawData);
            int num = -1;
            Game1.playerDrawData.Clear();
            Game1.playerDrawDust.Clear();
            Game1.playerDrawGore.Clear();
            Vector2 value2 = Position + (drawPlayer.itemLocation - drawPlayer.position);
            int num2 = 0;
            bool flag = false;
            bool flag2 = false;
            bool flag3 = false;
            int skinVariant = drawPlayer.skinVariant;
            if (drawPlayer.body == 77 || drawPlayer.body == 103 || drawPlayer.body == 41 || drawPlayer.body == 100 || drawPlayer.body == 10 || drawPlayer.body == 11 || drawPlayer.body == 12 || drawPlayer.body == 13 || drawPlayer.body == 14 || drawPlayer.body == 43 || drawPlayer.body == 15 || drawPlayer.body == 16 || drawPlayer.body == 20 || drawPlayer.body == 39 || drawPlayer.body == 50 || drawPlayer.body == 38 || drawPlayer.body == 40 || drawPlayer.body == 57 || drawPlayer.body == 44 || drawPlayer.body == 52 || drawPlayer.body == 53 || drawPlayer.body == 68 || drawPlayer.body == 81 || drawPlayer.body == 85 || drawPlayer.body == 88 || drawPlayer.body == 98 || drawPlayer.body == 86 || drawPlayer.body == 87 || drawPlayer.body == 99 || drawPlayer.body == 165 || drawPlayer.body == 166 || drawPlayer.body == 167 || drawPlayer.body == 171 || drawPlayer.body == 45 || drawPlayer.body == 168 || drawPlayer.body == 169 || drawPlayer.body == 42 || drawPlayer.body == 180 || drawPlayer.body == 181 || drawPlayer.body == 183 || drawPlayer.body == 186 || drawPlayer.body == 187 || drawPlayer.body == 188 || drawPlayer.body == 64 || drawPlayer.body == 189 || drawPlayer.body == 191 || drawPlayer.body == 192)
            {
                flag = true;
            }
            if (drawPlayer.body == 99 || drawPlayer.body == 98 || drawPlayer.body == 100 || drawPlayer.body == 167 || drawPlayer.body == 171 || drawPlayer.body == 183 || drawPlayer.body == 191 || drawPlayer.body == 192)
            {
                flag2 = true;
            }
            int num3;
            if (drawPlayer.heldProj >= 0 && shadow == 0f)
            {
                num3 = Game1.projectile[drawPlayer.heldProj].type;
                if (num3 == 460 || num3 == 535 || num3 == 600)
                {
                    flag3 = true;
                }
            }
            bool flag4 = false;
            if (drawPlayer.head == 10 || drawPlayer.head == 12 || drawPlayer.head == 28 || drawPlayer.head == 62 || drawPlayer.head == 97 || drawPlayer.head == 106 || drawPlayer.head == 113 || drawPlayer.head == 116 || drawPlayer.head == 119 || drawPlayer.head == 133 || drawPlayer.head == 138 || drawPlayer.head == 139 || drawPlayer.head == 163 || drawPlayer.head == 178 || drawPlayer.head == 181 || drawPlayer.head == 191)
            {
                flag4 = true;
            }
            bool flag5 = false;
            if (drawPlayer.head == 161 || drawPlayer.head == 14 || drawPlayer.head == 15 || drawPlayer.head == 16 || drawPlayer.head == 18 || drawPlayer.head == 21 || drawPlayer.head == 24 || drawPlayer.head == 25 || drawPlayer.head == 26 || drawPlayer.head == 40 || drawPlayer.head == 44 || drawPlayer.head == 51 || drawPlayer.head == 56 || drawPlayer.head == 59 || drawPlayer.head == 60 || drawPlayer.head == 67 || drawPlayer.head == 68 || drawPlayer.head == 69 || drawPlayer.head == 114 || drawPlayer.head == 121 || drawPlayer.head == 126 || drawPlayer.head == 130 || drawPlayer.head == 136 || drawPlayer.head == 140 || drawPlayer.head == 145 || drawPlayer.head == 158 || drawPlayer.head == 159 || drawPlayer.head == 184 || drawPlayer.head == 190 || drawPlayer.head == 92)
            {
                flag5 = true;
            }
            bool flag6 = false;
            if (drawPlayer.face == 4 || drawPlayer.face == 3 || drawPlayer.face == 2)
            {
                flag6 = true;
            }
            float num4 = (float)drawPlayer.mount.PlayerOffset;
            Position.Y -= num4;
            int num5 = 0;
            if (drawPlayer.dye[0] != null)
            {
                num5 = (int)drawPlayer.dye[0].dye;
            }
            int num6 = 0;
            if (drawPlayer.dye[1] != null)
            {
                num6 = (int)drawPlayer.dye[1].dye;
            }
            int shader = 0;
            if (drawPlayer.dye[2] != null)
            {
                shader = (int)drawPlayer.dye[2].dye;
            }
            if (drawPlayer.wearsRobe)
            {
                shader = num6;
            }
            int shader2 = 0;
            int shader3 = 0;
            int shader4 = 0;
            int shader5 = 0;
            int shader6 = 0;
            int shader7 = 0;
            int shader8 = 0;
            int shader9 = 0;
            int shader10 = 0;
            int shader11 = 0;
            int shader12 = 0;
            int shader13 = 0;
            for (int i = 0; i < 20; i++)
            {
                int num7 = i % 10;
                if (drawPlayer.dye[num7] != null && drawPlayer.armor[i].itemId > 0 && drawPlayer.armor[i].stack > 0 && (i / 10 >= 1 || !drawPlayer.hideVisual[num7] || drawPlayer.armor[i].wingSlot > 0 || drawPlayer.armor[i].itemId == 934))
                {
                    if (drawPlayer.armor[i].handOnSlot > 0 && drawPlayer.armor[i].handOnSlot < 19)
                    {
                        shader2 = (int)drawPlayer.dye[num7].dye;
                    }
                    if (drawPlayer.armor[i].handOffSlot > 0 && drawPlayer.armor[i].handOffSlot < 12)
                    {
                        shader3 = (int)drawPlayer.dye[num7].dye;
                    }
                    if (drawPlayer.armor[i].backSlot > 0 && drawPlayer.armor[i].backSlot < 10)
                    {
                        shader4 = (int)drawPlayer.dye[num7].dye;
                    }
                    if (drawPlayer.armor[i].frontSlot > 0 && drawPlayer.armor[i].frontSlot < 5)
                    {
                        shader5 = (int)drawPlayer.dye[num7].dye;
                    }
                    if (drawPlayer.armor[i].shoeSlot > 0 && drawPlayer.armor[i].shoeSlot < 18)
                    {
                        shader6 = (int)drawPlayer.dye[num7].dye;
                    }
                    if (drawPlayer.armor[i].waistSlot > 0 && drawPlayer.armor[i].waistSlot < 12)
                    {
                        shader7 = (int)drawPlayer.dye[num7].dye;
                    }
                    if (drawPlayer.armor[i].shieldSlot > 0 && drawPlayer.armor[i].shieldSlot < 6)
                    {
                        shader8 = (int)drawPlayer.dye[num7].dye;
                    }
                    if (drawPlayer.armor[i].neckSlot > 0 && drawPlayer.armor[i].neckSlot < 9)
                    {
                        shader9 = (int)drawPlayer.dye[num7].dye;
                    }
                    if (drawPlayer.armor[i].faceSlot > 0 && drawPlayer.armor[i].faceSlot < 9)
                    {
                        shader10 = (int)drawPlayer.dye[num7].dye;
                    }
                    if (drawPlayer.armor[i].balloonSlot > 0 && drawPlayer.armor[i].balloonSlot < 16)
                    {
                        shader11 = (int)drawPlayer.dye[num7].dye;
                    }
                    if (drawPlayer.armor[i].wingSlot > 0 && drawPlayer.armor[i].wingSlot < 37)
                    {
                        shader12 = (int)drawPlayer.dye[num7].dye;
                    }
                    if (drawPlayer.armor[i].itemId == 934)
                    {
                        shader13 = (int)drawPlayer.dye[num7].dye;
                    }
                }
            }
            if (drawPlayer.mount.Active)
            {
                Mount.currentShader = (drawPlayer.mount.Cart ? drawPlayer.cMinecart : drawPlayer.cMount);
            }
            else
            {
                Mount.currentShader = 0;
            }
            SpriteEffects spriteEffects = SpriteEffects.None;
            SpriteEffects effect = SpriteEffects.FlipHorizontally;
            Microsoft.Xna.Framework.Color color = drawPlayer.GetImmuneAlpha(drawPlayer.GetHairColor(true), shadow);
            Microsoft.Xna.Framework.Color color2 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), Microsoft.Xna.Framework.Color.White), shadow);
            Microsoft.Xna.Framework.Color color3 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.eyeColor), shadow);
            Microsoft.Xna.Framework.Color color4 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.skinColor), shadow);
            Microsoft.Xna.Framework.Color color5 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.skinColor), shadow);
            Microsoft.Xna.Framework.Color color6 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.skinColor), shadow);
            Microsoft.Xna.Framework.Color color7 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.shirtColor), shadow);
            Microsoft.Xna.Framework.Color color8 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.underShirtColor), shadow);
            Microsoft.Xna.Framework.Color color9 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.pantsColor), shadow);
            Microsoft.Xna.Framework.Color color10 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.shoeColor), shadow);
            Microsoft.Xna.Framework.Color color11 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.25) / 16, Microsoft.Xna.Framework.Color.White), shadow);
            Microsoft.Xna.Framework.Color color12 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.5) / 16, Microsoft.Xna.Framework.Color.White), shadow);
            Microsoft.Xna.Framework.Color color13 = color12;
            Microsoft.Xna.Framework.Color color14 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.75) / 16, Microsoft.Xna.Framework.Color.White), shadow);
            Microsoft.Xna.Framework.Color color15 = new Microsoft.Xna.Framework.Color(255, 255, 255, 100);
            int num8 = 0;
            int num9 = 0;
            int num10 = 0;
            int num11 = 0;
            int num12 = -1;
            int num13 = -1;
            int num14 = -1;
            int num15 = -1;
            Microsoft.Xna.Framework.Color color16 = Microsoft.Xna.Framework.Color.Transparent;
            Microsoft.Xna.Framework.Color color17 = Microsoft.Xna.Framework.Color.Transparent;
            Microsoft.Xna.Framework.Color color18 = Microsoft.Xna.Framework.Color.Transparent;
            Microsoft.Xna.Framework.Color color19 = Microsoft.Xna.Framework.Color.Transparent;
            num3 = drawPlayer.head;
            switch (num3)
            {
                case 169:
                    num8++;
                    break;
                case 170:
                    num9++;
                    break;
                case 171:
                    num10++;
                    break;
                default:
                    if (num3 == 189)
                    {
                        num11++;
                    }
                    break;
            }
            num3 = drawPlayer.body;
            switch (num3)
            {
                case 175:
                    num8++;
                    break;
                case 176:
                    num9++;
                    break;
                case 177:
                    num10++;
                    break;
                default:
                    if (num3 == 190)
                    {
                        num11++;
                    }
                    break;
            }
            num3 = drawPlayer.legs;
            switch (num3)
            {
                case 110:
                    num8++;
                    break;
                case 111:
                    num9++;
                    break;
                case 112:
                    num10++;
                    break;
                default:
                    if (num3 == 130)
                    {
                        num11++;
                    }
                    break;
            }
            if (drawPlayer.head == 169)
            {
                num12 = 15;
                byte b = (byte)(62.5f * (float)(1 + num8));
                color16 = new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, 0);
            }
            else if (drawPlayer.head == 170)
            {
                num12 = 16;
                byte b2 = (byte)(62.5f * (float)(1 + num9));
                color16 = new Microsoft.Xna.Framework.Color((int)b2, (int)b2, (int)b2, 0);
            }
            else if (drawPlayer.head == 189)
            {
                num12 = 184;
                byte b3 = (byte)(62.5f * (float)(1 + num11));
                color16 = new Microsoft.Xna.Framework.Color((int)b3, (int)b3, (int)b3, 0);
                color11 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color((int)b3, (int)b3, (int)b3, 255), shadow);
            }
            else if (drawPlayer.head == 171)
            {
                byte b4 = (byte)(62.5f * (float)(1 + num10));
                color11 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color((int)b4, (int)b4, (int)b4, 255), shadow);
            }
            else if (drawPlayer.head == 175)
            {
                num12 = 41;
                color16 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
            }
            else if (drawPlayer.head == 193)
            {
                num12 = 209;
                color16 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
            }
            else if (drawPlayer.head == 109)
            {
                num12 = 208;
                color16 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
            }
            else if (drawPlayer.head == 178)
            {
                num12 = 96;
                color16 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
            }
            if (drawPlayer.body == 175)
            {
                if (drawPlayer.Male)
                {
                    num13 = 13;
                }
                else
                {
                    num13 = 18;
                }
                byte b5 = (byte)(62.5f * (float)(1 + num8));
                color17 = new Microsoft.Xna.Framework.Color((int)b5, (int)b5, (int)b5, 0);
            }
            else if (drawPlayer.body == 190)
            {
                if (drawPlayer.Male)
                {
                    num13 = 185;
                }
                else
                {
                    num13 = 186;
                }
                num14 = 188;
                byte b6 = (byte)(62.5f * (float)(1 + num11));
                color17 = new Microsoft.Xna.Framework.Color((int)b6, (int)b6, (int)b6, 0);
                color18 = new Microsoft.Xna.Framework.Color((int)b6, (int)b6, (int)b6, 0);
                color12 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color((int)b6, (int)b6, (int)b6, 255), shadow);
            }
            else if (drawPlayer.body == 176)
            {
                if (drawPlayer.Male)
                {
                    num13 = 14;
                }
                else
                {
                    num13 = 19;
                }
                num14 = 12;
                byte b7 = (byte)(62.5f * (float)(1 + num9));
                color17 = new Microsoft.Xna.Framework.Color((int)b7, (int)b7, (int)b7, 0);
                color18 = new Microsoft.Xna.Framework.Color((int)b7, (int)b7, (int)b7, 0);
            }
            else if (drawPlayer.body == 194)
            {
                num13 = 210;
                num14 = 211;
                color17 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
                color18 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
            }
            else if (drawPlayer.body == 177)
            {
                byte b8 = (byte)(62.5f * (float)(1 + num10));
                color12 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color((int)b8, (int)b8, (int)b8, 255), shadow);
            }
            else if (drawPlayer.body == 179)
            {
                if (drawPlayer.Male)
                {
                    num13 = 42;
                }
                else
                {
                    num13 = 43;
                }
                num14 = 44;
                color17 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
                color18 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
            }
            if (drawPlayer.legs == 111)
            {
                num15 = 17;
                byte b9 = (byte)(62.5f * (float)(1 + num9));
                color19 = new Microsoft.Xna.Framework.Color((int)b9, (int)b9, (int)b9, 0);
            }
            else if (drawPlayer.legs == 110)
            {
                num15 = 199;
                byte b10 = (byte)(62.5f * (float)(1 + num8));
                color19 = new Microsoft.Xna.Framework.Color((int)b10, (int)b10, (int)b10, 0);
            }
            else if (drawPlayer.legs == 112)
            {
                byte b11 = (byte)(62.5f * (float)(1 + num10));
                color14 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color((int)b11, (int)b11, (int)b11, 255), shadow);
            }
            else if (drawPlayer.legs == 134)
            {
                num15 = 212;
                color19 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
            }
            else if (drawPlayer.legs == 130)
            {
                byte b12 = (byte)(127 * (1 + num11));
                num15 = 187;
                color19 = new Microsoft.Xna.Framework.Color((int)b12, (int)b12, (int)b12, 0);
                color14 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color((int)b12, (int)b12, (int)b12, 255), shadow);
            }
            color16 = drawPlayer.GetImmuneAlphaPure(color16, shadow);
            color17 = drawPlayer.GetImmuneAlphaPure(color17, shadow);
            color18 = drawPlayer.GetImmuneAlphaPure(color18, shadow);
            color19 = drawPlayer.GetImmuneAlphaPure(color19, shadow);
            if (drawPlayer.head > 0 && drawPlayer.head < 194)
            {
                this.LoadArmorHead(drawPlayer.head);
            }
            if (drawPlayer.body > 0 && drawPlayer.body < 195)
            {
                this.LoadArmorBody(drawPlayer.body);
            }
            if (drawPlayer.legs > 0 && drawPlayer.legs < 135)
            {
                this.LoadArmorLegs(drawPlayer.legs);
            }
            if (drawPlayer.handon > 0 && drawPlayer.handon < 19)
            {
                this.LoadAccHandsOn((int)drawPlayer.handon);
            }
            if (drawPlayer.handoff > 0 && drawPlayer.handoff < 12)
            {
                this.LoadAccHandsOff((int)drawPlayer.handoff);
            }
            if (drawPlayer.back > 0 && drawPlayer.back < 10)
            {
                this.LoadAccBack((int)drawPlayer.back);
            }
            if (drawPlayer.front > 0 && drawPlayer.front < 5)
            {
                this.LoadAccFront((int)drawPlayer.front);
            }
            if (drawPlayer.shoe > 0 && drawPlayer.shoe < 18)
            {
                this.LoadAccShoes((int)drawPlayer.shoe);
            }
            if (drawPlayer.waist > 0 && drawPlayer.waist < 12)
            {
                this.LoadAccWaist((int)drawPlayer.waist);
            }
            if (drawPlayer.shield > 0 && drawPlayer.shield < 6)
            {
                this.LoadAccShield((int)drawPlayer.shield);
            }
            if (drawPlayer.neck > 0 && drawPlayer.neck < 9)
            {
                this.LoadAccNeck((int)drawPlayer.neck);
            }
            if (drawPlayer.face > 0 && drawPlayer.face < 9)
            {
                this.LoadAccFace((int)drawPlayer.face);
            }
            if (drawPlayer.balloon > 0 && drawPlayer.balloon < 16)
            {
                this.LoadAccBalloon((int)drawPlayer.balloon);
            }
            this.LoadHair(drawPlayer.hair);
            if ((drawPlayer.head == 78 || drawPlayer.head == 79 || drawPlayer.head == 80) && drawPlayer.body == 51 && drawPlayer.legs == 47)
            {
                float num16 = (float)Game1.mouseTextColor / 200f - 0.3f;
                if (shadow != 0f)
                {
                    num16 = 0f;
                }
                color11.R = (byte)((float)color11.R * num16);
                color11.G = (byte)((float)color11.G * num16);
                color11.B = (byte)((float)color11.B * num16);
                color12.R = (byte)((float)color12.R * num16);
                color12.G = (byte)((float)color12.G * num16);
                color12.B = (byte)((float)color12.B * num16);
                color14.R = (byte)((float)color14.R * num16);
                color14.G = (byte)((float)color14.G * num16);
                color14.B = (byte)((float)color14.B * num16);
            }
            if (drawPlayer.head == 193 && drawPlayer.body == 194 && drawPlayer.legs == 134)
            {
                float num17 = 0.6f - drawPlayer.ghostFade * 0.3f;
                if (shadow != 0f)
                {
                    num17 = 0f;
                }
                color11.R = (byte)((float)color11.R * num17);
                color11.G = (byte)((float)color11.G * num17);
                color11.B = (byte)((float)color11.B * num17);
                color12.R = (byte)((float)color12.R * num17);
                color12.G = (byte)((float)color12.G * num17);
                color12.B = (byte)((float)color12.B * num17);
                color14.R = (byte)((float)color14.R * num17);
                color14.G = (byte)((float)color14.G * num17);
                color14.B = (byte)((float)color14.B * num17);
            }
            if (shadow > 0f)
            {
                color6 = Microsoft.Xna.Framework.Color.Transparent;
                color5 = Microsoft.Xna.Framework.Color.Transparent;
                color4 = Microsoft.Xna.Framework.Color.Transparent;
                color = Microsoft.Xna.Framework.Color.Transparent;
                color3 = Microsoft.Xna.Framework.Color.Transparent;
                color2 = Microsoft.Xna.Framework.Color.Transparent;
            }
            float num18 = 1f;
            float num19 = 1f;
            float num20 = 1f;
            float num21 = 1f;
            if (drawPlayer.honey && Game1.rand.Next(30) == 0 && shadow == 0f)
            {
                int num22 = Dust.NewDust(Position, drawPlayer.width, drawPlayer.height, 152, 0f, 0f, 150, default(Microsoft.Xna.Framework.Color), 1f);
                Game1.dust[num22].velocity.Y = 0.3f;
                Dust expr_1816_cp_0 = Game1.dust[num22];
                expr_1816_cp_0.velocity.X = expr_1816_cp_0.velocity.X * 0.1f;
                Game1.dust[num22].scale += (float)Game1.rand.Next(3, 4) * 0.1f;
                Game1.dust[num22].alpha = 100;
                Game1.dust[num22].noGravity = true;
                Game1.dust[num22].velocity += drawPlayer.velocity * 0.1f;
                Game1.playerDrawDust.Add(num22);
            }
            if (drawPlayer.dryadWard && drawPlayer.velocity.X != 0f && Game1.rand.Next(4) == 0)
            {
                int num23 = Dust.NewDust(new Vector2(drawPlayer.position.X - 2f, drawPlayer.position.Y + (float)drawPlayer.height - 2f), drawPlayer.width + 4, 4, 163, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1.5f);
                Game1.dust[num23].noGravity = true;
                Game1.dust[num23].noLight = true;
                Game1.dust[num23].velocity *= 0f;
            }
            if (drawPlayer.poisoned)
            {
                if (Game1.rand.Next(50) == 0 && shadow == 0f)
                {
                    int num24 = Dust.NewDust(Position, drawPlayer.width, drawPlayer.height, 46, 0f, 0f, 150, default(Microsoft.Xna.Framework.Color), 0.2f);
                    Game1.dust[num24].noGravity = true;
                    Game1.dust[num24].fadeIn = 1.9f;
                    Game1.playerDrawDust.Add(num24);
                }
                num18 *= 0.65f;
                num20 *= 0.75f;
            }
            if (drawPlayer.venom)
            {
                if (Game1.rand.Next(10) == 0 && shadow == 0f)
                {
                    int num25 = Dust.NewDust(Position, drawPlayer.width, drawPlayer.height, 171, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 0.5f);
                    Game1.dust[num25].noGravity = true;
                    Game1.dust[num25].fadeIn = 1.5f;
                    Game1.playerDrawDust.Add(num25);
                }
                num19 *= 0.45f;
                num18 *= 0.75f;
            }
            if (drawPlayer.onFire)
            {
                if (Game1.rand.Next(4) == 0 && shadow == 0f)
                {
                    int num26 = Dust.NewDust(new Vector2(Position.X - 2f, Position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 6, drawPlayer.velocity.X * 0.4f, drawPlayer.velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 3f);
                    Game1.dust[num26].noGravity = true;
                    Game1.dust[num26].velocity *= 1.8f;
                    Dust expr_1B5C_cp_0 = Game1.dust[num26];
                    expr_1B5C_cp_0.velocity.Y = expr_1B5C_cp_0.velocity.Y - 0.5f;
                    Game1.playerDrawDust.Add(num26);
                }
                num20 *= 0.6f;
                num19 *= 0.7f;
            }
            if (drawPlayer.dripping && shadow == 0f && Game1.rand.Next(4) != 0)
            {
                Vector2 position = Position;
                position.X -= 2f;
                position.Y -= 2f;
                if (Game1.rand.Next(2) == 0)
                {
                    int num27 = Dust.NewDust(position, drawPlayer.width + 4, drawPlayer.height + 2, 211, 0f, 0f, 50, default(Microsoft.Xna.Framework.Color), 0.8f);
                    if (Game1.rand.Next(2) == 0)
                    {
                        Game1.dust[num27].alpha += 25;
                    }
                    if (Game1.rand.Next(2) == 0)
                    {
                        Game1.dust[num27].alpha += 25;
                    }
                    Game1.dust[num27].noLight = true;
                    Game1.dust[num27].velocity *= 0.2f;
                    Dust expr_1CA4_cp_0 = Game1.dust[num27];
                    expr_1CA4_cp_0.velocity.Y = expr_1CA4_cp_0.velocity.Y + 0.2f;
                    Game1.dust[num27].velocity += drawPlayer.velocity;
                    Game1.playerDrawDust.Add(num27);
                }
                else
                {
                    int num28 = Dust.NewDust(position, drawPlayer.width + 8, drawPlayer.height + 8, 211, 0f, 0f, 50, default(Microsoft.Xna.Framework.Color), 1.1f);
                    if (Game1.rand.Next(2) == 0)
                    {
                        Game1.dust[num28].alpha += 25;
                    }
                    if (Game1.rand.Next(2) == 0)
                    {
                        Game1.dust[num28].alpha += 25;
                    }
                    Game1.dust[num28].noLight = true;
                    Game1.dust[num28].noGravity = true;
                    Game1.dust[num28].velocity *= 0.2f;
                    Dust expr_1DA9_cp_0 = Game1.dust[num28];
                    expr_1DA9_cp_0.velocity.Y = expr_1DA9_cp_0.velocity.Y + 1f;
                    Game1.dust[num28].velocity += drawPlayer.velocity;
                    Game1.playerDrawDust.Add(num28);
                }
            }
            if (drawPlayer.drippingSlime)
            {
                int alpha = 175;
                Microsoft.Xna.Framework.Color newColor = new Microsoft.Xna.Framework.Color(0, 80, 255, 100);
                if (Game1.rand.Next(4) != 0 && shadow == 0f)
                {
                    Vector2 position2 = Position;
                    position2.X -= 2f;
                    position2.Y -= 2f;
                    if (Game1.rand.Next(2) == 0)
                    {
                        int num29 = Dust.NewDust(position2, drawPlayer.width + 4, drawPlayer.height + 2, 4, 0f, 0f, alpha, newColor, 1.4f);
                        if (Game1.rand.Next(2) == 0)
                        {
                            Game1.dust[num29].alpha += 25;
                        }
                        if (Game1.rand.Next(2) == 0)
                        {
                            Game1.dust[num29].alpha += 25;
                        }
                        Game1.dust[num29].noLight = true;
                        Game1.dust[num29].velocity *= 0.2f;
                        Dust expr_1F07_cp_0 = Game1.dust[num29];
                        expr_1F07_cp_0.velocity.Y = expr_1F07_cp_0.velocity.Y + 0.2f;
                        Game1.dust[num29].velocity += drawPlayer.velocity;
                        Game1.playerDrawDust.Add(num29);
                    }
                }
                num18 *= 0.8f;
                num19 *= 0.8f;
            }
            if (drawPlayer.ichor)
            {
                num20 = 0f;
            }
            if (drawPlayer.electrified && shadow == 0f && Game1.rand.Next(3) == 0)
            {
                int num30 = Dust.NewDust(new Vector2(Position.X - 2f, Position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 226, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 0.5f);
                Game1.dust[num30].velocity *= 1.6f;
                Dust expr_200C_cp_0 = Game1.dust[num30];
                expr_200C_cp_0.velocity.Y = expr_200C_cp_0.velocity.Y - 1f;
                Game1.dust[num30].position = Vector2.Lerp(Game1.dust[num30].position, drawPlayer.Center, 0.5f);
                Game1.playerDrawDust.Add(num30);
            }
            if (drawPlayer.burned)
            {
                if (shadow == 0f)
                {
                    int num31 = Dust.NewDust(new Vector2(Position.X - 2f, Position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 6, drawPlayer.velocity.X * 0.4f, drawPlayer.velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 2f);
                    Game1.dust[num31].noGravity = true;
                    Game1.dust[num31].velocity *= 1.8f;
                    Dust expr_210C_cp_0 = Game1.dust[num31];
                    expr_210C_cp_0.velocity.Y = expr_210C_cp_0.velocity.Y - 0.75f;
                    Game1.playerDrawDust.Add(num31);
                }
                num18 = 1f;
                num20 *= 0.6f;
                num19 *= 0.7f;
            }
            if (drawPlayer.onFrostBurn)
            {
                if (Game1.rand.Next(4) == 0 && shadow == 0f)
                {
                    int num32 = Dust.NewDust(new Vector2(Position.X - 2f, Position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 135, drawPlayer.velocity.X * 0.4f, drawPlayer.velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 3f);
                    Game1.dust[num32].noGravity = true;
                    Game1.dust[num32].velocity *= 1.8f;
                    Dust expr_2211_cp_0 = Game1.dust[num32];
                    expr_2211_cp_0.velocity.Y = expr_2211_cp_0.velocity.Y - 0.5f;
                    Game1.playerDrawDust.Add(num32);
                }
                num18 *= 0.5f;
                num19 *= 0.7f;
            }
            if (drawPlayer.onFire2)
            {
                if (Game1.rand.Next(4) == 0 && shadow == 0f)
                {
                    int num33 = Dust.NewDust(new Vector2(Position.X - 2f, Position.Y - 2f), drawPlayer.width + 4, drawPlayer.height + 4, 75, drawPlayer.velocity.X * 0.4f, drawPlayer.velocity.Y * 0.4f, 100, default(Microsoft.Xna.Framework.Color), 3f);
                    Game1.dust[num33].noGravity = true;
                    Game1.dust[num33].velocity *= 1.8f;
                    Dust expr_230C_cp_0 = Game1.dust[num33];
                    expr_230C_cp_0.velocity.Y = expr_230C_cp_0.velocity.Y - 0.5f;
                    Game1.playerDrawDust.Add(num33);
                }
                num20 *= 0.6f;
                num19 *= 0.7f;
            }
            if (drawPlayer.noItems)
            {
                num19 *= 0.8f;
                num18 *= 0.65f;
            }
            if (drawPlayer.blind)
            {
                num19 *= 0.65f;
                num18 *= 0.7f;
            }
            if (drawPlayer.bleed)
            {
                num19 *= 0.9f;
                num20 *= 0.9f;
                if (!drawPlayer.dead && Game1.rand.Next(30) == 0 && shadow == 0f)
                {
                    int num34 = Dust.NewDust(Position, drawPlayer.width, drawPlayer.height, 5, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
                    Dust expr_23F2_cp_0 = Game1.dust[num34];
                    expr_23F2_cp_0.velocity.Y = expr_23F2_cp_0.velocity.Y + 0.5f;
                    Game1.dust[num34].velocity *= 0.25f;
                    Game1.playerDrawDust.Add(num34);
                }
            }
            if (shadow == 0f && drawPlayer.palladiumRegen && drawPlayer.statLife < drawPlayer.statLifeMax2 && base.IsActive && !Game1.gamePaused && drawPlayer.miscCounter % 10 == 0 && shadow == 0f)
            {
                Vector2 position3;
                position3.X = Position.X + (float)Game1.rand.Next(drawPlayer.width);
                position3.Y = Position.Y + (float)Game1.rand.Next(drawPlayer.height);
                position3.X = Position.X + (float)(drawPlayer.width / 2) - 6f;
                position3.Y = Position.Y + (float)(drawPlayer.height / 2) - 6f;
                position3.X -= (float)Game1.rand.Next(-10, 11);
                position3.Y -= (float)Game1.rand.Next(-20, 21);
                int num35 = Gore.NewGore(position3, new Vector2((float)Game1.rand.Next(-10, 11) * 0.1f, (float)Game1.rand.Next(-20, -10) * 0.1f), 331, (float)Game1.rand.Next(80, 120) * 0.01f);
                Game1.playerDrawGore.Add(num35);
            }
            if (shadow == 0f && drawPlayer.loveStruck && base.IsActive && !Game1.gamePaused && Game1.rand.Next(5) == 0)
            {
                Vector2 value3 = new Vector2((float)Game1.rand.Next(-10, 11), (float)Game1.rand.Next(-10, 11));
                value3.Normalize();
                value3.X *= 0.66f;
                int num36 = Gore.NewGore(Position + new Vector2((float)Game1.rand.Next(drawPlayer.width + 1), (float)Game1.rand.Next(drawPlayer.height + 1)), value3 * (float)Game1.rand.Next(3, 6) * 0.33f, 331, (float)Game1.rand.Next(40, 121) * 0.01f);
                Game1.gore[num36].sticky = false;
                Game1.gore[num36].velocity *= 0.4f;
                Gore expr_26BA_cp_0 = Game1.gore[num36];
                expr_26BA_cp_0.velocity.Y = expr_26BA_cp_0.velocity.Y - 0.6f;
                Game1.playerDrawGore.Add(num36);
            }
            if (drawPlayer.stinky && base.IsActive && !Game1.gamePaused)
            {
                num18 *= 0.7f;
                num20 *= 0.55f;
                if (Game1.rand.Next(5) == 0 && shadow == 0f)
                {
                    Vector2 value4 = new Vector2((float)Game1.rand.Next(-10, 11), (float)Game1.rand.Next(-10, 11));
                    value4.Normalize();
                    value4.X *= 0.66f;
                    value4.Y = Math.Abs(value4.Y);
                    Vector2 vector = value4 * (float)Game1.rand.Next(3, 5) * 0.25f;
                    int num37 = Dust.NewDust(Position, drawPlayer.width, drawPlayer.height, 188, vector.X, vector.Y * 0.5f, 100, default(Microsoft.Xna.Framework.Color), 1.5f);
                    Game1.dust[num37].velocity *= 0.1f;
                    Dust expr_2801_cp_0 = Game1.dust[num37];
                    expr_2801_cp_0.velocity.Y = expr_2801_cp_0.velocity.Y - 0.5f;
                    Game1.playerDrawDust.Add(num37);
                }
            }
            if (base.IsActive && !Game1.gamePaused && shadow == 0f)
            {
                float num38 = (float)drawPlayer.miscCounter / 180f;
                float num39 = 0f;
                float scaleFactor = 10f;
                int type = 90;
                int num40 = 0;
                int j = 0;
                while (j < 3)
                {
                    switch (j)
                    {
                        case 0:
                            if (drawPlayer.nebulaLevelLife >= 1)
                            {
                                num39 = 6.28318548f / (float)drawPlayer.nebulaLevelLife;
                                num40 = drawPlayer.nebulaLevelLife;
                                goto IL_2929;
                            }
                            break;
                        case 1:
                            if (drawPlayer.nebulaLevelMana >= 1)
                            {
                                num39 = -6.28318548f / (float)drawPlayer.nebulaLevelMana;
                                num40 = drawPlayer.nebulaLevelMana;
                                num38 = (float)(-(float)drawPlayer.miscCounter) / 180f;
                                scaleFactor = 20f;
                                type = 88;
                                goto IL_2929;
                            }
                            break;
                        case 2:
                            if (drawPlayer.nebulaLevelDamage >= 1)
                            {
                                num39 = 6.28318548f / (float)drawPlayer.nebulaLevelDamage;
                                num40 = drawPlayer.nebulaLevelDamage;
                                num38 = (float)drawPlayer.miscCounter / 180f;
                                scaleFactor = 30f;
                                type = 86;
                                goto IL_2929;
                            }
                            break;
                        default:
                            goto IL_2929;
                    }
                IL_29F3:
                    j++;
                    continue;
                IL_2929:
                    for (int k = 0; k < num40; k++)
                    {
                        int num41 = Dust.NewDust(Position, drawPlayer.width, drawPlayer.height, type, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1.5f);
                        Game1.dust[num41].noGravity = true;
                        Game1.dust[num41].velocity = Vector2.Zero;
                        Game1.dust[num41].position = drawPlayer.Center + Vector2.UnitY * drawPlayer.gfxOffY + (num38 * 6.28318548f + num39 * (float)k).ToRotationVector2() * scaleFactor;
                        Game1.dust[num41].customData = drawPlayer;
                        Game1.playerDrawDust.Add(num41);
                    }
                    goto IL_29F3;
                }
            }
            if (num18 != 1f || num19 != 1f || num20 != 1f || num21 != 1f)
            {
                if (drawPlayer.onFire || drawPlayer.onFire2 || drawPlayer.onFrostBurn)
                {
                    color2 = drawPlayer.GetImmuneAlpha(Microsoft.Xna.Framework.Color.White, shadow);
                    color3 = drawPlayer.GetImmuneAlpha(drawPlayer.eyeColor, shadow);
                    color = drawPlayer.GetImmuneAlpha(drawPlayer.GetHairColor(true), shadow);
                    color4 = drawPlayer.GetImmuneAlpha(drawPlayer.skinColor, shadow);
                    color5 = drawPlayer.GetImmuneAlpha(drawPlayer.skinColor, shadow);
                    color7 = drawPlayer.GetImmuneAlpha(drawPlayer.shirtColor, shadow);
                    color8 = drawPlayer.GetImmuneAlpha(drawPlayer.underShirtColor, shadow);
                    color9 = drawPlayer.GetImmuneAlpha(drawPlayer.pantsColor, shadow);
                    color10 = drawPlayer.GetImmuneAlpha(drawPlayer.shoeColor, shadow);
                    color11 = drawPlayer.GetImmuneAlpha(Microsoft.Xna.Framework.Color.White, shadow);
                    color12 = drawPlayer.GetImmuneAlpha(Microsoft.Xna.Framework.Color.White, shadow);
                    color14 = drawPlayer.GetImmuneAlpha(Microsoft.Xna.Framework.Color.White, shadow);
                }
                else
                {
                    color2 = Game1.buffColor(color2, num18, num19, num20, num21);
                    color3 = Game1.buffColor(color3, num18, num19, num20, num21);
                    color = Game1.buffColor(color, num18, num19, num20, num21);
                    color4 = Game1.buffColor(color4, num18, num19, num20, num21);
                    color5 = Game1.buffColor(color5, num18, num19, num20, num21);
                    color7 = Game1.buffColor(color7, num18, num19, num20, num21);
                    color8 = Game1.buffColor(color8, num18, num19, num20, num21);
                    color9 = Game1.buffColor(color9, num18, num19, num20, num21);
                    color10 = Game1.buffColor(color10, num18, num19, num20, num21);
                    color11 = Game1.buffColor(color11, num18, num19, num20, num21);
                    color12 = Game1.buffColor(color12, num18, num19, num20, num21);
                    color14 = Game1.buffColor(color14, num18, num19, num20, num21);
                }
            }
            if (drawPlayer.socialGhost)
            {
                color2 = Microsoft.Xna.Framework.Color.Transparent;
                color3 = Microsoft.Xna.Framework.Color.Transparent;
                color = Microsoft.Xna.Framework.Color.Transparent;
                color4 = Microsoft.Xna.Framework.Color.Transparent;
                color5 = Microsoft.Xna.Framework.Color.Transparent;
                color7 = Microsoft.Xna.Framework.Color.Transparent;
                color8 = Microsoft.Xna.Framework.Color.Transparent;
                color9 = Microsoft.Xna.Framework.Color.Transparent;
                color10 = Microsoft.Xna.Framework.Color.Transparent;
                color6 = Microsoft.Xna.Framework.Color.Transparent;
                if (color11.A > Game1.gFade)
                {
                    color11.A = Game1.gFade;
                }
                if (color12.A > Game1.gFade)
                {
                    color12.A = Game1.gFade;
                }
                if (color14.A > Game1.gFade)
                {
                    color14.A = Game1.gFade;
                }
            }
            float num42 = 1f;
            if (drawPlayer.inventory[drawPlayer.selectedItem].itemId == 3106)
            {
                float num43 = drawPlayer.stealth;
                if ((double)num43 < 0.03)
                {
                    num43 = 0.03f;
                }
                float num44 = (1f + num43 * 10f) / 11f;
                if (num43 < 0f)
                {
                    num43 = 0f;
                }
                if (num43 >= 1f - shadow && shadow > 0f)
                {
                    num43 = shadow * 0.5f;
                }
                num42 = num44;
                color11 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color11.R * num43)), (int)((byte)((float)color11.G * num43)), (int)((byte)((float)color11.B * num44)), (int)((byte)((float)color11.A * num43)));
                color12 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color12.R * num43)), (int)((byte)((float)color12.G * num43)), (int)((byte)((float)color12.B * num44)), (int)((byte)((float)color12.A * num43)));
                color14 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color14.R * num43)), (int)((byte)((float)color14.G * num43)), (int)((byte)((float)color14.B * num44)), (int)((byte)((float)color14.A * num43)));
                num43 *= num43;
                color2 = Microsoft.Xna.Framework.Color.Multiply(color2, num43);
                color3 = Microsoft.Xna.Framework.Color.Multiply(color3, num43);
                color = Microsoft.Xna.Framework.Color.Multiply(color, num43);
                color4 = Microsoft.Xna.Framework.Color.Multiply(color4, num43);
                color5 = Microsoft.Xna.Framework.Color.Multiply(color5, num43);
                color7 = Microsoft.Xna.Framework.Color.Multiply(color7, num43);
                color8 = Microsoft.Xna.Framework.Color.Multiply(color8, num43);
                color9 = Microsoft.Xna.Framework.Color.Multiply(color9, num43);
                color10 = Microsoft.Xna.Framework.Color.Multiply(color10, num43);
                color6 = Microsoft.Xna.Framework.Color.Multiply(color6, num43);
                color13 = Microsoft.Xna.Framework.Color.Multiply(color13, num43);
                color16 = Microsoft.Xna.Framework.Color.Multiply(color16, num43);
                color17 = Microsoft.Xna.Framework.Color.Multiply(color17, num43);
                color18 = Microsoft.Xna.Framework.Color.Multiply(color18, num43);
                color19 = Microsoft.Xna.Framework.Color.Multiply(color19, num43);
            }
            else if (drawPlayer.shroomiteStealth)
            {
                float num45 = drawPlayer.stealth;
                if ((double)num45 < 0.03)
                {
                    num45 = 0.03f;
                }
                float num46 = (1f + num45 * 10f) / 11f;
                if (num45 < 0f)
                {
                    num45 = 0f;
                }
                if (num45 >= 1f - shadow && shadow > 0f)
                {
                    num45 = shadow * 0.5f;
                }
                num42 = num46;
                color11 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color11.R * num45)), (int)((byte)((float)color11.G * num45)), (int)((byte)((float)color11.B * num46)), (int)((byte)((float)color11.A * num45)));
                color12 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color12.R * num45)), (int)((byte)((float)color12.G * num45)), (int)((byte)((float)color12.B * num46)), (int)((byte)((float)color12.A * num45)));
                color14 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color14.R * num45)), (int)((byte)((float)color14.G * num45)), (int)((byte)((float)color14.B * num46)), (int)((byte)((float)color14.A * num45)));
                num45 *= num45;
                color2 = Microsoft.Xna.Framework.Color.Multiply(color2, num45);
                color3 = Microsoft.Xna.Framework.Color.Multiply(color3, num45);
                color = Microsoft.Xna.Framework.Color.Multiply(color, num45);
                color4 = Microsoft.Xna.Framework.Color.Multiply(color4, num45);
                color5 = Microsoft.Xna.Framework.Color.Multiply(color5, num45);
                color7 = Microsoft.Xna.Framework.Color.Multiply(color7, num45);
                color8 = Microsoft.Xna.Framework.Color.Multiply(color8, num45);
                color9 = Microsoft.Xna.Framework.Color.Multiply(color9, num45);
                color10 = Microsoft.Xna.Framework.Color.Multiply(color10, num45);
                color6 = Microsoft.Xna.Framework.Color.Multiply(color6, num45);
                color13 = Microsoft.Xna.Framework.Color.Multiply(color13, num45);
                color16 = Microsoft.Xna.Framework.Color.Multiply(color16, num45);
                color17 = Microsoft.Xna.Framework.Color.Multiply(color17, num45);
                color18 = Microsoft.Xna.Framework.Color.Multiply(color18, num45);
                color19 = Microsoft.Xna.Framework.Color.Multiply(color19, num45);
            }
            else if (drawPlayer.setVortex)
            {
                float num47 = drawPlayer.stealth;
                if ((double)num47 < 0.03)
                {
                    num47 = 0.03f;
                }
                if (num47 < 0f)
                {
                    num47 = 0f;
                }
                if (num47 >= 1f - shadow && shadow > 0f)
                {
                    num47 = shadow * 0.5f;
                }
                num42 = num47;
                Microsoft.Xna.Framework.Color secondColor = new Microsoft.Xna.Framework.Color(Vector4.Lerp(Vector4.One, new Vector4(0f, 0.12f, 0.16f, 0f), 1f - num47));
                color11 = color11.MultiplyRGBA(secondColor);
                color12 = color12.MultiplyRGBA(secondColor);
                color14 = color14.MultiplyRGBA(secondColor);
                num47 *= num47;
                color2 = Microsoft.Xna.Framework.Color.Multiply(color2, num47);
                color3 = Microsoft.Xna.Framework.Color.Multiply(color3, num47);
                color = Microsoft.Xna.Framework.Color.Multiply(color, num47);
                color4 = Microsoft.Xna.Framework.Color.Multiply(color4, num47);
                color5 = Microsoft.Xna.Framework.Color.Multiply(color5, num47);
                color7 = Microsoft.Xna.Framework.Color.Multiply(color7, num47);
                color8 = Microsoft.Xna.Framework.Color.Multiply(color8, num47);
                color9 = Microsoft.Xna.Framework.Color.Multiply(color9, num47);
                color10 = Microsoft.Xna.Framework.Color.Multiply(color10, num47);
                color6 = Microsoft.Xna.Framework.Color.Multiply(color6, num47);
                color13 = Microsoft.Xna.Framework.Color.Multiply(color13, num47);
                color16 = Microsoft.Xna.Framework.Color.Multiply(color16, num47);
                color17 = Microsoft.Xna.Framework.Color.Multiply(color17, num47);
                color18 = Microsoft.Xna.Framework.Color.Multiply(color18, num47);
                color19 = Microsoft.Xna.Framework.Color.Multiply(color19, num47);
            }
            if (drawPlayer.gravDir == 1f)
            {
                if (drawPlayer.direction == 1)
                {
                    spriteEffects = SpriteEffects.None;
                    effect = SpriteEffects.None;
                }
                else
                {
                    spriteEffects = SpriteEffects.FlipHorizontally;
                    effect = SpriteEffects.FlipHorizontally;
                }
                if (!drawPlayer.dead)
                {
                    drawPlayer.legPosition.Y = 0f;
                    drawPlayer.headPosition.Y = 0f;
                    drawPlayer.bodyPosition.Y = 0f;
                }
            }
            else
            {
                if (drawPlayer.direction == 1)
                {
                    spriteEffects = SpriteEffects.FlipVertically;
                    effect = SpriteEffects.FlipVertically;
                }
                else
                {
                    spriteEffects = (SpriteEffects.FlipHorizontally | SpriteEffects.FlipVertically);
                    effect = (SpriteEffects.FlipHorizontally | SpriteEffects.FlipVertically);
                }
                if (!drawPlayer.dead)
                {
                    drawPlayer.legPosition.Y = 6f;
                    drawPlayer.headPosition.Y = 6f;
                    drawPlayer.bodyPosition.Y = 6f;
                }
            }
            Vector2 vector2 = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.75f);
            Vector2 origin = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.5f);
            Vector2 vector3 = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.4f);
            if (drawPlayer.merman)
            {
                drawPlayer.headRotation = drawPlayer.velocity.Y * (float)drawPlayer.direction * 0.1f;
                if ((double)drawPlayer.headRotation < -0.3)
                {
                    drawPlayer.headRotation = -0.3f;
                }
                if ((double)drawPlayer.headRotation > 0.3)
                {
                    drawPlayer.headRotation = 0.3f;
                }
            }
            else if (!drawPlayer.dead)
            {
                drawPlayer.headRotation = 0f;
            }
            Microsoft.Xna.Framework.Rectangle bodyFrame = drawPlayer.bodyFrame;
            bodyFrame.Y -= 336;
            if (bodyFrame.Y < 0)
            {
                bodyFrame.Y = 0;
            }
            int height = 26;
            int hair = drawPlayer.hair;
            bool flag7 = hair > 50 && (hair < 56 || hair > 63) && (hair < 74 || hair > 77) && (hair < 88 || hair > 89) && hair != 94 && hair != 100 && hair != 104 && hair != 112 && hair < 116;
            if (hair == 133)
            {
                flag7 = true;
            }
            if (flag6)
            {
                bodyFrame.Height = 0;
            }
            else if (flag7)
            {
                if (drawPlayer.head == -1 || flag4 || drawPlayer.head == 23 || drawPlayer.head == 0)
                {
                    value = new DrawData(Game1.playerHairTexture[drawPlayer.hair], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(bodyFrame), color, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
                    value.shader = (int)(-(int)drawPlayer.hairDye);
                    Game1.playerDrawData.Add(value);
                }
                else if (flag5)
                {
                    value = new DrawData(Game1.playerHairAltTexture[drawPlayer.hair], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(bodyFrame), color, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
                    value.shader = (int)(-(int)drawPlayer.hairDye);
                    Game1.playerDrawData.Add(value);
                }
                if (drawPlayer.gravDir == 1f)
                {
                    bodyFrame.Height = height;
                }
            }
            if (drawPlayer.mount.Active)
            {
                drawPlayer.mount.Draw(Game1.playerDrawData, 0, drawPlayer, Position, color13, spriteEffects, shadow);
                drawPlayer.mount.Draw(Game1.playerDrawData, 1, drawPlayer, Position, color13, spriteEffects, shadow);
            }
            if (drawPlayer.carpetFrame >= 0)
            {
                Microsoft.Xna.Framework.Color color20 = color14;
                float num48 = 0f;
                if (drawPlayer.gravDir == -1f)
                {
                    num48 = 10f;
                }
                value = new DrawData(Game1.flyingCarpetTexture, new Vector2((float)((int)(Position.X - Game1.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)(drawPlayer.height / 2) + 28f * drawPlayer.gravDir + num48))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.flyingCarpetTexture.Height / 6 * drawPlayer.carpetFrame, Game1.flyingCarpetTexture.Width, Game1.flyingCarpetTexture.Height / 6)), color20, drawPlayer.bodyRotation, new Vector2((float)(Game1.flyingCarpetTexture.Width / 2), (float)(Game1.flyingCarpetTexture.Height / 8)), 1f, spriteEffects, 0);
                value.shader = shader13;
                Game1.playerDrawData.Add(value);
            }
            if (drawPlayer.electrified && shadow == 0f)
            {
                Texture2D texture2D = Game1.glowMaskTexture[25];
                int num49 = drawPlayer.miscCounter / 5;
                for (int l = 0; l < 2; l++)
                {
                    num49 %= 7;
                    if (num49 <= 1 || num49 >= 5)
                    {
                        value = new DrawData(texture2D, new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num49 * texture2D.Height / 7, texture2D.Width, texture2D.Height / 7)), color15, drawPlayer.bodyRotation, new Vector2((float)(texture2D.Width / 2), (float)(texture2D.Height / 14)), 1f, spriteEffects, 0);
                        Game1.playerDrawData.Add(value);
                    }
                    num49 += 3;
                }
            }
            else if (drawPlayer.webbed && shadow == 0f && drawPlayer.velocity.Y != 0f)
            {
                Microsoft.Xna.Framework.Color color21 = color12 * 0.75f;
                Texture2D texture2D2 = Game1.extraTexture[32];
                value = new DrawData(texture2D2, new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), null, color21, drawPlayer.bodyRotation, texture2D2.Size() / 2f, 1f, spriteEffects, 0);
                Game1.playerDrawData.Add(value);
            }
            bool flag8 = false;
            if ((drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].itemId == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].itemId == 779 || drawPlayer.inventory[drawPlayer.selectedItem].itemId == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].itemId == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170))
            {
                flag8 = true;
                int type2 = drawPlayer.inventory[drawPlayer.selectedItem].itemId;
                int num50 = 1;
                float num51 = -4f;
                float num52 = -8f;
                int shader14 = 0;
                if (drawPlayer.turtleArmor)
                {
                    num50 = 4;
                    shader14 = num6;
                }
                else if (drawPlayer.body == 106)
                {
                    num50 = 6;
                    shader14 = num6;
                }
                else if (drawPlayer.body == 170)
                {
                    num50 = 7;
                    shader14 = num6;
                }
                else if (type2 == 1178)
                {
                    num50 = 1;
                }
                else if (type2 == 779)
                {
                    num50 = 2;
                }
                else if (type2 == 1295)
                {
                    num50 = 3;
                }
                else if (type2 == 1910)
                {
                    num50 = 5;
                }
                if (num50 == 7)
                {
                    value = new DrawData(Game1.BackPackTexture[num50], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, drawPlayer.bodyFrame.Y, Game1.BackPackTexture[num50].Width, drawPlayer.bodyFrame.Height)), color12, drawPlayer.bodyRotation, new Vector2((float)Game1.BackPackTexture[num50].Width * 0.5f, origin.Y), 1f, spriteEffects, 0);
                    value.shader = shader14;
                    Game1.playerDrawData.Add(value);
                }
                else if (num50 == 4 || num50 == 6)
                {
                    value = new DrawData(Game1.BackPackTexture[num50], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                    value.shader = shader14;
                    Game1.playerDrawData.Add(value);
                }
                else
                {
                    value = new DrawData(Game1.BackPackTexture[num50], new Vector2((float)((int)(Position.X - Game1.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction))) + num51 * (float)drawPlayer.direction, (float)((int)(Position.Y - Game1.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + num52 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.BackPackTexture[num50].Width, Game1.BackPackTexture[num50].Height)), color12, drawPlayer.bodyRotation, new Vector2((float)(Game1.BackPackTexture[num50].Width / 2), (float)(Game1.BackPackTexture[num50].Height / 2)), 1f, spriteEffects, 0);
                    value.shader = shader14;
                    Game1.playerDrawData.Add(value);
                }
            }
            if (!flag8 && drawPlayer.back > 0 && drawPlayer.back < 10 && !drawPlayer.mount.Active)
            {
                if (drawPlayer.front >= 1 && drawPlayer.front <= 4)
                {
                    int num53 = drawPlayer.bodyFrame.Y / 56;
                    if (num53 < 1 || num53 > 5)
                    {
                        num2 = 10;
                    }
                    else
                    {
                        if (drawPlayer.front == 1)
                        {
                            num2 = 0;
                        }
                        if (drawPlayer.front == 2)
                        {
                            num2 = 8;
                        }
                        if (drawPlayer.front == 3)
                        {
                            num2 = 0;
                        }
                        if (drawPlayer.front == 4)
                        {
                            num2 = 8;
                        }
                    }
                }
                value = new DrawData(Game1.accBackTexture[(int)drawPlayer.back], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                value.shader = shader4;
                Game1.playerDrawData.Add(value);
            }
            Position.Y += (float)((int)num4 / 2);
            if (!flag8 && drawPlayer.wings > 0)
            {
                this.LoadWings(drawPlayer.wings);
                if (drawPlayer.wings == 22)
                {
                    if ((drawPlayer.velocity.Y != 0f || drawPlayer.grappling[0] != -1) && !drawPlayer.mount.Active)
                    {
                        this.LoadItemFlames(1866);
                        Microsoft.Xna.Framework.Color color22 = color12;
                        int num54 = 24;
                        int num55 = 0;
                        if (shadow == 0f && drawPlayer.grappling[0] == -1)
                        {
                            for (int m = 0; m < 7; m++)
                            {
                                Microsoft.Xna.Framework.Color color23 = new Microsoft.Xna.Framework.Color(250 - m * 10, 250 - m * 10, 250 - m * 10, 150 - m * 10);
                                Vector2 vector4 = new Vector2((float)Game1.rand.Next(-10, 11) * 0.2f, (float)Game1.rand.Next(-10, 11) * 0.2f);
                                num42 *= num42;
                                num42 *= 1f - shadow;
                                color23 = new Microsoft.Xna.Framework.Color((int)((float)color23.R * num42), (int)((float)color23.G * num42), (int)((float)color23.B * num42), (int)((float)color23.A * num42));
                                vector4.X = drawPlayer.itemFlamePos[m].X;
                                vector4.Y = -drawPlayer.itemFlamePos[m].Y;
                                vector4 *= 0.5f;
                                value = new DrawData(Game1.itemFlameTexture[1866], new Vector2((float)((int)(Position.X - Game1.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num55 * drawPlayer.direction), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num54 * drawPlayer.gravDir))) + vector4, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.wingsTexture[drawPlayer.wings].Height / 7 * drawPlayer.wingFrame, Game1.wingsTexture[drawPlayer.wings].Width, Game1.wingsTexture[drawPlayer.wings].Height / 7 - 2)), color23, drawPlayer.bodyRotation, new Vector2((float)(Game1.wingsTexture[drawPlayer.wings].Width / 2), (float)(Game1.wingsTexture[drawPlayer.wings].Height / 14)), 1f, spriteEffects, 0);
                                value.shader = shader12;
                                Game1.playerDrawData.Add(value);
                            }
                        }
                        value = new DrawData(Game1.wingsTexture[drawPlayer.wings], new Vector2((float)((int)(Position.X - Game1.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num55 * drawPlayer.direction), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num54 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.wingsTexture[drawPlayer.wings].Height / 7 * drawPlayer.wingFrame, Game1.wingsTexture[drawPlayer.wings].Width, Game1.wingsTexture[drawPlayer.wings].Height / 7)), color22, drawPlayer.bodyRotation, new Vector2((float)(Game1.wingsTexture[drawPlayer.wings].Width / 2), (float)(Game1.wingsTexture[drawPlayer.wings].Height / 14)), 1f, spriteEffects, 0);
                        value.shader = shader12;
                        Game1.playerDrawData.Add(value);
                    }
                }
                else if (drawPlayer.wings == 28)
                {
                    if ((drawPlayer.velocity.Y != 0f || drawPlayer.grappling[0] != -1) && !drawPlayer.mount.Active)
                    {
                        Microsoft.Xna.Framework.Color value5 = color12;
                        Vector2 value6 = new Vector2(0f, 0f);
                        Texture2D texture2D3 = Game1.wingsTexture[drawPlayer.wings];
                        Vector2 vec = Position + drawPlayer.Size * new Vector2(0.5f, 1f) - Game1.screenPosition + value6 * drawPlayer.Directions;
                        Microsoft.Xna.Framework.Rectangle rectangle = texture2D3.Frame(1, 4, 0, drawPlayer.miscCounter / 5 % 4);
                        rectangle.Width -= 2;
                        rectangle.Height -= 2;
                        value = new DrawData(texture2D3, vec.Floor(), new Microsoft.Xna.Framework.Rectangle?(rectangle), Microsoft.Xna.Framework.Color.Lerp(value5, Microsoft.Xna.Framework.Color.White, 1f), drawPlayer.bodyRotation, rectangle.Size() / 2f, 1f, spriteEffects, 0);
                        value.shader = shader12;
                        Game1.playerDrawData.Add(value);
                        texture2D3 = Game1.extraTexture[38];
                        value = new DrawData(texture2D3, vec.Floor(), new Microsoft.Xna.Framework.Rectangle?(rectangle), Microsoft.Xna.Framework.Color.Lerp(value5, Microsoft.Xna.Framework.Color.White, 0.5f), drawPlayer.bodyRotation, rectangle.Size() / 2f, 1f, spriteEffects, 0);
                        value.shader = shader12;
                        Game1.playerDrawData.Add(value);
                    }
                }
                else if (drawPlayer.wings == 34)
                {
                    if ((drawPlayer.velocity.Y != 0f || drawPlayer.grappling[0] != -1) && !drawPlayer.mount.Active)
                    {
                        num42 *= num42;
                        num42 *= 1f - shadow;
                        Microsoft.Xna.Framework.Color color24 = new Microsoft.Xna.Framework.Color((int)(250f * num42), (int)(250f * num42), (int)(250f * num42), (int)(100f * num42));
                        Vector2 value7 = new Vector2(0f, 0f);
                        Texture2D texture2D4 = Game1.wingsTexture[drawPlayer.wings];
                        Vector2 vec2 = Position + drawPlayer.Size / 2f - Game1.screenPosition + value7 * drawPlayer.Directions - Vector2.UnitX * (float)drawPlayer.direction * 4f;
                        Microsoft.Xna.Framework.Rectangle rectangle2 = texture2D4.Frame(1, 6, 0, drawPlayer.wingFrame);
                        rectangle2.Width -= 2;
                        rectangle2.Height -= 2;
                        value = new DrawData(texture2D4, vec2.Floor(), new Microsoft.Xna.Framework.Rectangle?(rectangle2), color24, drawPlayer.bodyRotation, rectangle2.Size() / 2f, 1f, spriteEffects, 0);
                        value.shader = shader12;
                        Game1.playerDrawData.Add(value);
                    }
                }
                else
                {
                    int num56 = 0;
                    int num57 = 0;
                    if (drawPlayer.wings == 5)
                    {
                        num57 = 4;
                        num56 -= 4;
                    }
                    else if (drawPlayer.wings == 27)
                    {
                        num57 = 4;
                    }
                    Microsoft.Xna.Framework.Color color25 = color12;
                    if (drawPlayer.wings == 9 || drawPlayer.wings == 29)
                    {
                        num42 *= num42;
                        num42 *= 1f - shadow;
                        color25 = new Microsoft.Xna.Framework.Color((int)(250f * num42), (int)(250f * num42), (int)(250f * num42), (int)(100f * num42));
                    }
                    if (drawPlayer.wings == 10)
                    {
                        num42 *= num42;
                        num42 *= 1f - shadow;
                        color25 = new Microsoft.Xna.Framework.Color((int)(250f * num42), (int)(250f * num42), (int)(250f * num42), (int)(175f * num42));
                    }
                    if (drawPlayer.wings == 11 && color25.A > Game1.gFade)
                    {
                        color25.A = Game1.gFade;
                    }
                    if (drawPlayer.wings == 31)
                    {
                        color25.A = (byte)(220f * num42);
                    }
                    if (drawPlayer.wings == 32)
                    {
                        color25.A = (byte)(127f * num42);
                    }
                    value = new DrawData(Game1.wingsTexture[drawPlayer.wings], new Vector2((float)((int)(Position.X - Game1.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num57 * drawPlayer.direction), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num56 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Game1.wingsTexture[drawPlayer.wings].Width, Game1.wingsTexture[drawPlayer.wings].Height / 4)), color25, drawPlayer.bodyRotation, new Vector2((float)(Game1.wingsTexture[drawPlayer.wings].Width / 2), (float)(Game1.wingsTexture[drawPlayer.wings].Height / 8)), 1f, spriteEffects, 0);
                    value.shader = shader12;
                    Game1.playerDrawData.Add(value);
                    if (drawPlayer.wings == 23)
                    {
                        num42 *= num42;
                        num42 *= 1f - shadow;
                        color25 = new Microsoft.Xna.Framework.Color((int)(200f * num42), (int)(200f * num42), (int)(200f * num42), (int)(200f * num42));
                        value = new DrawData(Game1.FlameTexture[8], new Vector2((float)((int)(Position.X - Game1.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num57 * drawPlayer.direction), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num56 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Game1.wingsTexture[drawPlayer.wings].Width, Game1.wingsTexture[drawPlayer.wings].Height / 4)), color25, drawPlayer.bodyRotation, new Vector2((float)(Game1.wingsTexture[drawPlayer.wings].Width / 2), (float)(Game1.wingsTexture[drawPlayer.wings].Height / 8)), 1f, spriteEffects, 0);
                        value.shader = shader12;
                        Game1.playerDrawData.Add(value);
                    }
                    else if (drawPlayer.wings == 27)
                    {
                        value = new DrawData(Game1.glowMaskTexture[92], new Vector2((float)((int)(Position.X - Game1.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num57 * drawPlayer.direction), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num56 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Game1.wingsTexture[drawPlayer.wings].Width, Game1.wingsTexture[drawPlayer.wings].Height / 4)), new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * num42 * (1f - shadow), drawPlayer.bodyRotation, new Vector2((float)(Game1.wingsTexture[drawPlayer.wings].Width / 2), (float)(Game1.wingsTexture[drawPlayer.wings].Height / 8)), 1f, spriteEffects, 0);
                        value.shader = shader12;
                        Game1.playerDrawData.Add(value);
                    }
                    else if (drawPlayer.wings == 30)
                    {
                        value = new DrawData(Game1.glowMaskTexture[181], new Vector2((float)((int)(Position.X - Game1.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num57 * drawPlayer.direction), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num56 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Game1.wingsTexture[drawPlayer.wings].Width, Game1.wingsTexture[drawPlayer.wings].Height / 4)), new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * num42 * (1f - shadow), drawPlayer.bodyRotation, new Vector2((float)(Game1.wingsTexture[drawPlayer.wings].Width / 2), (float)(Game1.wingsTexture[drawPlayer.wings].Height / 8)), 1f, spriteEffects, 0);
                        value.shader = shader12;
                        Game1.playerDrawData.Add(value);
                    }
                    else if (drawPlayer.wings == 29)
                    {
                        value = new DrawData(Game1.wingsTexture[drawPlayer.wings], new Vector2((float)((int)(Position.X - Game1.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num57 * drawPlayer.direction), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num56 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Game1.wingsTexture[drawPlayer.wings].Width, Game1.wingsTexture[drawPlayer.wings].Height / 4)), new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * num42 * (1f - shadow) * 0.5f, drawPlayer.bodyRotation, new Vector2((float)(Game1.wingsTexture[drawPlayer.wings].Width / 2), (float)(Game1.wingsTexture[drawPlayer.wings].Height / 8)), 1.06f, spriteEffects, 0);
                        value.shader = shader12;
                        Game1.playerDrawData.Add(value);
                    }
                    else if (drawPlayer.wings == 36)
                    {
                        value = new DrawData(Game1.glowMaskTexture[213], new Vector2((float)((int)(Position.X - Game1.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num57 * drawPlayer.direction), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num56 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Game1.wingsTexture[drawPlayer.wings].Width, Game1.wingsTexture[drawPlayer.wings].Height / 4)), new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * num42 * (1f - shadow), drawPlayer.bodyRotation, new Vector2((float)(Game1.wingsTexture[drawPlayer.wings].Width / 2), (float)(Game1.wingsTexture[drawPlayer.wings].Height / 8)), 1.06f, spriteEffects, 0);
                        value.shader = shader12;
                        Game1.playerDrawData.Add(value);
                        Vector2 spinningpoint = new Vector2(0f, 2f - shadow * 2f);
                        for (int n = 0; n < 4; n++)
                        {
                            value = new DrawData(Game1.glowMaskTexture[213], spinningpoint.RotatedBy((double)(1.57079637f * (float)n), default(Vector2)) + new Vector2((float)((int)(Position.X - Game1.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num57 * drawPlayer.direction), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num56 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Game1.wingsTexture[drawPlayer.wings].Width, Game1.wingsTexture[drawPlayer.wings].Height / 4)), new Microsoft.Xna.Framework.Color(127, 127, 127, 127) * num42 * (1f - shadow), drawPlayer.bodyRotation, new Vector2((float)(Game1.wingsTexture[drawPlayer.wings].Width / 2), (float)(Game1.wingsTexture[drawPlayer.wings].Height / 8)), 1f, spriteEffects, 0);
                            value.shader = shader12;
                            Game1.playerDrawData.Add(value);
                        }
                    }
                    else if (drawPlayer.wings == 31)
                    {
                        Microsoft.Xna.Framework.Color value8 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
                        value8 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.HotPink, Microsoft.Xna.Framework.Color.Crimson, (float)Math.Cos((double)(6.28318548f * ((float)drawPlayer.miscCounter / 100f))) * 0.4f + 0.5f);
                        value8.A = 0;
                        for (int num58 = 0; num58 < 4; num58++)
                        {
                            Vector2 value9 = new Vector2((float)Math.Cos((double)(6.28318548f * ((float)drawPlayer.miscCounter / 60f))) * 0.5f + 0.5f, 0f).RotatedBy((double)((float)num58 * 1.57079637f), default(Vector2)) * 1f;
                            value = new DrawData(Game1.wingsTexture[drawPlayer.wings], new Vector2((float)((int)(Position.X - Game1.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num57 * drawPlayer.direction), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num56 * drawPlayer.gravDir))) + value9, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Game1.wingsTexture[drawPlayer.wings].Width, Game1.wingsTexture[drawPlayer.wings].Height / 4)), value8 * num42 * (1f - shadow) * 0.5f, drawPlayer.bodyRotation, new Vector2((float)(Game1.wingsTexture[drawPlayer.wings].Width / 2), (float)(Game1.wingsTexture[drawPlayer.wings].Height / 8)), 1f, spriteEffects, 0);
                            value.shader = shader12;
                            Game1.playerDrawData.Add(value);
                        }
                        value = new DrawData(Game1.wingsTexture[drawPlayer.wings], new Vector2((float)((int)(Position.X - Game1.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num57 * drawPlayer.direction), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num56 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Game1.wingsTexture[drawPlayer.wings].Width, Game1.wingsTexture[drawPlayer.wings].Height / 4)), value8 * num42 * (1f - shadow) * 1f, drawPlayer.bodyRotation, new Vector2((float)(Game1.wingsTexture[drawPlayer.wings].Width / 2), (float)(Game1.wingsTexture[drawPlayer.wings].Height / 8)), 1f, spriteEffects, 0);
                        value.shader = shader12;
                        Game1.playerDrawData.Add(value);
                    }
                    else if (drawPlayer.wings == 32)
                    {
                        value = new DrawData(Game1.glowMaskTexture[183], new Vector2((float)((int)(Position.X - Game1.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num57 * drawPlayer.direction), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num56 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.wingsTexture[drawPlayer.wings].Height / 4 * drawPlayer.wingFrame, Game1.wingsTexture[drawPlayer.wings].Width, Game1.wingsTexture[drawPlayer.wings].Height / 4)), new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * num42 * (1f - shadow), drawPlayer.bodyRotation, new Vector2((float)(Game1.wingsTexture[drawPlayer.wings].Width / 2), (float)(Game1.wingsTexture[drawPlayer.wings].Height / 8)), 1.06f, spriteEffects, 0);
                        value.shader = shader12;
                        Game1.playerDrawData.Add(value);
                    }
                }
            }
            if (drawPlayer.balloon > 0)
            {
                int num59 = DateTime.Now.Millisecond % 800 / 200;
                Vector2 vector5 = Game1.OffsetsPlayerOffhand[drawPlayer.bodyFrame.Y / 56];
                if (drawPlayer.direction != 1)
                {
                    vector5.X = (float)drawPlayer.width - vector5.X;
                }
                if (drawPlayer.gravDir != 1f)
                {
                    vector5.Y -= (float)drawPlayer.height;
                }
                value = new DrawData(Game1.accBalloonTexture[(int)drawPlayer.balloon], new Vector2((float)((int)(Position.X - Game1.screenPosition.X + vector5.X)), (float)((int)(Position.Y - Game1.screenPosition.Y + vector5.Y * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.accBalloonTexture[(int)drawPlayer.balloon].Height / 4 * num59, Game1.accBalloonTexture[(int)drawPlayer.balloon].Width, Game1.accBalloonTexture[(int)drawPlayer.balloon].Height / 4)), color12, drawPlayer.bodyRotation, new Vector2((float)(26 + drawPlayer.direction * 4), 28f + drawPlayer.gravDir * 6f), 1f, spriteEffects, 0);
                value.shader = shader11;
                Game1.playerDrawData.Add(value);
            }
            Position.Y -= (float)((int)num4 / 2);
            if (drawPlayer.body != 83 && drawPlayer.body != 82 && drawPlayer.body != 93)
            {
                value = new DrawData(Game1.playerTextures[skinVariant, 3], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                Game1.playerDrawData.Add(value);
                if (drawPlayer.legs != 67 && drawPlayer.legs != 106 && drawPlayer.shoe != 15)
                {
                    value = new DrawData(Game1.playerTextures[skinVariant, 10], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color6, drawPlayer.legRotation, origin, 1f, spriteEffects, 0);
                    Game1.playerDrawData.Add(value);
                }
            }
            if (drawPlayer.wearsRobe)
            {
                goto IL_5B69;
            }
        IL_5833:
            if (drawPlayer.legs > 0 && drawPlayer.legs < 135 && (drawPlayer.shoe != 15 || drawPlayer.wearsRobe))
            {
                if (!drawPlayer.invis)
                {
                    value = new DrawData(Game1.armorLegTexture[drawPlayer.legs], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color14, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
                    value.shader = shader;
                    Game1.playerDrawData.Add(value);
                    if (num15 != -1)
                    {
                        value = new DrawData(Game1.glowMaskTexture[num15], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color19, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
                        value.shader = shader;
                        Game1.playerDrawData.Add(value);
                    }
                }
            }
            else if (!drawPlayer.invis && drawPlayer.shoe != 15)
            {
                value = new DrawData(Game1.playerTextures[skinVariant, 11], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color9, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
                Game1.playerDrawData.Add(value);
                value = new DrawData(Game1.playerTextures[skinVariant, 12], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color10, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
                Game1.playerDrawData.Add(value);
            }
            if (drawPlayer.wearsRobe)
            {
                goto IL_5C44;
            }
        IL_5B69:
            if (drawPlayer.shoe > 0 && drawPlayer.shoe < 18)
            {
                value = new DrawData(Game1.accShoesTexture[(int)drawPlayer.shoe], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color14, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
                value.shader = shader6;
                Game1.playerDrawData.Add(value);
            }
            if (drawPlayer.wearsRobe)
            {
                goto IL_5833;
            }
        IL_5C44:
            if (skinVariant == 3 && (drawPlayer.body <= 0 || drawPlayer.body >= 195) && !drawPlayer.invis)
            {
                value = new DrawData(Game1.playerTextures[skinVariant, 14], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color7, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
                Game1.playerDrawData.Add(value);
            }
            if (drawPlayer.body > 0 && drawPlayer.body < 195)
            {
                Microsoft.Xna.Framework.Rectangle bodyFrame2 = drawPlayer.bodyFrame;
                int num60 = num2;
                bodyFrame2.X += num60;
                bodyFrame2.Width -= num60;
                if (drawPlayer.direction == -1)
                {
                    num60 = 0;
                }
                if (!drawPlayer.invis || (drawPlayer.body != 21 && drawPlayer.body != 22))
                {
                    Texture2D texture;
                    if (!drawPlayer.Male)
                    {
                        texture = Game1.femaleBodyTexture[drawPlayer.body];
                    }
                    else
                    {
                        texture = Game1.armorBodyTexture[drawPlayer.body];
                    }
                    value = new DrawData(texture, new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)) + num60), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(bodyFrame2), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                    value.shader = num6;
                    Game1.playerDrawData.Add(value);
                    if (num13 != -1)
                    {
                        value = new DrawData(Game1.glowMaskTexture[num13], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)) + num60), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(bodyFrame2), color17, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                        value.shader = num6;
                        Game1.playerDrawData.Add(value);
                    }
                }
                if (flag && !drawPlayer.invis)
                {
                    value = new DrawData(Game1.playerTextures[skinVariant, 5], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                    Game1.playerDrawData.Add(value);
                }
            }
            else if (!drawPlayer.invis)
            {
                if (!drawPlayer.Male)
                {
                    value = new DrawData(Game1.playerTextures[skinVariant, 4], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color8, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                    Game1.playerDrawData.Add(value);
                    value = new DrawData(Game1.playerTextures[skinVariant, 6], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color7, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                    Game1.playerDrawData.Add(value);
                }
                else
                {
                    value = new DrawData(Game1.playerTextures[skinVariant, 4], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color8, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                    Game1.playerDrawData.Add(value);
                    value = new DrawData(Game1.playerTextures[skinVariant, 6], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color7, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                    Game1.playerDrawData.Add(value);
                }
                value = new DrawData(Game1.playerTextures[skinVariant, 5], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                Game1.playerDrawData.Add(value);
            }
            if (drawPlayer.handoff > 0 && drawPlayer.handoff < 12)
            {
                value = new DrawData(Game1.accHandsOffTexture[(int)drawPlayer.handoff], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                value.shader = shader3;
                Game1.playerDrawData.Add(value);
            }
            if (drawPlayer.waist > 0 && drawPlayer.waist < 12)
            {
                Microsoft.Xna.Framework.Rectangle legFrame = drawPlayer.legFrame;
                if (legFrame.Y >= 1064)
                {
                    legFrame.Y = 0;
                }
                value = new DrawData(Game1.accWaistTexture[(int)drawPlayer.waist], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(legFrame), color14, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
                value.shader = shader7;
                Game1.playerDrawData.Add(value);
            }
            if (drawPlayer.neck > 0 && drawPlayer.neck < 9)
            {
                value = new DrawData(Game1.accNeckTexture[(int)drawPlayer.neck], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                value.shader = shader9;
                Game1.playerDrawData.Add(value);
            }
            if (!drawPlayer.invis && drawPlayer.head != 38 && drawPlayer.head != 135)
            {
                value = new DrawData(Game1.playerTextures[skinVariant, 0], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
                Game1.playerDrawData.Add(value);
                value = new DrawData(Game1.playerTextures[skinVariant, 1], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color2, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
                Game1.playerDrawData.Add(value);
                value = new DrawData(Game1.playerTextures[skinVariant, 2], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color3, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
                Game1.playerDrawData.Add(value);
                if (drawPlayer.yoraiz0rDarkness)
                {
                    value = new DrawData(Game1.extraTexture[67], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
                    Game1.playerDrawData.Add(value);
                }
            }
            if (flag4)
            {
                value = new DrawData(Game1.armorHeadTexture[drawPlayer.head], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
                value.shader = num5;
                Game1.playerDrawData.Add(value);
                if (!drawPlayer.invis)
                {
                    value = new DrawData(Game1.playerHairTexture[drawPlayer.hair], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(bodyFrame), color, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
                    value.shader = (int)(-(int)drawPlayer.hairDye);
                    Game1.playerDrawData.Add(value);
                }
            }
            if (flag5 && !drawPlayer.invis)
            {
                value = new DrawData(Game1.playerHairAltTexture[drawPlayer.hair], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(bodyFrame), color, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
                value.shader = (int)(-(int)drawPlayer.hairDye);
                Game1.playerDrawData.Add(value);
            }
            if (drawPlayer.head == 23)
            {
                if (!drawPlayer.invis)
                {
                    value = new DrawData(Game1.playerHairTexture[drawPlayer.hair], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(bodyFrame), color, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
                    value.shader = (int)(-(int)drawPlayer.hairDye);
                    Game1.playerDrawData.Add(value);
                }
                value = new DrawData(Game1.armorHeadTexture[drawPlayer.head], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
                value.shader = num5;
                Game1.playerDrawData.Add(value);
            }
            else if (drawPlayer.head == 14 || drawPlayer.head == 56 || drawPlayer.head == 114 || drawPlayer.head == 158 || drawPlayer.head == 69 || drawPlayer.head == 180)
            {
                Microsoft.Xna.Framework.Rectangle bodyFrame3 = drawPlayer.bodyFrame;
                Vector2 origin2 = vector3;
                if (drawPlayer.gravDir == 1f)
                {
                    if (bodyFrame3.Y != 0)
                    {
                        bodyFrame3.Y -= 2;
                        bodyFrame3.Height -= 8;
                        origin2.Y += 2f;
                    }
                }
                else if (bodyFrame3.Y != 0)
                {
                    bodyFrame3.Y -= 2;
                    origin2.Y -= 10f;
                    bodyFrame3.Height -= 8;
                }
                value = new DrawData(Game1.armorHeadTexture[drawPlayer.head], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(bodyFrame3), color11, drawPlayer.headRotation, origin2, 1f, spriteEffects, 0);
                value.shader = num5;
                Game1.playerDrawData.Add(value);
            }
            else if (drawPlayer.head > 0 && drawPlayer.head < 194 && drawPlayer.head != 28)
            {
                if (!drawPlayer.invis || (drawPlayer.head != 39 && drawPlayer.head != 38))
                {
                    if (drawPlayer.head == 13)
                    {
                        int num61 = 0;
                        int num62 = 0;
                        if (drawPlayer.armor[num62] != null && drawPlayer.armor[num62].itemId == 205 && drawPlayer.armor[num62].stack > 0)
                        {
                            num61 += drawPlayer.armor[num62].stack;
                        }
                        num62 = 10;
                        if (drawPlayer.armor[num62] != null && drawPlayer.armor[num62].itemId == 205 && drawPlayer.armor[num62].stack > 0)
                        {
                            num61 += drawPlayer.armor[num62].stack;
                        }
                        float num63 = 0.05235988f;
                        float num64 = num63 * drawPlayer.position.X % 6.28318548f;
                        for (int num65 = 0; num65 < num61; num65++)
                        {
                            float num66 = Vector2.UnitY.RotatedBy((double)(num64 + num63 * (float)num65), default(Vector2)).X * ((float)num65 / 30f) * 2f;
                            value = new DrawData(Game1.armorHeadTexture[drawPlayer.head], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))) + num66, (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f - (float)(4 * num65)))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
                            value.shader = num5;
                            Game1.playerDrawData.Add(value);
                        }
                    }
                    else
                    {
                        value = new DrawData(Game1.armorHeadTexture[drawPlayer.head], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
                        value.shader = num5;
                        Game1.playerDrawData.Add(value);
                        if (num12 != -1)
                        {
                            value = new DrawData(Game1.glowMaskTexture[num12], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color16, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
                            value.shader = num5;
                            Game1.playerDrawData.Add(value);
                        }
                    }
                }
            }
            else if (!drawPlayer.invis && drawPlayer.face != 3 && drawPlayer.face != 2 && drawPlayer.face != 4)
            {
                value = new DrawData(Game1.playerHairTexture[drawPlayer.hair], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(bodyFrame), color, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
                value.shader = (int)(-(int)drawPlayer.hairDye);
                Game1.playerDrawData.Add(value);
            }
            if (drawPlayer.head == 137)
            {
                value = new DrawData(Game1.jackHatTexture, new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), new Microsoft.Xna.Framework.Color(255, 255, 255, 255), drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
                Game1.playerDrawData.Add(value);
                for (int num67 = 0; num67 < 7; num67++)
                {
                    Microsoft.Xna.Framework.Color color26 = new Microsoft.Xna.Framework.Color(110 - num67 * 10, 110 - num67 * 10, 110 - num67 * 10, 110 - num67 * 10);
                    Vector2 vector6 = new Vector2((float)Game1.rand.Next(-10, 11) * 0.2f, (float)Game1.rand.Next(-10, 11) * 0.2f);
                    vector6.X = drawPlayer.itemFlamePos[num67].X;
                    vector6.Y = drawPlayer.itemFlamePos[num67].Y;
                    vector6 *= 0.5f;
                    value = new DrawData(Game1.jackHatTexture, new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3 + vector6, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color26, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
                    Game1.playerDrawData.Add(value);
                }
            }
            if (drawPlayer.face > 0 && drawPlayer.face < 9)
            {
                if (drawPlayer.face == 7)
                {
                    value = new DrawData(Game1.accFaceTexture[(int)drawPlayer.face], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), new Microsoft.Xna.Framework.Color(200, 200, 200, 150), drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
                    value.shader = shader10;
                    Game1.playerDrawData.Add(value);
                }
                else
                {
                    value = new DrawData(Game1.accFaceTexture[(int)drawPlayer.face], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
                    value.shader = shader10;
                    Game1.playerDrawData.Add(value);
                }
            }
            if (drawPlayer.mount.Active)
            {
                drawPlayer.mount.Draw(Game1.playerDrawData, 2, drawPlayer, Position, color13, spriteEffects, shadow);
                drawPlayer.mount.Draw(Game1.playerDrawData, 3, drawPlayer, Position, color13, spriteEffects, shadow);
            }
            if (drawPlayer.pulley && drawPlayer.itemAnimation == 0)
            {
                if (drawPlayer.pulleyDir == 2)
                {
                    int num68 = -26;
                    int num69 = 0;
                    float rotation2 = 0f;
                    value = new DrawData(Game1.pulleyTexture, new Vector2((float)((int)(Position.X - Game1.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num69 * drawPlayer.direction), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num68 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.pulleyTexture.Height / 2 * drawPlayer.pulleyFrame, Game1.pulleyTexture.Width, Game1.pulleyTexture.Height / 2)), color11, rotation2, new Vector2((float)(Game1.pulleyTexture.Width / 2), (float)(Game1.pulleyTexture.Height / 4)), 1f, spriteEffects, 0);
                    Game1.playerDrawData.Add(value);
                }
                else
                {
                    int num70 = -26;
                    int num71 = 10;
                    float rotation3 = 0.35f * (float)(-(float)drawPlayer.direction);
                    value = new DrawData(Game1.pulleyTexture, new Vector2((float)((int)(Position.X - Game1.screenPosition.X + (float)(drawPlayer.width / 2) - (float)(9 * drawPlayer.direction)) + num71 * drawPlayer.direction), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)(drawPlayer.height / 2) + 2f * drawPlayer.gravDir + (float)num70 * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.pulleyTexture.Height / 2 * drawPlayer.pulleyFrame, Game1.pulleyTexture.Width, Game1.pulleyTexture.Height / 2)), color11, rotation3, new Vector2((float)(Game1.pulleyTexture.Width / 2), (float)(Game1.pulleyTexture.Height / 4)), 1f, spriteEffects, 0);
                    Game1.playerDrawData.Add(value);
                }
            }
            if (drawPlayer.shield > 0 && drawPlayer.shield < 6)
            {
                value = new DrawData(Game1.accShieldTexture[(int)drawPlayer.shield], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                value.shader = shader8;
                Game1.playerDrawData.Add(value);
                if (drawPlayer.mount.Cart)
                {
                    Game1.playerDrawData.Reverse(Game1.playerDrawData.Count - 2, 2);
                }
            }
            if (drawPlayer.solarShields > 0 && shadow == 0f)
            {
                Texture2D texture2D5 = Game1.extraTexture[61 + drawPlayer.solarShields - 1];
                Microsoft.Xna.Framework.Color color27 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
                float num72 = (drawPlayer.solarShieldPos[0] * new Vector2(1f, 0.5f)).ToRotation();
                if (drawPlayer.direction == -1)
                {
                    num72 += 3.14159274f;
                }
                num72 += 0.06283186f * (float)drawPlayer.direction;
                value = new DrawData(texture2D5, new Vector2((float)((int)(Position.X - Game1.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)(drawPlayer.height / 2)))) + drawPlayer.solarShieldPos[0], null, color27, num72, texture2D5.Size() / 2f, 1f, spriteEffects, 0);
                value.shader = num6;
                Game1.playerDrawData.Add(value);
            }
            if (drawPlayer.heldProj >= 0 && shadow == 0f && !flag3)
            {
                num = Game1.playerDrawData.Count;
            }
            Microsoft.Xna.Framework.Color color28 = Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0));
            if (drawPlayer.inventory[drawPlayer.selectedItem].itemId == 678)
            {
                color28 = Microsoft.Xna.Framework.Color.White;
            }
            if (drawPlayer.shroomiteStealth && drawPlayer.inventory[drawPlayer.selectedItem].ranged)
            {
                float num73 = drawPlayer.stealth;
                if ((double)num73 < 0.03)
                {
                    num73 = 0.03f;
                }
                float num74 = (1f + num73 * 10f) / 11f;
                color28 = new Microsoft.Xna.Framework.Color((int)((byte)((float)color28.R * num73)), (int)((byte)((float)color28.G * num73)), (int)((byte)((float)color28.B * num74)), (int)((byte)((float)color28.A * num73)));
            }
            if (drawPlayer.setVortex && drawPlayer.inventory[drawPlayer.selectedItem].ranged)
            {
                float num75 = drawPlayer.stealth;
                if ((double)num75 < 0.03)
                {
                    num75 = 0.03f;
                }
                float arg_7DC4_0 = (1f + num75 * 10f) / 11f;
                color28 = color28.MultiplyRGBA(new Microsoft.Xna.Framework.Color(Vector4.Lerp(Vector4.One, new Vector4(0f, 0.12f, 0.16f, 0f), 1f - num75)));
            }
            if (shadow == 0f && !drawPlayer.frozen && (drawPlayer.itemAnimation > 0 || (drawPlayer.inventory[drawPlayer.selectedItem].holdStyle > 0 && !drawPlayer.pulley)) && drawPlayer.inventory[drawPlayer.selectedItem].itemId > 0 && !drawPlayer.dead && !drawPlayer.inventory[drawPlayer.selectedItem].noUseGraphic && (!drawPlayer.wet || !drawPlayer.inventory[drawPlayer.selectedItem].noWet))
            {
                string arg_7EA0_0 = drawPlayer.name;
                ItemSlot.GetItemLight(ref color28, drawPlayer.inventory[drawPlayer.selectedItem], false);
                if (drawPlayer.inventory[drawPlayer.selectedItem].itemId == 3476)
                {
                    Texture2D texture2D6 = Game1.extraTexture[64];
                    Microsoft.Xna.Framework.Rectangle rectangle3 = texture2D6.Frame(1, 9, 0, drawPlayer.miscCounter % 54 / 6);
                    Vector2 value10 = new Vector2((float)(rectangle3.Width / 2 * drawPlayer.direction), 0f);
                    Vector2 origin3 = rectangle3.Size() / 2f;
                    value = new DrawData(texture2D6, (value2 - Game1.screenPosition + value10).Floor(), new Microsoft.Xna.Framework.Rectangle?(rectangle3), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color28).MultiplyRGBA(new Microsoft.Xna.Framework.Color(new Vector4(0.5f, 0.5f, 0.5f, 0.8f))), drawPlayer.itemRotation, origin3, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
                    Game1.playerDrawData.Add(value);
                    texture2D6 = Game1.glowMaskTexture[195];
                    value = new DrawData(texture2D6, (value2 - Game1.screenPosition + value10).Floor(), new Microsoft.Xna.Framework.Rectangle?(rectangle3), new Microsoft.Xna.Framework.Color(250, 250, 250, drawPlayer.inventory[drawPlayer.selectedItem].alpha) * 0.5f, drawPlayer.itemRotation, origin3, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
                    Game1.playerDrawData.Add(value);
                }
                else if (drawPlayer.inventory[drawPlayer.selectedItem].useStyle == 5)
                {
                    bool flag9 = Item.staff[drawPlayer.inventory[drawPlayer.selectedItem].itemId];
                    if (flag9)
                    {
                        float num76 = drawPlayer.itemRotation + 0.785f * (float)drawPlayer.direction;
                        int num77 = 0;
                        int num78 = 0;
                        Vector2 zero = new Vector2(0f, (float)Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Height);
                        if (drawPlayer.inventory[drawPlayer.selectedItem].itemId == 3210)
                        {
                            num77 = 8 * -drawPlayer.direction;
                            num78 = 2 * (int)drawPlayer.gravDir;
                        }
                        if (drawPlayer.gravDir == -1f)
                        {
                            if (drawPlayer.direction == -1)
                            {
                                num76 += 1.57f;
                                zero = new Vector2((float)Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Width, 0f);
                                num77 -= Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Width;
                            }
                            else
                            {
                                num76 -= 1.57f;
                                zero = Vector2.Zero;
                            }
                        }
                        else if (drawPlayer.direction == -1)
                        {
                            zero = new Vector2((float)Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Width, (float)Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Height);
                            num77 -= Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Width;
                        }
                        value = new DrawData(Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId], new Vector2((float)((int)(value2.X - Game1.screenPosition.X + zero.X + (float)num77)), (float)((int)(value2.Y - Game1.screenPosition.Y + (float)num78))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Width, Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color28), num76, zero, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
                        Game1.playerDrawData.Add(value);
                    }
                    else
                    {
                        Vector2 vector7 = new Vector2((float)(Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Width / 2), (float)(Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Height / 2));
                        Vector2 vector8 = this.DrawPlayerItemPos(drawPlayer.gravDir, drawPlayer.inventory[drawPlayer.selectedItem].itemId);
                        int num79 = (int)vector8.X;
                        vector7.Y = vector8.Y;
                        Vector2 origin4 = new Vector2((float)(-(float)num79), (float)(Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Height / 2));
                        if (drawPlayer.direction == -1)
                        {
                            origin4 = new Vector2((float)(Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Width + num79), (float)(Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Height / 2));
                        }
                        value = new DrawData(Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId], new Vector2((float)((int)(value2.X - Game1.screenPosition.X + vector7.X)), (float)((int)(value2.Y - Game1.screenPosition.Y + vector7.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Width, Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color28), drawPlayer.itemRotation, origin4, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
                        Game1.playerDrawData.Add(value);
                        if (drawPlayer.inventory[drawPlayer.selectedItem].color != default(Microsoft.Xna.Framework.Color))
                        {
                            value = new DrawData(Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId], new Vector2((float)((int)(value2.X - Game1.screenPosition.X + vector7.X)), (float)((int)(value2.Y - Game1.screenPosition.Y + vector7.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Width, Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetColor(color28), drawPlayer.itemRotation, origin4, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
                            Game1.playerDrawData.Add(value);
                        }
                        if (drawPlayer.inventory[drawPlayer.selectedItem].glowMask != -1)
                        {
                            value = new DrawData(Game1.glowMaskTexture[(int)drawPlayer.inventory[drawPlayer.selectedItem].glowMask], new Vector2((float)((int)(value2.X - Game1.screenPosition.X + vector7.X)), (float)((int)(value2.Y - Game1.screenPosition.Y + vector7.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Width, Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, drawPlayer.inventory[drawPlayer.selectedItem].alpha), drawPlayer.itemRotation, origin4, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
                            Game1.playerDrawData.Add(value);
                        }
                    }
                }
                else if (drawPlayer.gravDir == -1f)
                {
                    value = new DrawData(Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId], new Vector2((float)((int)(value2.X - Game1.screenPosition.X)), (float)((int)(value2.Y - Game1.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Width, Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color28), drawPlayer.itemRotation, new Vector2((float)Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Width * 0.5f - (float)Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Width * 0.5f * (float)drawPlayer.direction, 0f), drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
                    Game1.playerDrawData.Add(value);
                    if (drawPlayer.inventory[drawPlayer.selectedItem].color != default(Microsoft.Xna.Framework.Color))
                    {
                        value = new DrawData(Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId], new Vector2((float)((int)(value2.X - Game1.screenPosition.X)), (float)((int)(value2.Y - Game1.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Width, Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetColor(color28), drawPlayer.itemRotation, new Vector2((float)Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Width * 0.5f - (float)Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Width * 0.5f * (float)drawPlayer.direction, 0f), drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
                        Game1.playerDrawData.Add(value);
                    }
                    if (drawPlayer.inventory[drawPlayer.selectedItem].glowMask != -1)
                    {
                        value = new DrawData(Game1.glowMaskTexture[(int)drawPlayer.inventory[drawPlayer.selectedItem].glowMask], new Vector2((float)((int)(value2.X - Game1.screenPosition.X)), (float)((int)(value2.Y - Game1.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Width, Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, drawPlayer.inventory[drawPlayer.selectedItem].alpha), drawPlayer.itemRotation, new Vector2((float)Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Width * 0.5f - (float)Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Width * 0.5f * (float)drawPlayer.direction, 0f), drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
                        Game1.playerDrawData.Add(value);
                    }
                }
                else
                {
                    if (drawPlayer.inventory[drawPlayer.selectedItem].itemId == 425 || drawPlayer.inventory[drawPlayer.selectedItem].itemId == 507)
                    {
                        if (drawPlayer.gravDir == 1f)
                        {
                            if (drawPlayer.direction == 1)
                            {
                                effect = SpriteEffects.FlipVertically;
                            }
                            else
                            {
                                effect = (SpriteEffects.FlipHorizontally | SpriteEffects.FlipVertically);
                            }
                        }
                        else if (drawPlayer.direction == 1)
                        {
                            effect = SpriteEffects.None;
                        }
                        else
                        {
                            effect = SpriteEffects.FlipHorizontally;
                        }
                    }
                    int type3 = drawPlayer.inventory[drawPlayer.selectedItem].itemId;
                    value = new DrawData(Game1.itemTexture[type3], new Vector2((float)((int)(value2.X - Game1.screenPosition.X)), (float)((int)(value2.Y - Game1.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.itemTexture[type3].Width, Game1.itemTexture[type3].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color28), drawPlayer.itemRotation, new Vector2((float)Game1.itemTexture[type3].Width * 0.5f - (float)Game1.itemTexture[type3].Width * 0.5f * (float)drawPlayer.direction, (float)Game1.itemTexture[type3].Height), drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
                    Game1.playerDrawData.Add(value);
                    if (drawPlayer.inventory[drawPlayer.selectedItem].color != default(Microsoft.Xna.Framework.Color))
                    {
                        value = new DrawData(Game1.itemTexture[type3], new Vector2((float)((int)(value2.X - Game1.screenPosition.X)), (float)((int)(value2.Y - Game1.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.itemTexture[type3].Width, Game1.itemTexture[type3].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetColor(color28), drawPlayer.itemRotation, new Vector2((float)Game1.itemTexture[type3].Width * 0.5f - (float)Game1.itemTexture[type3].Width * 0.5f * (float)drawPlayer.direction, (float)Game1.itemTexture[type3].Height), drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
                        Game1.playerDrawData.Add(value);
                    }
                    if (drawPlayer.inventory[drawPlayer.selectedItem].glowMask != -1)
                    {
                        value = new DrawData(Game1.glowMaskTexture[(int)drawPlayer.inventory[drawPlayer.selectedItem].glowMask], new Vector2((float)((int)(value2.X - Game1.screenPosition.X)), (float)((int)(value2.Y - Game1.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.itemTexture[type3].Width, Game1.itemTexture[type3].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, drawPlayer.inventory[drawPlayer.selectedItem].alpha), drawPlayer.itemRotation, new Vector2((float)Game1.itemTexture[type3].Width * 0.5f - (float)Game1.itemTexture[type3].Width * 0.5f * (float)drawPlayer.direction, (float)Game1.itemTexture[type3].Height), drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
                        Game1.playerDrawData.Add(value);
                    }
                    if (drawPlayer.inventory[drawPlayer.selectedItem].flame && shadow == 0f)
                    {
                        try
                        {
                            this.LoadItemFlames(type3);
                            if (Game1.itemFlameTexture[type3] != null)
                            {
                                for (int num80 = 0; num80 < 7; num80++)
                                {
                                    Microsoft.Xna.Framework.Color color29 = new Microsoft.Xna.Framework.Color(100, 100, 100, 0);
                                    if (type3 == 3045)
                                    {
                                        color29 = new Microsoft.Xna.Framework.Color(Game1.DiscoR, Game1.DiscoG, Game1.DiscoB, 0);
                                    }
                                    float x = drawPlayer.itemFlamePos[num80].X;
                                    float y = drawPlayer.itemFlamePos[num80].Y;
                                    value = new DrawData(Game1.itemFlameTexture[type3], new Vector2((float)((int)(value2.X - Game1.screenPosition.X)) + x, (float)((int)(value2.Y - Game1.screenPosition.Y)) + y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.itemTexture[type3].Width, Game1.itemTexture[type3].Height)), color29, drawPlayer.itemRotation, new Vector2((float)Game1.itemTexture[type3].Width * 0.5f - (float)Game1.itemTexture[type3].Width * 0.5f * (float)drawPlayer.direction, (float)Game1.itemTexture[type3].Height), drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
                                    Game1.playerDrawData.Add(value);
                                }
                            }
                        }
                        catch
                        {
                        }
                    }
                }
            }
            if (drawPlayer.body > 0 && drawPlayer.body < 195)
            {
                Microsoft.Xna.Framework.Rectangle bodyFrame4 = drawPlayer.bodyFrame;
                int num81 = num2;
                bodyFrame4.X += num81;
                bodyFrame4.Width -= num81;
                if (drawPlayer.direction == -1)
                {
                    num81 = 0;
                }
                if (!drawPlayer.invis || (drawPlayer.body != 21 && drawPlayer.body != 22))
                {
                    if (flag && !drawPlayer.invis)
                    {
                        int arg_9002_0 = drawPlayer.body;
                        if (flag2)
                        {
                            value = new DrawData(Game1.playerTextures[skinVariant, 7], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                            Game1.playerDrawData.Add(value);
                        }
                        value = new DrawData(Game1.playerTextures[skinVariant, 9], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                        Game1.playerDrawData.Add(value);
                    }
                    value = new DrawData(Game1.armorArmTexture[drawPlayer.body], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)) + num81), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(bodyFrame4), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                    value.shader = num6;
                    Game1.playerDrawData.Add(value);
                    if (num14 != -1)
                    {
                        value = new DrawData(Game1.glowMaskTexture[num14], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)) + num81), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(bodyFrame4), color18, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                        value.shader = num6;
                        Game1.playerDrawData.Add(value);
                    }
                }
            }
            else if (!drawPlayer.invis)
            {
                value = new DrawData(Game1.playerTextures[skinVariant, 7], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                Game1.playerDrawData.Add(value);
                value = new DrawData(Game1.playerTextures[skinVariant, 8], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color8, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                Game1.playerDrawData.Add(value);
                value = new DrawData(Game1.playerTextures[skinVariant, 13], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color7, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                Game1.playerDrawData.Add(value);
            }
            if (drawPlayer.handon > 0 && drawPlayer.handon < 19)
            {
                value = new DrawData(Game1.accHandsOnTexture[(int)drawPlayer.handon], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                value.shader = shader2;
                Game1.playerDrawData.Add(value);
            }
            if (drawPlayer.inventory[drawPlayer.selectedItem].itemId > -1 && Item.claw[drawPlayer.inventory[drawPlayer.selectedItem].itemId] && shadow == 0f && !drawPlayer.frozen && (drawPlayer.itemAnimation > 0 || (drawPlayer.inventory[drawPlayer.selectedItem].holdStyle > 0 && !drawPlayer.pulley)) && drawPlayer.inventory[drawPlayer.selectedItem].itemId > 0 && !drawPlayer.dead && !drawPlayer.inventory[drawPlayer.selectedItem].noUseGraphic && (!drawPlayer.wet || !drawPlayer.inventory[drawPlayer.selectedItem].noWet))
            {
                if (drawPlayer.gravDir == -1f)
                {
                    value = new DrawData(Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId], new Vector2((float)((int)(value2.X - Game1.screenPosition.X)), (float)((int)(value2.Y - Game1.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Width, Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color28), drawPlayer.itemRotation, new Vector2((float)Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Width * 0.5f - (float)Game1.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].itemId].Width * 0.5f * (float)drawPlayer.direction, 0f), drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
                    Game1.playerDrawData.Add(value);
                }
                else
                {
                    int type4 = drawPlayer.inventory[drawPlayer.selectedItem].itemId;
                    value = new DrawData(Game1.itemTexture[type4], new Vector2((float)((int)(value2.X - Game1.screenPosition.X)), (float)((int)(value2.Y - Game1.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.itemTexture[type4].Width, Game1.itemTexture[type4].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color28), drawPlayer.itemRotation, new Vector2((float)Game1.itemTexture[type4].Width * 0.5f - (float)Game1.itemTexture[type4].Width * 0.5f * (float)drawPlayer.direction, (float)Game1.itemTexture[type4].Height), drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
                    Game1.playerDrawData.Add(value);
                }
            }
            if (drawPlayer.heldProj >= 0 && shadow == 0f && flag3)
            {
                num = Game1.playerDrawData.Count;
            }
            if (!flag8 && drawPlayer.front > 0 && drawPlayer.front < 5 && !drawPlayer.mount.Active)
            {
                value = new DrawData(Game1.accFrontTexture[(int)drawPlayer.front], new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
                value.shader = shader5;
                Game1.playerDrawData.Add(value);
            }
            if (drawPlayer.frozen && shadow == 0f)
            {
                Microsoft.Xna.Framework.Color color30 = color12;
                color30.R = (byte)((double)color30.R * 0.55);
                color30.G = (byte)((double)color30.G * 0.55);
                color30.B = (byte)((double)color30.B * 0.55);
                color30.A = (byte)((double)color30.A * 0.55);
                value = new DrawData(Game1.frozenTexture, new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.frozenTexture.Width, Game1.frozenTexture.Height)), color30, drawPlayer.bodyRotation, new Vector2((float)(Game1.frozenTexture.Width / 2), (float)(Game1.frozenTexture.Height / 2)), 1f, spriteEffects, 0);
                Game1.playerDrawData.Add(value);
            }
            else if (drawPlayer.webbed && shadow == 0f && drawPlayer.velocity.Y == 0f)
            {
                Microsoft.Xna.Framework.Color color31 = color12 * 0.75f;
                Texture2D texture2D7 = Game1.extraTexture[31];
                int num82 = drawPlayer.height / 2;
                value = new DrawData(texture2D7, new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f + (float)num82))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), null, color31, drawPlayer.bodyRotation, texture2D7.Size() / 2f, 1f, spriteEffects, 0);
                Game1.playerDrawData.Add(value);
            }
            if (drawPlayer.electrified && shadow == 0f)
            {
                Texture2D texture2D8 = Game1.glowMaskTexture[25];
                int num83 = drawPlayer.miscCounter / 5;
                for (int num84 = 0; num84 < 2; num84++)
                {
                    num83 %= 7;
                    if (num83 > 1 && num83 < 5)
                    {
                        value = new DrawData(texture2D8, new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num83 * texture2D8.Height / 7, texture2D8.Width, texture2D8.Height / 7)), color15, drawPlayer.bodyRotation, new Vector2((float)(texture2D8.Width / 2), (float)(texture2D8.Height / 14)), 1f, spriteEffects, 0);
                        Game1.playerDrawData.Add(value);
                    }
                    num83 += 3;
                }
            }
            if (drawPlayer.iceBarrier && shadow == 0f)
            {
                int num85 = this.iceBarrierTexture.Height / 12;
                Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
                value = new DrawData(this.iceBarrierTexture, new Vector2((float)((int)(Position.X - Game1.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num85 * (int)drawPlayer.iceBarrierFrame, this.iceBarrierTexture.Width, num85)), white, 0f, new Vector2((float)(Game1.frozenTexture.Width / 2), (float)(Game1.frozenTexture.Height / 2)), 1f, spriteEffects, 0);
                Game1.playerDrawData.Add(value);
            }
            if (drawPlayer.gem >= 0 && shadow == 0f)
            {
                value = new DrawData(Game1.gemTexture[drawPlayer.gem], new Vector2((float)((int)(Position.X - Game1.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)drawPlayer.height - 80f))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.gemTexture[drawPlayer.gem].Width, Game1.gemTexture[drawPlayer.gem].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, (int)(Game1.mouseTextColor / 2)), 0f, new Vector2((float)(Game1.gemTexture[drawPlayer.gem].Width / 2), (float)(Game1.gemTexture[drawPlayer.gem].Height / 2)), (float)Game1.mouseTextColor / 1000f + 0.8f, SpriteEffects.None, 0);
                Game1.playerDrawData.Add(value);
            }
            if ((drawPlayer.beetleOffense || drawPlayer.beetleDefense) && shadow == 0f)
            {
                for (int num86 = 0; num86 < drawPlayer.beetleOrbs; num86++)
                {
                    for (int num87 = 0; num87 < 5; num87++)
                    {
                        Microsoft.Xna.Framework.Color color32 = color12;
                        float num88 = (float)num87 * 0.1f;
                        num88 = 0.5f - num88;
                        color32.R = (byte)((float)color32.R * num88);
                        color32.G = (byte)((float)color32.G * num88);
                        color32.B = (byte)((float)color32.B * num88);
                        color32.A = (byte)((float)color32.A * num88);
                        Vector2 value11 = -drawPlayer.beetleVel[num86] * (float)num87;
                        value = new DrawData(Game1.beetleTexture, new Vector2((float)((int)(Position.X - Game1.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)(drawPlayer.height / 2)))) + drawPlayer.beetlePos[num86] + value11, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.beetleTexture.Height / 3 * drawPlayer.beetleFrame + 1, Game1.beetleTexture.Width, Game1.beetleTexture.Height / 3 - 2)), color32, 0f, new Vector2((float)(Game1.beetleTexture.Width / 2), (float)(Game1.beetleTexture.Height / 6)), 1f, spriteEffects, 0);
                        Game1.playerDrawData.Add(value);
                    }
                    value = new DrawData(Game1.beetleTexture, new Vector2((float)((int)(Position.X - Game1.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Game1.screenPosition.Y + (float)(drawPlayer.height / 2)))) + drawPlayer.beetlePos[num86], new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.beetleTexture.Height / 3 * drawPlayer.beetleFrame + 1, Game1.beetleTexture.Width, Game1.beetleTexture.Height / 3 - 2)), color12, 0f, new Vector2((float)(Game1.beetleTexture.Width / 2), (float)(Game1.beetleTexture.Height / 6)), 1f, spriteEffects, 0);
                    Game1.playerDrawData.Add(value);
                }
            }
            if (rotation != 0f)
            {
                Vector2 value12 = Position - Game1.screenPosition + rotationOrigin;
                Vector2 value13 = drawPlayer.position + rotationOrigin;
                Matrix matrix = Matrix.CreateRotationZ(rotation);
                for (int num89 = 0; num89 < Game1.playerDrawDust.Count; num89++)
                {
                    Vector2 vector9 = Game1.dust[Game1.playerDrawDust[num89]].position - value13;
                    vector9 = Vector2.Transform(vector9, matrix);
                    Game1.dust[Game1.playerDrawDust[num89]].position = vector9 + value13;
                }
                for (int num90 = 0; num90 < Game1.playerDrawGore.Count; num90++)
                {
                    Vector2 vector10 = Game1.gore[Game1.playerDrawGore[num90]].position - value13;
                    vector10 = Vector2.Transform(vector10, matrix);
                    Game1.gore[Game1.playerDrawGore[num90]].position = vector10 + value13;
                }
                for (int num91 = 0; num91 < Game1.playerDrawData.Count; num91++)
                {
                    value = Game1.playerDrawData[num91];
                    if (!value.ignorePlayerRotation)
                    {
                        Vector2 vector11 = value.position - value12;
                        vector11 = Vector2.Transform(vector11, matrix);
                        value.position = vector11 + value12;
                        value.rotation += rotation;
                        Game1.playerDrawData[num91] = value;
                    }
                }
            }
            int num92 = -1;
            for (int num93 = 0; num93 <= Game1.playerDrawData.Count; num93++)
            {
                if (num == num93)
                {
                    if (num92 != 0)
                    {
                        //Game1.pixelShader.CurrentTechnique.Passes[0].Apply();
                        num92 = 0;
                    }
                    Game1.projectile[drawPlayer.heldProj].gfxOffY = drawPlayer.gfxOffY;
                    try
                    {
                        this.DrawProj(drawPlayer.heldProj);
                    }
                    catch
                    {
                        Game1.projectile[drawPlayer.heldProj].active = false;
                    }
                }
                if (num93 != Game1.playerDrawData.Count)
                {
                    value = Game1.playerDrawData[num93];
                    if (!value.sourceRect.HasValue)
                    {
                        value.sourceRect = new Microsoft.Xna.Framework.Rectangle?(value.texture.Frame(1, 1, 0, 0));
                    }
                    if (value.shader >= 0)
                    {
                        GameShaders.Hair.Apply(0, drawPlayer, new DrawData?(value));
                        GameShaders.Armor.Apply(value.shader, drawPlayer, new DrawData?(value));
                    }
                    else if (drawPlayer.head == 0)
                    {
                        GameShaders.Hair.Apply(0, drawPlayer, new DrawData?(value));
                        GameShaders.Armor.Apply(num5, drawPlayer, new DrawData?(value));
                    }
                    else
                    {
                        GameShaders.Armor.Apply(0, drawPlayer, new DrawData?(value));
                        GameShaders.Hair.Apply((short)(-(short)value.shader), drawPlayer, new DrawData?(value));
                    }
                    num92 = value.shader;
                    value.Draw(Game1.spriteBatch);
                }
            }

            try
            {
                //Game1.pixelShader.CurrentTechnique.Passes[0].Apply();
            }
            catch { }

            if (drawPlayer.mount.Active && drawPlayer.mount.Type == 11)
            {
                for (int num94 = 0; num94 < 1000; num94++)
                {
                    if (Game1.projectile[num94].active && Game1.projectile[num94].owner == drawPlayer.whoAmI && Game1.projectile[num94].type == 591)
                    {
                        Game1.instance.DrawProj(num94);
                    }
                }
            }
        }
        protected void DrawItem(Item item, int whoami)
        {
            int arg_22_0 = (int)((double)item.position.X + (double)item.width * 0.5) / 16;
            int arg_28_0 = Lighting.offScreenTiles;
            int arg_4B_0 = (int)((double)item.position.Y + (double)item.height * 0.5) / 16;
            int arg_51_0 = Lighting.offScreenTiles;
            Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)((double)item.position.X + (double)item.width * 0.5) / 16, (int)((double)item.position.Y + (double)item.height * 0.5) / 16);
            if (!Game1.gamePaused && base.IsActive && item.itemId >= 71 && item.itemId <= 74 && (double)(Math.Abs(item.velocity.X) + Math.Abs(item.velocity.Y)) > 0.2)
            {
                float num = (float)Game1.rand.Next(500) - (Math.Abs(item.velocity.X) + Math.Abs(item.velocity.Y)) * 20f;
                int num2 = item.itemId - 72;
                num -= (float)(num2 * 20);
                int type = 244 + item.itemId - 71;
                if (item.isBeingGrabbed)
                {
                    num /= 100f;
                }
                if (num < (float)(color.R / 70 + 1))
                {
                    int num3 = Dust.NewDust(item.position - new Vector2(1f, 2f), item.width, item.height, type, 0f, 0f, 254, default(Microsoft.Xna.Framework.Color), 0.25f);
                    Game1.dust[num3].velocity *= 0f;
                }
            }
            float rotation = item.velocity.X * 0.2f;
            float scale = 1f;
            Microsoft.Xna.Framework.Color alpha = item.GetAlpha(color);
            ItemSlot.GetItemLight(ref alpha, ref scale, item, false);
            float num4 = (float)(item.height - Game1.itemTexture[item.itemId].Height);
            float num5 = (float)(item.width / 2 - Game1.itemTexture[item.itemId].Width / 2);
            if (item.itemId >= 71 && item.itemId <= 74)
            {
                int num6 = item.itemId - 71;
                Game1.itemFrameCounter[whoami]++;
                if (Game1.itemFrameCounter[whoami] > 5)
                {
                    Game1.itemFrameCounter[whoami] = 0;
                    Game1.itemFrame[whoami]++;
                }
                if (Game1.itemFrame[whoami] > 7)
                {
                    Game1.itemFrame[whoami] = 0;
                }
                int width = Game1.coinTexture[num6].Width;
                int num7 = Game1.coinTexture[num6].Height / 8;
                num5 = (float)(item.width / 2 - Game1.coinTexture[num6].Width / 2);
                Game1.spriteBatch.Draw(Game1.coinTexture[num6], new Vector2(item.position.X - Game1.screenPosition.X + (float)(width / 2) + num5, item.position.Y - Game1.screenPosition.Y + (float)(num7 / 2) + num4), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.itemFrame[whoami] * num7 + 1, Game1.itemTexture[item.itemId].Width, num7)), alpha, rotation, new Vector2((float)(width / 2), (float)(num7 / 2)), scale, SpriteEffects.None, 0f);
                return;
            }
            if (ItemID.Sets.NebulaPickup[item.itemId])
            {
                Game1.itemFrameCounter[whoami]++;
                if (Game1.itemFrameCounter[whoami] > 5)
                {
                    Game1.itemFrameCounter[whoami] = 0;
                    Game1.itemFrame[whoami]++;
                }
                if (Game1.itemFrame[whoami] >= 4)
                {
                    Game1.itemFrame[whoami] = 0;
                }
                Microsoft.Xna.Framework.Rectangle rectangle = Game1.itemTexture[item.itemId].Frame(1, 4, 0, Game1.itemFrame[whoami]);
                num5 = (float)(item.width / 2 - rectangle.Width / 2);
                num4 = (float)(item.height - rectangle.Height);
                Game1.spriteBatch.Draw(Game1.itemTexture[item.itemId], new Vector2(item.position.X - Game1.screenPosition.X + (float)(rectangle.Width / 2) + num5, item.position.Y - Game1.screenPosition.Y + (float)(rectangle.Height / 2) + num4), new Microsoft.Xna.Framework.Rectangle?(rectangle), alpha, rotation, rectangle.Size() / 2f, scale, SpriteEffects.None, 0f);
                return;
            }
            if (ItemID.Sets.AnimatesAsSoul[item.itemId])
            {
                Game1.itemFrameCounter[whoami]++;
                if (Game1.itemFrameCounter[whoami] > 5)
                {
                    Game1.itemFrameCounter[whoami] = 0;
                    Game1.itemFrame[whoami]++;
                }
                if (Game1.itemFrame[whoami] >= 4)
                {
                    Game1.itemFrame[whoami] = 0;
                }
                Microsoft.Xna.Framework.Rectangle rectangle2 = Game1.itemTexture[item.itemId].Frame(1, 4, 0, Game1.itemFrame[whoami]);
                num5 = (float)(item.width / 2 - rectangle2.Width / 2);
                num4 = (float)(item.height - rectangle2.Height);
                Game1.spriteBatch.Draw(Game1.itemTexture[item.itemId], new Vector2(item.position.X - Game1.screenPosition.X + (float)(rectangle2.Width / 2) + num5, item.position.Y - Game1.screenPosition.Y + (float)(rectangle2.Height / 2) + num4), new Microsoft.Xna.Framework.Rectangle?(rectangle2), alpha, rotation, rectangle2.Size() / 2f, scale, SpriteEffects.None, 0f);
                return;
            }
            if (item.itemId >= 1522 && item.itemId <= 1527)
            {
                Game1.spriteBatch.Draw(Game1.itemTexture[item.itemId], new Vector2(item.position.X - Game1.screenPosition.X + (float)(Game1.itemTexture[item.itemId].Width / 2) + num5, item.position.Y - Game1.screenPosition.Y + (float)(Game1.itemTexture[item.itemId].Height / 2) + num4 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.itemTexture[item.itemId].Width, Game1.itemTexture[item.itemId].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, (int)(Game1.mouseTextColor / 2)), rotation, new Vector2((float)(Game1.itemTexture[item.itemId].Width / 2), (float)(Game1.itemTexture[item.itemId].Height / 2)), (float)Game1.mouseTextColor / 1000f + 0.8f, SpriteEffects.None, 0f);
                return;
            }
            Game1.spriteBatch.Draw(Game1.itemTexture[item.itemId], new Vector2(item.position.X - Game1.screenPosition.X + (float)(Game1.itemTexture[item.itemId].Width / 2) + num5, item.position.Y - Game1.screenPosition.Y + (float)(Game1.itemTexture[item.itemId].Height / 2) + num4 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.itemTexture[item.itemId].Width, Game1.itemTexture[item.itemId].Height)), alpha, rotation, new Vector2((float)(Game1.itemTexture[item.itemId].Width / 2), (float)(Game1.itemTexture[item.itemId].Height / 2)), scale, SpriteEffects.None, 0f);
            if (item.color != default(Microsoft.Xna.Framework.Color))
            {
                Game1.spriteBatch.Draw(Game1.itemTexture[item.itemId], new Vector2(item.position.X - Game1.screenPosition.X + (float)(Game1.itemTexture[item.itemId].Width / 2) + num5, item.position.Y - Game1.screenPosition.Y + (float)(Game1.itemTexture[item.itemId].Height / 2) + num4 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.itemTexture[item.itemId].Width, Game1.itemTexture[item.itemId].Height)), item.GetColor(color), rotation, new Vector2((float)(Game1.itemTexture[item.itemId].Width / 2), (float)(Game1.itemTexture[item.itemId].Height / 2)), scale, SpriteEffects.None, 0f);
            }
            if (item.glowMask != -1)
            {
                Game1.spriteBatch.Draw(Game1.glowMaskTexture[(int)item.glowMask], new Vector2(item.position.X - Game1.screenPosition.X + (float)(Game1.itemTexture[item.itemId].Width / 2) + num5, item.position.Y - Game1.screenPosition.Y + (float)(Game1.itemTexture[item.itemId].Height / 2) + num4 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.itemTexture[item.itemId].Width, Game1.itemTexture[item.itemId].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, item.alpha), rotation, new Vector2((float)(Game1.itemTexture[item.itemId].Width / 2), (float)(Game1.itemTexture[item.itemId].Height / 2)), scale, SpriteEffects.None, 0f);
            }
        }
        protected void DrawRain()
        {
            bool isActive = base.IsActive;
            Microsoft.Xna.Framework.Rectangle[] array = new Microsoft.Xna.Framework.Rectangle[6];
            for (int i = 0; i < array.Length; i++)
            {
                array[i] = new Microsoft.Xna.Framework.Rectangle(i * 4, 0, 2, 40);
            }
            for (int j = 0; j < Game1.maxRain; j++)
            {
                if (Game1.rain[j].active)
                {
                    Rain rain = Game1.rain[j];
                    Game1.spriteBatch.Draw(Game1.rainTexture, rain.position - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(array[(int)rain.type]), Lighting.GetColor((int)(rain.position.X + 4f) >> 4, (int)(rain.position.Y + 4f) >> 4) * 0.85f, rain.rotation, Vector2.Zero, rain.scale, SpriteEffects.None, 0f);
                    if (isActive)
                    {
                        rain.Update();
                    }
                }
            }
            TimeLogger.DetailedDrawTime(23);
        }
        protected void DrawDust()
        {
            Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)Game1.screenPosition.X - 500, (int)Game1.screenPosition.Y - 50, Game1.screenWidth + 1000, Game1.screenHeight + 100);
            rectangle = new Microsoft.Xna.Framework.Rectangle((int)Game1.screenPosition.X - 1000, (int)Game1.screenPosition.Y - 1050, Game1.screenWidth + 2000, Game1.screenHeight + 2100);
            Microsoft.Xna.Framework.Rectangle rectangle2;
            rectangle = (rectangle2 = rectangle);
            ArmorShaderData armorShaderData = null;
            Game1.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullNone, null, this.Transform);
            for (int i = 0; i < Game1.numDust; i++)
            {
                Dust dust = Game1.dust[i];
                if (dust.active)
                {
                    if ((dust.type >= 130 && dust.type <= 134) || (dust.type >= 219 && dust.type <= 223) || dust.type == 226)
                    {
                        rectangle = rectangle2;
                    }
                    if (new Microsoft.Xna.Framework.Rectangle((int)dust.position.X, (int)dust.position.Y, 4, 4).Intersects(rectangle))
                    {
                        float scale = dust.scale;
                        if (dust.shader != armorShaderData)
                        {
                            Game1.spriteBatch.End();
                            armorShaderData = dust.shader;
                            if (armorShaderData == null)
                            {
                                Game1.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullNone, null, this.Transform);
                            }
                            else
                            {
                                Game1.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullNone, null, this.Transform);
                                dust.shader.Apply(null, null);
                            }
                        }
                        if (dust.type >= 130 && dust.type <= 134)
                        {
                            float num = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
                            num *= 0.3f;
                            num *= 10f;
                            if (num > 10f)
                            {
                                num = 10f;
                            }
                            int num2 = 0;
                            while ((float)num2 < num)
                            {
                                Vector2 velocity = dust.velocity;
                                Vector2 value = dust.position - velocity * (float)num2;
                                float scale2 = dust.scale * (1f - (float)num2 / 10f);
                                Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
                                color = dust.GetAlpha(color);
                                Game1.spriteBatch.Draw(Game1.dustTexture, value - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), color, dust.rotation, new Vector2(4f, 4f), scale2, SpriteEffects.None, 0f);
                                num2++;
                            }
                        }
                        else if (dust.type >= 219 && dust.type <= 223 && dust.fadeIn == 0f)
                        {
                            float num3 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
                            num3 *= 0.3f;
                            num3 *= 10f;
                            if (num3 > 10f)
                            {
                                num3 = 10f;
                            }
                            int num4 = 0;
                            while ((float)num4 < num3)
                            {
                                Vector2 velocity2 = dust.velocity;
                                Vector2 value2 = dust.position - velocity2 * (float)num4;
                                float scale3 = dust.scale * (1f - (float)num4 / 10f);
                                Microsoft.Xna.Framework.Color color2 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
                                color2 = dust.GetAlpha(color2);
                                Game1.spriteBatch.Draw(Game1.dustTexture, value2 - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), color2, dust.rotation, new Vector2(4f, 4f), scale3, SpriteEffects.None, 0f);
                                num4++;
                            }
                        }
                        else if (dust.type == 264 && dust.fadeIn == 0f)
                        {
                            float num5 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
                            num5 *= 10f;
                            if (num5 > 10f)
                            {
                                num5 = 10f;
                            }
                            int num6 = 0;
                            while ((float)num6 < num5)
                            {
                                Vector2 velocity3 = dust.velocity;
                                Vector2 value3 = dust.position - velocity3 * (float)num6;
                                float scale4 = dust.scale * (1f - (float)num6 / 10f);
                                Microsoft.Xna.Framework.Color color3 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
                                color3 = dust.GetAlpha(color3) * 0.3f;
                                Game1.spriteBatch.Draw(Game1.dustTexture, value3 - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), color3, dust.rotation, new Vector2(5f), scale4, SpriteEffects.None, 0f);
                                color3 = dust.GetColor(color3);
                                Game1.spriteBatch.Draw(Game1.dustTexture, value3 - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), color3, dust.rotation, new Vector2(5f), scale4, SpriteEffects.None, 0f);
                                num6++;
                            }
                        }
                        else if (dust.type == 226 && dust.fadeIn == 0f)
                        {
                            float num7 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
                            num7 *= 0.3f;
                            num7 *= 10f;
                            if (num7 > 10f)
                            {
                                num7 = 10f;
                            }
                            int num8 = 0;
                            while ((float)num8 < num7)
                            {
                                Vector2 velocity4 = dust.velocity;
                                Vector2 value4 = dust.position - velocity4 * (float)num8;
                                float scale5 = dust.scale * (1f - (float)num8 / 10f);
                                Microsoft.Xna.Framework.Color color4 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
                                color4 = dust.GetAlpha(color4);
                                Game1.spriteBatch.Draw(Game1.dustTexture, value4 - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), color4, dust.rotation, new Vector2(4f, 4f), scale5, SpriteEffects.None, 0f);
                                num8++;
                            }
                        }
                        Microsoft.Xna.Framework.Color color5 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
                        if (dust.type == 6 || dust.type == 15 || (dust.noLight && dust.type < 86 && dust.type > 91) || (dust.type >= 59 && dust.type <= 64))
                        {
                            color5 = Microsoft.Xna.Framework.Color.White;
                        }
                        color5 = dust.GetAlpha(color5);
                        if (dust.type == 213)
                        {
                            scale = 1f;
                        }
                        Game1.spriteBatch.Draw(Game1.dustTexture, dust.position - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), color5, dust.rotation, new Vector2(4f, 4f), scale, SpriteEffects.None, 0f);
                        if (dust.color != default(Microsoft.Xna.Framework.Color))
                        {
                            Game1.spriteBatch.Draw(Game1.dustTexture, dust.position - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), dust.GetColor(color5), dust.rotation, new Vector2(4f, 4f), scale, SpriteEffects.None, 0f);
                        }
                        if (color5 == Microsoft.Xna.Framework.Color.Black)
                        {
                            dust.active = false;
                        }
                    }
                    else
                    {
                        dust.active = false;
                    }
                }
            }
            Game1.spriteBatch.End();
            //Game1.pixelShader.CurrentTechnique.Passes[0].Apply();
            TimeLogger.DetailedDrawTime(25);
        }

        private static void HelpText()
        {
            bool flag = false;
            if (Game1.player[Game1.myPlayer].statLifeMax > 100)
            {
                flag = true;
            }
            bool flag2 = false;
            if (Game1.player[Game1.myPlayer].statManaMax > 0)
            {
                flag2 = true;
            }
            bool flag3 = true;
            bool flag4 = false;
            bool flag5 = false;
            bool flag6 = false;
            bool flag7 = false;
            bool flag8 = false;
            bool flag9 = false;
            for (int i = 0; i < 58; i++)
            {
                if (Game1.player[Game1.myPlayer].inventory[i].pick > 0 && Game1.player[Game1.myPlayer].inventory[i].name != "Copper Pickaxe")
                {
                    flag3 = false;
                }
                if (Game1.player[Game1.myPlayer].inventory[i].axe > 0 && Game1.player[Game1.myPlayer].inventory[i].name != "Copper Axe")
                {
                    flag3 = false;
                }
                if (Game1.player[Game1.myPlayer].inventory[i].hammer > 0)
                {
                    flag3 = false;
                }
                if (Game1.player[Game1.myPlayer].inventory[i].itemId == 11 || Game1.player[Game1.myPlayer].inventory[i].itemId == 12 || Game1.player[Game1.myPlayer].inventory[i].itemId == 13 || Game1.player[Game1.myPlayer].inventory[i].itemId == 14)
                {
                    flag4 = true;
                }
                if (Game1.player[Game1.myPlayer].inventory[i].itemId == 19 || Game1.player[Game1.myPlayer].inventory[i].itemId == 20 || Game1.player[Game1.myPlayer].inventory[i].itemId == 21 || Game1.player[Game1.myPlayer].inventory[i].itemId == 22)
                {
                    flag5 = true;
                }
                if (Game1.player[Game1.myPlayer].inventory[i].itemId == 75)
                {
                    flag6 = true;
                }
                if (Game1.player[Game1.myPlayer].inventory[i].itemId == 38)
                {
                    flag7 = true;
                }
                if (Game1.player[Game1.myPlayer].inventory[i].itemId == 68 || Game1.player[Game1.myPlayer].inventory[i].itemId == 70 || Game1.player[Game1.myPlayer].inventory[i].itemId == 1330)
                {
                    flag8 = true;
                }
                if (Game1.player[Game1.myPlayer].inventory[i].itemId == 84)
                {
                    flag9 = true;
                }
            }
            bool flag10 = false;
            bool flag11 = false;
            bool flag12 = false;
            bool flag13 = false;
            bool flag14 = false;
            bool flag15 = false;
            bool flag16 = false;
            bool flag17 = false;
            bool flag18 = false;
            for (int j = 0; j < 200; j++)
            {
                if (Game1.npc[j].active)
                {
                    if (Game1.npc[j].type == 17)
                    {
                        flag10 = true;
                    }
                    if (Game1.npc[j].type == 18)
                    {
                        flag11 = true;
                    }
                    if (Game1.npc[j].type == 19)
                    {
                        flag13 = true;
                    }
                    if (Game1.npc[j].type == 20)
                    {
                        flag12 = true;
                    }
                    if (Game1.npc[j].type == 54)
                    {
                        flag18 = true;
                    }
                    if (Game1.npc[j].type == 124)
                    {
                        flag15 = true;
                    }
                    if (Game1.npc[j].type == 107)
                    {
                        flag14 = true;
                    }
                    if (Game1.npc[j].type == 108)
                    {
                        flag16 = true;
                    }
                    if (Game1.npc[j].type == 38)
                    {
                        flag17 = true;
                    }
                }
            }
            while (true)
            {
                Game1.helpText++;
                if (flag3)
                {
                    if (Game1.helpText == 1)
                    {
                        break;
                    }
                    if (Game1.helpText == 2)
                    {
                        goto Block_32;
                    }
                    if (Game1.helpText == 3)
                    {
                        goto Block_33;
                    }
                    if (Game1.helpText == 4)
                    {
                        goto Block_34;
                    }
                    if (Game1.helpText == 5)
                    {
                        goto Block_35;
                    }
                    if (Game1.helpText == 6)
                    {
                        goto Block_36;
                    }
                }
                if (flag3 && !flag4 && !flag5 && Game1.helpText == 11)
                {
                    goto Block_40;
                }
                if (flag3 && flag4 && !flag5)
                {
                    if (Game1.helpText == 21)
                    {
                        goto Block_44;
                    }
                    if (Game1.helpText == 22)
                    {
                        goto Block_45;
                    }
                }
                if (flag3 && flag5)
                {
                    if (Game1.helpText == 31)
                    {
                        goto Block_48;
                    }
                    if (Game1.helpText == 32)
                    {
                        goto Block_49;
                    }
                }
                if (!flag && Game1.helpText == 41)
                {
                    goto Block_51;
                }
                if (!flag2 && Game1.helpText == 42)
                {
                    goto Block_53;
                }
                if (!flag2 && !flag6 && Game1.helpText == 43)
                {
                    goto Block_56;
                }
                if (!flag10 && !flag11)
                {
                    if (Game1.helpText == 51)
                    {
                        goto Block_59;
                    }
                    if (Game1.helpText == 52)
                    {
                        goto Block_60;
                    }
                    if (Game1.helpText == 53)
                    {
                        goto Block_61;
                    }
                    if (Game1.helpText == 54)
                    {
                        goto Block_62;
                    }
                }
                if (!flag10 && Game1.helpText == 61)
                {
                    goto Block_64;
                }
                if (!flag11 && Game1.helpText == 62)
                {
                    goto Block_66;
                }
                if (!flag13 && Game1.helpText == 63)
                {
                    goto Block_68;
                }
                if (!flag12 && Game1.helpText == 64)
                {
                    goto Block_70;
                }
                if (!flag15 && Game1.helpText == 65 && NPC.downedBoss3)
                {
                    goto Block_73;
                }
                if (!flag18 && Game1.helpText == 66 && NPC.downedBoss3)
                {
                    goto Block_76;
                }
                if (!flag14 && Game1.helpText == 67)
                {
                    goto Block_78;
                }
                if (!flag17 && NPC.downedBoss2 && Game1.helpText == 68)
                {
                    goto Block_81;
                }
                if (!flag16 && Game1.hardMode && Game1.helpText == 69)
                {
                    goto Block_84;
                }
                if (flag7 && Game1.helpText == 71)
                {
                    goto Block_86;
                }
                if (flag8 && Game1.helpText == 72)
                {
                    goto Block_88;
                }
                if ((flag7 || flag8) && Game1.helpText == 80)
                {
                    goto Block_91;
                }
                if (!flag9 && Game1.helpText == 201 && !Game1.hardMode && !NPC.downedBoss3 && !NPC.downedBoss2)
                {
                    goto Block_97;
                }
                if (Game1.helpText == 1000 && !NPC.downedBoss1 && !NPC.downedBoss2)
                {
                    goto Block_100;
                }
                if (Game1.helpText == 1001 && !NPC.downedBoss1 && !NPC.downedBoss2)
                {
                    goto Block_103;
                }
                if (Game1.helpText == 1002 && !NPC.downedBoss2)
                {
                    goto Block_105;
                }
                if (Game1.helpText == 1050 && !NPC.downedBoss1 && Game1.player[Game1.myPlayer].statLifeMax < 200)
                {
                    goto Block_109;
                }
                if (Game1.helpText == 1051 && !NPC.downedBoss1 && Game1.player[Game1.myPlayer].statDefense <= 10)
                {
                    goto Block_112;
                }
                if (Game1.helpText == 1052 && !NPC.downedBoss1 && Game1.player[Game1.myPlayer].statLifeMax >= 200 && Game1.player[Game1.myPlayer].statDefense > 10)
                {
                    goto Block_116;
                }
                if (Game1.helpText == 1053 && NPC.downedBoss1 && !NPC.downedBoss2 && Game1.player[Game1.myPlayer].statLifeMax < 300)
                {
                    goto Block_120;
                }
                if (Game1.helpText == 1054 && NPC.downedBoss1 && !NPC.downedBoss2 && Game1.player[Game1.myPlayer].statLifeMax >= 300)
                {
                    goto Block_124;
                }
                if (Game1.helpText == 1055 && NPC.downedBoss1 && !NPC.downedBoss2 && Game1.player[Game1.myPlayer].statLifeMax >= 300)
                {
                    goto Block_128;
                }
                if (Game1.helpText == 1056 && NPC.downedBoss1 && NPC.downedBoss2 && !NPC.downedBoss3)
                {
                    goto Block_132;
                }
                if (Game1.helpText == 1057 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Game1.hardMode && Game1.player[Game1.myPlayer].statLifeMax < 400)
                {
                    goto Block_138;
                }
                if (Game1.helpText == 1058 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Game1.hardMode && Game1.player[Game1.myPlayer].statLifeMax >= 400)
                {
                    goto Block_144;
                }
                if (Game1.helpText == 1059 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Game1.hardMode && Game1.player[Game1.myPlayer].statLifeMax >= 400)
                {
                    goto Block_150;
                }
                if (Game1.helpText == 1060 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Game1.hardMode && Game1.player[Game1.myPlayer].statLifeMax >= 400)
                {
                    goto Block_156;
                }
                if (Game1.helpText == 1061 && Game1.hardMode)
                {
                    goto Block_158;
                }
                if (Game1.helpText == 1062 && Game1.hardMode)
                {
                    goto Block_161;
                }
                if (Game1.helpText > 1100)
                {
                    Game1.helpText = 0;
                }
            }
            Game1.npcChatText = Lang.dialog(177, false);
            return;
        Block_32:
            Game1.npcChatText = Lang.dialog(178, false);
            return;
        Block_33:
            Game1.npcChatText = Lang.dialog(179, false);
            return;
        Block_34:
            Game1.npcChatText = Lang.dialog(180, false);
            return;
        Block_35:
            Game1.npcChatText = Lang.dialog(181, false);
            return;
        Block_36:
            Game1.npcChatText = Lang.dialog(182, false);
            return;
        Block_40:
            Game1.npcChatText = Lang.dialog(183, false);
            return;
        Block_44:
            Game1.npcChatText = Lang.dialog(184, false);
            return;
        Block_45:
            Game1.npcChatText = Lang.dialog(185, false);
            return;
        Block_48:
            Game1.npcChatText = Lang.dialog(186, false);
            return;
        Block_49:
            Game1.npcChatText = Lang.dialog(187, false);
            return;
        Block_51:
            Game1.npcChatText = Lang.dialog(188, false);
            return;
        Block_53:
            Game1.npcChatText = Lang.dialog(189, false);
            return;
        Block_56:
            Game1.npcChatText = Lang.dialog(190, false);
            return;
        Block_59:
            Game1.npcChatText = Lang.dialog(191, false);
            return;
        Block_60:
            Game1.npcChatText = Lang.dialog(192, false);
            return;
        Block_61:
            Game1.npcChatText = Lang.dialog(193, false);
            return;
        Block_62:
            Game1.npcChatText = Lang.dialog(194, false);
            return;
        Block_64:
            Game1.npcChatText = Lang.dialog(195, false);
            return;
        Block_66:
            Game1.npcChatText = Lang.dialog(196, false);
            return;
        Block_68:
            Game1.npcChatText = Lang.dialog(197, false);
            return;
        Block_70:
            Game1.npcChatText = Lang.dialog(198, false);
            return;
        Block_73:
            Game1.npcChatText = Lang.dialog(199, false);
            return;
        Block_76:
            Game1.npcChatText = Lang.dialog(200, false);
            return;
        Block_78:
            Game1.npcChatText = Lang.dialog(201, false);
            return;
        Block_81:
            Game1.npcChatText = Lang.dialog(202, false);
            return;
        Block_84:
            Game1.npcChatText = Lang.dialog(203, false);
            return;
        Block_86:
            Game1.npcChatText = Lang.dialog(204, false);
            return;
        Block_88:
            Game1.npcChatText = Lang.dialog(WorldGen.crimson ? 403 : 205, false);
            return;
        Block_91:
            Game1.npcChatText = Lang.dialog(WorldGen.crimson ? 402 : 206, false);
            return;
        Block_97:
            Game1.npcChatText = Lang.dialog(207, false);
            return;
        Block_100:
            Game1.npcChatText = Lang.dialog(208, false);
            return;
        Block_103:
            Game1.npcChatText = Lang.dialog(209, false);
            return;
        Block_105:
            if (WorldGen.crimson)
            {
                Game1.npcChatText = Lang.dialog(331, false);
                return;
            }
            Game1.npcChatText = Lang.dialog(210, false);
            return;
        Block_109:
            Game1.npcChatText = Lang.dialog(211, false);
            return;
        Block_112:
            Game1.npcChatText = Lang.dialog(212, false);
            return;
        Block_116:
            Game1.npcChatText = Lang.dialog(213, false);
            return;
        Block_120:
            Game1.npcChatText = Lang.dialog(214, false);
            return;
        Block_124:
            Game1.npcChatText = Lang.dialog(215, false);
            return;
        Block_128:
            Game1.npcChatText = Lang.dialog(216, false);
            return;
        Block_132:
            Game1.npcChatText = Lang.dialog(217, false);
            return;
        Block_138:
            Game1.npcChatText = Lang.dialog(218, false);
            return;
        Block_144:
            Game1.npcChatText = Lang.dialog(219, false);
            return;
        Block_150:
            Game1.npcChatText = Lang.dialog(220, false);
            return;
        Block_156:
            Game1.npcChatText = Lang.dialog(221, false);
            return;
        Block_158:
            Game1.npcChatText = Lang.dialog(WorldGen.crimson ? 401 : 222, false);
            return;
        Block_161:
            Game1.npcChatText = Lang.dialog(223, false);
        }
        protected void GUIChatDrawInner()
        {
            if (Game1.player[Game1.myPlayer].talkNPC < 0 && Game1.player[Game1.myPlayer].sign == -1)
            {
                Game1.npcChatText = "";
                return;
            }
            if (Game1.netMode == 0 && Game1.autoPause && Game1.player[Game1.myPlayer].talkNPC >= 0)
            {
                if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 105)
                {
                    Game1.npc[Game1.player[Game1.myPlayer].talkNPC].Transform(107);
                }
                if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 106)
                {
                    Game1.npc[Game1.player[Game1.myPlayer].talkNPC].Transform(108);
                }
                if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 123)
                {
                    Game1.npc[Game1.player[Game1.myPlayer].talkNPC].Transform(124);
                }
                if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 354)
                {
                    Game1.npc[Game1.player[Game1.myPlayer].talkNPC].Transform(353);
                }
                if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 376)
                {
                    Game1.npc[Game1.player[Game1.myPlayer].talkNPC].Transform(369);
                }
            }
            Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(200, 200, 200, 200);
            int num = (int)((Game1.mouseTextColor * 2 + 255) / 3);
            Microsoft.Xna.Framework.Color textColor = new Microsoft.Xna.Framework.Color(num, num, num, num);
            int num2;
            string[] array = Utils.WordwrapString(Game1.npcChatText, Game1.fontMouseText, 460, 10, out num2);
            if (Game1.editSign)
            {
                this.textBlinkerCount++;
                if (this.textBlinkerCount >= 20)
                {
                    if (this.textBlinkerState == 0)
                    {
                        this.textBlinkerState = 1;
                    }
                    else
                    {
                        this.textBlinkerState = 0;
                    }
                    this.textBlinkerCount = 0;
                }
                if (this.textBlinkerState == 1)
                {
                    string[] array2;
                    IntPtr intPtr;
                    (array2 = array)[(int)(intPtr = (IntPtr)num2)] = array2[(int)intPtr] + "|";
                }
            }
            num2++;
            Game1.spriteBatch.Draw(Game1.chatBackTexture, new Vector2((float)(Game1.screenWidth / 2 - Game1.chatBackTexture.Width / 2), 100f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chatBackTexture.Width, (num2 + 1) * 30)), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
            Game1.spriteBatch.Draw(Game1.chatBackTexture, new Vector2((float)(Game1.screenWidth / 2 - Game1.chatBackTexture.Width / 2), (float)(100 + (num2 + 1) * 30)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.chatBackTexture.Height - 30, Game1.chatBackTexture.Width, 30)), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
            for (int i = 0; i < num2; i++)
            {
                Utils.DrawBorderStringFourWay(Game1.spriteBatch, Game1.fontMouseText, array[i], (float)(170 + (Game1.screenWidth - 800) / 2), (float)(120 + i * 30), textColor, Microsoft.Xna.Framework.Color.Black, Vector2.Zero, 1f);
            }
            Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(Game1.screenWidth / 2 - Game1.chatBackTexture.Width / 2, 100, Game1.chatBackTexture.Width, (num2 + 2) * 30);
            if (Game1.npcChatCornerItem != 0)
            {
                Vector2 vector = new Vector2((float)(Game1.screenWidth / 2 + Game1.chatBackTexture.Width / 2), (float)(100 + (num2 + 1) * 30 + 30));
                vector -= Vector2.One * 8f;
                Item item = new Item();
                item.netDefaults(Game1.npcChatCornerItem);
                float num3 = 1f;
                Texture2D texture2D = Game1.itemTexture[item.itemId];
                if (texture2D.Width > 32 || texture2D.Height > 32)
                {
                    if (texture2D.Width > texture2D.Height)
                    {
                        num3 = 32f / (float)texture2D.Width;
                    }
                    else
                    {
                        num3 = 32f / (float)texture2D.Height;
                    }
                }
                Game1.spriteBatch.Draw(texture2D, vector, null, item.GetAlpha(Microsoft.Xna.Framework.Color.White), 0f, new Vector2((float)texture2D.Width, (float)texture2D.Height), num3, SpriteEffects.None, 0f);
                if (item.color != default(Microsoft.Xna.Framework.Color))
                {
                    Game1.spriteBatch.Draw(texture2D, vector, null, item.GetColor(item.color), 0f, new Vector2((float)texture2D.Width, (float)texture2D.Height), num3, SpriteEffects.None, 0f);
                }
                if (new Microsoft.Xna.Framework.Rectangle((int)vector.X - (int)((float)texture2D.Width * num3), (int)vector.Y - (int)((float)texture2D.Height * num3), (int)((float)texture2D.Width * num3), (int)((float)texture2D.Height * num3)).Contains(new Microsoft.Xna.Framework.Point(Game1.mouseX, Game1.mouseY)))
                {
                    this.MouseText(item.name, -11, 0);
                }
            }
            num = (int)Game1.mouseTextColor;
            textColor = new Microsoft.Xna.Framework.Color(num, (int)((double)num / 1.1), num / 2, num);
            string text = "";
            string text2 = "";
            int num4 = Game1.player[Game1.myPlayer].statLifeMax2 - Game1.player[Game1.myPlayer].statLife;
            for (int j = 0; j < 22; j++)
            {
                int num5 = Game1.player[Game1.myPlayer].buffType[j];
                if (Game1.debuff[num5] && Game1.player[Game1.myPlayer].buffTime[j] > 5 && num5 != 28 && num5 != 34 && num5 != 87 && num5 != 89 && num5 != 21 && num5 != 86)
                {
                    num4 += 1000;
                }
            }
            if (Game1.player[Game1.myPlayer].sign > -1)
            {
                if (Game1.editSign)
                {
                    text = Lang.inter[47];
                }
                else
                {
                    text = Lang.inter[48];
                }
            }
            else if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 20)
            {
                text = Lang.inter[28];
                text2 = Lang.inter[49];
            }
            else if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 207)
            {
                text = Lang.inter[28];
                text2 = Lang.inter[107];
            }
            else if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 453)
            {
                text = Lang.inter[28];
            }
            else if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 353)
            {
                text = Lang.inter[28];
                text2 = "Hair Style";
            }
            else if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 368)
            {
                text = Lang.inter[28];
            }
            else if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 369)
            {
                text = Lang.inter[64];
            }
            else if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 17 || Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 19 || Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 38 || Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 54 || Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 107 || Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 108 || Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 124 || Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 142 || Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 160 || Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 178 || Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 207 || Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 208 || Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 209 || Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 227 || Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 228 || Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 229)
            {
                text = Lang.inter[28];
                if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 107)
                {
                    text2 = Lang.inter[19];
                }
            }
            else if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 37)
            {
                if (!Game1.dayTime)
                {
                    text = Lang.inter[50];
                }
            }
            else if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 22)
            {
                text = Lang.inter[51];
                text2 = Lang.inter[25];
            }
            else if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 441)
            {
                if (Game1.player[Game1.myPlayer].taxMoney <= 0)
                {
                    text = Lang.inter[89];
                }
                else
                {
                    string text3 = "";
                    int num6 = 0;
                    int num7 = 0;
                    int num8 = 0;
                    int num9 = 0;
                    int num10 = Game1.player[Game1.myPlayer].taxMoney;
                    if (num10 < 0)
                    {
                        num10 = 0;
                    }
                    num4 = num10;
                    if (num10 >= 1000000)
                    {
                        num6 = num10 / 1000000;
                        num10 -= num6 * 1000000;
                    }
                    if (num10 >= 10000)
                    {
                        num7 = num10 / 10000;
                        num10 -= num7 * 10000;
                    }
                    if (num10 >= 100)
                    {
                        num8 = num10 / 100;
                        num10 -= num8 * 100;
                    }
                    if (num10 >= 1)
                    {
                        num9 = num10;
                    }
                    if (num6 > 0)
                    {
                        object obj = text3;
                        text3 = string.Concat(new object[]
                        {
                            obj,
                            num6,
                            " ",
                            Lang.inter[15],
                            " "
                        });
                    }
                    if (num7 > 0)
                    {
                        object obj = text3;
                        text3 = string.Concat(new object[]
                        {
                            obj,
                            num7,
                            " ",
                            Lang.inter[16],
                            " "
                        });
                    }
                    if (num8 > 0)
                    {
                        object obj = text3;
                        text3 = string.Concat(new object[]
                        {
                            obj,
                            num8,
                            " ",
                            Lang.inter[17],
                            " "
                        });
                    }
                    if (num9 > 0)
                    {
                        object obj = text3;
                        text3 = string.Concat(new object[]
                        {
                            obj,
                            num9,
                            " ",
                            Lang.inter[18],
                            " "
                        });
                    }
                    float num11 = (float)Game1.mouseTextColor / 255f;
                    if (num6 > 0)
                    {
                        textColor = new Microsoft.Xna.Framework.Color((int)((byte)(220f * num11)), (int)((byte)(220f * num11)), (int)((byte)(198f * num11)), (int)Game1.mouseTextColor);
                    }
                    else if (num7 > 0)
                    {
                        textColor = new Microsoft.Xna.Framework.Color((int)((byte)(224f * num11)), (int)((byte)(201f * num11)), (int)((byte)(92f * num11)), (int)Game1.mouseTextColor);
                    }
                    else if (num8 > 0)
                    {
                        textColor = new Microsoft.Xna.Framework.Color((int)((byte)(181f * num11)), (int)((byte)(192f * num11)), (int)((byte)(193f * num11)), (int)Game1.mouseTextColor);
                    }
                    else if (num9 > 0)
                    {
                        textColor = new Microsoft.Xna.Framework.Color((int)((byte)(246f * num11)), (int)((byte)(138f * num11)), (int)((byte)(96f * num11)), (int)Game1.mouseTextColor);
                    }
                    if (text3 == "")
                    {
                        text = Lang.inter[89];
                    }
                    else
                    {
                        text3 = text3.Substring(0, text3.Length - 1);
                        text = Lang.inter[89] + " (" + text3 + ")";
                    }
                }
            }
            else if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 18)
            {
                string text4 = "";
                int num12 = 0;
                int num13 = 0;
                int num14 = 0;
                int num15 = 0;
                int num16 = num4;
                if (num16 > 0)
                {
                    num16 = (int)((double)num16 * 0.75);
                    if (num16 < 1)
                    {
                        num16 = 1;
                    }
                }
                if (num16 < 0)
                {
                    num16 = 0;
                }
                num4 = num16;
                if (num16 >= 1000000)
                {
                    num12 = num16 / 1000000;
                    num16 -= num12 * 1000000;
                }
                if (num16 >= 10000)
                {
                    num13 = num16 / 10000;
                    num16 -= num13 * 10000;
                }
                if (num16 >= 100)
                {
                    num14 = num16 / 100;
                    num16 -= num14 * 100;
                }
                if (num16 >= 1)
                {
                    num15 = num16;
                }
                if (num12 > 0)
                {
                    object obj = text4;
                    text4 = string.Concat(new object[]
                    {
                        obj,
                        num12,
                        " ",
                        Lang.inter[15],
                        " "
                    });
                }
                if (num13 > 0)
                {
                    object obj = text4;
                    text4 = string.Concat(new object[]
                    {
                        obj,
                        num13,
                        " ",
                        Lang.inter[16],
                        " "
                    });
                }
                if (num14 > 0)
                {
                    object obj = text4;
                    text4 = string.Concat(new object[]
                    {
                        obj,
                        num14,
                        " ",
                        Lang.inter[17],
                        " "
                    });
                }
                if (num15 > 0)
                {
                    object obj = text4;
                    text4 = string.Concat(new object[]
                    {
                        obj,
                        num15,
                        " ",
                        Lang.inter[18],
                        " "
                    });
                }
                float num17 = (float)Game1.mouseTextColor / 255f;
                if (num12 > 0)
                {
                    textColor = new Microsoft.Xna.Framework.Color((int)((byte)(220f * num17)), (int)((byte)(220f * num17)), (int)((byte)(198f * num17)), (int)Game1.mouseTextColor);
                }
                else if (num13 > 0)
                {
                    textColor = new Microsoft.Xna.Framework.Color((int)((byte)(224f * num17)), (int)((byte)(201f * num17)), (int)((byte)(92f * num17)), (int)Game1.mouseTextColor);
                }
                else if (num14 > 0)
                {
                    textColor = new Microsoft.Xna.Framework.Color((int)((byte)(181f * num17)), (int)((byte)(192f * num17)), (int)((byte)(193f * num17)), (int)Game1.mouseTextColor);
                }
                else if (num15 > 0)
                {
                    textColor = new Microsoft.Xna.Framework.Color((int)((byte)(246f * num17)), (int)((byte)(138f * num17)), (int)((byte)(96f * num17)), (int)Game1.mouseTextColor);
                }
                if (text4 == "")
                {
                    text = Lang.inter[54];
                }
                else
                {
                    text4 = text4.Substring(0, text4.Length - 1);
                    text = Lang.inter[54] + " (" + text4 + ")";
                }
            }
            int num18 = 180 + (Game1.screenWidth - 800) / 2;
            int num19 = 130 + num2 * 30;
            float scale = 0.9f;
            if (Game1.mouseX > num18 && (float)Game1.mouseX < (float)num18 + Game1.fontMouseText.MeasureString(text).X && Game1.mouseY > num19 && (float)Game1.mouseY < (float)num19 + Game1.fontMouseText.MeasureString(text).Y)
            {
                Game1.player[Game1.myPlayer].mouseInterface = true;
                scale = 1.1f;
                if (!Game1.npcChatFocus2)
                {
                    Game1.PlaySound(12, -1, -1, 1);
                }
                Game1.npcChatFocus2 = true;
                Game1.player[Game1.myPlayer].releaseUseItem = false;
            }
            else
            {
                if (Game1.npcChatFocus2)
                {
                    Game1.PlaySound(12, -1, -1, 1);
                }
                Game1.npcChatFocus2 = false;
            }
            Vector2 origin = Game1.fontMouseText.MeasureString(text) * 0.5f;
            Utils.DrawBorderStringFourWay(Game1.spriteBatch, Game1.fontMouseText, text, (float)num18 + origin.X, (float)num19 + origin.Y, textColor, Microsoft.Xna.Framework.Color.Black, origin, scale);
            string text5 = Lang.inter[52];
            textColor = new Microsoft.Xna.Framework.Color(num, (int)((double)num / 1.1), num / 2, num);
            num18 = num18 + (int)Game1.fontMouseText.MeasureString(text).X + 20;
            int num20 = num18 + (int)Game1.fontMouseText.MeasureString(text5).X;
            num19 = 130 + num2 * 30;
            scale = 0.9f;
            if (Game1.mouseX > num18 && (float)Game1.mouseX < (float)num18 + Game1.fontMouseText.MeasureString(text5).X && Game1.mouseY > num19 && (float)Game1.mouseY < (float)num19 + Game1.fontMouseText.MeasureString(text5).Y)
            {
                scale = 1.1f;
                if (!Game1.npcChatFocus1)
                {
                    Game1.PlaySound(12, -1, -1, 1);
                }
                Game1.npcChatFocus1 = true;
                Game1.player[Game1.myPlayer].releaseUseItem = false;
                Game1.player[Game1.myPlayer].controlUseItem = false;
            }
            else
            {
                if (Game1.npcChatFocus1)
                {
                    Game1.PlaySound(12, -1, -1, 1);
                }
                Game1.npcChatFocus1 = false;
            }
            origin = Game1.fontMouseText.MeasureString(text5) * 0.5f;
            Utils.DrawBorderStringFourWay(Game1.spriteBatch, Game1.fontMouseText, text5, (float)num18 + origin.X, (float)num19 + origin.Y, textColor, Microsoft.Xna.Framework.Color.Black, origin, scale);
            if (text2 != "")
            {
                num18 = num20 + (int)Game1.fontMouseText.MeasureString(text2).X / 3;
                num19 = 130 + num2 * 30;
                scale = 0.9f;
                if (Game1.mouseX > num18 && (float)Game1.mouseX < (float)num18 + Game1.fontMouseText.MeasureString(text2).X && Game1.mouseY > num19 && (float)Game1.mouseY < (float)num19 + Game1.fontMouseText.MeasureString(text2).Y)
                {
                    Game1.player[Game1.myPlayer].mouseInterface = true;
                    scale = 1.1f;
                    if (!Game1.npcChatFocus3)
                    {
                        Game1.PlaySound(12, -1, -1, 1);
                    }
                    Game1.npcChatFocus3 = true;
                    Game1.player[Game1.myPlayer].releaseUseItem = false;
                }
                else
                {
                    if (Game1.npcChatFocus3)
                    {
                        Game1.PlaySound(12, -1, -1, 1);
                    }
                    Game1.npcChatFocus3 = false;
                }
                origin = Game1.fontMouseText.MeasureString(text2) * 0.5f;
                Utils.DrawBorderStringFourWay(Game1.spriteBatch, Game1.fontMouseText, text2, (float)num18 + origin.X, (float)num19 + origin.Y, textColor, Microsoft.Xna.Framework.Color.Black, origin, scale);
            }
            if (rectangle.Contains(new Microsoft.Xna.Framework.Point(Game1.mouseX, Game1.mouseY)))
            {
                Game1.player[Game1.myPlayer].mouseInterface = true;
            }
            if (Game1.mouseLeft && Game1.mouseLeftRelease && rectangle.Contains(new Microsoft.Xna.Framework.Point(Game1.mouseX, Game1.mouseY)))
            {
                Game1.mouseLeftRelease = false;
                Game1.player[Game1.myPlayer].releaseUseItem = false;
                Game1.player[Game1.myPlayer].mouseInterface = true;
                if (Game1.npcChatFocus1)
                {
                    Game1.player[Game1.myPlayer].talkNPC = -1;
                    Game1.player[Game1.myPlayer].sign = -1;
                    Game1.npcChatCornerItem = 0;
                    Game1.editSign = false;
                    Game1.npcChatText = "";
                    Game1.PlaySound(11, -1, -1, 1);
                    return;
                }
                if (Game1.npcChatFocus2)
                {
                    if (Game1.player[Game1.myPlayer].sign != -1)
                    {
                        if (!Game1.editSign)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                            Game1.editSign = true;
                            Game1.clrInput();
                            return;
                        }
                        Game1.PlaySound(12, -1, -1, 1);
                        int num21 = Game1.player[Game1.myPlayer].sign;
                        Sign.TextSign(num21, Game1.npcChatText);
                        Game1.editSign = false;
                        if (Game1.netMode == 1)
                        {
                            NetMessage.SendData(47, -1, -1, "", num21, 0f, 0f, 0f, 0, 0, 0);
                            return;
                        }
                    }
                    else if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 369)
                    {
                        Game1.npcChatCornerItem = 0;
                        Game1.PlaySound(12, -1, -1, 1);
                        bool flag = false;
                        if (!Game1.anglerQuestFinished && !Game1.anglerWhoFinishedToday.Contains(Game1.player[Game1.myPlayer].name))
                        {
                            int num22 = Game1.player[Game1.myPlayer].FindItem(Game1.anglerQuestItemNetIDs[Game1.anglerQuest]);
                            if (num22 != -1)
                            {
                                Game1.player[Game1.myPlayer].inventory[num22].stack--;
                                if (Game1.player[Game1.myPlayer].inventory[num22].stack <= 0)
                                {
                                    Game1.player[Game1.myPlayer].inventory[num22] = new Item();
                                }
                                flag = true;
                                Game1.PlaySound(24, -1, -1, 1);
                                Game1.player[Game1.myPlayer].anglerQuestsFinished++;
                                AchievementsHelper.HandleAnglerService();
                                Game1.player[Game1.myPlayer].GetAnglerReward();
                            }
                        }
                        Game1.npcChatText = Lang.AnglerQuestChat(flag);
                        if (flag)
                        {
                            Game1.anglerQuestFinished = true;
                            if (Game1.netMode == 1)
                            {
                                NetMessage.SendData(75, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
                                return;
                            }
                            Game1.anglerWhoFinishedToday.Add(Game1.player[Game1.myPlayer].name);
                            return;
                        }
                    }
                    else
                    {
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 17)
                        {
                            Game1.playerInventory = true;
                            Game1.npcChatText = "";
                            Game1.npcShop = 1;
                            this.shop[Game1.npcShop].SetupShop(Game1.npcShop);
                            Game1.PlaySound(12, -1, -1, 1);
                            return;
                        }
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 19)
                        {
                            Game1.playerInventory = true;
                            Game1.npcChatText = "";
                            Game1.npcShop = 2;
                            this.shop[Game1.npcShop].SetupShop(Game1.npcShop);
                            Game1.PlaySound(12, -1, -1, 1);
                            return;
                        }
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 124)
                        {
                            Game1.playerInventory = true;
                            Game1.npcChatText = "";
                            Game1.npcShop = 8;
                            this.shop[Game1.npcShop].SetupShop(Game1.npcShop);
                            Game1.PlaySound(12, -1, -1, 1);
                            return;
                        }
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 142)
                        {
                            Game1.playerInventory = true;
                            Game1.npcChatText = "";
                            Game1.npcShop = 9;
                            this.shop[Game1.npcShop].SetupShop(Game1.npcShop);
                            Game1.PlaySound(12, -1, -1, 1);
                            return;
                        }
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 353)
                        {
                            Game1.playerInventory = true;
                            Game1.npcChatText = "";
                            Game1.npcShop = 18;
                            this.shop[Game1.npcShop].SetupShop(Game1.npcShop);
                            Game1.PlaySound(12, -1, -1, 1);
                            return;
                        }
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 368)
                        {
                            Game1.playerInventory = true;
                            Game1.npcChatText = "";
                            Game1.npcShop = 19;
                            this.shop[Game1.npcShop].SetupShop(Game1.npcShop);
                            Game1.PlaySound(12, -1, -1, 1);
                            return;
                        }
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 453)
                        {
                            Game1.playerInventory = true;
                            Game1.npcChatText = "";
                            Game1.npcShop = 20;
                            this.shop[Game1.npcShop].SetupShop(Game1.npcShop);
                            Game1.PlaySound(12, -1, -1, 1);
                            return;
                        }
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 37)
                        {
                            if (Game1.netMode == 0)
                            {
                                NPC.SpawnSkeletron();
                            }
                            else
                            {
                                NetMessage.SendData(51, -1, -1, "", Game1.myPlayer, 1f, 0f, 0f, 0, 0, 0);
                            }
                            Game1.npcChatText = "";
                            return;
                        }
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 20)
                        {
                            Game1.playerInventory = true;
                            Game1.npcChatText = "";
                            Game1.npcShop = 3;
                            this.shop[Game1.npcShop].SetupShop(Game1.npcShop);
                            Game1.PlaySound(12, -1, -1, 1);
                            return;
                        }
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 38)
                        {
                            Game1.playerInventory = true;
                            Game1.npcChatText = "";
                            Game1.npcShop = 4;
                            this.shop[Game1.npcShop].SetupShop(Game1.npcShop);
                            Game1.PlaySound(12, -1, -1, 1);
                            return;
                        }
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 54)
                        {
                            Game1.playerInventory = true;
                            Game1.npcChatText = "";
                            Game1.npcShop = 5;
                            this.shop[Game1.npcShop].SetupShop(Game1.npcShop);
                            Game1.PlaySound(12, -1, -1, 1);
                            return;
                        }
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 107)
                        {
                            Game1.playerInventory = true;
                            Game1.npcChatText = "";
                            Game1.npcShop = 6;
                            this.shop[Game1.npcShop].SetupShop(Game1.npcShop);
                            Game1.PlaySound(12, -1, -1, 1);
                            return;
                        }
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 108)
                        {
                            Game1.playerInventory = true;
                            Game1.npcChatText = "";
                            Game1.npcShop = 7;
                            this.shop[Game1.npcShop].SetupShop(Game1.npcShop);
                            Game1.PlaySound(12, -1, -1, 1);
                            return;
                        }
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 160)
                        {
                            Game1.playerInventory = true;
                            Game1.npcChatText = "";
                            Game1.npcShop = 10;
                            this.shop[Game1.npcShop].SetupShop(Game1.npcShop);
                            Game1.PlaySound(12, -1, -1, 1);
                            return;
                        }
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 178)
                        {
                            Game1.playerInventory = true;
                            Game1.npcChatText = "";
                            Game1.npcShop = 11;
                            this.shop[Game1.npcShop].SetupShop(Game1.npcShop);
                            Game1.PlaySound(12, -1, -1, 1);
                            return;
                        }
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 207)
                        {
                            Game1.playerInventory = true;
                            Game1.npcChatText = "";
                            Game1.npcShop = 12;
                            this.shop[Game1.npcShop].SetupShop(Game1.npcShop);
                            Game1.PlaySound(12, -1, -1, 1);
                            return;
                        }
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 208)
                        {
                            Game1.playerInventory = true;
                            Game1.npcChatText = "";
                            Game1.npcShop = 13;
                            this.shop[Game1.npcShop].SetupShop(Game1.npcShop);
                            Game1.PlaySound(12, -1, -1, 1);
                            return;
                        }
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 209)
                        {
                            Game1.playerInventory = true;
                            Game1.npcChatText = "";
                            Game1.npcShop = 14;
                            this.shop[Game1.npcShop].SetupShop(Game1.npcShop);
                            Game1.PlaySound(12, -1, -1, 1);
                            return;
                        }
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 227)
                        {
                            Game1.playerInventory = true;
                            Game1.npcChatText = "";
                            Game1.npcShop = 15;
                            this.shop[Game1.npcShop].SetupShop(Game1.npcShop);
                            Game1.PlaySound(12, -1, -1, 1);
                            return;
                        }
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 228)
                        {
                            Game1.playerInventory = true;
                            Game1.npcChatText = "";
                            Game1.npcShop = 16;
                            this.shop[Game1.npcShop].SetupShop(Game1.npcShop);
                            Game1.PlaySound(12, -1, -1, 1);
                            return;
                        }
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 229)
                        {
                            Game1.playerInventory = true;
                            Game1.npcChatText = "";
                            Game1.npcShop = 17;
                            this.shop[Game1.npcShop].SetupShop(Game1.npcShop);
                            Game1.PlaySound(12, -1, -1, 1);
                            return;
                        }
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 22)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                            Game1.HelpText();
                            return;
                        }
                        if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 441)
                        {
                            if (Game1.player[Game1.myPlayer].taxMoney > 0)
                            {
                                int k = Game1.player[Game1.myPlayer].taxMoney;
                                while (k > 0)
                                {
                                    if (k > 1000000)
                                    {
                                        int num23 = k / 1000000;
                                        k -= 1000000 * num23;
                                        Item.NewItem((int)Game1.player[Game1.myPlayer].position.X, (int)Game1.player[Game1.myPlayer].position.Y, Game1.player[Game1.myPlayer].width, Game1.player[Game1.myPlayer].height, 74, num23, false, 0, false);
                                    }
                                    else if (k > 10000)
                                    {
                                        int num24 = k / 10000;
                                        k -= 10000 * num24;
                                        Item.NewItem((int)Game1.player[Game1.myPlayer].position.X, (int)Game1.player[Game1.myPlayer].position.Y, Game1.player[Game1.myPlayer].width, Game1.player[Game1.myPlayer].height, 73, num24, false, 0, false);
                                    }
                                    else if (k > 100)
                                    {
                                        int num25 = k / 100;
                                        k -= 100 * num25;
                                        Item.NewItem((int)Game1.player[Game1.myPlayer].position.X, (int)Game1.player[Game1.myPlayer].position.Y, Game1.player[Game1.myPlayer].width, Game1.player[Game1.myPlayer].height, 72, num25, false, 0, false);
                                    }
                                    else
                                    {
                                        int num26 = k;
                                        if (num26 < 1)
                                        {
                                            num26 = 1;
                                        }
                                        k -= num26;
                                        Item.NewItem((int)Game1.player[Game1.myPlayer].position.X, (int)Game1.player[Game1.myPlayer].position.Y, Game1.player[Game1.myPlayer].width, Game1.player[Game1.myPlayer].height, 71, num26, false, 0, false);
                                    }
                                }
                                Game1.npcChatText = Lang.dialog(Game1.rand.Next(380, 382), false);
                                Game1.player[Game1.myPlayer].taxMoney = 0;
                                return;
                            }
                            Game1.npcChatText = Lang.dialog(Game1.rand.Next(390, 401), false);
                            return;
                        }
                        else if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 18)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                            if (num4 > 0)
                            {
                                if (Game1.player[Game1.myPlayer].BuyItem(num4))
                                {
                                    AchievementsHelper.HandleNurseService(num4);
                                    Game1.PlaySound(2, -1, -1, 4);
                                    Game1.player[Game1.myPlayer].HealEffect(Game1.player[Game1.myPlayer].statLifeMax2 - Game1.player[Game1.myPlayer].statLife, true);
                                    if ((double)Game1.player[Game1.myPlayer].statLife < (double)Game1.player[Game1.myPlayer].statLifeMax2 * 0.25)
                                    {
                                        Game1.npcChatText = Lang.dialog(227, false);
                                    }
                                    else if ((double)Game1.player[Game1.myPlayer].statLife < (double)Game1.player[Game1.myPlayer].statLifeMax2 * 0.5)
                                    {
                                        Game1.npcChatText = Lang.dialog(228, false);
                                    }
                                    else if ((double)Game1.player[Game1.myPlayer].statLife < (double)Game1.player[Game1.myPlayer].statLifeMax2 * 0.75)
                                    {
                                        Game1.npcChatText = Lang.dialog(229, false);
                                    }
                                    else
                                    {
                                        Game1.npcChatText = Lang.dialog(230, false);
                                    }
                                    Game1.player[Game1.myPlayer].statLife = Game1.player[Game1.myPlayer].statLifeMax2;
                                    for (int l = 0; l < 22; l++)
                                    {
                                        int num27 = Game1.player[Game1.myPlayer].buffType[l];
                                        if (Game1.debuff[num27] && Game1.player[Game1.myPlayer].buffTime[l] > 0 && num27 != 28 && num27 != 34 && num27 != 87 && num27 != 89 && num27 != 21 && num27 != 86)
                                        {
                                            Game1.player[Game1.myPlayer].DelBuff(l);
                                        }
                                    }
                                    return;
                                }
                                int num28 = Game1.rand.Next(3);
                                if (num28 == 0)
                                {
                                    Game1.npcChatText = Lang.dialog(52, false);
                                }
                                if (num28 == 1)
                                {
                                    Game1.npcChatText = Lang.dialog(53, false);
                                }
                                if (num28 == 2)
                                {
                                    Game1.npcChatText = Lang.dialog(54, false);
                                    return;
                                }
                            }
                            else
                            {
                                int num29 = Game1.rand.Next(3);
                                if (!ChildSafety.Disabled)
                                {
                                    num29 = Game1.rand.Next(1, 3);
                                }
                                if (num29 == 0)
                                {
                                    Game1.npcChatText = Lang.dialog(55, false);
                                    return;
                                }
                                if (num29 == 1)
                                {
                                    Game1.npcChatText = Lang.dialog(56, false);
                                    return;
                                }
                                if (num29 == 2)
                                {
                                    Game1.npcChatText = Lang.dialog(57, false);
                                    return;
                                }
                            }
                        }
                    }
                }
                else if (Game1.npcChatFocus3 && Game1.player[Game1.myPlayer].talkNPC >= 0)
                {
                    if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 20)
                    {
                        Game1.PlaySound(12, -1, -1, 1);
                        Game1.npcChatText = Lang.evilGood();
                        return;
                    }
                    if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 22)
                    {
                        Game1.playerInventory = true;
                        Game1.npcChatText = "";
                        Game1.PlaySound(12, -1, -1, 1);
                        Game1.craftGuide = true;
                        return;
                    }
                    if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 107)
                    {
                        Game1.playerInventory = true;
                        Game1.npcChatText = "";
                        Game1.PlaySound(12, -1, -1, 1);
                        Game1.reforge = true;
                        return;
                    }
                    if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 353)
                    {
                        Game1.OpenHairWindow();
                        return;
                    }
                    if (Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 207)
                    {
                        Game1.npcChatCornerItem = 0;
                        Game1.PlaySound(12, -1, -1, 1);
                        bool gotDye = false;
                        int num30 = Game1.player[Game1.myPlayer].FindItem(ItemID.Sets.ExoticPlantsForDyeTrade);
                        if (num30 != -1)
                        {
                            Game1.player[Game1.myPlayer].inventory[num30].stack--;
                            if (Game1.player[Game1.myPlayer].inventory[num30].stack <= 0)
                            {
                                Game1.player[Game1.myPlayer].inventory[num30] = new Item();
                            }
                            gotDye = true;
                            Game1.PlaySound(24, -1, -1, 1);
                            Game1.player[Game1.myPlayer].GetDyeTraderReward();
                        }
                        Game1.npcChatText = Lang.DyeTraderQuestChat(gotDye);
                    }
                }
            }
        }
        public static void MoveCoins(Item[] pInv, Item[] cInv)
        {
            int[] array = new int[4];
            List<int> list = new List<int>();
            List<int> list2 = new List<int>();
            bool flag = false;
            int[] array2 = new int[40];
            for (int i = 0; i < cInv.Length; i++)
            {
                array2[i] = -1;
                if (cInv[i].stack < 1 || cInv[i].itemId < 1)
                {
                    list2.Add(i);
                    cInv[i] = new Item();
                }
                if (cInv[i] != null && cInv[i].stack > 0)
                {
                    int num = 0;
                    if (cInv[i].itemId == 71)
                    {
                        num = 1;
                    }
                    if (cInv[i].itemId == 72)
                    {
                        num = 2;
                    }
                    if (cInv[i].itemId == 73)
                    {
                        num = 3;
                    }
                    if (cInv[i].itemId == 74)
                    {
                        num = 4;
                    }
                    array2[i] = num - 1;
                    if (num > 0)
                    {
                        array[num - 1] += cInv[i].stack;
                        list2.Add(i);
                        cInv[i] = new Item();
                        flag = true;
                    }
                }
            }
            if (!flag)
            {
                return;
            }
            Game1.PlaySound(7, -1, -1, 1);
            for (int j = 0; j < pInv.Length; j++)
            {
                if (j != 58 && pInv[j] != null && pInv[j].stack > 0)
                {
                    int num2 = 0;
                    if (pInv[j].itemId == 71)
                    {
                        num2 = 1;
                    }
                    if (pInv[j].itemId == 72)
                    {
                        num2 = 2;
                    }
                    if (pInv[j].itemId == 73)
                    {
                        num2 = 3;
                    }
                    if (pInv[j].itemId == 74)
                    {
                        num2 = 4;
                    }
                    if (num2 > 0)
                    {
                        array[num2 - 1] += pInv[j].stack;
                        list.Add(j);
                        pInv[j] = new Item();
                    }
                }
            }
            for (int k = 0; k < 3; k++)
            {
                while (array[k] >= 100)
                {
                    array[k] -= 100;
                    array[k + 1]++;
                }
            }
            for (int l = 0; l < 40; l++)
            {
                if (array2[l] >= 0 && cInv[l].itemId == 0)
                {
                    int num3 = l;
                    int num4 = array2[l];
                    if (array[num4] > 0)
                    {
                        cInv[num3].SetDefaults(71 + num4, false);
                        cInv[num3].stack = array[num4];
                        if (cInv[num3].stack > cInv[num3].maxStack)
                        {
                            cInv[num3].stack = cInv[num3].maxStack;
                        }
                        array[num4] -= cInv[num3].stack;
                        array2[l] = -1;
                    }
                    if (Game1.netMode == 1 && Game1.player[Game1.myPlayer].chest > -1)
                    {
                        NetMessage.SendData(32, -1, -1, "", Game1.player[Game1.myPlayer].chest, (float)num3, 0f, 0f, 0, 0, 0);
                    }
                    list2.Remove(num3);
                }
            }
            for (int m = 0; m < 40; m++)
            {
                if (array2[m] >= 0 && cInv[m].itemId == 0)
                {
                    int num5 = m;
                    for (int n = 3; n >= 0; n--)
                    {
                        if (array[n] > 0)
                        {
                            cInv[num5].SetDefaults(71 + n, false);
                            cInv[num5].stack = array[n];
                            if (cInv[num5].stack > cInv[num5].maxStack)
                            {
                                cInv[num5].stack = cInv[num5].maxStack;
                            }
                            array[n] -= cInv[num5].stack;
                            array2[m] = -1;
                            break;
                        }
                    }
                    if (Game1.netMode == 1 && Game1.player[Game1.myPlayer].chest > -1)
                    {
                        NetMessage.SendData(32, -1, -1, "", Game1.player[Game1.myPlayer].chest, (float)num5, 0f, 0f, 0, 0, 0);
                    }
                    list2.Remove(num5);
                }
            }
            while (list2.Count > 0)
            {
                int num6 = list2[0];
                for (int num7 = 3; num7 >= 0; num7--)
                {
                    if (array[num7] > 0)
                    {
                        cInv[num6].SetDefaults(71 + num7, false);
                        cInv[num6].stack = array[num7];
                        if (cInv[num6].stack > cInv[num6].maxStack)
                        {
                            cInv[num6].stack = cInv[num6].maxStack;
                        }
                        array[num7] -= cInv[num6].stack;
                        break;
                    }
                }
                if (Game1.netMode == 1 && Game1.player[Game1.myPlayer].chest > -1)
                {
                    NetMessage.SendData(32, -1, -1, "", Game1.player[Game1.myPlayer].chest, (float)list2[0], 0f, 0f, 0, 0, 0);
                }
                list2.RemoveAt(0);
            }
            while (list.Count > 0)
            {
                int num8 = list[0];
                for (int num9 = 3; num9 >= 0; num9--)
                {
                    if (array[num9] > 0)
                    {
                        pInv[num8].SetDefaults(71 + num9, false);
                        pInv[num8].stack = array[num9];
                        if (pInv[num8].stack > pInv[num8].maxStack)
                        {
                            pInv[num8].stack = pInv[num8].maxStack;
                        }
                        array[num9] -= pInv[num8].stack;
                    }
                }
                list.RemoveAt(0);
            }
        }
        protected void DrawNPCHouse()
        {
            for (int i = 0; i < 200; i++)
            {
                if (Game1.npc[i].active && Game1.npc[i].townNPC && !Game1.npc[i].homeless && Game1.npc[i].homeTileX > 0 && Game1.npc[i].homeTileY > 0 && Game1.npc[i].type != 37)
                {
                    int num = 1;
                    int num2 = Game1.npc[i].homeTileX;
                    int num3 = Game1.npc[i].homeTileY - 1;
                    if (Game1.tile[num2, num3] != null)
                    {
                        bool flag = false;
                        while (!Game1.tile[num2, num3].active() || !Game1.tileSolid[(int)Game1.tile[num2, num3].type])
                        {
                            num3--;
                            if (num3 < 10)
                            {
                                break;
                            }
                            if (Game1.tile[num2, num3] == null)
                            {
                                flag = true;
                                break;
                            }
                        }
                        if (!flag)
                        {
                            int num4 = 8;
                            int num5 = 18;
                            if (Game1.tile[num2, num3].type == 19)
                            {
                                num5 -= 8;
                            }
                            num3++;
                            int num6 = 0;
                            float num7 = (float)(num3 * 16);
                            SpriteEffects effects = SpriteEffects.None;
                            if (Game1.player[Game1.myPlayer].gravDir == -1f)
                            {
                                num7 -= Game1.screenPosition.Y;
                                num7 = Game1.screenPosition.Y + (float)Game1.screenHeight - num7;
                                num7 -= (float)Game1.bannerTexture[num].Height;
                                effects = SpriteEffects.FlipVertically;
                                num6 = 4;
                            }
                            Game1.spriteBatch.Draw(Game1.bannerTexture[num], new Vector2((float)(num2 * 16 - (int)Game1.screenPosition.X + num4), num7 - (float)((int)Game1.screenPosition.Y) + (float)num5 + (float)num6), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.bannerTexture[num].Width, Game1.bannerTexture[num].Height)), Lighting.GetColor(num2, num3), 0f, new Vector2((float)(Game1.bannerTexture[num].Width / 2), (float)(Game1.bannerTexture[num].Height / 2)), 1f, effects, 0f);
                            int num8 = NPC.TypeToNum(Game1.npc[i].type);
                            float scale = 1f;
                            float num9;
                            if (Game1.npcHeadTexture[num8].Width > Game1.npcHeadTexture[num8].Height)
                            {
                                num9 = (float)Game1.npcHeadTexture[num8].Width;
                            }
                            else
                            {
                                num9 = (float)Game1.npcHeadTexture[num8].Height;
                            }
                            if (num9 > 24f)
                            {
                                scale = 24f / num9;
                            }
                            Game1.spriteBatch.Draw(Game1.npcHeadTexture[num8], new Vector2((float)(num2 * 16 - (int)Game1.screenPosition.X + num4), num7 - (float)((int)Game1.screenPosition.Y) + (float)num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.npcHeadTexture[num8].Width, Game1.npcHeadTexture[num8].Height)), Lighting.GetColor(num2, num3), 0f, new Vector2((float)(Game1.npcHeadTexture[num8].Width / 2), (float)(Game1.npcHeadTexture[num8].Height / 2)), scale, effects, 0f);
                            num2 = num2 * 16 - (int)Game1.screenPosition.X + num4 - Game1.bannerTexture[num].Width / 2;
                            num3 = num3 * 16 - (int)Game1.screenPosition.Y + num5 - Game1.bannerTexture[num].Height / 2;
                            if (Game1.mouseX >= num2 && Game1.mouseX <= num2 + Game1.bannerTexture[num].Width && Game1.mouseY >= num3 && Game1.mouseY <= num3 + Game1.bannerTexture[num].Height)
                            {
                                this.MouseText(Game1.npc[i].displayName + " the " + Game1.npc[i].name, 0, 0);
                                if (Game1.mouseRightRelease && Game1.mouseRight)
                                {
                                    Game1.mouseRightRelease = false;
                                    WorldGen.kickOut(i);
                                    Game1.PlaySound(12, -1, -1, 1);
                                }
                            }
                        }
                    }
                }
            }
        }
        protected void DrawPlayerChat()
        {
            if (Game1.chatMode)
            {
                this.textBlinkerCount++;
                if (this.textBlinkerCount >= 20)
                {
                    if (this.textBlinkerState == 0)
                    {
                        this.textBlinkerState = 1;
                    }
                    else
                    {
                        this.textBlinkerState = 0;
                    }
                    this.textBlinkerCount = 0;
                }
                string text = Game1.chatText;
                if (this.textBlinkerState == 1)
                {
                    text += "|";
                }
                if (Game1.screenWidth > 800)
                {
                    int i = Game1.screenWidth - 300;
                    int num = 78;
                    Game1.spriteBatch.Draw(Game1.textBackTexture, new Vector2((float)num, (float)(Game1.screenHeight - 36)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.textBackTexture.Width - 100, Game1.textBackTexture.Height)), new Microsoft.Xna.Framework.Color(100, 100, 100, 100), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                    i -= 400;
                    num += 400;
                    while (i > 0)
                    {
                        if (i > 300)
                        {
                            Game1.spriteBatch.Draw(Game1.textBackTexture, new Vector2((float)num, (float)(Game1.screenHeight - 36)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(100, 0, Game1.textBackTexture.Width - 200, Game1.textBackTexture.Height)), new Microsoft.Xna.Framework.Color(100, 100, 100, 100), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            i -= 300;
                            num += 300;
                        }
                        else
                        {
                            Game1.spriteBatch.Draw(Game1.textBackTexture, new Vector2((float)num, (float)(Game1.screenHeight - 36)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(Game1.textBackTexture.Width - i, 0, Game1.textBackTexture.Width - (Game1.textBackTexture.Width - i), Game1.textBackTexture.Height)), new Microsoft.Xna.Framework.Color(100, 100, 100, 100), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            i = 0;
                        }
                    }
                }
                else
                {
                    Game1.spriteBatch.Draw(Game1.textBackTexture, new Vector2(78f, (float)(Game1.screenHeight - 36)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.textBackTexture.Width, Game1.textBackTexture.Height)), new Microsoft.Xna.Framework.Color(100, 100, 100, 100), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                }
                int num2 = -1;
                TextSnippet[] array = ChatManager.ParseMessage(text, Microsoft.Xna.Framework.Color.White);
                ChatManager.DrawColorCodedStringWithShadow(Game1.spriteBatch, Game1.fontMouseText, array, new Vector2(88f, (float)(Game1.screenHeight - 30)), 0f, Vector2.Zero, Vector2.One, out num2, -1f, 2f);
                if (num2 > -1)
                {
                    array[num2].OnHover();
                    if (Game1.mouseLeft && Game1.mouseLeftRelease)
                    {
                        array[num2].OnClick();
                    }
                }
            }
            int num3 = Game1.startChatLine;
            int num4 = Game1.startChatLine + Game1.showCount;
            if (num4 >= Game1.numChatLines)
            {
                num4 = --Game1.numChatLines;
                num3 = num4 - Game1.showCount;
            }
            int num5 = 0;
            int num6 = -1;
            int num7 = -1;
            for (int j = num3; j < num4; j++)
            {
                if (Game1.chatMode || Game1.chatLine[j].showTime > 0)
                {
                    int num8 = -1;
                    ChatManager.DrawColorCodedStringWithShadow(Game1.spriteBatch, Game1.fontMouseText, Game1.chatLine[j].parsedText, new Vector2(88f, (float)(Game1.screenHeight - 30 - 28 - num5 * 21)), 0f, Vector2.Zero, Vector2.One, out num8, -1f, 2f);
                    if (num8 >= 0 && Game1.chatLine[j].parsedText[num8].CheckForHover)
                    {
                        num6 = j;
                        num7 = num8;
                    }
                }
                num5++;
            }
            if (num6 > -1)
            {
                Game1.chatLine[num6].parsedText[num7].OnHover();
                if (Game1.mouseLeft && Game1.mouseLeftRelease)
                {
                    Game1.chatLine[num6].parsedText[num7].OnClick();
                }
            }
            TimeLogger.DetailedDrawTime(10);
        }
        protected void DrawInventory()
        {
            if (Game1.netMode == 1)
            {
                Game1.DrawPVPIcons();
            }
            Game1.inventoryScale = 0.85f;
            int num = 448;
            int num2 = 258;
            if ((Game1.player[Game1.myPlayer].chest != -1 && !Game1.recBigList) || Game1.npcShop > 0)
            {
                num2 += 168;
                Game1.inventoryScale = 0.755f;
                num += 5;
            }
            new Microsoft.Xna.Framework.Color(150, 150, 150, 150);
            if (Game1.mouseX >= num && (float)Game1.mouseX <= (float)num + (float)Game1.inventoryBackTexture.Width * Game1.inventoryScale && Game1.mouseY >= num2 && (float)Game1.mouseY <= (float)num2 + (float)Game1.inventoryBackTexture.Height * Game1.inventoryScale)
            {
                Game1.player[Game1.myPlayer].mouseInterface = true;
                if (Game1.mouseLeftRelease && Game1.mouseLeft)
                {
                    ItemSlot.LeftClick(ref Game1.player[Game1.myPlayer].trashItem, 6);
                    Recipe.FindRecipes();
                }
                ItemSlot.MouseHover(ref Game1.player[Game1.myPlayer].trashItem, 6);
            }
            ItemSlot.Draw(Game1.spriteBatch, ref Game1.player[Game1.myPlayer].trashItem, 6, new Vector2((float)num, (float)num2), default(Microsoft.Xna.Framework.Color));
            Game1.spriteBatch.DrawString(Game1.fontMouseText, Lang.inter[4], new Vector2(40f, 0f), new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
            Game1.inventoryScale = 0.85f;
            if (Game1.mouseX > 20 && Game1.mouseX < (int)(20f + 560f * Game1.inventoryScale) && Game1.mouseY > 20 && Game1.mouseY < (int)(20f + 224f * Game1.inventoryScale))
            {
                Game1.player[Game1.myPlayer].mouseInterface = true;
            }
            for (int i = 0; i < 10; i++)
            {
                for (int j = 0; j < 5; j++)
                {
                    int num3 = (int)(20f + (float)(i * 56) * Game1.inventoryScale);
                    int num4 = (int)(20f + (float)(j * 56) * Game1.inventoryScale);
                    int num5 = i + j * 10;
                    new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
                    if (Game1.mouseX >= num3 && (float)Game1.mouseX <= (float)num3 + (float)Game1.inventoryBackTexture.Width * Game1.inventoryScale && Game1.mouseY >= num4 && (float)Game1.mouseY <= (float)num4 + (float)Game1.inventoryBackTexture.Height * Game1.inventoryScale)
                    {
                        Game1.player[Game1.myPlayer].mouseInterface = true;
                        ItemSlot.OverrideHover(Game1.player[Game1.myPlayer].inventory, 0, num5);
                        if (Game1.player[Game1.myPlayer].inventoryChestStack[num5] && (Game1.player[Game1.myPlayer].inventory[num5].itemId == 0 || Game1.player[Game1.myPlayer].inventory[num5].stack == 0))
                        {
                            Game1.player[Game1.myPlayer].inventoryChestStack[num5] = false;
                        }
                        if (!Game1.player[Game1.myPlayer].inventoryChestStack[num5])
                        {
                            if (Game1.mouseLeftRelease && Game1.mouseLeft)
                            {
                                ItemSlot.LeftClick(Game1.player[Game1.myPlayer].inventory, 0, num5);
                                Recipe.FindRecipes();
                            }
                            else
                            {
                                ItemSlot.RightClick(Game1.player[Game1.myPlayer].inventory, 0, num5);
                            }
                        }
                        ItemSlot.MouseHover(Game1.player[Game1.myPlayer].inventory, 0, num5);
                    }
                    ItemSlot.Draw(Game1.spriteBatch, Game1.player[Game1.myPlayer].inventory, 0, num5, new Vector2((float)num3, (float)num4), default(Microsoft.Xna.Framework.Color));
                }
            }
            int num6 = 0;
            int num7 = 2;
            int num8 = 32;
            if (!Game1.player[Game1.myPlayer].hbLocked)
            {
                num6 = 1;
            }
            Game1.spriteBatch.Draw(Game1.HBLockTexture[num6], new Vector2((float)num7, (float)num8), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.HBLockTexture[num6].Width, Game1.HBLockTexture[num6].Height)), Game1.inventoryBack, 0f, default(Vector2), 0.9f, SpriteEffects.None, 0f);
            if (Game1.mouseX > num7 && (float)Game1.mouseX < (float)num7 + (float)Game1.HBLockTexture[num6].Width * 0.9f && Game1.mouseY > num8 && (float)Game1.mouseY < (float)num8 + (float)Game1.HBLockTexture[num6].Height * 0.9f)
            {
                Game1.player[Game1.myPlayer].mouseInterface = true;
                if (!Game1.player[Game1.myPlayer].hbLocked)
                {
                    this.MouseText(Lang.inter[5], 0, 0);
                    Game1.mouseText = true;
                }
                else
                {
                    this.MouseText(Lang.inter[6], 0, 0);
                    Game1.mouseText = true;
                }
                if (Game1.mouseLeft && Game1.mouseLeftRelease)
                {
                    Game1.PlaySound(22, -1, -1, 1);
                    if (!Game1.player[Game1.myPlayer].hbLocked)
                    {
                        Game1.player[Game1.myPlayer].hbLocked = true;
                    }
                    else
                    {
                        Game1.player[Game1.myPlayer].hbLocked = false;
                    }
                }
            }
            if (Game1.mapEnabled)
            {
                bool flag = false;
                int num9 = Game1.screenWidth - 440;
                int num10 = 40;
                if (Game1.screenWidth < 940)
                {
                    flag = true;
                }
                if (flag)
                {
                    num9 = Game1.screenWidth - 40;
                    num10 = Game1.screenHeight - 200;
                }
                for (int k = 0; k < 4; k++)
                {
                    int num11 = num9 + k * 32;
                    int num12 = num10;
                    if (flag)
                    {
                        num11 = num9;
                        num12 = num10 + k * 32;
                    }
                    int num13 = k;
                    int num14 = 120;
                    if (k > 0 && Game1.mapStyle == k - 1)
                    {
                        num14 = 200;
                    }
                    if (Game1.mouseX >= num11 && Game1.mouseX <= num11 + 32 && Game1.mouseY >= num12 && Game1.mouseY <= num12 + 30)
                    {
                        num14 = 255;
                        num13 += 4;
                        Game1.player[Game1.myPlayer].mouseInterface = true;
                        if (Game1.mouseLeft && Game1.mouseLeftRelease)
                        {
                            if (k == 0)
                            {
                                Game1.playerInventory = false;
                                Game1.player[Game1.myPlayer].talkNPC = -1;
                                Game1.npcChatCornerItem = 0;
                                Game1.PlaySound(10, -1, -1, 1);
                                float num15 = 2.5f;
                                Game1.mapFullscreenScale = num15;
                                Game1.mapFullscreen = true;
                                Game1.resetMapFull = true;
                            }
                            if (k == 1)
                            {
                                Game1.mapStyle = 0;
                                Game1.PlaySound(12, -1, -1, 1);
                            }
                            if (k == 2)
                            {
                                Game1.mapStyle = 1;
                                Game1.PlaySound(12, -1, -1, 1);
                            }
                            if (k == 3)
                            {
                                Game1.mapStyle = 2;
                                Game1.PlaySound(12, -1, -1, 1);
                            }
                        }
                    }
                    Game1.spriteBatch.Draw(Game1.mapIconTexture[num13], new Vector2((float)num11, (float)num12), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.mapIconTexture[num13].Width, Game1.mapIconTexture[num13].Height)), new Microsoft.Xna.Framework.Color(num14, num14, num14, num14), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                }
            }
            if (Game1.armorHide)
            {
                Game1.armorAlpha -= 0.1f;
                if (Game1.armorAlpha < 0f)
                {
                    Game1.armorAlpha = 0f;
                }
            }
            else
            {
                Game1.armorAlpha += 0.025f;
                if (Game1.armorAlpha > 1f)
                {
                    Game1.armorAlpha = 1f;
                }
            }
            new Microsoft.Xna.Framework.Color((int)((byte)((float)Game1.mouseTextColor * Game1.armorAlpha)), (int)((byte)((float)Game1.mouseTextColor * Game1.armorAlpha)), (int)((byte)((float)Game1.mouseTextColor * Game1.armorAlpha)), (int)((byte)((float)Game1.mouseTextColor * Game1.armorAlpha)));
            Game1.armorHide = false;
            int num16 = Game1.DrawPageIcons();
            if (num16 > -1)
            {
                Game1.toolTip = new Item();
                switch (num16)
                {
                    case 1:
                        Game1.hoverItemName = Lang.inter[80];
                        break;
                    case 2:
                        Game1.hoverItemName = Lang.inter[79];
                        break;
                    case 3:
                        Game1.hoverItemName = (Game1.CaptureModeDisabled ? Lang.inter[115] : Lang.inter[81]);
                        break;
                }
            }
            if (Game1.EquipPage == 2)
            {
                Microsoft.Xna.Framework.Point value = new Microsoft.Xna.Framework.Point(Game1.mouseX, Game1.mouseY);
                Microsoft.Xna.Framework.Rectangle r = new Microsoft.Xna.Framework.Rectangle(0, 0, (int)((float)Game1.inventoryBackTexture.Width * Game1.inventoryScale), (int)((float)Game1.inventoryBackTexture.Height * Game1.inventoryScale));
                Item[] inv = Game1.player[Game1.myPlayer].miscEquips;
                int num17 = Game1.screenWidth - 92;
                int num18 = Game1.mH + 174;
                for (int l = 0; l < 2; l++)
                {
                    if (l == 0)
                    {
                        inv = Game1.player[Game1.myPlayer].miscEquips;
                    }
                    else if (l == 1)
                    {
                        inv = Game1.player[Game1.myPlayer].miscDyes;
                    }
                    r.X = num17 + l * -47;
                    for (int m = 0; m < 5; m++)
                    {
                        int context = 0;
                        int num19 = -1;
                        switch (m)
                        {
                            case 0:
                                context = 19;
                                num19 = 0;
                                break;
                            case 1:
                                context = 20;
                                num19 = 1;
                                break;
                            case 2:
                                context = 18;
                                break;
                            case 3:
                                context = 17;
                                break;
                            case 4:
                                context = 16;
                                break;
                        }
                        if (l == 1)
                        {
                            context = 12;
                            num19 = -1;
                        }
                        r.Y = num18 + m * 47;
                        Texture2D texture2D = Game1.inventoryTickOnTexture;
                        if (Game1.player[Game1.myPlayer].hideMisc[num19])
                        {
                            texture2D = Game1.inventoryTickOffTexture;
                        }
                        Microsoft.Xna.Framework.Rectangle r2 = new Microsoft.Xna.Framework.Rectangle(r.Left + 34, r.Top - 2, texture2D.Width, texture2D.Height);
                        int num20 = 0;
                        bool flag2 = false;
                        if (r2.Contains(value))
                        {
                            Game1.player[Game1.myPlayer].mouseInterface = true;
                            flag2 = true;
                            if (Game1.mouseLeft && Game1.mouseLeftRelease)
                            {
                                if (num19 == 0)
                                {
                                    Game1.player[Game1.myPlayer].TogglePet();
                                }
                                if (num19 == 1)
                                {
                                    Game1.player[Game1.myPlayer].ToggleLight();
                                }
                                Game1.mouseLeftRelease = false;
                                Game1.PlaySound(12, -1, -1, 1);
                                if (Game1.netMode == 1)
                                {
                                    NetMessage.SendData(4, -1, -1, Game1.player[Game1.myPlayer].name, Game1.myPlayer, 0f, 0f, 0f, 0, 0, 0);
                                }
                            }
                            if (Game1.player[Game1.myPlayer].hideMisc[num19])
                            {
                                num20 = 2;
                            }
                            else
                            {
                                num20 = 1;
                            }
                        }
                        if (r.Contains(value) && !flag2)
                        {
                            Game1.player[Game1.myPlayer].mouseInterface = true;
                            Game1.armorHide = true;
                            ItemSlot.Handle(inv, context, m);
                        }
                        ItemSlot.Draw(Game1.spriteBatch, inv, context, m, r.TopLeft(), default(Microsoft.Xna.Framework.Color));
                        if (num19 != -1)
                        {
                            Game1.spriteBatch.Draw(texture2D, r2.TopLeft(), Microsoft.Xna.Framework.Color.White * 0.7f);
                            if (num20 > 0)
                            {
                                Game1.toolTip = new Item();
                                Game1.hoverItemName = Lang.inter[58 + num20];
                            }
                        }
                    }
                }
            }
            else if (Game1.EquipPage == 1)
            {
                if (Game1.mouseX > Game1.screenWidth - 64 - 28 && Game1.mouseX < (int)((float)(Game1.screenWidth - 64 - 28) + 56f * Game1.inventoryScale) && Game1.mouseY > 174 + Game1.mH && Game1.mouseY < (int)((float)(174 + Game1.mH) + 448f * Game1.inventoryScale))
                {
                    Game1.player[Game1.myPlayer].mouseInterface = true;
                }
                int num21 = 0;
                string text = "";
                int num22 = 0;
                int num23 = 0;
                for (int n = 0; n < Game1.npcHeadTexture.Length; n++)
                {
                    bool flag3 = false;
                    int num24 = 0;
                    if (n == 0)
                    {
                        flag3 = true;
                    }
                    else if (n == 21)
                    {
                        flag3 = false;
                    }
                    else
                    {
                        for (int num25 = 0; num25 < 200; num25++)
                        {
                            if (Game1.npc[num25].active && NPC.TypeToNum(Game1.npc[num25].type) == n)
                            {
                                flag3 = true;
                                num24 = num25;
                                break;
                            }
                        }
                    }
                    if (flag3)
                    {
                        int num26 = Game1.screenWidth - 64 - 28 + num23;
                        int num27 = (int)((float)(174 + Game1.mH) + (float)(num21 * 56) * Game1.inventoryScale) + num22;
                        Microsoft.Xna.Framework.Color white = new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
                        if (num27 > Game1.screenHeight - 80)
                        {
                            num23 -= 48;
                            num22 -= num27 - (174 + Game1.mH);
                            num26 = Game1.screenWidth - 64 - 28 + num23;
                            num27 = (int)((float)(174 + Game1.mH) + (float)(num21 * 56) * Game1.inventoryScale) + num22;
                        }
                        if (Game1.mouseX >= num26 && (float)Game1.mouseX <= (float)num26 + (float)Game1.inventoryBackTexture.Width * Game1.inventoryScale && Game1.mouseY >= num27 && (float)Game1.mouseY <= (float)num27 + (float)Game1.inventoryBackTexture.Height * Game1.inventoryScale)
                        {
                            Game1.mouseText = true;
                            if (n == 0)
                            {
                                text = Lang.inter[8];
                            }
                            else if (n == 11)
                            {
                                text = Game1.npc[num24].displayName;
                            }
                            else
                            {
                                text = Game1.npc[num24].displayName + " the " + Game1.npc[num24].name;
                            }
                            Game1.player[Game1.myPlayer].mouseInterface = true;
                            if (Game1.mouseLeftRelease && Game1.mouseLeft && Game1.mouseItem.itemId == 0)
                            {
                                Game1.PlaySound(12, -1, -1, 1);
                                this.mouseNPC = n;
                                Game1.mouseLeftRelease = false;
                            }
                        }
                        Game1.spriteBatch.Draw(Game1.inventoryBack11Texture, new Vector2((float)num26, (float)num27), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.inventoryBackTexture.Width, Game1.inventoryBackTexture.Height)), Game1.inventoryBack, 0f, default(Vector2), Game1.inventoryScale, SpriteEffects.None, 0f);
                        white = Microsoft.Xna.Framework.Color.White;
                        int num28 = n;
                        float scale = 1f;
                        float num29;
                        if (Game1.npcHeadTexture[num28].Width > Game1.npcHeadTexture[num28].Height)
                        {
                            num29 = (float)Game1.npcHeadTexture[num28].Width;
                        }
                        else
                        {
                            num29 = (float)Game1.npcHeadTexture[num28].Height;
                        }
                        if (num29 > 36f)
                        {
                            scale = 36f / num29;
                        }
                        Game1.spriteBatch.Draw(Game1.npcHeadTexture[num28], new Vector2((float)num26 + 26f * Game1.inventoryScale, (float)num27 + 26f * Game1.inventoryScale), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.npcHeadTexture[num28].Width, Game1.npcHeadTexture[num28].Height)), white, 0f, new Vector2((float)(Game1.npcHeadTexture[num28].Width / 2), (float)(Game1.npcHeadTexture[num28].Height / 2)), scale, SpriteEffects.None, 0f);
                        num21++;
                    }
                }
                if (text != "" && Game1.mouseItem.itemId == 0)
                {
                    this.MouseText(text, 0, 0);
                }
            }
            else
            {
                int num30 = 4;
                if (Game1.mouseX > Game1.screenWidth - 64 - 28 && Game1.mouseX < (int)((float)(Game1.screenWidth - 64 - 28) + 56f * Game1.inventoryScale) && Game1.mouseY > 174 + Game1.mH && Game1.mouseY < (int)((float)(174 + Game1.mH) + 448f * Game1.inventoryScale))
                {
                    Game1.player[Game1.myPlayer].mouseInterface = true;
                }
                float num31 = Game1.inventoryScale;
                int num32 = 8 + Game1.player[Game1.myPlayer].extraAccessorySlots;
                bool flag4 = false;
                int num33 = num32 - 1;
                if (num32 == 8 && (Game1.player[Game1.myPlayer].armor[8].itemId > 0 || Game1.player[Game1.myPlayer].armor[18].itemId > 0 || Game1.player[Game1.myPlayer].dye[8].itemId > 0))
                {
                    num32 = 9;
                    flag4 = true;
                    num33 = 7;
                }
                Microsoft.Xna.Framework.Color color = Game1.inventoryBack;
                Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color(80, 80, 80, 80);
                for (int num34 = 0; num34 < num32; num34++)
                {
                    bool flag5 = false;
                    if (flag4 && num34 == num32 - 1 && Game1.mouseItem.itemId > 0)
                    {
                        flag5 = true;
                    }
                    int num35 = Game1.screenWidth - 64 - 28;
                    int num36 = (int)((float)(174 + Game1.mH) + (float)(num34 * 56) * Game1.inventoryScale);
                    new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
                    if (num34 > 2)
                    {
                        num36 += num30;
                    }
                    if (num34 == num33)
                    {
                        Vector2 vector = new Vector2((float)(num35 - 10 - 47 - 47 - 14), (float)num36 + (float)Game1.inventoryBackTexture.Height * 0.5f);
                        Game1.spriteBatch.Draw(Game1.extraTexture[58], vector, null, Microsoft.Xna.Framework.Color.White, 0f, Game1.extraTexture[58].Size() / 2f, Game1.inventoryScale, SpriteEffects.None, 0f);
                        Vector2 value2 = Game1.fontMouseText.MeasureString(Game1.player[Game1.myPlayer].statDefense.ToString());
                        ChatManager.DrawColorCodedStringWithShadow(Game1.spriteBatch, Game1.fontMouseText, Game1.player[Game1.myPlayer].statDefense.ToString(), vector - value2 * 0.5f * Game1.inventoryScale, Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, new Vector2(Game1.inventoryScale), -1f, 2f);
                        if (Utils.CenteredRectangle(vector, Game1.extraTexture[58].Size()).Contains(new Microsoft.Xna.Framework.Point(Game1.mouseX, Game1.mouseY)))
                        {
                            Game1.player[Game1.myPlayer].mouseInterface = true;
                            string value3 = Game1.player[Game1.myPlayer].statDefense + " " + Lang.inter[10];
                            if (!string.IsNullOrEmpty(value3))
                            {
                                Game1.hoverItemName = value3;
                            }
                        }
                    }
                    int context2 = 8;
                    if (num34 > 2)
                    {
                        context2 = 10;
                    }
                    Texture2D texture2D2 = Game1.inventoryTickOnTexture;
                    if (Game1.player[Game1.myPlayer].hideVisual[num34])
                    {
                        texture2D2 = Game1.inventoryTickOffTexture;
                    }
                    int num37 = Game1.screenWidth - 58;
                    int num38 = (int)((float)(172 + Game1.mH) + (float)(num34 * 56) * Game1.inventoryScale);
                    if (num34 > 2)
                    {
                        num38 += num30;
                    }
                    Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(num37, num38, texture2D2.Width, texture2D2.Height);
                    int num39 = 0;
                    if (num34 >= 3 && num34 < num32 && rectangle.Contains(new Microsoft.Xna.Framework.Point(Game1.mouseX, Game1.mouseY)))
                    {
                        Game1.player[Game1.myPlayer].mouseInterface = true;
                        if (Game1.mouseLeft && Game1.mouseLeftRelease)
                        {
                            Game1.player[Game1.myPlayer].hideVisual[num34] = !Game1.player[Game1.myPlayer].hideVisual[num34];
                            Game1.PlaySound(12, -1, -1, 1);
                            if (Game1.netMode == 1)
                            {
                                NetMessage.SendData(4, -1, -1, Game1.player[Game1.myPlayer].name, Game1.myPlayer, 0f, 0f, 0f, 0, 0, 0);
                            }
                        }
                        if (Game1.player[Game1.myPlayer].hideVisual[num34])
                        {
                            num39 = 2;
                        }
                        else
                        {
                            num39 = 1;
                        }
                    }
                    else if (Game1.mouseX >= num35 && (float)Game1.mouseX <= (float)num35 + (float)Game1.inventoryBackTexture.Width * Game1.inventoryScale && Game1.mouseY >= num36 && (float)Game1.mouseY <= (float)num36 + (float)Game1.inventoryBackTexture.Height * Game1.inventoryScale)
                    {
                        Game1.armorHide = true;
                        Game1.player[Game1.myPlayer].mouseInterface = true;
                        ItemSlot.OverrideHover(Game1.player[Game1.myPlayer].armor, context2, num34);
                        if (!flag5 && Game1.mouseLeftRelease && Game1.mouseLeft)
                        {
                            ItemSlot.LeftClick(Game1.player[Game1.myPlayer].armor, context2, num34);
                        }
                        ItemSlot.MouseHover(Game1.player[Game1.myPlayer].armor, context2, num34);
                    }
                    if (flag4 && num34 == num32 - 1)
                    {
                        Game1.inventoryBack = color2;
                    }
                    ItemSlot.Draw(Game1.spriteBatch, Game1.player[Game1.myPlayer].armor, context2, num34, new Vector2((float)num35, (float)num36), default(Microsoft.Xna.Framework.Color));
                    if (num34 > 2 && num34 < num32)
                    {
                        Game1.spriteBatch.Draw(texture2D2, new Vector2((float)num37, (float)num38), Microsoft.Xna.Framework.Color.White * 0.7f);
                        if (num39 > 0)
                        {
                            Game1.toolTip = new Item();
                            Game1.hoverItemName = Lang.inter[58 + num39];
                        }
                    }
                }
                Game1.inventoryBack = color;
                if (Game1.mouseX > Game1.screenWidth - 64 - 28 - 47 && Game1.mouseX < (int)((float)(Game1.screenWidth - 64 - 20 - 47) + 56f * Game1.inventoryScale) && Game1.mouseY > 174 + Game1.mH && Game1.mouseY < (int)((float)(174 + Game1.mH) + 168f * Game1.inventoryScale))
                {
                    Game1.player[Game1.myPlayer].mouseInterface = true;
                }
                for (int num40 = 10; num40 < 10 + num32; num40++)
                {
                    bool flag6 = false;
                    if (flag4 && num40 == 10 + num32 - 1 && Game1.mouseItem.itemId > 0)
                    {
                        flag6 = true;
                    }
                    int num41 = Game1.screenWidth - 64 - 28 - 47;
                    int num42 = (int)((float)(174 + Game1.mH) + (float)((num40 - 10) * 56) * Game1.inventoryScale);
                    new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
                    if (num40 > 12)
                    {
                        num42 += num30;
                    }
                    int context3 = 9;
                    if (num40 > 12)
                    {
                        context3 = 11;
                    }
                    if (Game1.mouseX >= num41 && (float)Game1.mouseX <= (float)num41 + (float)Game1.inventoryBackTexture.Width * Game1.inventoryScale && Game1.mouseY >= num42 && (float)Game1.mouseY <= (float)num42 + (float)Game1.inventoryBackTexture.Height * Game1.inventoryScale)
                    {
                        Game1.player[Game1.myPlayer].mouseInterface = true;
                        Game1.armorHide = true;
                        ItemSlot.OverrideHover(Game1.player[Game1.myPlayer].armor, context3, num40);
                        if (!flag6)
                        {
                            if (Game1.mouseLeftRelease && Game1.mouseLeft)
                            {
                                ItemSlot.LeftClick(Game1.player[Game1.myPlayer].armor, context3, num40);
                            }
                            else
                            {
                                ItemSlot.RightClick(Game1.player[Game1.myPlayer].armor, context3, num40);
                            }
                        }
                        ItemSlot.MouseHover(Game1.player[Game1.myPlayer].armor, context3, num40);
                    }
                    if (flag4 && num40 == num32 + 10 - 1)
                    {
                        Game1.inventoryBack = color2;
                    }
                    ItemSlot.Draw(Game1.spriteBatch, Game1.player[Game1.myPlayer].armor, context3, num40, new Vector2((float)num41, (float)num42), default(Microsoft.Xna.Framework.Color));
                }
                Game1.inventoryBack = color;
                if (Game1.mouseX > Game1.screenWidth - 64 - 28 - 47 && Game1.mouseX < (int)((float)(Game1.screenWidth - 64 - 20 - 47) + 56f * Game1.inventoryScale) && Game1.mouseY > 174 + Game1.mH && Game1.mouseY < (int)((float)(174 + Game1.mH) + 168f * Game1.inventoryScale))
                {
                    Game1.player[Game1.myPlayer].mouseInterface = true;
                }
                for (int num43 = 0; num43 < num32; num43++)
                {
                    bool flag7 = false;
                    if (flag4 && num43 == num32 - 1 && Game1.mouseItem.itemId > 0)
                    {
                        flag7 = true;
                    }
                    int num44 = Game1.screenWidth - 64 - 28 - 47 - 47;
                    int num45 = (int)((float)(174 + Game1.mH) + (float)(num43 * 56) * Game1.inventoryScale);
                    new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
                    if (num43 > 2)
                    {
                        num45 += num30;
                    }
                    if (Game1.mouseX >= num44 && (float)Game1.mouseX <= (float)num44 + (float)Game1.inventoryBackTexture.Width * Game1.inventoryScale && Game1.mouseY >= num45 && (float)Game1.mouseY <= (float)num45 + (float)Game1.inventoryBackTexture.Height * Game1.inventoryScale)
                    {
                        Game1.player[Game1.myPlayer].mouseInterface = true;
                        Game1.armorHide = true;
                        ItemSlot.OverrideHover(Game1.player[Game1.myPlayer].dye, 12, num43);
                        if (!flag7)
                        {
                            if (Game1.mouseRightRelease && Game1.mouseRight)
                            {
                                ItemSlot.RightClick(Game1.player[Game1.myPlayer].dye, 12, num43);
                            }
                            else if (Game1.mouseLeftRelease && Game1.mouseLeft)
                            {
                                ItemSlot.LeftClick(Game1.player[Game1.myPlayer].dye, 12, num43);
                            }
                        }
                        ItemSlot.MouseHover(Game1.player[Game1.myPlayer].dye, 12, num43);
                    }
                    if (flag4 && num43 == num32 - 1)
                    {
                        Game1.inventoryBack = color2;
                    }
                    ItemSlot.Draw(Game1.spriteBatch, Game1.player[Game1.myPlayer].dye, 12, num43, new Vector2((float)num44, (float)num45), default(Microsoft.Xna.Framework.Color));
                }
                Game1.inventoryBack = color;
                Game1.inventoryScale = num31;
            }
            int num46 = (Game1.screenHeight - 600) / 2;
            int num47 = (int)((float)Game1.screenHeight / 600f * 250f);
            if (Game1.screenHeight < 700)
            {
                num46 = (Game1.screenHeight - 508) / 2;
                num47 = (int)((float)Game1.screenHeight / 600f * 200f);
            }
            else if (Game1.screenHeight < 850)
            {
                num47 = (int)((float)Game1.screenHeight / 600f * 225f);
            }
            if (Game1.craftingHide)
            {
                Game1.craftingAlpha -= 0.1f;
                if (Game1.craftingAlpha < 0f)
                {
                    Game1.craftingAlpha = 0f;
                }
            }
            else
            {
                Game1.craftingAlpha += 0.025f;
                if (Game1.craftingAlpha > 1f)
                {
                    Game1.craftingAlpha = 1f;
                }
            }
            Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color((int)((byte)((float)Game1.mouseTextColor * Game1.craftingAlpha)), (int)((byte)((float)Game1.mouseTextColor * Game1.craftingAlpha)), (int)((byte)((float)Game1.mouseTextColor * Game1.craftingAlpha)), (int)((byte)((float)Game1.mouseTextColor * Game1.craftingAlpha)));
            Game1.craftingHide = false;
            if (Game1.reforge)
            {
                if (Game1.mouseReforge)
                {
                    if (Game1.reforgeScale < 1f)
                    {
                        Game1.reforgeScale += 0.02f;
                    }
                }
                else if (Game1.reforgeScale > 1f)
                {
                    Game1.reforgeScale -= 0.02f;
                }
                if (Game1.player[Game1.myPlayer].chest != -1 || Game1.npcShop != 0 || Game1.player[Game1.myPlayer].talkNPC == -1 || Game1.craftGuide)
                {
                    Game1.reforge = false;
                    Game1.player[Game1.myPlayer].dropItemCheck();
                    Recipe.FindRecipes();
                }
                else
                {
                    int num48 = 50;
                    int num49 = 270;
                    string text2 = Lang.inter[46] + ": ";
                    if (Game1.reforgeItem.itemId > 0)
                    {
                        int num50 = Game1.reforgeItem.value;
                        if (Game1.player[Game1.myPlayer].discount)
                        {
                            num50 = (int)((double)num50 * 0.8);
                        }
                        num50 /= 3;
                        string text3 = "";
                        int num51 = 0;
                        int num52 = 0;
                        int num53 = 0;
                        int num54 = 0;
                        int num55 = num50;
                        if (num55 < 1)
                        {
                            num55 = 1;
                        }
                        if (num55 >= 1000000)
                        {
                            num51 = num55 / 1000000;
                            num55 -= num51 * 1000000;
                        }
                        if (num55 >= 10000)
                        {
                            num52 = num55 / 10000;
                            num55 -= num52 * 10000;
                        }
                        if (num55 >= 100)
                        {
                            num53 = num55 / 100;
                            num55 -= num53 * 100;
                        }
                        if (num55 >= 1)
                        {
                            num54 = num55;
                        }
                        if (num51 > 0)
                        {
                            object obj = text3;
                            text3 = string.Concat(new object[]
                            {
                                obj,
                                "[c/",
                                Colors.AlphaDarken(Colors.CoinPlatinum).Hex3(),
                                ":",
                                num51,
                                " ",
                                Lang.inter[15],
                                "] "
                            });
                        }
                        if (num52 > 0)
                        {
                            object obj = text3;
                            text3 = string.Concat(new object[]
                            {
                                obj,
                                "[c/",
                                Colors.AlphaDarken(Colors.CoinGold).Hex3(),
                                ":",
                                num52,
                                " ",
                                Lang.inter[16],
                                "] "
                            });
                        }
                        if (num53 > 0)
                        {
                            object obj = text3;
                            text3 = string.Concat(new object[]
                            {
                                obj,
                                "[c/",
                                Colors.AlphaDarken(Colors.CoinSilver).Hex3(),
                                ":",
                                num53,
                                " ",
                                Lang.inter[17],
                                "] "
                            });
                        }
                        if (num54 > 0)
                        {
                            object obj = text3;
                            text3 = string.Concat(new object[]
                            {
                                obj,
                                "[c/",
                                Colors.AlphaDarken(Colors.CoinCopper).Hex3(),
                                ":",
                                num54,
                                " ",
                                Lang.inter[18],
                                "] "
                            });
                        }
                        ItemSlot.DrawSavings(Game1.spriteBatch, (float)(num48 + 130), (float)this.invBottom, true);
                        ChatManager.DrawColorCodedStringWithShadow(Game1.spriteBatch, Game1.fontMouseText, text3, new Vector2((float)(num48 + 50) + Game1.fontMouseText.MeasureString(text2).X, (float)num49), Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, Vector2.One, -1f, 2f);
                        int num56 = num48 + 70;
                        int num57 = num49 + 40;
                        bool flag8 = Game1.mouseX > num56 - 15 && Game1.mouseX < num56 + 15 && Game1.mouseY > num57 - 15 && Game1.mouseY < num57 + 15;
                        Texture2D texture2D3 = Game1.reforgeTexture[0];
                        if (flag8)
                        {
                            texture2D3 = Game1.reforgeTexture[1];
                        }
                        Game1.spriteBatch.Draw(texture2D3, new Vector2((float)num56, (float)num57), null, Microsoft.Xna.Framework.Color.White, 0f, texture2D3.Size() / 2f, Game1.reforgeScale, SpriteEffects.None, 0f);
                        if (flag8)
                        {
                            Game1.hoverItemName = Lang.inter[19];
                            if (!Game1.mouseReforge)
                            {
                                Game1.PlaySound(12, -1, -1, 1);
                            }
                            Game1.mouseReforge = true;
                            Game1.player[Game1.myPlayer].mouseInterface = true;
                            if (Game1.mouseLeftRelease && Game1.mouseLeft && Game1.player[Game1.myPlayer].BuyItem(num50))
                            {
                                bool favorited = Game1.reforgeItem.favorited;
                                Game1.reforgeItem.netDefaults(Game1.reforgeItem.netID);
                                Game1.reforgeItem.Prefix(-2);
                                Game1.reforgeItem.position.X = Game1.player[Game1.myPlayer].position.X + (float)(Game1.player[Game1.myPlayer].width / 2) - (float)(Game1.reforgeItem.width / 2);
                                Game1.reforgeItem.position.Y = Game1.player[Game1.myPlayer].position.Y + (float)(Game1.player[Game1.myPlayer].height / 2) - (float)(Game1.reforgeItem.height / 2);
                                Game1.reforgeItem.favorited = favorited;
                                ItemText.NewText(Game1.reforgeItem, Game1.reforgeItem.stack, true, false);
                                Game1.PlaySound(2, -1, -1, 37);
                            }
                        }
                        else
                        {
                            Game1.mouseReforge = false;
                        }
                    }
                    else
                    {
                        text2 = Lang.inter[20];
                    }
                    ChatManager.DrawColorCodedStringWithShadow(Game1.spriteBatch, Game1.fontMouseText, text2, new Vector2((float)(num48 + 50), (float)num49), new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor), 0f, Vector2.Zero, Vector2.One, -1f, 2f);
                    if (Game1.mouseX >= num48 && (float)Game1.mouseX <= (float)num48 + (float)Game1.inventoryBackTexture.Width * Game1.inventoryScale && Game1.mouseY >= num49 && (float)Game1.mouseY <= (float)num49 + (float)Game1.inventoryBackTexture.Height * Game1.inventoryScale)
                    {
                        Game1.player[Game1.myPlayer].mouseInterface = true;
                        Game1.craftingHide = true;
                        if (Game1.mouseLeftRelease && Game1.mouseLeft)
                        {
                            ItemSlot.LeftClick(ref Game1.reforgeItem, 5);
                            Recipe.FindRecipes();
                        }
                        else
                        {
                            ItemSlot.RightClick(ref Game1.reforgeItem, 5);
                        }
                        ItemSlot.MouseHover(ref Game1.reforgeItem, 5);
                    }
                    ItemSlot.Draw(Game1.spriteBatch, ref Game1.reforgeItem, 5, new Vector2((float)num48, (float)num49), default(Microsoft.Xna.Framework.Color));
                }
            }
            else if (Game1.craftGuide)
            {
                if (Game1.player[Game1.myPlayer].chest != -1 || Game1.npcShop != 0 || Game1.player[Game1.myPlayer].talkNPC == -1 || Game1.reforge)
                {
                    Game1.craftGuide = false;
                    Game1.player[Game1.myPlayer].dropItemCheck();
                    Recipe.FindRecipes();
                }
                else
                {
                    int num58 = 73;
                    int num59 = 331;
                    num59 += num46;
                    string text4;
                    if (Game1.guideItem.itemId > 0)
                    {
                        text4 = Lang.inter[21] + " " + Game1.guideItem.name;
                        Game1.spriteBatch.DrawString(Game1.fontMouseText, Lang.inter[22], new Vector2((float)num58, (float)(num59 + 118)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                        int num60 = Game1.focusRecipe;
                        int num61 = 0;
                        int num62 = 0;
                        while (num62 < Recipe.maxRequirements)
                        {
                            int num63 = (num62 + 1) * 26;
                            if (Game1.recipe[Game1.availableRecipe[num60]].requiredTile[num62] == -1)
                            {
                                if (num62 == 0 && !Game1.recipe[Game1.availableRecipe[num60]].needWater && !Game1.recipe[Game1.availableRecipe[num60]].needHoney && !Game1.recipe[Game1.availableRecipe[num60]].needLava)
                                {
                                    Game1.spriteBatch.DrawString(Game1.fontMouseText, Lang.inter[23], new Vector2((float)num58, (float)(num59 + 118 + num63)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                    break;
                                }
                                break;
                            }
                            else
                            {
                                num61++;
                                Game1.spriteBatch.DrawString(Game1.fontMouseText, Lang.mapLegend[MapHelper.TileToLookup(Game1.recipe[Game1.availableRecipe[num60]].requiredTile[num62], 0)], new Vector2((float)num58, (float)(num59 + 118 + num63)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                num62++;
                            }
                        }
                        if (Game1.recipe[Game1.availableRecipe[num60]].needWater)
                        {
                            int num64 = (num61 + 1) * 26;
                            Game1.spriteBatch.DrawString(Game1.fontMouseText, Lang.inter[53], new Vector2((float)num58, (float)(num59 + 118 + num64)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                        }
                        if (Game1.recipe[Game1.availableRecipe[num60]].needHoney)
                        {
                            int num65 = (num61 + 1) * 26;
                            Game1.spriteBatch.DrawString(Game1.fontMouseText, Lang.inter[58], new Vector2((float)num58, (float)(num59 + 118 + num65)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                        }
                        if (Game1.recipe[Game1.availableRecipe[num60]].needLava)
                        {
                            int num66 = (num61 + 1) * 26;
                            Game1.spriteBatch.DrawString(Game1.fontMouseText, Lang.inter[56], new Vector2((float)num58, (float)(num59 + 118 + num66)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                        }
                    }
                    else
                    {
                        text4 = Lang.inter[24];
                    }
                    Game1.spriteBatch.DrawString(Game1.fontMouseText, text4, new Vector2((float)(num58 + 50), (float)(num59 + 12)), new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                    new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
                    if (Game1.mouseX >= num58 && (float)Game1.mouseX <= (float)num58 + (float)Game1.inventoryBackTexture.Width * Game1.inventoryScale && Game1.mouseY >= num59 && (float)Game1.mouseY <= (float)num59 + (float)Game1.inventoryBackTexture.Height * Game1.inventoryScale)
                    {
                        Game1.player[Game1.myPlayer].mouseInterface = true;
                        Game1.craftingHide = true;
                        if (Game1.mouseLeftRelease && Game1.mouseLeft)
                        {
                            ItemSlot.LeftClick(ref Game1.guideItem, 7);
                            Recipe.FindRecipes();
                        }
                        else
                        {
                            ItemSlot.RightClick(ref Game1.guideItem, 7);
                        }
                        ItemSlot.MouseHover(ref Game1.guideItem, 7);
                    }
                    ItemSlot.Draw(Game1.spriteBatch, ref Game1.guideItem, 7, new Vector2((float)num58, (float)num59), default(Microsoft.Xna.Framework.Color));
                }
            }
            if (!Game1.reforge)
            {
                if (Game1.numAvailableRecipes > 0)
                {
                    Game1.spriteBatch.DrawString(Game1.fontMouseText, Lang.inter[25], new Vector2(76f, (float)(414 + num46)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                }
                for (int num67 = 0; num67 < Recipe.maxRecipes; num67++)
                {
                    Game1.inventoryScale = 100f / (Math.Abs(Game1.availableRecipeY[num67]) + 100f);
                    if ((double)Game1.inventoryScale < 0.75)
                    {
                        Game1.inventoryScale = 0.75f;
                    }
                    if (Game1.recFastScroll)
                    {
                        Game1.inventoryScale = 0.75f;
                    }
                    if (Game1.availableRecipeY[num67] < (float)((num67 - Game1.focusRecipe) * 65))
                    {
                        if (Game1.availableRecipeY[num67] == 0f && !Game1.recFastScroll)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                        }
                        Game1.availableRecipeY[num67] += 6.5f;
                        if (Game1.recFastScroll)
                        {
                            Game1.availableRecipeY[num67] += 130000f;
                        }
                        if (Game1.availableRecipeY[num67] > (float)((num67 - Game1.focusRecipe) * 65))
                        {
                            Game1.availableRecipeY[num67] = (float)((num67 - Game1.focusRecipe) * 65);
                        }
                    }
                    else if (Game1.availableRecipeY[num67] > (float)((num67 - Game1.focusRecipe) * 65))
                    {
                        if (Game1.availableRecipeY[num67] == 0f && !Game1.recFastScroll)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                        }
                        Game1.availableRecipeY[num67] -= 6.5f;
                        if (Game1.recFastScroll)
                        {
                            Game1.availableRecipeY[num67] -= 130000f;
                        }
                        if (Game1.availableRecipeY[num67] < (float)((num67 - Game1.focusRecipe) * 65))
                        {
                            Game1.availableRecipeY[num67] = (float)((num67 - Game1.focusRecipe) * 65);
                        }
                    }
                    else
                    {
                        Game1.recFastScroll = false;
                    }
                    if (num67 < Game1.numAvailableRecipes && Math.Abs(Game1.availableRecipeY[num67]) <= (float)num47)
                    {
                        int num68 = (int)(46f - 26f * Game1.inventoryScale);
                        int num69 = (int)(410f + Game1.availableRecipeY[num67] * Game1.inventoryScale - 30f * Game1.inventoryScale + (float)num46);
                        double num70 = (double)(Game1.inventoryBack.A + 50);
                        double num71 = 255.0;
                        if (Math.Abs(Game1.availableRecipeY[num67]) > (float)(num47 - 100))
                        {
                            num70 = (double)(150f * (100f - (Math.Abs(Game1.availableRecipeY[num67]) - (float)(num47 - 100)))) * 0.01;
                            num71 = (double)(255f * (100f - (Math.Abs(Game1.availableRecipeY[num67]) - (float)(num47 - 100)))) * 0.01;
                        }
                        new Microsoft.Xna.Framework.Color((int)((byte)num70), (int)((byte)num70), (int)((byte)num70), (int)((byte)num70));
                        new Microsoft.Xna.Framework.Color((int)((byte)num71), (int)((byte)num71), (int)((byte)num71), (int)((byte)num71));
                        if (Game1.mouseX >= num68 && (float)Game1.mouseX <= (float)num68 + (float)Game1.inventoryBackTexture.Width * Game1.inventoryScale && Game1.mouseY >= num69 && (float)Game1.mouseY <= (float)num69 + (float)Game1.inventoryBackTexture.Height * Game1.inventoryScale)
                        {
                            Game1.player[Game1.myPlayer].mouseInterface = true;
                            if (Game1.focusRecipe == num67 && Game1.guideItem.itemId == 0)
                            {
                                if ((Game1.mouseItem.itemId == 0 || (Game1.mouseItem.IsTheSameAs(Game1.recipe[Game1.availableRecipe[num67]].createItem) && Game1.mouseItem.stack + Game1.recipe[Game1.availableRecipe[num67]].createItem.stack <= Game1.mouseItem.maxStack)) && !Game1.player[Game1.myPlayer].IsStackingItems())
                                {
                                    if (Game1.mouseLeftRelease && Game1.mouseLeft)
                                    {
                                        int stack = Game1.mouseItem.stack;
                                        Game1.mouseItem = Game1.recipe[Game1.availableRecipe[num67]].createItem.Clone();
                                        Game1.mouseItem.Prefix(-1);
                                        Game1.mouseItem.stack += stack;
                                        Game1.mouseItem.position.X = Game1.player[Game1.myPlayer].position.X + (float)(Game1.player[Game1.myPlayer].width / 2) - (float)(Game1.mouseItem.width / 2);
                                        Game1.mouseItem.position.Y = Game1.player[Game1.myPlayer].position.Y + (float)(Game1.player[Game1.myPlayer].height / 2) - (float)(Game1.mouseItem.height / 2);
                                        ItemText.NewText(Game1.mouseItem, Game1.recipe[Game1.availableRecipe[num67]].createItem.stack, false, false);
                                        Game1.recipe[Game1.availableRecipe[num67]].Create();
                                        if (Game1.mouseItem.itemId > 0 || Game1.recipe[Game1.availableRecipe[num67]].createItem.itemId > 0)
                                        {
                                            Game1.PlaySound(7, -1, -1, 1);
                                        }
                                    }
                                    else if (Game1.stackSplit <= 1 && Game1.mouseRight && (Game1.mouseItem.stack < Game1.mouseItem.maxStack || Game1.mouseItem.itemId == 0))
                                    {
                                        if (Game1.stackSplit == 0)
                                        {
                                            Game1.stackSplit = 15;
                                        }
                                        else
                                        {
                                            Game1.stackSplit = Game1.stackDelay;
                                        }
                                        int stack2 = Game1.mouseItem.stack;
                                        Game1.mouseItem = Game1.recipe[Game1.availableRecipe[num67]].createItem.Clone();
                                        Game1.mouseItem.stack += stack2;
                                        if (stack2 <= 0)
                                        {
                                            Game1.mouseItem.Prefix(-1);
                                        }
                                        Game1.mouseItem.position.X = Game1.player[Game1.myPlayer].position.X + (float)(Game1.player[Game1.myPlayer].width / 2) - (float)(Game1.mouseItem.width / 2);
                                        Game1.mouseItem.position.Y = Game1.player[Game1.myPlayer].position.Y + (float)(Game1.player[Game1.myPlayer].height / 2) - (float)(Game1.mouseItem.height / 2);
                                        ItemText.NewText(Game1.mouseItem, Game1.recipe[Game1.availableRecipe[num67]].createItem.stack, false, false);
                                        Game1.recipe[Game1.availableRecipe[num67]].Create();
                                        if (Game1.mouseItem.itemId > 0 || Game1.recipe[Game1.availableRecipe[num67]].createItem.itemId > 0)
                                        {
                                            Game1.PlaySound(7, -1, -1, 1);
                                        }
                                    }
                                }
                            }
                            else if (Game1.mouseLeftRelease && Game1.mouseLeft)
                            {
                                Game1.focusRecipe = num67;
                            }
                            Game1.craftingHide = true;
                            Game1.hoverItemName = Game1.recipe[Game1.availableRecipe[num67]].createItem.name;
                            Game1.toolTip = Game1.recipe[Game1.availableRecipe[num67]].createItem.Clone();
                            if (Game1.recipe[Game1.availableRecipe[num67]].createItem.stack > 1)
                            {
                                object obj = Game1.hoverItemName;
                                Game1.hoverItemName = string.Concat(new object[]
                                {
                                    obj,
                                    " (",
                                    Game1.recipe[Game1.availableRecipe[num67]].createItem.stack,
                                    ")"
                                });
                            }
                        }
                        if (Game1.numAvailableRecipes > 0)
                        {
                            num70 -= 50.0;
                            if (num70 < 0.0)
                            {
                                num70 = 0.0;
                            }
                            Microsoft.Xna.Framework.Color color4 = Game1.inventoryBack;
                            Game1.inventoryBack = new Microsoft.Xna.Framework.Color((int)((byte)num70), (int)((byte)num70), (int)((byte)num70), (int)((byte)num70));
                            ItemSlot.Draw(Game1.spriteBatch, ref Game1.recipe[Game1.availableRecipe[num67]].createItem, 22, new Vector2((float)num68, (float)num69), default(Microsoft.Xna.Framework.Color));
                            Game1.inventoryBack = color4;
                        }
                    }
                }
                if (Game1.numAvailableRecipes > 0)
                {
                    int num72 = 0;
                    while (num72 < Recipe.maxRequirements && Game1.recipe[Game1.availableRecipe[Game1.focusRecipe]].requiredItem[num72].itemId != 0)
                    {
                        int num73 = 80 + num72 * 40;
                        int num74 = 380 + num46;
                        double num75 = (double)(Game1.inventoryBack.A + 50);
                        Microsoft.Xna.Framework.Color white2 = Microsoft.Xna.Framework.Color.White;
                        Microsoft.Xna.Framework.Color white3 = Microsoft.Xna.Framework.Color.White;
                        num75 = (double)((float)(Game1.inventoryBack.A + 50) - Math.Abs(Game1.availableRecipeY[Game1.focusRecipe]) * 2f);
                        double num76 = (double)(255f - Math.Abs(Game1.availableRecipeY[Game1.focusRecipe]) * 2f);
                        if (num75 < 0.0)
                        {
                            num75 = 0.0;
                        }
                        if (num76 < 0.0)
                        {
                            num76 = 0.0;
                        }
                        white2.R = (byte)num75;
                        white2.G = (byte)num75;
                        white2.B = (byte)num75;
                        white2.A = (byte)num75;
                        white3.R = (byte)num76;
                        white3.G = (byte)num76;
                        white3.B = (byte)num76;
                        white3.A = (byte)num76;
                        Game1.inventoryScale = 0.6f;
                        if (num75 == 0.0)
                        {
                            break;
                        }
                        if (Game1.mouseX >= num73 && (float)Game1.mouseX <= (float)num73 + (float)Game1.inventoryBackTexture.Width * Game1.inventoryScale && Game1.mouseY >= num74 && (float)Game1.mouseY <= (float)num74 + (float)Game1.inventoryBackTexture.Height * Game1.inventoryScale)
                        {
                            Game1.craftingHide = true;
                            Game1.player[Game1.myPlayer].mouseInterface = true;
                            Game1.hoverItemName = Game1.recipe[Game1.availableRecipe[Game1.focusRecipe]].requiredItem[num72].name;
                            Game1.toolTip = Game1.recipe[Game1.availableRecipe[Game1.focusRecipe]].requiredItem[num72].Clone();
                            if (Game1.recipe[Game1.availableRecipe[Game1.focusRecipe]].anyIronBar && Game1.recipe[Game1.availableRecipe[Game1.focusRecipe]].requiredItem[num72].itemId == 22)
                            {
                                Game1.toolTip.name = Lang.misc[37] + " " + Game1.itemName[22];
                            }
                            else if (Game1.recipe[Game1.availableRecipe[Game1.focusRecipe]].anyWood && Game1.recipe[Game1.availableRecipe[Game1.focusRecipe]].requiredItem[num72].itemId == 9)
                            {
                                Game1.toolTip.name = Lang.misc[37] + " " + Game1.itemName[9];
                            }
                            else if (Game1.recipe[Game1.availableRecipe[Game1.focusRecipe]].anySand && Game1.recipe[Game1.availableRecipe[Game1.focusRecipe]].requiredItem[num72].itemId == 169)
                            {
                                Game1.toolTip.name = Lang.misc[37] + " " + Game1.itemName[169];
                            }
                            else if (Game1.recipe[Game1.availableRecipe[Game1.focusRecipe]].anyFragment && Game1.recipe[Game1.availableRecipe[Game1.focusRecipe]].requiredItem[num72].itemId == 3458)
                            {
                                Game1.toolTip.name = Lang.misc[37] + " " + Lang.misc[51];
                            }
                            else if (Game1.recipe[Game1.availableRecipe[Game1.focusRecipe]].anyPressurePlate && Game1.recipe[Game1.availableRecipe[Game1.focusRecipe]].requiredItem[num72].itemId == 542)
                            {
                                Game1.toolTip.name = Lang.misc[37] + " " + Lang.misc[38];
                            }
                            if (Game1.recipe[Game1.availableRecipe[Game1.focusRecipe]].requiredItem[num72].stack > 1)
                            {
                                object obj = Game1.hoverItemName;
                                Game1.hoverItemName = string.Concat(new object[]
                                {
                                    obj,
                                    " (",
                                    Game1.recipe[Game1.availableRecipe[Game1.focusRecipe]].requiredItem[num72].stack,
                                    ")"
                                });
                            }
                        }
                        num75 -= 50.0;
                        if (num75 < 0.0)
                        {
                            num75 = 0.0;
                        }
                        Microsoft.Xna.Framework.Color color5 = Game1.inventoryBack;
                        Game1.inventoryBack = new Microsoft.Xna.Framework.Color((int)((byte)num75), (int)((byte)num75), (int)((byte)num75), (int)((byte)num75));
                        ItemSlot.Draw(Game1.spriteBatch, ref Game1.recipe[Game1.availableRecipe[Game1.focusRecipe]].requiredItem[num72], 22, new Vector2((float)num73, (float)num74), default(Microsoft.Xna.Framework.Color));
                        Game1.inventoryBack = color5;
                        num72++;
                    }
                }
                if (Game1.numAvailableRecipes == 0)
                {
                    Game1.recBigList = false;
                }
                else
                {
                    int num77 = 94;
                    int num78 = 450 + num46;
                    if (Game1.craftGuide)
                    {
                        num78 -= 150;
                    }
                    bool flag9 = Game1.mouseX > num77 - 15 && Game1.mouseX < num77 + 15 && Game1.mouseY > num78 - 15 && Game1.mouseY < num78 + 15;
                    int num79 = Game1.recBigList.ToInt() * 2 + flag9.ToInt();
                    Game1.spriteBatch.Draw(Game1.craftToggleTexture[num79], new Vector2((float)num77, (float)num78), null, Microsoft.Xna.Framework.Color.White, 0f, Game1.craftToggleTexture[num79].Size() / 2f, 1f, SpriteEffects.None, 0f);
                    if (flag9)
                    {
                        this.MouseText("Crafting window", 0, 0);
                        Game1.player[Game1.myPlayer].mouseInterface = true;
                        if (Game1.mouseLeft && Game1.mouseLeftRelease)
                        {
                            if (!Game1.recBigList)
                            {
                                Game1.recBigList = true;
                                Game1.PlaySound(12, -1, -1, 1);
                            }
                            else
                            {
                                Game1.recBigList = false;
                                Game1.PlaySound(12, -1, -1, 1);
                            }
                        }
                    }
                }
            }
            if (Game1.recBigList)
            {
                int num80 = 42;
                if ((double)Game1.inventoryScale < 0.75)
                {
                    Game1.inventoryScale = 0.75f;
                }
                int num81 = 340;
                int num82 = 310;
                int num83 = (Game1.screenWidth - num82 - 280) / num80;
                int num84 = (Game1.screenHeight - num81 - 20) / num80;
                int num85 = 0;
                int num86 = 0;
                int num87 = num82;
                int num88 = num81;
                int num89 = num82 - 20;
                int num90 = num81 + 2;
                if (Game1.recStart > Game1.numAvailableRecipes - num83 * num84)
                {
                    Game1.recStart = Game1.numAvailableRecipes - num83 * num84;
                    if (Game1.recStart < 0)
                    {
                        Game1.recStart = 0;
                    }
                }
                if (Game1.recStart > 0)
                {
                    if (Game1.mouseX >= num89 && Game1.mouseX <= num89 + Game1.craftUpButtonTexture.Width && Game1.mouseY >= num90 && Game1.mouseY <= num90 + Game1.craftUpButtonTexture.Height)
                    {
                        Game1.player[Game1.myPlayer].mouseInterface = true;
                        if (Game1.mouseLeftRelease && Game1.mouseLeft)
                        {
                            Game1.recStart -= num83;
                            if (Game1.recStart < 0)
                            {
                                Game1.recStart = 0;
                            }
                            Game1.PlaySound(12, -1, -1, 1);
                            Game1.mouseLeftRelease = false;
                        }
                    }
                    Game1.spriteBatch.Draw(Game1.craftUpButtonTexture, new Vector2((float)num89, (float)num90), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.craftUpButtonTexture.Width, Game1.craftUpButtonTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                }
                if (Game1.recStart < Game1.numAvailableRecipes - num83 * num84)
                {
                    num90 += 20;
                    if (Game1.mouseX >= num89 && Game1.mouseX <= num89 + Game1.craftUpButtonTexture.Width && Game1.mouseY >= num90 && Game1.mouseY <= num90 + Game1.craftUpButtonTexture.Height)
                    {
                        Game1.player[Game1.myPlayer].mouseInterface = true;
                        if (Game1.mouseLeftRelease && Game1.mouseLeft)
                        {
                            Game1.recStart += num83;
                            Game1.PlaySound(12, -1, -1, 1);
                            if (Game1.recStart > Game1.numAvailableRecipes - num83)
                            {
                                Game1.recStart = Game1.numAvailableRecipes - num83;
                            }
                            Game1.mouseLeftRelease = false;
                        }
                    }
                    Game1.spriteBatch.Draw(Game1.craftDownButtonTexture, new Vector2((float)num89, (float)num90), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.craftUpButtonTexture.Width, Game1.craftUpButtonTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                }
                int num91 = Game1.recStart;
                while (num91 < Recipe.maxRecipes && num91 < Game1.numAvailableRecipes)
                {
                    int num92 = num87;
                    int num93 = num88;
                    double num94 = (double)(Game1.inventoryBack.A + 50);
                    double num95 = 255.0;
                    new Microsoft.Xna.Framework.Color((int)((byte)num94), (int)((byte)num94), (int)((byte)num94), (int)((byte)num94));
                    new Microsoft.Xna.Framework.Color((int)((byte)num95), (int)((byte)num95), (int)((byte)num95), (int)((byte)num95));
                    if (Game1.mouseX >= num92 && (float)Game1.mouseX <= (float)num92 + (float)Game1.inventoryBackTexture.Width * Game1.inventoryScale && Game1.mouseY >= num93 && (float)Game1.mouseY <= (float)num93 + (float)Game1.inventoryBackTexture.Height * Game1.inventoryScale)
                    {
                        Game1.player[Game1.myPlayer].mouseInterface = true;
                        if (Game1.mouseLeftRelease && Game1.mouseLeft)
                        {
                            Game1.focusRecipe = num91;
                            Game1.recFastScroll = true;
                            Game1.recBigList = false;
                            Game1.PlaySound(12, -1, -1, 1);
                            Game1.mouseLeftRelease = false;
                        }
                        Game1.craftingHide = true;
                        Game1.hoverItemName = Game1.recipe[Game1.availableRecipe[num91]].createItem.name;
                        Game1.toolTip = Game1.recipe[Game1.availableRecipe[num91]].createItem.Clone();
                        if (Game1.recipe[Game1.availableRecipe[num91]].createItem.stack > 1)
                        {
                            object obj = Game1.hoverItemName;
                            Game1.hoverItemName = string.Concat(new object[]
                            {
                                obj,
                                " (",
                                Game1.recipe[Game1.availableRecipe[num91]].createItem.stack,
                                ")"
                            });
                        }
                    }
                    if (Game1.numAvailableRecipes > 0)
                    {
                        num94 -= 50.0;
                        if (num94 < 0.0)
                        {
                            num94 = 0.0;
                        }
                        Microsoft.Xna.Framework.Color color6 = Game1.inventoryBack;
                        Game1.inventoryBack = new Microsoft.Xna.Framework.Color((int)((byte)num94), (int)((byte)num94), (int)((byte)num94), (int)((byte)num94));
                        ItemSlot.Draw(Game1.spriteBatch, ref Game1.recipe[Game1.availableRecipe[num91]].createItem, 22, new Vector2((float)num92, (float)num93), default(Microsoft.Xna.Framework.Color));
                        Game1.inventoryBack = color6;
                    }
                    num87 += num80;
                    num85++;
                    if (num85 >= num83)
                    {
                        num87 = num82;
                        num88 += num80;
                        num85 = 0;
                        num86++;
                        if (num86 >= num84)
                        {
                            break;
                        }
                    }
                    num91++;
                }
            }
            Vector2 vector2 = Game1.fontMouseText.MeasureString("Coins");
            Vector2 vector3 = Game1.fontMouseText.MeasureString(Lang.inter[26]);
            float num96 = vector2.X / vector3.X;
            Game1.spriteBatch.DrawString(Game1.fontMouseText, Lang.inter[26], new Vector2(496f, 84f + (vector2.Y - vector2.Y * num96) / 2f), new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor), 0f, default(Vector2), 0.75f * num96, SpriteEffects.None, 0f);
            Game1.inventoryScale = 0.6f;
            for (int num97 = 0; num97 < 4; num97++)
            {
                int num98 = 497;
                int num99 = (int)(85f + (float)(num97 * 56) * Game1.inventoryScale + 20f);
                int slot = num97 + 50;
                new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
                if (Game1.mouseX >= num98 && (float)Game1.mouseX <= (float)num98 + (float)Game1.inventoryBackTexture.Width * Game1.inventoryScale && Game1.mouseY >= num99 && (float)Game1.mouseY <= (float)num99 + (float)Game1.inventoryBackTexture.Height * Game1.inventoryScale)
                {
                    Game1.player[Game1.myPlayer].mouseInterface = true;
                    ItemSlot.OverrideHover(Game1.player[Game1.myPlayer].inventory, 1, slot);
                    if (Game1.mouseLeftRelease && Game1.mouseLeft)
                    {
                        ItemSlot.LeftClick(Game1.player[Game1.myPlayer].inventory, 1, slot);
                        Recipe.FindRecipes();
                    }
                    else
                    {
                        ItemSlot.RightClick(Game1.player[Game1.myPlayer].inventory, 1, slot);
                    }
                    ItemSlot.MouseHover(Game1.player[Game1.myPlayer].inventory, 1, slot);
                }
                ItemSlot.Draw(Game1.spriteBatch, Game1.player[Game1.myPlayer].inventory, 1, slot, new Vector2((float)num98, (float)num99), default(Microsoft.Xna.Framework.Color));
            }
            Vector2 vector4 = Game1.fontMouseText.MeasureString("Ammo");
            Vector2 vector5 = Game1.fontMouseText.MeasureString(Lang.inter[27]);
            float num100 = vector4.X / vector5.X;
            Game1.spriteBatch.DrawString(Game1.fontMouseText, Lang.inter[27], new Vector2(532f, 84f + (vector4.Y - vector4.Y * num100) / 2f), new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor), 0f, default(Vector2), 0.75f * num100, SpriteEffects.None, 0f);
            Game1.inventoryScale = 0.6f;
            for (int num101 = 0; num101 < 4; num101++)
            {
                int num102 = 534;
                int num103 = (int)(85f + (float)(num101 * 56) * Game1.inventoryScale + 20f);
                int slot2 = 54 + num101;
                new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
                if (Game1.mouseX >= num102 && (float)Game1.mouseX <= (float)num102 + (float)Game1.inventoryBackTexture.Width * Game1.inventoryScale && Game1.mouseY >= num103 && (float)Game1.mouseY <= (float)num103 + (float)Game1.inventoryBackTexture.Height * Game1.inventoryScale)
                {
                    Game1.player[Game1.myPlayer].mouseInterface = true;
                    ItemSlot.OverrideHover(Game1.player[Game1.myPlayer].inventory, 2, slot2);
                    if (Game1.mouseLeftRelease && Game1.mouseLeft)
                    {
                        ItemSlot.LeftClick(Game1.player[Game1.myPlayer].inventory, 2, slot2);
                        Recipe.FindRecipes();
                    }
                    else
                    {
                        ItemSlot.RightClick(Game1.player[Game1.myPlayer].inventory, 2, slot2);
                    }
                    ItemSlot.MouseHover(Game1.player[Game1.myPlayer].inventory, 2, slot2);
                }
                ItemSlot.Draw(Game1.spriteBatch, Game1.player[Game1.myPlayer].inventory, 2, slot2, new Vector2((float)num102, (float)num103), default(Microsoft.Xna.Framework.Color));
            }
            if (Game1.npcShop > 0 && (!Game1.playerInventory || Game1.player[Game1.myPlayer].talkNPC == -1))
            {
                Game1.npcShop = 0;
            }
            if (Game1.npcShop > 0)
            {
                Utils.DrawBorderStringFourWay(Game1.spriteBatch, Game1.fontMouseText, Lang.inter[28], 504f, (float)this.invBottom, Microsoft.Xna.Framework.Color.White * ((float)Game1.mouseTextColor / 255f), Microsoft.Xna.Framework.Color.Black, Vector2.Zero, 1f);
                ItemSlot.DrawSavings(Game1.spriteBatch, 504f, (float)this.invBottom, false);
                Game1.inventoryScale = 0.755f;
                if (Game1.mouseX > 73 && Game1.mouseX < (int)(73f + 560f * Game1.inventoryScale) && Game1.mouseY > this.invBottom && Game1.mouseY < (int)((float)this.invBottom + 224f * Game1.inventoryScale))
                {
                    Game1.player[Game1.myPlayer].mouseInterface = true;
                }
                for (int num104 = 0; num104 < 10; num104++)
                {
                    for (int num105 = 0; num105 < 4; num105++)
                    {
                        int num106 = (int)(73f + (float)(num104 * 56) * Game1.inventoryScale);
                        int num107 = (int)((float)this.invBottom + (float)(num105 * 56) * Game1.inventoryScale);
                        int slot3 = num104 + num105 * 10;
                        new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
                        if (Game1.mouseX >= num106 && (float)Game1.mouseX <= (float)num106 + (float)Game1.inventoryBackTexture.Width * Game1.inventoryScale && Game1.mouseY >= num107 && (float)Game1.mouseY <= (float)num107 + (float)Game1.inventoryBackTexture.Height * Game1.inventoryScale)
                        {
                            Game1.player[Game1.myPlayer].mouseInterface = true;
                            if (Game1.mouseLeftRelease && Game1.mouseLeft)
                            {
                                ItemSlot.LeftClick(this.shop[Game1.npcShop].item, 15, slot3);
                            }
                            else
                            {
                                ItemSlot.RightClick(this.shop[Game1.npcShop].item, 15, slot3);
                            }
                            ItemSlot.MouseHover(this.shop[Game1.npcShop].item, 15, slot3);
                        }
                        ItemSlot.Draw(Game1.spriteBatch, this.shop[Game1.npcShop].item, 15, slot3, new Vector2((float)num106, (float)num107), default(Microsoft.Xna.Framework.Color));
                    }
                }
            }
            if (Game1.player[Game1.myPlayer].chest > -1 && !Game1.tileContainer[(int)Game1.tile[Game1.player[Game1.myPlayer].chestX, Game1.player[Game1.myPlayer].chestY].type])
            {
                Game1.player[Game1.myPlayer].chest = -1;
            }
            ChestUI.Draw(Game1.spriteBatch);
            if (Game1.player[Game1.myPlayer].chest == -1 && Game1.npcShop == 0)
            {
                int num108 = 0;
                int num109 = 498;
                int num110 = 244;
                int width = Game1.chestStackTexture[num108].Width;
                int height = Game1.chestStackTexture[num108].Height;
                if (Game1.mouseX >= num109 && Game1.mouseX <= num109 + width && Game1.mouseY >= num110 && Game1.mouseY <= num110 + height)
                {
                    num108 = 1;
                    if (!Game1.allChestStackHover)
                    {
                        Game1.PlaySound(12, -1, -1, 1);
                        Game1.allChestStackHover = true;
                    }
                    if (Game1.mouseLeft && Game1.mouseLeftRelease)
                    {
                        Game1.mouseLeftRelease = false;
                        Game1.player[Game1.myPlayer].QuickStackAllChests();
                    }
                    Game1.player[Game1.myPlayer].mouseInterface = true;
                }
                else if (Game1.allChestStackHover)
                {
                    Game1.PlaySound(12, -1, -1, 1);
                    Game1.allChestStackHover = false;
                }
                Game1.spriteBatch.Draw(Game1.chestStackTexture[num108], new Vector2((float)num109, (float)num110), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chestStackTexture[num108].Width, Game1.chestStackTexture[num108].Height)), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                if (!Game1.mouseText && num108 == 1)
                {
                    this.MouseText("Quick stack to nearby chests", 0, 0);
                }
            }
        }
        private static void DrawPVPIcons()
        {
            Game1.inventoryScale = 0.6f;
            int num = (int)(52f * Game1.inventoryScale);
            int num2 = 707 - num * 4 + Game1.screenWidth - 800;
            int num3 = 114 + Game1.mH + num * 2 + num / 2 - 12;
            if (Game1.EquipPage == 2)
            {
                num2 += num + num / 2;
            }
            int num4 = Game1.player[Game1.myPlayer].hostile ? 2 : 0;
            if (Game1.mouseX > num2 && Game1.mouseX < num2 + 34 && Game1.mouseY > num3 - 2 && Game1.mouseY < num3 + 34)
            {
                Game1.player[Game1.myPlayer].mouseInterface = true;
                if (Game1.teamCooldown == 0)
                {
                    num4++;
                }
                if (Game1.mouseLeft && Game1.mouseLeftRelease && Game1.teamCooldown == 0)
                {
                    Game1.teamCooldown = Game1.teamCooldownLen;
                    Game1.PlaySound(12, -1, -1, 1);
                    Game1.player[Game1.myPlayer].hostile = !Game1.player[Game1.myPlayer].hostile;
                    NetMessage.SendData(30, -1, -1, "", Game1.myPlayer, 0f, 0f, 0f, 0, 0, 0);
                }
            }
            Microsoft.Xna.Framework.Rectangle rectangle = Game1.PVPTexture[0].Frame(4, 6, 0, 0);
            rectangle.Location = new Microsoft.Xna.Framework.Point(rectangle.Width * num4, rectangle.Height * Game1.player[Game1.myPlayer].team);
            Game1.spriteBatch.Draw(Game1.PVPTexture[0], new Vector2((float)(num2 - 10), (float)num3), new Microsoft.Xna.Framework.Rectangle?(rectangle), Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, Vector2.One, SpriteEffects.None, 0f);
            num3 += 60;
            num2 -= 10;
            rectangle = Game1.PVPTexture[1].Frame(6, 1, 0, 0);
            Microsoft.Xna.Framework.Rectangle rectangle2 = rectangle;
            for (int i = 0; i < 6; i++)
            {
                rectangle2.Location = new Microsoft.Xna.Framework.Point(num2 + i % 2 * 20, num3 + i / 2 * 20);
                rectangle.X = rectangle.Width * i;
                bool flag = false;
                if (rectangle2.Contains(Game1.MouseScreen.ToPoint()))
                {
                    Game1.player[Game1.myPlayer].mouseInterface = true;
                    if (Game1.teamCooldown == 0)
                    {
                        flag = true;
                    }
                    if (Game1.mouseLeft && Game1.mouseLeftRelease && Game1.player[Game1.myPlayer].team != i && Game1.teamCooldown == 0)
                    {
                        Game1.teamCooldown = Game1.teamCooldownLen;
                        Game1.PlaySound(12, -1, -1, 1);
                        Game1.player[Game1.myPlayer].team = i;
                        NetMessage.SendData(45, -1, -1, "", Game1.myPlayer, 0f, 0f, 0f, 0, 0, 0);
                    }
                }
                if (flag)
                {
                    Game1.spriteBatch.Draw(Game1.PVPTexture[2], rectangle2.Location.ToVector2() + new Vector2(-2f), Microsoft.Xna.Framework.Color.White);
                }
                Game1.spriteBatch.Draw(Game1.PVPTexture[1], rectangle2.Location.ToVector2(), new Microsoft.Xna.Framework.Rectangle?(rectangle), Microsoft.Xna.Framework.Color.White);
            }
        }
        private static int DrawPageIcons()
        {
            int num = -1;
            Vector2 vector = new Vector2((float)(Game1.screenWidth - 162), (float)(142 + Game1.mH));
            vector.X += 82f;
            Texture2D texture2D = Game1.EquipPageTexture[(Game1.EquipPage == 2) ? 3 : 2];
            if (Collision.CheckAABBvAABBCollision(vector, texture2D.Size(), new Vector2((float)Game1.mouseX, (float)Game1.mouseY), Vector2.One) && (Game1.mouseItem.stack < 1 || Game1.mouseItem.dye > 0))
            {
                num = 2;
            }
            if (num == 2)
            {
                Game1.spriteBatch.Draw(Game1.EquipPageTexture[6], vector, null, Game1.OurFavoriteColor, 0f, new Vector2(2f), 0.9f, SpriteEffects.None, 0f);
            }
            Game1.spriteBatch.Draw(texture2D, vector, null, Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
            vector.X -= 48f;
            texture2D = Game1.EquipPageTexture[(Game1.EquipPage == 1) ? 5 : 4];
            if (Collision.CheckAABBvAABBCollision(vector, texture2D.Size(), new Vector2((float)Game1.mouseX, (float)Game1.mouseY), Vector2.One) && Game1.mouseItem.stack < 1)
            {
                num = 1;
            }
            if (num == 1)
            {
                Game1.spriteBatch.Draw(Game1.EquipPageTexture[7], vector, null, Game1.OurFavoriteColor, 0f, new Vector2(2f), 0.9f, SpriteEffects.None, 0f);
            }
            Game1.spriteBatch.Draw(texture2D, vector, null, Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
            vector.X -= 48f;
            texture2D = Game1.EquipPageTexture[(Game1.EquipPage == 3) ? 10 : 8];
            if (Collision.CheckAABBvAABBCollision(vector, texture2D.Size(), new Vector2((float)Game1.mouseX, (float)Game1.mouseY), Vector2.One) && Game1.mouseItem.stack < 1)
            {
                num = 3;
            }
            if (num == 3 && !Game1.CaptureModeDisabled)
            {
                Game1.spriteBatch.Draw(Game1.EquipPageTexture[9], vector, null, Game1.OurFavoriteColor, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
            }
            Game1.spriteBatch.Draw(texture2D, vector, null, Game1.CaptureModeDisabled ? Microsoft.Xna.Framework.Color.Red : Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
            if (num != -1)
            {
                Game1.player[Game1.myPlayer].mouseInterface = true;
                if (Game1.mouseLeft && Game1.mouseLeftRelease)
                {
                    bool flag = true;
                    if (num == 3)
                    {
                        if (Game1.CaptureModeDisabled)
                        {
                            flag = false;
                        }
                        else
                        {
                            CaptureManager.Instance.Active = true;
                            Game1.blockMouse = true;
                        }
                    }
                    else if (Game1.EquipPageSelected != num)
                    {
                        Game1.EquipPageSelected = num;
                    }
                    else
                    {
                        Game1.EquipPageSelected = 0;
                    }
                    if (flag)
                    {
                        Game1.PlaySound(12, -1, -1, 1);
                    }
                }
            }
            ItemSlot.EquipPage(Game1.mouseItem);
            if (Game1.EquipPage == -1)
            {
                Game1.EquipPage = Game1.EquipPageSelected;
            }
            return num;
        }

        public void DrawMouseOver()
        {
            Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)((float)Game1.mouseX + Game1.screenPosition.X), (int)((float)Game1.mouseY + Game1.screenPosition.Y), 1, 1);
            if (Game1.player[Game1.myPlayer].gravDir == -1f)
            {
                rectangle.Y = (int)Game1.screenPosition.Y + Game1.screenHeight - Game1.mouseY;
            }
            this.GUIBarsMouseOverLife();
            this.GUIBarsMouseOverMana();
            IngameOptions.MouseOver();
            AchievementsUI.MouseOver();
            if (!Game1.mouseText)
            {
                for (int i = 0; i < 400; i++)
                {
                    if (Game1.item[i].active)
                    {
                        Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)((double)Game1.item[i].position.X + (double)Game1.item[i].width * 0.5 - (double)Game1.itemTexture[Game1.item[i].itemId].Width * 0.5), (int)(Game1.item[i].position.Y + (float)Game1.item[i].height - (float)Game1.itemTexture[Game1.item[i].itemId].Height), Game1.itemTexture[Game1.item[i].itemId].Width, Game1.itemTexture[Game1.item[i].itemId].Height);
                        if (rectangle.Intersects(value))
                        {
                            Game1.player[Game1.myPlayer].showItemIcon = false;
                            string text = Game1.item[i].AffixName();
                            if (Game1.item[i].stack > 1)
                            {
                                object obj = text;
                                text = string.Concat(new object[]
                                {
                                    obj,
                                    " (",
                                    Game1.item[i].stack,
                                    ")"
                                });
                            }
                            if (Game1.item[i].owner < 255 && Game1.showItemOwner)
                            {
                                text = text + " <" + Game1.player[Game1.item[i].owner].name + ">";
                            }
                            Game1.rare = Game1.item[i].rare;
                            if (Game1.item[i].expert)
                            {
                                Game1.rare = -12;
                            }
                            this.MouseText(text, Game1.rare, 0);
                            Game1.mouseText = true;
                            break;
                        }
                    }
                }
            }
            for (int j = 0; j < 255; j++)
            {
                if (Game1.player[j].active && Game1.myPlayer != j && !Game1.player[j].dead)
                {
                    Microsoft.Xna.Framework.Rectangle value2 = new Microsoft.Xna.Framework.Rectangle((int)((double)Game1.player[j].position.X + (double)Game1.player[j].width * 0.5 - 16.0), (int)(Game1.player[j].position.Y + (float)Game1.player[j].height - 48f), 32, 48);
                    if (!Game1.mouseText && rectangle.Intersects(value2))
                    {
                        Game1.player[Game1.myPlayer].showItemIcon = false;
                        int num = Game1.player[j].statLife;
                        if (num < 0)
                        {
                            num = 0;
                        }
                        string text2 = string.Concat(new object[]
                        {
                            Game1.player[j].name,
                            ": ",
                            num,
                            "/",
                            Game1.player[j].statLifeMax2
                        });
                        if (Game1.player[j].hostile)
                        {
                            text2 += " (PvP)";
                        }
                        this.MouseText(text2, 0, Game1.player[j].difficulty);
                        Game1.mouseText = true;
                    }
                }
            }
            if (!Game1.mouseText)
            {
                for (int k = 0; k < 200; k++)
                {
                    if (Game1.npc[k].active)
                    {
                        int type = Game1.npc[k].type;
                        this.LoadNPC(type);
                        Microsoft.Xna.Framework.Rectangle value3 = new Microsoft.Xna.Framework.Rectangle((int)((double)Game1.npc[k].position.X + (double)Game1.npc[k].width * 0.5 - (double)Game1.npcTexture[type].Width * 0.5), (int)(Game1.npc[k].position.Y + (float)Game1.npc[k].height - (float)(Game1.npcTexture[type].Height / Game1.npcFrameCount[type])), Game1.npcTexture[type].Width, Game1.npcTexture[type].Height / Game1.npcFrameCount[type]);
                        if (Game1.npc[k].type >= 87 && Game1.npc[k].type <= 92)
                        {
                            value3 = new Microsoft.Xna.Framework.Rectangle((int)((double)Game1.npc[k].position.X + (double)Game1.npc[k].width * 0.5 - 32.0), (int)((double)Game1.npc[k].position.Y + (double)Game1.npc[k].height * 0.5 - 32.0), 64, 64);
                        }
                        if (rectangle.Intersects(value3) && ((Game1.npc[k].type != 85 && Game1.npc[k].type != 341 && Game1.npc[k].aiStyle != 87) || Game1.npc[k].ai[0] != 0f) && Game1.npc[k].type != 488)
                        {
                            bool flag = false;
                            if (Game1.npc[k].townNPC || Game1.npc[k].type == 105 || Game1.npc[k].type == 106 || Game1.npc[k].type == 123 || Game1.npc[k].type == 354 || Game1.npc[k].type == 376 || Game1.npc[k].type == 453)
                            {
                                Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle((int)(Game1.player[Game1.myPlayer].position.X + (float)(Game1.player[Game1.myPlayer].width / 2) - (float)(Player.tileRangeX * 16)), (int)(Game1.player[Game1.myPlayer].position.Y + (float)(Game1.player[Game1.myPlayer].height / 2) - (float)(Player.tileRangeY * 16)), Player.tileRangeX * 16 * 2, Player.tileRangeY * 16 * 2);
                                Microsoft.Xna.Framework.Rectangle value4 = new Microsoft.Xna.Framework.Rectangle((int)Game1.npc[k].position.X, (int)Game1.npc[k].position.Y, Game1.npc[k].width, Game1.npc[k].height);
                                if (rectangle2.Intersects(value4))
                                {
                                    flag = true;
                                }
                            }
                            if (flag && !Game1.player[Game1.myPlayer].dead)
                            {
                                int num2 = -(Game1.npc[k].width / 2 + 8);
                                float num3 = Game1.npc[k].position.Y - (float)Game1.chatTexture.Height - (float)((int)Game1.screenPosition.Y);
                                SpriteEffects spriteEffects = SpriteEffects.None;
                                if (Game1.npc[k].spriteDirection == -1)
                                {
                                    spriteEffects = SpriteEffects.FlipHorizontally;
                                    num2 = Game1.npc[k].width / 2 + 8;
                                }
                                if (Game1.player[Game1.myPlayer].gravDir != 1f)
                                {
                                    spriteEffects |= SpriteEffects.FlipVertically;
                                    num3 = (float)Game1.screenHeight - num3 - (float)Game1.chatTexture.Height;
                                }
                                Game1.spriteBatch.Draw(Game1.chatTexture, new Vector2(Game1.npc[k].position.X + (float)(Game1.npc[k].width / 2) - Game1.screenPosition.X - (float)(Game1.chatTexture.Width / 2) - (float)num2, num3), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chatTexture.Width, Game1.chatTexture.Height)), new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor), 0f, default(Vector2), 1f, spriteEffects, 0f);
                                if (Game1.mouseRight && Game1.npcChatRelease)
                                {
                                    Game1.npcChatRelease = false;
                                    if (Game1.player[Game1.myPlayer].talkNPC != k)
                                    {
                                        Game1.CancelHairWindow();
                                        Game1.npcShop = 0;
                                        Game1.craftGuide = false;
                                        Game1.player[Game1.myPlayer].dropItemCheck();
                                        Game1.npcChatCornerItem = 0;
                                        Game1.player[Game1.myPlayer].sign = -1;
                                        Game1.editSign = false;
                                        Game1.player[Game1.myPlayer].talkNPC = k;
                                        Game1.playerInventory = false;
                                        Game1.player[Game1.myPlayer].chest = -1;
                                        Recipe.FindRecipes();
                                        Game1.npcChatText = Game1.npc[k].GetChat();
                                        Game1.PlaySound(24, -1, -1, 1);
                                    }
                                }
                            }
                            Game1.player[Game1.myPlayer].showItemIcon = false;
                            string text3 = Game1.npc[k].displayName;
                            int num4 = k;
                            if (Game1.npc[k].realLife >= 0)
                            {
                                num4 = Game1.npc[k].realLife;
                            }
                            if (Game1.npc[num4].lifeMax > 1 && !Game1.npc[num4].dontTakeDamage)
                            {
                                object obj2 = text3;
                                text3 = string.Concat(new object[]
                                {
                                    obj2,
                                    ": ",
                                    Game1.npc[num4].life,
                                    "/",
                                    Game1.npc[num4].lifeMax
                                });
                            }
                            this.MouseText(text3, 0, 0);
                            Game1.mouseText = true;
                            break;
                        }
                    }
                }
            }
            if (!Game1.mouseText)
            {
                if (Game1.signHover != -1 && Game1.sign[Game1.signHover] != null && !Game1.player[Game1.myPlayer].mouseInterface)
                {
                    int num5;
                    string[] array = Utils.WordwrapString(Game1.sign[Game1.signHover].text, Game1.fontMouseText, 460, 10, out num5);
                    num5++;
                    float num6 = 0f;
                    for (int l = 0; l < num5; l++)
                    {
                        float x = Game1.fontMouseText.MeasureString(array[l]).X;
                        if (num6 < x)
                        {
                            num6 = x;
                        }
                    }
                    if (num6 > 460f)
                    {
                        num6 = 460f;
                    }
                    Vector2 vector = new Vector2((float)Game1.mouseX, (float)Game1.mouseY) + new Vector2(16f);
                    if (vector.Y > (float)(Game1.screenHeight - 30 * num5))
                    {
                        vector.Y = (float)(Game1.screenHeight - 30 * num5);
                    }
                    if (vector.X > (float)Game1.screenWidth - num6)
                    {
                        vector.X = (float)(Game1.screenWidth - 460);
                    }
                    for (int m = 0; m < num5; m++)
                    {
                        Utils.DrawBorderStringFourWay(Game1.spriteBatch, Game1.fontMouseText, array[m], vector.X, vector.Y + (float)(m * 30), new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor), Microsoft.Xna.Framework.Color.Black, Vector2.Zero, 1f);
                    }
                    Game1.mouseText = true;
                }
                Game1.signHover = -1;
            }
        }


        private void GUIBarsMouseOverLife()
        {
            if (!Game1.mouseText)
            {
                int num = 26 * Game1.player[Game1.myPlayer].statLifeMax2 / (int)Game1.heartLife;
                int num2 = 0;
                if (Game1.player[Game1.myPlayer].statLifeMax2 > 200)
                {
                    num = 260;
                    num2 += 26;
                }
                if (Game1.mouseX > 500 + Game1.sX && Game1.mouseX < 500 + num + Game1.sX && Game1.mouseY > 32 && Game1.mouseY < 32 + Game1.heartTexture.Height + num2)
                {
                    Game1.player[Game1.myPlayer].showItemIcon = false;
                    string cursorText = Game1.player[Game1.myPlayer].statLife + "/" + Game1.player[Game1.myPlayer].statLifeMax2;
                    this.MouseText(cursorText, 0, 0);
                    Game1.mouseText = true;
                }
            }
        }
        private void GUIBarsMouseOverMana()
        {
            if (!Game1.mouseText)
            {
                int num = 24;
                int num2 = 28 * Game1.player[Game1.myPlayer].statManaMax2 / Game1.starMana;
                if (Game1.mouseX > 762 + Game1.sX && Game1.mouseX < 762 + num + Game1.sX && Game1.mouseY > 30 && Game1.mouseY < 30 + num2)
                {
                    Game1.player[Game1.myPlayer].showItemIcon = false;
                    string cursorText = Game1.player[Game1.myPlayer].statMana + "/" + Game1.player[Game1.myPlayer].statManaMax2;
                    this.MouseText(cursorText, 0, 0);
                    Game1.mouseText = true;
                }
            }
        }

        public void GUIBarsDraw()
        {
            if (Game1.ignoreErrors)
            {
                try
                {
                    this.GUIBarsDrawInner();
                    return;
                }
                catch (Exception e)
                {
                    TimeLogger.DrawException(e);
                    return;
                }
            }
            this.GUIBarsDrawInner();
        }

        protected void GUIBarsDrawInner()
        {
            Game1.sX = Game1.screenWidth - 800;
            Game1.heartLife = 20f;
            int num = Game1.player[Game1.myPlayer].statLifeMax / 20;
            int num2 = (Game1.player[Game1.myPlayer].statLifeMax - 400) / 5;
            if (num2 < 0)
            {
                num2 = 0;
            }
            if (num2 > 0)
            {
                num = Game1.player[Game1.myPlayer].statLifeMax / (20 + num2 / 4);
                Game1.heartLife = (float)Game1.player[Game1.myPlayer].statLifeMax / 20f;
            }
            int num3 = Game1.player[Game1.myPlayer].statLifeMax2 - Game1.player[Game1.myPlayer].statLifeMax;
            Game1.heartLife += (float)(num3 / num);
            int num4 = (int)((float)Game1.player[Game1.myPlayer].statLifeMax2 / Game1.heartLife);
            if (num4 >= 10)
            {
                num4 = 10;
            }
            string text = string.Concat(new object[]
            {
                Lang.inter[0],
                " ",
                Game1.player[Game1.myPlayer].statLifeMax2,
                "/",
                Game1.player[Game1.myPlayer].statLifeMax2
            });
            Vector2 vector = Game1.fontMouseText.MeasureString(text);
            if (!Game1.player[Game1.myPlayer].ghost)
            {
                Game1.spriteBatch.DrawString(Game1.fontMouseText, Lang.inter[0], new Vector2((float)(500 + 13 * num4) - vector.X * 0.5f + (float)Game1.sX, 6f), new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                Game1.spriteBatch.DrawString(Game1.fontMouseText, Game1.player[Game1.myPlayer].statLife + "/" + Game1.player[Game1.myPlayer].statLifeMax2, new Vector2((float)(500 + 13 * num4) + vector.X * 0.5f + (float)Game1.sX, 6f), new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor), 0f, new Vector2(Game1.fontMouseText.MeasureString(Game1.player[Game1.myPlayer].statLife + "/" + Game1.player[Game1.myPlayer].statLifeMax2).X, 0f), 1f, SpriteEffects.None, 0f);
            }
            for (int i = 1; i < (int)((float)Game1.player[Game1.myPlayer].statLifeMax2 / Game1.heartLife) + 1; i++)
            {
                float num5 = 1f;
                bool flag = false;
                int num6;
                if ((float)Game1.player[Game1.myPlayer].statLife >= (float)i * Game1.heartLife)
                {
                    num6 = 255;
                    if ((float)Game1.player[Game1.myPlayer].statLife == (float)i * Game1.heartLife)
                    {
                        flag = true;
                    }
                }
                else
                {
                    float num7 = ((float)Game1.player[Game1.myPlayer].statLife - (float)(i - 1) * Game1.heartLife) / Game1.heartLife;
                    num6 = (int)(30f + 225f * num7);
                    if (num6 < 30)
                    {
                        num6 = 30;
                    }
                    num5 = num7 / 4f + 0.75f;
                    if ((double)num5 < 0.75)
                    {
                        num5 = 0.75f;
                    }
                    if (num7 > 0f)
                    {
                        flag = true;
                    }
                }
                if (flag)
                {
                    num5 += Game1.cursorScale - 1f;
                }
                int num8 = 0;
                int num9 = 0;
                if (i > 10)
                {
                    num8 -= 260;
                    num9 += 26;
                }
                int a = (int)((double)((float)num6) * 0.9);
                if (!Game1.player[Game1.myPlayer].ghost)
                {
                    if (num2 > 0)
                    {
                        num2--;
                        Game1.spriteBatch.Draw(Game1.heart2Texture, new Vector2((float)(500 + 26 * (i - 1) + num8 + Game1.sX + Game1.heartTexture.Width / 2), 32f + ((float)Game1.heartTexture.Height - (float)Game1.heartTexture.Height * num5) / 2f + (float)num9 + (float)(Game1.heartTexture.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.heartTexture.Width, Game1.heartTexture.Height)), new Microsoft.Xna.Framework.Color(num6, num6, num6, a), 0f, new Vector2((float)(Game1.heartTexture.Width / 2), (float)(Game1.heartTexture.Height / 2)), num5, SpriteEffects.None, 0f);
                    }
                    else
                    {
                        Game1.spriteBatch.Draw(Game1.heartTexture, new Vector2((float)(500 + 26 * (i - 1) + num8 + Game1.sX + Game1.heartTexture.Width / 2), 32f + ((float)Game1.heartTexture.Height - (float)Game1.heartTexture.Height * num5) / 2f + (float)num9 + (float)(Game1.heartTexture.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.heartTexture.Width, Game1.heartTexture.Height)), new Microsoft.Xna.Framework.Color(num6, num6, num6, a), 0f, new Vector2((float)(Game1.heartTexture.Width / 2), (float)(Game1.heartTexture.Height / 2)), num5, SpriteEffects.None, 0f);
                    }
                }
            }
            Game1.starMana = 20;
            if (Game1.player[Game1.myPlayer].statManaMax2 > 0)
            {
                int arg_5CF_0 = Game1.player[Game1.myPlayer].statManaMax2 / 20;
                Game1.spriteBatch.DrawString(Game1.fontMouseText, Lang.inter[2], new Vector2((float)(750 + Game1.sX), 6f), new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                for (int j = 1; j < Game1.player[Game1.myPlayer].statManaMax2 / Game1.starMana + 1; j++)
                {
                    bool flag2 = false;
                    float num10 = 1f;
                    int num11;
                    if (Game1.player[Game1.myPlayer].statMana >= j * Game1.starMana)
                    {
                        num11 = 255;
                        if (Game1.player[Game1.myPlayer].statMana == j * Game1.starMana)
                        {
                            flag2 = true;
                        }
                    }
                    else
                    {
                        float num12 = (float)(Game1.player[Game1.myPlayer].statMana - (j - 1) * Game1.starMana) / (float)Game1.starMana;
                        num11 = (int)(30f + 225f * num12);
                        if (num11 < 30)
                        {
                            num11 = 30;
                        }
                        num10 = num12 / 4f + 0.75f;
                        if ((double)num10 < 0.75)
                        {
                            num10 = 0.75f;
                        }
                        if (num12 > 0f)
                        {
                            flag2 = true;
                        }
                    }
                    if (flag2)
                    {
                        num10 += Game1.cursorScale - 1f;
                    }
                    int a2 = (int)((double)((float)num11) * 0.9);
                    Game1.spriteBatch.Draw(Game1.manaTexture, new Vector2((float)(775 + Game1.sX), (float)(30 + Game1.manaTexture.Height / 2) + ((float)Game1.manaTexture.Height - (float)Game1.manaTexture.Height * num10) / 2f + (float)(28 * (j - 1))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.manaTexture.Width, Game1.manaTexture.Height)), new Microsoft.Xna.Framework.Color(num11, num11, num11, a2), 0f, new Vector2((float)(Game1.manaTexture.Width / 2), (float)(Game1.manaTexture.Height / 2)), num10, SpriteEffects.None, 0f);
                }
            }
            Game1.DrawBreath(num4);
            Game1.buffString = "";
            Game1.bannerMouseOver = false;
            if (!Game1.recBigList)
            {
                Game1.recStart = 0;
            }
            if (!Game1.ingameOptionsWindow && !Game1.playerInventory && !Game1.achievementsWindow)
            {
                Game1.recBigList = false;
                int num13 = -1;
                int num14 = 11;
                for (int k = 0; k < 22; k++)
                {
                    if (Game1.player[Game1.myPlayer].buffType[k] > 0)
                    {
                        int num15 = Game1.player[Game1.myPlayer].buffType[k];
                        int num16 = 32 + k * 38;
                        int num17 = 76;
                        if (k >= num14)
                        {
                            num16 = 32 + (k - num14) * 38;
                            num17 += 50;
                        }
                        Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(Game1.buffAlpha[k], Game1.buffAlpha[k], Game1.buffAlpha[k], Game1.buffAlpha[k]);
                        Game1.spriteBatch.Draw(Game1.buffTexture[num15], new Vector2((float)num16, (float)num17), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.buffTexture[num15].Width, Game1.buffTexture[num15].Height)), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                        if (!Game1.vanityPet[num15] && !Game1.lightPet[num15] && !Game1.buffNoTimeDisplay[num15] && (!Game1.player[Game1.myPlayer].honeyWet || num15 != 48) && (!Game1.player[Game1.myPlayer].wet || num15 != 46) && Game1.player[Game1.myPlayer].buffTime[k] > 2)
                        {
                            string text2;
                            if (Game1.player[Game1.myPlayer].buffTime[k] / 60 >= 3600)
                            {
                                text2 = Math.Round((double)(Game1.player[Game1.myPlayer].buffTime[k] / 60) / 3600.0) + " h";
                            }
                            else if (Game1.player[Game1.myPlayer].buffTime[k] / 60 >= 60)
                            {
                                text2 = Math.Round((double)(Game1.player[Game1.myPlayer].buffTime[k] / 60) / 60.0) + " m";
                            }
                            else
                            {
                                text2 = Math.Round((double)Game1.player[Game1.myPlayer].buffTime[k] / 60.0) + " s";
                            }
                            Game1.spriteBatch.DrawString(Game1.fontItemStack, text2, new Vector2((float)num16, (float)(num17 + Game1.buffTexture[num15].Height)), color, 0f, default(Vector2), 0.8f, SpriteEffects.None, 0f);
                        }
                        if (Game1.mouseX < num16 + Game1.buffTexture[num15].Width && Game1.mouseY < num17 + Game1.buffTexture[num15].Height && Game1.mouseX > num16 && Game1.mouseY > num17)
                        {
                            num13 = k;
                            Game1.buffAlpha[k] += 0.1f;
                            if (Game1.mouseRight && Game1.mouseRightRelease)
                            {
                                bool flag3 = false;
                                if (!Game1.debuff[num15] && num15 != 60 && num15 != 151)
                                {
                                    if (Game1.player[Game1.myPlayer].mount.Active && Game1.player[Game1.myPlayer].mount.CheckBuff(num15))
                                    {
                                        Game1.player[Game1.myPlayer].mount.Dismount(Game1.player[Game1.myPlayer]);
                                        flag3 = true;
                                    }
                                    if (Game1.player[Game1.myPlayer].miscEquips[0].buffType == num15 && !Game1.player[Game1.myPlayer].hideMisc[0])
                                    {
                                        Game1.player[Game1.myPlayer].hideMisc[0] = true;
                                    }
                                    if (Game1.player[Game1.myPlayer].miscEquips[1].buffType == num15 && !Game1.player[Game1.myPlayer].hideMisc[1])
                                    {
                                        Game1.player[Game1.myPlayer].hideMisc[1] = true;
                                    }
                                    Game1.PlaySound(12, -1, -1, 1);
                                    if (!flag3)
                                    {
                                        Game1.player[Game1.myPlayer].DelBuff(k);
                                    }
                                }
                            }
                        }
                        else
                        {
                            Game1.buffAlpha[k] -= 0.05f;
                        }
                        if (Game1.buffAlpha[k] > 1f)
                        {
                            Game1.buffAlpha[k] = 1f;
                        }
                        else if ((double)Game1.buffAlpha[k] < 0.4)
                        {
                            Game1.buffAlpha[k] = 0.4f;
                        }
                    }
                    else
                    {
                        Game1.buffAlpha[k] = 0.4f;
                    }
                }
                if (num13 >= 0)
                {
                    int num18 = Game1.player[Game1.myPlayer].buffType[num13];
                    if (num18 > 0)
                    {
                        Game1.buffString = Game1.buffTip[num18];
                        if (num18 == 26 && Game1.expertMode)
                        {
                            Game1.buffString += Lang.misc[39];
                        }
                        if (num18 == 147)
                        {
                            Game1.bannerMouseOver = true;
                        }
                        if (num18 == 94)
                        {
                            int num19 = (int)(Game1.player[Game1.myPlayer].manaSickReduction * 100f) + 1;
                            Game1.buffString = Game1.buffString + num19 + "%";
                        }
                        if (Game1.meleeBuff[num18])
                        {
                            this.MouseText(Game1.buffName[num18], -10, 0);
                            return;
                        }
                        this.MouseText(Game1.buffName[num18], 0, 0);
                    }
                }
            }
        }
        private static void DrawBreath(int heartCount)
        {
            bool flag = false;
            if (Game1.player[Game1.myPlayer].lavaTime < Game1.player[Game1.myPlayer].lavaMax && Game1.player[Game1.myPlayer].lavaWet)
            {
                flag = true;
            }
            else if (Game1.player[Game1.myPlayer].lavaTime < Game1.player[Game1.myPlayer].lavaMax && Game1.player[Game1.myPlayer].breath == Game1.player[Game1.myPlayer].breathMax)
            {
                flag = true;
            }
            Vector2 value = Game1.player[Game1.myPlayer].Top + new Vector2(0f, Game1.player[Game1.myPlayer].gfxOffY) - Game1.screenPosition;
            Vector2 value2 = new Vector2(-125f, -100f);
            if (Game1.playerInventory && Game1.screenHeight < 1000)
            {
                value2.Y = (float)(Game1.player[Game1.myPlayer].height - 20);
            }
            if (Game1.player[Game1.myPlayer].breath < Game1.player[Game1.myPlayer].breathMax && !Game1.player[Game1.myPlayer].ghost && !flag)
            {
                int arg_14C_0 = Game1.player[Game1.myPlayer].breathMax / 20;
                int num = 20;
                for (int i = 1; i < Game1.player[Game1.myPlayer].breathMax / num + 1; i++)
                {
                    float num2 = 1f;
                    int num3;
                    if (Game1.player[Game1.myPlayer].breath >= i * num)
                    {
                        num3 = 255;
                    }
                    else
                    {
                        float num4 = (float)(Game1.player[Game1.myPlayer].breath - (i - 1) * num) / (float)num;
                        num3 = (int)(30f + 225f * num4);
                        if (num3 < 30)
                        {
                            num3 = 30;
                        }
                        num2 = num4 / 4f + 0.75f;
                        if ((double)num2 < 0.75)
                        {
                            num2 = 0.75f;
                        }
                    }
                    int num5 = 0;
                    int num6 = 0;
                    if (i > 10)
                    {
                        num5 -= 260;
                        num6 += 26;
                    }
                    Game1.spriteBatch.Draw(Game1.bubbleTexture, value + value2 + new Vector2((float)(26 * (i - 1) + num5), 32f + ((float)Game1.bubbleTexture.Height - (float)Game1.bubbleTexture.Height * num2) / 2f + (float)num6), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.bubbleTexture.Width, Game1.bubbleTexture.Height)), new Microsoft.Xna.Framework.Color(num3, num3, num3, num3), 0f, default(Vector2), num2, SpriteEffects.None, 0f);
                }
            }
            if (Game1.player[Game1.myPlayer].lavaTime < Game1.player[Game1.myPlayer].lavaMax && !Game1.player[Game1.myPlayer].ghost && flag)
            {
                int num7 = Game1.player[Game1.myPlayer].lavaMax / 10;
                int arg_321_0 = Game1.player[Game1.myPlayer].breathMax / num7;
                for (int j = 1; j < Game1.player[Game1.myPlayer].lavaMax / num7 + 1; j++)
                {
                    float num8 = 1f;
                    int num9;
                    if (Game1.player[Game1.myPlayer].lavaTime >= j * num7)
                    {
                        num9 = 255;
                    }
                    else
                    {
                        float num10 = (float)(Game1.player[Game1.myPlayer].lavaTime - (j - 1) * num7) / (float)num7;
                        num9 = (int)(30f + 225f * num10);
                        if (num9 < 30)
                        {
                            num9 = 30;
                        }
                        num8 = num10 / 4f + 0.75f;
                        if ((double)num8 < 0.75)
                        {
                            num8 = 0.75f;
                        }
                    }
                    int num11 = 0;
                    int num12 = 0;
                    if (j > 10)
                    {
                        num11 -= 260;
                        num12 += 26;
                    }
                    Game1.spriteBatch.Draw(Game1.flameTexture, value + value2 + new Vector2((float)(26 * (j - 1) + num11), 32f + ((float)Game1.flameTexture.Height - (float)Game1.flameTexture.Height * num8) / 2f + (float)num12), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.bubbleTexture.Width, Game1.bubbleTexture.Height)), new Microsoft.Xna.Framework.Color(num9, num9, num9, num9), 0f, default(Vector2), num8, SpriteEffects.None, 0f);
                }
            }
        }
        protected void GUIHotbarDrawInner()
        {
            if (!Game1.playerInventory && !Game1.player[Game1.myPlayer].ghost)
            {
                string text = Lang.inter[37];
                if (Game1.player[Game1.myPlayer].inventory[Game1.player[Game1.myPlayer].selectedItem].name != null && Game1.player[Game1.myPlayer].inventory[Game1.player[Game1.myPlayer].selectedItem].name != "")
                {
                    text = Game1.player[Game1.myPlayer].inventory[Game1.player[Game1.myPlayer].selectedItem].AffixName();
                }
                Vector2 vector = Game1.fontMouseText.MeasureString(text) / 2f;
                Game1.spriteBatch.DrawString(Game1.fontMouseText, text, new Vector2(236f - vector.X, 0f), new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                int num = 20;
                for (int i = 0; i < 10; i++)
                {
                    if (i == Game1.player[Game1.myPlayer].selectedItem)
                    {
                        if (Game1.hotbarScale[i] < 1f)
                        {
                            Game1.hotbarScale[i] += 0.05f;
                        }
                    }
                    else if ((double)Game1.hotbarScale[i] > 0.75)
                    {
                        Game1.hotbarScale[i] -= 0.05f;
                    }
                    float num2 = Game1.hotbarScale[i];
                    int num3 = (int)(20f + 22f * (1f - num2));
                    int a = (int)(75f + 150f * num2);
                    Microsoft.Xna.Framework.Color lightColor = new Microsoft.Xna.Framework.Color(255, 255, 255, a);
                    if (!Game1.player[Game1.myPlayer].hbLocked && Game1.mouseX >= num && (float)Game1.mouseX <= (float)num + (float)Game1.inventoryBackTexture.Width * Game1.hotbarScale[i] && Game1.mouseY >= num3 && (float)Game1.mouseY <= (float)num3 + (float)Game1.inventoryBackTexture.Height * Game1.hotbarScale[i] && !Game1.player[Game1.myPlayer].channel)
                    {
                        Game1.player[Game1.myPlayer].mouseInterface = true;
                        Game1.player[Game1.myPlayer].showItemIcon = false;
                        if (Game1.mouseLeft && !Game1.player[Game1.myPlayer].hbLocked && !Game1.blockMouse)
                        {
                            Game1.player[Game1.myPlayer].changeItem = i;
                        }
                        Game1.hoverItemName = Game1.player[Game1.myPlayer].inventory[i].AffixName();
                        if (Game1.player[Game1.myPlayer].inventory[i].stack > 1)
                        {
                            object obj = Game1.hoverItemName;
                            Game1.hoverItemName = string.Concat(new object[]
                            {
                                obj,
                                " (",
                                Game1.player[Game1.myPlayer].inventory[i].stack,
                                ")"
                            });
                        }
                        Game1.rare = Game1.player[Game1.myPlayer].inventory[i].rare;
                    }
                    float num4 = Game1.inventoryScale;
                    Game1.inventoryScale = num2;
                    ItemSlot.Draw(Game1.spriteBatch, Game1.player[Game1.myPlayer].inventory, 13, i, new Vector2((float)num, (float)num3), lightColor);
                    Game1.inventoryScale = num4;
                    num += (int)((float)Game1.inventoryBackTexture.Width * Game1.hotbarScale[i]) + 4;
                }
            }
        }

        public static void OpenHairWindow()
        {
            Game1.hBar = -1f;
            Game1.lBar = -1f;
            Game1.sBar = -1f;
            Game1.playerInventory = false;
            Game1.npcChatText = "";
            Game1.oldHairStyle = Game1.player[Game1.myPlayer].hair;
            Game1.oldHairColor = Game1.player[Game1.myPlayer].hairColor;
            Game1.hairWindow = true;
            Game1.PlaySound(10, -1, -1, 1);
        }

        public static void CancelHairWindow()
        {
            if (!Game1.hairWindow)
            {
                return;
            }
            Game1.player[Game1.myPlayer].hair = Game1.oldHairStyle;
            Game1.player[Game1.myPlayer].hairColor = Game1.oldHairColor;
            Game1.hairWindow = false;
            if (Game1.player[Game1.myPlayer].talkNPC > -1 && Game1.npc[Game1.player[Game1.myPlayer].talkNPC].type == 353)
            {
                Game1.player[Game1.myPlayer].talkNPC = -1;
            }
            Game1.PlaySound(11, -1, -1, 1);
        }

        public static void BuyHairWindow()
        {
            Game1.PlaySound(18, -1, -1, 1);
            Game1.hairWindow = false;
            Game1.player[Game1.myPlayer].talkNPC = -1;
            Game1.npcChatCornerItem = 0;
            NetMessage.SendData(4, -1, -1, Game1.player[Game1.myPlayer].name, Game1.myPlayer, 0f, 0f, 0f, 0, 0, 0);
        }

        protected void DrawHairWindow()
        {
            if (Game1.npcChatText != "" || Game1.playerInventory || Game1.player[Game1.myPlayer].chest != -1 || Game1.npcShop != 0 || Game1.player[Game1.myPlayer].talkNPC == -1 || Game1.craftGuide)
            {
                Game1.CancelHairWindow();
                return;
            }
            int num = 123;
            if (NPC.downedMartians)
            {
                num += 10;
            }
            if (NPC.downedMartians && NPC.downedMoonlord)
            {
                num++;
            }
            int num2 = Game1.screenHeight / 2 + 60;
            int num3 = Game1.screenWidth / 2 - Game1.hairStyleBackTexture.Width / 2;
            int num4 = num2 + 42;
            int num5 = num3 + 22;
            int num6 = num3 + 234;
            int num7 = num2 + 18;
            Game1.selColor = Game1.player[Game1.myPlayer].hairColor;
            Game1.spriteBatch.Draw(Game1.hairStyleBackTexture, new Vector2((float)num3, (float)num2), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.hairStyleBackTexture.Width, Game1.hairStyleBackTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
            bool flag = new Microsoft.Xna.Framework.Rectangle(num3, num2, Game1.hairStyleBackTexture.Width, Game1.hairStyleBackTexture.Height).Contains(Game1.MouseScreen.ToPoint());
            if (flag)
            {
                int num8 = (Game1.mouseState.ScrollWheelValue - Game1.oldMouseWheel) / 120;
                num8 = -num8;
                int num9 = Math.Sign(num8);
                while (num8 != 0)
                {
                    if (num8 < 0)
                    {
                        Game1.hairStart -= 5;
                        Game1.PlaySound(12, -1, -1, 1);
                    }
                    else
                    {
                        Game1.hairStart += 5;
                        Game1.PlaySound(12, -1, -1, 1);
                    }
                    num8 -= num9;
                }
            }
            if (Game1.mouseX > num3 && Game1.mouseX < num3 + Game1.hairStyleBackTexture.Width && Game1.mouseY > num2 && Game1.mouseY < num2 + Game1.hairStyleBackTexture.Height)
            {
                Game1.player[Game1.myPlayer].mouseInterface = true;
            }
            int num10 = num6 - 18;
            int num11 = num7 + 74;
            if (Game1.hairStart > 1)
            {
                if (Game1.mouseX >= num10 && Game1.mouseX <= num10 + Game1.craftUpButtonTexture.Width && Game1.mouseY >= num11 && Game1.mouseY <= num11 + Game1.craftUpButtonTexture.Height)
                {
                    Game1.player[Game1.myPlayer].mouseInterface = true;
                    if (Game1.mouseLeftRelease && Game1.mouseLeft)
                    {
                        Game1.hairStart -= 15;
                        Game1.PlaySound(12, -1, -1, 1);
                    }
                }
                Game1.spriteBatch.Draw(Game1.scrollLeftButtonTexture, new Vector2((float)num10, (float)num11), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.craftUpButtonTexture.Width, Game1.craftUpButtonTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
            }
            if (Game1.hairStart + 15 < num)
            {
                num10 += 296;
                if (Game1.mouseX >= num10 && Game1.mouseX <= num10 + Game1.craftUpButtonTexture.Width && Game1.mouseY >= num11 && Game1.mouseY <= num11 + Game1.craftUpButtonTexture.Height)
                {
                    Game1.player[Game1.myPlayer].mouseInterface = true;
                    if (Game1.mouseLeftRelease && Game1.mouseLeft)
                    {
                        Game1.hairStart += 15;
                        Game1.PlaySound(12, -1, -1, 1);
                    }
                }
                Game1.spriteBatch.Draw(Game1.scrollRightButtonTexture, new Vector2((float)num10, (float)num11), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.craftUpButtonTexture.Width, Game1.craftUpButtonTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
            }
            if (Game1.hairStart + 15 >= num)
            {
                Game1.hairStart = num - 15;
            }
            if (Game1.hairStart < 0)
            {
                Game1.hairStart = 0;
            }
            int num12 = 0;
            if (Game1.oldHairStyle != Game1.player[Game1.myPlayer].hair)
            {
                if (Game1.player[Game1.myPlayer].hair > 51)
                {
                    num12 += 50000;
                }
                else
                {
                    num12 += 10000;
                }
            }
            if (Game1.oldHairColor != Game1.player[Game1.myPlayer].hairColor)
            {
                num12 += 10000;
            }
            string text = "";
            int num13 = 0;
            int num14 = 0;
            int num15 = 0;
            int num16 = 0;
            int num17 = num12;
            if (num17 < 0)
            {
                num17 = 0;
            }
            num12 = num17;
            if (num17 >= 1000000)
            {
                num13 = num17 / 1000000;
                num17 -= num13 * 1000000;
            }
            if (num17 >= 10000)
            {
                num14 = num17 / 10000;
                num17 -= num14 * 10000;
            }
            if (num17 >= 100)
            {
                num15 = num17 / 100;
                num17 -= num15 * 100;
            }
            if (num17 >= 1)
            {
                num16 = num17;
            }
            if (num13 > 0)
            {
                object obj = text;
                text = string.Concat(new object[]
                {
                    obj,
                    num13,
                    " ",
                    Lang.inter[15],
                    " "
                });
            }
            if (num14 > 0)
            {
                object obj = text;
                text = string.Concat(new object[]
                {
                    obj,
                    num14,
                    " ",
                    Lang.inter[16],
                    " "
                });
            }
            if (num15 > 0)
            {
                object obj = text;
                text = string.Concat(new object[]
                {
                    obj,
                    num15,
                    " ",
                    Lang.inter[17],
                    " "
                });
            }
            if (num16 > 0)
            {
                object obj = text;
                text = string.Concat(new object[]
                {
                    obj,
                    num16,
                    " ",
                    Lang.inter[18],
                    " "
                });
            }
            string text2 = "Buy (" + text + ")";
            if (num12 == 0)
            {
                text2 = "Buy";
            }
            int num18 = (int)((Game1.mouseTextColor * 2 + 255) / 3);
            Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(num18, (int)((double)num18 / 1.1), num18 / 2, num18);
            float scale = 0.9f;
            string text3 = text2;
            int num19 = num3 + 18;
            int num20 = num2 + 156;
            if (num12 > 0)
            {
                ItemSlot.DrawSavings(Game1.spriteBatch, (float)num19, (float)(num20 - 70), true);
            }
            if (num12 > 0 && Game1.mouseX > num19 && (float)Game1.mouseX < (float)num19 + Game1.fontMouseText.MeasureString(text3).X && Game1.mouseY > num20 && (float)Game1.mouseY < (float)num20 + Game1.fontMouseText.MeasureString(text3).Y)
            {
                scale = 1.1f;
                if (!Game1.npcChatFocus1)
                {
                    Game1.PlaySound(12, -1, -1, 1);
                }
                Game1.npcChatFocus1 = true;
                Game1.player[Game1.myPlayer].releaseUseItem = false;
            }
            else
            {
                if (Game1.npcChatFocus1)
                {
                    Game1.PlaySound(12, -1, -1, 1);
                }
                Game1.npcChatFocus1 = false;
            }
            for (int i = 0; i < 5; i++)
            {
                int num21 = num19;
                int num22 = num20;
                Microsoft.Xna.Framework.Color color2 = Microsoft.Xna.Framework.Color.Black;
                if (i == 0)
                {
                    num21 -= 2;
                }
                if (i == 1)
                {
                    num21 += 2;
                }
                if (i == 2)
                {
                    num22 -= 2;
                }
                if (i == 3)
                {
                    num22 += 2;
                }
                if (i == 4)
                {
                    if (num12 == 0)
                    {
                        color2 = new Microsoft.Xna.Framework.Color(100, 100, 100);
                    }
                    else
                    {
                        color2 = color;
                    }
                }
                Vector2 vector = Game1.fontMouseText.MeasureString(text3);
                vector *= 0.5f;
                Game1.spriteBatch.DrawString(Game1.fontMouseText, text3, new Vector2((float)num21 + vector.X, (float)num22 + vector.Y), color2, 0f, vector, scale, SpriteEffects.None, 0f);
            }
            scale = 0.9f;
            string text4 = "Cancel";
            num19 += 130;
            if (Game1.mouseX > num19 && (float)Game1.mouseX < (float)num19 + Game1.fontMouseText.MeasureString(text4).X && Game1.mouseY > num20 && (float)Game1.mouseY < (float)num20 + Game1.fontMouseText.MeasureString(text4).Y)
            {
                scale = 1.1f;
                if (!Game1.npcChatFocus2)
                {
                    Game1.PlaySound(12, -1, -1, 1);
                }
                Game1.npcChatFocus2 = true;
                Game1.player[Game1.myPlayer].releaseUseItem = false;
            }
            else
            {
                if (Game1.npcChatFocus2)
                {
                    Game1.PlaySound(12, -1, -1, 1);
                }
                Game1.npcChatFocus2 = false;
            }
            for (int j = 0; j < 5; j++)
            {
                int num23 = num19;
                int num24 = num20;
                Microsoft.Xna.Framework.Color color3 = Microsoft.Xna.Framework.Color.Black;
                if (j == 0)
                {
                    num23 -= 2;
                }
                if (j == 1)
                {
                    num23 += 2;
                }
                if (j == 2)
                {
                    num24 -= 2;
                }
                if (j == 3)
                {
                    num24 += 2;
                }
                if (j == 4)
                {
                    color3 = color;
                }
                Vector2 vector2 = Game1.fontMouseText.MeasureString(text4);
                vector2 *= 0.5f;
                Game1.spriteBatch.DrawString(Game1.fontMouseText, text4, new Vector2((float)num23 + vector2.X, (float)num24 + vector2.Y), color3, 0f, vector2, scale, SpriteEffects.None, 0f);
            }
            if (Game1.mouseLeft && Game1.mouseLeftRelease)
            {
                if (Game1.npcChatFocus1)
                {
                    if (Game1.player[Game1.myPlayer].BuyItem(num12))
                    {
                        Game1.BuyHairWindow();
                        return;
                    }
                }
                else if (Game1.npcChatFocus2)
                {
                    Game1.CancelHairWindow();
                    return;
                }
            }
            if (!Game1.mouseLeft)
            {
                this.grabColorSlider = 0;
                Game1.blockMouse = false;
            }
            int num25 = 167;
            Vector3 vector3 = Game1.rgbToHsl(Game1.selColor);
            float num26 = vector3.X;
            float num27 = vector3.Y;
            float num28 = vector3.Z;
            if (Game1.hBar == -1f || Game1.sBar == -1f || Game1.lBar == -1f)
            {
                Game1.hBar = num26;
                Game1.sBar = num27;
                Game1.lBar = num28;
            }
            else
            {
                num26 = Game1.hBar;
                num27 = Game1.sBar;
                num28 = Game1.lBar;
            }
            Game1.spriteBatch.Draw(this.hueTexture, new Vector2((float)num5, (float)num4), Microsoft.Xna.Framework.Color.White);
            Game1.spriteBatch.Draw(Game1.colorSliderTexture, new Vector2((float)num5 + (float)(this.hueTexture.Width - 2) * Game1.hBar - (float)(Game1.colorSliderTexture.Width / 2), (float)(num4 - Game1.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
            if (((Game1.mouseX > num5 - 4 && Game1.mouseX < num5 + this.hueTexture.Width + 4 && Game1.mouseY > num4 - 4 && Game1.mouseY < num4 + this.hueTexture.Height + 4) || this.grabColorSlider == 1) && Game1.mouseLeft && !Game1.blockMouse)
            {
                this.grabColorSlider = 1;
                num26 = (float)(Game1.mouseX - num5);
                num26 /= (float)this.hueTexture.Width;
                if (num26 < 0f)
                {
                    num26 = 0f;
                }
                if (num26 > 1f)
                {
                    num26 = 1f;
                }
                Game1.hBar = num26;
            }
            num4 += 26;
            Game1.spriteBatch.Draw(Game1.colorBarTexture, new Vector2((float)num5, (float)num4), Microsoft.Xna.Framework.Color.White);
            for (int k = 0; k <= num25; k++)
            {
                float saturation = (float)k / (float)num25;
                Microsoft.Xna.Framework.Color color4 = Game1.hslToRgb(num26, saturation, num28);
                Game1.spriteBatch.Draw(Game1.colorBlipTexture, new Vector2((float)(num5 + k + 5), (float)(num4 + 4)), color4);
            }
            Game1.spriteBatch.Draw(Game1.colorSliderTexture, new Vector2((float)num5 + (float)(this.hueTexture.Width - 2) * Game1.sBar - (float)(Game1.colorSliderTexture.Width / 2), (float)(num4 - Game1.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
            if (((Game1.mouseX > num5 - 4 && Game1.mouseX < num5 + this.hueTexture.Width + 4 && Game1.mouseY > num4 - 4 && Game1.mouseY < num4 + this.hueTexture.Height + 4) || this.grabColorSlider == 2) && Game1.mouseLeft && !Game1.blockMouse)
            {
                this.grabColorSlider = 2;
                num27 = (float)(Game1.mouseX - num5);
                num27 /= (float)this.hueTexture.Width;
                if (num27 < 0f)
                {
                    num27 = 0f;
                }
                if (num27 > 1f)
                {
                    num27 = 1f;
                }
                Game1.sBar = num27;
            }
            num4 += 26;
            Game1.spriteBatch.Draw(Game1.colorBarTexture, new Vector2((float)num5, (float)num4), Microsoft.Xna.Framework.Color.White);
            float num29 = 0.15f;
            for (int l = 0; l <= num25; l++)
            {
                float luminosity = (float)l / (float)num25;
                Microsoft.Xna.Framework.Color color5 = Game1.hslToRgb(num26, num27, luminosity);
                Game1.spriteBatch.Draw(Game1.colorBlipTexture, new Vector2((float)(num5 + l + 5), (float)(num4 + 4)), color5);
            }
            Game1.spriteBatch.Draw(Game1.colorSliderTexture, new Vector2((float)num5 + (float)(this.hueTexture.Width - 2) * ((Game1.lBar - num29) / (1f - num29)) - (float)(Game1.colorSliderTexture.Width / 2), (float)(num4 - Game1.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
            if (((Game1.mouseX > num5 - 4 && Game1.mouseX < num5 + this.hueTexture.Width + 4 && Game1.mouseY > num4 - 4 && Game1.mouseY < num4 + this.hueTexture.Height + 4) || this.grabColorSlider == 3) && Game1.mouseLeft && !Game1.blockMouse)
            {
                this.grabColorSlider = 3;
                num28 = (float)(Game1.mouseX - num5);
                num28 /= (float)this.hueTexture.Width;
                if (num28 < 0f)
                {
                    num28 = 0f;
                }
                if (num28 > 1f)
                {
                    num28 = 1f;
                }
                num28 = num28 * (1f - num29) + num29;
                Game1.lBar = num28;
            }
            Game1.selColor = Game1.hslToRgb(Game1.hBar, Game1.sBar, Game1.lBar);
            Game1.player[Game1.myPlayer].hairColor = Game1.selColor;
            int num30 = num6;
            int num31 = num7;
            int arg_E90_0 = Game1.hairStart;
            int num32 = 0;
            int num33 = 0;
            for (int m = 0; m < 15; m++)
            {
                int num34 = Game1.hairStart + m;
                if (Game1.player[Game1.myPlayer].hair == num34)
                {
                    Game1.spriteBatch.Draw(Game1.inventoryBack14Texture, new Vector2((float)num30, (float)num31), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.inventoryBackTexture.Width, Game1.inventoryBackTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                }
                else
                {
                    Game1.spriteBatch.Draw(Game1.inventoryBack8Texture, new Vector2((float)num30, (float)num31), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.inventoryBackTexture.Width, Game1.inventoryBackTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                }
                if (Game1.mouseX > num30 && Game1.mouseX < num30 + Game1.inventoryBackTexture.Width && Game1.mouseY > num31 && Game1.mouseY < num31 + Game1.inventoryBackTexture.Height && Game1.mouseLeft && Game1.mouseLeftRelease)
                {
                    Game1.mouseLeftRelease = false;
                    Game1.player[Game1.myPlayer].hair = num34;
                    Game1.PlaySound(12, -1, -1, 1);
                }
                this.LoadHair(num34);
                float x = (float)(num30 + Game1.inventoryBackTexture.Width / 2 - Game1.playerHairTexture[num34].Width / 2);
                float y = (float)(num31 + 4);
                Game1.spriteBatch.Draw(Game1.playerTextures[num32, 0], new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.playerHairTexture[num34].Width, 56)), Game1.player[Game1.myPlayer].skinColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                Game1.spriteBatch.Draw(Game1.playerTextures[num32, 1], new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.playerHairTexture[num34].Width, 56)), new Microsoft.Xna.Framework.Color(255, 255, 255, 255), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                Game1.spriteBatch.Draw(Game1.playerTextures[num32, 2], new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.playerHairTexture[num34].Width, 56)), Game1.player[Game1.myPlayer].eyeColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                Game1.spriteBatch.Draw(Game1.playerHairTexture[num34], new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.playerHairTexture[num34].Width, 56)), Game1.selColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                num33++;
                num30 += 56;
                if (num33 >= 5)
                {
                    num33 = 0;
                    num30 = num6;
                    num31 += 56;
                }
            }
        }
        public static void OpenClothesWindow()
        {
            Game1.hBar = -1f;
            Game1.lBar = -1f;
            Game1.sBar = -1f;
            Game1.playerInventory = false;
            Game1.npcChatText = "";
            Game1.clothesWindow = true;
            Game1.PlaySound(10, -1, -1, 1);
            Game1.selClothes = 0;
            Game1.oldClothesColor[0] = Game1.player[Game1.myPlayer].shirtColor;
            Game1.oldClothesColor[1] = Game1.player[Game1.myPlayer].underShirtColor;
            Game1.oldClothesColor[2] = Game1.player[Game1.myPlayer].pantsColor;
            Game1.oldClothesColor[3] = Game1.player[Game1.myPlayer].shoeColor;
        }

        public static void CancelClothesWindow(bool quiet = false)
        {
            if (!Game1.clothesWindow)
            {
                return;
            }
            Game1.clothesWindow = false;
            if (!quiet)
            {
                Game1.PlaySound(11, -1, -1, 1);
            }
            Game1.player[Game1.myPlayer].shirtColor = Game1.oldClothesColor[0];
            Game1.player[Game1.myPlayer].underShirtColor = Game1.oldClothesColor[1];
            Game1.player[Game1.myPlayer].pantsColor = Game1.oldClothesColor[2];
            Game1.player[Game1.myPlayer].shoeColor = Game1.oldClothesColor[3];
        }

        public static void SaveClothesWindow()
        {
            Game1.PlaySound(7, -1, -1, 1);
            Game1.clothesWindow = false;
            NetMessage.SendData(4, -1, -1, Game1.player[Game1.myPlayer].name, Game1.myPlayer, 0f, 0f, 0f, 0, 0, 0);
        }
        protected void DrawClothesWindow()
        {
            if (Game1.npcChatText != "" || Game1.playerInventory || Game1.player[Game1.myPlayer].chest != -1 || Game1.npcShop != 0 || Game1.player[Game1.myPlayer].talkNPC != -1 || Game1.craftGuide)
            {
                Game1.CancelClothesWindow(false);
                return;
            }
            int num = (int)(((double)Game1.player[Game1.myPlayer].position.X + (double)Game1.player[Game1.myPlayer].width * 0.5) / 16.0);
            int num2 = (int)(((double)Game1.player[Game1.myPlayer].position.Y + (double)Game1.player[Game1.myPlayer].height * 0.5) / 16.0);
            if (num < Game1.dresserX - 5 || num > Game1.dresserX + 6 || num2 < Game1.dresserY - 4 || num2 > Game1.dresserY + 5 || !Game1.tile[Game1.dresserX, Game1.dresserY].active())
            {
                Game1.CancelClothesWindow(false);
                return;
            }
            int num3 = Game1.screenHeight / 2 + 60;
            int num4 = Game1.screenWidth / 2 - Game1.clothesStyleBackTexture.Width / 2;
            int num5 = num3 + 32;
            int num6 = num4 + 22;
            int num7 = num4 + 234;
            int num8 = num3 + 18;
            if (Game1.selClothes == 0)
            {
                Game1.selColor = Game1.player[Game1.myPlayer].shirtColor;
            }
            if (Game1.selClothes == 1)
            {
                Game1.selColor = Game1.player[Game1.myPlayer].underShirtColor;
            }
            if (Game1.selClothes == 2)
            {
                Game1.selColor = Game1.player[Game1.myPlayer].pantsColor;
            }
            if (Game1.selClothes == 3)
            {
                Game1.selColor = Game1.player[Game1.myPlayer].shoeColor;
            }
            Game1.spriteBatch.Draw(Game1.clothesStyleBackTexture, new Vector2((float)num4, (float)num3), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.clothesStyleBackTexture.Width, Game1.clothesStyleBackTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
            if (Game1.mouseX > num4 && Game1.mouseX < num4 + Game1.clothesStyleBackTexture.Width && Game1.mouseY > num3 && Game1.mouseY < num3 + Game1.clothesStyleBackTexture.Height)
            {
                Game1.player[Game1.myPlayer].mouseInterface = true;
            }
            int num9 = (int)((Game1.mouseTextColor * 2 + 255) / 3);
            Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(num9, (int)((double)num9 / 1.1), num9 / 2, num9);
            float scale = 0.9f;
            string text = "Change";
            int num10 = num4 + 256;
            int num11 = num3 + 94;
            bool flag = false;
            if (Game1.oldClothesColor[0] != Game1.player[Game1.myPlayer].shirtColor || Game1.oldClothesColor[1] != Game1.player[Game1.myPlayer].underShirtColor || Game1.oldClothesColor[2] != Game1.player[Game1.myPlayer].pantsColor || Game1.oldClothesColor[3] != Game1.player[Game1.myPlayer].shoeColor)
            {
                flag = true;
            }
            if (flag && Game1.mouseX > num10 && (float)Game1.mouseX < (float)num10 + Game1.fontMouseText.MeasureString(text).X && Game1.mouseY > num11 && (float)Game1.mouseY < (float)num11 + Game1.fontMouseText.MeasureString(text).Y)
            {
                scale = 1.1f;
                if (!Game1.npcChatFocus1)
                {
                    Game1.PlaySound(12, -1, -1, 1);
                }
                Game1.npcChatFocus1 = true;
                Game1.player[Game1.myPlayer].releaseUseItem = false;
            }
            else
            {
                if (Game1.npcChatFocus1)
                {
                    Game1.PlaySound(12, -1, -1, 1);
                }
                Game1.npcChatFocus1 = false;
            }
            for (int i = 0; i < 5; i++)
            {
                int num12 = num10;
                int num13 = num11;
                Microsoft.Xna.Framework.Color color2 = Microsoft.Xna.Framework.Color.Black;
                if (i == 0)
                {
                    num12 -= 2;
                }
                if (i == 1)
                {
                    num12 += 2;
                }
                if (i == 2)
                {
                    num13 -= 2;
                }
                if (i == 3)
                {
                    num13 += 2;
                }
                if (i == 4)
                {
                    if (!flag)
                    {
                        color2 = new Microsoft.Xna.Framework.Color(100, 100, 100);
                    }
                    else
                    {
                        color2 = color;
                    }
                }
                Vector2 vector = Game1.fontMouseText.MeasureString(text);
                vector *= 0.5f;
                Game1.spriteBatch.DrawString(Game1.fontMouseText, text, new Vector2((float)num12 + vector.X, (float)num13 + vector.Y), color2, 0f, vector, scale, SpriteEffects.None, 0f);
            }
            scale = 0.9f;
            string text2 = "Cancel";
            num10 += 130;
            if (Game1.mouseX > num10 && (float)Game1.mouseX < (float)num10 + Game1.fontMouseText.MeasureString(text2).X && Game1.mouseY > num11 && (float)Game1.mouseY < (float)num11 + Game1.fontMouseText.MeasureString(text2).Y)
            {
                scale = 1.1f;
                if (!Game1.npcChatFocus2)
                {
                    Game1.PlaySound(12, -1, -1, 1);
                }
                Game1.npcChatFocus2 = true;
                Game1.player[Game1.myPlayer].releaseUseItem = false;
            }
            else
            {
                if (Game1.npcChatFocus2)
                {
                    Game1.PlaySound(12, -1, -1, 1);
                }
                Game1.npcChatFocus2 = false;
            }
            for (int j = 0; j < 5; j++)
            {
                int num14 = num10;
                int num15 = num11;
                Microsoft.Xna.Framework.Color color3 = Microsoft.Xna.Framework.Color.Black;
                if (j == 0)
                {
                    num14 -= 2;
                }
                if (j == 1)
                {
                    num14 += 2;
                }
                if (j == 2)
                {
                    num15 -= 2;
                }
                if (j == 3)
                {
                    num15 += 2;
                }
                if (j == 4)
                {
                    color3 = color;
                }
                Vector2 vector2 = Game1.fontMouseText.MeasureString(text2);
                vector2 *= 0.5f;
                Game1.spriteBatch.DrawString(Game1.fontMouseText, text2, new Vector2((float)num14 + vector2.X, (float)num15 + vector2.Y), color3, 0f, vector2, scale, SpriteEffects.None, 0f);
            }
            if (Game1.mouseLeft && Game1.mouseLeftRelease)
            {
                if (Game1.npcChatFocus1)
                {
                    Game1.SaveClothesWindow();
                    return;
                }
                if (Game1.npcChatFocus2)
                {
                    Game1.CancelClothesWindow(false);
                    return;
                }
            }
            if (!Game1.mouseLeft)
            {
                this.grabColorSlider = 0;
                Game1.blockMouse = false;
            }
            int num16 = 167;
            Vector3 vector3 = Game1.rgbToHsl(Game1.selColor);
            float num17 = vector3.X;
            float num18 = vector3.Y;
            float num19 = vector3.Z;
            if (Game1.hBar == -1f || Game1.sBar == -1f || Game1.lBar == -1f)
            {
                Game1.hBar = num17;
                Game1.sBar = num18;
                Game1.lBar = num19;
            }
            else
            {
                num17 = Game1.hBar;
                num18 = Game1.sBar;
                num19 = Game1.lBar;
            }
            Game1.spriteBatch.Draw(this.hueTexture, new Vector2((float)num6, (float)num5), Microsoft.Xna.Framework.Color.White);
            Game1.spriteBatch.Draw(Game1.colorSliderTexture, new Vector2((float)num6 + (float)(this.hueTexture.Width - 2) * Game1.hBar - (float)(Game1.colorSliderTexture.Width / 2), (float)(num5 - Game1.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
            if (((Game1.mouseX > num6 - 4 && Game1.mouseX < num6 + this.hueTexture.Width + 4 && Game1.mouseY > num5 - 4 && Game1.mouseY < num5 + this.hueTexture.Height + 4) || this.grabColorSlider == 1) && Game1.mouseLeft && !Game1.blockMouse)
            {
                this.grabColorSlider = 1;
                num17 = (float)(Game1.mouseX - num6);
                num17 /= (float)this.hueTexture.Width;
                if (num17 < 0f)
                {
                    num17 = 0f;
                }
                if (num17 > 1f)
                {
                    num17 = 1f;
                }
                Game1.hBar = num17;
            }
            num5 += 26;
            Game1.spriteBatch.Draw(Game1.colorBarTexture, new Vector2((float)num6, (float)num5), Microsoft.Xna.Framework.Color.White);
            for (int k = 0; k <= num16; k++)
            {
                float saturation = (float)k / (float)num16;
                Microsoft.Xna.Framework.Color color4 = Game1.hslToRgb(num17, saturation, num19);
                Game1.spriteBatch.Draw(Game1.colorBlipTexture, new Vector2((float)(num6 + k + 5), (float)(num5 + 4)), color4);
            }
            Game1.spriteBatch.Draw(Game1.colorSliderTexture, new Vector2((float)num6 + (float)(this.hueTexture.Width - 2) * Game1.sBar - (float)(Game1.colorSliderTexture.Width / 2), (float)(num5 - Game1.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
            if (((Game1.mouseX > num6 - 4 && Game1.mouseX < num6 + this.hueTexture.Width + 4 && Game1.mouseY > num5 - 4 && Game1.mouseY < num5 + this.hueTexture.Height + 4) || this.grabColorSlider == 2) && Game1.mouseLeft && !Game1.blockMouse)
            {
                this.grabColorSlider = 2;
                num18 = (float)(Game1.mouseX - num6);
                num18 /= (float)this.hueTexture.Width;
                if (num18 < 0f)
                {
                    num18 = 0f;
                }
                if (num18 > 1f)
                {
                    num18 = 1f;
                }
                Game1.sBar = num18;
            }
            num5 += 26;
            Game1.spriteBatch.Draw(Game1.colorBarTexture, new Vector2((float)num6, (float)num5), Microsoft.Xna.Framework.Color.White);
            float num20 = 0.15f;
            for (int l = 0; l <= num16; l++)
            {
                float luminosity = (float)l / (float)num16;
                Microsoft.Xna.Framework.Color color5 = Game1.hslToRgb(num17, num18, luminosity);
                Game1.spriteBatch.Draw(Game1.colorBlipTexture, new Vector2((float)(num6 + l + 5), (float)(num5 + 4)), color5);
            }
            Game1.spriteBatch.Draw(Game1.colorSliderTexture, new Vector2((float)num6 + (float)(this.hueTexture.Width - 2) * ((Game1.lBar - num20) / (1f - num20)) - (float)(Game1.colorSliderTexture.Width / 2), (float)(num5 - Game1.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
            if (((Game1.mouseX > num6 - 4 && Game1.mouseX < num6 + this.hueTexture.Width + 4 && Game1.mouseY > num5 - 4 && Game1.mouseY < num5 + this.hueTexture.Height + 4) || this.grabColorSlider == 3) && Game1.mouseLeft && !Game1.blockMouse)
            {
                this.grabColorSlider = 3;
                num19 = (float)(Game1.mouseX - num6);
                num19 /= (float)this.hueTexture.Width;
                if (num19 < 0f)
                {
                    num19 = 0f;
                }
                if (num19 > 1f)
                {
                    num19 = 1f;
                }
                num19 = num19 * (1f - num20) + num20;
                Game1.lBar = num19;
            }
            Game1.selColor = Game1.hslToRgb(Game1.hBar, Game1.sBar, Game1.lBar);
            if (Game1.selClothes == 0)
            {
                Game1.player[Game1.myPlayer].shirtColor = Game1.selColor;
            }
            if (Game1.selClothes == 1)
            {
                Game1.player[Game1.myPlayer].underShirtColor = Game1.selColor;
            }
            if (Game1.selClothes == 2)
            {
                Game1.player[Game1.myPlayer].pantsColor = Game1.selColor;
            }
            if (Game1.selClothes == 3)
            {
                Game1.player[Game1.myPlayer].shoeColor = Game1.selColor;
            }
            int num21 = num7;
            int num22 = num8;
            for (int m = 0; m < 4; m++)
            {
                if (Game1.selClothes == m)
                {
                    Game1.spriteBatch.Draw(Game1.inventoryBack14Texture, new Vector2((float)num21, (float)num22), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.inventoryBackTexture.Width, Game1.inventoryBackTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                }
                else
                {
                    Game1.spriteBatch.Draw(Game1.inventoryBack8Texture, new Vector2((float)num21, (float)num22), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.inventoryBackTexture.Width, Game1.inventoryBackTexture.Height)), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                }
                if (Game1.mouseX > num21 && Game1.mouseX < num21 + Game1.inventoryBackTexture.Width && Game1.mouseY > num22 && Game1.mouseY < num22 + Game1.inventoryBackTexture.Height && Game1.mouseLeft && Game1.mouseLeftRelease)
                {
                    Game1.mouseLeftRelease = false;
                    Game1.selClothes = m;
                    Game1.PlaySound(12, -1, -1, 1);
                    Game1.hBar = -1f;
                    Game1.lBar = -1f;
                    Game1.sBar = -1f;
                }
                float x = (float)(num21 + Game1.inventoryBackTexture.Width / 2 - Game1.clothesTexture[m].Width / 2);
                float y = (float)(num22 + Game1.inventoryBackTexture.Height / 2 - Game1.clothesTexture[m].Height / 2);
                Microsoft.Xna.Framework.Color color6 = Microsoft.Xna.Framework.Color.White;
                if (m == 0)
                {
                    color6 = Game1.player[Game1.myPlayer].shirtColor;
                }
                if (m == 1)
                {
                    color6 = Game1.player[Game1.myPlayer].underShirtColor;
                }
                if (m == 2)
                {
                    color6 = Game1.player[Game1.myPlayer].pantsColor;
                }
                if (m == 3)
                {
                    color6 = Game1.player[Game1.myPlayer].shoeColor;
                }
                Game1.spriteBatch.Draw(Game1.clothesTexture[m], new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.clothesTexture[m].Width, Game1.clothesTexture[m].Height)), color6, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                num21 += 56;
            }
        }
        protected void DrawInterface(GameTime gameTime)
        {
            EmoteBubble.DrawAll(Game1.spriteBatch);
            if (Game1.smartDigShowing && !Game1.player[Game1.myPlayer].dead)
            {
                Vector2 vector = new Vector2((float)Game1.smartDigX, (float)Game1.smartDigY) * 16f;
                new Vector2((float)Game1.offScreenRange, (float)Game1.offScreenRange);
                bool arg_5C_0 = Game1.drawToScreen;
                vector -= Game1.screenPosition;
                if (Game1.player[Game1.myPlayer].gravDir == -1f)
                {
                    vector.Y = (float)Game1.screenHeight - vector.Y - 16f;
                }
                Microsoft.Xna.Framework.Color newColor = Lighting.GetColor(Game1.smartDigX, Game1.smartDigY) * 1f;
                Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1);
                float r = 1f;
                float g = 0.9f;
                float b = 0.1f;
                float a = 1f;
                float scale = 0.6f;
                Game1.spriteBatch.Draw(Game1.magicPixel, vector, new Microsoft.Xna.Framework.Rectangle?(value), Game1.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
                Game1.spriteBatch.Draw(Game1.magicPixel, vector + Vector2.UnitX * 8f, new Microsoft.Xna.Framework.Rectangle?(value), Game1.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
                Game1.spriteBatch.Draw(Game1.magicPixel, vector + Vector2.UnitY * 8f, new Microsoft.Xna.Framework.Rectangle?(value), Game1.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
                Game1.spriteBatch.Draw(Game1.magicPixel, vector + Vector2.One * 8f, new Microsoft.Xna.Framework.Rectangle?(value), Game1.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
                b = 0.3f;
                g = 0.95f;
                scale = (a = 1f);
                Game1.spriteBatch.Draw(Game1.magicPixel, vector + Vector2.UnitX * -2f, new Microsoft.Xna.Framework.Rectangle?(value), Game1.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(2f, 16f), SpriteEffects.None, 0f);
                Game1.spriteBatch.Draw(Game1.magicPixel, vector + Vector2.UnitX * 16f, new Microsoft.Xna.Framework.Rectangle?(value), Game1.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(2f, 16f), SpriteEffects.None, 0f);
                Game1.spriteBatch.Draw(Game1.magicPixel, vector + Vector2.UnitY * -2f, new Microsoft.Xna.Framework.Rectangle?(value), Game1.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(16f, 2f), SpriteEffects.None, 0f);
                Game1.spriteBatch.Draw(Game1.magicPixel, vector + Vector2.UnitY * 16f, new Microsoft.Xna.Framework.Rectangle?(value), Game1.buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(16f, 2f), SpriteEffects.None, 0f);
            }
            if (Game1.player[Game1.myPlayer].rulerGrid)
            {
                float num = Game1.player[Game1.myPlayer].velocity.Length();
                num = Vector2.Distance(Game1.player[Game1.myPlayer].position, Game1.player[Game1.myPlayer].shadowPos[2]);
                float num2 = 6f;
                Texture2D texture = Game1.extraTexture[68];
                float scale2 = MathHelper.Lerp(0.2f, 0.7f, MathHelper.Clamp(1f - num / num2, 0f, 1f));
                Vector2 vector2 = Game1.screenPosition;
                vector2 += new Vector2(-50f);
                vector2 = vector2.ToTileCoordinates().ToVector2() * 16f;
                int num3 = (Game1.screenWidth + 100) / 16;
                int num4 = (Game1.screenHeight + 100) / 16;
                Microsoft.Xna.Framework.Point point = Game1.MouseWorld.ToTileCoordinates();
                point.X -= (int)vector2.X / 16;
                point.Y -= (int)vector2.Y / 16;
                Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(0.24f, 0.8f, 0.9f, 0.5f) * 0.4f * scale2;
                Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color(1f, 0.8f, 0.9f, 0.5f) * 0.5f * scale2;
                Microsoft.Xna.Framework.Rectangle value2 = new Microsoft.Xna.Framework.Rectangle(0, 18, 18, 18);
                vector2 -= Vector2.One;
                for (int i = 0; i < num3; i++)
                {
                    for (int j = 0; j < num4; j++)
                    {
                        Microsoft.Xna.Framework.Color color3 = color;
                        Vector2 zero = Vector2.Zero;
                        if (i != point.X && j != point.Y)
                        {
                            if (i != point.X + 1)
                            {
                                value2.X = 0;
                                value2.Width = 16;
                            }
                            else
                            {
                                value2.X = 2;
                                value2.Width = 14;
                                zero.X = 2f;
                            }
                            if (j != point.Y + 1)
                            {
                                value2.Y = 18;
                                value2.Height = 16;
                            }
                            else
                            {
                                value2.Y = 2;
                                value2.Height = 14;
                                zero.Y = 2f;
                            }
                            Game1.spriteBatch.Draw(texture, Game1.ReverseGravitySupport(new Vector2((float)i, (float)j) * 16f - Game1.screenPosition + vector2 + zero, 16f), new Microsoft.Xna.Framework.Rectangle?(value2), color3, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
                        }
                    }
                }
                value2 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 18);
                for (int k = 0; k < num3; k++)
                {
                    if (k == point.X)
                    {
                        Game1.spriteBatch.Draw(texture, Game1.ReverseGravitySupport(new Vector2((float)k, (float)point.Y) * 16f - Game1.screenPosition + vector2, 16f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16)), color2, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
                    }
                    else
                    {
                        Game1.spriteBatch.Draw(texture, Game1.ReverseGravitySupport(new Vector2((float)k, (float)point.Y) * 16f - Game1.screenPosition + vector2, 16f), new Microsoft.Xna.Framework.Rectangle?(value2), color2, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
                    }
                }
                value2 = new Microsoft.Xna.Framework.Rectangle(0, 0, 18, 16);
                for (int l = 0; l < num4; l++)
                {
                    if (l != point.Y)
                    {
                        Game1.spriteBatch.Draw(texture, Game1.ReverseGravitySupport(new Vector2((float)point.X, (float)l) * 16f - Game1.screenPosition + vector2, 16f), new Microsoft.Xna.Framework.Rectangle?(value2), color2, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            if (Game1.player[Game1.myPlayer].rulerLine)
            {
                float num5 = Game1.player[Game1.myPlayer].velocity.Length();
                float num6 = 6f;
                float num7 = 2f;
                if (num5 <= num6)
                {
                    float scale3 = 1f;
                    if (num5 >= num7)
                    {
                        scale3 = 1f - (num5 - num7) / num6;
                    }
                    int num8 = 1;
                    if ((float)Game1.mouseX + Game1.screenPosition.X < Game1.player[Game1.myPlayer].Center.X)
                    {
                        num8 = -1;
                    }
                    int num9 = (int)(Game1.player[Game1.myPlayer].position.X + (float)(Game1.player[Game1.myPlayer].width / 2) + (float)(num8 * 4)) / 16;
                    int num10 = (int)(Game1.player[Game1.myPlayer].position.Y + (float)Game1.player[Game1.myPlayer].height - 2f) / 16;
                    if (Game1.player[Game1.myPlayer].gravDir == -1f)
                    {
                        num10--;
                    }
                    num9 += num8;
                    Vector2 value3 = Game1.MouseWorld;
                    if (Game1.player[Game1.myPlayer].gravDir == -1f)
                    {
                        value3.Y += 16f;
                    }
                    value3 /= 16f;
                    new Vector2((float)num9, (float)num10);
                    int num11 = (int)value3.X - num9;
                    int num12 = (int)value3.Y - num10;
                    int num13 = Math.Abs(num11) + 1;
                    int num14 = Math.Abs(num12) + 1;
                    if (num11 != 0 || num12 != 0)
                    {
                        Texture2D texture2 = Game1.extraTexture[2];
                        Microsoft.Xna.Framework.Rectangle value4 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
                        int num15 = num9;
                        int num16 = num10;
                        if (Game1.player[Game1.myPlayer].gravDir == -1f)
                        {
                            num16--;
                        }
                        float r2 = 0.24f;
                        float g2 = 0.8f;
                        float b2 = 0.9f;
                        float a2 = 1f;
                        float scale4 = 0.8f;
                        Microsoft.Xna.Framework.Color color4 = new Microsoft.Xna.Framework.Color(r2, g2, b2, a2) * scale4 * scale3;
                        Game1.spriteBatch.Draw(texture2, Game1.ReverseGravitySupport(new Vector2((float)num15, (float)num16) * 16f - Game1.screenPosition, 16f), new Microsoft.Xna.Framework.Rectangle?(value4), color4, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
                        if (num11 != 0)
                        {
                            int num17 = Math.Sign(num11);
                            value4.Y = ((num17 == 1) ? 16 : 32);
                            while (num11 != 0)
                            {
                                num11 -= num17;
                                num15 += num17;
                                if (num11 == 0)
                                {
                                    value4.Y = 0;
                                }
                                color4 = new Microsoft.Xna.Framework.Color(r2, g2, b2, a2) * scale4 * scale3;
                                Game1.spriteBatch.Draw(texture2, Game1.ReverseGravitySupport(new Vector2((float)num15, (float)num16) * 16f - Game1.screenPosition, 16f), new Microsoft.Xna.Framework.Rectangle?(value4), color4, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
                            }
                        }
                        if (num12 != 0)
                        {
                            int num18 = Math.Sign(num12);
                            value4.Y = ((num18 == 1) ? 48 : 64);
                            while (num12 != 0)
                            {
                                num12 -= num18;
                                num16 += num18;
                                if (num12 == 0)
                                {
                                    value4.Y = 0;
                                }
                                color4 = new Microsoft.Xna.Framework.Color(r2, g2, b2, a2) * scale4 * scale3;
                                Game1.spriteBatch.Draw(texture2, Game1.ReverseGravitySupport(new Vector2((float)num15, (float)num16) * 16f - Game1.screenPosition, 16f), new Microsoft.Xna.Framework.Rectangle?(value4), color4, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
                            }
                        }
                        Utils.DrawBorderString(Game1.spriteBatch, num13.ToString() + "x" + num14.ToString(), new Vector2((float)(Game1.mouseX + 16), (float)Game1.mouseY), new Microsoft.Xna.Framework.Color(r2, g2, b2, a2), 1f, 0f, 0.8f, -1);
                    }
                }
            }
            if (Game1.EquipPage == 1)
            {
                if (Game1.ignoreErrors)
                {
                    try
                    {
                        this.DrawNPCHouse();
                        goto IL_C49;
                    }
                    catch (Exception e)
                    {
                        TimeLogger.DrawException(e);
                        goto IL_C49;
                    }
                }
                this.DrawNPCHouse();
            }
        IL_C49:
            if (Game1.player[Game1.myPlayer].selectedItem == 58 && Game1.player[Game1.myPlayer].itemAnimation > 0)
            {
                Game1.mouseLeftRelease = false;
            }
            Game1.mouseHC = false;
            if (Game1.hideUI)
            {
                Game1.maxQ = true;
                return;
            }
            CaptureManager.Instance.Update();
            if (CaptureManager.Instance.Active)
            {
                CaptureManager.Instance.Draw(Game1.spriteBatch);
                return;
            }
            if (Game1.ingameOptionsWindow)
            {
                IngameOptions.Draw(this, Game1.spriteBatch);
                return;
            }
            Game1.InGameUI.Draw(Game1.spriteBatch, gameTime);
            if (Game1.achievementsWindow)
            {
                AchievementsUI.Draw(Game1.spriteBatch, gameTime);
                return;
            }
            AchievementCompleteUI.Draw(Game1.spriteBatch);
            if (Game1.hbPosition != 0)
            {
                bool flag = false;
                for (int m = 199; m >= 0; m--)
                {
                    if (Game1.npc[m].active && Game1.npc[m].type > 0 && Game1.npc[m].life != Game1.npc[m].lifeMax && !Game1.npc[m].dontTakeDamage)
                    {
                        float scale5 = 1f;
                        int type = Game1.npc[m].type;
                        if (type == 4)
                        {
                            scale5 = 1.5f;
                        }
                        if (type == 35)
                        {
                            scale5 = 1.5f;
                        }
                        if (type == 36)
                        {
                            scale5 = 1.5f;
                        }
                        if (type == 50)
                        {
                            scale5 = 1.5f;
                        }
                        if (type == 113)
                        {
                            scale5 = 1.5f;
                        }
                        if (type == 114)
                        {
                            scale5 = 1.5f;
                        }
                        if (type == 125)
                        {
                            scale5 = 1.5f;
                        }
                        if (type == 126)
                        {
                            scale5 = 1.5f;
                        }
                        if (type == 127)
                        {
                            scale5 = 1.5f;
                        }
                        if (type == 128)
                        {
                            scale5 = 1.5f;
                        }
                        if (type == 129)
                        {
                            scale5 = 1.5f;
                        }
                        if (type == 130)
                        {
                            scale5 = 1.5f;
                        }
                        if (type == 131)
                        {
                            scale5 = 1.5f;
                        }
                        if (type == 222)
                        {
                            scale5 = 1.5f;
                        }
                        if (type >= 245 && type <= 249)
                        {
                            scale5 = 1.5f;
                        }
                        if (type == 262)
                        {
                            scale5 = 1.5f;
                        }
                        if (type == 266)
                        {
                            scale5 = 1.5f;
                        }
                        if (type == 87)
                        {
                            scale5 = 1.5f;
                        }
                        if (type == 510 || type == 454)
                        {
                            scale5 = 1.5f;
                        }
                        if (type == 439 || type == 370)
                        {
                            scale5 = 1.5f;
                        }
                        if ((!Game1.expertMode || type != 266) && ((type != 439 && type != 440) || Game1.npc[m].ai[0] != 5f))
                        {
                            if (type >= 134 && type <= 136)
                            {
                                scale5 = 1.5f;
                                if (!flag)
                                {
                                    flag = true;
                                    Vector2 value5 = default(Vector2);
                                    float num19 = 999999f;
                                    for (int n = 0; n < 200; n++)
                                    {
                                        if (Game1.npc[n].active && Game1.npc[n].type >= 134 && Game1.npc[n].type <= 136)
                                        {
                                            Vector2 vector3 = Game1.player[Game1.myPlayer].Center - Game1.npc[n].Center;
                                            if (vector3.Length() < num19 && Collision.CanHit(Game1.player[Game1.myPlayer].Center, 1, 1, Game1.npc[n].Center, 1, 1))
                                            {
                                                num19 = vector3.Length();
                                                value5 = Game1.npc[n].position;
                                            }
                                        }
                                    }
                                    if (num19 < (float)Game1.screenWidth)
                                    {
                                        if (Game1.destroyerHB.X < 100f && Game1.destroyerHB.Y < 100f)
                                        {
                                            Game1.destroyerHB = value5;
                                        }
                                        else
                                        {
                                            Game1.destroyerHB = (Game1.destroyerHB * 49f + value5) / 50f;
                                        }
                                        value5 = Game1.destroyerHB;
                                        int num20 = m;
                                        if (type != 134 && Game1.npc[m].realLife != -1)
                                        {
                                            num20 = Game1.npc[m].realLife;
                                        }
                                        float num21 = Lighting.Brightness((int)((Game1.npc[m].position.X + (float)(Game1.npc[m].width / 2)) / 16f), (int)((Game1.npc[m].position.Y + (float)(Game1.npc[m].height / 2) + Game1.npc[m].gfxOffY) / 16f));
                                        num21 = (num21 + 1f) / 2f;
                                        this.DrawHealthBar(value5.X + (float)(Game1.npc[m].width / 2), value5.Y + (float)(Game1.npc[m].height / 2), Game1.npc[num20].life, Game1.npc[num20].lifeMax, num21, scale5);
                                    }
                                    else
                                    {
                                        Game1.destroyerHB = new Vector2(0f, 0f);
                                    }
                                }
                            }
                            else if (type == 7)
                            {
                                Vector2 value6 = Game1.npc[m].position;
                                int num22 = -1;
                                for (int num23 = 0; num23 < 200; num23++)
                                {
                                    if (Game1.npc[num23].active && Game1.npc[num23].type == 9)
                                    {
                                        num22 = num23;
                                    }
                                }
                                if (num22 >= 0)
                                {
                                    value6 += Game1.npc[num22].position;
                                    value6 /= 2f;
                                    this.DrawHealthBar(value6.X + (float)(Game1.npc[m].width / 2), value6.Y + (float)(Game1.npc[m].height / 2), Game1.npc[m].life, Game1.npc[m].lifeMax, Lighting.Brightness((int)((Game1.npc[m].position.X + (float)(Game1.npc[m].width / 2)) / 16f), (int)((Game1.npc[m].position.Y + (float)(Game1.npc[m].height / 2) + Game1.npc[m].gfxOffY) / 16f)), scale5);
                                }
                            }
                            else if (type != 8 && type != 9)
                            {
                                if (type == 95)
                                {
                                    Vector2 value7 = Game1.npc[m].position;
                                    int num24 = -1;
                                    for (int num25 = 0; num25 < 200; num25++)
                                    {
                                        if (Game1.npc[num25].active && Game1.npc[num25].type == 97)
                                        {
                                            num24 = num25;
                                        }
                                    }
                                    if (num24 >= 0)
                                    {
                                        value7 += Game1.npc[num24].position;
                                        value7 /= 2f;
                                        this.DrawHealthBar(value7.X + (float)(Game1.npc[m].width / 2), value7.Y + (float)(Game1.npc[m].height / 2), Game1.npc[m].life, Game1.npc[m].lifeMax, Lighting.Brightness((int)((Game1.npc[m].position.X + (float)(Game1.npc[m].width / 2)) / 16f), (int)((Game1.npc[m].position.Y + (float)(Game1.npc[m].height / 2) + Game1.npc[m].gfxOffY) / 16f)), scale5);
                                    }
                                }
                                else if (type != 96 && type != 97)
                                {
                                    if (type == 10)
                                    {
                                        Vector2 value8 = Game1.npc[m].position;
                                        int num26 = -1;
                                        for (int num27 = 0; num27 < 200; num27++)
                                        {
                                            if (Game1.npc[num27].active && Game1.npc[num27].type == 12)
                                            {
                                                num26 = num27;
                                            }
                                        }
                                        if (num26 >= 0)
                                        {
                                            value8 += Game1.npc[num26].position;
                                            value8 /= 2f;
                                            this.DrawHealthBar(value8.X + (float)(Game1.npc[m].width / 2), value8.Y + (float)(Game1.npc[m].height / 2), Game1.npc[m].life, Game1.npc[m].lifeMax, Lighting.Brightness((int)((Game1.npc[m].position.X + (float)(Game1.npc[m].width / 2)) / 16f), (int)((Game1.npc[m].position.Y + (float)(Game1.npc[m].height / 2) + Game1.npc[m].gfxOffY) / 16f)), scale5);
                                        }
                                    }
                                    else if (type != 11 && type != 12)
                                    {
                                        if (type == 87)
                                        {
                                            Vector2 value9 = Game1.npc[m].position;
                                            int num28 = -1;
                                            for (int num29 = 0; num29 < 200; num29++)
                                            {
                                                if (Game1.npc[num29].active && Game1.npc[num29].type == 92)
                                                {
                                                    num28 = num29;
                                                }
                                            }
                                            if (num28 >= 0)
                                            {
                                                value9 += Game1.npc[num28].position;
                                                value9 /= 2f;
                                                this.DrawHealthBar(value9.X + (float)(Game1.npc[m].width / 2), value9.Y + (float)(Game1.npc[m].height / 2), Game1.npc[m].life, Game1.npc[m].lifeMax, Lighting.Brightness((int)((Game1.npc[m].position.X + (float)(Game1.npc[m].width / 2)) / 16f), (int)((Game1.npc[m].position.Y + (float)(Game1.npc[m].height / 2) + Game1.npc[m].gfxOffY) / 16f)), scale5);
                                            }
                                        }
                                        else if (type == 412)
                                        {
                                            Vector2 value10 = Game1.npc[m].position;
                                            int num30 = m;
                                            while (num30 > 0 && num30 < 200 && Game1.npc[num30].ai[0] > 0f)
                                            {
                                                num30 = (int)Game1.npc[num30].ai[0];
                                            }
                                            if (num30 >= 0)
                                            {
                                                value10 += Game1.npc[num30].position;
                                                value10 /= 2f;
                                                this.DrawHealthBar(value10.X + (float)(Game1.npc[m].width / 2), value10.Y + (float)(Game1.npc[m].height / 2), Game1.npc[m].life, Game1.npc[m].lifeMax, Lighting.Brightness((int)((Game1.npc[m].position.X + (float)(Game1.npc[m].width / 2)) / 16f), (int)((Game1.npc[m].position.Y + (float)(Game1.npc[m].height / 2) + Game1.npc[m].gfxOffY) / 16f)), scale5);
                                            }
                                        }
                                        else if (type != 414 && type != 413 && (type < 88 || type > 92))
                                        {
                                            if (type == 39)
                                            {
                                                Vector2 value11 = Game1.npc[m].position;
                                                int num31 = -1;
                                                for (int num32 = 0; num32 < 200; num32++)
                                                {
                                                    if (Game1.npc[num32].active && Game1.npc[num32].type == 41)
                                                    {
                                                        num31 = num32;
                                                    }
                                                }
                                                if (num31 >= 0)
                                                {
                                                    value11 += Game1.npc[num31].position;
                                                    value11 /= 2f;
                                                    this.DrawHealthBar(value11.X + (float)(Game1.npc[m].width / 2), value11.Y + (float)(Game1.npc[m].height / 2), Game1.npc[m].life, Game1.npc[m].lifeMax, Lighting.Brightness((int)((Game1.npc[m].position.X + (float)(Game1.npc[m].width / 2)) / 16f), (int)((Game1.npc[m].position.Y + (float)(Game1.npc[m].height / 2) + Game1.npc[m].gfxOffY) / 16f)), scale5);
                                                }
                                            }
                                            else if (type != 40 && type != 41)
                                            {
                                                if (type == 98)
                                                {
                                                    Vector2 value12 = Game1.npc[m].position;
                                                    int num33 = -1;
                                                    for (int num34 = 0; num34 < 200; num34++)
                                                    {
                                                        if (Game1.npc[num34].active && Game1.npc[num34].type == 100)
                                                        {
                                                            num33 = num34;
                                                        }
                                                    }
                                                    if (num33 >= 0)
                                                    {
                                                        value12 += Game1.npc[num33].position;
                                                        value12 /= 2f;
                                                        this.DrawHealthBar(value12.X + (float)(Game1.npc[m].width / 2), value12.Y + (float)(Game1.npc[m].height / 2), Game1.npc[m].life, Game1.npc[m].lifeMax, Lighting.Brightness((int)((Game1.npc[m].position.X + (float)(Game1.npc[m].width / 2)) / 16f), (int)((Game1.npc[m].position.Y + (float)(Game1.npc[m].height / 2) + Game1.npc[m].gfxOffY) / 16f)), scale5);
                                                    }
                                                }
                                                else if (type != 99 && type != 100)
                                                {
                                                    if (type == 454)
                                                    {
                                                        Vector2 value13 = Game1.npc[m].position;
                                                        int num35 = -1;
                                                        for (int num36 = 0; num36 < 200; num36++)
                                                        {
                                                            if (Game1.npc[num36].active && Game1.npc[num36].type == 459)
                                                            {
                                                                num35 = num36;
                                                            }
                                                        }
                                                        if (num35 >= 0)
                                                        {
                                                            value13 += Game1.npc[num35].position;
                                                            value13 /= 2f;
                                                            this.DrawHealthBar(value13.X + (float)(Game1.npc[m].width / 2), value13.Y + (float)(Game1.npc[m].height / 2), Game1.npc[m].life, Game1.npc[m].lifeMax, Lighting.Brightness((int)((Game1.npc[m].position.X + (float)(Game1.npc[m].width / 2)) / 16f), (int)((Game1.npc[m].position.Y + (float)(Game1.npc[m].height / 2) + Game1.npc[m].gfxOffY) / 16f)), scale5);
                                                        }
                                                    }
                                                    else if (type < 455 || type > 459)
                                                    {
                                                        if (type == 510)
                                                        {
                                                            Vector2 value14 = Game1.npc[m].position;
                                                            int num37 = -1;
                                                            for (int num38 = 0; num38 < 200; num38++)
                                                            {
                                                                if (Game1.npc[num38].active && Game1.npc[num38].type == 512)
                                                                {
                                                                    num37 = num38;
                                                                }
                                                            }
                                                            if (num37 >= 0)
                                                            {
                                                                value14 += Game1.npc[num37].position;
                                                                value14 /= 2f;
                                                                this.DrawHealthBar(value14.X + (float)(Game1.npc[m].width / 2), value14.Y + (float)(Game1.npc[m].height / 2), Game1.npc[m].life, Game1.npc[m].lifeMax, Lighting.Brightness((int)((Game1.npc[m].position.X + (float)(Game1.npc[m].width / 2)) / 16f), (int)((Game1.npc[m].position.Y + (float)(Game1.npc[m].height / 2) + Game1.npc[m].gfxOffY) / 16f)), scale5);
                                                            }
                                                        }
                                                        else if (type != 511 && type != 512)
                                                        {
                                                            if (type == 513)
                                                            {
                                                                Vector2 value15 = Game1.npc[m].position;
                                                                int num39 = -1;
                                                                for (int num40 = 0; num40 < 200; num40++)
                                                                {
                                                                    if (Game1.npc[num40].active && Game1.npc[num40].type == 515)
                                                                    {
                                                                        num39 = num40;
                                                                    }
                                                                }
                                                                if (num39 >= 0)
                                                                {
                                                                    value15 += Game1.npc[num39].position;
                                                                    value15 /= 2f;
                                                                    this.DrawHealthBar(value15.X + (float)(Game1.npc[m].width / 2), value15.Y + (float)(Game1.npc[m].height / 2), Game1.npc[m].life, Game1.npc[m].lifeMax, Lighting.Brightness((int)((Game1.npc[m].position.X + (float)(Game1.npc[m].width / 2)) / 16f), (int)((Game1.npc[m].position.Y + (float)(Game1.npc[m].height / 2) + Game1.npc[m].gfxOffY) / 16f)), scale5);
                                                                }
                                                            }
                                                            else if (type != 514 && type != 515)
                                                            {
                                                                if (type == 117)
                                                                {
                                                                    Vector2 value16 = Game1.npc[m].position;
                                                                    int num41 = -1;
                                                                    for (int num42 = 0; num42 < 200; num42++)
                                                                    {
                                                                        if (Game1.npc[num42].active && Game1.npc[num42].type == 119)
                                                                        {
                                                                            num41 = num42;
                                                                        }
                                                                    }
                                                                    if (num41 >= 0)
                                                                    {
                                                                        value16 += Game1.npc[num41].position;
                                                                        value16 /= 2f;
                                                                        this.DrawHealthBar(value16.X + (float)(Game1.npc[m].width / 2), value16.Y + (float)(Game1.npc[m].height / 2), Game1.npc[m].life, Game1.npc[m].lifeMax, Lighting.Brightness((int)((Game1.npc[m].position.X + (float)(Game1.npc[m].width / 2)) / 16f), (int)((Game1.npc[m].position.Y + (float)(Game1.npc[m].height / 2) + Game1.npc[m].gfxOffY) / 16f)), scale5);
                                                                    }
                                                                }
                                                                else if (type != 118 && type != 119)
                                                                {
                                                                    if (Game1.hbPosition == 1)
                                                                    {
                                                                        float num43 = 10f;
                                                                        num43 += Game1.NPCAddHeight(m);
                                                                        this.DrawHealthBar(Game1.npc[m].position.X + (float)(Game1.npc[m].width / 2), Game1.npc[m].position.Y + (float)Game1.npc[m].height + num43 + Game1.npc[m].gfxOffY, Game1.npc[m].life, Game1.npc[m].lifeMax, Lighting.Brightness((int)((Game1.npc[m].position.X + (float)(Game1.npc[m].width / 2)) / 16f), (int)((Game1.npc[m].position.Y + (float)(Game1.npc[m].height / 2) + Game1.npc[m].gfxOffY) / 16f)), scale5);
                                                                    }
                                                                    else if (Game1.hbPosition == 2)
                                                                    {
                                                                        float num44 = -24f;
                                                                        num44 -= Game1.NPCAddHeight(m) / 2f;
                                                                        this.DrawHealthBar(Game1.npc[m].position.X + (float)(Game1.npc[m].width / 2), Game1.npc[m].position.Y + num44 + Game1.npc[m].gfxOffY, Game1.npc[m].life, Game1.npc[m].lifeMax, Lighting.Brightness((int)((Game1.npc[m].position.X + (float)(Game1.npc[m].width / 2)) / 16f), (int)((Game1.npc[m].position.Y + (float)(Game1.npc[m].height / 2) + Game1.npc[m].gfxOffY) / 16f)), scale5);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                for (int num45 = 0; num45 < 255; num45++)
                {
                    if (num45 != Game1.myPlayer && Game1.player[num45].active && !Game1.player[num45].ghost && !Game1.player[num45].dead && Game1.player[num45].statLife != Game1.player[num45].statLifeMax2)
                    {
                        if (Game1.hbPosition == 1)
                        {
                            int num46 = 10;
                            this.DrawHealthBar(Game1.player[num45].position.X + (float)(Game1.player[num45].width / 2), Game1.player[num45].position.Y + (float)Game1.player[num45].height + (float)num46 + Game1.player[num45].gfxOffY, Game1.player[num45].statLife, Game1.player[num45].statLifeMax2, Lighting.Brightness((int)((Game1.player[num45].position.X + (float)(Game1.player[num45].width / 2)) / 16f), (int)((Game1.player[num45].position.Y + (float)(Game1.player[num45].height / 2) + Game1.player[num45].gfxOffY) / 16f)), 1f);
                        }
                        else if (Game1.hbPosition == 2)
                        {
                            int num47 = -20;
                            this.DrawHealthBar(Game1.player[num45].position.X + (float)(Game1.player[num45].width / 2), Game1.player[num45].position.Y + (float)num47 + Game1.player[num45].gfxOffY, Game1.player[num45].statLife, Game1.player[num45].statLifeMax2, Lighting.Brightness((int)((Game1.player[num45].position.X + (float)(Game1.player[num45].width / 2)) / 16f), (int)((Game1.player[num45].position.Y + (float)(Game1.player[num45].height / 2) + Game1.player[num45].gfxOffY) / 16f)), 1f);
                        }
                    }
                }
            }
            Game1.DrawInvasionProgress();
            Game1.mH = 0;
            if (Game1.mapEnabled)
            {
                if (!Game1.mapFullscreen && Game1.mapStyle == 1)
                {
                    Game1.mH = 256;
                    if (Game1.ignoreErrors)
                    {
                        try
                        {
                            this.DrawMap();
                            goto IL_2493;
                        }
                        catch (Exception e2)
                        {
                            TimeLogger.DrawException(e2);
                            goto IL_2493;
                        }
                    }
                    this.DrawMap();
                }
            IL_2493:
                if (Game1.mH + 600 > Game1.screenHeight)
                {
                    Game1.mH = Game1.screenHeight - 600;
                }
            }
            if (Game1.netDiag)
            {
                for (int num48 = 0; num48 < 4; num48++)
                {
                    string text = "";
                    int num49 = 20;
                    int num50 = 220;
                    if (num48 == 0)
                    {
                        text = "RX Msgs: " + string.Format("{0:0,0}", Game1.rxMsg);
                        num50 += num48 * 20;
                    }
                    else if (num48 == 1)
                    {
                        text = "RX Bytes: " + string.Format("{0:0,0}", Game1.rxData);
                        num50 += num48 * 20;
                    }
                    else if (num48 == 2)
                    {
                        text = "TX Msgs: " + string.Format("{0:0,0}", Game1.txMsg);
                        num50 += num48 * 20;
                    }
                    else if (num48 == 3)
                    {
                        text = "TX Bytes: " + string.Format("{0:0,0}", Game1.txData);
                        num50 += num48 * 20;
                    }
                    Game1.spriteBatch.DrawString(Game1.fontMouseText, text, new Vector2((float)num49, (float)num50), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                }
                for (int num51 = 0; num51 < Game1.maxMsg; num51++)
                {
                    float scale6 = 0.7f;
                    int num52 = 200;
                    int num53 = 120;
                    int num54 = num51 / 50;
                    num52 += num54 * 400;
                    num53 += (num51 - num54 * 50) * 13;
                    string text2 = num51 + ": ";
                    Game1.spriteBatch.DrawString(Game1.fontMouseText, text2, new Vector2((float)num52, (float)num53), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), scale6, SpriteEffects.None, 0f);
                    num52 += 30;
                    text2 = "rx:" + string.Format("{0:0,0}", Game1.rxMsgType[num51]);
                    Game1.spriteBatch.DrawString(Game1.fontMouseText, text2, new Vector2((float)num52, (float)num53), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), scale6, SpriteEffects.None, 0f);
                    num52 += 70;
                    text2 = string.Format("{0:0,0}", Game1.rxDataType[num51]);
                    Game1.spriteBatch.DrawString(Game1.fontMouseText, text2, new Vector2((float)num52, (float)num53), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), scale6, SpriteEffects.None, 0f);
                    num52 += 70;
                    text2 = num51 + ": ";
                    Game1.spriteBatch.DrawString(Game1.fontMouseText, text2, new Vector2((float)num52, (float)num53), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), scale6, SpriteEffects.None, 0f);
                    num52 += 30;
                    text2 = "tx:" + string.Format("{0:0,0}", Game1.txMsgType[num51]);
                    Game1.spriteBatch.DrawString(Game1.fontMouseText, text2, new Vector2((float)num52, (float)num53), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), scale6, SpriteEffects.None, 0f);
                    num52 += 70;
                    text2 = string.Format("{0:0,0}", Game1.txDataType[num51]);
                    Game1.spriteBatch.DrawString(Game1.fontMouseText, text2, new Vector2((float)num52, (float)num53), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), scale6, SpriteEffects.None, 0f);
                }
            }
            if (Game1.drawDiag)
            {
                for (int num55 = 0; num55 < 7; num55++)
                {
                    string text3 = "";
                    int num56 = 20;
                    int num57 = 220;
                    num57 += num55 * 16;
                    if (num55 == 0)
                    {
                        text3 = "Solid Tiles:";
                    }
                    if (num55 == 1)
                    {
                        text3 = "Misc. Tiles:";
                    }
                    if (num55 == 2)
                    {
                        text3 = "Walls Tiles:";
                    }
                    if (num55 == 3)
                    {
                        text3 = "Background Tiles:";
                    }
                    if (num55 == 4)
                    {
                        text3 = "Water Tiles:";
                    }
                    if (num55 == 5)
                    {
                        text3 = "Black Tiles:";
                    }
                    if (num55 == 6)
                    {
                        text3 = "Total Render:";
                    }
                    Game1.spriteBatch.DrawString(Game1.fontMouseText, text3, new Vector2((float)num56, (float)num57), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                }
                for (int num58 = 0; num58 < 7; num58++)
                {
                    int num59 = 180;
                    int num60 = 220;
                    num60 += num58 * 16;
                    float drawTotal;
                    if (num58 == 6)
                    {
                        drawTotal = TimeLogger.GetDrawTotal();
                    }
                    else
                    {
                        drawTotal = TimeLogger.GetDrawTime(num58);
                    }
                    string text4 = string.Format("{0:F2}ms", drawTotal);
                    Game1.spriteBatch.DrawString(Game1.fontMouseText, text4, new Vector2((float)num59, (float)num60), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                }
                for (int num61 = 0; num61 < 6; num61++)
                {
                    string text5 = "";
                    int num62 = 20;
                    int num63 = 346;
                    num63 += num61 * 16;
                    if (num61 == 0)
                    {
                        text5 = "Lighting Init:";
                    }
                    if (num61 == 1)
                    {
                        text5 = "Lighting Phase #1:";
                    }
                    if (num61 == 2)
                    {
                        text5 = "Lighting Phase #2:";
                    }
                    if (num61 == 3)
                    {
                        text5 = "Lighting Phase #3";
                    }
                    if (num61 == 4)
                    {
                        text5 = "Lighting Phase #4";
                    }
                    if (num61 == 5)
                    {
                        text5 = "Total Lighting:";
                    }
                    Game1.spriteBatch.DrawString(Game1.fontMouseText, text5, new Vector2((float)num62, (float)num63), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                }
                for (int num64 = 0; num64 < 6; num64++)
                {
                    int num65 = 180;
                    int num66 = 346;
                    num66 += num64 * 16;
                    float num67;
                    if (num64 == 5)
                    {
                        num67 = TimeLogger.GetLightingTotal();
                    }
                    else
                    {
                        num67 = TimeLogger.GetLightingTime(num64);
                    }
                    string text6 = string.Format("{0:F2}ms", num67);
                    Game1.spriteBatch.DrawString(Game1.fontMouseText, text6, new Vector2((float)num65, (float)num66), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                }
                int num68 = 5;
                for (int num69 = 0; num69 < num68; num69++)
                {
                    int num70 = 20;
                    int num71 = 456;
                    num71 += num69 * 16;
                    string text7 = "Render #" + num69 + ":";
                    Game1.spriteBatch.DrawString(Game1.fontMouseText, text7, new Vector2((float)num70, (float)num71), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                }
                for (int num72 = 0; num72 < num68; num72++)
                {
                    int num73 = 180;
                    int num74 = 456;
                    num74 += num72 * 16;
                    string text8 = string.Format("{0:F2}ms", TimeLogger.GetRenderTime(num72));
                    Game1.spriteBatch.DrawString(Game1.fontMouseText, text8, new Vector2((float)num73, (float)num74), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                }
                for (int num75 = 0; num75 < num68; num75++)
                {
                    int num76 = 230;
                    int num77 = 456;
                    num77 += num75 * 16;
                    num76 += 10;
                    string text9 = string.Format("{0:F2}ms", TimeLogger.GetRenderMax(num75));
                    Game1.spriteBatch.DrawString(Game1.fontMouseText, text9, new Vector2((float)num76, (float)num77), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                }
                int num78 = 20;
                int num79 = 456 + 16 * num68 + 16;
                string text10 = "Update:";
                Game1.spriteBatch.DrawString(Game1.fontMouseText, text10, new Vector2((float)num78, (float)num79), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                num78 = 180;
                text10 = string.Format("{0:F2}ms", Game1.upTimer);
                Game1.spriteBatch.DrawString(Game1.fontMouseText, text10, new Vector2((float)num78, (float)num79), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                num78 = 240;
                text10 = string.Format("{0:F2}ms", Game1.upTimerMax);
                Game1.spriteBatch.DrawString(Game1.fontMouseText, text10, new Vector2((float)num78, (float)num79), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
            }
            if (Game1.signBubble)
            {
                int num80 = (int)((float)Game1.signX - Game1.screenPosition.X);
                int num81 = (int)((float)Game1.signY - Game1.screenPosition.Y);
                if (Game1.player[Game1.myPlayer].gravDir == -1f)
                {
                    num81 = Game1.screenHeight - (int)((float)Game1.signY - Game1.screenPosition.Y) - 32;
                }
                SpriteEffects effects = SpriteEffects.None;
                if ((float)Game1.signX > Game1.player[Game1.myPlayer].position.X + (float)Game1.player[Game1.myPlayer].width)
                {
                    effects = SpriteEffects.FlipHorizontally;
                    num80 += -8 - Game1.chat2Texture.Width;
                }
                else
                {
                    num80 += 8;
                }
                num81 -= 22;
                Game1.spriteBatch.Draw(Game1.chat2Texture, new Vector2((float)num80, (float)num81), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.chat2Texture.Width, Game1.chat2Texture.Height)), new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor), 0f, default(Vector2), 1f, effects, 0f);
                Game1.signBubble = false;
            }
            for (int num82 = 0; num82 < 255; num82++)
            {
                if (Game1.player[num82].active && Game1.myPlayer != num82 && !Game1.player[num82].dead)
                {
                    new Microsoft.Xna.Framework.Rectangle((int)((double)Game1.player[num82].position.X + (double)Game1.player[num82].width * 0.5 - 16.0), (int)(Game1.player[num82].position.Y + (float)Game1.player[num82].height - 48f), 32, 48);
                    if (Game1.player[Game1.myPlayer].team > 0 && Game1.player[Game1.myPlayer].team == Game1.player[num82].team)
                    {
                        new Microsoft.Xna.Framework.Rectangle((int)Game1.screenPosition.X, (int)Game1.screenPosition.Y, Game1.screenWidth, Game1.screenHeight);
                        string text11 = Game1.player[num82].name;
                        if (Game1.player[num82].statLife < Game1.player[num82].statLifeMax2)
                        {
                            object obj = text11;
                            text11 = string.Concat(new object[]
                            {
                                obj,
                                ": ",
                                Game1.player[num82].statLife,
                                "/",
                                Game1.player[num82].statLifeMax2
                            });
                        }
                        Vector2 position = Game1.fontMouseText.MeasureString(text11);
                        float num83 = 0f;
                        if (Game1.player[num82].chatOverhead.timeLeft > 0)
                        {
                            num83 = -position.Y;
                        }
                        float num84 = 0f;
                        float num85 = (float)Game1.mouseTextColor / 255f;
                        Microsoft.Xna.Framework.Color color5 = new Microsoft.Xna.Framework.Color((int)((byte)((float)Game1.teamColor[Game1.player[num82].team].R * num85)), (int)((byte)((float)Game1.teamColor[Game1.player[num82].team].G * num85)), (int)((byte)((float)Game1.teamColor[Game1.player[num82].team].B * num85)), (int)Game1.mouseTextColor);
                        Vector2 vector4 = new Vector2((float)(Game1.screenWidth / 2) + Game1.screenPosition.X, (float)(Game1.screenHeight / 2) + Game1.screenPosition.Y);
                        float num86 = Game1.player[num82].position.X + (float)(Game1.player[num82].width / 2) - vector4.X;
                        float num87 = Game1.player[num82].position.Y - position.Y - 2f + num83 - vector4.Y;
                        float num88 = (float)Math.Sqrt((double)(num86 * num86 + num87 * num87));
                        int num89 = Game1.screenHeight;
                        if (Game1.screenHeight > Game1.screenWidth)
                        {
                            num89 = Game1.screenWidth;
                        }
                        num89 = num89 / 2 - 30;
                        if (num89 < 100)
                        {
                            num89 = 100;
                        }
                        if (num88 < (float)num89)
                        {
                            position.X = Game1.player[num82].position.X + (float)(Game1.player[num82].width / 2) - position.X / 2f - Game1.screenPosition.X;
                            position.Y = Game1.player[num82].position.Y - position.Y - 2f + num83 - Game1.screenPosition.Y;
                        }
                        else
                        {
                            num84 = num88;
                            num88 = (float)num89 / num88;
                            position.X = (float)(Game1.screenWidth / 2) + num86 * num88 - position.X / 2f;
                            position.Y = (float)(Game1.screenHeight / 2) + num87 * num88;
                        }
                        if (Game1.player[Game1.myPlayer].gravDir == -1f)
                        {
                            position.Y = (float)Game1.screenHeight - position.Y;
                        }
                        if (num84 > 0f)
                        {
                            string text12 = "(" + (int)(num84 / 16f * 2f) + " ft)";
                            Vector2 position2 = Game1.fontMouseText.MeasureString(text12);
                            position2.X = position.X + Game1.fontMouseText.MeasureString(text11).X / 2f - position2.X / 2f;
                            position2.Y = position.Y + Game1.fontMouseText.MeasureString(text11).Y / 2f - position2.Y / 2f - 20f;
                            Game1.spriteBatch.DrawString(Game1.fontMouseText, text12, new Vector2(position2.X - 2f, position2.Y), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            Game1.spriteBatch.DrawString(Game1.fontMouseText, text12, new Vector2(position2.X + 2f, position2.Y), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            Game1.spriteBatch.DrawString(Game1.fontMouseText, text12, new Vector2(position2.X, position2.Y - 2f), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            Game1.spriteBatch.DrawString(Game1.fontMouseText, text12, new Vector2(position2.X, position2.Y + 2f), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            Game1.spriteBatch.DrawString(Game1.fontMouseText, text12, position2, color5, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                        }
                        Game1.spriteBatch.DrawString(Game1.fontMouseText, text11, new Vector2(position.X - 2f, position.Y), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                        Game1.spriteBatch.DrawString(Game1.fontMouseText, text11, new Vector2(position.X + 2f, position.Y), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                        Game1.spriteBatch.DrawString(Game1.fontMouseText, text11, new Vector2(position.X, position.Y - 2f), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                        Game1.spriteBatch.DrawString(Game1.fontMouseText, text11, new Vector2(position.X, position.Y + 2f), Microsoft.Xna.Framework.Color.Black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                        Game1.spriteBatch.DrawString(Game1.fontMouseText, text11, position, color5, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                    }
                }
            }
            if (Game1.hairWindow)
            {
                this.DrawHairWindow();
            }
            if (Game1.clothesWindow)
            {
                this.DrawClothesWindow();
            }
            this.GUIChatDraw();
            Game1.inventoryBack = new Microsoft.Xna.Framework.Color(220, 220, 220, 220);
            Game1.invAlpha += Game1.invDir * 0.2f;
            if (Game1.invAlpha > 240f)
            {
                Game1.invAlpha = 240f;
                Game1.invDir = -1f;
            }
            if (Game1.invAlpha < 180f)
            {
                Game1.invAlpha = 180f;
                Game1.invDir = 1f;
            }
            Game1.inventoryBack = new Microsoft.Xna.Framework.Color((int)((byte)Game1.invAlpha), (int)((byte)Game1.invAlpha), (int)((byte)Game1.invAlpha), (int)((byte)Game1.invAlpha));
            Game1.mouseText = false;
            Game1.rare = 0;
            this.GUIBarsDraw();
            if (Game1.player[Game1.myPlayer].dead)
            {
                Game1.playerInventory = false;
            }
            if (!Game1.playerInventory)
            {
                Game1.player[Game1.myPlayer].chest = -1;
                if (Game1.craftGuide)
                {
                    Game1.craftGuide = false;
                }
                Recipe.FindRecipes();
                Game1.reforge = false;
            }
            Game1.hoverItemName = "";
            if (Game1.playerInventory)
            {
                if (Game1.ignoreErrors)
                {
                    try
                    {
                        this.DrawInventory();
                        goto IL_378D;
                    }
                    catch (Exception e3)
                    {
                        TimeLogger.DrawException(e3);
                        goto IL_378D;
                    }
                }
                this.DrawInventory();
            }
            else
            {
                Game1.recFastScroll = true;
                this.mouseNPC = -1;
                Game1.EquipPage = 0;
            }
        IL_378D:
            this.DrawInfoAccs();
            if (Game1.playerInventory || Game1.player[Game1.myPlayer].ghost)
            {
                string text13 = Lang.inter[62];
                Vector2 vector5 = Game1.fontMouseText.MeasureString("Settings");
                Vector2 vector6 = Game1.fontMouseText.MeasureString(Lang.inter[62]);
                Vector2 vector7 = Game1.fontDeathText.MeasureString(text13);
                int num90 = Game1.screenWidth - 110;
                int num91 = Game1.screenHeight - 20;
                if (Game1.screenHeight < 650 || (Game1.screenHeight < 900 && Game1.mapStyle == 1))
                {
                    num90 -= 140;
                }
                float num92 = vector5.X / vector6.X;
                if (Game1.mouseExit)
                {
                    if ((double)Game1.exitScale < 0.96)
                    {
                        Game1.exitScale += 0.02f;
                    }
                }
                else if ((double)Game1.exitScale > 0.8)
                {
                    Game1.exitScale -= 0.02f;
                }
                for (int num93 = 0; num93 < 5; num93++)
                {
                    int num94 = 0;
                    int num95 = 0;
                    Microsoft.Xna.Framework.Color color6 = Microsoft.Xna.Framework.Color.Black;
                    if (num93 == 0)
                    {
                        num94 = -2;
                    }
                    if (num93 == 1)
                    {
                        num94 = 2;
                    }
                    if (num93 == 2)
                    {
                        num95 = -2;
                    }
                    if (num93 == 3)
                    {
                        num95 = 2;
                    }
                    if (num93 == 4)
                    {
                        color6 = Microsoft.Xna.Framework.Color.White;
                    }
                    Game1.spriteBatch.DrawString(Game1.fontDeathText, text13, new Vector2((float)(num90 + num94), (float)(num91 + num95)), color6, 0f, new Vector2(vector7.X / 2f, vector7.Y / 2f), (Game1.exitScale - 0.2f) * num92, SpriteEffects.None, 0f);
                }
                if ((float)Game1.mouseX > (float)num90 - vector7.X / 2f && (float)Game1.mouseX < (float)num90 + vector7.X / 2f && (float)Game1.mouseY > (float)num91 - vector7.Y / 2f && (float)Game1.mouseY < (float)num91 + vector7.Y / 2f - 10f)
                {
                    if (!Game1.mouseExit)
                    {
                        Game1.PlaySound(12, -1, -1, 1);
                    }
                    Game1.mouseExit = true;
                    Game1.player[Game1.myPlayer].mouseInterface = true;
                    if (Game1.mouseLeftRelease && Game1.mouseLeft)
                    {
                        Game1.mouseExit = false;
                        Game1.exitScale = 0.8f;
                        IngameOptions.Open();
                    }
                }
                else
                {
                    Game1.mouseExit = false;
                }
            }
            this.GUIHotbarDraw();
            if (Game1.mouseItem.stack <= 0)
            {
                Game1.mouseItem.itemId = 0;
            }
            if (Game1.hoverItemName != null && Game1.hoverItemName != "" && Game1.mouseItem.itemId == 0)
            {
                Game1.player[Game1.myPlayer].showItemIcon = false;
                this.MouseText(Game1.hoverItemName, Game1.rare, 0);
                Game1.mouseText = true;
            }
            if (Game1.ignoreErrors)
            {
                try
                {
                    this.DrawPlayerChat();
                    goto IL_3A7F;
                }
                catch (Exception e4)
                {
                    TimeLogger.DrawException(e4);
                    goto IL_3A7F;
                }
            }
            this.DrawPlayerChat();
        IL_3A7F:
            if (Game1.player[Game1.myPlayer].dead)
            {
                string text14 = Lang.inter[38];
                Game1.spriteBatch.DrawString(Game1.fontDeathText, text14, new Vector2((float)(Game1.screenWidth / 2) - Game1.fontDeathText.MeasureString(text14).X / 2f, (float)(Game1.screenHeight / 2 - 20)), Game1.player[Game1.myPlayer].GetDeathAlpha(Microsoft.Xna.Framework.Color.Transparent), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                if (Game1.player[Game1.myPlayer].lostCoins > 0)
                {
                    string text15 = "dropped " + Game1.player[Game1.myPlayer].lostCoinString;
                    Game1.spriteBatch.DrawString(Game1.fontMouseText, text15, new Vector2((float)(Game1.screenWidth / 2) - Game1.fontMouseText.MeasureString(text15).X / 2f, (float)(Game1.screenHeight / 2 + 30)), Game1.player[Game1.myPlayer].GetDeathAlpha(Microsoft.Xna.Framework.Color.Transparent), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                }
            }
            if (Game1.cursorOverride != -1)
            {
                Microsoft.Xna.Framework.Color color7 = new Microsoft.Xna.Framework.Color((int)((float)Game1.cursorColor.R * 0.2f), (int)((float)Game1.cursorColor.G * 0.2f), (int)((float)Game1.cursorColor.B * 0.2f), (int)((float)Game1.cursorColor.A * 0.5f));
                Microsoft.Xna.Framework.Color white = Game1.cursorColor;
                bool flag2 = true;
                bool flag3 = true;
                float rotation = 0f;
                Vector2 value17 = default(Vector2);
                float num96 = 1f;
                if (Game1.cursorOverride == 2)
                {
                    flag2 = false;
                    white = Microsoft.Xna.Framework.Color.White;
                    num96 = 0.7f;
                    value17 = new Vector2(0.1f);
                }
                switch (Game1.cursorOverride)
                {
                    case 2:
                        flag2 = false;
                        white = Microsoft.Xna.Framework.Color.White;
                        num96 = 0.7f;
                        value17 = new Vector2(0.1f);
                        break;
                    case 3:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                        flag2 = false;
                        white = Microsoft.Xna.Framework.Color.White;
                        break;
                }
                if (flag2)
                {
                    Game1.spriteBatch.Draw(Game1.cursorTextures[Game1.cursorOverride], new Vector2((float)(Game1.mouseX + 1), (float)(Game1.mouseY + 1)), null, color7, rotation, value17 * Game1.cursorTextures[Game1.cursorOverride].Size(), Game1.cursorScale * 1.1f * num96, SpriteEffects.None, 0f);
                }
                if (flag3)
                {
                    Game1.spriteBatch.Draw(Game1.cursorTextures[Game1.cursorOverride], new Vector2((float)Game1.mouseX, (float)Game1.mouseY), null, white, rotation, value17 * Game1.cursorTextures[Game1.cursorOverride].Size(), Game1.cursorScale * num96, SpriteEffects.None, 0f);
                }
            }
            else if (Game1.smartDigEnabled)
            {
                Game1.DrawThickCursor(true);
                Game1.spriteBatch.Draw(Game1.cursorTextures[1], new Vector2((float)(Game1.mouseX + 1), (float)(Game1.mouseY + 1)), null, new Microsoft.Xna.Framework.Color((int)((float)Game1.cursorColor.R * 0.2f), (int)((float)Game1.cursorColor.G * 0.2f), (int)((float)Game1.cursorColor.B * 0.2f), (int)((float)Game1.cursorColor.A * 0.5f)), 0f, default(Vector2), Game1.cursorScale * 1.1f, SpriteEffects.None, 0f);
                Game1.spriteBatch.Draw(Game1.cursorTextures[1], new Vector2((float)Game1.mouseX, (float)Game1.mouseY), null, Game1.cursorColor, 0f, default(Vector2), Game1.cursorScale, SpriteEffects.None, 0f);
            }
            else
            {
                Game1.DrawThickCursor(false);
                Game1.spriteBatch.Draw(Game1.cursorTextures[0], new Vector2((float)(Game1.mouseX + 1), (float)(Game1.mouseY + 1)), null, new Microsoft.Xna.Framework.Color((int)((float)Game1.cursorColor.R * 0.2f), (int)((float)Game1.cursorColor.G * 0.2f), (int)((float)Game1.cursorColor.B * 0.2f), (int)((float)Game1.cursorColor.A * 0.5f)), 0f, default(Vector2), Game1.cursorScale * 1.1f, SpriteEffects.None, 0f);
                Game1.spriteBatch.Draw(Game1.cursorTextures[0], new Vector2((float)Game1.mouseX, (float)Game1.mouseY), null, Game1.cursorColor, 0f, default(Vector2), Game1.cursorScale, SpriteEffects.None, 0f);
            }
            if (Game1.mouseItem.itemId > 0 && Game1.mouseItem.stack > 0)
            {
                this.mouseNPC = -1;
                Game1.player[Game1.myPlayer].showItemIcon = false;
                Game1.player[Game1.myPlayer].showItemIcon2 = 0;
                Game1.mouseText = true;
                float num97 = Game1.inventoryScale;
                Game1.inventoryScale = Game1.cursorScale;
                ItemSlot.Draw(Game1.spriteBatch, ref Game1.mouseItem, 21, new Vector2((float)Game1.mouseX, (float)Game1.mouseY), default(Microsoft.Xna.Framework.Color));
                Game1.inventoryScale = num97;
            }
            else if (this.mouseNPC > -1)
            {
                Game1.player[Game1.myPlayer].mouseInterface = true;
                Game1.mouseText = false;
                float num98 = 1f;
                num98 *= Game1.cursorScale;
                Game1.spriteBatch.Draw(Game1.npcHeadTexture[this.mouseNPC], new Vector2((float)Game1.mouseX + 26f * num98 - (float)Game1.npcHeadTexture[this.mouseNPC].Width * 0.5f * num98, (float)Game1.mouseY + 26f * num98 - (float)Game1.npcHeadTexture[this.mouseNPC].Height * 0.5f * num98), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.npcHeadTexture[this.mouseNPC].Width, Game1.npcHeadTexture[this.mouseNPC].Height)), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), num98, SpriteEffects.None, 0f);
                if (Game1.mouseRight && Game1.mouseRightRelease)
                {
                    Game1.PlaySound(12, -1, -1, 1);
                    this.mouseNPC = -1;
                }
                if (Game1.mouseLeft && Game1.mouseLeftRelease)
                {
                    if (this.mouseNPC == 0)
                    {
                        int x = (int)(((float)Game1.mouseX + Game1.screenPosition.X) / 16f);
                        int y = (int)(((float)Game1.mouseY + Game1.screenPosition.Y) / 16f);
                        if (Game1.player[Game1.myPlayer].gravDir == -1f)
                        {
                            y = (int)((Game1.screenPosition.Y + (float)Game1.screenHeight - (float)Game1.mouseY) / 16f);
                        }
                        int n2 = -1;
                        if (WorldGen.MoveNPC(x, y, n2))
                        {
                            Game1.NewText(Lang.inter[39], 255, 240, 20, false);
                        }
                    }
                    else
                    {
                        int num99 = 0;
                        for (int num100 = 0; num100 < 200; num100++)
                        {
                            if (Game1.npc[num100].active && Game1.npc[num100].type == NPC.NumToType(this.mouseNPC))
                            {
                                num99 = num100;
                                break;
                            }
                        }
                        if (num99 >= 0)
                        {
                            int x2 = (int)(((float)Game1.mouseX + Game1.screenPosition.X) / 16f);
                            int y2 = (int)(((float)Game1.mouseY + Game1.screenPosition.Y) / 16f);
                            if (WorldGen.MoveNPC(x2, y2, num99))
                            {
                                this.mouseNPC = -1;
                                WorldGen.moveRoom(x2, y2, num99);
                                Game1.PlaySound(12, -1, -1, 1);
                            }
                        }
                        else
                        {
                            this.mouseNPC = 0;
                        }
                    }
                }
            }
            if (Game1.ignoreErrors)
            {
                try
                {
                    this.DrawMouseOver();
                    goto IL_4299;
                }
                catch (Exception e5)
                {
                    TimeLogger.DrawException(e5);
                    goto IL_4299;
                }
            }
            this.DrawMouseOver();
        IL_4299:
            if (Game1.mouseRight)
            {
                Game1.npcChatRelease = false;
            }
            else
            {
                Game1.npcChatRelease = true;
            }
            if (Game1.player[Game1.myPlayer].showItemIcon && (Game1.player[Game1.myPlayer].inventory[Game1.player[Game1.myPlayer].selectedItem].itemId > 0 || Game1.player[Game1.myPlayer].showItemIcon2 != 0))
            {
                int num101 = Game1.player[Game1.myPlayer].inventory[Game1.player[Game1.myPlayer].selectedItem].itemId;
                Microsoft.Xna.Framework.Color color8 = Game1.player[Game1.myPlayer].inventory[Game1.player[Game1.myPlayer].selectedItem].GetAlpha(Microsoft.Xna.Framework.Color.White);
                Microsoft.Xna.Framework.Color color9 = Game1.player[Game1.myPlayer].inventory[Game1.player[Game1.myPlayer].selectedItem].GetColor(Microsoft.Xna.Framework.Color.White);
                if (Game1.player[Game1.myPlayer].showItemIcon2 != 0)
                {
                    num101 = Game1.player[Game1.myPlayer].showItemIcon2;
                    color8 = Microsoft.Xna.Framework.Color.White;
                    color9 = default(Microsoft.Xna.Framework.Color);
                }
                if (Game1.player[Game1.myPlayer].showItemIcon2 == 269)
                {
                    color8 = Game1.player[Game1.myPlayer].shirtColor;
                }
                float scale7 = Game1.cursorScale;
                ItemSlot.GetItemLight(ref color8, num101, false);
                SpriteEffects effects2 = SpriteEffects.None;
                if ((Game1.player[Game1.myPlayer].showItemIcon2 == 928 || Game1.player[Game1.myPlayer].showItemIcon2 == 1337 || Game1.player[Game1.myPlayer].showItemIcon2 == 3369) && Game1.player[Game1.myPlayer].showItemIconR)
                {
                    effects2 = SpriteEffects.FlipHorizontally;
                }
                if (num101 > 0)
                {
                    Game1.spriteBatch.Draw(Game1.itemTexture[num101], new Vector2((float)(Game1.mouseX + 10), (float)(Game1.mouseY + 10)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.itemTexture[num101].Width, Game1.itemTexture[num101].Height)), color8, 0f, default(Vector2), scale7, effects2, 0f);
                }
                if (Game1.player[Game1.myPlayer].showItemIconText != "")
                {
                    this.MouseText(Game1.player[Game1.myPlayer].showItemIconText, 0, 0);
                }
                if (Game1.player[Game1.myPlayer].showItemIcon2 == 0 && Game1.player[Game1.myPlayer].inventory[Game1.player[Game1.myPlayer].selectedItem].color != default(Microsoft.Xna.Framework.Color))
                {
                    Game1.spriteBatch.Draw(Game1.itemTexture[Game1.player[Game1.myPlayer].inventory[Game1.player[Game1.myPlayer].selectedItem].itemId], new Vector2((float)(Game1.mouseX + 10), (float)(Game1.mouseY + 10)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.itemTexture[Game1.player[Game1.myPlayer].inventory[Game1.player[Game1.myPlayer].selectedItem].itemId].Width, Game1.itemTexture[Game1.player[Game1.myPlayer].inventory[Game1.player[Game1.myPlayer].selectedItem].itemId].Height)), color9, 0f, default(Vector2), scale7, SpriteEffects.None, 0f);
                }
            }
            Game1.player[Game1.myPlayer].showItemIcon = false;
            Game1.player[Game1.myPlayer].showItemIcon2 = 0;
            Game1.player[Game1.myPlayer].showItemIconText = string.Empty;
            Game1.cursorOverride = -1;
        }
        private void GUIHotbarDraw()
        {
            if (Game1.ignoreErrors)
            {
                try
                {
                    this.GUIHotbarDrawInner();
                    return;
                }
                catch (Exception e)
                {
                    TimeLogger.DrawException(e);
                    return;
                }
            }
            this.GUIHotbarDrawInner();
        }
        private void GUIChatDraw()
        {
            if (Game1.ignoreErrors)
            {
                try
                {
                    if ((Game1.npcChatText != "" || Game1.player[Game1.myPlayer].sign != -1) && !Game1.editChest)
                    {
                        this.GUIChatDrawInner();
                    }
                    return;
                }
                catch (Exception e)
                {
                    TimeLogger.DrawException(e);
                    return;
                }
            }
            if ((Game1.npcChatText != "" || Game1.player[Game1.myPlayer].sign != -1) && !Game1.editChest)
            {
                this.GUIChatDrawInner();
            }
        }
        private void DrawInfoAccs()
        {
            if ((Game1.npcChatText == null || Game1.npcChatText == "") && Game1.player[Game1.myPlayer].sign < 0)
            {
                bool flag = false;
                bool flag2 = false;
                bool flag3 = false;
                bool flag4 = false;
                bool flag5 = false;
                bool flag6 = false;
                bool flag7 = false;
                bool flag8 = false;
                bool flag9 = false;
                bool flag10 = false;
                bool flag11 = false;
                bool flag12 = false;
                int num = -1;
                int num2 = -10;
                int num3 = 0;
                string text = "";
                for (int i = 0; i < 12; i++)
                {
                    string text2 = "";
                    string text3 = "";
                    if (Game1.player[Game1.myPlayer].accWatch > 0 && !flag && (!Game1.player[Game1.myPlayer].hideInfo[0] || Game1.playerInventory))
                    {
                        num = 0;
                        text3 = Lang.inter[95];
                        string text4 = "AM";
                        double num4 = Game1.time;
                        if (!Game1.dayTime)
                        {
                            num4 += 54000.0;
                        }
                        num4 = num4 / 86400.0 * 24.0;
                        double num5 = 7.5;
                        num4 = num4 - num5 - 12.0;
                        if (num4 < 0.0)
                        {
                            num4 += 24.0;
                        }
                        if (num4 >= 12.0)
                        {
                            text4 = "PM";
                        }
                        int num6 = (int)num4;
                        double num7 = num4 - (double)num6;
                        num7 = (double)((int)(num7 * 60.0));
                        string text5 = string.Concat(num7);
                        if (num7 < 10.0)
                        {
                            text5 = "0" + text5;
                        }
                        if (num6 > 12)
                        {
                            num6 -= 12;
                        }
                        if (num6 == 0)
                        {
                            num6 = 12;
                        }
                        if (Game1.player[Game1.myPlayer].accWatch == 1)
                        {
                            text5 = "00";
                        }
                        else if (Game1.player[Game1.myPlayer].accWatch == 2)
                        {
                            if (num7 < 30.0)
                            {
                                text5 = "00";
                            }
                            else
                            {
                                text5 = "30";
                            }
                        }
                        text2 = string.Concat(new object[]
                        {
                            num6,
                            ":",
                            text5,
                            " ",
                            text4
                        });
                        flag = true;
                    }
                    else if (Game1.player[Game1.myPlayer].accWeatherRadio && !flag5 && (!Game1.player[Game1.myPlayer].hideInfo[1] || Game1.playerInventory))
                    {
                        num = 1;
                        text3 = Lang.inter[96];
                        string text6;
                        if ((double)Game1.maxRaining > 0.6)
                        {
                            text6 = "Heavy Rain";
                        }
                        else if ((double)Game1.maxRaining >= 0.2)
                        {
                            text6 = "Rain";
                        }
                        else if (Game1.maxRaining > 0f)
                        {
                            text6 = "Light Rain";
                        }
                        else if (Game1.cloudBGActive > 0f)
                        {
                            text6 = "Overcast";
                        }
                        else if (Game1.numClouds > 120)
                        {
                            text6 = "Mostly Cloudy";
                        }
                        else if (Game1.numClouds > 80)
                        {
                            text6 = "Cloudy";
                        }
                        else if (Game1.numClouds > 20)
                        {
                            text6 = "Partly Cloudy";
                        }
                        else
                        {
                            text6 = "Clear";
                        }
                        text2 = text6;
                        int num8 = (int)(Game1.windSpeed * 100f);
                        if (num8 < 0)
                        {
                            object obj = text2;
                            text2 = string.Concat(new object[]
                            {
                                obj,
                                " (",
                                Math.Abs(num8),
                                " mph W)"
                            });
                        }
                        else if (num8 > 0)
                        {
                            object obj = text2;
                            text2 = string.Concat(new object[]
                            {
                                obj,
                                " (",
                                num8,
                                " mph E)"
                            });
                        }
                        flag5 = true;
                    }
                    else if (Game1.player[Game1.myPlayer].accCalendar && !flag8 && (!Game1.player[Game1.myPlayer].hideInfo[7] || Game1.playerInventory))
                    {
                        if (Game1.bloodMoon && !Game1.dayTime)
                        {
                            num = 8;
                        }
                        else if (Game1.eclipse && Game1.dayTime)
                        {
                            num = 8;
                        }
                        else
                        {
                            num = 7;
                        }
                        text3 = Lang.inter[102];
                        if (Game1.moonPhase == 0)
                        {
                            text2 = "Full Moon";
                        }
                        else if (Game1.moonPhase == 1)
                        {
                            text2 = "Waning Gibbous";
                        }
                        else if (Game1.moonPhase == 2)
                        {
                            text2 = "Third Quarter";
                        }
                        else if (Game1.moonPhase == 3)
                        {
                            text2 = "Waning Crescent";
                        }
                        else if (Game1.moonPhase == 4)
                        {
                            text2 = "New Moon";
                        }
                        else if (Game1.moonPhase == 5)
                        {
                            text2 = "Waxing Crescent";
                        }
                        else if (Game1.moonPhase == 6)
                        {
                            text2 = "First Quarter";
                        }
                        else if (Game1.moonPhase == 7)
                        {
                            text2 = "Waxing Gibbous";
                        }
                        flag8 = true;
                    }
                    else if (Game1.player[Game1.myPlayer].accFishFinder && !flag4 && (!Game1.player[Game1.myPlayer].hideInfo[2] || Game1.playerInventory))
                    {
                        bool flag13 = false;
                        num = 2;
                        text3 = Lang.inter[97];
                        for (int j = 0; j < 1000; j++)
                        {
                            if (Game1.projectile[j].active && Game1.projectile[j].owner == Game1.myPlayer && Game1.projectile[j].bobber)
                            {
                                flag13 = true;
                                break;
                            }
                        }
                        if (flag13)
                        {
                            text2 = Game1.player[Game1.myPlayer].displayedFishingInfo;
                        }
                        else
                        {
                            int num9 = Game1.player[Game1.myPlayer].FishingLevel();
                            if (num9 == -1)
                            {
                                text2 = "Warning!";
                            }
                            else
                            {
                                text2 = (Game1.player[Game1.myPlayer].displayedFishingInfo = num9 + " Fishing Power");
                            }
                        }
                        flag4 = true;
                    }
                    else if (Game1.player[Game1.myPlayer].accOreFinder && !flag10 && (!Game1.player[Game1.myPlayer].hideInfo[10] || Game1.playerInventory))
                    {
                        num = 10;
                        text3 = Lang.inter[104];
                        if (Game1.player[Game1.myPlayer].bestOre <= 0)
                        {
                            text2 = "No treasure nearby";
                        }
                        else
                        {
                            text2 = Lang.mapLegend[MapHelper.TileToLookup(Game1.player[Game1.myPlayer].bestOre, 0)] + " detected nearby!";
                        }
                        flag10 = true;
                    }
                    else if (Game1.player[Game1.myPlayer].accCritterGuide && !flag11 && (!Game1.player[Game1.myPlayer].hideInfo[11] || Game1.playerInventory))
                    {
                        flag11 = true;
                        num = 11;
                        text3 = Lang.inter[105];
                        int num10 = 1300;
                        int num11 = 0;
                        int num12 = -1;
                        if (Game1.player[Game1.myPlayer].accCritterGuideCounter <= 0)
                        {
                            Game1.player[Game1.myPlayer].accCritterGuideCounter = 15;
                            for (int k = 0; k < 200; k++)
                            {
                                if (Game1.npc[k].active && Game1.npc[k].rarity > num11)
                                {
                                    num11 = Game1.npc[k].rarity;
                                    if ((Game1.npc[k].Center - Game1.player[Game1.myPlayer].Center).Length() < (float)num10)
                                    {
                                        num12 = k;
                                    }
                                }
                            }
                            Game1.player[Game1.myPlayer].accCritterGuideNumber = (byte)num12;
                        }
                        else
                        {
                            Player expr_74D = Game1.player[Game1.myPlayer];
                            expr_74D.accCritterGuideCounter -= 1;
                            num12 = (int)Game1.player[Game1.myPlayer].accCritterGuideNumber;
                        }
                        if (num12 >= 0 && num12 < 200 && Game1.npc[num12].active && Game1.npc[num12].rarity > 0)
                        {
                            text2 = Game1.npc[num12].displayName;
                        }
                        else
                        {
                            text2 = "No rare creatures nearby";
                        }
                    }
                    else if (Game1.player[Game1.myPlayer].accThirdEye && !flag6 && (!Game1.player[Game1.myPlayer].hideInfo[5] || Game1.playerInventory))
                    {
                        flag6 = true;
                        num = 5;
                        text3 = Lang.inter[100];
                        int num13 = 2000;
                        if (Game1.player[Game1.myPlayer].accThirdEyeCounter == 0)
                        {
                            Game1.player[Game1.myPlayer].accThirdEyeNumber = 0;
                            Game1.player[Game1.myPlayer].accThirdEyeCounter = 15;
                            for (int l = 0; l < 200; l++)
                            {
                                if (Game1.npc[l].active && !Game1.npc[l].friendly && Game1.npc[l].damage > 0 && Game1.npc[l].lifeMax > 5 && !Game1.npc[l].dontCountMe)
                                {
                                    int arg_8AB_0 = Game1.npc[l].type;
                                    if ((Game1.npc[l].Center - Game1.player[Game1.myPlayer].Center).Length() < (float)num13)
                                    {
                                        Player expr_8E7 = Game1.player[Game1.myPlayer];
                                        expr_8E7.accThirdEyeNumber += 1;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Player expr_914 = Game1.player[Game1.myPlayer];
                            expr_914.accThirdEyeCounter -= 1;
                        }
                        if (Game1.player[Game1.myPlayer].accThirdEyeNumber == 0)
                        {
                            text2 = "No enemies nearby";
                        }
                        else if (Game1.player[Game1.myPlayer].accThirdEyeNumber == 1)
                        {
                            text2 = "1 enemy nearby!";
                        }
                        else
                        {
                            text2 = Game1.player[Game1.myPlayer].accThirdEyeNumber + " enemies nearby!";
                        }
                    }
                    else if (Game1.player[Game1.myPlayer].accJarOfSouls && !flag7 && (!Game1.player[Game1.myPlayer].hideInfo[6] || Game1.playerInventory))
                    {
                        flag7 = true;
                        num = 6;
                        text3 = Lang.inter[101];
                        int lastCreatureHit = Game1.player[Game1.myPlayer].lastCreatureHit;
                        if (lastCreatureHit <= 0)
                        {
                            text2 = "Kill count unavailable";
                        }
                        else
                        {
                            text2 = Lang.npcName(Item.BannerToNPC(lastCreatureHit), false) + ": " + NPC.killCount[lastCreatureHit];
                        }
                    }
                    else if (Game1.player[Game1.myPlayer].accDreamCatcher && !flag12 && (!Game1.player[Game1.myPlayer].hideInfo[12] || Game1.playerInventory))
                    {
                        num = 12;
                        text3 = Lang.inter[106];
                        Game1.player[Game1.myPlayer].checkDPSTime();
                        int dPS = Game1.player[Game1.myPlayer].getDPS();
                        flag12 = true;
                        if (dPS == 0)
                        {
                            text2 = "N/A";
                        }
                        else
                        {
                            text2 = Game1.player[Game1.myPlayer].getDPS() + " damage per second";
                        }
                    }
                    else if (Game1.player[Game1.myPlayer].accStopwatch && !flag9 && (!Game1.player[Game1.myPlayer].hideInfo[9] || Game1.playerInventory))
                    {
                        num = 9;
                        text3 = Lang.inter[103];
                        int num14 = (int)(1f + Game1.player[Game1.myPlayer].velocity.Length() * 6f);
                        if (num14 > Game1.player[Game1.myPlayer].speedSlice.Length)
                        {
                            num14 = Game1.player[Game1.myPlayer].speedSlice.Length;
                        }
                        float num15 = 0f;
                        for (int m = num14 - 1; m > 0; m--)
                        {
                            Game1.player[Game1.myPlayer].speedSlice[m] = Game1.player[Game1.myPlayer].speedSlice[m - 1];
                        }
                        Game1.player[Game1.myPlayer].speedSlice[0] = Game1.player[Game1.myPlayer].velocity.Length();
                        for (int n = 0; n < Game1.player[Game1.myPlayer].speedSlice.Length; n++)
                        {
                            if (n < num14)
                            {
                                num15 += Game1.player[Game1.myPlayer].speedSlice[n];
                            }
                            else
                            {
                                Game1.player[Game1.myPlayer].speedSlice[n] = num15 / (float)num14;
                            }
                        }
                        num15 /= (float)num14;
                        int num16 = 42240;
                        int num17 = 216000;
                        float num18 = num15 * (float)num17 / (float)num16;
                        text2 = Math.Round((double)num18) + " mph";
                        flag9 = true;
                    }
                    else if (Game1.player[Game1.myPlayer].accCompass > 0 && !flag3 && (!Game1.player[Game1.myPlayer].hideInfo[3] || Game1.playerInventory))
                    {
                        num = 3;
                        text3 = Lang.inter[98];
                        int num19 = (int)((Game1.player[Game1.myPlayer].position.X + (float)(Game1.player[Game1.myPlayer].width / 2)) * 2f / 16f - (float)Game1.maxTilesX);
                        if (num19 > 0)
                        {
                            text2 = num19 + "' East";
                        }
                        else if (num19 < 0)
                        {
                            text2 = -num19 + "' West";
                        }
                        else
                        {
                            text2 = "Center";
                        }
                        flag3 = true;
                    }
                    else if (Game1.player[Game1.myPlayer].accDepthMeter > 0 && !flag2 && (!Game1.player[Game1.myPlayer].hideInfo[4] || Game1.playerInventory))
                    {
                        num = 4;
                        text3 = Lang.inter[99];
                        int num20 = (int)((double)((Game1.player[Game1.myPlayer].position.Y + (float)Game1.player[Game1.myPlayer].height) * 2f / 16f) - Game1.worldSurface * 2.0);
                        float num21 = (float)(Game1.maxTilesX / 4200);
                        num21 *= num21;
                        int num22 = 1080;
                        float num23 = (float)((double)((Game1.screenPosition.Y + (float)(Game1.screenHeight / 2)) / 16f - (65f + 10f * num21)) / (Game1.worldSurface / 5.0));
                        string str;
                        if (Game1.player[Game1.myPlayer].position.Y > (float)((Game1.maxTilesY - 204) * 16))
                        {
                            str = "Underworld";
                        }
                        else if ((double)Game1.player[Game1.myPlayer].position.Y > Game1.rockLayer * 16.0 + (double)(num22 / 2) + 16.0)
                        {
                            str = "Caverns";
                        }
                        else if (num20 > 0)
                        {
                            str = "Underground";
                        }
                        else if (num23 >= 1f)
                        {
                            str = "Surface";
                        }
                        else
                        {
                            str = "Space";
                        }
                        if (num20 < 0)
                        {
                            num20 *= -1;
                        }
                        string str2;
                        if (num20 == 0)
                        {
                            str2 = "Level";
                        }
                        else
                        {
                            str2 = num20 + "'";
                        }
                        text2 = str2 + " " + str;
                        flag2 = true;
                    }
                    if (text2 != "")
                    {
                        int num24;
                        int num25;
                        if (!Game1.playerInventory)
                        {
                            num24 = Game1.screenWidth - 280;
                            num25 = -32;
                            if (Game1.mapStyle == 1 && Game1.mapEnabled)
                            {
                                num25 += 254;
                            }
                        }
                        else
                        {
                            bool flag14 = true;
                            if (Game1.mapStyle == 1 && Game1.mapEnabled && Game1.screenHeight < 820)
                            {
                                flag14 = false;
                            }
                            if (Game1.mapStyle != 1 && Game1.screenWidth < 855)
                            {
                                flag14 = false;
                            }
                            if (flag14)
                            {
                                num24 = Game1.screenWidth - 280 + 20 * num3 - 10;
                                num25 = 94;
                                if (Game1.mapStyle == 1 && Game1.mapEnabled)
                                {
                                    num25 += 254;
                                }
                            }
                            else
                            {
                                int num26 = (int)(52f * Game1.inventoryScale);
                                num24 = 697 - num26 * 4 + Game1.screenWidth - 800 + 20 * (num3 % 2);
                                num25 = 114 + Game1.mH + num26 * 7 + num26 / 2 + 20 * (num3 / 2) + 8 * (num3 / 4) - 20;
                                if (Game1.EquipPage == 2)
                                {
                                    num24 += num26 + num26 / 2;
                                    num25 -= num26;
                                }
                            }
                        }
                        if (num >= 0)
                        {
                            num3++;
                            int num27 = 22;
                            if (Game1.screenHeight < 650)
                            {
                                num27 = 20;
                            }
                            Vector2 position = new Vector2((float)num24, (float)(num25 + 74 + num27 * i + 52));
                            int num28 = num;
                            if (num28 == 8)
                            {
                                num28 = 7;
                            }
                            Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
                            if (Game1.playerInventory)
                            {
                                position = new Vector2((float)num24, (float)num25);
                                if ((float)Game1.mouseX >= position.X && (float)Game1.mouseY >= position.Y && (float)Game1.mouseX <= position.X + (float)this.infoIconTexture[num].Width && (float)Game1.mouseY <= position.Y + (float)this.infoIconTexture[num].Height)
                                {
                                    Game1.player[Game1.myPlayer].mouseInterface = true;
                                    if (Game1.mouseLeft && Game1.mouseLeftRelease)
                                    {
                                        Game1.PlaySound(12, -1, -1, 1);
                                        Game1.mouseLeftRelease = false;
                                        Game1.player[Game1.myPlayer].hideInfo[num28] = !Game1.player[Game1.myPlayer].hideInfo[num28];
                                    }
                                    if (!Game1.mouseText)
                                    {
                                        text = text3;
                                        Game1.mouseText = true;
                                    }
                                }
                                if (Game1.player[Game1.myPlayer].hideInfo[num28])
                                {
                                    white = new Microsoft.Xna.Framework.Color(80, 80, 80, 70);
                                }
                            }
                            else if ((float)Game1.mouseX >= position.X && (float)Game1.mouseY >= position.Y && (float)Game1.mouseX <= position.X + (float)this.infoIconTexture[num].Width && (float)Game1.mouseY <= position.Y + (float)this.infoIconTexture[num].Height && !Game1.mouseText && Lang.lang <= 1)
                            {
                                num2 = i;
                                text = text3;
                                Game1.mouseText = true;
                            }
                            Game1.spriteBatch.Draw(this.infoIconTexture[num], position, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, this.infoIconTexture[num].Width, this.infoIconTexture[num].Height)), white, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            num24 += 20;
                        }
                        if (!Game1.playerInventory)
                        {
                            for (int num29 = 0; num29 < 5; num29++)
                            {
                                int num30 = 0;
                                int num31 = 0;
                                Microsoft.Xna.Framework.Color black = Microsoft.Xna.Framework.Color.Black;
                                if (num29 == 0)
                                {
                                    num30 = -2;
                                }
                                if (num29 == 1)
                                {
                                    num30 = 2;
                                }
                                if (num29 == 2)
                                {
                                    num31 = -2;
                                }
                                if (num29 == 3)
                                {
                                    num31 = 2;
                                }
                                if (num29 == 4)
                                {
                                    black = new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor);
                                }
                                if (i > num2 && i < num2 + 2)
                                {
                                    black = new Microsoft.Xna.Framework.Color((int)(black.R / 3), (int)(black.G / 3), (int)(black.B / 3), (int)(black.A / 3));
                                }
                                int num32 = 22;
                                if (Game1.screenHeight < 650)
                                {
                                    num32 = 20;
                                }
                                Game1.spriteBatch.DrawString(Game1.fontMouseText, text2, new Vector2((float)(num24 + num30), (float)(num25 + 74 + num32 * i + num31 + 48)), black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            }
                        }
                    }
                }
                if (!string.IsNullOrEmpty(text))
                {
                    if (Game1.playerInventory)
                    {
                        Game1.player[Game1.myPlayer].mouseInterface = true;
                    }
                    this.MouseText(text, 0, 0);
                }
            }
        }
        public static void CheckInvasionProgressDisplay()
        {
            if (Game1.invasionProgressMode != 2)
            {
                Game1.invasionProgressNearInvasion = false;
                return;
            }
            bool flag = false;
            Player player = Game1.player[Game1.myPlayer];
            Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)Game1.screenPosition.X, (int)Game1.screenPosition.Y, Game1.screenWidth, Game1.screenHeight);
            int num = 5000;
            int num2 = 0;
            for (int i = 0; i < 200; i++)
            {
                if (Game1.npc[i].active)
                {
                    num2 = 0;
                    int type = Game1.npc[i].type;
                    if (type <= 145)
                    {
                        switch (type)
                        {
                            case 26:
                            case 27:
                            case 28:
                            case 29:
                                break;
                            default:
                                if (type != 111)
                                {
                                    switch (type)
                                    {
                                        case 143:
                                        case 144:
                                        case 145:
                                            num2 = 4;
                                            goto IL_227;
                                        default:
                                            goto IL_227;
                                    }
                                }
                                break;
                        }
                        num2 = 3;
                    }
                    else
                    {
                        if (type <= 350)
                        {
                            switch (type)
                            {
                                case 212:
                                case 213:
                                case 214:
                                case 215:
                                case 216:
                                    break;
                                default:
                                    switch (type)
                                    {
                                        case 305:
                                        case 306:
                                        case 307:
                                        case 308:
                                        case 309:
                                        case 310:
                                        case 311:
                                        case 312:
                                        case 313:
                                        case 314:
                                        case 315:
                                        case 325:
                                        case 326:
                                        case 327:
                                        case 329:
                                        case 330:
                                            num2 = 2;
                                            goto IL_227;
                                        case 316:
                                        case 317:
                                        case 318:
                                        case 319:
                                        case 320:
                                        case 321:
                                        case 322:
                                        case 323:
                                        case 324:
                                        case 328:
                                        case 331:
                                        case 332:
                                        case 333:
                                        case 334:
                                        case 335:
                                        case 336:
                                        case 337:
                                            goto IL_227;
                                        case 338:
                                        case 339:
                                        case 340:
                                        case 341:
                                        case 342:
                                        case 343:
                                        case 344:
                                        case 345:
                                        case 346:
                                        case 347:
                                        case 348:
                                        case 349:
                                        case 350:
                                            num2 = 1;
                                            goto IL_227;
                                        default:
                                            goto IL_227;
                                    }
                            }
                        }
                        else
                        {
                            switch (type)
                            {
                                case 381:
                                case 382:
                                case 383:
                                case 385:
                                case 386:
                                case 388:
                                case 389:
                                case 390:
                                case 391:
                                case 395:
                                    num2 = 6;
                                    goto IL_227;
                                case 384:
                                case 387:
                                case 392:
                                case 393:
                                case 394:
                                    goto IL_227;
                                default:
                                    if (type != 491)
                                    {
                                        goto IL_227;
                                    }
                                    break;
                            }
                        }
                        num2 = 5;
                    }
                IL_227:
                    if (num2 != 0 && (num2 != 1 || ((double)player.position.Y <= Game1.worldSurface * 16.0 && !Game1.dayTime && Game1.snowMoon)) && (num2 != 2 || ((double)player.position.Y <= Game1.worldSurface * 16.0 && !Game1.dayTime && Game1.pumpkinMoon)) && (num2 <= 2 || ((double)player.position.Y <= Game1.worldSurface * 16.0 && Game1.invasionType == num2 - 2)))
                    {
                        Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(Game1.npc[i].position.X + (float)(Game1.npc[i].width / 2)) - num, (int)(Game1.npc[i].position.Y + (float)(Game1.npc[i].height / 2)) - num, num * 2, num * 2);
                        if (rectangle.Intersects(value))
                        {
                            flag = true;
                            break;
                        }
                    }
                }
            }
            Game1.invasionProgressNearInvasion = flag;
            if (flag && Game1.invasionProgressIcon == 0)
            {
                if (Game1.snowMoon)
                {
                    int[] array = new int[]
                    {
                        0,
                        25,
                        15,
                        10,
                        30,
                        100,
                        160,
                        180,
                        200,
                        250,
                        300,
                        375,
                        450,
                        525,
                        675,
                        850,
                        1025,
                        1325,
                        1550,
                        2000,
                        0
                    };
                    int progressMax = array[NPC.waveCount];
                    Game1.ReportInvasionProgress((int)NPC.waveKills, progressMax, 1, NPC.waveCount);
                    return;
                }
                if (Game1.pumpkinMoon)
                {
                    int[] array2 = new int[]
                    {
                        0,
                        25,
                        40,
                        50,
                        80,
                        100,
                        160,
                        180,
                        200,
                        250,
                        300,
                        375,
                        450,
                        525,
                        675,
                        0
                    };
                    int progressMax2 = array2[NPC.waveCount];
                    Game1.ReportInvasionProgress((int)NPC.waveKills, progressMax2, 2, NPC.waveCount);
                    return;
                }
                int progressMax3 = 1;
                if (Game1.invasionType != 0 && Game1.invasionSizeStart != 0)
                {
                    progressMax3 = Game1.invasionSizeStart;
                }
                Game1.ReportInvasionProgress(Game1.invasionSizeStart - Game1.invasionSize, progressMax3, num2, 0);
            }
        }
        public static void SyncAnInvasion(int toWho)
        {
            if (Game1.snowMoon)
            {
                int[] array = new int[]
                {
                    0,
                    25,
                    15,
                    10,
                    30,
                    100,
                    160,
                    180,
                    200,
                    250,
                    300,
                    375,
                    450,
                    525,
                    675,
                    850,
                    1025,
                    1325,
                    1550,
                    2000,
                    0
                };
                int num = array[NPC.waveCount];
                NetMessage.SendData(78, toWho, -1, "", (int)NPC.waveKills, (float)num, 1f, (float)NPC.waveCount, 0, 0, 0);
                return;
            }
            if (Game1.pumpkinMoon)
            {
                int[] array2 = new int[]
                {
                    0,
                    25,
                    40,
                    50,
                    80,
                    100,
                    160,
                    180,
                    200,
                    250,
                    300,
                    375,
                    450,
                    525,
                    675,
                    0
                };
                int num2 = array2[NPC.waveCount];
                NetMessage.SendData(78, toWho, -1, "", (int)NPC.waveKills, (float)num2, 2f, (float)NPC.waveCount, 0, 0, 0);
                return;
            }
            if (Game1.invasionType > 0)
            {
                int num3 = 1;
                if (Game1.invasionType != 0 && Game1.invasionSizeStart != 0)
                {
                    num3 = Game1.invasionSizeStart;
                }
                NetMessage.SendData(78, toWho, -1, "", Game1.invasionSizeStart - Game1.invasionSize, (float)num3, (float)(Game1.invasionType + 2), 0f, 0, 0, 0);
            }
        }
        public static void ReportInvasionProgress(int progress, int progressMax, int icon, int progressWave)
        {
            Game1.invasionProgress = progress;
            Game1.invasionProgressMax = progressMax;
            Game1.invasionProgressIcon = icon;
            Game1.invasionProgressWave = progressWave;
            Game1.invasionProgressDisplayLeft = 160;
        }
        public static void DrawInvasionProgress()
        {
            if (Game1.invasionProgress == -1)
            {
                return;
            }
            if (Game1.invasionProgressMode == 2 && Game1.invasionProgressNearInvasion && Game1.invasionProgressDisplayLeft < 160)
            {
                Game1.invasionProgressDisplayLeft = 160;
            }
            if (!Game1.gamePaused && Game1.invasionProgressDisplayLeft > 0)
            {
                Game1.invasionProgressDisplayLeft--;
            }
            if (Game1.invasionProgressDisplayLeft > 0)
            {
                Game1.invasionProgressAlpha += 0.05f;
            }
            else
            {
                Game1.invasionProgressAlpha -= 0.05f;
            }
            if (Game1.invasionProgressAlpha < 0f)
            {
                Game1.invasionProgressAlpha = 0f;
            }
            if (Game1.invasionProgressAlpha > 1f)
            {
                Game1.invasionProgressAlpha = 1f;
            }
            if (Game1.invasionProgressAlpha <= 0f)
            {
                return;
            }
            float num = 0.5f + Game1.invasionProgressAlpha * 0.5f;
            Texture2D texture2D = Game1.extraTexture[9];
            string text = "";
            Microsoft.Xna.Framework.Color c = Microsoft.Xna.Framework.Color.White;
            if (Game1.invasionProgressIcon == 1)
            {
                texture2D = Game1.extraTexture[8];
                text = Lang.inter[83];
                c = new Microsoft.Xna.Framework.Color(64, 109, 164) * 0.5f;
            }
            else if (Game1.invasionProgressIcon == 2)
            {
                texture2D = Game1.extraTexture[12];
                text = Lang.inter[84];
                c = new Microsoft.Xna.Framework.Color(112, 86, 114) * 0.5f;
            }
            else if (Game1.invasionProgressIcon == 6)
            {
                texture2D = Game1.extraTexture[10];
                text = Lang.inter[85];
                c = new Microsoft.Xna.Framework.Color(165, 160, 155) * 0.5f;
            }
            else if (Game1.invasionProgressIcon == 5)
            {
                texture2D = Game1.extraTexture[11];
                text = Lang.inter[86];
                c = new Microsoft.Xna.Framework.Color(148, 122, 72) * 0.5f;
            }
            else if (Game1.invasionProgressIcon == 4)
            {
                texture2D = Game1.extraTexture[7];
                text = Lang.inter[87];
                c = new Microsoft.Xna.Framework.Color(173, 135, 140) * 0.5f;
            }
            else if (Game1.invasionProgressIcon == 3)
            {
                texture2D = Game1.extraTexture[9];
                text = Lang.inter[88];
                c = new Microsoft.Xna.Framework.Color(94, 72, 131) * 0.5f;
            }
            if (Game1.invasionProgressWave > 0)
            {
                int num2 = (int)(200f * num);
                int num3 = (int)(45f * num);
                Vector2 vector = new Vector2((float)(Game1.screenWidth - 120), (float)(Game1.screenHeight - 40));
                Microsoft.Xna.Framework.Rectangle r = new Microsoft.Xna.Framework.Rectangle((int)vector.X - num2 / 2, (int)vector.Y - num3 / 2, num2, num3);
                Utils.DrawInvBG(Game1.spriteBatch, r, new Microsoft.Xna.Framework.Color(63, 65, 151, 255) * 0.785f);
                string text2;
                if (Game1.invasionProgressMax == 0)
                {
                    text2 = Game1.invasionProgress.ToString() + " points";
                }
                else
                {
                    text2 = ((int)((float)Game1.invasionProgress * 100f / (float)Game1.invasionProgressMax)).ToString() + "%";
                }
                text2 = string.Concat(new object[]
                {
                    "Wave ",
                    Game1.invasionProgressWave,
                    ": ",
                    text2
                });
                Texture2D texture2D2 = Game1.colorBarTexture;
                Texture2D arg_337_0 = Game1.colorBlipTexture;
                float num4 = MathHelper.Clamp((float)Game1.invasionProgress / (float)Game1.invasionProgressMax, 0f, 1f);
                if (Game1.invasionProgressMax == 0)
                {
                    num4 = 1f;
                }
                float num5 = 169f * num;
                float num6 = 8f * num;
                Vector2 vector2 = vector + Vector2.UnitY * num6 + Vector2.UnitX * 1f;
                Utils.DrawBorderString(Game1.spriteBatch, text2, vector2, Microsoft.Xna.Framework.Color.White * Game1.invasionProgressAlpha, num, 0.5f, 1f, -1);
                Game1.spriteBatch.Draw(texture2D2, vector, null, Microsoft.Xna.Framework.Color.White * Game1.invasionProgressAlpha, 0f, new Vector2((float)(texture2D2.Width / 2), 0f), num, SpriteEffects.None, 0f);
                vector2 += Vector2.UnitX * (num4 - 0.5f) * num5;
                Game1.spriteBatch.Draw(Game1.magicPixel, vector2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), new Microsoft.Xna.Framework.Color(255, 241, 51) * Game1.invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(num5 * num4, num6), SpriteEffects.None, 0f);
                Game1.spriteBatch.Draw(Game1.magicPixel, vector2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), new Microsoft.Xna.Framework.Color(255, 165, 0, 127) * Game1.invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(2f, num6), SpriteEffects.None, 0f);
                Game1.spriteBatch.Draw(Game1.magicPixel, vector2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), Microsoft.Xna.Framework.Color.Black * Game1.invasionProgressAlpha, 0f, new Vector2(0f, 0.5f), new Vector2(num5 * (1f - num4), num6), SpriteEffects.None, 0f);
            }
            else
            {
                int num7 = (int)(200f * num);
                int num8 = (int)(45f * num);
                Vector2 vector3 = new Vector2((float)(Game1.screenWidth - 120), (float)(Game1.screenHeight - 40));
                Microsoft.Xna.Framework.Rectangle r2 = new Microsoft.Xna.Framework.Rectangle((int)vector3.X - num7 / 2, (int)vector3.Y - num8 / 2, num7, num8);
                Utils.DrawInvBG(Game1.spriteBatch, r2, new Microsoft.Xna.Framework.Color(63, 65, 151, 255) * 0.785f);
                string text3;
                if (Game1.invasionProgressMax == 0)
                {
                    text3 = Game1.invasionProgress.ToString();
                }
                else
                {
                    text3 = ((int)((float)Game1.invasionProgress * 100f / (float)Game1.invasionProgressMax)).ToString() + "%";
                }
                text3 = "Cleared " + text3;
                Texture2D texture2D3 = Game1.colorBarTexture;
                Texture2D arg_62C_0 = Game1.colorBlipTexture;
                if (Game1.invasionProgressMax != 0)
                {
                    Game1.spriteBatch.Draw(texture2D3, vector3, null, Microsoft.Xna.Framework.Color.White * Game1.invasionProgressAlpha, 0f, new Vector2((float)(texture2D3.Width / 2), 0f), num, SpriteEffects.None, 0f);
                    float num9 = MathHelper.Clamp((float)Game1.invasionProgress / (float)Game1.invasionProgressMax, 0f, 1f);
                    float num10 = 169f * num;
                    float num11 = 8f * num;
                    Vector2 vector4 = vector3 + Vector2.UnitY * num11 + Vector2.UnitX * 1f;
                    Utils.DrawBorderString(Game1.spriteBatch, text3, vector4, Microsoft.Xna.Framework.Color.White * Game1.invasionProgressAlpha, num, 0.5f, 1f, -1);
                    vector4 += Vector2.UnitX * (num9 - 0.5f) * num10;
                    Game1.spriteBatch.Draw(Game1.magicPixel, vector4, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), new Microsoft.Xna.Framework.Color(255, 241, 51) * Game1.invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(num10 * num9, num11), SpriteEffects.None, 0f);
                    Game1.spriteBatch.Draw(Game1.magicPixel, vector4, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), new Microsoft.Xna.Framework.Color(255, 165, 0, 127) * Game1.invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(2f, num11), SpriteEffects.None, 0f);
                    Game1.spriteBatch.Draw(Game1.magicPixel, vector4, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), Microsoft.Xna.Framework.Color.Black * Game1.invasionProgressAlpha, 0f, new Vector2(0f, 0.5f), new Vector2(num10 * (1f - num9), num11), SpriteEffects.None, 0f);
                }
            }
            Vector2 center = new Vector2((float)(Game1.screenWidth - 120), (float)(Game1.screenHeight - 80));
            Vector2 value = Game1.fontItemStack.MeasureString(text);
            Microsoft.Xna.Framework.Rectangle r3 = Utils.CenteredRectangle(center, (value + new Vector2((float)(texture2D.Width + 20), 10f)) * num);
            Utils.DrawInvBG(Game1.spriteBatch, r3, c);
            Game1.spriteBatch.Draw(texture2D, r3.Left() + Vector2.UnitX * num * 8f, null, Microsoft.Xna.Framework.Color.White * Game1.invasionProgressAlpha, 0f, new Vector2(0f, (float)(texture2D.Height / 2)), num * 0.8f, SpriteEffects.None, 0f);
            Utils.DrawBorderString(Game1.spriteBatch, text, r3.Right() + Vector2.UnitX * num * -8f, Microsoft.Xna.Framework.Color.White * Game1.invasionProgressAlpha, num * 0.9f, 1f, 0.4f, -1);
        }
        protected void QuitGame()
        {
            Game1.SaveSettings();
            base.Exit();
        }
        protected Microsoft.Xna.Framework.Color randColor()
        {
            int num = 0;
            int num2 = 0;
            int num3 = 0;
            while (num + num3 + num2 <= 150)
            {
                num = Game1.rand.Next(256);
                num2 = Game1.rand.Next(256);
                num3 = Game1.rand.Next(256);
            }
            return new Microsoft.Xna.Framework.Color(num, num2, num3, 255);
        }
        public static Microsoft.Xna.Framework.Color hslToRgb(float Hue, float Saturation, float Luminosity)
        {
            byte r;
            byte g;
            byte b;
            if (Saturation == 0f)
            {
                r = (byte)Math.Round((double)Luminosity * 255.0);
                g = (byte)Math.Round((double)Luminosity * 255.0);
                b = (byte)Math.Round((double)Luminosity * 255.0);
            }
            else
            {
                double num = (double)Hue;
                double num2;
                if ((double)Luminosity < 0.5)
                {
                    num2 = (double)Luminosity * (1.0 + (double)Saturation);
                }
                else
                {
                    num2 = (double)(Luminosity + Saturation - Luminosity * Saturation);
                }
                double t = 2.0 * (double)Luminosity - num2;
                double num3 = num + 0.33333333333333331;
                double num4 = num;
                double num5 = num - 0.33333333333333331;
                num3 = Game1.hue2rgb(num3, t, num2);
                num4 = Game1.hue2rgb(num4, t, num2);
                num5 = Game1.hue2rgb(num5, t, num2);
                r = (byte)Math.Round(num3 * 255.0);
                g = (byte)Math.Round(num4 * 255.0);
                b = (byte)Math.Round(num5 * 255.0);
            }
            return new Microsoft.Xna.Framework.Color((int)r, (int)g, (int)b);
        }
        public static double hue2rgb(double c, double t1, double t2)
        {
            if (c < 0.0)
            {
                c += 1.0;
            }
            if (c > 1.0)
            {
                c -= 1.0;
            }
            if (6.0 * c < 1.0)
            {
                return t1 + (t2 - t1) * 6.0 * c;
            }
            if (2.0 * c < 1.0)
            {
                return t2;
            }
            if (3.0 * c < 2.0)
            {
                return t1 + (t2 - t1) * (0.66666666666666663 - c) * 6.0;
            }
            return t1;
        }


        // rgbToHsl
        public static Vector3 rgbToHsl(Microsoft.Xna.Framework.Color newColor)
        {
            float num = (float)newColor.R;
            float num2 = (float)newColor.G;
            float num3 = (float)newColor.B;
            num /= 255f;
            num2 /= 255f;
            num3 /= 255f;
            float num4 = Math.Max(num, num2);
            num4 = Math.Max(num4, num3);
            float num5 = Math.Min(num, num2);
            num5 = Math.Min(num5, num3);
            float num6 = 0f;
            float num7 = (num4 + num5) / 2f;
            float y;
            if (num4 == num5)
            {
                y = (num6 = 0f);
            }
            else
            {
                float num8 = num4 - num5;
                y = (((double)num7 > 0.5) ? (num8 / (2f - num4 - num5)) : (num8 / (num4 + num5)));
                if (num4 == num)
                {
                    num6 = (num2 - num3) / num8 + (float)((num2 < num3) ? 6 : 0);
                }
                if (num4 == num2)
                {
                    num6 = (num3 - num) / num8 + 2f;
                }
                if (num4 == num3)
                {
                    num6 = (num - num2) / num8 + 4f;
                }
                num6 /= 6f;
            }
            return new Vector3(num6, y, num7);
        }


        // DrawThickCursor
        public static void DrawThickCursor(bool smart = false)
        {
            if (Game1.ThickMouse)
            {
                Microsoft.Xna.Framework.Color black = Microsoft.Xna.Framework.Color.Black;
                black.PackedValue = Game1.ThickMousePackedColor;
                Texture2D texture = Game1.cursorTextures[11];
                if (smart)
                {
                    texture = Game1.cursorTextures[12];
                }
                for (int i = 0; i < 4; i++)
                {
                    Vector2 vector = Vector2.Zero;
                    switch (i)
                    {
                        case 0:
                            vector = new Vector2(0f, 1f);
                            break;
                        case 1:
                            vector = new Vector2(1f, 0f);
                            break;
                        case 2:
                            vector = new Vector2(0f, -1f);
                            break;
                        case 3:
                            vector = new Vector2(-1f, 0f);
                            break;
                    }
                    vector *= 1f;
                    Game1.spriteBatch.Draw(texture, new Vector2((float)Game1.mouseX,
                        (float)Game1.mouseY) + vector, null, black, 0f, new Vector2(2f),
                        Game1.cursorScale * 1.1f, SpriteEffects.None, 0f);
                }
            }
        }


        // DrawMenu
        protected void DrawMenu(GameTime gameTime)
        {
            if (!Game1.IsEngineLoaded)
            {
                Game1.IsEngineLoaded = true;
                if (Game1.OnEngineLoad != null)
                {
                    Game1.OnEngineLoad();
                }
            }
            if (Game1.menuMode <= 1 && Game1.slimeRain)
            {
                Game1.StopSlimeRain(true);
            }
            Game1.render = false;
            Star.UpdateStars();
            Cloud.UpdateClouds();
            Game1.holyTiles = 0;
            Game1.evilTiles = 0;
            Game1.shroomTiles = 0;
            Game1.bloodTiles = 0;
            Game1.bloodTiles = 0;
            Game1.jungleTiles = 0;
            Game1.chatMode = false;
            for (int i = 0; i < Game1.numChatLines; i++)
            {
                Game1.chatLine[i] = new ChatLine();
            }
            this.DrawFPS();
            Game1.screenLastPosition = Game1.screenPosition;
            Game1.screenPosition.Y = (float)(Game1.worldSurface * 16.0 - (double)Game1.screenHeight);
            if (Game1.grabSky)
            {
                Game1.screenPosition.X =
                    Game1.screenPosition.X + (float)(Game1.mouseX - Game1.screenWidth / 2) * 0.02f;
            }
            else
            {
                Game1.screenPosition.X = Game1.screenPosition.X + 2f;
            }
            if (Game1.screenPosition.X > 2.14748352E+09f)
            {
                Game1.screenPosition.X = 0f;
            }
            if (Game1.screenPosition.X < -2.14748352E+09f)
            {
                Game1.screenPosition.X = 0f;
            }
            Game1.background = 0;
            byte b = (byte)((255 + Game1.tileColor.R * 2) / 3);
            Microsoft.Xna.Framework.Color color =
                new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, 255);

            this.logoRotation += this.logoRotationSpeed * 3E-05f;
            if ((double)this.logoRotation > 0.1)
            {
                this.logoRotationDirection = -1f;
            }
            else if ((double)this.logoRotation < -0.1)
            {
                this.logoRotationDirection = 1f;
            }
            if (this.logoRotationSpeed < 20f & this.logoRotationDirection == 1f)
            {
                this.logoRotationSpeed += 1f;
            }
            else if (this.logoRotationSpeed > -20f & this.logoRotationDirection == -1f)
            {
                this.logoRotationSpeed -= 1f;
            }
            this.logoScale += this.logoScaleSpeed * 1E-05f;
            if ((double)this.logoScale > 1.1)
            {
                this.logoScaleDirection = -1f;
            }
            else if ((double)this.logoScale < 0.9)
            {
                this.logoScaleDirection = 1f;
            }
            if (this.logoScaleSpeed < 50f & this.logoScaleDirection == 1f)
            {
                this.logoScaleSpeed += 1f;
            }
            else if (this.logoScaleSpeed > -50f & this.logoScaleDirection == -1f)
            {
                this.logoScaleSpeed -= 1f;
            }
            Microsoft.Xna.Framework.Color color2 =
                new Microsoft.Xna.Framework.Color((int)((byte)((float)color.R * ((float)Game1.LogoA / 255f))),
                (int)((byte)((float)color.G * ((float)Game1.LogoA / 255f))),
                (int)((byte)((float)color.B * ((float)Game1.LogoA / 255f))),
                (int)((byte)((float)color.A * ((float)Game1.LogoA / 255f))));
            Microsoft.Xna.Framework.Color color3 =
                new Microsoft.Xna.Framework.Color((int)((byte)((float)color.R * ((float)Game1.LogoB / 255f))),
                (int)((byte)((float)color.G * ((float)Game1.LogoB / 255f))),
                (int)((byte)((float)color.B * ((float)Game1.LogoB / 255f))),
                (int)((byte)((float)color.A * ((float)Game1.LogoB / 255f))));

            Game1.spriteBatch.Draw(Game1.logoTexture, new Vector2((float)(Game1.screenWidth / 2), 100f),
                new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(
                    0, 0, Game1.logoTexture.Width, Game1.logoTexture.Height)), color2, this.logoRotation,
                new Vector2((float)(Game1.logoTexture.Width / 2), (float)(Game1.logoTexture.Height / 2)),
                this.logoScale, SpriteEffects.None, 0f);

            Game1.spriteBatch.Draw(Game1.logo2Texture, new Vector2((float)(Game1.screenWidth / 2), 100f),
                new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(
                    0, 0, Game1.logoTexture.Width, Game1.logoTexture.Height)), color3, this.logoRotation,
                new Vector2((float)(Game1.logoTexture.Width / 2), (float)(Game1.logoTexture.Height / 2)),
                this.logoScale, SpriteEffects.None, 0f);

            if (Game1.dayTime)
            {
                Game1.LogoA += 2;
                if (Game1.LogoA > 255)
                {
                    Game1.LogoA = 255;
                }
                Game1.LogoB--;
                if (Game1.LogoB < 0)
                {
                    Game1.LogoB = 0;
                }
            }
            else
            {
                Game1.LogoB += 2;
                if (Game1.LogoB > 255)
                {
                    Game1.LogoB = 255;
                }
                Game1.LogoA--;
                if (Game1.LogoA < 0)
                {
                    Game1.LogoA = 0;
                    Game1.LogoT = true;
                }
            }
            int num = 250;
            int num2 = Game1.screenWidth / 2;
            int num3 = 80;
            int num4 = 0;
            int num5 = Game1.menuMode;
            int num6 = 0;
            int num7 = 0;
            bool flag = false;
            bool flag2 = false;
            bool flag3 = false;
            int num8 = 0;
            bool[] array = new bool[Game1.maxMenuItems];
            bool[] array2 = new bool[Game1.maxMenuItems];
            bool[] array3 = new bool[Game1.maxMenuItems];
            int[] array4 = new int[Game1.maxMenuItems];
            int[] array5 = new int[Game1.maxMenuItems];
            byte[] array6 = new byte[Game1.maxMenuItems];
            float[] array7 = new float[Game1.maxMenuItems];
            bool[] array8 = new bool[Game1.maxMenuItems];
            bool flag4 = false;
            for (int j = 0; j < Game1.maxMenuItems; j++)
            {
                array[j] = false;
                array2[j] = false;
                array4[j] = 0;
                array5[j] = 0;
                array7[j] = 1f;
            }
            string[] array9 = new string[Game1.maxMenuItems];
            if (Game1.menuMode == -1)
            {
                Game1.menuMode = 0;
            }
            if (Game1.menuMode == 1212)
            {
                if (this.focusMenu == 2)
                {
                    array9[0] = "Wählen Sie die Sprache";
                }
                else if (this.focusMenu == 3)
                {
                    array9[0] = "Selezionare la lingua";
                }
                else if (this.focusMenu == 4)
                {
                    array9[0] = "Sélectionnez la langue";
                }
                else if (this.focusMenu == 5)
                {
                    array9[0] = "Seleccione el idioma";
                }
                else
                {
                    array9[0] = "Select language";
                }
                num3 = 50;
                num = 200;
                array4[1] = 25;
                array4[2] = 25;
                array4[3] = 25;
                array4[4] = 25;
                array4[5] = 25;
                array[0] = true;
                array9[1] = "English";
                array9[2] = "Deutsch";
                array9[3] = "Italiano";
                array9[4] = "Française";
                array9[5] = "Español";
                num4 = 6;
                if (this.selectedMenu >= 1)
                {
                    Lang.lang = this.selectedMenu;
                    Lang.setLang(false);
                    Game1.menuMode = 0;
                    Game1.PlaySound(10, -1, -1, 1);
                    Game1.SaveSettings();
                }
            }
            else if (Game1.menuMode == 1213)
            {
                if (this.focusMenu == 1)
                {
                    array9[0] = "Select language";
                }
                else if (this.focusMenu == 2)
                {
                    array9[0] = "Wählen Sie die Sprache";
                }
                else if (this.focusMenu == 3)
                {
                    array9[0] = "Selezionare la lingua";
                }
                else if (this.focusMenu == 4)
                {
                    array9[0] = "Sélectionnez la langue";
                }
                else if (this.focusMenu == 5)
                {
                    array9[0] = "Seleccione el idioma";
                }
                else
                {
                    array9[0] = Lang.menu[102];
                }
                num3 = 48;
                num = 180;
                array4[1] = 25;
                array4[2] = 25;
                array4[3] = 25;
                array4[4] = 25;
                array4[5] = 25;
                array4[6] = 50;
                array[0] = true;
                array9[1] = "English";
                array9[2] = "Deutsch";
                array9[3] = "Italiano";
                array9[4] = "Française";
                array9[5] = "Español";
                array9[6] = Lang.menu[5];
                num4 = 7;
                if (this.selectedMenu == 6)
                {
                    Game1.menuMode = 11;
                    Game1.PlaySound(11, -1, -1, 1);
                }
                else if (this.selectedMenu >= 1)
                {
                    Lang.lang = this.selectedMenu;
                    Lang.setLang(false);
                    Game1.PlaySound(12, -1, -1, 1);
                    Game1.SaveSettings();
                }
            }
            else if (Game1.netMode == 2)
            {
                bool flag5 = true;
                for (int k = 0; k < 8; k++)
                {
                    if (k < 255)
                    {
                        try
                        {
                            array9[k] = Netplay.Clients[k].StatusText;
                            if (Netplay.Clients[k].IsActive && Game1.showSpam)
                            {
                                string[] array10;
                                string[] expr_86B = array10 = array9;
                                IntPtr intPtr;
                                int expr_870 = (int)(intPtr = (IntPtr)k);
                                object obj = array10[(int)intPtr];
                                expr_86B[expr_870] = string.Concat(new object[]
                                {
                                    obj,
                                    " (",
                                    NetMessage.buffer[k].spamCount,
                                    ")"
                                });
                            }
                        }
                        catch
                        {
                            array9[k] = "";
                        }
                        array[k] = true;
                        if (array9[k] != "" && array9[k] != null)
                        {
                            flag5 = false;
                        }
                    }
                }
                if (flag5)
                {
                    array9[0] = Lang.menu[0];
                    array9[1] = Lang.menu[1] + Netplay.ListenPort + ".";
                }
                num4 = 11;
                array9[9] = Game1.statusText;
                array[9] = true;
                num = 170;
                num3 = 30;
                array4[10] = 20;
                array4[10] = 40;
                array9[10] = Lang.menu[2];
                if (this.selectedMenu == 10)
                {
                    Netplay.disconnect = true;
                    Game1.PlaySound(11, -1, -1, 1);
                }
            }
            else if (Game1.menuMode == 31)
            {
                string serverPassword = Netplay.ServerPassword;
                Netplay.ServerPassword = Game1.GetInputText(Netplay.ServerPassword);
                if (serverPassword != Netplay.ServerPassword)
                {
                    Game1.PlaySound(12, -1, -1, 1);
                }
                array9[0] = Lang.menu[3];
                this.textBlinkerCount++;
                if (this.textBlinkerCount >= 20)
                {
                    if (this.textBlinkerState == 0)
                    {
                        this.textBlinkerState = 1;
                    }
                    else
                    {
                        this.textBlinkerState = 0;
                    }
                    this.textBlinkerCount = 0;
                }
                array9[1] = Netplay.ServerPassword;
                if (Game1.HidePassword)
                {
                    array9[1] = "";
                    for (int l = 0; l < Netplay.ServerPassword.Length; l++)
                    {
                        string[] array10;
                        (array10 = array9)[1] = array10[1] + "*";
                    }
                }
                if (this.textBlinkerState == 1)
                {
                    string[] array10;
                    (array10 = array9)[1] = array10[1] + "|";
                    array5[1] = 1;
                }
                else
                {
                    string[] array10;
                    (array10 = array9)[1] = array10[1] + " ";
                }
                array[0] = true;
                array[1] = true;
                array4[1] = -20;
                array4[2] = 20;
                array9[2] = Lang.menu[4];
                array9[3] = Lang.menu[5];
                num4 = 4;
                if (this.selectedMenu == 3)
                {
                    Game1.PlaySound(11, -1, -1, 1);
                    Game1.menuMode = 0;
                    Netplay.disconnect = true;
                    Netplay.ServerPassword = "";
                }
                else if (this.selectedMenu == 2 || Game1.inputTextEnter)
                {
                    NetMessage.SendData(38, -1, -1, Netplay.ServerPassword, 0, 0f, 0f, 0f, 0, 0, 0);
                    Game1.menuMode = 14;
                }
            }
            else
            {
                if (Game1.netMode == 1 || Game1.menuMode == 14)
                {
                    num4 = 2;
                    array9[0] = Game1.statusText;
                    array[0] = true;
                    num = 300;
                    array9[1] = Lang.menu[6];
                    if (this.selectedMenu != 1)
                    {
                        goto IL_4157;
                    }
                    Netplay.disconnect = true;
                    Netplay.Connection.Socket.Close();
                    Game1.PlaySound(11, -1, -1, 1);
                    Game1.menuMode = 0;
                    Game1.netMode = 0;
                    try
                    {
                        //this.tServer.Kill();
                        goto IL_4157;
                    }
                    catch
                    {
                        goto IL_4157;
                    }
                }
                if (Game1.menuMode == 882)
                {
                    num4 = 2;
                    array[0] = true;
                    num = 300;
                    array9[0] = Game1.statusText;
                    array9[1] = Lang.menu[6];
                    if (this.selectedMenu == 1)
                    {
                        Game1.PlaySound(11, -1, -1, 1);
                        Game1.menuMode = 0;
                        Game1.netMode = 0;
                    }
                }
                else if (Game1.menuMode == 30)
                {
                    string serverPassword2 = Netplay.ServerPassword;
                    Netplay.ServerPassword = Game1.GetInputText(Netplay.ServerPassword);
                    if (serverPassword2 != Netplay.ServerPassword)
                    {
                        Game1.PlaySound(12, -1, -1, 1);
                    }
                    array9[0] = Lang.menu[7];
                    this.textBlinkerCount++;
                    if (this.textBlinkerCount >= 20)
                    {
                        if (this.textBlinkerState == 0)
                        {
                            this.textBlinkerState = 1;
                        }
                        else
                        {
                            this.textBlinkerState = 0;
                        }
                        this.textBlinkerCount = 0;
                    }
                    array9[1] = Netplay.ServerPassword;
                    if (Game1.HidePassword)
                    {
                        array9[1] = "";
                        for (int m = 0; m < Netplay.ServerPassword.Length; m++)
                        {
                            string[] array10;
                            (array10 = array9)[1] = array10[1] + "*";
                        }
                    }
                    if (this.textBlinkerState == 1)
                    {
                        string[] array10;
                        (array10 = array9)[1] = array10[1] + "|";
                        array5[1] = 1;
                    }
                    else
                    {
                        string[] array10;
                        (array10 = array9)[1] = array10[1] + " ";
                    }
                    array[0] = true;
                    array[1] = true;
                    array4[1] = -20;
                    array4[2] = 20;
                    array9[2] = Lang.menu[4];
                    array9[3] = Lang.menu[5];
                    num4 = 4;
                    if (this.selectedMenu == 3)
                    {
                        Game1.menuMode = 6;
                        Netplay.ServerPassword = "";
                    }
                    else if (this.selectedMenu == 2 || Game1.inputTextEnter || Game1.autoPass)
                    {
                        string text = string.Concat(new object[]
                        {
                            "-autoshutdown -password \"",
                            Netplay.ServerPassword,
                            "\" -lang ",
                            Lang.lang
                        });
                        text = text + " -world \"" + Game1.worldPathName + "\"";

                        //RnD
                        /*
                        this.tServer.StartInfo.FileName = "TerrariaServer.exe";
                        this.tServer.StartInfo.Arguments = text;
                        if (Main.libPath != "")
                        {
                            ProcessStartInfo expr_E36 = this.tServer.StartInfo;
                            expr_E36.Arguments = expr_E36.Arguments + " -loadlib " + Main.libPath;
                        }
                        this.tServer.StartInfo.UseShellExecute = false;
                        this.tServer.StartInfo.CreateNoWindow = true;
                        this.tServer.Start();
                        */
                        Netplay.SetRemoteIP("127.0.0.1");
                        Game1.autoPass = true;
                        Game1.statusText = Lang.menu[8];
                        Netplay.StartTcpClient();
                        Game1.menuMode = 10;
                    }
                }
                else if (Game1.menuMode == 889) { }
                else if (Game1.menuMode == 15)
                {
                    num4 = 2;
                    array9[0] = Game1.statusText;
                    array[0] = true;
                    num = 80;
                    num3 = 400;
                    array9[1] = Lang.menu[5];
                    if (this.selectedMenu == 1)
                    {
                        Netplay.disconnect = true;
                        Game1.PlaySound(11, -1, -1, 1);
                        Game1.menuMode = 0;
                        Game1.netMode = 0;
                    }
                }
                else if (Game1.menuMode == 200)
                {
                    num4 = 3;
                    array9[0] = Lang.menu[9];
                    array[0] = true;
                    num -= 30;
                    array4[1] = 70;
                    array4[2] = 50;
                    array9[1] = Lang.menu[10];
                    array9[2] = Lang.menu[6];
                    if (this.selectedMenu == 1)
                    {
                        if (FileUtilities.Exists(Game1.worldPathName + ".bak"))
                        {
                            FileUtilities.Move(Game1.worldPathName + ".bak", Game1.worldPathName, true);
                            Game1.PlaySound(10, -1, -1, 1);
                            WorldGen.playWorld();
                            Game1.menuMode = 10;
                        }
                        else
                        {
                            Game1.PlaySound(11, -1, -1, 1);
                            Game1.menuMode = 0;
                            Game1.netMode = 0;
                        }
                    }
                    if (this.selectedMenu == 2)
                    {
                        Game1.PlaySound(11, -1, -1, 1);
                        Game1.menuMode = 0;
                        Game1.netMode = 0;
                    }
                }
                else if (Game1.menuMode == 201)
                {
                    num4 = 3;
                    array9[0] = Lang.menu[9];
                    array[0] = true;
                    array[1] = true;
                    num -= 30;
                    array4[1] = -30;
                    array4[2] = 50;
                    array9[1] = Lang.menu[11];
                    array9[2] = Lang.menu[5];
                    if (this.selectedMenu == 2)
                    {
                        Game1.PlaySound(11, -1, -1, 1);
                        Game1.menuMode = 0;
                        Game1.netMode = 0;
                    }
                }
                else if (Game1.menuMode == 10)
                {
                    num4 = 1;
                    array9[0] = Game1.statusText;
                    array[0] = true;
                    num = 300;
                }
                else if (Game1.menuMode == 100)
                {
                    num4 = 1;
                    array9[0] = Game1.statusText;
                    array[0] = true;
                    num = 300;
                }
                else if (Game1.menuMode == 0)
                {
                    Game1.eclipse = false;
                    Game1.pumpkinMoon = false;
                    Game1.snowMoon = false;
                    Game1.ServerSideCharacter = false;
                    Game1.menuMultiplayer = false;
                    Game1.menuServer = false;
                    Game1.netMode = 0;
                    for (int n = 0; n < 9; n++)
                    {
                        string text2 = "";
                        switch (n)
                        {
                            case 0:
                                text2 = "Solar";
                                break;
                            case 1:
                                text2 = "Vortex";
                                break;
                            case 2:
                                text2 = "Nebula";
                                break;
                            case 3:
                                text2 = "Stardust";
                                break;
                            case 4:
                                text2 = "MoonLord";
                                break;
                            case 5:
                                text2 = "MonolithSolar";
                                break;
                            case 6:
                                text2 = "MonolithVortex";
                                break;
                            case 7:
                                text2 = "MonolithNebula";
                                break;
                            case 8:
                                text2 = "MonolithStardust";
                                break;
                        }
                        if (SkyManager.Instance[text2].IsActive())
                        {
                            SkyManager.Instance.Deactivate(text2, new object[0]);
                        }
                        if (Filters.Scene[text2].IsActive())
                        {
                            Filters.Scene[text2].Deactivate(new object[0]);
                        }
                    }
                    if (Filters.Scene["BloodMoon"].IsActive())
                    {
                        Filters.Scene["BloodMoon"].Deactivate(new object[0]);
                    }
                    if (SkyManager.Instance["Martian"].IsActive())
                    {
                        SkyManager.Instance["Martian"].Deactivate(new object[0]);
                    }
                    if (SkyManager.Instance["Slime"].IsActive())
                    {
                        SkyManager.Instance["Slime"].Deactivate(new object[0]);
                    }
                    int num9 = 0;
                    num4 = 5;
                    num3 = 60;
                    array9[num9] = Lang.menu[12];
                    if (this.selectedMenu == num9)
                    {
                        Game1.PlaySound(10, -1, -1, 1);
                        Game1.menuMode = 1;
                    }
                    num9++;
                    array9[num9] = Lang.menu[13];
                    if (this.selectedMenu == num9)
                    {
                        Game1.PlaySound(10, -1, -1, 1);
                        Game1.menuMode = 12;
                    }
                    num9++;
                    array9[num9] = Lang.menu[131];
                    if (this.selectedMenu == num9)
                    {
                        Game1.PlaySound(10, -1, -1, 1);
                        Game1.MenuUI.SetState(Game1.AchievementsMenu);
                        Game1.menuMode = 888;
                    }
                    num9++;
                    array9[num9] = Lang.menu[14];
                    if (this.selectedMenu == num9)
                    {
                        Game1.PlaySound(10, -1, -1, 1);
                        Game1.menuMode = 11;
                    }
                    num9++;
                    array9[num9] = Lang.menu[15];
                    if (this.selectedMenu == num9)
                    {
                        this.QuitGame();
                    }
                    num9++;
                }
                else if (Game1.menuMode == 1)
                {
                    Game1.MenuUI.SetState(Game1._characterSelectMenu);
                    Game1.menuMode = 888;
                }
                else if (Game1.menuMode == 2)
                {
                    flag4 = true;
                    if (this.selectedMenu == 0)
                    {
                        Game1.menuMode = 17;
                        Game1.PlaySound(10, -1, -1, 1);
                        Game1.selColor = Game1.PendingPlayer.hairColor;
                    }
                    if (this.selectedMenu == 1)
                    {
                        Game1.menuMode = 18;
                        Game1.PlaySound(10, -1, -1, 1);
                        Game1.selColor = Game1.PendingPlayer.eyeColor;
                    }
                    if (this.selectedMenu == 2)
                    {
                        Game1.menuMode = 19;
                        Game1.PlaySound(10, -1, -1, 1);
                        Game1.selColor = Game1.PendingPlayer.skinColor;
                    }
                    if (this.selectedMenu == 3)
                    {
                        Game1.menuMode = 20;
                        Game1.PlaySound(10, -1, -1, 1);
                    }
                    array9[0] = Lang.menu[18];
                    array9[1] = Lang.menu[19];
                    array9[2] = Lang.menu[20];
                    array9[3] = Lang.menu[21];
                    num = 220;
                    for (int num10 = 0; num10 < 9; num10++)
                    {
                        if (num10 < 6)
                        {
                            array7[num10] = 0.75f;
                        }
                        else
                        {
                            array7[num10] = 0.9f;
                        }
                    }
                    num3 = 38;
                    array4[6] = 6;
                    array4[7] = 12;
                    array4[8] = 18;
                    num6 = Game1.screenWidth / 2 - 16;
                    num7 = 176;
                    if (Game1.PendingPlayer.Male)
                    {
                        array9[4] = Lang.menu[22];
                    }
                    else
                    {
                        array9[4] = Lang.menu[23];
                    }
                    if (this.selectedMenu == 4)
                    {
                        if (Game1.PendingPlayer.Male)
                        {
                            Game1.PlaySound(20, -1, -1, 1);
                            Game1.PendingPlayer.Male = false;
                        }
                        else
                        {
                            Game1.PlaySound(1, -1, -1, 1);
                            Game1.PendingPlayer.Male = true;
                        }
                    }
                    if (Game1.PendingPlayer.difficulty == 2)
                    {
                        array9[5] = Lang.menu[24];
                        array6[5] = Game1.PendingPlayer.difficulty;
                    }
                    else if (Game1.PendingPlayer.difficulty == 1)
                    {
                        array9[5] = Lang.menu[25];
                        array6[5] = Game1.PendingPlayer.difficulty;
                    }
                    else
                    {
                        array9[5] = Lang.menu[26];
                    }
                    if (this.selectedMenu == 5)
                    {
                        Game1.PlaySound(10, -1, -1, 1);
                        Game1.menuMode = 222;
                    }
                    if (this.selectedMenu == 7)
                    {
                        Game1.PlaySound(12, -1, -1, 1);
                        Game1.PendingPlayer.hair = Game1.rand.Next(51);
                        Game1.PendingPlayer.eyeColor = this.randColor();
                        while ((int)(Game1.PendingPlayer.eyeColor.R + Game1.PendingPlayer.eyeColor.G + Game1.PendingPlayer.eyeColor.B) > 300)
                        {
                            Game1.PendingPlayer.eyeColor = this.randColor();
                        }
                        Game1.PendingPlayer.hairColor = this.randColor();
                        Game1.PendingPlayer.pantsColor = this.randColor();
                        Game1.PendingPlayer.shirtColor = this.randColor();
                        Game1.PendingPlayer.shoeColor = this.randColor();
                        Game1.PendingPlayer.skinColor = this.randColor();
                        float num11 = (float)Game1.rand.Next(60, 120) * 0.01f;
                        if (num11 > 1f)
                        {
                            num11 = 1f;
                        }
                        Game1.PendingPlayer.skinColor.R = (byte)((float)Game1.rand.Next(240, 255) * num11);
                        Game1.PendingPlayer.skinColor.G = (byte)((float)Game1.rand.Next(110, 140) * num11);
                        Game1.PendingPlayer.skinColor.B = (byte)((float)Game1.rand.Next(75, 110) * num11);
                        Game1.PendingPlayer.underShirtColor = this.randColor();
                        int num12 = Game1.PendingPlayer.hair + 1;
                        if (num12 == 5 || num12 == 6 || num12 == 7 || num12 == 10 || num12 == 12 || num12 == 19 || num12 == 22 || num12 == 23 || num12 == 26 || num12 == 27 || num12 == 30 || num12 == 33)
                        {
                            Game1.PendingPlayer.Male = false;
                        }
                        else
                        {
                            Game1.PendingPlayer.Male = true;
                        }
                        Game1.PendingPlayer.skinVariant = Game1.rand.Next(8);
                    }
                    array9[7] = Lang.menu[27];
                    array9[6] = Lang.menu[28];
                    array9[8] = Lang.menu[5];
                    num4 = 9;
                    if (this.selectedMenu == 8)
                    {
                        Game1.PlaySound(11, -1, -1, 1);
                        Game1.menuMode = 1;
                    }
                    else if (this.selectedMenu == 6)
                    {
                        Game1.PlaySound(10, -1, -1, 1);
                        Game1.PendingPlayer.name = "";
                        Game1.menuMode = 3;
                        Game1.clrInput();
                    }
                }
                else if (Game1.menuMode == 222)
                {
                    if (this.focusMenu == 3)
                    {
                        array9[0] = Lang.menu[29];
                    }
                    else if (this.focusMenu == 2)
                    {
                        array9[0] = Lang.menu[30];
                    }
                    else if (this.focusMenu == 1)
                    {
                        array9[0] = Lang.menu[31];
                    }
                    else
                    {
                        array9[0] = Lang.menu[32];
                    }
                    num3 = 50;
                    array4[1] = 25;
                    array4[2] = 25;
                    array4[3] = 25;
                    array[0] = true;
                    array9[1] = Lang.menu[26];
                    array9[2] = Lang.menu[25];
                    array6[2] = 1;
                    array9[3] = Lang.menu[24];
                    array6[3] = 2;
                    num4 = 4;
                    if (this.selectedMenu == 1)
                    {
                        Game1.PendingPlayer.difficulty = 0;
                        Game1.menuMode = 2;
                    }
                    else if (this.selectedMenu == 2)
                    {
                        Game1.menuMode = 2;
                        Game1.PendingPlayer.difficulty = 1;
                    }
                    else if (this.selectedMenu == 3)
                    {
                        Game1.PendingPlayer.difficulty = 2;
                        Game1.menuMode = 2;
                    }
                }
                else if (Game1.menuMode == 20)
                {
                    flag4 = true;
                    if (this.selectedMenu == 0)
                    {
                        Game1.menuMode = 21;
                        Game1.PlaySound(10, -1, -1, 1);
                        Game1.selColor = Game1.PendingPlayer.shirtColor;
                    }
                    if (this.selectedMenu == 1)
                    {
                        Game1.menuMode = 22;
                        Game1.PlaySound(10, -1, -1, 1);
                        Game1.selColor = Game1.PendingPlayer.underShirtColor;
                    }
                    if (this.selectedMenu == 2)
                    {
                        Game1.menuMode = 23;
                        Game1.PlaySound(10, -1, -1, 1);
                        Game1.selColor = Game1.PendingPlayer.pantsColor;
                    }
                    if (this.selectedMenu == 3)
                    {
                        Game1.selColor = Game1.PendingPlayer.shoeColor;
                        Game1.menuMode = 24;
                        Game1.PlaySound(10, -1, -1, 1);
                    }
                    if (this.selectedMenu == 5)
                    {
                        Game1.PlaySound(11, -1, -1, 1);
                        Game1.menuMode = 2;
                    }
                    if (this.selectedMenu == 4)
                    {
                        Game1.PlaySound(12, -1, -1, 1);
                        if (Game1.PendingPlayer.skinVariant < 4)
                        {
                            Game1.PendingPlayer.skinVariant++;
                            if (Game1.PendingPlayer.skinVariant == 4)
                            {
                                Game1.PendingPlayer.skinVariant = 0;
                            }
                        }
                        else
                        {
                            Game1.PendingPlayer.skinVariant++;
                            if (Game1.PendingPlayer.skinVariant == 8)
                            {
                                Game1.PendingPlayer.skinVariant = 4;
                            }
                        }
                    }
                    num6 = Game1.screenWidth / 2 - 16;
                    num7 = 210;
                    num = 260;
                    num3 = 50;
                    num4 = 6;
                    array9[0] = Lang.menu[33];
                    array9[1] = Lang.menu[34];
                    array9[2] = Lang.menu[35];
                    array9[3] = Lang.menu[36];
                    array9[4] = Lang.menu[127];
                    array9[5] = Lang.menu[5];
                    array4[5] = 20;
                }
                else if (Game1.menuMode == 17)
                {
                    flag4 = true;
                    num6 = Game1.screenWidth / 2 - 16;
                    num7 = 210;
                    flag = true;
                    num8 = 390;
                    num = 260;
                    num3 = 60;
                    Game1.PendingPlayer.hairColor = Game1.selColor;
                    num4 = 3;
                    array9[0] = Lang.menu[37] + " " + (Game1.PendingPlayer.hair + 1);
                    array9[1] = Lang.menu[38];
                    array[1] = true;
                    array4[2] = 150;
                    array4[1] = 10;
                    array9[2] = Lang.menu[5];
                    if (this.selectedMenu == 0)
                    {
                        Game1.PlaySound(12, -1, -1, 1);
                        Game1.PendingPlayer.hair++;
                        if (Game1.PendingPlayer.hair >= 51)
                        {
                            Game1.PendingPlayer.hair = 0;
                        }
                    }
                    else if (this.selectedMenu2 == 0)
                    {
                        Game1.PlaySound(12, -1, -1, 1);
                        Game1.PendingPlayer.hair--;
                        if (Game1.PendingPlayer.hair < 0)
                        {
                            Game1.PendingPlayer.hair = 50;
                        }
                    }
                    if (this.selectedMenu == 2)
                    {
                        Game1.menuMode = 2;
                        Game1.PlaySound(11, -1, -1, 1);
                    }
                }
                else if (Game1.menuMode == 18)
                {
                    flag4 = true;
                    num6 = Game1.screenWidth / 2 - 16;
                    num7 = 210;
                    flag = true;
                    num8 = 370;
                    num = 240;
                    num3 = 60;
                    Game1.PendingPlayer.eyeColor = Game1.selColor;
                    num4 = 3;
                    array9[0] = "";
                    array9[1] = Lang.menu[39];
                    array[1] = true;
                    array4[2] = 170;
                    array4[1] = 10;
                    array9[2] = Lang.menu[5];
                    if (this.selectedMenu == 2)
                    {
                        Game1.menuMode = 2;
                        Game1.PlaySound(11, -1, -1, 1);
                    }
                }
                else if (Game1.menuMode == 19)
                {
                    flag4 = true;
                    num6 = Game1.screenWidth / 2 - 16;
                    num7 = 210;
                    flag = true;
                    num8 = 370;
                    num = 240;
                    num3 = 60;
                    Game1.PendingPlayer.skinColor = Game1.selColor;
                    num4 = 3;
                    array9[0] = "";
                    array9[1] = Lang.menu[40];
                    array[1] = true;
                    array4[2] = 170;
                    array4[1] = 10;
                    array9[2] = Lang.menu[5];
                    if (this.selectedMenu == 2)
                    {
                        Game1.menuMode = 2;
                        Game1.PlaySound(11, -1, -1, 1);
                    }
                }
                else if (Game1.menuMode == 21)
                {
                    flag4 = true;
                    num6 = Game1.screenWidth / 2 - 16;
                    num7 = 210;
                    flag = true;
                    num8 = 370;
                    num = 240;
                    num3 = 60;
                    Game1.PendingPlayer.shirtColor = Game1.selColor;
                    num4 = 3;
                    array9[0] = "";
                    array9[1] = Lang.menu[41];
                    array[1] = true;
                    array4[2] = 170;
                    array4[1] = 10;
                    array9[2] = Lang.menu[5];
                    if (this.selectedMenu == 2)
                    {
                        Game1.menuMode = 20;
                        Game1.PlaySound(11, -1, -1, 1);
                    }
                }
                else if (Game1.menuMode == 22)
                {
                    flag4 = true;
                    num6 = Game1.screenWidth / 2 - 16;
                    num7 = 210;
                    flag = true;
                    num8 = 370;
                    num = 240;
                    num3 = 60;
                    Game1.PendingPlayer.underShirtColor = Game1.selColor;
                    num4 = 3;
                    array9[0] = "";
                    array9[1] = Lang.menu[42];
                    array[1] = true;
                    array4[2] = 170;
                    array4[1] = 10;
                    array9[2] = Lang.menu[5];
                    if (this.selectedMenu == 2)
                    {
                        Game1.menuMode = 20;
                        Game1.PlaySound(11, -1, -1, 1);
                    }
                }
                else if (Game1.menuMode == 23)
                {
                    flag4 = true;
                    num6 = Game1.screenWidth / 2 - 16;
                    num7 = 210;
                    flag = true;
                    num8 = 370;
                    num = 240;
                    num3 = 60;
                    Game1.PendingPlayer.pantsColor = Game1.selColor;
                    num4 = 3;
                    array9[0] = "";
                    array9[1] = Lang.menu[43];
                    array[1] = true;
                    array4[2] = 170;
                    array4[1] = 10;
                    array9[2] = Lang.menu[5];
                    if (this.selectedMenu == 2)
                    {
                        Game1.menuMode = 20;
                        Game1.PlaySound(11, -1, -1, 1);
                    }
                }
                else if (Game1.menuMode == 24)
                {
                    flag4 = true;
                    num6 = Game1.screenWidth / 2 - 16;
                    num7 = 210;
                    flag = true;
                    num8 = 370;
                    num = 240;
                    num3 = 60;
                    Game1.PendingPlayer.shoeColor = Game1.selColor;
                    num4 = 3;
                    array9[0] = "";
                    array9[1] = Lang.menu[44];
                    array[1] = true;
                    array4[2] = 170;
                    array4[1] = 10;
                    array9[2] = Lang.menu[5];
                    if (this.selectedMenu == 2)
                    {
                        Game1.menuMode = 20;
                        Game1.PlaySound(11, -1, -1, 1);
                    }
                }
                else if (Game1.menuMode == 3)
                {
                    string name = Game1.PendingPlayer.name;
                    Game1.PendingPlayer.name = Game1.GetInputText(Game1.PendingPlayer.name);
                    if (Game1.PendingPlayer.name.Length > Player.nameLen)
                    {
                        Game1.PendingPlayer.name = Game1.PendingPlayer.name.Substring(0, Player.nameLen);
                    }
                    if (name != Game1.PendingPlayer.name)
                    {
                        Game1.PlaySound(12, -1, -1, 1);
                    }
                    array9[0] = Lang.menu[45];
                    array2[2] = true;
                    if (Game1.PendingPlayer.name != "")
                    {
                        if (Game1.PendingPlayer.name.Substring(0, 1) == " ")
                        {
                            Game1.PendingPlayer.name = "";
                        }
                        for (int num13 = 0; num13 < Game1.PendingPlayer.name.Length; num13++)
                        {
                            if (Game1.PendingPlayer.name.Substring(num13, 1) != " ")
                            {
                                array2[2] = false;
                            }
                        }
                    }
                    this.textBlinkerCount++;
                    if (this.textBlinkerCount >= 20)
                    {
                        if (this.textBlinkerState == 0)
                        {
                            this.textBlinkerState = 1;
                        }
                        else
                        {
                            this.textBlinkerState = 0;
                        }
                        this.textBlinkerCount = 0;
                    }
                    array9[1] = Game1.PendingPlayer.name;
                    if (this.textBlinkerState == 1)
                    {
                        string[] array10;
                        (array10 = array9)[1] = array10[1] + "|";
                        array5[1] = 1;
                    }
                    else
                    {
                        string[] array10;
                        (array10 = array9)[1] = array10[1] + " ";
                    }
                    array[0] = true;
                    array[1] = true;
                    array4[1] = -20;
                    array4[2] = 20;
                    array9[2] = Lang.menu[4];
                    array9[3] = Lang.menu[5];
                    num4 = 4;
                    if (this.selectedMenu == 3)
                    {
                        Game1.PlaySound(11, -1, -1, 1);
                        Game1.menuMode = 2;
                    }
                    if (this.selectedMenu == 2 || (!array2[2] && Game1.inputTextEnter))
                    {
                        Game1.PendingPlayer.name.Trim();
                        PlayerFileData.CreateAndSave(Game1.PendingPlayer);
                        Game1.LoadPlayers();
                        Game1.PlaySound(10, -1, -1, 1);
                        Game1.menuMode = 1;
                    }
                }
                else if (Game1.menuMode != 4)
                {
                    if (Game1.menuMode == 5)
                    {
                        array9[0] = Lang.menu[46] + " " + Game1.PlayerList[Game1.selectedPlayer].Player.name + "?";
                        array[0] = true;
                        array9[1] = Lang.menu[104];
                        array9[2] = Lang.menu[105];
                        num4 = 3;
                        if (this.selectedMenu == 1)
                        {
                            Game1.ErasePlayer(Game1.selectedPlayer);
                            Game1.PlaySound(10, -1, -1, 1);
                            Game1.menuMode = 1;
                        }
                        else if (this.selectedMenu == 2)
                        {
                            Game1.PlaySound(11, -1, -1, 1);
                            Game1.menuMode = 1;
                        }
                    }
                    else if (Game1.menuMode == 6)
                    {
                        Game1.MenuUI.SetState(Game1._worldSelectMenu);
                        Game1.menuMode = 888;
                    }
                    else if (Game1.menuMode == -7)
                    {
                        num = 200;
                        num3 = 60;
                        array4[2] = 30;
                        array4[3] = 30;
                        array6[3] = 2;
                        array4[4] = 70;
                        if (this.focusMenu == 2)
                        {
                            array9[0] = "Your Journey Begins...";
                            array9[1] = "(The standard Terraria Experience)";
                        }
                        else if (this.focusMenu == 3)
                        {
                            array9[0] = "Fortune & Glory, Kid.";
                            array9[1] = "(Far Greater Difficulty & Loot)";
                        }
                        else
                        {
                            array9[0] = Lang.menu[32];
                        }
                        array[0] = true;
                        array[1] = true;
                        array9[2] = "Normal";
                        array9[3] = "Expert";
                        array9[4] = "Back";
                        num4 = 5;
                        if (this.selectedMenu == 2)
                        {
                            Game1.expertMode = false;
                            Game1.PlaySound(10, -1, -1, 1);
                            Game1.menuMode = 7;
                        }
                        else if (this.selectedMenu == 3)
                        {
                            Game1.expertMode = true;
                            Game1.PlaySound(10, -1, -1, 1);
                            Game1.menuMode = 7;
                        }
                        else if (this.selectedMenu == 4)
                        {
                            Game1.PlaySound(11, -1, -1, 1);
                            Game1.menuMode = 16;
                        }
                        Game1.clrInput();
                    }
                    else if (Game1.menuMode == 7)
                    {
                        string a = Game1.newWorldName;
                        Game1.newWorldName = Game1.GetInputText(Game1.newWorldName);
                        if (Game1.newWorldName.Length > 20)
                        {
                            Game1.newWorldName = Game1.newWorldName.Substring(0, 20);
                        }
                        if (a != Game1.newWorldName)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                        }
                        array9[0] = Lang.menu[48];
                        array2[2] = true;
                        if (Game1.newWorldName != "")
                        {
                            if (Game1.newWorldName.Substring(0, 1) == " ")
                            {
                                Game1.newWorldName = "";
                            }
                            for (int num14 = 0; num14 < Game1.newWorldName.Length; num14++)
                            {
                                if (Game1.newWorldName != " ")
                                {
                                    array2[2] = false;
                                }
                            }
                        }
                        this.textBlinkerCount++;
                        if (this.textBlinkerCount >= 20)
                        {
                            if (this.textBlinkerState == 0)
                            {
                                this.textBlinkerState = 1;
                            }
                            else
                            {
                                this.textBlinkerState = 0;
                            }
                            this.textBlinkerCount = 0;
                        }
                        array9[1] = Game1.newWorldName;
                        if (this.textBlinkerState == 1)
                        {
                            string[] array10;
                            (array10 = array9)[1] = array10[1] + "|";
                            array5[1] = 1;
                        }
                        else
                        {
                            string[] array10;
                            (array10 = array9)[1] = array10[1] + " ";
                        }
                        array[0] = true;
                        array[1] = true;
                        array4[1] = -20;
                        array4[2] = 20;
                        array9[2] = Lang.menu[4];
                        array9[3] = Lang.menu[5];
                        num4 = 4;
                        if (this.selectedMenu == 3)
                        {
                            Game1.PlaySound(11, -1, -1, 1);
                            Game1.menuMode = -7;
                        }
                        if (this.selectedMenu == 2 || (!array2[2] && Game1.inputTextEnter))
                        {
                            Game1.menuMode = 10;
                            Game1.worldName = Game1.newWorldName;
                            Game1.ActiveWorldFileData = WorldFile.CreateMetadata(Game1.worldName, false, Game1.expertMode);
                            WorldGen.CreateNewWorld(null);
                        }
                    }
                    else if (Game1.menuMode == 8)
                    {
                        num = 180;
                        num3 = 40;
                        num4 = 8;
                        array4[7] += 30;
                        for (int num15 = 0; num15 < num4; num15++)
                        {
                            array7[num15] = 0.8f;
                        }
                        array9[7] = Lang.menu[5];
                        for (int num16 = 0; num16 < 7; num16++)
                        {
                            if (num16 < Game1.WorldList.Count)
                            {
                                array9[num16] = Game1.WorldList[num16 + Game1.menuSkip].Name;
                                if (Game1.WorldList[num16 + Game1.menuSkip].IsExpertMode)
                                {
                                    array6[num16] = 2;
                                }
                            }
                            else
                            {
                                array9[num16] = null;
                            }
                        }
                        if (Game1.WorldList.Count > 7 + Game1.menuSkip)
                        {
                            array9[6] = "more";
                            array9[6] = "▼";
                            array7[6] = 0.6f;
                            array4[6] += 8;
                            this.menuWide[6] = true;
                        }
                        if (Game1.menuSkip > 0)
                        {
                            array9[0] = "▲";
                            array7[0] = 0.6f;
                            array4[0] += 8;
                            this.menuWide[0] = true;
                        }
                        if (this.selectedMenu == 0 && Game1.menuSkip > 0)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                            Game1.menuSkip -= 5;
                            if (Game1.menuSkip < 0)
                            {
                                Game1.menuSkip = 0;
                            }
                        }
                        else if (this.selectedMenu == 6 && Game1.menuSkip < Game1.WorldList.Count - 7)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                            Game1.menuSkip += 5;
                            if (Game1.menuSkip >= Game1.PlayerList.Count - 7)
                            {
                                Game1.menuSkip = Game1.WorldList.Count - 7;
                            }
                        }
                        else if (this.selectedMenu == 7)
                        {
                            Game1.PlaySound(11, -1, -1, 1);
                            Game1.menuMode = 6;
                        }
                        else if (this.selectedMenu >= 0)
                        {
                            Game1.selectedWorld = this.selectedMenu + Game1.menuSkip;
                            Game1.PlaySound(10, -1, -1, 1);
                            Game1.menuMode = 9;
                        }
                    }
                    else if (Game1.menuMode == 9)
                    {
                        array9[0] = Lang.menu[46] + " " + Game1.WorldList[Game1.selectedWorld].Name + "?";
                        array[0] = true;
                        array9[1] = Lang.menu[104];
                        array9[2] = Lang.menu[105];
                        num4 = 3;
                        if (this.selectedMenu == 1)
                        {
                            Game1.EraseWorld(Game1.selectedWorld);
                            Game1.PlaySound(10, -1, -1, 1);
                            Game1.menuMode = 6;
                        }
                        else if (this.selectedMenu == 2)
                        {
                            Game1.PlaySound(11, -1, -1, 1);
                            Game1.menuMode = 6;
                        }
                    }
                    else if (Game1.menuMode == 1111)
                    {
                        num = 210;
                        num3 = 40;
                        for (int num17 = 0; num17 < 8; num17++)
                        {
                            array7[num17] = 0.8f;
                        }
                        array4[8] = 10;
                        num4 = 9;
                        if (Game1.graphics.IsFullScreen)
                        {
                            array9[0] = Lang.menu[49];
                        }
                        else
                        {
                            array9[0] = Lang.menu[50];
                        }
                        Game1.bgScroll = (int)Math.Round((double)((1f - Game1.caveParallax) * 500f));
                        array9[1] = Lang.menu[51];
                        array9[2] = Lang.menu[52];
                        if (Game1.terrariasFixedTiming)
                        {
                            array9[3] = Lang.menu[53];
                        }
                        else
                        {
                            array9[3] = Lang.menu[54];
                        }
                        if (Lighting.lightMode == 0)
                        {
                            array9[4] = Lang.menu[55];
                        }
                        else if (Lighting.lightMode == 1)
                        {
                            array9[4] = Lang.menu[56];
                        }
                        else if (Lighting.lightMode == 2)
                        {
                            array9[4] = Lang.menu[57];
                        }
                        else if (Lighting.lightMode == 3)
                        {
                            array9[4] = Lang.menu[58];
                        }
                        if (Lighting.LightingThreads == 0)
                        {
                            array9[5] = Lang.menu[116] + " " + Lang.menu[117];
                        }
                        else
                        {
                            array9[5] = Lang.menu[116] + " " + (Lighting.LightingThreads + 1);
                        }
                        if (Game1.qaStyle == 0)
                        {
                            array9[6] = Lang.menu[59];
                        }
                        else if (Game1.qaStyle == 1)
                        {
                            array9[6] = Lang.menu[60];
                        }
                        else if (Game1.qaStyle == 2)
                        {
                            array9[6] = Lang.menu[61];
                        }
                        else
                        {
                            array9[6] = Lang.menu[62];
                        }
                        if (Game1.owBack)
                        {
                            array9[7] = Lang.menu[100];
                        }
                        else
                        {
                            array9[7] = Lang.menu[101];
                        }
                        if (this.selectedMenu == 7)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                            if (Game1.owBack)
                            {
                                Game1.owBack = false;
                            }
                            else
                            {
                                Game1.owBack = true;
                            }
                        }
                        array9[8] = Lang.menu[5];
                        if (this.selectedMenu == 8)
                        {
                            Game1.PlaySound(11, -1, -1, 1);
                            Game1.SaveSettings();
                            Game1.menuMode = 11;
                        }
                        if (this.selectedMenu == 6)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                            Game1.qaStyle++;
                            if (Game1.qaStyle > 3)
                            {
                                Game1.qaStyle = 0;
                            }
                        }
                        if (this.selectedMenu == 5)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                            Lighting.LightingThreads++;
                            if (Lighting.LightingThreads > Environment.ProcessorCount - 1)
                            {
                                Lighting.LightingThreads = 0;
                            }
                        }
                        if (this.selectedMenu == 4)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                            Lighting.lightMode++;
                            if (Lighting.lightMode >= 4)
                            {
                                Lighting.lightMode = 0;
                            }
                        }
                        if (this.selectedMenu == 3)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                            if (Game1.terrariasFixedTiming)
                            {
                                Game1.terrariasFixedTiming = false;
                            }
                            else
                            {
                                Game1.terrariasFixedTiming = true;
                            }
                        }
                        if (this.selectedMenu == 2)
                        {
                            Game1.PlaySound(11, -1, -1, 1);
                            Game1.menuMode = 28;
                        }
                        if (this.selectedMenu == 1)
                        {
                            Game1.PlaySound(10, -1, -1, 1);
                            Game1.menuMode = 111;
                        }
                        if (this.selectedMenu == 0)
                        {
                            Game1.ToggleFullScreen();
                        }
                    }
                    else if (Game1.menuMode == 11)
                    {
                        num = 240;
                        num3 = 37;
                        num4 = 8;
                        array4[num4 - 1] = 8;
                        for (int num18 = 0; num18 < num4; num18++)
                        {
                            array7[num18] = 0.73f;
                        }
                        int num19 = 0;
                        array9[num19] = Lang.menu[114];
                        if (this.selectedMenu == num19)
                        {
                            Game1.PlaySound(10, -1, -1, 1);
                            Game1.menuMode = 112;
                        }
                        num19++;
                        array9[num19] = Lang.menu[63];
                        if (this.selectedMenu == num19)
                        {
                            Game1.PlaySound(10, -1, -1, 1);
                            Game1.menuMode = 1111;
                        }
                        num19++;
                        array9[num19] = Lang.menu[64];
                        if (this.selectedMenu == num19)
                        {
                            Game1.PlaySound(10, -1, -1, 1);
                            Game1.selColor = Game1.mouseColor;
                            Game1.menuMode = 25;
                        }
                        num19++;
                        array9[num19] = Lang.menu[65];
                        if (this.selectedMenu == num19)
                        {
                            Game1.PlaySound(11, -1, -1, 1);
                            Game1.menuMode = 26;
                        }
                        num19++;
                        array9[num19] = Lang.menu[66];
                        if (this.selectedMenu == num19)
                        {
                            Game1.PlaySound(11, -1, -1, 1);
                            Game1.menuMode = 27;
                        }
                        num19++;
                        array9[num19] = Lang.menu[115];
                        if (this.selectedMenu == num19)
                        {
                            Game1.PlaySound(11, -1, -1, 1);
                            Game1.menuMode = 272727;
                        }
                        num19++;
                        array9[num19] = Lang.menu[103];
                        if (this.selectedMenu == num19)
                        {
                            Game1.PlaySound(10, -1, -1, 1);
                            Game1.menuMode = 1213;
                        }
                        num19++;
                        array9[num19] = Lang.menu[5];
                        if (this.selectedMenu == num19)
                        {
                            Game1.PlaySound(11, -1, -1, 1);
                            Game1.SaveSettings();
                            Game1.menuMode = 0;
                        }
                    }
                    else if (Game1.menuMode == 112)
                    {
                        num = 220;
                        num3 = 34;
                        num4 = 10;
                        array4[num4 - 1] = 18;
                        for (int num20 = 0; num20 < num4; num20++)
                        {
                            array7[num20] = 0.73f;
                        }
                        int num21 = 0;
                        if (Game1.autoSave)
                        {
                            array9[num21] = Lang.menu[67];
                        }
                        else
                        {
                            array9[num21] = Lang.menu[68];
                        }
                        if (this.selectedMenu == num21)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                            if (Game1.autoSave)
                            {
                                Game1.autoSave = false;
                            }
                            else
                            {
                                Game1.autoSave = true;
                            }
                        }
                        num21++;
                        if (Game1.autoPause)
                        {
                            array9[num21] = Lang.menu[69];
                        }
                        else
                        {
                            array9[num21] = Lang.menu[70];
                        }
                        if (this.selectedMenu == num21)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                            if (Game1.autoPause)
                            {
                                Game1.autoPause = false;
                            }
                            else
                            {
                                Game1.autoPause = true;
                            }
                        }
                        num21++;
                        if (Game1.showItemText)
                        {
                            array9[num21] = Lang.menu[71];
                        }
                        else
                        {
                            array9[num21] = Lang.menu[72];
                        }
                        if (this.selectedMenu == num21)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                            if (Game1.showItemText)
                            {
                                Game1.showItemText = false;
                            }
                            else
                            {
                                Game1.showItemText = true;
                            }
                        }
                        num21++;
                        if (Game1.mapEnabled)
                        {
                            array9[num21] = Lang.menu[112];
                        }
                        else
                        {
                            array9[num21] = Lang.menu[113];
                        }
                        if (this.selectedMenu == num21)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                            if (Game1.mapEnabled)
                            {
                                Game1.mapEnabled = false;
                            }
                            else
                            {
                                Game1.mapEnabled = true;
                            }
                        }
                        num21++;
                        array9[num21] = (Game1.cSmartToggle ? Lang.menu[121] : Lang.menu[122]);
                        if (this.selectedMenu == num21)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                            Game1.cSmartToggle = !Game1.cSmartToggle;
                        }
                        num21++;
                        array9[num21] = Lang.menu[123] + " " + Lang.menu[124 + Game1.invasionProgressMode];
                        if (this.selectedMenu == num21)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                            Game1.invasionProgressMode++;
                            if (Game1.invasionProgressMode >= 3)
                            {
                                Game1.invasionProgressMode = 0;
                            }
                        }
                        num21++;
                        array9[num21] = (Game1.placementPreview ? Lang.menu[128] : Lang.menu[129]);
                        if (this.selectedMenu == num21)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                            Game1.placementPreview = !Game1.placementPreview;
                        }
                        num21++;
                        array9[num21] = (ChildSafety.Disabled ? Lang.menu[132] : Lang.menu[133]);
                        if (this.selectedMenu == num21)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                            ChildSafety.Disabled = !ChildSafety.Disabled;
                        }
                        num21++;
                        array9[num21] = (ItemSlot.Options.HighlightNewItems ? Lang.inter[117] : Lang.inter[116]);
                        if (this.selectedMenu == num21)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                            ItemSlot.Options.HighlightNewItems = !ItemSlot.Options.HighlightNewItems;
                        }
                        num21++;
                        array9[num21] = Lang.menu[5];
                        if (this.selectedMenu == num21)
                        {
                            Game1.menuMode = 11;
                            Game1.PlaySound(11, -1, -1, 1);
                        }
                    }
                    else if (Game1.menuMode == 111)
                    {
                        num = 240;
                        num3 = 60;
                        num4 = 4;
                        array9[0] = Lang.menu[73];
                        array9[1] = Game1.PendingResolutionWidth + "x" + Game1.PendingResolutionHeight;
                        array9[2] = Lang.menu[134];
                        array9[3] = Lang.menu[5];
                        array[0] = true;
                        array4[1] = 10;
                        array4[2] = 140;
                        array4[3] = 140;
                        if (this.selectedMenu == 1)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                            int num22 = 0;
                            for (int num23 = 0; num23 < Game1.numDisplayModes; num23++)
                            {
                                if (Game1.displayWidth[num23] == Game1.PendingResolutionWidth && Game1.displayHeight[num23] == Game1.PendingResolutionHeight)
                                {
                                    num22 = num23;
                                    break;
                                }
                            }
                            num22 = (num22 + 1) % Game1.numDisplayModes;
                            Game1.PendingResolutionWidth = Game1.displayWidth[num22];
                            Game1.PendingResolutionHeight = Game1.displayHeight[num22];
                        }
                        if (this.selectedMenu == 2)
                        {
                            if (Game1.graphics.IsFullScreen)
                            {
                                Game1.SetResolution(Game1.PendingResolutionWidth, Game1.PendingResolutionHeight);
                            }
                            Game1.PlaySound(11, -1, -1, 1);
                            Game1.menuMode = 1111;
                        }
                        if (this.selectedMenu == 3)
                        {
                            Game1.PendingResolutionWidth = Game1.graphics.PreferredBackBufferWidth;
                            Game1.PendingResolutionHeight = Game1.graphics.PreferredBackBufferHeight;
                            Game1.menuMode = 1111;
                            Game1.PlaySound(11, -1, -1, 1);
                        }
                    }
                    else if (Game1.menuMode == 25)
                    {
                        flag = true;
                        num8 = 370;
                        num = 240;
                        num3 = 60;
                        Game1.mouseColor = Game1.selColor;
                        num4 = 3;
                        array9[0] = "";
                        array9[1] = Lang.menu[64];
                        array[1] = true;
                        array4[2] = 170;
                        array4[1] = 10;
                        array9[2] = Lang.menu[5];
                        if (this.selectedMenu == 2)
                        {
                            Game1.menuMode = 11;
                            Game1.PlaySound(11, -1, -1, 1);
                        }
                    }
                    else if (Game1.menuMode == 26)
                    {
                        flag2 = true;
                        num = 240;
                        num3 = 60;
                        num4 = 3;
                        array9[0] = "";
                        array9[1] = Lang.menu[65];
                        array[1] = true;
                        array4[2] = 170;
                        array4[1] = 10;
                        array9[2] = Lang.menu[5];
                        if (this.selectedMenu == 2)
                        {
                            Game1.menuMode = 11;
                            Game1.PlaySound(11, -1, -1, 1);
                        }
                    }
                    else if (Game1.menuMode == 28)
                    {
                        Game1.caveParallax = 1f - (float)Game1.bgScroll / 500f;
                        flag3 = true;
                        num = 240;
                        num3 = 60;
                        num4 = 3;
                        array9[0] = "";
                        array9[1] = Lang.menu[52];
                        array[1] = true;
                        array4[2] = 170;
                        array4[1] = 10;
                        array9[2] = Lang.menu[5];
                        if (this.selectedMenu == 2)
                        {
                            Game1.menuMode = 1111;
                            Game1.PlaySound(11, -1, -1, 1);
                        }
                    }
                    else if (Game1.menuMode == 272727)
                    {
                        num = 200;
                        num3 = 30;
                        num4 = 14;
                        string[] array11 = new string[12];
                        array11[0] = Game1.cMapStyle;
                        array11[1] = Game1.cMapFull;
                        array11[2] = Game1.cMapZoomIn;
                        array11[3] = Game1.cMapZoomOut;
                        array11[4] = Game1.cMapAlphaUp;
                        array11[5] = Game1.cMapAlphaDown;
                        if (Game1.setKey >= 0)
                        {
                            array11[Game1.setKey] = "_";
                        }
                        array9[0] = Lang.menu[106] + array11[0];
                        array9[1] = Lang.menu[107] + array11[1];
                        array9[2] = Lang.menu[108] + array11[2];
                        array9[3] = Lang.menu[109] + array11[3];
                        array9[4] = Lang.menu[110] + array11[4];
                        array9[5] = Lang.menu[111] + array11[5];
                        for (int num24 = 0; num24 < 6; num24++)
                        {
                            array8[num24] = true;
                            array7[num24] = 0.55f;
                            array5[num24] = -140;
                        }
                        array7[6] = 0.8f;
                        array7[6] = 0.8f;
                        array4[6] = 6;
                        array9[6] = Lang.menu[86];
                        array4[7] = 16;
                        array9[7] = Lang.menu[5];
                        if (this.selectedMenu == 7)
                        {
                            Game1.menuMode = 11;
                            Game1.PlaySound(11, -1, -1, 1);
                        }
                        else if (this.selectedMenu == 6)
                        {
                            Game1.cMapStyle = "Tab";
                            Game1.cMapFull = "M";
                            Game1.cMapZoomIn = "Add";
                            Game1.cMapZoomOut = "Subtract";
                            Game1.cMapAlphaUp = "PageUp";
                            Game1.cMapAlphaDown = "PageDown";
                            Game1.setKey = -1;
                            Game1.PlaySound(11, -1, -1, 1);
                        }
                        else if (this.selectedMenu >= 0)
                        {
                            Game1.setKey = this.selectedMenu;
                        }
                        if (Game1.setKey >= 0)
                        {
                            Microsoft.Xna.Framework.Input.Keys[] pressedKeys = Game1.keyState.GetPressedKeys();
                            if (pressedKeys.Length > 0)
                            {
                                string a2 = string.Concat(pressedKeys[0]);
                                if (a2 != "None")
                                {
                                    if (Game1.setKey == 0)
                                    {
                                        Game1.cMapStyle = a2;
                                    }
                                    if (Game1.setKey == 1)
                                    {
                                        Game1.cMapFull = a2;
                                    }
                                    if (Game1.setKey == 2)
                                    {
                                        Game1.cMapZoomIn = a2;
                                    }
                                    if (Game1.setKey == 3)
                                    {
                                        Game1.cMapZoomOut = a2;
                                    }
                                    if (Game1.setKey == 4)
                                    {
                                        Game1.cMapAlphaUp = a2;
                                    }
                                    if (Game1.setKey == 5)
                                    {
                                        Game1.cMapAlphaDown = a2;
                                    }
                                    Game1.setKey = -1;
                                }
                            }
                        }
                    }
                    else if (Game1.menuMode == 27)
                    {
                        num = 176;
                        num3 = 22;
                        num4 = 16;
                        string[] array12 = new string[]
                        {
                            Game1.cUp,
                            Game1.cDown,
                            Game1.cLeft,
                            Game1.cRight,
                            Game1.cJump,
                            Game1.cThrowItem,
                            Game1.cInv,
                            Game1.cHeal,
                            Game1.cMana,
                            Game1.cBuff,
                            Game1.cHook,
                            Game1.cTorch,
                            Game1.cSmart,
                            Game1.cMount
                        };
                        if (Game1.setKey >= 0)
                        {
                            array12[Game1.setKey] = "_";
                        }
                        array9[0] = Lang.menu[74] + array12[0];
                        array9[1] = Lang.menu[75] + array12[1];
                        array9[2] = Lang.menu[76] + array12[2];
                        array9[3] = Lang.menu[77] + array12[3];
                        array9[4] = Lang.menu[78] + array12[4];
                        array9[5] = Lang.menu[79] + array12[5];
                        array9[6] = Lang.menu[80] + array12[6];
                        array9[7] = Lang.menu[81] + array12[7];
                        array9[8] = Lang.menu[82] + array12[8];
                        array9[9] = Lang.menu[83] + array12[9];
                        array9[10] = Lang.menu[84] + array12[10];
                        array9[11] = Lang.menu[85] + array12[11];
                        array9[12] = Lang.menu[120] + array12[12];
                        array9[13] = Lang.menu[130] + array12[13];
                        for (int num25 = 0; num25 < 14; num25++)
                        {
                            array8[num25] = true;
                            array7[num25] = 0.45f;
                            array5[num25] = -80;
                        }
                        array7[14] = 0.8f;
                        array4[14] = 6;
                        array9[14] = Lang.menu[86];
                        array7[15] = 0.8f;
                        array4[15] = 16;
                        array9[15] = Lang.menu[5];
                        if (this.selectedMenu == 15)
                        {
                            Game1.menuMode = 11;
                            Game1.PlaySound(11, -1, -1, 1);
                        }
                        else if (this.selectedMenu == 14)
                        {
                            Game1.ResetKeyBindings();
                            Game1.setKey = -1;
                            Game1.PlaySound(11, -1, -1, 1);
                        }
                        else if (this.selectedMenu >= 0)
                        {
                            Game1.setKey = this.selectedMenu;
                        }
                        if (Game1.setKey >= 0)
                        {
                            Microsoft.Xna.Framework.Input.Keys[] pressedKeys2 = Game1.keyState.GetPressedKeys();
                            if (pressedKeys2.Length > 0)
                            {
                                string a3 = string.Concat(pressedKeys2[0]);
                                if (a3 != "None")
                                {
                                    if (Game1.setKey == 0)
                                    {
                                        Game1.cUp = a3;
                                    }
                                    if (Game1.setKey == 1)
                                    {
                                        Game1.cDown = a3;
                                    }
                                    if (Game1.setKey == 2)
                                    {
                                        Game1.cLeft = a3;
                                    }
                                    if (Game1.setKey == 3)
                                    {
                                        Game1.cRight = a3;
                                    }
                                    if (Game1.setKey == 4)
                                    {
                                        Game1.cJump = a3;
                                    }
                                    if (Game1.setKey == 5)
                                    {
                                        Game1.cThrowItem = a3;
                                    }
                                    if (Game1.setKey == 6)
                                    {
                                        Game1.cInv = a3;
                                    }
                                    if (Game1.setKey == 7)
                                    {
                                        Game1.cHeal = a3;
                                    }
                                    if (Game1.setKey == 8)
                                    {
                                        Game1.cMana = a3;
                                    }
                                    if (Game1.setKey == 9)
                                    {
                                        Game1.cBuff = a3;
                                    }
                                    if (Game1.setKey == 10)
                                    {
                                        Game1.cHook = a3;
                                    }
                                    if (Game1.setKey == 11)
                                    {
                                        Game1.cTorch = a3;
                                    }
                                    if (Game1.setKey == 12)
                                    {
                                        Game1.cSmart = a3;
                                    }
                                    if (Game1.setKey == 13)
                                    {
                                        Game1.cMount = a3;
                                    }
                                    Game1.setKey = -1;
                                }
                            }
                        }
                    }
                    else if (Game1.menuMode == 12)
                    {
                        int num26 = 0;
                        Game1.menuServer = false;
                        array9[0] = Lang.menu[87];
                        array9[1] = Lang.menu[139];
                        array9[1 + num26] = Lang.menu[88];
                        array9[2 + num26] = Lang.menu[5];
                        if (this.selectedMenu == 0)
                        {
                            Game1.LoadPlayers();
                            Game1.menuMultiplayer = true;
                            Game1.PlaySound(10, -1, -1, 1);
                            Game1.menuMode = 1;
                        }
                        else if (this.selectedMenu == 1 + num26)
                        {
                            Game1.LoadPlayers();
                            Game1.PlaySound(10, -1, -1, 1);
                            Game1.menuMode = 1;
                            Game1.menuMultiplayer = true;
                            Game1.menuServer = true;
                        }
                        else if (this.selectedMenu == 1)
                        {
                            Game1.PlaySound(10, -1, -1, 1);
                        }
                        else if (this.selectedMenu == 2 + num26)
                        {
                            Game1.PlaySound(11, -1, -1, 1);
                            Game1.menuMode = 0;
                        }
                        num4 = 3 + num26;
                    }
                    else if (Game1.menuMode == 13)
                    {
                        string a4 = Game1.getIP;
                        Game1.getIP = Game1.GetInputText(Game1.getIP);
                        if (a4 != Game1.getIP)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                        }
                        array9[0] = Lang.menu[89];
                        array2[9] = true;
                        if (Game1.getIP != "")
                        {
                            if (Game1.getIP.Substring(0, 1) == " ")
                            {
                                Game1.getIP = "";
                            }
                            for (int num27 = 0; num27 < Game1.getIP.Length; num27++)
                            {
                                if (Game1.getIP != " ")
                                {
                                    array2[9] = false;
                                }
                            }
                        }
                        this.textBlinkerCount++;
                        if (this.textBlinkerCount >= 20)
                        {
                            if (this.textBlinkerState == 0)
                            {
                                this.textBlinkerState = 1;
                            }
                            else
                            {
                                this.textBlinkerState = 0;
                            }
                            this.textBlinkerCount = 0;
                        }
                        array9[1] = Game1.getIP;
                        if (this.textBlinkerState == 1)
                        {
                            string[] array10;
                            (array10 = array9)[1] = array10[1] + "|";
                            array5[1] = 1;
                        }
                        else
                        {
                            string[] array10;
                            (array10 = array9)[1] = array10[1] + " ";
                        }
                        array[0] = true;
                        array[1] = true;
                        array4[9] = 44;
                        array4[10] = 64;
                        array9[9] = Lang.menu[4];
                        array9[10] = Lang.menu[5];
                        num4 = 11;
                        num = 180;
                        num3 = 30;
                        array4[1] = 19;
                        for (int num28 = 2; num28 < 9; num28++)
                        {
                            int num29 = num28 - 2;
                            if (Game1.recentWorld[num29] != null && Game1.recentWorld[num29] != "")
                            {
                                array9[num28] = string.Concat(new object[]
                                {
                                    Game1.recentWorld[num29],
                                    " (",
                                    Game1.recentIP[num29],
                                    ":",
                                    Game1.recentPort[num29],
                                    ")"
                                });
                            }
                            else
                            {
                                array9[num28] = "";
                                array[num28] = true;
                            }
                            array7[num28] = 0.6f;
                            array4[num28] = 40;
                        }
                        if (this.selectedMenu >= 2 && this.selectedMenu < 9)
                        {
                            Game1.autoPass = false;
                            int num30 = this.selectedMenu - 2;
                            Netplay.ListenPort = Game1.recentPort[num30];
                            Game1.getIP = Game1.recentIP[num30];
                            if (Netplay.SetRemoteIP(Game1.getIP))
                            {
                                Game1.menuMode = 10;
                                Netplay.StartTcpClient();
                            }
                        }
                        if (this.selectedMenu == 10)
                        {
                            Game1.PlaySound(11, -1, -1, 1);
                            Game1.menuMode = 1;
                        }
                        if (this.selectedMenu == 9 || (!array2[2] && Game1.inputTextEnter))
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                            Game1.menuMode = 131;
                            Game1.clrInput();
                        }
                    }
                    else if (Game1.menuMode == 131)
                    {
                        int num31 = 7777;
                        string a5 = Game1.getPort;
                        Game1.getPort = Game1.GetInputText(Game1.getPort);
                        if (a5 != Game1.getPort)
                        {
                            Game1.PlaySound(12, -1, -1, 1);
                        }
                        array9[0] = Lang.menu[90];
                        array2[2] = true;
                        if (Game1.getPort != "")
                        {
                            bool flag6 = false;
                            try
                            {
                                num31 = Convert.ToInt32(Game1.getPort);
                                if (num31 > 0 && num31 <= 65535)
                                {
                                    flag6 = true;
                                }
                            }
                            catch
                            {
                            }
                            if (flag6)
                            {
                                array2[2] = false;
                            }
                        }
                        this.textBlinkerCount++;
                        if (this.textBlinkerCount >= 20)
                        {
                            if (this.textBlinkerState == 0)
                            {
                                this.textBlinkerState = 1;
                            }
                            else
                            {
                                this.textBlinkerState = 0;
                            }
                            this.textBlinkerCount = 0;
                        }
                        array9[1] = Game1.getPort;
                        if (this.textBlinkerState == 1)
                        {
                            string[] array10;
                            (array10 = array9)[1] = array10[1] + "|";
                            array5[1] = 1;
                        }
                        else
                        {
                            string[] array10;
                            (array10 = array9)[1] = array10[1] + " ";
                        }
                        array[0] = true;
                        array[1] = true;
                        array4[1] = -20;
                        array4[2] = 20;
                        array9[2] = Lang.menu[4];
                        array9[3] = Lang.menu[5];
                        num4 = 4;
                        if (this.selectedMenu == 3)
                        {
                            Game1.PlaySound(11, -1, -1, 1);
                            Game1.menuMode = 1;
                        }
                        if (this.selectedMenu == 2 || (!array2[2] && Game1.inputTextEnter))
                        {
                            Netplay.ListenPort = num31;
                            Game1.autoPass = false;
                            if (Netplay.SetRemoteIP(Game1.getIP))
                            {
                                Game1.menuMode = 10;
                                Netplay.StartTcpClient();
                            }
                        }
                    }
                    else if (Game1.menuMode == 16)
                    {
                        num = 200;
                        num3 = 60;
                        array4[1] = 30;
                        array4[2] = 30;
                        array4[3] = 30;
                        array4[4] = 70;
                        array9[0] = Lang.menu[91];
                        array[0] = true;
                        array9[1] = Lang.menu[92];
                        array9[2] = Lang.menu[93];
                        array9[3] = Lang.menu[94];
                        array9[4] = Lang.menu[5];
                        num4 = 5;
                        if (this.selectedMenu == 4)
                        {
                            Game1.menuMode = 6;
                            Game1.PlaySound(11, -1, -1, 1);
                        }
                        else if (this.selectedMenu > 0)
                        {
                            if (this.selectedMenu == 1)
                            {
                                Game1.maxTilesX = 4200;
                                Game1.maxTilesY = 1200;
                            }
                            else if (this.selectedMenu == 2)
                            {
                                Game1.maxTilesX = 6400;
                                Game1.maxTilesY = 1800;
                            }
                            else
                            {
                                Game1.maxTilesX = 8400;
                                Game1.maxTilesY = 2400;
                            }
                            Game1.clrInput();
                            Game1.menuMode = -7;
                            Game1.PlaySound(10, -1, -1, 1);
                            WorldGen.setWorldSize();
                        }
                    }
                }
            }
        IL_4157:
            if (Game1.menuMode == 888)
            {
                Game1.MenuUI.Draw(Game1.spriteBatch, gameTime);
            }
            if (Game1.menuMode != num5)
            {
                Game1.blockMouse = true;
                Game1.menuSkip = 0;
                num4 = 0;
                for (int num32 = 0; num32 < Game1.maxMenuItems; num32++)
                {
                    this.menuItemScale[num32] = 0.8f;
                }
            }
            if (!Game1.mouseLeft)
            {
                Game1.blockMouse = true;
            }
            int num33 = this.focusMenu;
            this.selectedMenu = -1;
            this.selectedMenu2 = -1;
            this.focusMenu = -1;
            for (int num34 = 0; num34 < num4; num34++)
            {
                if (array9[num34] != null)
                {
                    if (!flag)
                    {
                        this.grabColorSlider = 0;
                        Game1.hBar = -1f;
                        Game1.sBar = -1f;
                        Game1.lBar = -1f;
                    }
                    if (flag)
                    {
                        if (!Game1.mouseLeft)
                        {
                            this.grabColorSlider = 0;
                            Game1.blockMouse = false;
                        }
                        int num35 = num8;
                        int num36 = Game1.screenWidth / 2 - this.hueTexture.Width / 2;
                        int num37 = 167;
                        Vector3 vector = Game1.rgbToHsl(Game1.selColor);
                        float num38 = vector.X;
                        float num39 = vector.Y;
                        float num40 = vector.Z;
                        if (Game1.hBar == -1f || Game1.sBar == -1f || Game1.lBar == -1f)
                        {
                            Game1.hBar = num38;
                            Game1.sBar = num39;
                            Game1.lBar = num40;
                        }
                        else
                        {
                            num38 = Game1.hBar;
                            num39 = Game1.sBar;
                            num40 = Game1.lBar;
                        }
                        Game1.spriteBatch.Draw(this.hueTexture, new Vector2((float)num36, (float)num35), Microsoft.Xna.Framework.Color.White);
                        Game1.spriteBatch.Draw(Game1.colorSliderTexture, new Vector2((float)num36 + (float)(this.hueTexture.Width - 2) * Game1.hBar - (float)(Game1.colorSliderTexture.Width / 2), (float)(num35 - Game1.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
                        if (((Game1.mouseX > num36 - 4 && Game1.mouseX < num36 + this.hueTexture.Width + 4 && Game1.mouseY > num35 - 4 && Game1.mouseY < num35 + this.hueTexture.Height + 4) || this.grabColorSlider == 1) && Game1.mouseLeft && !Game1.blockMouse)
                        {
                            this.grabColorSlider = 1;
                            num38 = (float)(Game1.mouseX - num36);
                            num38 /= (float)this.hueTexture.Width;
                            if (num38 < 0f)
                            {
                                num38 = 0f;
                            }
                            if (num38 > 1f)
                            {
                                num38 = 1f;
                            }
                            Game1.hBar = num38;
                        }
                        num35 += 26;
                        Game1.spriteBatch.Draw(Game1.colorBarTexture, new Vector2((float)num36, (float)num35), Microsoft.Xna.Framework.Color.White);
                        for (int num41 = 0; num41 <= num37; num41++)
                        {
                            float saturation = (float)num41 / (float)num37;
                            Microsoft.Xna.Framework.Color color4 = Game1.hslToRgb(num38, saturation, num40);
                            Game1.spriteBatch.Draw(Game1.colorBlipTexture, new Vector2((float)(num36 + num41 + 5), (float)(num35 + 4)), color4);
                        }
                        Game1.spriteBatch.Draw(Game1.colorSliderTexture, new Vector2((float)num36 + (float)(this.hueTexture.Width - 2) * Game1.sBar - (float)(Game1.colorSliderTexture.Width / 2), (float)(num35 - Game1.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
                        if (((Game1.mouseX > num36 - 4 && Game1.mouseX < num36 + this.hueTexture.Width + 4 && Game1.mouseY > num35 - 4 && Game1.mouseY < num35 + this.hueTexture.Height + 4) || this.grabColorSlider == 2) && Game1.mouseLeft && !Game1.blockMouse)
                        {
                            this.grabColorSlider = 2;
                            num39 = (float)(Game1.mouseX - num36);
                            num39 /= (float)this.hueTexture.Width;
                            if (num39 < 0f)
                            {
                                num39 = 0f;
                            }
                            if (num39 > 1f)
                            {
                                num39 = 1f;
                            }
                            Game1.sBar = num39;
                        }
                        num35 += 26;
                        Game1.spriteBatch.Draw(Game1.colorBarTexture, new Vector2((float)num36, (float)num35), Microsoft.Xna.Framework.Color.White);
                        float num42 = 0.15f;
                        for (int num43 = 0; num43 <= num37; num43++)
                        {
                            float luminosity = (float)num43 / (float)num37;
                            Microsoft.Xna.Framework.Color color5 = Game1.hslToRgb(num38, num39, luminosity);
                            Game1.spriteBatch.Draw(Game1.colorBlipTexture, new Vector2((float)(num36 + num43 + 5), (float)(num35 + 4)), color5);
                        }
                        Game1.spriteBatch.Draw(Game1.colorSliderTexture, new Vector2((float)num36 + (float)(this.hueTexture.Width - 2) * ((Game1.lBar - num42) / (1f - num42)) - (float)(Game1.colorSliderTexture.Width / 2), (float)(num35 - Game1.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
                        if (((Game1.mouseX > num36 - 4 && Game1.mouseX < num36 + this.hueTexture.Width + 4 && Game1.mouseY > num35 - 4 && Game1.mouseY < num35 + this.hueTexture.Height + 4) || this.grabColorSlider == 3) && Game1.mouseLeft && !Game1.blockMouse)
                        {
                            this.grabColorSlider = 3;
                            num40 = (float)(Game1.mouseX - num36);
                            num40 /= (float)this.hueTexture.Width;
                            if (num40 < 0f)
                            {
                                num40 = 0f;
                            }
                            if (num40 > 1f)
                            {
                                num40 = 1f;
                            }
                            num40 = num40 * (1f - num42) + num42;
                            Game1.lBar = num40;
                        }
                        Game1.selColor = Game1.hslToRgb(Game1.hBar, Game1.sBar, Game1.lBar);
                    }
                    else if (flag)
                    {
                        string text3 = "";
                        for (int num44 = 0; num44 < 6; num44++)
                        {
                            int num45 = num8;
                            int num46 = 370 + Game1.screenWidth / 2 - 400;
                            if (num44 == 0)
                            {
                                text3 = Lang.menu[95];
                            }
                            if (num44 == 1)
                            {
                                text3 = Lang.menu[96];
                                num45 += 30;
                            }
                            if (num44 == 2)
                            {
                                text3 = Lang.menu[97];
                                num45 += 60;
                            }
                            if (num44 == 3)
                            {
                                text3 = string.Concat(Game1.selColor.R);
                                num46 += 90;
                            }
                            if (num44 == 4)
                            {
                                text3 = string.Concat(Game1.selColor.G);
                                num46 += 90;
                                num45 += 30;
                            }
                            if (num44 == 5)
                            {
                                text3 = string.Concat(Game1.selColor.B);
                                num46 += 90;
                                num45 += 60;
                            }
                            for (int num47 = 0; num47 < 5; num47++)
                            {
                                Microsoft.Xna.Framework.Color color6 = Microsoft.Xna.Framework.Color.Black;
                                if (num47 == 4)
                                {
                                    color6 = color;
                                    color6.R = (byte)((255 + color6.R) / 2);
                                    color6.G = (byte)((255 + color6.R) / 2);
                                    color6.B = (byte)((255 + color6.R) / 2);
                                }
                                int num48 = 255;
                                int num49 = (int)color6.R - (255 - num48);
                                if (num49 < 0)
                                {
                                    num49 = 0;
                                }
                                color6 = new Microsoft.Xna.Framework.Color((int)((byte)num49), (int)((byte)num49), (int)((byte)num49), (int)((byte)num48));
                                int num50 = 0;
                                int num51 = 0;
                                if (num47 == 0)
                                {
                                    num50 = -2;
                                }
                                if (num47 == 1)
                                {
                                    num50 = 2;
                                }
                                if (num47 == 2)
                                {
                                    num51 = -2;
                                }
                                if (num47 == 3)
                                {
                                    num51 = 2;
                                }
                                Game1.spriteBatch.DrawString(Game1.fontDeathText, text3, new Vector2((float)(num46 + num50), (float)(num45 + num51)), color6, 0f, default(Vector2), 0.5f, SpriteEffects.None, 0f);
                            }
                        }
                        bool flag7 = false;
                        for (int num52 = 0; num52 < 2; num52++)
                        {
                            for (int num53 = 0; num53 < 3; num53++)
                            {
                                int num54 = num8 + num53 * 30 - 12;
                                int num55 = 360 + Game1.screenWidth / 2 - 400;
                                float scale = 0.9f;
                                if (num52 == 0)
                                {
                                    num55 -= 70;
                                    num54 += 2;
                                }
                                else
                                {
                                    num55 -= 40;
                                }
                                text3 = "-";
                                if (num52 == 1)
                                {
                                    text3 = "+";
                                }
                                Vector2 vector2 = new Vector2(24f, 24f);
                                int num56 = 142;
                                if (Game1.mouseX > num55 && (float)Game1.mouseX < (float)num55 + vector2.X && Game1.mouseY > num54 + 13 && (float)Game1.mouseY < (float)(num54 + 13) + vector2.Y)
                                {
                                    if (Game1.focusColor != (num52 + 1) * (num53 + 10))
                                    {
                                        Game1.PlaySound(12, -1, -1, 1);
                                    }
                                    Game1.focusColor = (num52 + 1) * (num53 + 10);
                                    flag7 = true;
                                    num56 = 255;
                                    if (Game1.mouseLeft)
                                    {
                                        if (Game1.colorDelay <= 1)
                                        {
                                            if (Game1.colorDelay == 0)
                                            {
                                                Game1.colorDelay = 40;
                                            }
                                            else
                                            {
                                                Game1.colorDelay = 3;
                                            }
                                            int num57 = num52;
                                            if (num52 == 0)
                                            {
                                                num57 = -1;
                                                if (Game1.selColor.R + Game1.selColor.G + Game1.selColor.B <= 150)
                                                {
                                                    num57 = 0;
                                                }
                                            }
                                            if (num53 == 0 && (int)Game1.selColor.R + num57 >= 0 && (int)Game1.selColor.R + num57 <= 255)
                                            {
                                                Game1.selColor.R = (byte)((int)Game1.selColor.R + num57);
                                            }
                                            if (num53 == 1 && (int)Game1.selColor.G + num57 >= 0 && (int)Game1.selColor.G + num57 <= 255)
                                            {
                                                Game1.selColor.G = (byte)((int)Game1.selColor.G + num57);
                                            }
                                            if (num53 == 2 && (int)Game1.selColor.B + num57 >= 0 && (int)Game1.selColor.B + num57 <= 255)
                                            {
                                                Game1.selColor.B = (byte)((int)Game1.selColor.B + num57);
                                            }
                                        }
                                        Game1.colorDelay--;
                                    }
                                    else
                                    {
                                        Game1.colorDelay = 0;
                                    }
                                }
                                for (int num58 = 0; num58 < 5; num58++)
                                {
                                    Microsoft.Xna.Framework.Color color7 = Microsoft.Xna.Framework.Color.Black;
                                    if (num58 == 4)
                                    {
                                        color7 = color;
                                        color7.R = (byte)((255 + color7.R) / 2);
                                        color7.G = (byte)((255 + color7.R) / 2);
                                        color7.B = (byte)((255 + color7.R) / 2);
                                    }
                                    int num59 = (int)color7.R - (255 - num56);
                                    if (num59 < 0)
                                    {
                                        num59 = 0;
                                    }
                                    color7 = new Microsoft.Xna.Framework.Color((int)((byte)num59), (int)((byte)num59), (int)((byte)num59), (int)((byte)num56));
                                    int num60 = 0;
                                    int num61 = 0;
                                    if (num58 == 0)
                                    {
                                        num60 = -2;
                                    }
                                    if (num58 == 1)
                                    {
                                        num60 = 2;
                                    }
                                    if (num58 == 2)
                                    {
                                        num61 = -2;
                                    }
                                    if (num58 == 3)
                                    {
                                        num61 = 2;
                                    }
                                    Game1.spriteBatch.DrawString(Game1.fontDeathText, text3, new Vector2((float)(num55 + num60), (float)(num54 + num61)), color7, 0f, default(Vector2), scale, SpriteEffects.None, 0f);
                                }
                            }
                        }
                        if (!flag7)
                        {
                            Game1.focusColor = 0;
                            Game1.colorDelay = 0;
                        }
                    }
                    if (flag3)
                    {
                        int num62 = 400;
                        string text4 = "";
                        for (int num63 = 0; num63 < 4; num63++)
                        {
                            int num64 = num62;
                            int num65 = 370 + Game1.screenWidth / 2 - 400;
                            if (num63 == 0)
                            {
                                text4 = Lang.menu[52] + ": " + Game1.bgScroll;
                            }
                            for (int num66 = 0; num66 < 5; num66++)
                            {
                                Microsoft.Xna.Framework.Color color8 = Microsoft.Xna.Framework.Color.Black;
                                if (num66 == 4)
                                {
                                    color8 = color;
                                    color8.R = (byte)((255 + color8.R) / 2);
                                    color8.G = (byte)((255 + color8.R) / 2);
                                    color8.B = (byte)((255 + color8.R) / 2);
                                }
                                int num67 = 255;
                                int num68 = (int)color8.R - (255 - num67);
                                if (num68 < 0)
                                {
                                    num68 = 0;
                                }
                                color8 = new Microsoft.Xna.Framework.Color((int)((byte)num68), (int)((byte)num68), (int)((byte)num68), (int)((byte)num67));
                                int num69 = 0;
                                int num70 = 0;
                                if (num66 == 0)
                                {
                                    num69 = -2;
                                }
                                if (num66 == 1)
                                {
                                    num69 = 2;
                                }
                                if (num66 == 2)
                                {
                                    num70 = -2;
                                }
                                if (num66 == 3)
                                {
                                    num70 = 2;
                                }
                                Game1.spriteBatch.DrawString(Game1.fontDeathText, text4, new Vector2((float)(num65 + num69), (float)(num64 + num70)), color8, 0f, default(Vector2), 0.5f, SpriteEffects.None, 0f);
                            }
                        }
                        IngameOptions.rightHover = -1;
                        if (!Game1.mouseLeft)
                        {
                            IngameOptions.rightLock = -1;
                        }
                        IngameOptions.valuePosition = new Vector2((float)(Game1.screenWidth / 2 - 40), (float)(num62 + 12));
                        float num71 = IngameOptions.DrawValueBar(Game1.spriteBatch, 1f, (float)Game1.bgScroll / 100f);
                        if (IngameOptions.inBar || IngameOptions.rightLock == 2)
                        {
                            IngameOptions.rightHover = 2;
                            if (Game1.mouseLeft && IngameOptions.rightLock == 2)
                            {
                                Game1.bgScroll = (int)(num71 * 100f);
                                Game1.caveParallax = 1f - (float)Game1.bgScroll / 500f;
                            }
                        }
                        if (IngameOptions.rightHover != -1)
                        {
                            IngameOptions.rightLock = IngameOptions.rightHover;
                        }
                    }
                    if (flag2)
                    {
                        int num72 = 400;
                        string text5 = "";
                        for (int num73 = 0; num73 < 6; num73++)
                        {
                            int num74 = num72;
                            int num75 = 370 + Game1.screenWidth / 2 - 400;
                            switch (num73)
                            {
                                case 0:
                                    text5 = Lang.menu[98];
                                    break;
                                case 1:
                                    text5 = Lang.menu[99];
                                    num74 += 30;
                                    break;
                                case 2:
                                    text5 = Lang.menu[119];
                                    num74 += 60;
                                    break;
                                case 3:
                                    text5 = Math.Round((double)(Game1.soundVolume * 100f)) + "%";
                                    num75 += 90;
                                    break;
                                case 4:
                                    text5 = Math.Round((double)(Game1.musicVolume * 100f)) + "%";
                                    num75 += 90;
                                    num74 += 30;
                                    break;
                                case 5:
                                    text5 = Math.Round((double)(Game1.ambientVolume * 100f)) + "%";
                                    num75 += 90;
                                    num74 += 60;
                                    break;
                            }
                            Microsoft.Xna.Framework.Color textColor = color;
                            textColor.R = (byte)((255 + textColor.R) / 2);
                            textColor.G = (byte)((255 + textColor.R) / 2);
                            textColor.B = (byte)((255 + textColor.R) / 2);
                            int num76 = 255;
                            int num77 = (int)textColor.R - (255 - num76);
                            if (num77 < 0)
                            {
                                num77 = 0;
                            }
                            textColor = new Microsoft.Xna.Framework.Color((int)((byte)num77), (int)((byte)num77), (int)((byte)num77), (int)((byte)num76));
                            Utils.DrawBorderStringFourWay(Game1.spriteBatch, Game1.fontDeathText, text5, (float)num75, (float)num74, textColor, Microsoft.Xna.Framework.Color.Black, Vector2.Zero, 0.5f);
                        }
                        IngameOptions.rightHover = -1;
                        if (!Game1.mouseLeft)
                        {
                            IngameOptions.rightLock = -1;
                        }
                        IngameOptions.valuePosition = new Vector2((float)(Game1.screenWidth / 2 - 40), (float)(num72 - 18 + 30));
                        float num78 = IngameOptions.DrawValueBar(Game1.spriteBatch, 1f, Game1.soundVolume);
                        if (IngameOptions.inBar || IngameOptions.rightLock == 2)
                        {
                            IngameOptions.rightHover = 2;
                            if (Game1.mouseLeft && IngameOptions.rightLock == 2)
                            {
                                Game1.soundVolume = num78;
                            }
                        }
                        IngameOptions.valuePosition = new Vector2((float)(Game1.screenWidth / 2 - 40), (float)(num72 - 18 + 60));
                        float num79 = IngameOptions.DrawValueBar(Game1.spriteBatch, 1f, Game1.musicVolume);
                        if (IngameOptions.inBar || IngameOptions.rightLock == 3)
                        {
                            IngameOptions.rightHover = 3;
                            if (Game1.mouseLeft && IngameOptions.rightLock == 3)
                            {
                                Game1.musicVolume = num79;
                            }
                        }
                        IngameOptions.valuePosition = new Vector2((float)(Game1.screenWidth / 2 - 40), (float)(num72 - 18 + 90));
                        float num80 = IngameOptions.DrawValueBar(Game1.spriteBatch, 1f, Game1.ambientVolume);
                        if (IngameOptions.inBar || IngameOptions.rightLock == 4)
                        {
                            IngameOptions.rightHover = 4;
                            if (Game1.mouseLeft && IngameOptions.rightLock == 4)
                            {
                                Game1.ambientVolume = num80;
                            }
                        }
                        if (IngameOptions.rightHover != -1)
                        {
                            IngameOptions.rightLock = IngameOptions.rightHover;
                        }
                    }
                    for (int num81 = 0; num81 < 5; num81++)
                    {
                        Microsoft.Xna.Framework.Color color9 = Microsoft.Xna.Framework.Color.Black;
                        if (num81 == 4)
                        {
                            switch (array6[num34])
                            {
                                case 0:
                                    color9 = color;
                                    break;
                                case 1:
                                    color9 = Game1.mcColor;
                                    break;
                                case 2:
                                    color9 = Game1.hcColor;
                                    break;
                                case 3:
                                    color9 = Game1.highVersionColor;
                                    break;
                                case 4:
                                case 5:
                                case 6:
                                    color9 = Game1.errorColor;
                                    break;
                                default:
                                    color9 = color;
                                    break;
                            }
                            color9.R = (byte)((255 + color9.R) / 2);
                            color9.G = (byte)((255 + color9.G) / 2);
                            color9.B = (byte)((255 + color9.B) / 2);
                        }
                        int num82 = (int)(255f * (this.menuItemScale[num34] * 2f - 1f));
                        if (array[num34])
                        {
                            num82 = 255;
                        }
                        int num83 = (int)color9.R - (255 - num82);
                        if (num83 < 0)
                        {
                            num83 = 0;
                        }
                        int num84 = (int)color9.G - (255 - num82);
                        if (num84 < 0)
                        {
                            num84 = 0;
                        }
                        int num85 = (int)color9.B - (255 - num82);
                        if (num85 < 0)
                        {
                            num85 = 0;
                        }
                        if (num33 == num34 && num81 == 4)
                        {
                            float num86 = (float)num82 / 255f;
                            num83 = (int)((float)num83 * (1f - num86) + 255f * num86);
                            num84 = (int)((float)num84 * (1f - num86) + 215f * num86);
                            num85 = (int)((float)num85 * (1f - num86) + 0f * num86);
                        }
                        color9 = new Microsoft.Xna.Framework.Color((int)((byte)num83), (int)((byte)num84), (int)((byte)num85), (int)((byte)num82));
                        if (array3[num34])
                        {
                            if (num81 == 4)
                            {
                                color9.R = (byte)((int)(color9.R * Game1.mouseTextColor) / 300);
                                color9.G = (byte)((int)(color9.G * Game1.mouseTextColor) / 300);
                                color9.B = (byte)((int)(color9.B * Game1.mouseTextColor) / 300);
                                color9.A = (byte)((int)(color9.A * Game1.mouseTextColor) / 300);
                            }
                            else
                            {
                                color9.A -= (byte)(Game1.mouseTextColor / 5);
                            }
                        }
                        int num87 = 0;
                        int num88 = 0;
                        if (num81 == 0)
                        {
                            num87 = -2;
                        }
                        if (num81 == 1)
                        {
                            num87 = 2;
                        }
                        if (num81 == 2)
                        {
                            num88 = -2;
                        }
                        if (num81 == 3)
                        {
                            num88 = 2;
                        }
                        Vector2 origin = Game1.fontDeathText.MeasureString(array9[num34]);
                        origin.X *= 0.5f;
                        origin.Y *= 0.5f;
                        float num89 = this.menuItemScale[num34];
                        if (Game1.menuMode == 15 && num34 == 0)
                        {
                            num89 *= 0.35f;
                        }
                        else if (Game1.netMode == 2)
                        {
                            num89 *= 0.5f;
                        }
                        num89 *= array7[num34];
                        if (!array8[num34])
                        {
                            Game1.spriteBatch.DrawString(Game1.fontDeathText, array9[num34], new Vector2((float)(num2 + num87 + array5[num34]), (float)(num + num3 * num34 + num88) + origin.Y * array7[num34] + (float)array4[num34]), color9, 0f, origin, num89, SpriteEffects.None, 0f);
                        }
                        else
                        {
                            Game1.spriteBatch.DrawString(Game1.fontDeathText, array9[num34], new Vector2((float)(num2 + num87 + array5[num34]), (float)(num + num3 * num34 + num88) + origin.Y * array7[num34] + (float)array4[num34]), color9, 0f, new Vector2(0f, origin.Y), num89, SpriteEffects.None, 0f);
                        }
                    }
                    if (!array8[num34])
                    {
                        int num90 = 0;
                        if (this.menuWide[num34])
                        {
                            num90 = 14;
                        }
                        this.menuWide[num34] = false;
                        if ((float)Game1.mouseX > (float)num2 - (float)(array9[num34].Length * 10) * array7[num34] + (float)array5[num34] - (float)num90 && (float)Game1.mouseX < (float)num2 + (float)(array9[num34].Length * 10) * array7[num34] + (float)array5[num34] + (float)num90 && Game1.mouseY > num + num3 * num34 + array4[num34] && (float)Game1.mouseY < (float)(num + num3 * num34 + array4[num34]) + 50f * array7[num34] && Game1.hasFocus)
                        {
                            this.focusMenu = num34;
                            if (array[num34] || array2[num34])
                            {
                                this.focusMenu = -1;
                            }
                            else
                            {
                                if (num33 != this.focusMenu)
                                {
                                    Game1.PlaySound(12, -1, -1, 1);
                                }
                                if (Game1.mouseLeftRelease && Game1.mouseLeft)
                                {
                                    this.selectedMenu = num34;
                                }
                                if (Game1.mouseRightRelease && Game1.mouseRight)
                                {
                                    this.selectedMenu2 = num34;
                                }
                            }
                        }
                    }
                    else if (Game1.mouseX > num2 + array5[num34] && (float)Game1.mouseX < (float)num2 + (float)(array9[num34].Length * 20) * array7[num34] + (float)array5[num34] && Game1.mouseY > num + num3 * num34 + array4[num34] && (float)Game1.mouseY < (float)(num + num3 * num34 + array4[num34]) + 50f * array7[num34] && Game1.hasFocus)
                    {
                        this.focusMenu = num34;
                        if (array[num34] || array2[num34])
                        {
                            this.focusMenu = -1;
                        }
                        else
                        {
                            if (num33 != this.focusMenu)
                            {
                                Game1.PlaySound(12, -1, -1, 1);
                            }
                            if (Game1.mouseLeftRelease && Game1.mouseLeft)
                            {
                                this.selectedMenu = num34;
                            }
                            if (Game1.mouseRightRelease && Game1.mouseRight)
                            {
                                this.selectedMenu2 = num34;
                            }
                        }
                    }
                }
            }
            for (int num91 = 0; num91 < Game1.maxMenuItems; num91++)
            {
                if (num91 == this.focusMenu)
                {
                    if (this.menuItemScale[num91] < 1f)
                    {
                        this.menuItemScale[num91] += 0.02f;
                    }
                    if (this.menuItemScale[num91] > 1f)
                    {
                        this.menuItemScale[num91] = 1f;
                    }
                }
                else if ((double)this.menuItemScale[num91] > 0.8)
                {
                    this.menuItemScale[num91] -= 0.02f;
                }
            }
            if (flag4)
            {
                Game1.spriteBatch.End();
                Game1.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
                Player pendingPlayer = Game1.PendingPlayer;
                pendingPlayer.PlayerFrame();
                pendingPlayer.position.X = (float)num6 + Game1.screenPosition.X;
                pendingPlayer.position.Y = (float)num7 + Game1.screenPosition.Y;
                this.DrawPlayer(pendingPlayer, pendingPlayer.position, 0f, Vector2.Zero, 0f);
                Game1.spriteBatch.End();
                Game1.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
            }
            for (int num92 = 0; num92 < 5; num92++)
            {
                Microsoft.Xna.Framework.Color color10 = Microsoft.Xna.Framework.Color.Black;
                if (num92 == 4)
                {
                    color10 = color;
                    color10.R = (byte)((255 + color10.R) / 2);
                    color10.G = (byte)((255 + color10.R) / 2);
                    color10.B = (byte)((255 + color10.R) / 2);
                }
                color10.A = (byte)((float)color10.A * 0.3f);
                int num93 = 0;
                int num94 = 0;
                if (num92 == 0)
                {
                    num93 = -2;
                }
                if (num92 == 1)
                {
                    num93 = 2;
                }
                if (num92 == 2)
                {
                    num94 = -2;
                }
                if (num92 == 3)
                {
                    num94 = 2;
                }
                string text6 = "Copyright © 2015 Re-Logic";
                Vector2 origin2 = Game1.fontMouseText.MeasureString(text6);
                origin2.X *= 0.5f;
                origin2.Y *= 0.5f;
                Game1.spriteBatch.DrawString(Game1.fontMouseText, text6, new Vector2((float)Game1.screenWidth - origin2.X + (float)num93 - 10f, (float)Game1.screenHeight - origin2.Y + (float)num94 - 2f), color10, 0f, origin2, 1f, SpriteEffects.None, 0f);
            }
            for (int num95 = 0; num95 < 5; num95++)
            {
                Microsoft.Xna.Framework.Color color11 = Microsoft.Xna.Framework.Color.Black;
                if (num95 == 4)
                {
                    color11 = color;
                    color11.R = (byte)((255 + color11.R) / 2);
                    color11.G = (byte)((255 + color11.R) / 2);
                    color11.B = (byte)((255 + color11.R) / 2);
                }
                color11.A = (byte)((float)color11.A * 0.3f);
                int num96 = 0;
                int num97 = 0;
                if (num95 == 0)
                {
                    num96 = -2;
                }
                if (num95 == 1)
                {
                    num96 = 2;
                }
                if (num95 == 2)
                {
                    num97 = -2;
                }
                if (num95 == 3)
                {
                    num97 = 2;
                }
                Vector2 origin3 = Game1.fontMouseText.MeasureString(Game1.versionNumber);
                origin3.X *= 0.5f;
                origin3.Y *= 0.5f;
                Game1.spriteBatch.DrawString(Game1.fontMouseText, Game1.versionNumber, new Vector2(origin3.X + (float)num96 + 10f, (float)Game1.screenHeight - origin3.Y + (float)num97 - 2f), color11, 0f, origin3, 1f, SpriteEffects.None, 0f);
            }
            Game1.DrawThickCursor(false);
            Game1.spriteBatch.Draw(Game1.cursorTextures[0], new Vector2((float)(Game1.mouseX + 1), (float)(Game1.mouseY + 1)), null, new Microsoft.Xna.Framework.Color((int)((float)Game1.cursorColor.R * 0.2f), (int)((float)Game1.cursorColor.G * 0.2f), (int)((float)Game1.cursorColor.B * 0.2f), (int)((float)Game1.cursorColor.A * 0.5f)), 0f, default(Vector2), Game1.cursorScale * 1.1f, SpriteEffects.None, 0f);
            Game1.spriteBatch.Draw(Game1.cursorTextures[0], new Vector2((float)Game1.mouseX, (float)Game1.mouseY), null, Game1.cursorColor, 0f, default(Vector2), Game1.cursorScale, SpriteEffects.None, 0f);
            if (Game1.fadeCounter > 0)
            {
                Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
                Game1.fadeCounter--;
                float num98 = (float)Game1.fadeCounter / 75f * 255f;
                byte b2 = (byte)num98;
                white = new Microsoft.Xna.Framework.Color((int)b2, (int)b2, (int)b2, (int)b2);
                Game1.spriteBatch.Draw(Game1.fadeTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.screenWidth, Game1.screenHeight), white);
            }
            Game1.spriteBatch.End();
            if (Game1.mouseLeft)
            {
                Game1.mouseLeftRelease = false;
            }
            else
            {
                Game1.mouseLeftRelease = true;
            }
            if (Game1.mouseRight)
            {
                Game1.mouseRightRelease = false;
                return;
            }
            Game1.mouseRightRelease = true;
        }
        public static void ResetKeyBindings()
        {
            Game1.cUp = "W";
            Game1.cDown = "S";
            Game1.cLeft = "A";
            Game1.cRight = "D";
            Game1.cJump = "Space";
            Game1.cThrowItem = "T";
            Game1.cInv = "Escape";
            Game1.cHeal = "H";
            Game1.cMana = "J";
            Game1.cBuff = "B";
            Game1.cHook = "E";
            Game1.cTorch = "LeftShift";
            Game1.cSmart = "LeftControl";
            Game1.cMount = "R";
        }
        public static void CursorColor()
        {
            Game1.cursorAlpha += (float)Game1.cursorColorDirection * 0.015f;
            if (Game1.cursorAlpha >= 1f)
            {
                Game1.cursorAlpha = 1f;
                Game1.cursorColorDirection = -1;
            }
            if ((double)Game1.cursorAlpha <= 0.6)
            {
                Game1.cursorAlpha = 0.6f;
                Game1.cursorColorDirection = 1;
            }
            float num = Game1.cursorAlpha * 0.3f + 0.7f;
            byte r = (byte)((float)Game1.mouseColor.R * Game1.cursorAlpha);
            byte g = (byte)((float)Game1.mouseColor.G * Game1.cursorAlpha);
            byte b = (byte)((float)Game1.mouseColor.B * Game1.cursorAlpha);
            byte a = (byte)(255f * num);
            Game1.cursorColor = new Microsoft.Xna.Framework.Color((int)r, (int)g, (int)b, (int)a);
            Game1.cursorScale = Game1.cursorAlpha * 0.3f + 0.7f + 0.1f;
        }
        protected void DrawSplash(GameTime gameTime)
        {
            base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Black);
            base.Draw(gameTime);
            Game1.spriteBatch.Begin();
            this.splashCounter++;
            Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
            byte b = 0;
            if (this.splashCounter <= 75)
            {
                float num = (float)this.splashCounter / 75f * 255f;
                b = (byte)num;
            }
            else if (this.splashCounter <= 125)
            {
                b = 255;
            }
            else if (this.splashCounter <= 200)
            {
                int num2 = 125 - this.splashCounter;
                float num3 = (float)num2 / 75f * 255f;
                b = (byte)num3;
            }
            else
            {
                Game1.showSplash = false;
                Game1.fadeCounter = 75;
            }
            white = new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, (int)b);
            Game1.spriteBatch.Draw(Game1.loTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.screenWidth, Game1.screenHeight), white);
            Game1.spriteBatch.End();
        }

        protected void DrawUnderworldBackground(bool flat)
        {
            if (Game1.screenPosition.Y + (float)Game1.screenHeight < (float)(Game1.maxTilesY - 220) * 16f)
            {
                return;
            }
            Vector2 value = Game1.screenPosition + new Vector2((float)(Game1.screenWidth >> 1), (float)(Game1.screenHeight >> 1));
            for (int i = 4; i >= 0; i--)
            {
                Texture2D texture2D = Game1.underworldTexture[i];
                Vector2 vector = new Vector2((float)texture2D.Width, (float)texture2D.Height) * 0.5f;
                float num = flat ? 1f : ((float)(i * 2) + 3f);
                Vector2 value2 = new Vector2(1f / num);
                Microsoft.Xna.Framework.Rectangle value3 = new Microsoft.Xna.Framework.Rectangle(0, 0, texture2D.Width, texture2D.Height);
                float num2 = 1.3f;
                Vector2 zero = Vector2.Zero;
                switch (i)
                {
                    case 1:
                        {
                            int num3 = (int)(Game1.GlobalTime * 8f) % 4;
                            value3 = new Microsoft.Xna.Framework.Rectangle((num3 >> 1) * (texture2D.Width >> 1), num3 % 2 * (texture2D.Height >> 1), texture2D.Width >> 1, texture2D.Height >> 1);
                            vector *= 0.5f;
                            zero.Y += 75f;
                            break;
                        }
                    case 2:
                        zero.Y += 75f;
                        break;
                    case 3:
                        zero.Y += 75f;
                        break;
                    case 4:
                        num2 = 0.5f;
                        zero.Y -= 25f;
                        break;
                }
                if (flat)
                {
                    num2 *= 1.5f;
                }
                vector *= num2;
                if (flat)
                {
                    zero.Y += (float)(Game1.underworldTexture[0].Height >> 1) * 1.3f - vector.Y;
                }
                float num4 = num2 * (float)value3.Width;
                float num5 = value.X * value2.X - vector.X + zero.X - (float)(Game1.screenWidth >> 1);
                int num6 = (int)(num5 / num4);
                for (int j = num6 - 2; j < num6 + 4 + (int)((float)Game1.screenWidth / num4); j++)
                {
                    Vector2 value4 = new Vector2((float)j * num2 * ((float)value3.Width / value2.X), (float)(Game1.maxTilesY - 200) * 16f) + vector;
                    Vector2 position = (value4 - value) * value2 + value - Game1.screenPosition - vector + zero;
                    Game1.spriteBatch.Draw(texture2D, position, new Microsoft.Xna.Framework.Rectangle?(value3), Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, num2, SpriteEffects.None, 0f);
                    if (i == 0)
                    {
                        int num7 = (int)(position.Y + (float)value3.Height * num2);
                        Game1.spriteBatch.Draw(Game1.blackTileTexture, new Microsoft.Xna.Framework.Rectangle((int)position.X, num7, (int)((float)value3.Width * num2), Math.Max(0, Game1.screenHeight - num7)), new Microsoft.Xna.Framework.Color(11, 3, 7));
                    }
                }
            }
        }

        protected void DrawBackground()
        {
            if (!Game1.owBack)
            {
                this.OldDrawBackground();
                return;
            }
            Microsoft.Xna.Framework.Color[] array = new Microsoft.Xna.Framework.Color[9];
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            double num = (double)(Game1.maxTilesY - 330);
            double num2 = (double)((int)((num - Game1.worldSurface) / 6.0) * 6);
            num = Game1.worldSurface + num2 - 5.0;
            int num3 = (int)(255f * (1f - Game1.gfxQuality) + 140f * Game1.gfxQuality);
            int num4 = (int)(200f * (1f - Game1.gfxQuality) + 40f * Game1.gfxQuality);
            int num5 = 128;
            Vector2 value = Game1.drawToScreen ? Vector2.Zero : new Vector2((float)Game1.offScreenRange, (float)Game1.offScreenRange);
            Vector3 vector = new Vector3(0.9f);
            float num6 = MathHelper.Clamp((Game1.screenPosition.Y - (float)Game1.worldSurface * 16f) / 300f, 0f, 1f);
            Lighting.brightness = Lighting.defBrightness * (1f - num6) + 1f * num6;
            float num7 = (float)((double)(Game1.screenPosition.Y - (float)(Game1.screenHeight / 2) + 200f) - Game1.rockLayer * 16.0) / 300f;
            num7 = MathHelper.Clamp(num7, 0f, 1f);
            int num8 = (int)((Game1.screenPosition.X + (float)(Game1.screenWidth / 2)) / 16f);
            int num9;
            if (num8 <= Game1.caveBackX[0])
            {
                num9 = Game1.caveBackStyle[0];
            }
            else if (num8 <= Game1.treeX[1])
            {
                num9 = Game1.caveBackStyle[1];
            }
            else if (num8 <= Game1.treeX[2])
            {
                num9 = Game1.caveBackStyle[2];
            }
            else
            {
                num9 = Game1.caveBackStyle[3];
            }
            num9 += 3;
            if (Game1.snowTiles > 300 && (Game1.screenPosition.Y + (float)Game1.screenHeight) / 16f < (float)(Game1.maxTilesY - 250))
            {
                num9 = 1;
            }
            if (Game1.jungleTiles > 80)
            {
                if (num9 == 1)
                {
                    if (Game1.jungleTiles > Game1.snowTiles)
                    {
                        num9 = 11;
                    }
                }
                else
                {
                    num9 = 11;
                }
            }
            if ((double)(Game1.screenPosition.Y / 16f) > Game1.rockLayer + 60.0 && (double)(Game1.screenPosition.Y / 16f) < num - 60.0)
            {
                if (Game1.player[Game1.myPlayer].ZoneSnow)
                {
                    if (Game1.player[Game1.myPlayer].ZoneCorrupt)
                    {
                        num9 = 15;
                    }
                    else if (Game1.player[Game1.myPlayer].ZoneCrimson)
                    {
                        num9 = 16;
                    }
                    else if (Game1.player[Game1.myPlayer].ZoneHoly)
                    {
                        num9 = 17;
                    }
                }
                else if (Game1.player[Game1.myPlayer].ZoneCorrupt)
                {
                    num9 = 12;
                }
                else if (Game1.player[Game1.myPlayer].ZoneCrimson)
                {
                    num9 = 13;
                }
                else if (Game1.player[Game1.myPlayer].ZoneHoly)
                {
                    num9 = 14;
                }
            }
            if (Game1.shroomTiles > 200)
            {
                num9 = 2;
            }
            if (num9 != Game1.ugBack)
            {
                Game1.oldUgBack = Game1.ugBack;
                Game1.ugBack = num9;
                Game1.ugBackTransition = 1f;
            }
            if (Game1.ugBackTransition > 0f)
            {
                Game1.ugBackTransition -= 0.25f;
            }
            if (Game1.ugBackTransition < 0f)
            {
                Game1.ugBackTransition = 0f;
            }
            int[] array2 = new int[7];
            int[] array3 = new int[7];
            for (int i = 0; i < 2; i++)
            {
                int num10 = Game1.ugBack;
                if (i == 1)
                {
                    num10 = Game1.oldUgBack;
                }
                int[] array4 = new int[7];
                if (num10 == 0)
                {
                    array4[0] = 1;
                    array4[1] = 2;
                    array4[2] = 4;
                    array4[3] = 3;
                    array4[4] = 6;
                    array4[5] = 5;
                }
                else if (num10 == 1)
                {
                    if (Game1.iceBackStyle == 0)
                    {
                        array4[1] = 33;
                        array4[3] = 32;
                        array4[0] = 40;
                        array4[2] = 34;
                    }
                    else if (Game1.iceBackStyle == 1)
                    {
                        array4[1] = 118;
                        array4[3] = 117;
                        array4[0] = 160;
                        array4[2] = 161;
                    }
                    else if (Game1.iceBackStyle == 2)
                    {
                        array4[1] = 165;
                        array4[3] = 167;
                        array4[0] = 164;
                        array4[2] = 166;
                    }
                    else
                    {
                        array4[1] = 120;
                        array4[3] = 119;
                        array4[0] = 162;
                        array4[2] = 163;
                    }
                    array4[4] = array4[3];
                }
                else if (num10 == 2)
                {
                    array4[0] = 62;
                    array4[1] = 63;
                    array4[2] = 64;
                    array4[3] = 65;
                    array4[4] = 143 + Game1.hellBackStyle;
                }
                else if (num10 == 3)
                {
                    array4[0] = 66;
                    array4[1] = 67;
                    array4[2] = 68;
                    array4[3] = 69;
                    array4[4] = 128 + Game1.hellBackStyle;
                }
                else if (num10 == 4)
                {
                    array4[0] = 70;
                    array4[1] = 71;
                    array4[2] = 68;
                    array4[3] = 72;
                    array4[4] = 128 + Game1.hellBackStyle;
                }
                else if (num10 == 5)
                {
                    array4[0] = 73;
                    array4[1] = 74;
                    array4[2] = 75;
                    array4[3] = 76;
                    array4[4] = 131 + Game1.hellBackStyle;
                }
                else if (num10 == 6)
                {
                    array4[0] = 77;
                    array4[1] = 78;
                    array4[2] = 79;
                    array4[3] = 80;
                    array4[4] = 134 + Game1.hellBackStyle;
                }
                else if (num10 == 7)
                {
                    array4[0] = 77;
                    array4[1] = 81;
                    array4[2] = 79;
                    array4[3] = 82;
                    array4[4] = 134 + Game1.hellBackStyle;
                }
                else if (num10 == 8)
                {
                    array4[0] = 83;
                    array4[1] = 84;
                    array4[2] = 85;
                    array4[3] = 86;
                    array4[4] = 137 + Game1.hellBackStyle;
                }
                else if (num10 == 9)
                {
                    array4[0] = 83;
                    array4[1] = 87;
                    array4[2] = 88;
                    array4[3] = 89;
                    array4[4] = 137 + Game1.hellBackStyle;
                }
                else if (num10 == 10)
                {
                    array4[0] = 121;
                    array4[1] = 122;
                    array4[2] = 123;
                    array4[3] = 124;
                    array4[4] = 140 + Game1.hellBackStyle;
                }
                else if (num10 == 11)
                {
                    if (Game1.jungleBackStyle == 0)
                    {
                        array4[0] = 153;
                        array4[1] = 147;
                        array4[2] = 148;
                        array4[3] = 149;
                        array4[4] = 150 + Game1.hellBackStyle;
                    }
                    else
                    {
                        array4[0] = 146;
                        array4[1] = 154;
                        array4[2] = 155;
                        array4[3] = 156;
                        array4[4] = 157 + Game1.hellBackStyle;
                    }
                }
                else if (num10 >= 12 && num10 <= 14)
                {
                    array4[0] = 66;
                    array4[1] = 67;
                    array4[2] = 68;
                    array4[4] = 128 + Game1.hellBackStyle;
                    if (num10 == 12)
                    {
                        array4[3] = 193 + Game1.worldID % 4;
                    }
                    else if (num10 == 13)
                    {
                        array4[3] = 188 + Game1.worldID % 5;
                    }
                    else if (num10 == 14)
                    {
                        array4[3] = 197 + Game1.worldID % 3;
                    }
                }
                else if (num10 >= 15 && num10 <= 17)
                {
                    array4[0] = 40;
                    array4[1] = 33;
                    array4[2] = 34;
                    array4[4] = 128 + Game1.hellBackStyle;
                    if (num10 == 15)
                    {
                        array4[3] = 200;
                    }
                    else if (num10 == 16)
                    {
                        array4[3] = 201 + Game1.worldID % 2;
                    }
                    else if (num10 == 17)
                    {
                        array4[3] = 203 + Game1.worldID % 4;
                    }
                }
                if (Game1.hellBackStyle == 0)
                {
                    array4[5] = 125;
                }
                if (Game1.hellBackStyle == 1)
                {
                    array4[5] = 126;
                }
                if (Game1.hellBackStyle == 2)
                {
                    array4[5] = 127;
                }
                array4[6] = 185 + Game1.hellBackStyle;
                this.LoadBackground(array4[0]);
                this.LoadBackground(array4[1]);
                this.LoadBackground(array4[2]);
                this.LoadBackground(array4[3]);
                this.LoadBackground(array4[4]);
                this.LoadBackground(array4[5]);
                this.LoadBackground(array4[6]);
                if (i == 0)
                {
                    for (int j = 0; j < 7; j++)
                    {
                        array2[j] = array4[j];
                    }
                }
                else
                {
                    for (int k = 0; k < 7; k++)
                    {
                        array3[k] = array4[k];
                    }
                }
            }
            Lighting.defBrightness = 1.2f - 0.2f * num7;
            float x = vector.X;
            float y = vector.Y;
            float z = vector.Z;
            this.bgParallax = (double)Game1.caveParallax;
            this.bgStart = (int)(-Math.IEEERemainder((double)num5 + (double)Game1.screenPosition.X * this.bgParallax, (double)num5) - (double)(num5 / 2)) - (int)value.X;
            this.bgLoops = Game1.screenWidth / num5 + 2;
            this.bgTop = (int)((float)((int)Game1.worldSurface * 16 - 16) - Game1.screenPosition.Y + 16f);
            for (int l = 0; l < this.bgLoops; l++)
            {
                for (int m = 0; m < num5 / 16; m++)
                {
                    float num11 = (float)this.bgStart + Game1.screenPosition.X;
                    num11 = -(float)Math.IEEERemainder((double)num11, 16.0);
                    num11 = (float)Math.Round((double)num11);
                    int num12 = (int)num11;
                    if (num12 == -8)
                    {
                        num12 = 8;
                    }
                    float num13 = (float)(this.bgStart + num5 * l + m * 16 + 8);
                    float num14 = (float)this.bgTop;
                    Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)((num13 + Game1.screenPosition.X) / 16f), (int)((Game1.screenPosition.Y + num14) / 16f));
                    color.R = (byte)((float)color.R * x);
                    color.G = (byte)((float)color.G * y);
                    color.B = (byte)((float)color.B * z);
                    Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[0]], new Vector2((float)(this.bgStart + num5 * l + 16 * m + num12), (float)this.bgTop) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * m + num12 + 16, 0, 16, 16)), color);
                    if (Game1.ugBackTransition > 0f)
                    {
                        Microsoft.Xna.Framework.Color color2 = color;
                        color2.R = (byte)((float)color2.R * Game1.ugBackTransition);
                        color2.G = (byte)((float)color2.G * Game1.ugBackTransition);
                        color2.B = (byte)((float)color2.B * Game1.ugBackTransition);
                        color2.A = (byte)((float)color2.A * Game1.ugBackTransition);
                        Game1.spriteBatch.Draw(Game1.backgroundTexture[array3[0]], new Vector2((float)(this.bgStart + num5 * l + 16 * m + num12), (float)this.bgTop) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * m + num12 + 16, 0, 16, 16)), color2);
                    }
                }
            }
            bool flag = false;
            bool flag2 = false;
            this.bgTop = (int)((float)((int)Game1.worldSurface * 16) - Game1.screenPosition.Y + 16f);
            if (Game1.worldSurface * 16.0 <= (double)(Game1.screenPosition.Y + (float)Game1.screenHeight + (float)Game1.offScreenRange))
            {
                this.bgParallax = (double)Game1.caveParallax;
                this.bgStart = (int)(-Math.IEEERemainder((double)num5 + (double)Game1.screenPosition.X * this.bgParallax, (double)num5) - (double)(num5 / 2)) - (int)value.X;
                this.bgLoops = (Game1.screenWidth + (int)value.X * 2) / num5 + 2;
                if (Game1.worldSurface * 16.0 < (double)(Game1.screenPosition.Y - 16f))
                {
                    this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTop, (double)Game1.backgroundHeight[2]) - (double)Game1.backgroundHeight[2]);
                    this.bgLoopsY = (Game1.screenHeight - this.bgStartY + (int)value.Y * 2) / Game1.backgroundHeight[2] + 1;
                }
                else
                {
                    this.bgStartY = this.bgTop;
                    this.bgLoopsY = (Game1.screenHeight - this.bgTop + (int)value.Y * 2) / Game1.backgroundHeight[2] + 1;
                }
                if (Game1.rockLayer * 16.0 < (double)(Game1.screenPosition.Y + 600f))
                {
                    this.bgLoopsY = (int)(Game1.rockLayer * 16.0 - (double)Game1.screenPosition.Y + 600.0 - (double)this.bgStartY) / Game1.backgroundHeight[2];
                    flag2 = true;
                }
                float num15 = (float)this.bgStart + Game1.screenPosition.X;
                num15 = -(float)Math.IEEERemainder((double)num15, 16.0);
                num15 = (float)Math.Round((double)num15);
                int num16 = (int)num15;
                if (num16 == -8)
                {
                    num16 = 8;
                }
                for (int n = 0; n < this.bgLoops; n++)
                {
                    for (int num17 = 0; num17 < this.bgLoopsY; num17++)
                    {
                        for (int num18 = 0; num18 < num5 / 16; num18++)
                        {
                            for (int num19 = 0; num19 < 6; num19++)
                            {
                                float num20 = (float)(this.bgStartY + num17 * 96 + num19 * 16 + 8);
                                float num21 = (float)(this.bgStart + num5 * n + num18 * 16 + 8);
                                int num22 = (int)((num21 + Game1.screenPosition.X) / 16f);
                                int num23 = (int)((num20 + Game1.screenPosition.Y) / 16f);
                                Microsoft.Xna.Framework.Color color3 = Lighting.GetColor(num22, num23);
                                if (Game1.tile[num22, num23] == null)
                                {
                                    Game1.tile[num22, num23] = new Tile();
                                }
                                if (color3.R > 0 || color3.G > 0 || color3.B > 0)
                                {
                                    if (!Game1.drawToScreen)
                                    {
                                        VertexColors colors;
                                        Lighting.GetColor4Slice_New(num22, num23, out colors, 1f);
                                        Game1.tileBatch.Draw(Game1.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num5 * n + 16 * num18 + num16), (float)(this.bgStartY + Game1.backgroundHeight[array3[1]] * num17 + 16 * num19)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num18 + num16 + 16, 16 * num19, 16, 16)), colors, Vector2.Zero, 1f, SpriteEffects.None);
                                    }
                                    else
                                    {
                                        if (((int)color3.R > num3 || (double)color3.G > (double)num3 * 1.1 || (double)color3.B > (double)num3 * 1.2) && !Game1.tile[num22, num23].active() && Game1.wallLight[(int)Game1.tile[num22, num23].wall] && Game1.ugBackTransition == 0f)
                                        {
                                            Lighting.GetColor9Slice(num22, num23, ref array);
                                            try
                                            {
                                                for (int num24 = 0; num24 < 9; num24++)
                                                {
                                                    int num25 = 0;
                                                    int num26 = 0;
                                                    int width = 4;
                                                    int height = 4;
                                                    Microsoft.Xna.Framework.Color color4 = color3;
                                                    Microsoft.Xna.Framework.Color color5 = color3;
                                                    switch (num24)
                                                    {
                                                        case 0:
                                                            if (!Game1.tile[num22 - 1, num23 - 1].active())
                                                            {
                                                                color5 = array[num24];
                                                            }
                                                            break;
                                                        case 1:
                                                            width = 8;
                                                            num25 = 4;
                                                            if (!Game1.tile[num22, num23 - 1].active())
                                                            {
                                                                color5 = array[num24];
                                                            }
                                                            break;
                                                        case 2:
                                                            num25 = 12;
                                                            if (!Game1.tile[num22 + 1, num23 - 1].active())
                                                            {
                                                                color5 = array[num24];
                                                            }
                                                            break;
                                                        case 3:
                                                            height = 8;
                                                            num26 = 4;
                                                            if (!Game1.tile[num22 - 1, num23].active())
                                                            {
                                                                color5 = array[num24];
                                                            }
                                                            break;
                                                        case 4:
                                                            width = 8;
                                                            height = 8;
                                                            num25 = 4;
                                                            num26 = 4;
                                                            break;
                                                        case 5:
                                                            num25 = 12;
                                                            num26 = 4;
                                                            height = 8;
                                                            if (!Game1.tile[num22 + 1, num23].active())
                                                            {
                                                                color5 = array[num24];
                                                            }
                                                            break;
                                                        case 6:
                                                            num26 = 12;
                                                            if (!Game1.tile[num22 - 1, num23 + 1].active())
                                                            {
                                                                color5 = array[num24];
                                                            }
                                                            break;
                                                        case 7:
                                                            width = 8;
                                                            height = 4;
                                                            num25 = 4;
                                                            num26 = 12;
                                                            if (!Game1.tile[num22, num23 + 1].active())
                                                            {
                                                                color5 = array[num24];
                                                            }
                                                            break;
                                                        case 8:
                                                            num25 = 12;
                                                            num26 = 12;
                                                            if (!Game1.tile[num22 + 1, num23 + 1].active())
                                                            {
                                                                color5 = array[num24];
                                                            }
                                                            break;
                                                    }
                                                    color4.R = (byte)((color3.R + color5.R) / 2);
                                                    color4.G = (byte)((color3.G + color5.G) / 2);
                                                    color4.B = (byte)((color3.B + color5.B) / 2);
                                                    color4.R = (byte)((float)color4.R * x);
                                                    color4.G = (byte)((float)color4.G * y);
                                                    color4.B = (byte)((float)color4.B * z);
                                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num5 * n + 16 * num18 + num25 + num16), (float)(this.bgStartY + Game1.backgroundHeight[array2[1]] * num17 + 16 * num19 + num26)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num18 + num25 + num16 + 16, 16 * num19 + num26, width, height)), color4);
                                                    if (Game1.ugBackTransition > 0f)
                                                    {
                                                        Microsoft.Xna.Framework.Color color6 = color4;
                                                        color6.R = (byte)((float)color6.R * Game1.ugBackTransition);
                                                        color6.G = (byte)((float)color6.G * Game1.ugBackTransition);
                                                        color6.B = (byte)((float)color6.B * Game1.ugBackTransition);
                                                        color6.A = (byte)((float)color6.A * Game1.ugBackTransition);
                                                        Game1.spriteBatch.Draw(Game1.backgroundTexture[array3[1]], new Vector2((float)(this.bgStart + num5 * n + 16 * num18 + num25 + num16), (float)(this.bgStartY + Game1.backgroundHeight[array3[1]] * num17 + 16 * num19 + num26)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num18 + num25 + num16 + 16, 16 * num19 + num26, width, height)), color6);
                                                    }
                                                }
                                                goto IL_1879;
                                            }
                                            catch
                                            {
                                                color3.R = (byte)((float)color3.R * x);
                                                color3.G = (byte)((float)color3.G * y);
                                                color3.B = (byte)((float)color3.B * z);
                                                Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num5 * n + 16 * num18 + num16), (float)(this.bgStartY + Game1.backgroundHeight[array2[1]] * num17 + 16 * num19)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num18 + num16 + 16, 16 * num19, 16, 16)), color3);
                                                goto IL_1879;
                                            }
                                        }
                                        if (((int)color3.R > num4 || (double)color3.G > (double)num4 * 1.1 || (double)color3.B > (double)num4 * 1.2) && Game1.ugBackTransition == 0f)
                                        {
                                            Lighting.GetColor4Slice(num22, num23, ref array);
                                            for (int num27 = 0; num27 < 4; num27++)
                                            {
                                                int num28 = 0;
                                                int num29 = 0;
                                                Microsoft.Xna.Framework.Color color7 = color3;
                                                Microsoft.Xna.Framework.Color color8 = array[num27];
                                                switch (num27)
                                                {
                                                    case 1:
                                                        num28 = 8;
                                                        break;
                                                    case 2:
                                                        num29 = 8;
                                                        break;
                                                    case 3:
                                                        num28 = 8;
                                                        num29 = 8;
                                                        break;
                                                }
                                                color7.R = (byte)((color3.R + color8.R) / 2);
                                                color7.G = (byte)((color3.G + color8.G) / 2);
                                                color7.B = (byte)((color3.B + color8.B) / 2);
                                                color7.R = (byte)((float)color7.R * x);
                                                color7.G = (byte)((float)color7.G * y);
                                                color7.B = (byte)((float)color7.B * z);
                                                Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num5 * n + 16 * num18 + num28 + num16), (float)(this.bgStartY + Game1.backgroundHeight[array2[1]] * num17 + 16 * num19 + num29)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num18 + num28 + num16 + 16, 16 * num19 + num29, 8, 8)), color7);
                                                if (Game1.ugBackTransition > 0f)
                                                {
                                                    Microsoft.Xna.Framework.Color color9 = color7;
                                                    color9.R = (byte)((float)color9.R * Game1.ugBackTransition);
                                                    color9.G = (byte)((float)color9.G * Game1.ugBackTransition);
                                                    color9.B = (byte)((float)color9.B * Game1.ugBackTransition);
                                                    color9.A = (byte)((float)color9.A * Game1.ugBackTransition);
                                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[array3[1]], new Vector2((float)(this.bgStart + num5 * n + 16 * num18 + num28 + num16), (float)(this.bgStartY + Game1.backgroundHeight[array3[1]] * num17 + 16 * num19 + num29)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num18 + num28 + num16 + 16, 16 * num19 + num29, 8, 8)), color9);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            color3.R = (byte)((float)color3.R * x);
                                            color3.G = (byte)((float)color3.G * y);
                                            color3.B = (byte)((float)color3.B * z);
                                            Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num5 * n + 16 * num18 + num16), (float)(this.bgStartY + Game1.backgroundHeight[array2[1]] * num17 + 16 * num19)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num18 + num16 + 16, 16 * num19, 16, 16)), color3);
                                            if (Game1.ugBackTransition > 0f)
                                            {
                                                Microsoft.Xna.Framework.Color color10 = color3;
                                                color10.R = (byte)((float)color10.R * Game1.ugBackTransition);
                                                color10.G = (byte)((float)color10.G * Game1.ugBackTransition);
                                                color10.B = (byte)((float)color10.B * Game1.ugBackTransition);
                                                color10.A = (byte)((float)color10.A * Game1.ugBackTransition);
                                                Game1.spriteBatch.Draw(Game1.backgroundTexture[array3[1]], new Vector2((float)(this.bgStart + num5 * n + 16 * num18 + num16), (float)(this.bgStartY + Game1.backgroundHeight[array3[1]] * num17 + 16 * num19)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num18 + num16 + 16, 16 * num19, 16, 16)), color10);
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    color3.R = (byte)((float)color3.R * x);
                                    color3.G = (byte)((float)color3.G * y);
                                    color3.B = (byte)((float)color3.B * z);
                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num5 * n + 16 * num18 + num16), (float)(this.bgStartY + Game1.backgroundHeight[array2[1]] * num17 + 16 * num19)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num18 + num16 + 16, 16 * num19, 16, 16)), color3);
                                }
                            IL_1879:;
                            }
                        }
                    }
                }
                if (Game1.ugBackTransition > 0f)
                {
                    for (int num30 = 0; num30 < this.bgLoops; num30++)
                    {
                        for (int num31 = 0; num31 < this.bgLoopsY; num31++)
                        {
                            for (int num32 = 0; num32 < num5 / 16; num32++)
                            {
                                for (int num33 = 0; num33 < 6; num33++)
                                {
                                    float num34 = (float)(this.bgStartY + num31 * 96 + num33 * 16 + 8);
                                    float num35 = (float)(this.bgStart + num5 * num30 + num32 * 16 + 8);
                                    int num36 = (int)((num35 + Game1.screenPosition.X) / 16f);
                                    int num37 = (int)((num34 + Game1.screenPosition.Y) / 16f);
                                    Microsoft.Xna.Framework.Color color11 = Lighting.GetColor(num36, num37);
                                    if (Game1.tile[num36, num37] == null)
                                    {
                                        Game1.tile[num36, num37] = new Tile();
                                    }
                                    if (color11.R > 0 || color11.G > 0 || color11.B > 0)
                                    {
                                        VertexColors colors2;
                                        Lighting.GetColor4Slice_New(num36, num37, out colors2, Game1.ugBackTransition);
                                        byte a = (byte)(255f * Game1.ugBackTransition);
                                        colors2.BottomLeftColor.A = a;
                                        colors2.BottomRightColor.A = a;
                                        colors2.TopLeftColor.A = a;
                                        colors2.TopRightColor.A = a;
                                        Game1.tileBatch.Draw(Game1.backgroundTexture[array3[1]], new Vector2((float)(this.bgStart + num5 * num30 + 16 * num32 + num16), (float)(this.bgStartY + Game1.backgroundHeight[array3[1]] * num31 + 16 * num33)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num32 + num16 + 16, 16 * num33, 16, 16)), colors2, Vector2.Zero, 1f, SpriteEffects.None);
                                    }
                                }
                            }
                        }
                    }
                }
                if (flag2)
                {
                    this.bgParallax = (double)Game1.caveParallax;
                    this.bgStart = (int)(-Math.IEEERemainder((double)num5 + (double)Game1.screenPosition.X * this.bgParallax, (double)num5) - (double)(num5 / 2)) - (int)value.X;
                    this.bgLoops = (Game1.screenWidth + (int)value.X * 2) / num5 + 2;
                    this.bgTop = this.bgStartY + this.bgLoopsY * Game1.backgroundHeight[2];
                    if (this.bgTop > -32)
                    {
                        for (int num38 = 0; num38 < this.bgLoops; num38++)
                        {
                            for (int num39 = 0; num39 < num5 / 16; num39++)
                            {
                                float num40 = (float)(this.bgStart + num5 * num38 + num39 * 16 + 8);
                                float num41 = (float)this.bgTop;
                                Microsoft.Xna.Framework.Color color12 = Lighting.GetColor((int)((num40 + Game1.screenPosition.X) / 16f), (int)((Game1.screenPosition.Y + num41) / 16f));
                                color12.R = (byte)((float)color12.R * x);
                                color12.G = (byte)((float)color12.G * y);
                                color12.B = (byte)((float)color12.B * z);
                                Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[2]], new Vector2((float)(this.bgStart + num5 * num38 + 16 * num39 + num16), (float)this.bgTop) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num39 + num16 + 16, 0, 16, 16)), color12);
                                if (Game1.ugBackTransition > 0f)
                                {
                                    Microsoft.Xna.Framework.Color color13 = color12;
                                    color13.R = (byte)((float)color13.R * Game1.ugBackTransition);
                                    color13.G = (byte)((float)color13.G * Game1.ugBackTransition);
                                    color13.B = (byte)((float)color13.B * Game1.ugBackTransition);
                                    color13.A = (byte)((float)color13.A * Game1.ugBackTransition);
                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[array3[2]], new Vector2((float)(this.bgStart + num5 * num38 + 16 * num39 + num16), (float)this.bgTop) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num39 + num16 + 16, 0, 16, 16)), color13);
                                }
                            }
                        }
                    }
                }
            }
            this.bgTop = (int)((float)((int)Game1.rockLayer * 16) - Game1.screenPosition.Y + 16f + 600f - 8f);
            if (Game1.rockLayer * 16.0 <= (double)(Game1.screenPosition.Y + 600f))
            {
                this.bgParallax = (double)Game1.caveParallax;
                this.bgStart = (int)(-Math.IEEERemainder((double)num5 + (double)Game1.screenPosition.X * this.bgParallax, (double)num5) - (double)(num5 / 2)) - (int)value.X;
                this.bgLoops = (Game1.screenWidth + (int)value.X * 2) / num5 + 2;
                if (Game1.rockLayer * 16.0 + (double)Game1.screenHeight < (double)(Game1.screenPosition.Y - 16f))
                {
                    this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTop, (double)Game1.backgroundHeight[3]) - (double)Game1.backgroundHeight[3]);
                    this.bgLoopsY = (Game1.screenHeight - this.bgStartY + (int)value.Y * 2) / Game1.backgroundHeight[2] + 1;
                }
                else
                {
                    this.bgStartY = this.bgTop;
                    this.bgLoopsY = (Game1.screenHeight - this.bgTop + (int)value.Y * 2) / Game1.backgroundHeight[2] + 1;
                }
                if (num * 16.0 < (double)(Game1.screenPosition.Y + 600f))
                {
                    this.bgLoopsY = (int)(num * 16.0 - (double)Game1.screenPosition.Y + 600.0 - (double)this.bgStartY) / Game1.backgroundHeight[2];
                    flag = true;
                }
                float num42 = (float)this.bgStart + Game1.screenPosition.X;
                num42 = -(float)Math.IEEERemainder((double)num42, 16.0);
                num42 = (float)Math.Round((double)num42);
                int num43 = (int)num42;
                if (num43 == -8)
                {
                    num43 = 8;
                }
                for (int num44 = 0; num44 < this.bgLoops; num44++)
                {
                    for (int num45 = 0; num45 < this.bgLoopsY; num45++)
                    {
                        for (int num46 = 0; num46 < num5 / 16; num46++)
                        {
                            for (int num47 = 0; num47 < 6; num47++)
                            {
                                float num48 = (float)(this.bgStartY + num45 * 96 + num47 * 16 + 8);
                                float num49 = (float)(this.bgStart + num5 * num44 + num46 * 16 + 8);
                                int num50 = (int)((num49 + Game1.screenPosition.X) / 16f);
                                int num51 = (int)((num48 + Game1.screenPosition.Y) / 16f);
                                Microsoft.Xna.Framework.Color color14 = Lighting.GetColor(num50, num51);
                                if (Game1.tile[num50, num51] == null)
                                {
                                    Game1.tile[num50, num51] = new Tile();
                                }
                                bool flag3 = false;
                                if (Game1.caveParallax != 0f)
                                {
                                    if (Game1.tile[num50 - 1, num51] == null)
                                    {
                                        Game1.tile[num50 - 1, num51] = new Tile();
                                    }
                                    if (Game1.tile[num50 + 1, num51] == null)
                                    {
                                        Game1.tile[num50 + 1, num51] = new Tile();
                                    }
                                    if (Game1.wallLight[(int)Game1.tile[num50, num51].wall] || Game1.wallLight[(int)Game1.tile[num50 - 1, num51].wall] || Game1.wallLight[(int)Game1.tile[num50 + 1, num51].wall])
                                    {
                                        flag3 = true;
                                    }
                                }
                                else if (Game1.wallLight[(int)Game1.tile[num50, num51].wall])
                                {
                                    flag3 = true;
                                }
                                if ((flag3 || color14.R == 0 || color14.G == 0 || color14.B == 0) && (color14.R > 0 || color14.G > 0 || color14.B > 0) && (Game1.wallLight[(int)Game1.tile[num50, num51].wall] || Game1.caveParallax != 0f))
                                {
                                    if (Lighting.lightMode < 2 && color14.R < 230 && color14.G < 230 && color14.B < 230 && Game1.ugBackTransition == 0f)
                                    {
                                        if (((int)color14.R > num3 || (double)color14.G > (double)num3 * 1.1 || (double)color14.B > (double)num3 * 1.2) && !Game1.tile[num50, num51].active())
                                        {
                                            Lighting.GetColor9Slice(num50, num51, ref array);
                                            for (int num52 = 0; num52 < 9; num52++)
                                            {
                                                int num53 = 0;
                                                int num54 = 0;
                                                int width2 = 4;
                                                int height2 = 4;
                                                Microsoft.Xna.Framework.Color color15 = color14;
                                                Microsoft.Xna.Framework.Color color16 = color14;
                                                switch (num52)
                                                {
                                                    case 0:
                                                        if (!Game1.tile[num50 - 1, num51 - 1].active())
                                                        {
                                                            color16 = array[num52];
                                                        }
                                                        break;
                                                    case 1:
                                                        width2 = 8;
                                                        num53 = 4;
                                                        if (!Game1.tile[num50, num51 - 1].active())
                                                        {
                                                            color16 = array[num52];
                                                        }
                                                        break;
                                                    case 2:
                                                        num53 = 12;
                                                        if (!Game1.tile[num50 + 1, num51 - 1].active())
                                                        {
                                                            color16 = array[num52];
                                                        }
                                                        break;
                                                    case 3:
                                                        height2 = 8;
                                                        num54 = 4;
                                                        if (!Game1.tile[num50 - 1, num51].active())
                                                        {
                                                            color16 = array[num52];
                                                        }
                                                        break;
                                                    case 4:
                                                        width2 = 8;
                                                        height2 = 8;
                                                        num53 = 4;
                                                        num54 = 4;
                                                        break;
                                                    case 5:
                                                        num53 = 12;
                                                        num54 = 4;
                                                        height2 = 8;
                                                        if (!Game1.tile[num50 + 1, num51].active())
                                                        {
                                                            color16 = array[num52];
                                                        }
                                                        break;
                                                    case 6:
                                                        num54 = 12;
                                                        if (!Game1.tile[num50 - 1, num51 + 1].active())
                                                        {
                                                            color16 = array[num52];
                                                        }
                                                        break;
                                                    case 7:
                                                        width2 = 8;
                                                        height2 = 4;
                                                        num53 = 4;
                                                        num54 = 12;
                                                        if (!Game1.tile[num50, num51 + 1].active())
                                                        {
                                                            color16 = array[num52];
                                                        }
                                                        break;
                                                    case 8:
                                                        num53 = 12;
                                                        num54 = 12;
                                                        if (!Game1.tile[num50 + 1, num51 + 1].active())
                                                        {
                                                            color16 = array[num52];
                                                        }
                                                        break;
                                                }
                                                color15.R = (byte)((color14.R + color16.R) / 2);
                                                color15.G = (byte)((color14.G + color16.G) / 2);
                                                color15.B = (byte)((color14.B + color16.B) / 2);
                                                color15.R = (byte)((float)color15.R * x);
                                                color15.G = (byte)((float)color15.G * y);
                                                color15.B = (byte)((float)color15.B * z);
                                                Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[3]], new Vector2((float)(this.bgStart + num5 * num44 + 16 * num46 + num53 + num43), (float)(this.bgStartY + Game1.backgroundHeight[array2[3]] * num45 + 16 * num47 + num54)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num46 + num53 + num43 + 16, 16 * num47 + num54, width2, height2)), color15);
                                                if (Game1.ugBackTransition > 0f)
                                                {
                                                    Microsoft.Xna.Framework.Color color17 = color15;
                                                    color17.R = (byte)((float)color17.R * Game1.ugBackTransition);
                                                    color17.G = (byte)((float)color17.G * Game1.ugBackTransition);
                                                    color17.B = (byte)((float)color17.B * Game1.ugBackTransition);
                                                    color17.A = (byte)((float)color17.A * Game1.ugBackTransition);
                                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[array3[3]], new Vector2((float)(this.bgStart + num5 * num44 + 16 * num46 + num53 + num43), (float)(this.bgStartY + Game1.backgroundHeight[array3[3]] * num45 + 16 * num47 + num54)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num46 + num53 + num43 + 16, 16 * num47 + num54, width2, height2)), color17);
                                                }
                                            }
                                        }
                                        else if ((int)color14.R > num4 || (double)color14.G > (double)num4 * 1.1 || (double)color14.B > (double)num4 * 1.2)
                                        {
                                            Lighting.GetColor4Slice(num50, num51, ref array);
                                            for (int num55 = 0; num55 < 4; num55++)
                                            {
                                                int num56 = 0;
                                                int num57 = 0;
                                                Microsoft.Xna.Framework.Color color18 = color14;
                                                Microsoft.Xna.Framework.Color color19 = array[num55];
                                                switch (num55)
                                                {
                                                    case 1:
                                                        num56 = 8;
                                                        break;
                                                    case 2:
                                                        num57 = 8;
                                                        break;
                                                    case 3:
                                                        num56 = 8;
                                                        num57 = 8;
                                                        break;
                                                }
                                                color18.R = (byte)((color14.R + color19.R) / 2);
                                                color18.G = (byte)((color14.G + color19.G) / 2);
                                                color18.B = (byte)((color14.B + color19.B) / 2);
                                                color18.R = (byte)((float)color18.R * x);
                                                color18.G = (byte)((float)color18.G * y);
                                                color18.B = (byte)((float)color18.B * z);
                                                Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[3]], new Vector2((float)(this.bgStart + num5 * num44 + 16 * num46 + num56 + num43), (float)(this.bgStartY + Game1.backgroundHeight[array2[3]] * num45 + 16 * num47 + num57)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num46 + num56 + num43 + 16, 16 * num47 + num57, 8, 8)), color18);
                                                if (Game1.ugBackTransition > 0f)
                                                {
                                                    Microsoft.Xna.Framework.Color color20 = color18;
                                                    color20.R = (byte)((float)color20.R * Game1.ugBackTransition);
                                                    color20.G = (byte)((float)color20.G * Game1.ugBackTransition);
                                                    color20.B = (byte)((float)color20.B * Game1.ugBackTransition);
                                                    color20.A = (byte)((float)color20.A * Game1.ugBackTransition);
                                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[array3[3]], new Vector2((float)(this.bgStart + num5 * num44 + 16 * num46 + num56 + num43), (float)(this.bgStartY + Game1.backgroundHeight[array3[3]] * num45 + 16 * num47 + num57)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num46 + num56 + num43 + 16, 16 * num47 + num57, 8, 8)), color20);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            color14.R = (byte)((float)color14.R * x);
                                            color14.G = (byte)((float)color14.G * y);
                                            color14.B = (byte)((float)color14.B * z);
                                            Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[3]], new Vector2((float)(this.bgStart + num5 * num44 + 16 * num46 + num43), (float)(this.bgStartY + Game1.backgroundHeight[array2[3]] * num45 + 16 * num47)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num46 + num43 + 16, 16 * num47, 16, 16)), color14);
                                            if (Game1.ugBackTransition > 0f)
                                            {
                                                Microsoft.Xna.Framework.Color color21 = color14;
                                                color21.R = (byte)((float)color21.R * Game1.ugBackTransition);
                                                color21.G = (byte)((float)color21.G * Game1.ugBackTransition);
                                                color21.B = (byte)((float)color21.B * Game1.ugBackTransition);
                                                color21.A = (byte)((float)color21.A * Game1.ugBackTransition);
                                                Game1.spriteBatch.Draw(Game1.backgroundTexture[array3[3]], new Vector2((float)(this.bgStart + num5 * num44 + 16 * num46 + num43), (float)(this.bgStartY + Game1.backgroundHeight[array3[3]] * num45 + 16 * num47)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num46 + num43 + 16, 16 * num47, 16, 16)), color21);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        color14.R = (byte)((float)color14.R * x);
                                        color14.G = (byte)((float)color14.G * y);
                                        color14.B = (byte)((float)color14.B * z);
                                        Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[3]], new Vector2((float)(this.bgStart + num5 * num44 + 16 * num46 + num43), (float)(this.bgStartY + Game1.backgroundHeight[array2[3]] * num45 + 16 * num47)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num46 + num43 + 16, 16 * num47, 16, 16)), color14);
                                        if (Game1.ugBackTransition > 0f)
                                        {
                                            Microsoft.Xna.Framework.Color color22 = color14;
                                            color22.R = (byte)((float)color22.R * Game1.ugBackTransition);
                                            color22.G = (byte)((float)color22.G * Game1.ugBackTransition);
                                            color22.B = (byte)((float)color22.B * Game1.ugBackTransition);
                                            color22.A = (byte)((float)color22.A * Game1.ugBackTransition);
                                            Game1.spriteBatch.Draw(Game1.backgroundTexture[array3[3]], new Vector2((float)(this.bgStart + num5 * num44 + 16 * num46 + num43), (float)(this.bgStartY + Game1.backgroundHeight[array3[3]] * num45 + 16 * num47)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num46 + num43 + 16, 16 * num47, 16, 16)), color22);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                num5 = 128;
                if (flag)
                {
                    this.bgParallax = (double)Game1.caveParallax;
                    this.bgStart = (int)(-Math.IEEERemainder((double)num5 + (double)Game1.screenPosition.X * this.bgParallax, (double)num5) - (double)(num5 / 2)) - (int)value.X;
                    this.bgLoops = (Game1.screenWidth + (int)value.X * 2) / num5 + 2;
                    this.bgTop = this.bgStartY + this.bgLoopsY * Game1.backgroundHeight[2];
                    for (int num58 = 0; num58 < this.bgLoops; num58++)
                    {
                        for (int num59 = 0; num59 < num5 / 16; num59++)
                        {
                            float num60 = (float)(this.bgStart + num5 * num58 + num59 * 16 + 8);
                            float num61 = (float)this.bgTop;
                            Microsoft.Xna.Framework.Color color23 = Lighting.GetColor((int)((num60 + Game1.screenPosition.X) / 16f), (int)((Game1.screenPosition.Y + num61) / 16f));
                            color23.R = (byte)((float)color23.R * x);
                            color23.G = (byte)((float)color23.G * y);
                            color23.B = (byte)((float)color23.B * z);
                            Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[4]], new Vector2((float)(this.bgStart + num5 * num58 + 16 * num59 + num43), (float)this.bgTop) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num59 + num43 + 16, Game1.magmaBGFrame * 16, 16, 16)), color23);
                            if (Game1.ugBackTransition > 0f)
                            {
                                Microsoft.Xna.Framework.Color color24 = color23;
                                color24.R = (byte)((float)color24.R * Game1.ugBackTransition);
                                color24.G = (byte)((float)color24.G * Game1.ugBackTransition);
                                color24.B = (byte)((float)color24.B * Game1.ugBackTransition);
                                color24.A = (byte)((float)color24.A * Game1.ugBackTransition);
                                Game1.spriteBatch.Draw(Game1.backgroundTexture[array3[4]], new Vector2((float)(this.bgStart + num5 * num58 + 16 * num59 + num43), (float)this.bgTop) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num59 + num43 + 16, Game1.magmaBGFrame * 16, 16, 16)), color24);
                            }
                        }
                    }
                }
            }
            this.bgTop = (int)((float)((int)num * 16) - Game1.screenPosition.Y + 16f + 600f) - 8;
            bool flag4 = false;
            if (num * 16.0 <= (double)(Game1.screenPosition.Y + 600f))
            {
                this.bgStart = (int)(-Math.IEEERemainder((double)num5 + (double)Game1.screenPosition.X * this.bgParallax, (double)num5) - (double)(num5 / 2)) - (int)value.X;
                this.bgLoops = (Game1.screenWidth + (int)value.X * 2) / num5 + 2;
                if (num * 16.0 + (double)Game1.screenHeight < (double)(Game1.screenPosition.Y - 16f))
                {
                    this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTop, (double)Game1.backgroundHeight[2]) - (double)Game1.backgroundHeight[2]);
                    this.bgLoopsY = (Game1.screenHeight - this.bgStartY + (int)value.Y * 2) / Game1.backgroundHeight[2] + 1;
                }
                else
                {
                    this.bgStartY = this.bgTop;
                    this.bgLoopsY = (Game1.screenHeight - this.bgTop + (int)value.Y * 2) / Game1.backgroundHeight[2] + 1;
                }
                if ((float)(Game1.maxTilesY - 200) * 16f < Game1.screenPosition.Y + (float)Game1.screenHeight)
                {
                    this.bgLoopsY = (int)Math.Ceiling((double)(((float)(Game1.maxTilesY - 200) * 16f - Game1.screenPosition.Y - (float)this.bgStartY) / (float)Game1.backgroundHeight[2]));
                    flag4 = true;
                }
                num3 = (int)((double)num3 * 1.5);
                num4 = (int)((double)num4 * 1.5);
                float num62 = (float)this.bgStart + Game1.screenPosition.X;
                num62 = -(float)Math.IEEERemainder((double)num62, 16.0);
                num62 = (float)Math.Round((double)num62);
                int num63 = (int)num62;
                if (num63 == -8)
                {
                    num63 = 8;
                }
                for (int num64 = 0; num64 < this.bgLoops; num64++)
                {
                    for (int num65 = 0; num65 < this.bgLoopsY; num65++)
                    {
                        for (int num66 = 0; num66 < num5 / 16; num66++)
                        {
                            for (int num67 = 0; num67 < 6; num67++)
                            {
                                float num68 = (float)(this.bgStartY + num65 * 96 + num67 * 16 + 8);
                                float num69 = (float)(this.bgStart + num5 * num64 + num66 * 16 + 8);
                                int num70 = (int)((num69 + Game1.screenPosition.X) / 16f);
                                int num71 = (int)((num68 + Game1.screenPosition.Y) / 16f);
                                Microsoft.Xna.Framework.Color color25 = Lighting.GetColor(num70, num71);
                                if (Game1.tile[num70, num71] == null)
                                {
                                    Game1.tile[num70, num71] = new Tile();
                                }
                                bool flag5 = false;
                                if (Game1.caveParallax != 0f)
                                {
                                    if (Game1.tile[num70 - 1, num71] == null)
                                    {
                                        Game1.tile[num70 - 1, num71] = new Tile();
                                    }
                                    if (Game1.tile[num70 + 1, num71] == null)
                                    {
                                        Game1.tile[num70 + 1, num71] = new Tile();
                                    }
                                    if (Game1.wallLight[(int)Game1.tile[num70, num71].wall] || Game1.wallLight[(int)Game1.tile[num70 - 1, num71].wall] || Game1.wallLight[(int)Game1.tile[num70 + 1, num71].wall])
                                    {
                                        flag5 = true;
                                    }
                                }
                                else if (Game1.wallLight[(int)Game1.tile[num70, num71].wall])
                                {
                                    flag5 = true;
                                }
                                if ((flag5 || color25.R == 0 || color25.G == 0 || color25.B == 0) && (color25.R > 0 || color25.G > 0 || color25.B > 0 || num71 > Game1.maxTilesY - 300) && (Game1.wallLight[(int)Game1.tile[num70, num71].wall] || Game1.caveParallax != 0f))
                                {
                                    if (Lighting.lightMode < 2 && color25.R < 230 && color25.G < 230 && color25.B < 230)
                                    {
                                        if (((int)color25.R > num3 || (double)color25.G > (double)num3 * 1.1 || (double)color25.B > (double)num3 * 1.2) && !Game1.tile[num70, num71].active())
                                        {
                                            Lighting.GetColor9Slice(num70, num71, ref array);
                                            for (int num72 = 0; num72 < 9; num72++)
                                            {
                                                int num73 = 0;
                                                int num74 = 0;
                                                int width3 = 4;
                                                int height3 = 4;
                                                Microsoft.Xna.Framework.Color color26 = color25;
                                                Microsoft.Xna.Framework.Color color27 = color25;
                                                switch (num72)
                                                {
                                                    case 0:
                                                        if (!Game1.tile[num70 - 1, num71 - 1].active())
                                                        {
                                                            color27 = array[num72];
                                                        }
                                                        break;
                                                    case 1:
                                                        width3 = 8;
                                                        num73 = 4;
                                                        if (!Game1.tile[num70, num71 - 1].active())
                                                        {
                                                            color27 = array[num72];
                                                        }
                                                        break;
                                                    case 2:
                                                        num73 = 12;
                                                        if (!Game1.tile[num70 + 1, num71 - 1].active())
                                                        {
                                                            color27 = array[num72];
                                                        }
                                                        break;
                                                    case 3:
                                                        height3 = 8;
                                                        num74 = 4;
                                                        if (!Game1.tile[num70 - 1, num71].active())
                                                        {
                                                            color27 = array[num72];
                                                        }
                                                        break;
                                                    case 4:
                                                        width3 = 8;
                                                        height3 = 8;
                                                        num73 = 4;
                                                        num74 = 4;
                                                        break;
                                                    case 5:
                                                        num73 = 12;
                                                        num74 = 4;
                                                        height3 = 8;
                                                        if (!Game1.tile[num70 + 1, num71].active())
                                                        {
                                                            color27 = array[num72];
                                                        }
                                                        break;
                                                    case 6:
                                                        num74 = 12;
                                                        if (!Game1.tile[num70 - 1, num71 + 1].active())
                                                        {
                                                            color27 = array[num72];
                                                        }
                                                        break;
                                                    case 7:
                                                        width3 = 8;
                                                        height3 = 4;
                                                        num73 = 4;
                                                        num74 = 12;
                                                        if (!Game1.tile[num70, num71 + 1].active())
                                                        {
                                                            color27 = array[num72];
                                                        }
                                                        break;
                                                    case 8:
                                                        num73 = 12;
                                                        num74 = 12;
                                                        if (!Game1.tile[num70 + 1, num71 + 1].active())
                                                        {
                                                            color27 = array[num72];
                                                        }
                                                        break;
                                                }
                                                color26.R = (byte)((color25.R + color27.R) / 2);
                                                color26.G = (byte)((color25.G + color27.G) / 2);
                                                color26.B = (byte)((color25.B + color27.B) / 2);
                                                color26.R = (byte)((float)color26.R * x);
                                                color26.G = (byte)((float)color26.G * y);
                                                color26.B = (byte)((float)color26.B * z);
                                                Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[5]], new Vector2((float)(this.bgStart + num5 * num64 + 16 * num66 + num73 + num63), (float)(this.bgStartY + Game1.backgroundHeight[2] * num65 + 16 * num67 + num74)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num66 + num73 + num63 + 16, 16 * num67 + Game1.backgroundHeight[2] * Game1.magmaBGFrame + num74, width3, height3)), color26, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                            }
                                        }
                                        else if ((int)color25.R > num4 || (double)color25.G > (double)num4 * 1.1 || (double)color25.B > (double)num4 * 1.2)
                                        {
                                            Lighting.GetColor4Slice(num70, num71, ref array);
                                            for (int num75 = 0; num75 < 4; num75++)
                                            {
                                                int num76 = 0;
                                                int num77 = 0;
                                                Microsoft.Xna.Framework.Color color28 = color25;
                                                Microsoft.Xna.Framework.Color color29 = array[num75];
                                                switch (num75)
                                                {
                                                    case 1:
                                                        num76 = 8;
                                                        break;
                                                    case 2:
                                                        num77 = 8;
                                                        break;
                                                    case 3:
                                                        num76 = 8;
                                                        num77 = 8;
                                                        break;
                                                }
                                                color28.R = (byte)((color25.R + color29.R) / 2);
                                                color28.G = (byte)((color25.G + color29.G) / 2);
                                                color28.B = (byte)((color25.B + color29.B) / 2);
                                                color28.R = (byte)((float)color28.R * x);
                                                color28.G = (byte)((float)color28.G * y);
                                                color28.B = (byte)((float)color28.B * z);
                                                Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[5]], new Vector2((float)(this.bgStart + num5 * num64 + 16 * num66 + num76 + num63), (float)(this.bgStartY + Game1.backgroundHeight[2] * num65 + 16 * num67 + num77)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num66 + num76 + num63 + 16, 16 * num67 + Game1.backgroundHeight[2] * Game1.magmaBGFrame + num77, 8, 8)), color28, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                            }
                                        }
                                        else
                                        {
                                            color25.R = (byte)((float)color25.R * x);
                                            color25.G = (byte)((float)color25.G * y);
                                            color25.B = (byte)((float)color25.B * z);
                                            Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[5]], new Vector2((float)(this.bgStart + num5 * num64 + 16 * num66 + num63), (float)(this.bgStartY + Game1.backgroundHeight[2] * num65 + 16 * num67)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num66 + num63 + 16, 16 * num67 + Game1.backgroundHeight[2] * Game1.magmaBGFrame, 16, 16)), color25, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                        }
                                    }
                                    else
                                    {
                                        color25.R = (byte)((float)color25.R * x);
                                        color25.G = (byte)((float)color25.G * y);
                                        color25.B = (byte)((float)color25.B * z);
                                        Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[5]], new Vector2((float)(this.bgStart + num5 * num64 + 16 * num66 + num63), (float)(this.bgStartY + Game1.backgroundHeight[2] * num65 + 16 * num67)) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num66 + num63 + 16, 16 * num67 + Game1.backgroundHeight[2] * Game1.magmaBGFrame, 16, 16)), color25, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                    }
                                }
                            }
                        }
                    }
                }
                if (flag4)
                {
                    this.bgParallax = (double)Game1.caveParallax;
                    this.bgStart = (int)(-Math.IEEERemainder((double)num5 + (double)Game1.screenPosition.X * this.bgParallax, (double)num5) - (double)(num5 / 2)) - (int)value.X;
                    this.bgLoops = (Game1.screenWidth + (int)value.X * 2) / num5 + 2;
                    this.bgTop = this.bgStartY + this.bgLoopsY * Game1.backgroundHeight[2];
                    for (int num78 = 0; num78 < this.bgLoops; num78++)
                    {
                        for (int num79 = 0; num79 < num5 / 16; num79++)
                        {
                            float num80 = (float)(this.bgStart + num5 * num78 + num79 * 16 + 8);
                            float num81 = (float)this.bgTop;
                            Microsoft.Xna.Framework.Color color30 = Lighting.GetColor((int)((num80 + Game1.screenPosition.X) / 16f), (int)((Game1.screenPosition.Y + num81) / 16f));
                            color30.R = (byte)((float)color30.R * x);
                            color30.G = (byte)((float)color30.G * y);
                            color30.B = (byte)((float)color30.B * z);
                            Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[6]], new Vector2((float)(this.bgStart + num5 * num78 + 16 * num79 + num63), (float)this.bgTop) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num79 + num63 + 16, Game1.magmaBGFrame * 16, 16, 16)), color30);
                            if (Game1.ugBackTransition > 0f)
                            {
                                Microsoft.Xna.Framework.Color color31 = color30;
                                color31.R = (byte)((float)color31.R * Game1.ugBackTransition);
                                color31.G = (byte)((float)color31.G * Game1.ugBackTransition);
                                color31.B = (byte)((float)color31.B * Game1.ugBackTransition);
                                color31.A = (byte)((float)color31.A * Game1.ugBackTransition);
                                Game1.spriteBatch.Draw(Game1.backgroundTexture[array3[6]], new Vector2((float)(this.bgStart + num5 * num78 + 16 * num79 + num63), (float)this.bgTop) + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num79 + num63 + 16, Game1.magmaBGFrame * 16, 16, 16)), color31);
                            }
                        }
                    }
                }
            }
            Lighting.brightness = Lighting.defBrightness;
            TimeLogger.DrawTime(3, stopwatch.Elapsed.TotalMilliseconds);
        }
        protected void OldDrawBackground()
        {
            Microsoft.Xna.Framework.Color[] array = new Microsoft.Xna.Framework.Color[9];
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            int num = (int)(255f * (1f - Game1.gfxQuality) + 140f * Game1.gfxQuality);
            int num2 = (int)(200f * (1f - Game1.gfxQuality) + 40f * Game1.gfxQuality);
            int num3 = 128;
            Vector2 zero = new Vector2((float)Game1.offScreenRange, (float)Game1.offScreenRange);
            if (Game1.drawToScreen)
            {
                zero = Vector2.Zero;
            }
            float num4 = 0.9f;
            float num5 = num4;
            float num6 = num4;
            float num7 = num4;
            float num8 = 0f;
            if (Game1.bloodTiles > Game1.evilTiles && Game1.bloodTiles > Game1.holyTiles)
            {
                num8 = (float)Game1.bloodTiles;
            }
            else if (Game1.holyTiles > Game1.evilTiles)
            {
                num8 = (float)Game1.holyTiles;
            }
            else if (Game1.evilTiles > Game1.holyTiles)
            {
                num8 = (float)Game1.evilTiles;
            }
            num8 = MathHelper.Clamp(num8 / 800f, 0f, 1f);
            float num9 = (float)((double)Game1.screenPosition.Y - Game1.worldSurface * 16.0) / 300f;
            if (num9 < 0f)
            {
                num9 = 0f;
            }
            else if (num9 > 1f)
            {
                num9 = 1f;
            }
            float num10 = 1f * (1f - num9) + num5 * num9;
            Lighting.brightness = Lighting.defBrightness * (1f - num9) + 1f * num9;
            float num11 = (float)((double)(Game1.screenPosition.Y - (float)(Game1.screenHeight / 2) + 200f) - Game1.rockLayer * 16.0) / 300f;
            num11 = MathHelper.Clamp(num11, 0f, 1f);
            if (Game1.bloodTiles > Game1.evilTiles && Game1.bloodTiles > Game1.holyTiles)
            {
                num5 = 1f * num8 + num5 * (1f - num8);
                num6 = 0.55f * num8 + num6 * (1f - num8);
                num7 = 0.5f * num8 + num7 * (1f - num8);
            }
            else if (Game1.evilTiles > 0)
            {
                num5 = 0.8f * num8 + num5 * (1f - num8);
                num6 = 0.75f * num8 + num6 * (1f - num8);
                num7 = 1.1f * num8 + num7 * (1f - num8);
            }
            else if (Game1.holyTiles > 0)
            {
                num5 = 1f * num8 + num5 * (1f - num8);
                num6 = 0.7f * num8 + num6 * (1f - num8);
                num7 = 0.9f * num8 + num7 * (1f - num8);
            }
            num5 = 1f * (num10 - num11) + num5 * num11;
            num6 = 1f * (num10 - num11) + num6 * num11;
            num7 = 1f * (num10 - num11) + num7 * num11;
            int num12 = (int)((Game1.screenPosition.X + (float)(Game1.screenWidth / 2)) / 16f);
            int num13;
            if (num12 <= Game1.caveBackX[0])
            {
                num13 = Game1.caveBackStyle[0];
            }
            else if (num12 <= Game1.treeX[1])
            {
                num13 = Game1.caveBackStyle[1];
            }
            else if (num12 <= Game1.treeX[2])
            {
                num13 = Game1.caveBackStyle[2];
            }
            else
            {
                num13 = Game1.caveBackStyle[3];
            }
            num13 += 3;
            if (Game1.snowTiles > 300 && (Game1.screenPosition.Y + (float)Game1.screenHeight) / 16f < (float)(Game1.maxTilesY - 250))
            {
                num13 = 1;
            }
            if (Game1.jungleTiles > 80)
            {
                if (num13 == 1)
                {
                    if (Game1.jungleTiles > Game1.snowTiles)
                    {
                        num13 = 11;
                    }
                }
                else
                {
                    num13 = 11;
                }
            }
            if (Game1.shroomTiles > 200)
            {
                num13 = 2;
            }
            if (num13 != Game1.ugBack)
            {
                Game1.oldUgBack = Game1.ugBack;
                Game1.ugBack = num13;
                Game1.ugBackTransition = 1f;
            }
            if (Game1.ugBackTransition > 0f)
            {
                Game1.ugBackTransition -= 0.25f;
            }
            if (Game1.ugBackTransition < 0f)
            {
                Game1.ugBackTransition = 0f;
            }
            int[] array2 = new int[6];
            int[] array3 = new int[6];
            for (int i = 0; i < 2; i++)
            {
                int num14 = Game1.ugBack;
                if (i == 1)
                {
                    num14 = Game1.oldUgBack;
                }
                int[] array4 = new int[6];
                if (num14 == 0)
                {
                    array4[0] = 1;
                    array4[1] = 2;
                    array4[2] = 4;
                    array4[3] = 3;
                    array4[4] = 6;
                    array4[5] = 5;
                }
                else if (num14 == 1)
                {
                    if (Game1.iceBackStyle == 0)
                    {
                        array4[1] = 33;
                        array4[3] = 32;
                        array4[0] = 40;
                        array4[2] = 34;
                    }
                    else if (Game1.iceBackStyle == 1)
                    {
                        array4[1] = 118;
                        array4[3] = 117;
                        array4[0] = 160;
                        array4[2] = 161;
                    }
                    else if (Game1.iceBackStyle == 2)
                    {
                        array4[1] = 165;
                        array4[3] = 167;
                        array4[0] = 164;
                        array4[2] = 166;
                    }
                    else
                    {
                        array4[1] = 120;
                        array4[3] = 119;
                        array4[0] = 162;
                        array4[2] = 163;
                    }
                    array4[4] = array4[3];
                }
                else if (num14 == 2)
                {
                    array4[0] = 62;
                    array4[1] = 63;
                    array4[2] = 64;
                    array4[3] = 65;
                    array4[4] = 143 + Game1.hellBackStyle;
                }
                else if (num14 == 3)
                {
                    array4[0] = 66;
                    array4[1] = 67;
                    array4[2] = 68;
                    array4[3] = 69;
                    array4[4] = 128 + Game1.hellBackStyle;
                }
                else if (num14 == 4)
                {
                    array4[0] = 70;
                    array4[1] = 71;
                    array4[2] = 68;
                    array4[3] = 72;
                    array4[4] = 128 + Game1.hellBackStyle;
                }
                else if (num14 == 5)
                {
                    array4[0] = 73;
                    array4[1] = 74;
                    array4[2] = 75;
                    array4[3] = 76;
                    array4[4] = 131 + Game1.hellBackStyle;
                }
                else if (num14 == 6)
                {
                    array4[0] = 77;
                    array4[1] = 78;
                    array4[2] = 79;
                    array4[3] = 80;
                    array4[4] = 134 + Game1.hellBackStyle;
                }
                else if (num14 == 7)
                {
                    array4[0] = 77;
                    array4[1] = 81;
                    array4[2] = 79;
                    array4[3] = 82;
                    array4[4] = 134 + Game1.hellBackStyle;
                }
                else if (num14 == 8)
                {
                    array4[0] = 83;
                    array4[1] = 84;
                    array4[2] = 85;
                    array4[3] = 86;
                    array4[4] = 137 + Game1.hellBackStyle;
                }
                else if (num14 == 9)
                {
                    array4[0] = 83;
                    array4[1] = 87;
                    array4[2] = 88;
                    array4[3] = 89;
                    array4[4] = 137 + Game1.hellBackStyle;
                }
                else if (num14 == 10)
                {
                    array4[0] = 121;
                    array4[1] = 122;
                    array4[2] = 123;
                    array4[3] = 124;
                    array4[4] = 140 + Game1.hellBackStyle;
                }
                else if (num14 == 11)
                {
                    if (Game1.jungleBackStyle == 0)
                    {
                        array4[0] = 153;
                        array4[1] = 147;
                        array4[2] = 148;
                        array4[3] = 149;
                        array4[4] = 150 + Game1.hellBackStyle;
                    }
                    else
                    {
                        array4[0] = 146;
                        array4[1] = 154;
                        array4[2] = 155;
                        array4[3] = 156;
                        array4[4] = 157 + Game1.hellBackStyle;
                    }
                }
                if (Game1.hellBackStyle == 0)
                {
                    array4[5] = 125;
                }
                if (Game1.hellBackStyle == 1)
                {
                    array4[5] = 126;
                }
                if (Game1.hellBackStyle == 2)
                {
                    array4[5] = 127;
                }
                this.LoadBackground(array4[0]);
                this.LoadBackground(array4[1]);
                this.LoadBackground(array4[2]);
                this.LoadBackground(array4[3]);
                this.LoadBackground(array4[4]);
                this.LoadBackground(array4[5]);
                if (i == 0)
                {
                    for (int j = 0; j < 6; j++)
                    {
                        array2[j] = array4[j];
                    }
                }
                else
                {
                    for (int k = 0; k < 6; k++)
                    {
                        array3[k] = array4[k];
                    }
                }
            }
            Lighting.defBrightness = 1.2f * (1f - num11) + 1f * num11;
            this.bgParallax = (double)Game1.caveParallax;
            this.bgStart = (int)(-Math.IEEERemainder((double)num3 + (double)Game1.screenPosition.X * this.bgParallax, (double)num3) - (double)(num3 / 2)) - (int)zero.X;
            this.bgLoops = Game1.screenWidth / num3 + 2;
            this.bgTop = (int)((float)((int)Game1.worldSurface * 16 - 16) - Game1.screenPosition.Y + 16f);
            for (int l = 0; l < this.bgLoops; l++)
            {
                for (int m = 0; m < num3 / 16; m++)
                {
                    float num15 = (float)this.bgStart + Game1.screenPosition.X;
                    num15 = -(float)Math.IEEERemainder((double)num15, 16.0);
                    num15 = (float)Math.Round((double)num15);
                    int num16 = (int)num15;
                    if (num16 == -8)
                    {
                        num16 = 8;
                    }
                    float num17 = (float)(this.bgStart + num3 * l + m * 16 + 8);
                    float num18 = (float)this.bgTop;
                    Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)((num17 + Game1.screenPosition.X) / 16f), (int)((Game1.screenPosition.Y + num18) / 16f));
                    color.R = (byte)((float)color.R * num5);
                    color.G = (byte)((float)color.G * num6);
                    color.B = (byte)((float)color.B * num7);
                    Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[0]], new Vector2((float)(this.bgStart + num3 * l + 16 * m + num16), (float)this.bgTop) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * m + num16 + 16, 0, 16, 16)), color);
                    if (Game1.ugBackTransition > 0f)
                    {
                        Microsoft.Xna.Framework.Color color2 = color;
                        color2.R = (byte)((float)color2.R * Game1.ugBackTransition);
                        color2.G = (byte)((float)color2.G * Game1.ugBackTransition);
                        color2.B = (byte)((float)color2.B * Game1.ugBackTransition);
                        color2.A = (byte)((float)color2.A * Game1.ugBackTransition);
                        Game1.spriteBatch.Draw(Game1.backgroundTexture[array3[0]], new Vector2((float)(this.bgStart + num3 * l + 16 * m + num16), (float)this.bgTop) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * m + num16 + 16, 0, 16, 16)), color2);
                    }
                }
            }
            double num19 = (double)(Game1.maxTilesY - 230);
            double num20 = (double)((int)((num19 - Game1.worldSurface) / 6.0) * 6);
            num19 = Game1.worldSurface + num20 - 5.0;
            bool flag = false;
            bool flag2 = false;
            this.bgTop = (int)((float)((int)Game1.worldSurface * 16) - Game1.screenPosition.Y + 16f);
            if (Game1.worldSurface * 16.0 <= (double)(Game1.screenPosition.Y + (float)Game1.screenHeight + (float)Game1.offScreenRange))
            {
                this.bgParallax = (double)Game1.caveParallax;
                this.bgStart = (int)(-Math.IEEERemainder((double)num3 + (double)Game1.screenPosition.X * this.bgParallax, (double)num3) - (double)(num3 / 2)) - (int)zero.X;
                this.bgLoops = (Game1.screenWidth + (int)zero.X * 2) / num3 + 2;
                if (Game1.worldSurface * 16.0 < (double)(Game1.screenPosition.Y - 16f))
                {
                    this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTop, (double)Game1.backgroundHeight[2]) - (double)Game1.backgroundHeight[2]);
                    this.bgLoopsY = (Game1.screenHeight - this.bgStartY + (int)zero.Y * 2) / Game1.backgroundHeight[2] + 1;
                }
                else
                {
                    this.bgStartY = this.bgTop;
                    this.bgLoopsY = (Game1.screenHeight - this.bgTop + (int)zero.Y * 2) / Game1.backgroundHeight[2] + 1;
                }
                if (Game1.rockLayer * 16.0 < (double)(Game1.screenPosition.Y + 600f))
                {
                    this.bgLoopsY = (int)(Game1.rockLayer * 16.0 - (double)Game1.screenPosition.Y + 600.0 - (double)this.bgStartY) / Game1.backgroundHeight[2];
                    flag2 = true;
                }
                float num21 = (float)this.bgStart + Game1.screenPosition.X;
                num21 = -(float)Math.IEEERemainder((double)num21, 16.0);
                num21 = (float)Math.Round((double)num21);
                int num22 = (int)num21;
                if (num22 == -8)
                {
                    num22 = 8;
                }
                for (int n = 0; n < this.bgLoops; n++)
                {
                    for (int num23 = 0; num23 < this.bgLoopsY; num23++)
                    {
                        for (int num24 = 0; num24 < num3 / 16; num24++)
                        {
                            for (int num25 = 0; num25 < 6; num25++)
                            {
                                float num26 = (float)(this.bgStartY + num23 * 96 + num25 * 16 + 8);
                                float num27 = (float)(this.bgStart + num3 * n + num24 * 16 + 8);
                                int num28 = (int)((num27 + Game1.screenPosition.X) / 16f);
                                int num29 = (int)((num26 + Game1.screenPosition.Y) / 16f);
                                Microsoft.Xna.Framework.Color color3 = Lighting.GetColor(num28, num29);
                                if (Game1.tile[num28, num29] == null)
                                {
                                    Game1.tile[num28, num29] = new Tile();
                                }
                                if (color3.R > 0 || color3.G > 0 || color3.B > 0)
                                {
                                    if (!Game1.drawToScreen)
                                    {
                                        VertexColors colors;
                                        Lighting.GetColor4Slice_New(num28, num29, out colors, 1f);
                                        Game1.tileBatch.Draw(Game1.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num22), (float)(this.bgStartY + Game1.backgroundHeight[array3[1]] * num23 + 16 * num25)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num24 + num22 + 16, 16 * num25, 16, 16)), colors, Vector2.Zero, 1f, SpriteEffects.None);
                                    }
                                    else
                                    {
                                        if (((int)color3.R > num || (double)color3.G > (double)num * 1.1 || (double)color3.B > (double)num * 1.2) && !Game1.tile[num28, num29].active() && Game1.wallLight[(int)Game1.tile[num28, num29].wall] && Game1.ugBackTransition == 0f)
                                        {
                                            Lighting.GetColor9Slice(num28, num29, ref array);
                                            try
                                            {
                                                for (int num30 = 0; num30 < 9; num30++)
                                                {
                                                    int num31 = 0;
                                                    int num32 = 0;
                                                    int width = 4;
                                                    int height = 4;
                                                    Microsoft.Xna.Framework.Color color4 = color3;
                                                    Microsoft.Xna.Framework.Color color5 = color3;
                                                    switch (num30)
                                                    {
                                                        case 0:
                                                            if (!Game1.tile[num28 - 1, num29 - 1].active())
                                                            {
                                                                color5 = array[num30];
                                                            }
                                                            break;
                                                        case 1:
                                                            width = 8;
                                                            num31 = 4;
                                                            if (!Game1.tile[num28, num29 - 1].active())
                                                            {
                                                                color5 = array[num30];
                                                            }
                                                            break;
                                                        case 2:
                                                            num31 = 12;
                                                            if (!Game1.tile[num28 + 1, num29 - 1].active())
                                                            {
                                                                color5 = array[num30];
                                                            }
                                                            break;
                                                        case 3:
                                                            height = 8;
                                                            num32 = 4;
                                                            if (!Game1.tile[num28 - 1, num29].active())
                                                            {
                                                                color5 = array[num30];
                                                            }
                                                            break;
                                                        case 4:
                                                            width = 8;
                                                            height = 8;
                                                            num31 = 4;
                                                            num32 = 4;
                                                            break;
                                                        case 5:
                                                            num31 = 12;
                                                            num32 = 4;
                                                            height = 8;
                                                            if (!Game1.tile[num28 + 1, num29].active())
                                                            {
                                                                color5 = array[num30];
                                                            }
                                                            break;
                                                        case 6:
                                                            num32 = 12;
                                                            if (!Game1.tile[num28 - 1, num29 + 1].active())
                                                            {
                                                                color5 = array[num30];
                                                            }
                                                            break;
                                                        case 7:
                                                            width = 8;
                                                            height = 4;
                                                            num31 = 4;
                                                            num32 = 12;
                                                            if (!Game1.tile[num28, num29 + 1].active())
                                                            {
                                                                color5 = array[num30];
                                                            }
                                                            break;
                                                        case 8:
                                                            num31 = 12;
                                                            num32 = 12;
                                                            if (!Game1.tile[num28 + 1, num29 + 1].active())
                                                            {
                                                                color5 = array[num30];
                                                            }
                                                            break;
                                                    }
                                                    color4.R = (byte)((color3.R + color5.R) / 2);
                                                    color4.G = (byte)((color3.G + color5.G) / 2);
                                                    color4.B = (byte)((color3.B + color5.B) / 2);
                                                    color4.R = (byte)((float)color4.R * num5);
                                                    color4.G = (byte)((float)color4.G * num6);
                                                    color4.B = (byte)((float)color4.B * num7);
                                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num31 + num22), (float)(this.bgStartY + Game1.backgroundHeight[array2[1]] * num23 + 16 * num25 + num32)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num24 + num31 + num22 + 16, 16 * num25 + num32, width, height)), color4);
                                                    if (Game1.ugBackTransition > 0f)
                                                    {
                                                        Microsoft.Xna.Framework.Color color6 = color4;
                                                        color6.R = (byte)((float)color6.R * Game1.ugBackTransition);
                                                        color6.G = (byte)((float)color6.G * Game1.ugBackTransition);
                                                        color6.B = (byte)((float)color6.B * Game1.ugBackTransition);
                                                        color6.A = (byte)((float)color6.A * Game1.ugBackTransition);
                                                        Game1.spriteBatch.Draw(Game1.backgroundTexture[array3[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num31 + num22), (float)(this.bgStartY + Game1.backgroundHeight[array3[1]] * num23 + 16 * num25 + num32)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num24 + num31 + num22 + 16, 16 * num25 + num32, width, height)), color6);
                                                    }
                                                }
                                                goto IL_182C;
                                            }
                                            catch
                                            {
                                                color3.R = (byte)((float)color3.R * num5);
                                                color3.G = (byte)((float)color3.G * num6);
                                                color3.B = (byte)((float)color3.B * num7);
                                                Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num22), (float)(this.bgStartY + Game1.backgroundHeight[array2[1]] * num23 + 16 * num25)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num24 + num22 + 16, 16 * num25, 16, 16)), color3);
                                                goto IL_182C;
                                            }
                                        }
                                        if (((int)color3.R > num2 || (double)color3.G > (double)num2 * 1.1 || (double)color3.B > (double)num2 * 1.2) && Game1.ugBackTransition == 0f)
                                        {
                                            Lighting.GetColor4Slice(num28, num29, ref array);
                                            for (int num33 = 0; num33 < 4; num33++)
                                            {
                                                int num34 = 0;
                                                int num35 = 0;
                                                Microsoft.Xna.Framework.Color color7 = color3;
                                                Microsoft.Xna.Framework.Color color8 = array[num33];
                                                switch (num33)
                                                {
                                                    case 1:
                                                        num34 = 8;
                                                        break;
                                                    case 2:
                                                        num35 = 8;
                                                        break;
                                                    case 3:
                                                        num34 = 8;
                                                        num35 = 8;
                                                        break;
                                                }
                                                color7.R = (byte)((color3.R + color8.R) / 2);
                                                color7.G = (byte)((color3.G + color8.G) / 2);
                                                color7.B = (byte)((color3.B + color8.B) / 2);
                                                color7.R = (byte)((float)color7.R * num5);
                                                color7.G = (byte)((float)color7.G * num6);
                                                color7.B = (byte)((float)color7.B * num7);
                                                Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num34 + num22), (float)(this.bgStartY + Game1.backgroundHeight[array2[1]] * num23 + 16 * num25 + num35)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num24 + num34 + num22 + 16, 16 * num25 + num35, 8, 8)), color7);
                                                if (Game1.ugBackTransition > 0f)
                                                {
                                                    Microsoft.Xna.Framework.Color color9 = color7;
                                                    color9.R = (byte)((float)color9.R * Game1.ugBackTransition);
                                                    color9.G = (byte)((float)color9.G * Game1.ugBackTransition);
                                                    color9.B = (byte)((float)color9.B * Game1.ugBackTransition);
                                                    color9.A = (byte)((float)color9.A * Game1.ugBackTransition);
                                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[array3[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num34 + num22), (float)(this.bgStartY + Game1.backgroundHeight[array3[1]] * num23 + 16 * num25 + num35)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num24 + num34 + num22 + 16, 16 * num25 + num35, 8, 8)), color9);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            color3.R = (byte)((float)color3.R * num5);
                                            color3.G = (byte)((float)color3.G * num6);
                                            color3.B = (byte)((float)color3.B * num7);
                                            Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num22), (float)(this.bgStartY + Game1.backgroundHeight[array2[1]] * num23 + 16 * num25)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num24 + num22 + 16, 16 * num25, 16, 16)), color3);
                                            if (Game1.ugBackTransition > 0f)
                                            {
                                                Microsoft.Xna.Framework.Color color10 = color3;
                                                color10.R = (byte)((float)color10.R * Game1.ugBackTransition);
                                                color10.G = (byte)((float)color10.G * Game1.ugBackTransition);
                                                color10.B = (byte)((float)color10.B * Game1.ugBackTransition);
                                                color10.A = (byte)((float)color10.A * Game1.ugBackTransition);
                                                Game1.spriteBatch.Draw(Game1.backgroundTexture[array3[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num22), (float)(this.bgStartY + Game1.backgroundHeight[array3[1]] * num23 + 16 * num25)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num24 + num22 + 16, 16 * num25, 16, 16)), color10);
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    color3.R = (byte)((float)color3.R * num5);
                                    color3.G = (byte)((float)color3.G * num6);
                                    color3.B = (byte)((float)color3.B * num7);
                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[1]], new Vector2((float)(this.bgStart + num3 * n + 16 * num24 + num22), (float)(this.bgStartY + Game1.backgroundHeight[array2[1]] * num23 + 16 * num25)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num24 + num22 + 16, 16 * num25, 16, 16)), color3);
                                }
                            IL_182C:;
                            }
                        }
                    }
                }
                if (Game1.ugBackTransition > 0f)
                {
                    for (int num36 = 0; num36 < this.bgLoops; num36++)
                    {
                        for (int num37 = 0; num37 < this.bgLoopsY; num37++)
                        {
                            for (int num38 = 0; num38 < num3 / 16; num38++)
                            {
                                for (int num39 = 0; num39 < 6; num39++)
                                {
                                    float num40 = (float)(this.bgStartY + num37 * 96 + num39 * 16 + 8);
                                    float num41 = (float)(this.bgStart + num3 * num36 + num38 * 16 + 8);
                                    int num42 = (int)((num41 + Game1.screenPosition.X) / 16f);
                                    int num43 = (int)((num40 + Game1.screenPosition.Y) / 16f);
                                    Microsoft.Xna.Framework.Color color11 = Lighting.GetColor(num42, num43);
                                    if (Game1.tile[num42, num43] == null)
                                    {
                                        Game1.tile[num42, num43] = new Tile();
                                    }
                                    if (color11.R > 0 || color11.G > 0 || color11.B > 0)
                                    {
                                        VertexColors colors2;
                                        Lighting.GetColor4Slice_New(num42, num43, out colors2, Game1.ugBackTransition);
                                        byte a = (byte)(255f * Game1.ugBackTransition);
                                        colors2.BottomLeftColor.A = a;
                                        colors2.BottomRightColor.A = a;
                                        colors2.TopLeftColor.A = a;
                                        colors2.TopRightColor.A = a;
                                        Game1.tileBatch.Draw(Game1.backgroundTexture[array3[1]], new Vector2((float)(this.bgStart + num3 * num36 + 16 * num38 + num22), (float)(this.bgStartY + Game1.backgroundHeight[array3[1]] * num37 + 16 * num39)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num38 + num22 + 16, 16 * num39, 16, 16)), colors2, Vector2.Zero, 1f, SpriteEffects.None);
                                    }
                                }
                            }
                        }
                    }
                }
                if (flag2)
                {
                    this.bgParallax = (double)Game1.caveParallax;
                    this.bgStart = (int)(-Math.IEEERemainder((double)num3 + (double)Game1.screenPosition.X * this.bgParallax, (double)num3) - (double)(num3 / 2)) - (int)zero.X;
                    this.bgLoops = (Game1.screenWidth + (int)zero.X * 2) / num3 + 2;
                    this.bgTop = this.bgStartY + this.bgLoopsY * Game1.backgroundHeight[2];
                    if (this.bgTop > -32)
                    {
                        for (int num44 = 0; num44 < this.bgLoops; num44++)
                        {
                            for (int num45 = 0; num45 < num3 / 16; num45++)
                            {
                                float num46 = (float)(this.bgStart + num3 * num44 + num45 * 16 + 8);
                                float num47 = (float)this.bgTop;
                                Microsoft.Xna.Framework.Color color12 = Lighting.GetColor((int)((num46 + Game1.screenPosition.X) / 16f), (int)((Game1.screenPosition.Y + num47) / 16f));
                                color12.R = (byte)((float)color12.R * num5);
                                color12.G = (byte)((float)color12.G * num6);
                                color12.B = (byte)((float)color12.B * num7);
                                Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[2]], new Vector2((float)(this.bgStart + num3 * num44 + 16 * num45 + num22), (float)this.bgTop) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num45 + num22 + 16, 0, 16, 16)), color12);
                                if (Game1.ugBackTransition > 0f)
                                {
                                    Microsoft.Xna.Framework.Color color13 = color12;
                                    color13.R = (byte)((float)color13.R * Game1.ugBackTransition);
                                    color13.G = (byte)((float)color13.G * Game1.ugBackTransition);
                                    color13.B = (byte)((float)color13.B * Game1.ugBackTransition);
                                    color13.A = (byte)((float)color13.A * Game1.ugBackTransition);
                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[array3[2]], new Vector2((float)(this.bgStart + num3 * num44 + 16 * num45 + num22), (float)this.bgTop) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num45 + num22 + 16, 0, 16, 16)), color13);
                                }
                            }
                        }
                    }
                }
            }
            this.bgTop = (int)((float)((int)Game1.rockLayer * 16) - Game1.screenPosition.Y + 16f + 600f - 8f);
            if (Game1.rockLayer * 16.0 <= (double)(Game1.screenPosition.Y + 600f))
            {
                this.bgParallax = (double)Game1.caveParallax;
                this.bgStart = (int)(-Math.IEEERemainder((double)num3 + (double)Game1.screenPosition.X * this.bgParallax, (double)num3) - (double)(num3 / 2)) - (int)zero.X;
                this.bgLoops = (Game1.screenWidth + (int)zero.X * 2) / num3 + 2;
                if (Game1.rockLayer * 16.0 + (double)Game1.screenHeight < (double)(Game1.screenPosition.Y - 16f))
                {
                    this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTop, (double)Game1.backgroundHeight[3]) - (double)Game1.backgroundHeight[3]);
                    this.bgLoopsY = (Game1.screenHeight - this.bgStartY + (int)zero.Y * 2) / Game1.backgroundHeight[2] + 1;
                }
                else
                {
                    this.bgStartY = this.bgTop;
                    this.bgLoopsY = (Game1.screenHeight - this.bgTop + (int)zero.Y * 2) / Game1.backgroundHeight[2] + 1;
                }
                if (num19 * 16.0 < (double)(Game1.screenPosition.Y + 600f))
                {
                    this.bgLoopsY = (int)(num19 * 16.0 - (double)Game1.screenPosition.Y + 600.0 - (double)this.bgStartY) / Game1.backgroundHeight[2];
                    flag = true;
                }
                float num48 = (float)this.bgStart + Game1.screenPosition.X;
                num48 = -(float)Math.IEEERemainder((double)num48, 16.0);
                num48 = (float)Math.Round((double)num48);
                int num49 = (int)num48;
                if (num49 == -8)
                {
                    num49 = 8;
                }
                for (int num50 = 0; num50 < this.bgLoops; num50++)
                {
                    for (int num51 = 0; num51 < this.bgLoopsY; num51++)
                    {
                        for (int num52 = 0; num52 < num3 / 16; num52++)
                        {
                            for (int num53 = 0; num53 < 6; num53++)
                            {
                                float num54 = (float)(this.bgStartY + num51 * 96 + num53 * 16 + 8);
                                float num55 = (float)(this.bgStart + num3 * num50 + num52 * 16 + 8);
                                int num56 = (int)((num55 + Game1.screenPosition.X) / 16f);
                                int num57 = (int)((num54 + Game1.screenPosition.Y) / 16f);
                                Microsoft.Xna.Framework.Color color14 = Lighting.GetColor(num56, num57);
                                if (Game1.tile[num56, num57] == null)
                                {
                                    Game1.tile[num56, num57] = new Tile();
                                }
                                bool flag3 = false;
                                if (Game1.caveParallax != 0f)
                                {
                                    if (Game1.tile[num56 - 1, num57] == null)
                                    {
                                        Game1.tile[num56 - 1, num57] = new Tile();
                                    }
                                    if (Game1.tile[num56 + 1, num57] == null)
                                    {
                                        Game1.tile[num56 + 1, num57] = new Tile();
                                    }
                                    if (Game1.wallLight[(int)Game1.tile[num56, num57].wall] || Game1.wallLight[(int)Game1.tile[num56 - 1, num57].wall] || Game1.wallLight[(int)Game1.tile[num56 + 1, num57].wall])
                                    {
                                        flag3 = true;
                                    }
                                }
                                else if (Game1.wallLight[(int)Game1.tile[num56, num57].wall])
                                {
                                    flag3 = true;
                                }
                                if ((flag3 || color14.R == 0 || color14.G == 0 || color14.B == 0) && (color14.R > 0 || color14.G > 0 || color14.B > 0) && (Game1.wallLight[(int)Game1.tile[num56, num57].wall] || Game1.caveParallax != 0f))
                                {
                                    if (Lighting.lightMode < 2 && color14.R < 230 && color14.G < 230 && color14.B < 230 && Game1.ugBackTransition == 0f)
                                    {
                                        if (((int)color14.R > num || (double)color14.G > (double)num * 1.1 || (double)color14.B > (double)num * 1.2) && !Game1.tile[num56, num57].active())
                                        {
                                            Lighting.GetColor9Slice(num56, num57, ref array);
                                            for (int num58 = 0; num58 < 9; num58++)
                                            {
                                                int num59 = 0;
                                                int num60 = 0;
                                                int width2 = 4;
                                                int height2 = 4;
                                                Microsoft.Xna.Framework.Color color15 = color14;
                                                Microsoft.Xna.Framework.Color color16 = color14;
                                                switch (num58)
                                                {
                                                    case 0:
                                                        if (!Game1.tile[num56 - 1, num57 - 1].active())
                                                        {
                                                            color16 = array[num58];
                                                        }
                                                        break;
                                                    case 1:
                                                        width2 = 8;
                                                        num59 = 4;
                                                        if (!Game1.tile[num56, num57 - 1].active())
                                                        {
                                                            color16 = array[num58];
                                                        }
                                                        break;
                                                    case 2:
                                                        num59 = 12;
                                                        if (!Game1.tile[num56 + 1, num57 - 1].active())
                                                        {
                                                            color16 = array[num58];
                                                        }
                                                        break;
                                                    case 3:
                                                        height2 = 8;
                                                        num60 = 4;
                                                        if (!Game1.tile[num56 - 1, num57].active())
                                                        {
                                                            color16 = array[num58];
                                                        }
                                                        break;
                                                    case 4:
                                                        width2 = 8;
                                                        height2 = 8;
                                                        num59 = 4;
                                                        num60 = 4;
                                                        break;
                                                    case 5:
                                                        num59 = 12;
                                                        num60 = 4;
                                                        height2 = 8;
                                                        if (!Game1.tile[num56 + 1, num57].active())
                                                        {
                                                            color16 = array[num58];
                                                        }
                                                        break;
                                                    case 6:
                                                        num60 = 12;
                                                        if (!Game1.tile[num56 - 1, num57 + 1].active())
                                                        {
                                                            color16 = array[num58];
                                                        }
                                                        break;
                                                    case 7:
                                                        width2 = 8;
                                                        height2 = 4;
                                                        num59 = 4;
                                                        num60 = 12;
                                                        if (!Game1.tile[num56, num57 + 1].active())
                                                        {
                                                            color16 = array[num58];
                                                        }
                                                        break;
                                                    case 8:
                                                        num59 = 12;
                                                        num60 = 12;
                                                        if (!Game1.tile[num56 + 1, num57 + 1].active())
                                                        {
                                                            color16 = array[num58];
                                                        }
                                                        break;
                                                }
                                                color15.R = (byte)((color14.R + color16.R) / 2);
                                                color15.G = (byte)((color14.G + color16.G) / 2);
                                                color15.B = (byte)((color14.B + color16.B) / 2);
                                                color15.R = (byte)((float)color15.R * num5);
                                                color15.G = (byte)((float)color15.G * num6);
                                                color15.B = (byte)((float)color15.B * num7);
                                                Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[3]], new Vector2((float)(this.bgStart + num3 * num50 + 16 * num52 + num59 + num49), (float)(this.bgStartY + Game1.backgroundHeight[array2[3]] * num51 + 16 * num53 + num60)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num52 + num59 + num49 + 16, 16 * num53 + num60, width2, height2)), color15);
                                                if (Game1.ugBackTransition > 0f)
                                                {
                                                    Microsoft.Xna.Framework.Color color17 = color15;
                                                    color17.R = (byte)((float)color17.R * Game1.ugBackTransition);
                                                    color17.G = (byte)((float)color17.G * Game1.ugBackTransition);
                                                    color17.B = (byte)((float)color17.B * Game1.ugBackTransition);
                                                    color17.A = (byte)((float)color17.A * Game1.ugBackTransition);
                                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[array3[3]], new Vector2((float)(this.bgStart + num3 * num50 + 16 * num52 + num59 + num49), (float)(this.bgStartY + Game1.backgroundHeight[array3[3]] * num51 + 16 * num53 + num60)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num52 + num59 + num49 + 16, 16 * num53 + num60, width2, height2)), color17);
                                                }
                                            }
                                        }
                                        else if ((int)color14.R > num2 || (double)color14.G > (double)num2 * 1.1 || (double)color14.B > (double)num2 * 1.2)
                                        {
                                            Lighting.GetColor4Slice(num56, num57, ref array);
                                            for (int num61 = 0; num61 < 4; num61++)
                                            {
                                                int num62 = 0;
                                                int num63 = 0;
                                                Microsoft.Xna.Framework.Color color18 = color14;
                                                Microsoft.Xna.Framework.Color color19 = array[num61];
                                                switch (num61)
                                                {
                                                    case 1:
                                                        num62 = 8;
                                                        break;
                                                    case 2:
                                                        num63 = 8;
                                                        break;
                                                    case 3:
                                                        num62 = 8;
                                                        num63 = 8;
                                                        break;
                                                }
                                                color18.R = (byte)((color14.R + color19.R) / 2);
                                                color18.G = (byte)((color14.G + color19.G) / 2);
                                                color18.B = (byte)((color14.B + color19.B) / 2);
                                                color18.R = (byte)((float)color18.R * num5);
                                                color18.G = (byte)((float)color18.G * num6);
                                                color18.B = (byte)((float)color18.B * num7);
                                                Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[3]], new Vector2((float)(this.bgStart + num3 * num50 + 16 * num52 + num62 + num49), (float)(this.bgStartY + Game1.backgroundHeight[array2[3]] * num51 + 16 * num53 + num63)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num52 + num62 + num49 + 16, 16 * num53 + num63, 8, 8)), color18);
                                                if (Game1.ugBackTransition > 0f)
                                                {
                                                    Microsoft.Xna.Framework.Color color20 = color18;
                                                    color20.R = (byte)((float)color20.R * Game1.ugBackTransition);
                                                    color20.G = (byte)((float)color20.G * Game1.ugBackTransition);
                                                    color20.B = (byte)((float)color20.B * Game1.ugBackTransition);
                                                    color20.A = (byte)((float)color20.A * Game1.ugBackTransition);
                                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[array3[3]], new Vector2((float)(this.bgStart + num3 * num50 + 16 * num52 + num62 + num49), (float)(this.bgStartY + Game1.backgroundHeight[array3[3]] * num51 + 16 * num53 + num63)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num52 + num62 + num49 + 16, 16 * num53 + num63, 8, 8)), color20);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            color14.R = (byte)((float)color14.R * num5);
                                            color14.G = (byte)((float)color14.G * num6);
                                            color14.B = (byte)((float)color14.B * num7);
                                            Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[3]], new Vector2((float)(this.bgStart + num3 * num50 + 16 * num52 + num49), (float)(this.bgStartY + Game1.backgroundHeight[array2[3]] * num51 + 16 * num53)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num52 + num49 + 16, 16 * num53, 16, 16)), color14);
                                            if (Game1.ugBackTransition > 0f)
                                            {
                                                Microsoft.Xna.Framework.Color color21 = color14;
                                                color21.R = (byte)((float)color21.R * Game1.ugBackTransition);
                                                color21.G = (byte)((float)color21.G * Game1.ugBackTransition);
                                                color21.B = (byte)((float)color21.B * Game1.ugBackTransition);
                                                color21.A = (byte)((float)color21.A * Game1.ugBackTransition);
                                                Game1.spriteBatch.Draw(Game1.backgroundTexture[array3[3]], new Vector2((float)(this.bgStart + num3 * num50 + 16 * num52 + num49), (float)(this.bgStartY + Game1.backgroundHeight[array3[3]] * num51 + 16 * num53)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num52 + num49 + 16, 16 * num53, 16, 16)), color21);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        color14.R = (byte)((float)color14.R * num5);
                                        color14.G = (byte)((float)color14.G * num6);
                                        color14.B = (byte)((float)color14.B * num7);
                                        Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[3]], new Vector2((float)(this.bgStart + num3 * num50 + 16 * num52 + num49), (float)(this.bgStartY + Game1.backgroundHeight[array2[3]] * num51 + 16 * num53)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num52 + num49 + 16, 16 * num53, 16, 16)), color14);
                                        if (Game1.ugBackTransition > 0f)
                                        {
                                            Microsoft.Xna.Framework.Color color22 = color14;
                                            color22.R = (byte)((float)color22.R * Game1.ugBackTransition);
                                            color22.G = (byte)((float)color22.G * Game1.ugBackTransition);
                                            color22.B = (byte)((float)color22.B * Game1.ugBackTransition);
                                            color22.A = (byte)((float)color22.A * Game1.ugBackTransition);
                                            Game1.spriteBatch.Draw(Game1.backgroundTexture[array3[3]], new Vector2((float)(this.bgStart + num3 * num50 + 16 * num52 + num49), (float)(this.bgStartY + Game1.backgroundHeight[array3[3]] * num51 + 16 * num53)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num52 + num49 + 16, 16 * num53, 16, 16)), color22);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                num3 = 128;
                if (flag)
                {
                    this.bgParallax = (double)Game1.caveParallax;
                    this.bgStart = (int)(-Math.IEEERemainder((double)num3 + (double)Game1.screenPosition.X * this.bgParallax, (double)num3) - (double)(num3 / 2)) - (int)zero.X;
                    this.bgLoops = (Game1.screenWidth + (int)zero.X * 2) / num3 + 2;
                    this.bgTop = this.bgStartY + this.bgLoopsY * Game1.backgroundHeight[2];
                    for (int num64 = 0; num64 < this.bgLoops; num64++)
                    {
                        for (int num65 = 0; num65 < num3 / 16; num65++)
                        {
                            float num66 = (float)(this.bgStart + num3 * num64 + num65 * 16 + 8);
                            float num67 = (float)this.bgTop;
                            Microsoft.Xna.Framework.Color color23 = Lighting.GetColor((int)((num66 + Game1.screenPosition.X) / 16f), (int)((Game1.screenPosition.Y + num67) / 16f));
                            color23.R = (byte)((float)color23.R * num5);
                            color23.G = (byte)((float)color23.G * num6);
                            color23.B = (byte)((float)color23.B * num7);
                            Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[4]], new Vector2((float)(this.bgStart + num3 * num64 + 16 * num65 + num49), (float)this.bgTop) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num65 + num49 + 16, Game1.magmaBGFrame * 16, 16, 16)), color23);
                            if (Game1.ugBackTransition > 0f)
                            {
                                Microsoft.Xna.Framework.Color color24 = color23;
                                color24.R = (byte)((float)color24.R * Game1.ugBackTransition);
                                color24.G = (byte)((float)color24.G * Game1.ugBackTransition);
                                color24.B = (byte)((float)color24.B * Game1.ugBackTransition);
                                color24.A = (byte)((float)color24.A * Game1.ugBackTransition);
                                Game1.spriteBatch.Draw(Game1.backgroundTexture[array3[4]], new Vector2((float)(this.bgStart + num3 * num64 + 16 * num65 + num49), (float)this.bgTop) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num65 + num49 + 16, Game1.magmaBGFrame * 16, 16, 16)), color24);
                            }
                        }
                    }
                }
            }
            this.bgTop = (int)((float)((int)num19 * 16) - Game1.screenPosition.Y + 16f + 600f) - 8;
            if (num19 * 16.0 <= (double)(Game1.screenPosition.Y + 600f))
            {
                this.bgStart = (int)(-Math.IEEERemainder((double)num3 + (double)Game1.screenPosition.X * this.bgParallax, (double)num3) - (double)(num3 / 2)) - (int)zero.X;
                this.bgLoops = (Game1.screenWidth + (int)zero.X * 2) / num3 + 2;
                if (num19 * 16.0 + (double)Game1.screenHeight < (double)(Game1.screenPosition.Y - 16f))
                {
                    this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTop, (double)Game1.backgroundHeight[2]) - (double)Game1.backgroundHeight[2]);
                    this.bgLoopsY = (Game1.screenHeight - this.bgStartY + (int)zero.Y * 2) / Game1.backgroundHeight[2] + 1;
                }
                else
                {
                    this.bgStartY = this.bgTop;
                    this.bgLoopsY = (Game1.screenHeight - this.bgTop + (int)zero.Y * 2) / Game1.backgroundHeight[2] + 1;
                }
                num = (int)((double)num * 1.5);
                num2 = (int)((double)num2 * 1.5);
                float num68 = (float)this.bgStart + Game1.screenPosition.X;
                num68 = -(float)Math.IEEERemainder((double)num68, 16.0);
                num68 = (float)Math.Round((double)num68);
                int num69 = (int)num68;
                if (num69 == -8)
                {
                    num69 = 8;
                }
                for (int num70 = 0; num70 < this.bgLoops; num70++)
                {
                    for (int num71 = 0; num71 < this.bgLoopsY; num71++)
                    {
                        for (int num72 = 0; num72 < num3 / 16; num72++)
                        {
                            for (int num73 = 0; num73 < 6; num73++)
                            {
                                float num74 = (float)(this.bgStartY + num71 * 96 + num73 * 16 + 8);
                                float num75 = (float)(this.bgStart + num3 * num70 + num72 * 16 + 8);
                                int num76 = (int)((num75 + Game1.screenPosition.X) / 16f);
                                int num77 = (int)((num74 + Game1.screenPosition.Y) / 16f);
                                Microsoft.Xna.Framework.Color color25 = Lighting.GetColor(num76, num77);
                                if (Game1.tile[num76, num77] == null)
                                {
                                    Game1.tile[num76, num77] = new Tile();
                                }
                                bool flag4 = false;
                                if (Game1.caveParallax != 0f)
                                {
                                    if (Game1.tile[num76 - 1, num77] == null)
                                    {
                                        Game1.tile[num76 - 1, num77] = new Tile();
                                    }
                                    if (Game1.tile[num76 + 1, num77] == null)
                                    {
                                        Game1.tile[num76 + 1, num77] = new Tile();
                                    }
                                    if (Game1.wallLight[(int)Game1.tile[num76, num77].wall] || Game1.wallLight[(int)Game1.tile[num76 - 1, num77].wall] || Game1.wallLight[(int)Game1.tile[num76 + 1, num77].wall])
                                    {
                                        flag4 = true;
                                    }
                                }
                                else if (Game1.wallLight[(int)Game1.tile[num76, num77].wall])
                                {
                                    flag4 = true;
                                }
                                if ((flag4 || color25.R == 0 || color25.G == 0 || color25.B == 0) && (color25.R > 0 || color25.G > 0 || color25.B > 0) && (Game1.wallLight[(int)Game1.tile[num76, num77].wall] || Game1.caveParallax != 0f))
                                {
                                    if (Lighting.lightMode < 2 && color25.R < 230 && color25.G < 230 && color25.B < 230)
                                    {
                                        if (((int)color25.R > num || (double)color25.G > (double)num * 1.1 || (double)color25.B > (double)num * 1.2) && !Game1.tile[num76, num77].active())
                                        {
                                            Lighting.GetColor9Slice(num76, num77, ref array);
                                            for (int num78 = 0; num78 < 9; num78++)
                                            {
                                                int num79 = 0;
                                                int num80 = 0;
                                                int width3 = 4;
                                                int height3 = 4;
                                                Microsoft.Xna.Framework.Color color26 = color25;
                                                Microsoft.Xna.Framework.Color color27 = color25;
                                                switch (num78)
                                                {
                                                    case 0:
                                                        if (!Game1.tile[num76 - 1, num77 - 1].active())
                                                        {
                                                            color27 = array[num78];
                                                        }
                                                        break;
                                                    case 1:
                                                        width3 = 8;
                                                        num79 = 4;
                                                        if (!Game1.tile[num76, num77 - 1].active())
                                                        {
                                                            color27 = array[num78];
                                                        }
                                                        break;
                                                    case 2:
                                                        num79 = 12;
                                                        if (!Game1.tile[num76 + 1, num77 - 1].active())
                                                        {
                                                            color27 = array[num78];
                                                        }
                                                        break;
                                                    case 3:
                                                        height3 = 8;
                                                        num80 = 4;
                                                        if (!Game1.tile[num76 - 1, num77].active())
                                                        {
                                                            color27 = array[num78];
                                                        }
                                                        break;
                                                    case 4:
                                                        width3 = 8;
                                                        height3 = 8;
                                                        num79 = 4;
                                                        num80 = 4;
                                                        break;
                                                    case 5:
                                                        num79 = 12;
                                                        num80 = 4;
                                                        height3 = 8;
                                                        if (!Game1.tile[num76 + 1, num77].active())
                                                        {
                                                            color27 = array[num78];
                                                        }
                                                        break;
                                                    case 6:
                                                        num80 = 12;
                                                        if (!Game1.tile[num76 - 1, num77 + 1].active())
                                                        {
                                                            color27 = array[num78];
                                                        }
                                                        break;
                                                    case 7:
                                                        width3 = 8;
                                                        height3 = 4;
                                                        num79 = 4;
                                                        num80 = 12;
                                                        if (!Game1.tile[num76, num77 + 1].active())
                                                        {
                                                            color27 = array[num78];
                                                        }
                                                        break;
                                                    case 8:
                                                        num79 = 12;
                                                        num80 = 12;
                                                        if (!Game1.tile[num76 + 1, num77 + 1].active())
                                                        {
                                                            color27 = array[num78];
                                                        }
                                                        break;
                                                }
                                                color26.R = (byte)((color25.R + color27.R) / 2);
                                                color26.G = (byte)((color25.G + color27.G) / 2);
                                                color26.B = (byte)((color25.B + color27.B) / 2);
                                                color26.R = (byte)((float)color26.R * num5);
                                                color26.G = (byte)((float)color26.G * num6);
                                                color26.B = (byte)((float)color26.B * num7);
                                                Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[5]], new Vector2((float)(this.bgStart + num3 * num70 + 16 * num72 + num79 + num69), (float)(this.bgStartY + Game1.backgroundHeight[2] * num71 + 16 * num73 + num80)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num72 + num79 + num69 + 16, 16 * num73 + Game1.backgroundHeight[2] * Game1.magmaBGFrame + num80, width3, height3)), color26, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                            }
                                        }
                                        else if ((int)color25.R > num2 || (double)color25.G > (double)num2 * 1.1 || (double)color25.B > (double)num2 * 1.2)
                                        {
                                            Lighting.GetColor4Slice(num76, num77, ref array);
                                            for (int num81 = 0; num81 < 4; num81++)
                                            {
                                                int num82 = 0;
                                                int num83 = 0;
                                                Microsoft.Xna.Framework.Color color28 = color25;
                                                Microsoft.Xna.Framework.Color color29 = array[num81];
                                                switch (num81)
                                                {
                                                    case 1:
                                                        num82 = 8;
                                                        break;
                                                    case 2:
                                                        num83 = 8;
                                                        break;
                                                    case 3:
                                                        num82 = 8;
                                                        num83 = 8;
                                                        break;
                                                }
                                                color28.R = (byte)((color25.R + color29.R) / 2);
                                                color28.G = (byte)((color25.G + color29.G) / 2);
                                                color28.B = (byte)((color25.B + color29.B) / 2);
                                                color28.R = (byte)((float)color28.R * num5);
                                                color28.G = (byte)((float)color28.G * num6);
                                                color28.B = (byte)((float)color28.B * num7);
                                                Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[5]], new Vector2((float)(this.bgStart + num3 * num70 + 16 * num72 + num82 + num69), (float)(this.bgStartY + Game1.backgroundHeight[2] * num71 + 16 * num73 + num83)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num72 + num82 + num69 + 16, 16 * num73 + Game1.backgroundHeight[2] * Game1.magmaBGFrame + num83, 8, 8)), color28, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                            }
                                        }
                                        else
                                        {
                                            color25.R = (byte)((float)color25.R * num5);
                                            color25.G = (byte)((float)color25.G * num6);
                                            color25.B = (byte)((float)color25.B * num7);
                                            Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[5]], new Vector2((float)(this.bgStart + num3 * num70 + 16 * num72 + num69), (float)(this.bgStartY + Game1.backgroundHeight[2] * num71 + 16 * num73)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num72 + num69 + 16, 16 * num73 + Game1.backgroundHeight[2] * Game1.magmaBGFrame, 16, 16)), color25, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                        }
                                    }
                                    else
                                    {
                                        color25.R = (byte)((float)color25.R * num5);
                                        color25.G = (byte)((float)color25.G * num6);
                                        color25.B = (byte)((float)color25.B * num7);
                                        Game1.spriteBatch.Draw(Game1.backgroundTexture[array2[5]], new Vector2((float)(this.bgStart + num3 * num70 + 16 * num72 + num69), (float)(this.bgStartY + Game1.backgroundHeight[2] * num71 + 16 * num73)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * num72 + num69 + 16, 16 * num73 + Game1.backgroundHeight[2] * Game1.magmaBGFrame, 16, 16)), color25, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            Lighting.brightness = Lighting.defBrightness;
            TimeLogger.DrawTime(3, stopwatch.Elapsed.TotalMilliseconds);
        }
        protected void RenderBackground()
        {
            if (Game1.drawToScreen)
            {
                return;
            }
            base.GraphicsDevice.SetRenderTarget(this.backWaterTarget);
            base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
            Game1.spriteBatch.Begin();
            Game1.tileBatch.Begin();
            try
            {
                this.drawWaters(true, -1, true);
            }
            catch
            {
            }
            Game1.tileBatch.End();
            Game1.spriteBatch.End();
            base.GraphicsDevice.SetRenderTarget(null);
            base.GraphicsDevice.SetRenderTarget(this.backgroundTarget);
            base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
            Game1.spriteBatch.Begin();
            Game1.tileBatch.Begin();
            if (Game1.ignoreErrors)
            {
                try
                {
                    this.DrawBackground();
                    goto IL_BE;
                }
                catch (Exception e)
                {
                    TimeLogger.DrawException(e);
                    goto IL_BE;
                }
            }
            this.DrawBackground();
        IL_BE:
            TimeLogger.DetailedDrawReset();
            Game1.spriteBatch.End();
            Game1.tileBatch.End();
            TimeLogger.DetailedDrawTime(33);
            base.GraphicsDevice.SetRenderTarget(null);
        }
        protected void DrawToMap()
        {
            if (!Game1.mapEnabled)
            {
                return;
            }
            int num = Game1.maxTilesX / Game1.textureMaxWidth;
            int num2 = Game1.maxTilesY / Game1.textureMaxHeight;
            for (int i = 0; i <= num; i++)
            {
                for (int j = 0; j <= num2; j++)
                {
                    if (!this.checkMap(i, j))
                    {
                        return;
                    }
                }
            }
            if (Game1.clearMap)
            {
                for (int k = 0; k <= num; k++)
                {
                    for (int l = 0; l <= num2; l++)
                    {
                        base.GraphicsDevice.SetRenderTarget(this.mapTarget[k, l]);
                        base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
                        base.GraphicsDevice.SetRenderTarget(null);
                    }
                }
                Game1.clearMap = false;
            }
            int num3 = -1;
            int num4 = -1;
            bool flag = false;
            int num5 = 0;
            int num6 = Game1.mapMinY;
            int num7 = Game1.mapMinY;
            int num8 = Game1.mapMaxY;
            int num9 = Game1.mapMaxY;
            int num10 = 1;
            if (Game1.mapMinY / Game1.textureMaxHeight != Game1.mapMaxY / Game1.textureMaxHeight)
            {
                num8 = Game1.textureMaxHeight;
                num7 = Game1.textureMaxHeight;
                num10 = 2;
            }
            for (int m = 0; m < num10; m++)
            {
                if (m == 0)
                {
                    Game1.mapMinY = num6;
                    Game1.mapMaxY = num8;
                }
                else if (m == 1)
                {
                    Game1.mapMinY = num7;
                    Game1.mapMaxY = num9;
                }
                for (int n = Game1.mapMinX; n < Game1.mapMaxX; n++)
                {
                    for (int num11 = Game1.mapMinY; num11 < Game1.mapMaxY; num11++)
                    {
                        MapTile mapTile = Game1.Map[n, num11];
                        if (mapTile.IsChanged && !this.mapTarget[n / Game1.textureMaxWidth, num11 / Game1.textureMaxHeight].IsContentLost)
                        {
                            num5++;
                            if (num5 < Game1.maxMapUpdates)
                            {
                                if (Game1.loadMap)
                                {
                                    Game1.loadMapLastX = n;
                                }
                                Game1.Map.ConsumeUpdate(n, num11);
                                int num12 = n / Game1.textureMaxWidth;
                                int num13 = num11 / Game1.textureMaxHeight;
                                if (num12 != num3 || num13 != num4)
                                {
                                    num3 = num12;
                                    num4 = num13;
                                    if (flag)
                                    {
                                        Game1.spriteBatch.End();
                                        base.GraphicsDevice.SetRenderTarget(null);
                                    }
                                    flag = true;
                                    base.GraphicsDevice.SetRenderTarget(this.mapTarget[num12, num13]);
                                    Game1.spriteBatch.Begin();
                                }
                                int num14 = n - num12 * Game1.textureMaxWidth;
                                int num15 = num11 - num13 * Game1.textureMaxHeight;
                                Microsoft.Xna.Framework.Color mapTileXnaColor = MapHelper.GetMapTileXnaColor(ref mapTile);
                                int num16 = 1;
                                int num17 = 1;
                                int num18 = num11 + 1;
                                while (num18 < Game1.mapMaxY)
                                {
                                    MapTile mapTile3;
                                    MapTile mapTile2 = mapTile3 = Game1.Map[n, num18];
                                    if (!mapTile3.IsChanged || !mapTile.Equals(ref mapTile2) || num18 / Game1.textureMaxHeight != num13)
                                    {
                                        break;
                                    }
                                    Game1.Map.ConsumeUpdate(n, num18);
                                    num16++;
                                    num18++;
                                    num11++;
                                }
                                if (num16 == 1)
                                {
                                    for (num18 = n + 1; num18 < Game1.mapMaxX; num18++)
                                    {
                                        MapTile mapTile4;
                                        MapTile mapTile2 = mapTile4 = Game1.Map[num18, num11];
                                        if (!mapTile4.IsChanged || !mapTile.Equals(ref mapTile2) || num18 / Game1.textureMaxWidth != num12)
                                        {
                                            break;
                                        }
                                        Game1.Map.ConsumeUpdate(num18, num11);
                                        num17++;
                                    }
                                }
                                Game1.spriteBatch.Draw(Game1.magicPixel, new Vector2((float)num14, (float)num15), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, num17, num16)), mapTileXnaColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            }
                        }
                    }
                }
            }
            for (int num19 = 0; num19 < MapHelper.numUpdateTile; num19++)
            {
                int num20 = (int)MapHelper.updateTileX[num19];
                int num21 = (int)MapHelper.updateTileY[num19];
                MapTile mapTile5 = Game1.Map[num20, num21];
                if (mapTile5.IsChanged)
                {
                    Game1.Map.ConsumeUpdate(num20, num21);
                    int num22 = num20 / Game1.textureMaxWidth;
                    int num23 = num21 / Game1.textureMaxHeight;
                    if (num22 != num3 || num23 != num4)
                    {
                        num3 = num22;
                        num4 = num23;
                        if (flag)
                        {
                            Game1.spriteBatch.End();
                            base.GraphicsDevice.SetRenderTarget(null);
                        }
                        flag = true;
                        base.GraphicsDevice.SetRenderTarget(this.mapTarget[num22, num23]);
                        Game1.spriteBatch.Begin();
                    }
                    int num24 = num20 - num22 * Game1.textureMaxWidth;
                    int num25 = num21 - num23 * Game1.textureMaxHeight;
                    Microsoft.Xna.Framework.Color mapTileXnaColor2 = MapHelper.GetMapTileXnaColor(ref mapTile5);
                    Game1.spriteBatch.Draw(Game1.magicPixel, new Vector2((float)num24, (float)num25), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), mapTileXnaColor2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                }
            }
            MapHelper.numUpdateTile = 0;
            if (flag)
            {
                Game1.spriteBatch.End();
                base.GraphicsDevice.SetRenderTarget(null);
            }
            Game1.mapReady = true;
            Game1.loadMapLastX = 0;
            Game1.loadMap = false;
            Game1.loadMapLock = false;
        }
        protected void DrawToMap_Section(int secX, int secY)
        {
            Stopwatch stopwatch = Stopwatch.StartNew();
            Microsoft.Xna.Framework.Color[] array = new Microsoft.Xna.Framework.Color[30000];
            int num = secX * 200;
            int num2 = num + 200;
            int num3 = secY * 150;
            int num4 = num3 + 150;
            int num5 = num / Game1.textureMaxWidth;
            int num6 = num3 / Game1.textureMaxHeight;
            int num7 = num % Game1.textureMaxWidth;
            int num8 = num3 % Game1.textureMaxHeight;
            if (!this.checkMap(num5, num6))
            {
                return;
            }
            int num9 = 0;
            Microsoft.Xna.Framework.Color arg_6F_0 = Microsoft.Xna.Framework.Color.Transparent;
            for (int i = num3; i < num4; i++)
            {
                for (int j = num; j < num2; j++)
                {
                    MapTile mapTile = Game1.Map[j, i];
                    array[num9] = MapHelper.GetMapTileXnaColor(ref mapTile);
                    num9++;
                }
            }
            base.GraphicsDevice.SetRenderTarget(this.mapTarget[num5, num6]);
            Game1.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
            double totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
            this.mapSectionTexture.SetData<Microsoft.Xna.Framework.Color>(array, 0, array.Length);
            double arg_116_0 = stopwatch.Elapsed.TotalMilliseconds;
            totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
            Game1.spriteBatch.Draw(this.mapSectionTexture, new Vector2((float)num7, (float)num8), Microsoft.Xna.Framework.Color.White);
            Game1.spriteBatch.End();
            base.GraphicsDevice.SetRenderTarget(null);
            double arg_16D_0 = stopwatch.Elapsed.TotalMilliseconds;
            stopwatch.Stop();
        }

        public static string ValueToCoins(int value)
        {
            int i = value;
            int num = 0;
            int num2 = 0;
            int num3 = 0;
            while (i >= 1000000)
            {
                i -= 1000000;
                num++;
            }
            while (i >= 10000)
            {
                i -= 10000;
                num2++;
            }
            while (i >= 100)
            {
                i -= 100;
                num3++;
            }
            int num4 = i;
            string text = "";
            if (num > 0)
            {
                text = text + num + " platinum ";
            }
            if (num2 > 0)
            {
                text = text + num2 + " gold ";
            }
            if (num3 > 0)
            {
                text = text + num3 + " silver ";
            }
            if (num4 > 0)
            {
                text = text + num4 + " copper ";
            }
            if (text.Length > 0)
            {
                text = text.Substring(0, text.Length - 1);
            }
            return text;
        }

        protected void DrawMap()
        {
            string text = "";
            if (!Game1.mapEnabled)
            {
                return;
            }
            if (!Game1.mapReady)
            {
                return;
            }
            float num = 0f;
            float num2 = 0f;
            float num3 = num;
            float num4 = num2;
            byte b = 255;
            int arg_40_0 = Game1.maxTilesX / Game1.textureMaxWidth;
            int num5 = Game1.maxTilesY / Game1.textureMaxHeight;
            float num6 = (float)Lighting.offScreenTiles;
            float num7 = (float)Lighting.offScreenTiles;
            float num8 = (float)(Game1.maxTilesX - Lighting.offScreenTiles - 1);
            float num9 = (float)(Game1.maxTilesY - Lighting.offScreenTiles - 42);
            float num10 = 0f;
            float num11 = 0f;
            num6 = 10f;
            num7 = 10f;
            num8 = (float)(Game1.maxTilesX - 10);
            num9 = (float)(Game1.maxTilesY - 10);
            for (int i = 0; i < this.mapTarget.GetLength(0); i++)
            {
                for (int j = 0; j < this.mapTarget.GetLength(1); j++)
                {
                    if (this.mapTarget[i, j] != null)
                    {
                        if (this.mapTarget[i, j].IsContentLost && !Game1.mapWasContentLost[i, j])
                        {
                            Game1.mapWasContentLost[i, j] = true;
                            Game1.refreshMap = true;
                            Game1.clearMap = true;
                        }
                        else if (!this.mapTarget[i, j].IsContentLost && Game1.mapWasContentLost[i, j])
                        {
                            Game1.mapWasContentLost[i, j] = false;
                        }
                    }
                }
            }
            num = 200f;
            num2 = 300f;
            float num12 = 0f;
            float num13 = 0f;
            float num14 = num8 - 1f;
            float num15 = num9 - 1f;
            float num16;
            if (Game1.mapFullscreen)
            {
                num16 = Game1.mapFullscreenScale;
            }
            else if (Game1.mapStyle == 1)
            {
                num16 = Game1.mapMinimapScale;
            }
            else
            {
                num16 = Game1.mapOverlayScale;
            }
            bool flag = false;
            if (!Game1.mapFullscreen && num16 > 1f)
            {
                Game1.spriteBatch.End();
                Game1.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
                flag = true;
            }
            if (Game1.mapFullscreen)
            {
                if (Game1.mouseLeft && base.IsActive && !CaptureManager.Instance.UsingMap)
                {
                    if (Game1.mouseLeftRelease)
                    {
                        Game1.grabMapX = (float)Game1.mouseX;
                        Game1.grabMapY = (float)Game1.mouseY;
                    }
                    else
                    {
                        float num17 = (float)Game1.mouseX - Game1.grabMapX;
                        float num18 = (float)Game1.mouseY - Game1.grabMapY;
                        Game1.grabMapX = (float)Game1.mouseX;
                        Game1.grabMapY = (float)Game1.mouseY;
                        num17 *= 0.06255f;
                        num18 *= 0.06255f;
                        Game1.mapFullscreenPos.X = Game1.mapFullscreenPos.X - num17 * (16f / Game1.mapFullscreenScale);
                        Game1.mapFullscreenPos.Y = Game1.mapFullscreenPos.Y - num18 * (16f / Game1.mapFullscreenScale);
                    }
                }
                Game1.player[Game1.myPlayer].mouseInterface = true;
                float num19 = (float)Game1.screenWidth / (float)Game1.maxTilesX * 0.8f;
                if (Game1.mapFullscreenScale < num19)
                {
                    Game1.mapFullscreenScale = num19;
                }
                if (Game1.mapFullscreenScale > 16f)
                {
                    Game1.mapFullscreenScale = 16f;
                }
                num16 = Game1.mapFullscreenScale;
                b = 255;
                if (Game1.mapFullscreenPos.X < num6)
                {
                    Game1.mapFullscreenPos.X = num6;
                }
                if (Game1.mapFullscreenPos.X > num8)
                {
                    Game1.mapFullscreenPos.X = num8;
                }
                if (Game1.mapFullscreenPos.Y < num7)
                {
                    Game1.mapFullscreenPos.Y = num7;
                }
                if (Game1.mapFullscreenPos.Y > num9)
                {
                    Game1.mapFullscreenPos.Y = num9;
                }
                float num20 = Game1.mapFullscreenPos.X;
                float num21 = Game1.mapFullscreenPos.Y;
                if (Game1.resetMapFull)
                {
                    Game1.resetMapFull = false;
                    num20 = (Game1.screenPosition.X + (float)(Game1.screenWidth / 2)) / 16f;
                    num21 = (Game1.screenPosition.Y + (float)(Game1.screenHeight / 2)) / 16f;
                    Game1.mapFullscreenPos.X = num20;
                    Game1.mapFullscreenPos.Y = num21;
                }
                num20 *= num16;
                num21 *= num16;
                num = -num20 + (float)(Game1.screenWidth / 2);
                num2 = -num21 + (float)(Game1.screenHeight / 2);
                num += num6 * num16;
                num2 += num7 * num16;
                float num22 = (float)(Game1.maxTilesX / 840);
                num22 *= Game1.mapFullscreenScale;
                float num23 = num;
                float num24 = num2;
                float num25 = (float)Game1.mapTexture.Width;
                float num26 = (float)Game1.mapTexture.Height;
                if (Game1.maxTilesX == 8400)
                {
                    num22 *= 0.999f;
                    num23 -= 40.6f * num22;
                    num24 = num2 - 5f * num22;
                    num25 -= 8.045f;
                    num25 *= num22;
                    num26 += 0.12f;
                    num26 *= num22;
                    if ((double)num22 < 1.2)
                    {
                        num26 += 1f;
                    }
                }
                else if (Game1.maxTilesX == 6400)
                {
                    num22 *= 1.09f;
                    num23 -= 38.8f * num22;
                    num24 = num2 - 3.85f * num22;
                    num25 -= 13.6f;
                    num25 *= num22;
                    num26 -= 6.92f;
                    num26 *= num22;
                    if ((double)num22 < 1.2)
                    {
                        num26 += 2f;
                    }
                }
                else if (Game1.maxTilesX == 6300)
                {
                    num22 *= 1.09f;
                    num23 -= 39.8f * num22;
                    num24 = num2 - 4.08f * num22;
                    num25 -= 26.69f;
                    num25 *= num22;
                    num26 -= 6.92f;
                    num26 *= num22;
                    if ((double)num22 < 1.2)
                    {
                        num26 += 2f;
                    }
                }
                else if (Game1.maxTilesX == 4200)
                {
                    num22 *= 0.998f;
                    num23 -= 37.3f * num22;
                    num24 -= 1.7f * num22;
                    num25 -= 16f;
                    num25 *= num22;
                    num26 -= 8.31f;
                    num26 *= num22;
                }
                Game1.spriteBatch.End();
                Game1.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
                flag = true;
                if (Game1.screenPosition.Y > (float)((Game1.maxTilesY - 232) * 16))
                {
                    Game1.spriteBatch.Draw(this.mapBG3Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.screenWidth, Game1.screenHeight), Microsoft.Xna.Framework.Color.White);
                }
                else if (Game1.player[Game1.myPlayer].ZoneDungeon)
                {
                    Game1.spriteBatch.Draw(this.mapBG5Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.screenWidth, Game1.screenHeight), Microsoft.Xna.Framework.Color.White);
                }
                else if (Game1.tile[(int)(Game1.player[Game1.myPlayer].Center.X / 16f), (int)(Game1.player[Game1.myPlayer].Center.Y / 16f)].wall == 87)
                {
                    Game1.spriteBatch.Draw(this.mapBG14Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.screenWidth, Game1.screenHeight), Microsoft.Xna.Framework.Color.White);
                }
                else if ((double)Game1.screenPosition.Y > Game1.worldSurface * 16.0)
                {
                    if (Game1.player[Game1.myPlayer].ZoneSnow)
                    {
                        Game1.spriteBatch.Draw(this.mapBG4Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.screenWidth, Game1.screenHeight), Microsoft.Xna.Framework.Color.White);
                    }
                    else if (Game1.player[Game1.myPlayer].ZoneJungle)
                    {
                        Game1.spriteBatch.Draw(this.mapBG13Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.screenWidth, Game1.screenHeight), Game1.bgColor);
                    }
                    else if (Game1.sandTiles > 1000)
                    {
                        Game1.spriteBatch.Draw(this.mapBG15Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.screenWidth, Game1.screenHeight), Game1.bgColor);
                    }
                    else
                    {
                        Game1.spriteBatch.Draw(this.mapBG2Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.screenWidth, Game1.screenHeight), Microsoft.Xna.Framework.Color.White);
                    }
                }
                else
                {
                    int num27 = (int)((Game1.screenPosition.X + (float)(Game1.screenWidth / 2)) / 16f);
                    if (Game1.player[Game1.myPlayer].ZoneCorrupt)
                    {
                        Game1.spriteBatch.Draw(this.mapBG6Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.screenWidth, Game1.screenHeight), Game1.bgColor);
                    }
                    else if (Game1.player[Game1.myPlayer].ZoneCrimson)
                    {
                        Game1.spriteBatch.Draw(this.mapBG7Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.screenWidth, Game1.screenHeight), Game1.bgColor);
                    }
                    else if (Game1.player[Game1.myPlayer].ZoneHoly)
                    {
                        Game1.spriteBatch.Draw(this.mapBG8Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.screenWidth, Game1.screenHeight), Game1.bgColor);
                    }
                    else if ((double)(Game1.screenPosition.Y / 16f) < Game1.worldSurface + 10.0 && (num27 < 380 || num27 > Game1.maxTilesX - 380))
                    {
                        Game1.spriteBatch.Draw(this.mapBG11Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.screenWidth, Game1.screenHeight), Game1.bgColor);
                    }
                    else if (Game1.player[Game1.myPlayer].ZoneSnow)
                    {
                        Game1.spriteBatch.Draw(this.mapBG12Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.screenWidth, Game1.screenHeight), Game1.bgColor);
                    }
                    else if (Game1.player[Game1.myPlayer].ZoneJungle)
                    {
                        Game1.spriteBatch.Draw(this.mapBG9Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.screenWidth, Game1.screenHeight), Game1.bgColor);
                    }
                    else if (Game1.sandTiles > 1000)
                    {
                        Game1.spriteBatch.Draw(this.mapBG10Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.screenWidth, Game1.screenHeight), Game1.bgColor);
                    }
                    else
                    {
                        Game1.spriteBatch.Draw(this.mapBG1Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.screenWidth, Game1.screenHeight), Game1.bgColor);
                    }
                }
                Microsoft.Xna.Framework.Rectangle destinationRectangle = new Microsoft.Xna.Framework.Rectangle((int)num23, (int)num24, (int)num25, (int)num26);
                Game1.spriteBatch.Draw(Game1.mapTexture, destinationRectangle, Microsoft.Xna.Framework.Color.White);
                if (num16 < 1f)
                {
                    Game1.spriteBatch.End();
                    Game1.spriteBatch.Begin();
                    flag = false;
                }
            }
            else if (Game1.mapStyle == 1)
            {
                Game1.miniMapWidth = 240;
                Game1.miniMapHeight = 240;
                Game1.miniMapX = Game1.screenWidth - Game1.miniMapWidth - 52;
                Game1.miniMapY = 90;
                float arg_AE9_0 = (float)Game1.miniMapHeight / (float)Game1.maxTilesY;
                if ((double)Game1.mapMinimapScale < 0.2)
                {
                    Game1.mapMinimapScale = 0.2f;
                }
                if (Game1.mapMinimapScale > 3f)
                {
                    Game1.mapMinimapScale = 3f;
                }
                if ((double)Game1.mapMinimapAlpha < 0.01)
                {
                    Game1.mapMinimapAlpha = 0.01f;
                }
                if (Game1.mapMinimapAlpha > 1f)
                {
                    Game1.mapMinimapAlpha = 1f;
                }
                num16 = Game1.mapMinimapScale;
                b = (byte)(255f * Game1.mapMinimapAlpha);
                num = (float)Game1.miniMapX;
                num2 = (float)Game1.miniMapY;
                num3 = num;
                num4 = num2;
                float num28 = (Game1.screenPosition.X + (float)(Game1.screenWidth / 2)) / 16f;
                float num29 = (Game1.screenPosition.Y + (float)(Game1.screenHeight / 2)) / 16f;
                num10 = -(num28 - (float)((int)((Game1.screenPosition.X + (float)(Game1.screenWidth / 2)) / 16f))) * num16;
                num11 = -(num29 - (float)((int)((Game1.screenPosition.Y + (float)(Game1.screenHeight / 2)) / 16f))) * num16;
                num14 = (float)Game1.miniMapWidth / num16;
                num15 = (float)Game1.miniMapHeight / num16;
                num12 = (float)((int)num28) - num14 / 2f;
                num13 = (float)((int)num29) - num15 / 2f;
                float num30 = (float)Game1.maxTilesY + num13;
                num30 *= num16;
                float x = num3 - 6f;
                float y = num4 - 6f;
                Game1.spriteBatch.Draw(Game1.miniMapFrame2Texture, new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.miniMapFrame2Texture.Width, Game1.miniMapFrame2Texture.Height)), new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, (int)b), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
            }
            else if (Game1.mapStyle == 2)
            {
                float num31 = (float)Game1.screenWidth / (float)Game1.maxTilesX;
                if (Game1.mapOverlayScale < num31)
                {
                    Game1.mapOverlayScale = num31;
                }
                if (Game1.mapOverlayScale > 16f)
                {
                    Game1.mapOverlayScale = 16f;
                }
                if ((double)Game1.mapOverlayAlpha < 0.01)
                {
                    Game1.mapOverlayAlpha = 0.01f;
                }
                if (Game1.mapOverlayAlpha > 1f)
                {
                    Game1.mapOverlayAlpha = 1f;
                }
                num16 = Game1.mapOverlayScale;
                b = (byte)(255f * Game1.mapOverlayAlpha);
                int arg_D3A_0 = Game1.maxTilesX;
                int arg_D40_0 = Game1.maxTilesY;
                float num32 = (Game1.screenPosition.X + (float)(Game1.screenWidth / 2)) / 16f;
                float num33 = (Game1.screenPosition.Y + (float)(Game1.screenHeight / 2)) / 16f;
                num32 *= num16;
                num33 *= num16;
                num = -num32 + (float)(Game1.screenWidth / 2);
                num2 = -num33 + (float)(Game1.screenHeight / 2);
                num += num6 * num16;
                num2 += num7 * num16;
            }
            if (Game1.mapStyle == 1 && !Game1.mapFullscreen)
            {
                if (num12 < num6)
                {
                    num -= (num12 - num6) * num16;
                }
                if (num13 < num7)
                {
                    num2 -= (num13 - num7) * num16;
                }
            }
            num14 = num12 + num14;
            num15 = num13 + num15;
            if (num12 > num6)
            {
                num6 = num12;
            }
            if (num13 > num7)
            {
                num7 = num13;
            }
            if (num14 < num8)
            {
                num8 = num14;
            }
            if (num15 < num9)
            {
                num9 = num15;
            }
            float num34 = (float)Game1.textureMaxWidth * num16;
            float num35 = (float)Game1.textureMaxHeight * num16;
            float num36 = num;
            float num37 = 0f;
            for (int k = 0; k <= 4; k++)
            {
                if ((float)((k + 1) * Game1.textureMaxWidth) > num6 && (float)(k * Game1.textureMaxWidth) < num6 + num8)
                {
                    for (int l = 0; l <= num5; l++)
                    {
                        if ((float)((l + 1) * Game1.textureMaxHeight) > num7 && (float)(l * Game1.textureMaxHeight) < num7 + num9)
                        {
                            float num38 = num + (float)((int)((float)k * num34));
                            float num39 = num2 + (float)((int)((float)l * num35));
                            float num40 = (float)(k * Game1.textureMaxWidth);
                            float num41 = (float)(l * Game1.textureMaxHeight);
                            float num42 = 0f;
                            float num43 = 0f;
                            if (num40 < num6)
                            {
                                num42 = num6 - num40;
                            }
                            else
                            {
                                num38 -= num6 * num16;
                            }
                            if (num41 < num7)
                            {
                                num43 = num7 - num41;
                                num39 = num2;
                            }
                            else
                            {
                                num39 -= num7 * num16;
                            }
                            num38 = num36;
                            float num44 = (float)Game1.textureMaxWidth;
                            float num45 = (float)Game1.textureMaxHeight;
                            float num46 = (float)((k + 1) * Game1.textureMaxWidth);
                            float num47 = (float)((l + 1) * Game1.textureMaxHeight);
                            if (num46 >= num8)
                            {
                                num44 -= num46 - num8;
                            }
                            if (num47 >= num9)
                            {
                                num45 -= num47 - num9;
                            }
                            num38 += num10;
                            num39 += num11;
                            if (num44 > num42)
                            {
                                Game1.spriteBatch.Draw(this.mapTarget[k, l], new Vector2(num38, num39), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num42, (int)num43, (int)num44 - (int)num42, (int)num45 - (int)num43)), new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, (int)b), 0f, default(Vector2), num16, SpriteEffects.None, 0f);
                            }
                            num37 = (float)((int)num44 - (int)num42) * num16;
                        }
                        if (l == num5)
                        {
                            num36 += num37;
                        }
                    }
                }
            }
            if (flag)
            {
                Game1.spriteBatch.End();
                Game1.spriteBatch.Begin();
            }
            if (!Game1.mapFullscreen)
            {
                if (Game1.mapStyle == 2)
                {
                    float num48 = (num16 * 0.2f * 2f + 1f) / 3f;
                    if (num48 > 1f)
                    {
                        num48 = 1f;
                    }
                    if (num16 < 10f)
                    {
                        for (int m = 0; m < 200; m++)
                        {
                            if (Game1.npc[m].active && Game1.npc[m].townNPC)
                            {
                                int num49 = NPC.TypeToNum(Game1.npc[m].type);
                                if (num49 > 0)
                                {
                                    SpriteEffects effects = SpriteEffects.None;
                                    if (Game1.npc[m].direction > 0)
                                    {
                                        effects = SpriteEffects.FlipHorizontally;
                                    }
                                    float num50 = (Game1.npc[m].position.X + (float)(Game1.npc[m].width / 2)) / 16f * num16;
                                    float num51 = (Game1.npc[m].position.Y + (float)(Game1.npc[m].height / 2)) / 16f * num16;
                                    num50 += num;
                                    num51 += num2;
                                    num50 -= 10f * num16;
                                    num51 -= 10f * num16;
                                    Game1.spriteBatch.Draw(Game1.npcHeadTexture[num49], new Vector2(num50, num51), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.npcHeadTexture[num49].Width, Game1.npcHeadTexture[num49].Height)), new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, (int)b), 0f, new Vector2((float)(Game1.npcHeadTexture[num49].Width / 2), (float)(Game1.npcHeadTexture[num49].Height / 2)), num48, effects, 0f);
                                }
                            }
                            if (Game1.npc[m].active && Game1.npc[m].GetBossHeadTextureIndex() != -1)
                            {
                                float bossHeadRotation = Game1.npc[m].GetBossHeadRotation();
                                SpriteEffects bossHeadSpriteEffects = Game1.npc[m].GetBossHeadSpriteEffects();
                                Vector2 vector = Game1.npc[m].Center + new Vector2(0f, Game1.npc[m].gfxOffY);
                                if (Game1.npc[m].type == 134)
                                {
                                    Vector2 vector2 = Game1.npc[m].Center;
                                    int num52 = 1;
                                    int num53 = (int)Game1.npc[m].ai[0];
                                    while (num52 < 15 && Game1.npc[num53].active && Game1.npc[num53].type >= 134 && Game1.npc[num53].type <= 136)
                                    {
                                        num52++;
                                        vector2 += Game1.npc[num53].Center;
                                        num53 = (int)Game1.npc[num53].ai[0];
                                    }
                                    vector2 /= (float)num52;
                                    vector = vector2;
                                }
                                int bossHeadTextureIndex = Game1.npc[m].GetBossHeadTextureIndex();
                                float num54 = vector.X / 16f * num16;
                                float num55 = vector.Y / 16f * num16;
                                num54 += num;
                                num55 += num2;
                                num54 -= 10f * num16;
                                num55 -= 10f * num16;
                                Game1.spriteBatch.Draw(Game1.npcHeadBossTexture[bossHeadTextureIndex], new Vector2(num54, num55), null, new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, (int)b), bossHeadRotation, Game1.npcHeadBossTexture[bossHeadTextureIndex].Size() / 2f, num48, bossHeadSpriteEffects, 0f);
                            }
                        }
                        Game1.spriteBatch.End();
                        Game1.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
                        for (int n = 0; n < 255; n++)
                        {
                            if (Game1.player[n].active && !Game1.player[n].dead && n != Game1.myPlayer && ((!Game1.player[Game1.myPlayer].hostile && !Game1.player[n].hostile) || (Game1.player[Game1.myPlayer].team == Game1.player[n].team && Game1.player[n].team != 0) || n == Game1.myPlayer))
                            {
                                float num56 = (Game1.player[n].position.X + (float)(Game1.player[n].width / 2)) / 16f * num16;
                                float num57 = Game1.player[n].position.Y / 16f * num16;
                                num56 += num;
                                num57 += num2;
                                num56 -= 6f;
                                num57 -= 2f;
                                num57 -= 2f - num16 / 5f * 2f;
                                num56 -= 10f * num16;
                                num57 -= 10f * num16;
                                this.DrawPlayerHead(Game1.player[n], num56, num57, (float)b / 255f, num48);
                            }
                        }
                        Game1.spriteBatch.End();
                        Game1.spriteBatch.Begin();
                    }
                }
                if (Game1.mapStyle == 1)
                {
                    float num58 = num3 - 6f;
                    float num59 = num4 - 6f;
                    float num60 = (num16 * 0.25f * 2f + 1f) / 3f;
                    if (num60 > 1f)
                    {
                        num60 = 1f;
                    }
                    for (int num61 = 0; num61 < 200; num61++)
                    {
                        if (Game1.npc[num61].active && Game1.npc[num61].townNPC)
                        {
                            int num62 = NPC.TypeToNum(Game1.npc[num61].type);
                            if (num62 > 0)
                            {
                                SpriteEffects effects2 = SpriteEffects.None;
                                if (Game1.npc[num61].direction > 0)
                                {
                                    effects2 = SpriteEffects.FlipHorizontally;
                                }
                                float num63 = ((Game1.npc[num61].position.X + (float)(Game1.npc[num61].width / 2)) / 16f - num12) * num16;
                                float num64 = ((Game1.npc[num61].position.Y + Game1.npc[num61].gfxOffY + (float)(Game1.npc[num61].height / 2)) / 16f - num13) * num16;
                                num63 += num3;
                                num64 += num4;
                                num64 -= 2f * num16 / 5f;
                                if (num63 > (float)(Game1.miniMapX + 12) && num63 < (float)(Game1.miniMapX + Game1.miniMapWidth - 16) && num64 > (float)(Game1.miniMapY + 10) && num64 < (float)(Game1.miniMapY + Game1.miniMapHeight - 14))
                                {
                                    Game1.spriteBatch.Draw(Game1.npcHeadTexture[num62], new Vector2(num63 + num10, num64 + num11), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.npcHeadTexture[num62].Width, Game1.npcHeadTexture[num62].Height)), new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, (int)b), 0f, new Vector2((float)(Game1.npcHeadTexture[num62].Width / 2), (float)(Game1.npcHeadTexture[num62].Height / 2)), num60, effects2, 0f);
                                    float num65 = num63 - (float)(Game1.npcHeadTexture[num62].Width / 2) * num60;
                                    float num66 = num64 - (float)(Game1.npcHeadTexture[num62].Height / 2) * num60;
                                    float num67 = num65 + (float)Game1.npcHeadTexture[num62].Width * num60;
                                    float num68 = num66 + (float)Game1.npcHeadTexture[num62].Height * num60;
                                    if ((float)Game1.mouseX >= num65 && (float)Game1.mouseX <= num67 && (float)Game1.mouseY >= num66 && (float)Game1.mouseY <= num68)
                                    {
                                        string text2;
                                        if (num62 == 11)
                                        {
                                            text2 = Game1.npc[num61].displayName;
                                        }
                                        else
                                        {
                                            text2 = Game1.npc[num61].displayName + " the " + Game1.npc[num61].name;
                                        }
                                        text = text2;
                                    }
                                }
                            }
                        }
                        if (Game1.npc[num61].active && Game1.npc[num61].GetBossHeadTextureIndex() != -1)
                        {
                            float bossHeadRotation2 = Game1.npc[num61].GetBossHeadRotation();
                            SpriteEffects bossHeadSpriteEffects2 = Game1.npc[num61].GetBossHeadSpriteEffects();
                            Vector2 vector3 = Game1.npc[num61].Center + new Vector2(0f, Game1.npc[num61].gfxOffY);
                            if (Game1.npc[num61].type == 134)
                            {
                                Vector2 vector4 = Game1.npc[num61].Center;
                                int num69 = 1;
                                int num70 = (int)Game1.npc[num61].ai[0];
                                while (num69 < 15 && Game1.npc[num70].active && Game1.npc[num70].type >= 134 && Game1.npc[num70].type <= 136)
                                {
                                    num69++;
                                    vector4 += Game1.npc[num70].Center;
                                    num70 = (int)Game1.npc[num70].ai[0];
                                }
                                vector4 /= (float)num69;
                                vector3 = vector4;
                            }
                            int bossHeadTextureIndex2 = Game1.npc[num61].GetBossHeadTextureIndex();
                            float num71 = (vector3.X / 16f - num12) * num16;
                            float num72 = (vector3.Y / 16f - num13) * num16;
                            num71 += num3;
                            num72 += num4;
                            num72 -= 2f * num16 / 5f;
                            if (num71 > (float)(Game1.miniMapX + 12) && num71 < (float)(Game1.miniMapX + Game1.miniMapWidth - 16) && num72 > (float)(Game1.miniMapY + 10) && num72 < (float)(Game1.miniMapY + Game1.miniMapHeight - 14))
                            {
                                Game1.spriteBatch.Draw(Game1.npcHeadBossTexture[bossHeadTextureIndex2], new Vector2(num71 + num10, num72 + num11), null, new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, (int)b), bossHeadRotation2, Game1.npcHeadBossTexture[bossHeadTextureIndex2].Size() / 2f, num60, bossHeadSpriteEffects2, 0f);
                                float num73 = num71 - (float)(Game1.npcHeadBossTexture[bossHeadTextureIndex2].Width / 2) * num60;
                                float num74 = num72 - (float)(Game1.npcHeadBossTexture[bossHeadTextureIndex2].Height / 2) * num60;
                                float num75 = num73 + (float)Game1.npcHeadBossTexture[bossHeadTextureIndex2].Width * num60;
                                float num76 = num74 + (float)Game1.npcHeadBossTexture[bossHeadTextureIndex2].Height * num60;
                                if ((float)Game1.mouseX >= num73 && (float)Game1.mouseX <= num75 && (float)Game1.mouseY >= num74 && (float)Game1.mouseY <= num76)
                                {
                                    text = Game1.npc[num61].displayName;
                                }
                            }
                        }
                    }
                    Game1.spriteBatch.End();
                    Game1.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
                    for (int num77 = 0; num77 < 255; num77++)
                    {
                        if (Game1.player[num77].active && ((!Game1.player[Game1.myPlayer].hostile && !Game1.player[num77].hostile) || (Game1.player[Game1.myPlayer].team == Game1.player[num77].team && Game1.player[num77].team != 0) || num77 == Game1.myPlayer))
                        {
                            float num78 = ((Game1.player[num77].position.X + (float)(Game1.player[num77].width / 2)) / 16f - num12) * num16;
                            float num79 = ((Game1.player[num77].position.Y + Game1.player[num77].gfxOffY + (float)(Game1.player[num77].height / 2)) / 16f - num13) * num16;
                            num78 += num3;
                            num79 += num4;
                            num78 -= 6f;
                            num79 -= 6f;
                            num79 -= 2f - num16 / 5f * 2f;
                            num78 += num10;
                            num79 += num11;
                            if (Game1.screenPosition.X != Game1.leftWorld + 640f + 16f && Game1.screenPosition.X + (float)Game1.screenWidth != Game1.rightWorld - 640f - 32f && Game1.screenPosition.Y != Game1.topWorld + 640f + 16f && Game1.screenPosition.Y + (float)Game1.screenHeight <= Game1.bottomWorld - 640f - 32f && num77 == Game1.myPlayer && Game1.zoomX == 0f && Game1.zoomY == 0f)
                            {
                                num78 = num3 + (float)(Game1.miniMapWidth / 2);
                                num79 = num4 + (float)(Game1.miniMapHeight / 2);
                                num79 -= 3f;
                                num78 -= 4f;
                            }
                            if (!Game1.player[num77].dead && num78 > (float)(Game1.miniMapX + 6) && num78 < (float)(Game1.miniMapX + Game1.miniMapWidth - 16) && num79 > (float)(Game1.miniMapY + 6) && num79 < (float)(Game1.miniMapY + Game1.miniMapHeight - 14))
                            {
                                this.DrawPlayerHead(Game1.player[num77], num78, num79, (float)b / 255f, num60);
                                if (num77 != Game1.myPlayer)
                                {
                                    float num80 = num78 + 4f - 14f * num60;
                                    float num81 = num79 + 2f - 14f * num60;
                                    float num82 = num80 + 28f * num60;
                                    float num83 = num81 + 28f * num60;
                                    if ((float)Game1.mouseX >= num80 && (float)Game1.mouseX <= num82 && (float)Game1.mouseY >= num81 && (float)Game1.mouseY <= num83)
                                    {
                                        text = Game1.player[num77].name;
                                    }
                                }
                            }
                            if (Game1.player[num77].showLastDeath)
                            {
                                num78 = (Game1.player[num77].lastDeathPostion.X / 16f - num12) * num16;
                                num79 = (Game1.player[num77].lastDeathPostion.Y / 16f - num13) * num16;
                                num78 += num3;
                                num79 += num4;
                                num79 -= 2f - num16 / 5f * 2f;
                                num78 += num10;
                                num79 += num11;
                                if (num78 > (float)(Game1.miniMapX + 8) && num78 < (float)(Game1.miniMapX + Game1.miniMapWidth - 18) && num79 > (float)(Game1.miniMapY + 8) && num79 < (float)(Game1.miniMapY + Game1.miniMapHeight - 16))
                                {
                                    Game1.spriteBatch.Draw(this.mapDeathTexture, new Vector2(num78, num79), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, this.mapDeathTexture.Width, this.mapDeathTexture.Height)), Microsoft.Xna.Framework.Color.White, 0f, new Vector2((float)this.mapDeathTexture.Width * 0.5f, (float)this.mapDeathTexture.Height * 0.5f), num60, SpriteEffects.None, 0f);
                                    float num84 = num78 + 4f - 14f * num60;
                                    float num85 = num79 + 2f - 14f * num60;
                                    num84 -= 4f;
                                    num85 -= 4f;
                                    float num86 = num84 + 28f * num60;
                                    float num87 = num85 + 28f * num60;
                                    if ((float)Game1.mouseX >= num84 && (float)Game1.mouseX <= num86 && (float)Game1.mouseY >= num85 && (float)Game1.mouseY <= num87)
                                    {
                                        TimeSpan timeSpan = DateTime.Now - Game1.player[num77].lastDeathTime;
                                        string text3 = Game1.player[num77].name + " died ";
                                        if (timeSpan.Days == 1)
                                        {
                                            text3 = text3 + timeSpan.Days + " day";
                                        }
                                        else if (timeSpan.Days > 0)
                                        {
                                            text3 = text3 + timeSpan.Days + " days";
                                        }
                                        else if (timeSpan.Hours == 1)
                                        {
                                            text3 = text3 + timeSpan.Hours + " hour";
                                        }
                                        else if (timeSpan.Hours > 0)
                                        {
                                            text3 = text3 + timeSpan.Hours + " hours";
                                        }
                                        else if (timeSpan.Minutes == 1)
                                        {
                                            text3 = text3 + timeSpan.Minutes + " minute";
                                        }
                                        else if (timeSpan.Minutes > 0)
                                        {
                                            text3 = text3 + timeSpan.Minutes + " minutes";
                                        }
                                        else if (timeSpan.Seconds == 1)
                                        {
                                            text3 = text3 + timeSpan.Seconds + " second";
                                        }
                                        else
                                        {
                                            text3 = text3 + timeSpan.Seconds + " seconds";
                                        }
                                        text = text3 + " ago";
                                    }
                                }
                            }
                        }
                    }
                    Game1.spriteBatch.End();
                    Game1.spriteBatch.Begin();
                    Game1.spriteBatch.Draw(Game1.miniMapFrameTexture, new Vector2(num58, num59), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.miniMapFrameTexture.Width, Game1.miniMapFrameTexture.Height)), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                    for (int num88 = 0; num88 < 3; num88++)
                    {
                        float num89 = num58 + 148f + (float)(num88 * 26);
                        float num90 = num59 + 234f;
                        if ((float)Game1.mouseX > num89 && (float)Game1.mouseX < num89 + 22f && (float)Game1.mouseY > num90 && (float)Game1.mouseY < num90 + 22f)
                        {
                            Game1.player[Game1.myPlayer].mouseInterface = true;
                            Game1.spriteBatch.Draw(Game1.miniMapButtonTexture[num88], new Vector2(num89, num90), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.miniMapButtonTexture[num88].Width, Game1.miniMapButtonTexture[num88].Height)), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            if (Game1.mouseLeft)
                            {
                                if (Game1.mouseLeftRelease)
                                {
                                    Game1.PlaySound(12, -1, -1, 1);
                                }
                                if (num88 == 0)
                                {
                                    Game1.mapMinimapScale = 1.25f;
                                }
                                else if (num88 == 1)
                                {
                                    Game1.mapMinimapScale *= 0.975f;
                                }
                                else if (num88 == 2)
                                {
                                    Game1.mapMinimapScale *= 1.025f;
                                }
                            }
                        }
                    }
                }
            }
            if (Game1.mapFullscreen)
            {
                int num91 = (int)((-num + (float)Game1.mouseX) / num16 + num6);
                int num92 = (int)((-num2 + (float)Game1.mouseY) / num16 + num7);
                bool flag2 = false;
                if ((float)num91 < num6)
                {
                    flag2 = true;
                }
                if ((float)num91 >= num8)
                {
                    flag2 = true;
                }
                if ((float)num92 < num7)
                {
                    flag2 = true;
                }
                if ((float)num92 >= num9)
                {
                    flag2 = true;
                }
                if (!flag2 && Game1.Map[num91, num92].Light > 40)
                {
                    int type = (int)Game1.Map[num91, num92].Type;
                    int num93 = (int)MapHelper.tileLookup[21];
                    int num94 = MapHelper.tileOptionCounts[21];
                    int num95 = (int)MapHelper.tileLookup[88];
                    int num96 = MapHelper.tileOptionCounts[88];
                    if (type >= num93 && type < num93 + num94)
                    {
                        Tile tile = Game1.tile[num91, num92];
                        if (tile == null)
                        {
                            tile = new Tile();
                            Game1.tile[num91, num92] = tile;
                        }
                        int num97 = num91;
                        int num98 = num92;
                        if (tile.frameX % 36 != 0)
                        {
                            num97--;
                        }
                        if (tile.frameY % 36 != 0)
                        {
                            num98--;
                        }
                        int num99 = Chest.FindChest(num97, num98);
                        if (num99 < 0)
                        {
                            text = Lang.chestType[0];
                        }
                        else if (Game1.chest[num99].name != "")
                        {
                            text = Lang.chestType[(int)(tile.frameX / 36)] + ": " + Game1.chest[num99].name;
                        }
                        else
                        {
                            text = Lang.chestType[(int)(tile.frameX / 36)];
                        }
                    }
                    else if (type >= num95 && type < num95 + num96)
                    {
                        Tile tile2 = Game1.tile[num91, num92];
                        if (tile2 == null)
                        {
                            tile2 = new Tile();
                            Game1.tile[num91, num92] = tile2;
                        }
                        int num100 = num91;
                        int num101 = num92;
                        num100 -= (int)(tile2.frameX % 54 / 18);
                        if (tile2.frameY % 36 != 0)
                        {
                            num101--;
                        }
                        int num102 = Chest.FindChest(num100, num101);
                        if (num102 < 0)
                        {
                            text = Lang.dresserType[0];
                        }
                        else if (Game1.chest[num102].name != "")
                        {
                            text = Lang.dresserType[(int)(tile2.frameX / 54)] + ": " + Game1.chest[num102].name;
                        }
                        else
                        {
                            text = Lang.dresserType[(int)(tile2.frameX / 54)];
                        }
                    }
                    else
                    {
                        text = Lang.mapLegend[type];
                    }
                }
                float num103 = (num16 * 0.25f * 2f + 1f) / 3f;
                if (num103 > 1f)
                {
                }
                num103 = 1f;
                for (int num104 = 0; num104 < 200; num104++)
                {
                    if (Game1.npc[num104].active && Game1.npc[num104].townNPC)
                    {
                        int num105 = NPC.TypeToNum(Game1.npc[num104].type);
                        if (num105 > 0)
                        {
                            SpriteEffects effects3 = SpriteEffects.None;
                            if (Game1.npc[num104].direction > 0)
                            {
                                effects3 = SpriteEffects.FlipHorizontally;
                            }
                            float num106 = (Game1.npc[num104].position.X + (float)(Game1.npc[num104].width / 2)) / 16f * num16;
                            float num107 = (Game1.npc[num104].position.Y + Game1.npc[num104].gfxOffY + (float)(Game1.npc[num104].height / 2)) / 16f * num16;
                            num106 += num;
                            num107 += num2;
                            num106 -= 10f * num16;
                            num107 -= 10f * num16;
                            Game1.spriteBatch.Draw(Game1.npcHeadTexture[num105], new Vector2(num106, num107), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.npcHeadTexture[num105].Width, Game1.npcHeadTexture[num105].Height)), new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, (int)b), 0f, new Vector2((float)(Game1.npcHeadTexture[num105].Width / 2), (float)(Game1.npcHeadTexture[num105].Height / 2)), num103, effects3, 0f);
                            float num108 = num106 - (float)(Game1.npcHeadTexture[num105].Width / 2) * num103;
                            float num109 = num107 - (float)(Game1.npcHeadTexture[num105].Height / 2) * num103;
                            float num110 = num108 + (float)Game1.npcHeadTexture[num105].Width * num103;
                            float num111 = num109 + (float)Game1.npcHeadTexture[num105].Height * num103;
                            if ((float)Game1.mouseX >= num108 && (float)Game1.mouseX <= num110 && (float)Game1.mouseY >= num109 && (float)Game1.mouseY <= num111)
                            {
                                string text4;
                                if (num105 == 11)
                                {
                                    text4 = Game1.npc[num104].displayName;
                                }
                                else
                                {
                                    text4 = Game1.npc[num104].displayName + " the " + Game1.npc[num104].name;
                                }
                                text = text4;
                            }
                        }
                    }
                    if (Game1.npc[num104].active && Game1.npc[num104].GetBossHeadTextureIndex() != -1)
                    {
                        float bossHeadRotation3 = Game1.npc[num104].GetBossHeadRotation();
                        SpriteEffects bossHeadSpriteEffects3 = Game1.npc[num104].GetBossHeadSpriteEffects();
                        Vector2 vector5 = Game1.npc[num104].Center + new Vector2(0f, Game1.npc[num104].gfxOffY);
                        if (Game1.npc[num104].type == 134)
                        {
                            Vector2 vector6 = Game1.npc[num104].Center;
                            int num112 = 1;
                            int num113 = (int)Game1.npc[num104].ai[0];
                            while (num112 < 15 && Game1.npc[num113].active && Game1.npc[num113].type >= 134 && Game1.npc[num113].type <= 136)
                            {
                                num112++;
                                vector6 += Game1.npc[num113].Center;
                                num113 = (int)Game1.npc[num113].ai[0];
                            }
                            vector6 /= (float)num112;
                            vector5 = vector6;
                        }
                        int bossHeadTextureIndex3 = Game1.npc[num104].GetBossHeadTextureIndex();
                        float num114 = vector5.X / 16f * num16;
                        float num115 = vector5.Y / 16f * num16;
                        num114 += num;
                        num115 += num2;
                        num114 -= 10f * num16;
                        num115 -= 10f * num16;
                        Game1.spriteBatch.Draw(Game1.npcHeadBossTexture[bossHeadTextureIndex3], new Vector2(num114, num115), null, new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, (int)b), bossHeadRotation3, Game1.npcHeadBossTexture[bossHeadTextureIndex3].Size() / 2f, num103, bossHeadSpriteEffects3, 0f);
                        float num116 = num114 - (float)(Game1.npcHeadBossTexture[bossHeadTextureIndex3].Width / 2) * num103;
                        float num117 = num115 - (float)(Game1.npcHeadBossTexture[bossHeadTextureIndex3].Height / 2) * num103;
                        float num118 = num116 + (float)Game1.npcHeadBossTexture[bossHeadTextureIndex3].Width * num103;
                        float num119 = num117 + (float)Game1.npcHeadBossTexture[bossHeadTextureIndex3].Height * num103;
                        if ((float)Game1.mouseX >= num116 && (float)Game1.mouseX <= num118 && (float)Game1.mouseY >= num117 && (float)Game1.mouseY <= num119)
                        {
                            text = Game1.npc[num104].displayName;
                        }
                    }
                }
                bool flag3 = false;
                Game1.spriteBatch.End();
                Game1.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
                for (int num120 = 0; num120 < 255; num120++)
                {
                    if (Game1.player[num120].active && ((!Game1.player[Game1.myPlayer].hostile && !Game1.player[num120].hostile) || (Game1.player[Game1.myPlayer].team == Game1.player[num120].team && Game1.player[num120].team != 0) || num120 == Game1.myPlayer) && Game1.player[num120].showLastDeath)
                    {
                        float num121 = (Game1.player[num120].lastDeathPostion.X / 16f - num12) * num16;
                        float num122 = (Game1.player[num120].lastDeathPostion.Y / 16f - num13) * num16;
                        num121 += num;
                        num122 += num2;
                        num122 -= 2f - num16 / 5f * 2f;
                        num121 -= 10f * num16;
                        num122 -= 10f * num16;
                        Game1.spriteBatch.Draw(this.mapDeathTexture, new Vector2(num121, num122), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, this.mapDeathTexture.Width, this.mapDeathTexture.Height)), Microsoft.Xna.Framework.Color.White, 0f, new Vector2((float)this.mapDeathTexture.Width * 0.5f, (float)this.mapDeathTexture.Height * 0.5f), num103, SpriteEffects.None, 0f);
                        float num123 = num121 + 4f - 14f * num103;
                        float num124 = num122 + 2f - 14f * num103;
                        float num125 = num123 + 28f * num103;
                        float num126 = num124 + 28f * num103;
                        if ((float)Game1.mouseX >= num123 && (float)Game1.mouseX <= num125 && (float)Game1.mouseY >= num124 && (float)Game1.mouseY <= num126)
                        {
                            TimeSpan timeSpan2 = DateTime.Now - Game1.player[num120].lastDeathTime;
                            string text5 = Game1.player[num120].name + " died ";
                            if (timeSpan2.Days == 1)
                            {
                                text5 = text5 + timeSpan2.Days + " day";
                            }
                            else if (timeSpan2.Days > 0)
                            {
                                text5 = text5 + timeSpan2.Days + " days";
                            }
                            else if (timeSpan2.Hours == 1)
                            {
                                text5 = text5 + timeSpan2.Hours + " hour";
                            }
                            else if (timeSpan2.Hours > 0)
                            {
                                text5 = text5 + timeSpan2.Hours + " hours";
                            }
                            else if (timeSpan2.Minutes == 1)
                            {
                                text5 = text5 + timeSpan2.Minutes + " minute";
                            }
                            else if (timeSpan2.Minutes > 0)
                            {
                                text5 = text5 + timeSpan2.Minutes + " minutes";
                            }
                            else if (timeSpan2.Seconds == 1)
                            {
                                text5 = text5 + timeSpan2.Seconds + " second";
                            }
                            else
                            {
                                text5 = text5 + timeSpan2.Seconds + " seconds";
                            }
                            text = text5 + " ago";
                        }
                    }
                }
                for (int num127 = 0; num127 < 255; num127++)
                {
                    if (Game1.player[num127].active && ((!Game1.player[Game1.myPlayer].hostile && !Game1.player[num127].hostile) || (Game1.player[Game1.myPlayer].team == Game1.player[num127].team && Game1.player[num127].team != 0) || num127 == Game1.myPlayer))
                    {
                        float num128 = ((Game1.player[num127].position.X + (float)(Game1.player[num127].width / 2)) / 16f - num12) * num16;
                        float num129 = ((Game1.player[num127].position.Y + Game1.player[num127].gfxOffY + (float)(Game1.player[num127].height / 2)) / 16f - num13) * num16;
                        num128 += num;
                        num129 += num2;
                        num128 -= 6f;
                        num129 -= 2f;
                        num129 -= 2f - num16 / 5f * 2f;
                        num128 -= 10f * num16;
                        num129 -= 10f * num16;
                        float num130 = num128 + 4f - 14f * num103;
                        float num131 = num129 + 2f - 14f * num103;
                        float num132 = num130 + 28f * num103;
                        float num133 = num131 + 28f * num103;
                        if (!Game1.player[num127].dead)
                        {
                            this.DrawPlayerHead(Game1.player[num127], num128, num129, (float)b / 255f, num103);
                            if ((float)Game1.mouseX >= num130 && (float)Game1.mouseX <= num132 && (float)Game1.mouseY >= num131 && (float)Game1.mouseY <= num133)
                            {
                                text = Game1.player[num127].name;
                                if (num127 != Game1.myPlayer && Game1.player[Game1.myPlayer].team > 0 && Game1.player[Game1.myPlayer].team == Game1.player[num127].team && Game1.netMode == 1 && Game1.player[Game1.myPlayer].HasUnityPotion())
                                {
                                    flag3 = true;
                                    if (!this.unityMouseOver)
                                    {
                                        Game1.PlaySound(12, -1, -1, 1);
                                    }
                                    this.unityMouseOver = true;
                                    this.DrawPlayerHead(Game1.player[num127], num128, num129, 2f, num103 + 0.5f);
                                    text = "Teleport to " + Game1.player[num127].name;
                                    if (Game1.mouseLeft && Game1.mouseLeftRelease)
                                    {
                                        Game1.mouseLeftRelease = false;
                                        Game1.mapFullscreen = false;
                                        Game1.player[Game1.myPlayer].UnityTeleport(Game1.player[num127].position);
                                        Game1.player[Game1.myPlayer].TakeUnityPotion();
                                    }
                                }
                            }
                        }
                    }
                }
                if (!flag3 && this.unityMouseOver)
                {
                    this.unityMouseOver = false;
                }
                Game1.spriteBatch.End();
                Game1.spriteBatch.Begin();
                int num134 = 10;
                int num135 = Game1.screenHeight - 40;
                int num136 = 0;
                int num137 = 130;
                if (Game1.mouseX >= num134 && Game1.mouseX <= num134 + 32 && Game1.mouseY >= num135 && Game1.mouseY <= num135 + 30)
                {
                    num137 = 255;
                    num136 += 4;
                    Game1.player[Game1.myPlayer].mouseInterface = true;
                    if (Game1.mouseLeft && Game1.mouseLeftRelease)
                    {
                        Game1.PlaySound(10, -1, -1, 1);
                        Game1.mapFullscreen = false;
                    }
                }
                Game1.spriteBatch.Draw(Game1.mapIconTexture[num136], new Vector2((float)num134, (float)num135), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.mapIconTexture[num136].Width, Game1.mapIconTexture[num136].Height)), new Microsoft.Xna.Framework.Color(num137, num137, num137, num137), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                Game1.DrawThickCursor(false);
                Game1.spriteBatch.Draw(Game1.cursorTextures[0], new Vector2((float)(Game1.mouseX + 1), (float)(Game1.mouseY + 1)), null, new Microsoft.Xna.Framework.Color((int)((float)Game1.cursorColor.R * 0.2f), (int)((float)Game1.cursorColor.G * 0.2f), (int)((float)Game1.cursorColor.B * 0.2f), (int)((float)Game1.cursorColor.A * 0.5f)), 0f, default(Vector2), Game1.cursorScale * 1.1f, SpriteEffects.None, 0f);
                Game1.spriteBatch.Draw(Game1.cursorTextures[0], new Vector2((float)Game1.mouseX, (float)Game1.mouseY), null, Game1.cursorColor, 0f, default(Vector2), Game1.cursorScale, SpriteEffects.None, 0f);
            }
            if (text != "")
            {
                this.MouseText(text, 0, 0);
            }
            TimeLogger.DetailedDrawTime(9);
        }
        public void DrawItems()
        {
            for (int i = 0; i < 400; i++)
            {
                if (Game1.item[i].active && Game1.item[i].itemId > 0)
                {
                    this.DrawItem(Game1.item[i], i);
                }
            }
        }
        public void DrawSimpleSurfaceBackground()
        {
            float num = (float)Game1.worldSurface * 16f;
            float num2 = Math.Min(Game1.screenPosition.Y + (float)Game1.screenHeight, num) - Game1.screenPosition.Y;
            float y = Game1.screenPosition.Y;
            float num3 = Game1.screenPosition.Y + num2;
            Vector4 value = Game1.bgColor.ToVector4();
            Vector4 value2 = new Microsoft.Xna.Framework.Color(53, 43, 243).ToVector4() * value;
            Vector4 value3 = new Microsoft.Xna.Framework.Color(132, 170, 248).ToVector4() * value;
            Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(Vector4.Lerp(value2, value3, y / num));
            Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color(Vector4.Lerp(value2, value3, num3 / num));
            VertexColors colors;
            colors.TopLeftColor = color;
            colors.TopRightColor = color;
            colors.BottomLeftColor = color2;
            colors.BottomRightColor = color2;
            Game1.tileBatch.Draw(Game1.blackTileTexture, new Vector4(0f, 0f, (float)Game1.screenWidth, num2), colors);
            float num4 = (float)Game1.screenHeight - num2;
            if (num4 > 0f)
            {
                colors.TopLeftColor = Microsoft.Xna.Framework.Color.Black;
                colors.TopRightColor = Microsoft.Xna.Framework.Color.Black;
                colors.BottomLeftColor = Microsoft.Xna.Framework.Color.Black;
                colors.BottomRightColor = Microsoft.Xna.Framework.Color.Black;
                Game1.tileBatch.Draw(Game1.blackTileTexture, new Vector4(0f, num2, (float)Game1.screenWidth, num4), colors);
            }
        }

        public void DrawCapture(Microsoft.Xna.Framework.Rectangle area, CaptureSettings settings)
        {
            float[] array = Game1.bgAlpha;
            Game1.bgAlpha = new float[array.Length];
            for (int i = 0; i < Game1.bgAlpha.Length; i++)
            {
                Game1.bgAlpha[i] = 0f;
            }
            Game1.bgAlpha[settings.Biome.BackgroundIndex] = 1f;
            float[] array2 = Game1.bgAlpha2;
            Game1.bgAlpha2 = new float[array2.Length];
            for (int j = 0; j < Game1.bgAlpha2.Length; j++)
            {
                Game1.bgAlpha2[j] = 0f;
            }
            Game1.bgAlpha2[settings.Biome.BackgroundIndex2] = 1f;
            if (settings.Biome.BackgroundIndex2 == 6)
            {
                Game1.bgAlpha2[0] = 1f;
            }
            int num = Game1.holyTiles;
            Game1.holyTiles = ((settings.Biome.BackgroundIndex == 6) ? 400 : 0);
            int num2 = Game1.offScreenRange;
            Game1.offScreenRange = 0;
            this.Transform = Matrix.CreateScale(1f, 1f, 1f) * Matrix.CreateRotationZ(0f) * Matrix.CreateTranslation(new Vector3(0f, 0f, 0f));
            this.Rasterizer = RasterizerState.CullCounterClockwise;
            bool captureEntities = settings.CaptureEntities;
            bool captureBackground = settings.CaptureBackground;
            CaptureBiome biome = settings.Biome;
            Vector2 vector = Game1.screenPosition;
            int num3 = Game1.screenWidth;
            int num4 = Game1.screenHeight;
            float num5 = Game1.cloudAlpha;
            Game1.screenWidth = area.Width << 4;
            Game1.screenHeight = area.Height << 4;
            Game1.screenPosition = new Vector2((float)(area.X * 16), (float)(area.Y * 16));
            Game1.cloudAlpha = 0f;
            int x = area.X;
            int y = area.Y;
            int lastX = area.X + Game1.screenWidth / 16;
            int lastY = area.Y + Game1.screenHeight / 16;
            Game1.bgColor = Microsoft.Xna.Framework.Color.White;
            double arg_1F2_0 = Game1.time / 54000.0;
            int arg_1F8_0 = Game1.screenWidth;
            int arg_203_0 = Game1.sunTexture.Width;
            int arg_20E_0 = Game1.sunTexture.Width;
            Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
            double arg_225_0 = Game1.time / 54000.0;
            double arg_235_0 = Game1.time / 32400.0;
            int arg_23B_0 = Game1.screenWidth;
            int arg_24C_0 = Game1.moonTexture[Game1.moonType].Width;
            int arg_25D_0 = Game1.moonTexture[Game1.moonType].Width;
            Microsoft.Xna.Framework.Color white2 = Microsoft.Xna.Framework.Color.White;
            double arg_274_0 = Game1.time / 32400.0;
            if (Game1.dayTime)
            {
                if (Game1.time < 27000.0)
                {
                    double num6 = Math.Pow(1.0 - Game1.time / 54000.0 * 2.0, 2.0);
                }
                else
                {
                    double num6 = Math.Pow((Game1.time / 54000.0 - 0.5) * 2.0, 2.0);
                }
            }
            else if (Game1.time < 16200.0)
            {
                double num7 = Math.Pow(1.0 - Game1.time / 32400.0 * 2.0, 2.0);
            }
            else
            {
                double num7 = Math.Pow((Game1.time / 32400.0 - 0.5) * 2.0, 2.0);
            }
            if (Game1.dayTime)
            {
                if (Game1.time < 13500.0)
                {
                    float num8 = (float)(Game1.time / 13500.0);
                    white.R = (byte)(num8 * 200f + 55f);
                    white.G = (byte)(num8 * 180f + 75f);
                    white.B = (byte)(num8 * 250f + 5f);
                    Game1.bgColor.R = (byte)(num8 * 230f + 25f);
                    Game1.bgColor.G = (byte)(num8 * 220f + 35f);
                    Game1.bgColor.B = (byte)(num8 * 220f + 35f);
                }
                if (Game1.time > 45900.0)
                {
                    float num8 = (float)(1.0 - (Game1.time / 54000.0 - 0.85) * 6.666666666666667);
                    white.R = (byte)(num8 * 120f + 55f);
                    white.G = (byte)(num8 * 100f + 25f);
                    white.B = (byte)(num8 * 120f + 55f);
                    Game1.bgColor.R = (byte)(num8 * 200f + 35f);
                    Game1.bgColor.G = (byte)(num8 * 85f + 35f);
                    Game1.bgColor.B = (byte)(num8 * 135f + 35f);
                }
                else if (Game1.time > 37800.0)
                {
                    float num8 = (float)(1.0 - (Game1.time / 54000.0 - 0.7) * 6.666666666666667);
                    white.R = (byte)(num8 * 80f + 175f);
                    white.G = (byte)(num8 * 130f + 125f);
                    white.B = (byte)(num8 * 100f + 155f);
                    Game1.bgColor.R = (byte)(num8 * 20f + 235f);
                    Game1.bgColor.G = (byte)(num8 * 135f + 120f);
                    Game1.bgColor.B = (byte)(num8 * 85f + 170f);
                }
            }
            if (!Game1.dayTime)
            {
                if (Game1.bloodMoon)
                {
                    if (Game1.time < 16200.0)
                    {
                        float num8 = (float)(1.0 - Game1.time / 16200.0);
                        white2.R = (byte)(num8 * 10f + 205f);
                        white2.G = (byte)(num8 * 170f + 55f);
                        white2.B = (byte)(num8 * 200f + 55f);
                        Game1.bgColor.R = (byte)(40f - num8 * 40f + 35f);
                        Game1.bgColor.G = (byte)(num8 * 20f + 15f);
                        Game1.bgColor.B = (byte)(num8 * 20f + 15f);
                    }
                    else if (Game1.time >= 16200.0)
                    {
                        float num8 = (float)((Game1.time / 32400.0 - 0.5) * 2.0);
                        white2.R = (byte)(num8 * 50f + 205f);
                        white2.G = (byte)(num8 * 100f + 155f);
                        white2.B = (byte)(num8 * 100f + 155f);
                        white2.R = (byte)(num8 * 10f + 205f);
                        white2.G = (byte)(num8 * 170f + 55f);
                        white2.B = (byte)(num8 * 200f + 55f);
                        Game1.bgColor.R = (byte)(40f - num8 * 40f + 35f);
                        Game1.bgColor.G = (byte)(num8 * 20f + 15f);
                        Game1.bgColor.B = (byte)(num8 * 20f + 15f);
                    }
                }
                else if (Game1.time < 16200.0)
                {
                    float num8 = (float)(1.0 - Game1.time / 16200.0);
                    white2.R = (byte)(num8 * 10f + 205f);
                    white2.G = (byte)(num8 * 70f + 155f);
                    white2.B = (byte)(num8 * 100f + 155f);
                    Game1.bgColor.R = (byte)(num8 * 30f + 5f);
                    Game1.bgColor.G = (byte)(num8 * 30f + 5f);
                    Game1.bgColor.B = (byte)(num8 * 30f + 5f);
                }
                else if (Game1.time >= 16200.0)
                {
                    float num8 = (float)((Game1.time / 32400.0 - 0.5) * 2.0);
                    white2.R = (byte)(num8 * 50f + 205f);
                    white2.G = (byte)(num8 * 100f + 155f);
                    white2.B = (byte)(num8 * 100f + 155f);
                    Game1.bgColor.R = (byte)(num8 * 20f + 5f);
                    Game1.bgColor.G = (byte)(num8 * 30f + 5f);
                    Game1.bgColor.B = (byte)(num8 * 30f + 5f);
                }
            }
            if (Game1.gameMenu)
            {
                Game1.bgDelay = 1000;
            }
            if (biome.TileColor == CaptureBiome.TileColorStyle.Corrupt)
            {
                float num9 = 1f;
                int num10 = (int)Game1.bgColor.R;
                int num11 = (int)Game1.bgColor.G;
                int num12 = (int)Game1.bgColor.B;
                num10 -= (int)(100f * num9 * ((float)Game1.bgColor.R / 255f));
                num11 -= (int)(140f * num9 * ((float)Game1.bgColor.G / 255f));
                num12 -= (int)(80f * num9 * ((float)Game1.bgColor.B / 255f));
                if (num10 < 15)
                {
                    num10 = 15;
                }
                if (num11 < 15)
                {
                    num11 = 15;
                }
                if (num12 < 15)
                {
                    num12 = 15;
                }
                Game1.bgColor.R = (byte)num10;
                Game1.bgColor.G = (byte)num11;
                Game1.bgColor.B = (byte)num12;
                num10 = (int)white.R;
                num11 = (int)white.G;
                num12 = (int)white.B;
                num10 -= (int)(100f * num9 * ((float)white.R / 255f));
                num11 -= (int)(100f * num9 * ((float)white.G / 255f));
                num12 -= (int)(0f * num9 * ((float)white.B / 255f));
                if (num10 < 15)
                {
                    num10 = 15;
                }
                if (num11 < 15)
                {
                    num11 = 15;
                }
                if (num12 < 15)
                {
                    num12 = 15;
                }
                white.R = (byte)num10;
                white.G = (byte)num11;
                white.B = (byte)num12;
                num10 = (int)white2.R;
                num11 = (int)white2.G;
                num12 = (int)white2.B;
                num10 -= (int)(140f * num9 * ((float)white2.R / 255f));
                num11 -= (int)(190f * num9 * ((float)white2.G / 255f));
                num12 -= (int)(170f * num9 * ((float)white2.B / 255f));
                if (num10 < 15)
                {
                    num10 = 15;
                }
                if (num11 < 15)
                {
                    num11 = 15;
                }
                if (num12 < 15)
                {
                    num12 = 15;
                }
                white2.R = (byte)num10;
                white2.G = (byte)num11;
                white2.B = (byte)num12;
            }
            if (biome.TileColor == CaptureBiome.TileColorStyle.Crimson)
            {
                float num13 = 1f;
                int num14 = (int)Game1.bgColor.R;
                int num15 = (int)Game1.bgColor.G;
                int num16 = (int)Game1.bgColor.B;
                num14 -= (int)(70f * num13 * ((float)Game1.bgColor.G / 255f));
                num15 -= (int)(110f * num13 * ((float)Game1.bgColor.G / 255f));
                num16 -= (int)(150f * num13 * ((float)Game1.bgColor.B / 255f));
                if (num14 < 15)
                {
                    num14 = 15;
                }
                if (num15 < 15)
                {
                    num15 = 15;
                }
                if (num16 < 15)
                {
                    num16 = 15;
                }
                Game1.bgColor.R = (byte)num14;
                Game1.bgColor.G = (byte)num15;
                Game1.bgColor.B = (byte)num16;
                num14 = (int)white.R;
                num15 = (int)white.G;
                num16 = (int)white.B;
                num15 -= (int)(90f * num13 * ((float)white.G / 255f));
                num16 -= (int)(110f * num13 * ((float)white.B / 255f));
                if (num14 < 15)
                {
                    num14 = 15;
                }
                if (num15 < 15)
                {
                    num15 = 15;
                }
                if (num16 < 15)
                {
                    num16 = 15;
                }
                white.R = (byte)num14;
                white.G = (byte)num15;
                white.B = (byte)num16;
                num14 = (int)white2.R;
                num15 = (int)white2.G;
                num16 = (int)white2.B;
                num14 -= (int)(100f * num13 * ((float)white2.R / 255f));
                num15 -= (int)(120f * num13 * ((float)white2.G / 255f));
                num16 -= (int)(180f * num13 * ((float)white2.B / 255f));
                if (num14 < 15)
                {
                    num14 = 15;
                }
                if (num15 < 15)
                {
                    num15 = 15;
                }
                if (num16 < 15)
                {
                    num16 = 15;
                }
                white2.R = (byte)num14;
                white2.G = (byte)num15;
                white2.B = (byte)num16;
            }
            if (biome.TileColor == CaptureBiome.TileColorStyle.Jungle)
            {
                float num17 = 1f;
                int num18 = (int)Game1.bgColor.R;
                int num19 = (int)Game1.bgColor.G;
                int num20 = (int)Game1.bgColor.B;
                num18 -= (int)(40f * num17 * ((float)Game1.bgColor.R / 255f));
                num20 -= (int)(70f * num17 * ((float)Game1.bgColor.B / 255f));
                if (num19 > 255)
                {
                    num19 = 255;
                }
                if (num19 < 15)
                {
                    num19 = 15;
                }
                if (num18 > 255)
                {
                    num18 = 255;
                }
                if (num18 < 15)
                {
                    num18 = 15;
                }
                if (num20 < 15)
                {
                    num20 = 15;
                }
                Game1.bgColor.R = (byte)num18;
                Game1.bgColor.G = (byte)num19;
                Game1.bgColor.B = (byte)num20;
                num18 = (int)white.R;
                num19 = (int)white.G;
                num20 = (int)white.B;
                num18 -= (int)(30f * num17 * ((float)white.R / 255f));
                num20 -= (int)(10f * num17 * ((float)white.B / 255f));
                if (num18 < 15)
                {
                    num18 = 15;
                }
                if (num19 < 15)
                {
                    num19 = 15;
                }
                if (num20 < 15)
                {
                    num20 = 15;
                }
                white.R = (byte)num18;
                white.G = (byte)num19;
                white.B = (byte)num20;
                num18 = (int)white2.R;
                num19 = (int)white2.G;
                num20 = (int)white2.B;
                num19 -= (int)(140f * num17 * ((float)white2.R / 255f));
                num18 -= (int)(170f * num17 * ((float)white2.G / 255f));
                num20 -= (int)(190f * num17 * ((float)white2.B / 255f));
                if (num18 < 15)
                {
                    num18 = 15;
                }
                if (num19 < 15)
                {
                    num19 = 15;
                }
                if (num20 < 15)
                {
                    num20 = 15;
                }
                white2.R = (byte)num18;
                white2.G = (byte)num19;
                white2.B = (byte)num20;
            }
            if (biome.TileColor == CaptureBiome.TileColorStyle.Mushroom)
            {
                float num21 = 1f;
                int num22 = (int)Game1.bgColor.R;
                int num23 = (int)Game1.bgColor.G;
                int num24 = (int)Game1.bgColor.B;
                num23 -= (int)(250f * num21 * ((float)Game1.bgColor.G / 255f));
                num22 -= (int)(250f * num21 * ((float)Game1.bgColor.R / 255f));
                num24 -= (int)(250f * num21 * ((float)Game1.bgColor.B / 255f));
                if (num23 < 15)
                {
                    num23 = 15;
                }
                if (num22 < 15)
                {
                    num22 = 15;
                }
                if (num24 < 15)
                {
                    num24 = 15;
                }
                Game1.bgColor.R = (byte)num22;
                Game1.bgColor.G = (byte)num23;
                Game1.bgColor.B = (byte)num24;
                num22 = (int)white.R;
                num23 = (int)white.G;
                num24 = (int)white.B;
                num23 -= (int)(10f * num21 * ((float)white.G / 255f));
                num22 -= (int)(30f * num21 * ((float)white.R / 255f));
                num24 -= (int)(10f * num21 * ((float)white.B / 255f));
                if (num22 < 15)
                {
                    num22 = 15;
                }
                if (num23 < 15)
                {
                    num23 = 15;
                }
                if (num24 < 15)
                {
                    num24 = 15;
                }
                white.R = (byte)num22;
                white.G = (byte)num23;
                white.B = (byte)num24;
                num22 = (int)white2.R;
                num23 = (int)white2.G;
                num24 = (int)white2.B;
                num23 -= (int)(140f * num21 * ((float)white2.R / 255f));
                num22 -= (int)(170f * num21 * ((float)white2.G / 255f));
                num24 -= (int)(190f * num21 * ((float)white2.B / 255f));
                if (num22 < 15)
                {
                    num22 = 15;
                }
                if (num23 < 15)
                {
                    num23 = 15;
                }
                if (num24 < 15)
                {
                    num24 = 15;
                }
                white2.R = (byte)num22;
                white2.G = (byte)num23;
                white2.B = (byte)num24;
            }
            if (Lighting.lightMode < 2)
            {
                if (Game1.bgColor.R < 10)
                {
                    Game1.bgColor.R = 10;
                }
                if (Game1.bgColor.G < 10)
                {
                    Game1.bgColor.G = 10;
                }
                if (Game1.bgColor.B < 10)
                {
                    Game1.bgColor.B = 10;
                }
            }
            else
            {
                if (Game1.bgColor.R < 15)
                {
                    Game1.bgColor.R = 15;
                }
                if (Game1.bgColor.G < 15)
                {
                    Game1.bgColor.G = 15;
                }
                if (Game1.bgColor.B < 15)
                {
                    Game1.bgColor.B = 15;
                }
            }
            Game1.tileColor.A = 255;
            Game1.tileColor.R = (byte)((Game1.bgColor.R + Game1.bgColor.G + Game1.bgColor.B + Game1.bgColor.R * 7) / 10);
            Game1.tileColor.G = (byte)((Game1.bgColor.R + Game1.bgColor.G + Game1.bgColor.B + Game1.bgColor.G * 7) / 10);
            Game1.tileColor.B = (byte)((Game1.bgColor.R + Game1.bgColor.G + Game1.bgColor.B + Game1.bgColor.B * 7) / 10);
            Game1.backColor = Game1.bgColor;
            Game1.trueBackColor = Game1.backColor;
            Lighting.Initialize(true);
            Game1.renderCount = 99;
            for (int k = 0; k < 3; k++)
            {
                Lighting.LightTiles(x, lastX, y, lastY);
            }
            if ((float)(settings.Area.X * 16) <= vector.X - 16f || (float)(settings.Area.Y * 16) <= vector.Y - 16f || (float)((settings.Area.X + settings.Area.Width) * 16) >= vector.X + (float)num3 + 16f || (float)((settings.Area.Y + settings.Area.Height) * 16) >= vector.Y + (float)num4 + 16f)
            {
                for (int l = 0; l < Game1.dust.Length; l++)
                {
                    if (Game1.dust[l].active && Game1.dust[l].type == 76)
                    {
                        Game1.dust[l].active = false;
                    }
                }
            }
            Vector2 value = Game1.drawToScreen ? Vector2.Zero : new Vector2((float)Game1.offScreenRange, (float)Game1.offScreenRange);
            int num25 = (int)((Game1.screenPosition.X - value.X) / 16f - 1f);
            int num26 = (int)((Game1.screenPosition.X + (float)Game1.screenWidth + value.X) / 16f) + 2;
            int num27 = (int)((Game1.screenPosition.Y - value.Y) / 16f - 1f);
            int num28 = (int)((Game1.screenPosition.Y + (float)Game1.screenHeight + value.Y) / 16f) + 5;
            value -= Game1.screenPosition;
            num25 = Math.Max(num25, 5) - 2;
            num27 = Math.Max(num27, 5);
            num26 = Math.Min(num26, Game1.maxTilesX - 5) + 2;
            num28 = Math.Min(num28, Game1.maxTilesY - 5) + 4;
            Microsoft.Xna.Framework.Rectangle drawArea = new Microsoft.Xna.Framework.Rectangle(num25, num27, num26 - num25, num28 - num27);
            LiquidRenderer.Instance.Update(drawArea);
            if (captureBackground)
            {
                Matrix matrix = this.Transform;
                int num29 = Game1.screenHeight;
                int num30 = Game1.screenWidth;
                Vector2 vector2 = Game1.screenPosition;
                bool flag = Game1.mapFullscreen;
                Game1.mapFullscreen = false;
                float num31 = this.scAdj;
                Vector2 value2 = new Vector2((float)num3, (float)num4);
                Vector2 value3 = new Vector2((float)(settings.Area.Width * 16), (float)(settings.Area.Height * 16));
                Vector2 value4 = value3 / value2;
                value4.X = Math.Max(1f, value4.X);
                value4.Y = Math.Max(1f, value4.Y);
                Vector2[] array3 = new Vector2[Game1.numClouds];
                for (int m = 0; m < Game1.numClouds; m++)
                {
                    array3[m] = Game1.cloud[m].position;
                    Game1.cloud[m].position *= value4;
                }
                if ((float)(settings.Area.Height * 16) >= 2000f || (float)(settings.Area.Width * 16) >= 2000f)
                {
                    this.scAdj = 0f;
                    float num32 = 2500f;
                    float num33 = MathHelper.Clamp((float)settings.Area.Height * 16f / num32, 1f, 2f);
                    Game1.screenWidth = settings.Area.Width * 16;
                    Game1.screenHeight = Math.Min(2048, settings.Area.Height * 16);
                    Game1.screenPosition.X = (float)(settings.Area.X * 16);
                    Game1.screenPosition.Y = (float)(settings.Area.Y * 16);
                    Game1.screenPosition.Y = Game1.screenPosition.Y + Math.Max(0f, Math.Min((float)settings.Area.Height, (float)Game1.worldSurface) * 16f - num32 * num33);
                    matrix *= Matrix.CreateScale(num33);
                    matrix.Translation += new Vector3((float)((settings.Area.X - area.X) * 16), (float)((settings.Area.Y - area.Y) * 16), 0f);
                    matrix.Translation += new Vector3(0f, Math.Max(0f, Math.Min((float)settings.Area.Height, (float)Game1.worldSurface) * 16f - num32 * num33) / num33, 0f);
                }
                else if ((float)(settings.Area.X * 16) > vector.X - 16f && (float)(settings.Area.Y * 16) > vector.Y - 16f && (float)((settings.Area.X + settings.Area.Width) * 16) < vector.X + (float)num3 + 16f && (float)((settings.Area.Y + settings.Area.Height) * 16) < vector.Y + (float)num4 + 16f)
                {
                    Game1.screenPosition = vector;
                    Game1.screenWidth = num3;
                    Game1.screenHeight = num4;
                    matrix.Translation += new Vector3(vector.X - (float)area.X * 16f, vector.Y - (float)area.Y * 16f, 0f);
                }
                Game1.tileBatch.Begin();
                this.DrawSimpleSurfaceBackground();
                Game1.tileBatch.End();
                Game1.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.AnisotropicClamp, DepthStencilState.Default, RasterizerState.CullNone, null, matrix);
                this.DrawSurfaceBG();
                Game1.spriteBatch.End();
                for (int n = 0; n < Game1.numClouds; n++)
                {
                    Game1.cloud[n].position = array3[n];
                }
                this.scAdj = num31;
                Game1.mapFullscreen = flag;
                Game1.screenWidth = num30;
                Game1.screenHeight = num29;
                Game1.screenPosition = vector2;
            }
            if (captureBackground)
            {
                Game1.spriteBatch.Begin();
                this.DrawUnderworldBackground(true);
                Game1.spriteBatch.End();
            }
            if (captureEntities)
            {
                Game1.spriteBatch.Begin();
                this.CacheNPCDraws();
                this.CacheProjDraws();
                this.DrawCachedNPCs(this.DrawCacheNPCsMoonMoon, true);
                Game1.spriteBatch.End();
            }
            Game1.tileBatch.Begin();
            Game1.spriteBatch.Begin();
            this.DrawBlack(true);
            Game1.tileBatch.End();
            Game1.spriteBatch.End();
            Game1.tileBatch.Begin();
            Game1.spriteBatch.Begin();
            if (biome == null)
            {
                this.drawWaters(true, -1, true);
            }
            else
            {
                this.drawWaters(true, Game1.bloodMoon ? 9 : biome.WaterStyle, false);
            }
            Game1.tileBatch.End();
            Game1.spriteBatch.End();
            if (captureBackground)
            {
                Game1.tileBatch.Begin();
                Game1.spriteBatch.Begin();
                this.DrawBackground();
                Game1.tileBatch.End();
                Game1.spriteBatch.End();
            }
            Game1.tileBatch.Begin();
            Game1.spriteBatch.Begin();
            this.DrawWalls();
            Game1.tileBatch.End();
            Game1.spriteBatch.End();
            if (captureEntities)
            {
                Game1.spriteBatch.Begin();
                this.DrawWoF();
                Game1.spriteBatch.End();
            }
            if (captureEntities)
            {
                Game1.spriteBatch.Begin();
                this.DrawRain();
                Game1.spriteBatch.End();
            }
            if (Game1.drawBackGore && captureEntities)
            {
                Game1.spriteBatch.Begin();
                this.DrawGoreBehind();
                Game1.spriteBatch.End();
                Game1.drawBackGore = true;
            }
            if (captureEntities)
            {
                Game1.spriteBatch.Begin();
                MoonlordDeathDrama.DrawPieces(Game1.spriteBatch);
                MoonlordDeathDrama.DrawExplosions(Game1.spriteBatch);
                Game1.spriteBatch.End();
            }
            Game1.tileBatch.Begin();
            Game1.spriteBatch.Begin();
            if (biome == null)
            {
                this.DrawTiles(true, -1);
            }
            else
            {
                this.DrawTiles(true, biome.WaterStyle);
            }
            Game1.tileBatch.End();
            Game1.spriteBatch.End();
            Game1.tileBatch.Begin();
            Game1.spriteBatch.Begin();
            if (biome == null)
            {
                this.DrawTiles(false, -1);
            }
            else
            {
                this.DrawTiles(false, Game1.bloodMoon ? 9 : biome.WaterStyle);
            }
            Game1.tileBatch.End();
            Game1.spriteBatch.End();
            if (captureEntities)
            {
                Game1.spriteBatch.Begin();
                this.waterfallManager.FindWaterfalls(false);
                this.waterfallManager.Draw(Game1.spriteBatch);
                Game1.spriteBatch.End();
                this.DrawPlayers();
                this.DrawCachedProjs(this.DrawCacheProjsBackground);
                Game1.spriteBatch.Begin();
                this.DrawNPCs(true);
                this.DrawNPCs(false);
                Game1.spriteBatch.End();
                Game1.spriteBatch.Begin();
                this.DrawCachedNPCs(this.DrawCacheNPCProjectiles, false);
                Game1.spriteBatch.End();
                Game1.spriteBatch.Begin();
                this.DrawItems();
                Game1.spriteBatch.End();
                this.DrawProjectiles();
                this.DrawDust();
                Game1.spriteBatch.Begin();
                this.DrawGore();
                Game1.spriteBatch.End();
            }
            Game1.tileBatch.Begin();
            Game1.spriteBatch.Begin();
            if (biome == null)
            {
                this.drawWaters(false, -1, true);
            }
            else
            {
                this.drawWaters(false, biome.WaterStyle, false);
            }
            Game1.tileBatch.End();
            Game1.spriteBatch.End();
            if (Game1.mapEnabled)
            {
                Game1.spriteBatch.Begin();
                for (int num34 = area.X; num34 < area.X + area.Width; num34++)
                {
                    for (int num35 = area.Y; num35 < area.Y + area.Height; num35++)
                    {
                        if (!Game1.Map.IsRevealed(num34, num35))
                        {
                            Game1.spriteBatch.Draw(Game1.blackTileTexture, new Vector2((float)num34 * 16f, (float)num35 * 16f) - Game1.screenPosition, Microsoft.Xna.Framework.Color.Black);
                        }
                    }
                }
                Game1.spriteBatch.End();
            }
            Game1.renderCount = 99;
            Game1.screenWidth = num3;
            Game1.screenHeight = num4;
            Game1.screenPosition = vector;
            Lighting.Initialize(true);
            Game1.offScreenRange = num2;
            Game1.cloudAlpha = num5;
            Game1.bgAlpha = array;
            Game1.bgAlpha2 = array2;
            Game1.holyTiles = num;
        }


        public void RenderFrameBuffers()
        {
            Game1.spriteBatch.Begin();
            Game1.spriteBatch.Draw(this.blackTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
            Game1.spriteBatch.Draw(this.backWaterTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
            Game1.spriteBatch.Draw(this.wallTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
            Game1.spriteBatch.Draw(this.tileTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
            Game1.spriteBatch.Draw(this.tile2Target, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
            Game1.spriteBatch.Draw(this.waterTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
            Game1.spriteBatch.End();
        }
        protected void RenderTiles()
        {
            if (Game1.drawToScreen)
            {
                return;
            }
            this.RenderBlack();
            base.GraphicsDevice.SetRenderTarget(this.tileTarget);
            base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
            Game1.spriteBatch.Begin();
            if (Game1.ignoreErrors)
            {
                try
                {
                    this.DrawTiles(true, -1);
                    goto IL_5B;
                }
                catch (Exception e)
                {
                    TimeLogger.DrawException(e);
                    goto IL_5B;
                }
            }
            this.DrawTiles(true, -1);
        IL_5B:
            TimeLogger.DetailedDrawReset();
            Game1.spriteBatch.End();
            TimeLogger.DetailedDrawTime(28);
            base.GraphicsDevice.SetRenderTarget(null);
        }
        protected void RenderTiles2()
        {
            if (Game1.drawToScreen)
            {
                return;
            }
            base.GraphicsDevice.SetRenderTarget(this.tile2Target);
            base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
            Game1.spriteBatch.Begin();
            if (Game1.ignoreErrors)
            {
                try
                {
                    this.DrawTiles(false, -1);
                    goto IL_55;
                }
                catch (Exception e)
                {
                    TimeLogger.DrawException(e);
                    goto IL_55;
                }
            }
            this.DrawTiles(false, -1);
        IL_55:
            TimeLogger.DetailedDrawReset();
            Game1.spriteBatch.End();
            TimeLogger.DetailedDrawTime(29);
            base.GraphicsDevice.SetRenderTarget(null);
        }
        protected void RenderWater()
        {
            if (Game1.drawToScreen)
            {
                return;
            }
            base.GraphicsDevice.SetRenderTarget(this.waterTarget);
            base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
            Game1.spriteBatch.Begin();
            Game1.tileBatch.Begin();
            try
            {
                this.drawWaters(false, -1, true);
                if (Game1.player[Game1.myPlayer].inventory[Game1.player[Game1.myPlayer].selectedItem].mech)
                {
                    this.DrawWires();
                }
            }
            catch
            {
            }
            TimeLogger.DetailedDrawReset();
            Game1.tileBatch.End();
            Game1.spriteBatch.End();
            TimeLogger.DetailedDrawTime(31);
            base.GraphicsDevice.SetRenderTarget(null);
        }

        protected void drawWaters(bool bg = false, int styleOverride = -1, bool allowUpdate = true)
        {
            if (!bg)
            {
                if (Game1.bgStyle == 1)
                {
                    Game1.waterStyle = 2;
                }
                else if (Game1.bgStyle == 5)
                {
                    if (Game1.evilTiles > Game1.holyTiles)
                    {
                        if (Game1.bloodTiles > Game1.evilTiles)
                        {
                            Game1.waterStyle = 10;
                        }
                        else
                        {
                            Game1.waterStyle = 2;
                        }
                    }
                    else if (Game1.bloodTiles > Game1.holyTiles)
                    {
                        Game1.waterStyle = 10;
                    }
                    else
                    {
                        Game1.waterStyle = 4;
                    }
                }
                else if (Game1.bgStyle == 5 && Game1.bloodTiles > Game1.holyTiles)
                {
                    Game1.waterStyle = 10;
                }
                else if (Game1.bgStyle == 3)
                {
                    Game1.waterStyle = 3;
                }
                else if (Game1.bgStyle == 8)
                {
                    Game1.waterStyle = 10;
                }
                else if (Game1.bgStyle == 6)
                {
                    Game1.waterStyle = 4;
                }
                else if (Game1.bgStyle == 7)
                {
                    Game1.waterStyle = 5;
                }
                else if (Game1.bgStyle == 2)
                {
                    Game1.waterStyle = 6;
                }
                else if ((double)(Game1.screenPosition.Y / 16f) > Game1.rockLayer + 40.0)
                {
                    if (Game1.shroomTiles > 300)
                    {
                        Game1.waterStyle = 7;
                    }
                    else
                    {
                        Game1.waterStyle = 8;
                    }
                }
                else if ((double)(Game1.screenPosition.Y / 16f) > Game1.worldSurface)
                {
                    Game1.waterStyle = 7;
                }
                else
                {
                    Game1.waterStyle = 0;
                }
                if (Game1.bgStyle != 4 && Game1.bloodMoon && !Game1.dayTime)
                {
                    Game1.waterStyle = 9;
                }
                if (Game1.fountainColor >= 0)
                {
                    Game1.waterStyle = Game1.fountainColor;
                }
                if (Game1.waterStyle == 0)
                {
                    Game1.liquidAlpha[2] -= 0.2f;
                    if (Game1.liquidAlpha[2] < 0f)
                    {
                        Game1.liquidAlpha[2] = 0f;
                    }
                    Game1.liquidAlpha[3] -= 0.2f;
                    if (Game1.liquidAlpha[3] < 0f)
                    {
                        Game1.liquidAlpha[3] = 0f;
                    }
                    Game1.liquidAlpha[4] -= 0.2f;
                    if (Game1.liquidAlpha[4] < 0f)
                    {
                        Game1.liquidAlpha[4] = 0f;
                    }
                    Game1.liquidAlpha[5] -= 0.2f;
                    if (Game1.liquidAlpha[5] < 0f)
                    {
                        Game1.liquidAlpha[5] = 0f;
                    }
                    Game1.liquidAlpha[6] -= 0.2f;
                    if (Game1.liquidAlpha[6] < 0f)
                    {
                        Game1.liquidAlpha[6] = 0f;
                    }
                    Game1.liquidAlpha[7] -= 0.2f;
                    if (Game1.liquidAlpha[7] < 0f)
                    {
                        Game1.liquidAlpha[7] = 0f;
                    }
                    Game1.liquidAlpha[8] -= 0.2f;
                    if (Game1.liquidAlpha[8] < 0f)
                    {
                        Game1.liquidAlpha[8] = 0f;
                    }
                    Game1.liquidAlpha[9] -= 0.2f;
                    if (Game1.liquidAlpha[9] < 0f)
                    {
                        Game1.liquidAlpha[9] = 0f;
                    }
                    Game1.liquidAlpha[10] -= 0.2f;
                    if (Game1.liquidAlpha[10] < 0f)
                    {
                        Game1.liquidAlpha[10] = 0f;
                    }
                    Game1.liquidAlpha[0] += 0.2f;
                    if (Game1.liquidAlpha[0] > 1f)
                    {
                        Game1.liquidAlpha[0] = 1f;
                    }
                }
                if (Game1.waterStyle == 2)
                {
                    Game1.liquidAlpha[0] -= 0.2f;
                    if (Game1.liquidAlpha[0] < 0f)
                    {
                        Game1.liquidAlpha[0] = 0f;
                    }
                    Game1.liquidAlpha[3] -= 0.2f;
                    if (Game1.liquidAlpha[3] < 0f)
                    {
                        Game1.liquidAlpha[3] = 0f;
                    }
                    Game1.liquidAlpha[4] -= 0.2f;
                    if (Game1.liquidAlpha[4] < 0f)
                    {
                        Game1.liquidAlpha[4] = 0f;
                    }
                    Game1.liquidAlpha[5] -= 0.2f;
                    if (Game1.liquidAlpha[5] < 0f)
                    {
                        Game1.liquidAlpha[5] = 0f;
                    }
                    Game1.liquidAlpha[6] -= 0.2f;
                    if (Game1.liquidAlpha[6] < 0f)
                    {
                        Game1.liquidAlpha[6] = 0f;
                    }
                    Game1.liquidAlpha[7] -= 0.2f;
                    if (Game1.liquidAlpha[7] < 0f)
                    {
                        Game1.liquidAlpha[7] = 0f;
                    }
                    Game1.liquidAlpha[8] -= 0.2f;
                    if (Game1.liquidAlpha[8] < 0f)
                    {
                        Game1.liquidAlpha[8] = 0f;
                    }
                    Game1.liquidAlpha[9] -= 0.2f;
                    if (Game1.liquidAlpha[9] < 0f)
                    {
                        Game1.liquidAlpha[9] = 0f;
                    }
                    Game1.liquidAlpha[10] -= 0.2f;
                    if (Game1.liquidAlpha[10] < 0f)
                    {
                        Game1.liquidAlpha[10] = 0f;
                    }
                    Game1.liquidAlpha[2] += 0.2f;
                    if (Game1.liquidAlpha[2] > 1f)
                    {
                        Game1.liquidAlpha[2] = 1f;
                    }
                }
                if (Game1.waterStyle == 3)
                {
                    Game1.liquidAlpha[0] -= 0.2f;
                    if (Game1.liquidAlpha[0] < 0f)
                    {
                        Game1.liquidAlpha[0] = 0f;
                    }
                    Game1.liquidAlpha[2] -= 0.2f;
                    if (Game1.liquidAlpha[2] < 0f)
                    {
                        Game1.liquidAlpha[2] = 0f;
                    }
                    Game1.liquidAlpha[4] -= 0.2f;
                    if (Game1.liquidAlpha[4] < 0f)
                    {
                        Game1.liquidAlpha[4] = 0f;
                    }
                    Game1.liquidAlpha[5] -= 0.2f;
                    if (Game1.liquidAlpha[5] < 0f)
                    {
                        Game1.liquidAlpha[5] = 0f;
                    }
                    Game1.liquidAlpha[6] -= 0.2f;
                    if (Game1.liquidAlpha[6] < 0f)
                    {
                        Game1.liquidAlpha[6] = 0f;
                    }
                    Game1.liquidAlpha[7] -= 0.2f;
                    if (Game1.liquidAlpha[7] < 0f)
                    {
                        Game1.liquidAlpha[7] = 0f;
                    }
                    Game1.liquidAlpha[8] -= 0.2f;
                    if (Game1.liquidAlpha[8] < 0f)
                    {
                        Game1.liquidAlpha[8] = 0f;
                    }
                    Game1.liquidAlpha[9] -= 0.2f;
                    if (Game1.liquidAlpha[9] < 0f)
                    {
                        Game1.liquidAlpha[9] = 0f;
                    }
                    Game1.liquidAlpha[10] -= 0.2f;
                    if (Game1.liquidAlpha[10] < 0f)
                    {
                        Game1.liquidAlpha[10] = 0f;
                    }
                    Game1.liquidAlpha[3] += 0.2f;
                    if (Game1.liquidAlpha[3] > 1f)
                    {
                        Game1.liquidAlpha[3] = 1f;
                    }
                }
                if (Game1.waterStyle == 4)
                {
                    Game1.liquidAlpha[0] -= 0.2f;
                    if (Game1.liquidAlpha[0] < 0f)
                    {
                        Game1.liquidAlpha[0] = 0f;
                    }
                    Game1.liquidAlpha[2] -= 0.2f;
                    if (Game1.liquidAlpha[2] < 0f)
                    {
                        Game1.liquidAlpha[2] = 0f;
                    }
                    Game1.liquidAlpha[3] -= 0.2f;
                    if (Game1.liquidAlpha[3] < 0f)
                    {
                        Game1.liquidAlpha[3] = 0f;
                    }
                    Game1.liquidAlpha[5] -= 0.2f;
                    if (Game1.liquidAlpha[5] < 0f)
                    {
                        Game1.liquidAlpha[5] = 0f;
                    }
                    Game1.liquidAlpha[6] -= 0.2f;
                    if (Game1.liquidAlpha[6] < 0f)
                    {
                        Game1.liquidAlpha[6] = 0f;
                    }
                    Game1.liquidAlpha[7] -= 0.2f;
                    if (Game1.liquidAlpha[7] < 0f)
                    {
                        Game1.liquidAlpha[7] = 0f;
                    }
                    Game1.liquidAlpha[8] -= 0.2f;
                    if (Game1.liquidAlpha[8] < 0f)
                    {
                        Game1.liquidAlpha[8] = 0f;
                    }
                    Game1.liquidAlpha[9] -= 0.2f;
                    if (Game1.liquidAlpha[9] < 0f)
                    {
                        Game1.liquidAlpha[9] = 0f;
                    }
                    Game1.liquidAlpha[10] -= 0.2f;
                    if (Game1.liquidAlpha[10] < 0f)
                    {
                        Game1.liquidAlpha[10] = 0f;
                    }
                    Game1.liquidAlpha[4] += 0.2f;
                    if (Game1.liquidAlpha[4] > 1f)
                    {
                        Game1.liquidAlpha[4] = 1f;
                    }
                }
                if (Game1.waterStyle == 5)
                {
                    Game1.liquidAlpha[0] -= 0.2f;
                    if (Game1.liquidAlpha[0] < 0f)
                    {
                        Game1.liquidAlpha[0] = 0f;
                    }
                    Game1.liquidAlpha[2] -= 0.2f;
                    if (Game1.liquidAlpha[2] < 0f)
                    {
                        Game1.liquidAlpha[2] = 0f;
                    }
                    Game1.liquidAlpha[3] -= 0.2f;
                    if (Game1.liquidAlpha[3] < 0f)
                    {
                        Game1.liquidAlpha[3] = 0f;
                    }
                    Game1.liquidAlpha[4] -= 0.2f;
                    if (Game1.liquidAlpha[4] < 0f)
                    {
                        Game1.liquidAlpha[4] = 0f;
                    }
                    Game1.liquidAlpha[6] -= 0.2f;
                    if (Game1.liquidAlpha[6] < 0f)
                    {
                        Game1.liquidAlpha[6] = 0f;
                    }
                    Game1.liquidAlpha[7] -= 0.2f;
                    if (Game1.liquidAlpha[7] < 0f)
                    {
                        Game1.liquidAlpha[7] = 0f;
                    }
                    Game1.liquidAlpha[8] -= 0.2f;
                    if (Game1.liquidAlpha[8] < 0f)
                    {
                        Game1.liquidAlpha[8] = 0f;
                    }
                    Game1.liquidAlpha[9] -= 0.2f;
                    if (Game1.liquidAlpha[9] < 0f)
                    {
                        Game1.liquidAlpha[9] = 0f;
                    }
                    Game1.liquidAlpha[10] -= 0.2f;
                    if (Game1.liquidAlpha[10] < 0f)
                    {
                        Game1.liquidAlpha[10] = 0f;
                    }
                    Game1.liquidAlpha[5] += 0.2f;
                    if (Game1.liquidAlpha[5] > 1f)
                    {
                        Game1.liquidAlpha[5] = 1f;
                    }
                }
                if (Game1.waterStyle == 6)
                {
                    Game1.liquidAlpha[0] -= 0.2f;
                    if (Game1.liquidAlpha[0] < 0f)
                    {
                        Game1.liquidAlpha[0] = 0f;
                    }
                    Game1.liquidAlpha[2] -= 0.2f;
                    if (Game1.liquidAlpha[2] < 0f)
                    {
                        Game1.liquidAlpha[2] = 0f;
                    }
                    Game1.liquidAlpha[3] -= 0.2f;
                    if (Game1.liquidAlpha[3] < 0f)
                    {
                        Game1.liquidAlpha[3] = 0f;
                    }
                    Game1.liquidAlpha[4] -= 0.2f;
                    if (Game1.liquidAlpha[4] < 0f)
                    {
                        Game1.liquidAlpha[4] = 0f;
                    }
                    Game1.liquidAlpha[5] -= 0.2f;
                    if (Game1.liquidAlpha[5] < 0f)
                    {
                        Game1.liquidAlpha[5] = 0f;
                    }
                    Game1.liquidAlpha[7] -= 0.2f;
                    if (Game1.liquidAlpha[7] < 0f)
                    {
                        Game1.liquidAlpha[7] = 0f;
                    }
                    Game1.liquidAlpha[8] -= 0.2f;
                    if (Game1.liquidAlpha[8] < 0f)
                    {
                        Game1.liquidAlpha[8] = 0f;
                    }
                    Game1.liquidAlpha[9] -= 0.2f;
                    if (Game1.liquidAlpha[9] < 0f)
                    {
                        Game1.liquidAlpha[9] = 0f;
                    }
                    Game1.liquidAlpha[10] -= 0.2f;
                    if (Game1.liquidAlpha[10] < 0f)
                    {
                        Game1.liquidAlpha[10] = 0f;
                    }
                    Game1.liquidAlpha[6] += 0.2f;
                    if (Game1.liquidAlpha[6] > 1f)
                    {
                        Game1.liquidAlpha[6] = 1f;
                    }
                }
                if (Game1.waterStyle == 7)
                {
                    Game1.liquidAlpha[0] -= 0.2f;
                    if (Game1.liquidAlpha[0] < 0f)
                    {
                        Game1.liquidAlpha[0] = 0f;
                    }
                    Game1.liquidAlpha[2] -= 0.2f;
                    if (Game1.liquidAlpha[2] < 0f)
                    {
                        Game1.liquidAlpha[2] = 0f;
                    }
                    Game1.liquidAlpha[3] -= 0.2f;
                    if (Game1.liquidAlpha[3] < 0f)
                    {
                        Game1.liquidAlpha[3] = 0f;
                    }
                    Game1.liquidAlpha[4] -= 0.2f;
                    if (Game1.liquidAlpha[4] < 0f)
                    {
                        Game1.liquidAlpha[4] = 0f;
                    }
                    Game1.liquidAlpha[5] -= 0.2f;
                    if (Game1.liquidAlpha[5] < 0f)
                    {
                        Game1.liquidAlpha[5] = 0f;
                    }
                    Game1.liquidAlpha[6] -= 0.2f;
                    if (Game1.liquidAlpha[6] < 0f)
                    {
                        Game1.liquidAlpha[6] = 0f;
                    }
                    Game1.liquidAlpha[8] -= 0.2f;
                    if (Game1.liquidAlpha[8] < 0f)
                    {
                        Game1.liquidAlpha[8] = 0f;
                    }
                    Game1.liquidAlpha[9] -= 0.2f;
                    if (Game1.liquidAlpha[9] < 0f)
                    {
                        Game1.liquidAlpha[9] = 0f;
                    }
                    Game1.liquidAlpha[10] -= 0.2f;
                    if (Game1.liquidAlpha[10] < 0f)
                    {
                        Game1.liquidAlpha[10] = 0f;
                    }
                    Game1.liquidAlpha[7] += 0.2f;
                    if (Game1.liquidAlpha[7] > 1f)
                    {
                        Game1.liquidAlpha[7] = 1f;
                    }
                }
                if (Game1.waterStyle == 8)
                {
                    Game1.liquidAlpha[0] -= 0.2f;
                    if (Game1.liquidAlpha[0] < 0f)
                    {
                        Game1.liquidAlpha[0] = 0f;
                    }
                    Game1.liquidAlpha[2] -= 0.2f;
                    if (Game1.liquidAlpha[2] < 0f)
                    {
                        Game1.liquidAlpha[2] = 0f;
                    }
                    Game1.liquidAlpha[3] -= 0.2f;
                    if (Game1.liquidAlpha[3] < 0f)
                    {
                        Game1.liquidAlpha[3] = 0f;
                    }
                    Game1.liquidAlpha[4] -= 0.2f;
                    if (Game1.liquidAlpha[4] < 0f)
                    {
                        Game1.liquidAlpha[4] = 0f;
                    }
                    Game1.liquidAlpha[5] -= 0.2f;
                    if (Game1.liquidAlpha[5] < 0f)
                    {
                        Game1.liquidAlpha[5] = 0f;
                    }
                    Game1.liquidAlpha[6] -= 0.2f;
                    if (Game1.liquidAlpha[6] < 0f)
                    {
                        Game1.liquidAlpha[6] = 0f;
                    }
                    Game1.liquidAlpha[7] -= 0.2f;
                    if (Game1.liquidAlpha[7] < 0f)
                    {
                        Game1.liquidAlpha[7] = 0f;
                    }
                    Game1.liquidAlpha[9] -= 0.2f;
                    if (Game1.liquidAlpha[9] < 0f)
                    {
                        Game1.liquidAlpha[9] = 0f;
                    }
                    Game1.liquidAlpha[10] -= 0.2f;
                    if (Game1.liquidAlpha[10] < 0f)
                    {
                        Game1.liquidAlpha[10] = 0f;
                    }
                    Game1.liquidAlpha[8] += 0.2f;
                    if (Game1.liquidAlpha[8] > 1f)
                    {
                        Game1.liquidAlpha[8] = 1f;
                    }
                }
                if (Game1.waterStyle == 9)
                {
                    Game1.liquidAlpha[0] -= 0.2f;
                    if (Game1.liquidAlpha[0] < 0f)
                    {
                        Game1.liquidAlpha[0] = 0f;
                    }
                    Game1.liquidAlpha[2] -= 0.2f;
                    if (Game1.liquidAlpha[2] < 0f)
                    {
                        Game1.liquidAlpha[2] = 0f;
                    }
                    Game1.liquidAlpha[3] -= 0.2f;
                    if (Game1.liquidAlpha[3] < 0f)
                    {
                        Game1.liquidAlpha[3] = 0f;
                    }
                    Game1.liquidAlpha[4] -= 0.2f;
                    if (Game1.liquidAlpha[4] < 0f)
                    {
                        Game1.liquidAlpha[4] = 0f;
                    }
                    Game1.liquidAlpha[5] -= 0.2f;
                    if (Game1.liquidAlpha[5] < 0f)
                    {
                        Game1.liquidAlpha[5] = 0f;
                    }
                    Game1.liquidAlpha[6] -= 0.2f;
                    if (Game1.liquidAlpha[6] < 0f)
                    {
                        Game1.liquidAlpha[6] = 0f;
                    }
                    Game1.liquidAlpha[7] -= 0.2f;
                    if (Game1.liquidAlpha[7] < 0f)
                    {
                        Game1.liquidAlpha[7] = 0f;
                    }
                    Game1.liquidAlpha[8] -= 0.2f;
                    if (Game1.liquidAlpha[8] < 0f)
                    {
                        Game1.liquidAlpha[8] = 0f;
                    }
                    Game1.liquidAlpha[10] -= 0.2f;
                    if (Game1.liquidAlpha[10] < 0f)
                    {
                        Game1.liquidAlpha[10] = 0f;
                    }
                    Game1.liquidAlpha[9] += 0.2f;
                    if (Game1.liquidAlpha[9] > 1f)
                    {
                        Game1.liquidAlpha[9] = 1f;
                    }
                }
                if (Game1.waterStyle == 10)
                {
                    Game1.liquidAlpha[0] -= 0.2f;
                    if (Game1.liquidAlpha[0] < 0f)
                    {
                        Game1.liquidAlpha[0] = 0f;
                    }
                    Game1.liquidAlpha[2] -= 0.2f;
                    if (Game1.liquidAlpha[2] < 0f)
                    {
                        Game1.liquidAlpha[2] = 0f;
                    }
                    Game1.liquidAlpha[3] -= 0.2f;
                    if (Game1.liquidAlpha[3] < 0f)
                    {
                        Game1.liquidAlpha[3] = 0f;
                    }
                    Game1.liquidAlpha[4] -= 0.2f;
                    if (Game1.liquidAlpha[4] < 0f)
                    {
                        Game1.liquidAlpha[4] = 0f;
                    }
                    Game1.liquidAlpha[5] -= 0.2f;
                    if (Game1.liquidAlpha[5] < 0f)
                    {
                        Game1.liquidAlpha[5] = 0f;
                    }
                    Game1.liquidAlpha[6] -= 0.2f;
                    if (Game1.liquidAlpha[6] < 0f)
                    {
                        Game1.liquidAlpha[6] = 0f;
                    }
                    Game1.liquidAlpha[7] -= 0.2f;
                    if (Game1.liquidAlpha[7] < 0f)
                    {
                        Game1.liquidAlpha[7] = 0f;
                    }
                    Game1.liquidAlpha[8] -= 0.2f;
                    if (Game1.liquidAlpha[8] < 0f)
                    {
                        Game1.liquidAlpha[8] = 0f;
                    }
                    Game1.liquidAlpha[9] -= 0.2f;
                    if (Game1.liquidAlpha[9] < 0f)
                    {
                        Game1.liquidAlpha[9] = 0f;
                    }
                    Game1.liquidAlpha[10] += 0.2f;
                    if (Game1.liquidAlpha[10] > 1f)
                    {
                        Game1.liquidAlpha[10] = 1f;
                    }
                }
            }
            Game1.drewLava = false;
            if (!Game1.drawToScreen)
            {
                if ((!bg ^ styleOverride != -1) && allowUpdate)
                {
                    Vector2 value = Game1.drawToScreen ? Vector2.Zero : new Vector2((float)Game1.offScreenRange, (float)Game1.offScreenRange);
                    int num = (int)((Game1.screenPosition.X - value.X) / 16f - 1f);
                    int num2 = (int)((Game1.screenPosition.X + (float)Game1.screenWidth + value.X) / 16f) + 2;
                    int num3 = (int)((Game1.screenPosition.Y - value.Y) / 16f - 1f);
                    int num4 = (int)((Game1.screenPosition.Y + (float)Game1.screenHeight + value.Y) / 16f) + 5;
                    value -= Game1.screenPosition;
                    num = Math.Max(num, 5) - 2;
                    num3 = Math.Max(num3, 5);
                    num2 = Math.Min(num2, Game1.maxTilesX - 5) + 2;
                    num4 = Math.Min(num4, Game1.maxTilesY - 5) + 4;
                    Microsoft.Xna.Framework.Rectangle drawArea = new Microsoft.Xna.Framework.Rectangle(num, num3, num2 - num, num4 - num3);
                    LiquidRenderer.Instance.Update(drawArea);
                }
                if (styleOverride != -1)
                {
                    this.DrawWater(bg, styleOverride, 1f);
                    return;
                }
                for (int i = 0; i < 11; i++)
                {
                    if (i != 1 && Game1.liquidAlpha[i] > 0f)
                    {
                        this.DrawWater(bg, i, Game1.liquidAlpha[i]);
                    }
                }
                return;
            }
            else
            {
                if (styleOverride != -1)
                {
                    this.DrawWater(bg, styleOverride, 1f);
                    return;
                }
                if (Game1.liquidAlpha[0] > 0f)
                {
                    if (bg)
                    {
                        this.DrawWater(bg, 0, 1f);
                    }
                    else
                    {
                        this.DrawWater(bg, 0, Game1.liquidAlpha[0]);
                    }
                }
                if (Game1.liquidAlpha[2] > 0f)
                {
                    if (bg)
                    {
                        if (Game1.waterStyle < 2)
                        {
                            this.DrawWater(bg, 2, Game1.liquidAlpha[2]);
                        }
                        else
                        {
                            this.DrawWater(bg, 2, 1f);
                        }
                    }
                    else
                    {
                        this.DrawWater(bg, 2, Game1.liquidAlpha[2]);
                    }
                }
                if (Game1.liquidAlpha[3] > 0f)
                {
                    if (bg)
                    {
                        if (Game1.waterStyle < 3)
                        {
                            this.DrawWater(bg, 3, Game1.liquidAlpha[3]);
                        }
                        else
                        {
                            this.DrawWater(bg, 3, 1f);
                        }
                    }
                    else
                    {
                        this.DrawWater(bg, 3, Game1.liquidAlpha[3]);
                    }
                }
                if (Game1.liquidAlpha[4] > 0f)
                {
                    if (bg)
                    {
                        if (Game1.waterStyle < 4)
                        {
                            this.DrawWater(bg, 4, Game1.liquidAlpha[4]);
                        }
                        else
                        {
                            this.DrawWater(bg, 4, 1f);
                        }
                    }
                    else
                    {
                        this.DrawWater(bg, 4, Game1.liquidAlpha[4]);
                    }
                }
                if (Game1.liquidAlpha[5] > 0f)
                {
                    if (bg)
                    {
                        if (Game1.waterStyle < 5)
                        {
                            this.DrawWater(bg, 5, Game1.liquidAlpha[5]);
                        }
                        else
                        {
                            this.DrawWater(bg, 5, 1f);
                        }
                    }
                    else
                    {
                        this.DrawWater(bg, 5, Game1.liquidAlpha[5]);
                    }
                }
                if (Game1.liquidAlpha[6] > 0f)
                {
                    if (bg)
                    {
                        if (Game1.waterStyle < 6)
                        {
                            this.DrawWater(bg, 6, Game1.liquidAlpha[6]);
                        }
                        else
                        {
                            this.DrawWater(bg, 6, 1f);
                        }
                    }
                    else
                    {
                        this.DrawWater(bg, 6, Game1.liquidAlpha[6]);
                    }
                }
                if (Game1.liquidAlpha[7] > 0f)
                {
                    if (bg)
                    {
                        if (Game1.waterStyle < 7)
                        {
                            this.DrawWater(bg, 7, Game1.liquidAlpha[7]);
                        }
                        else
                        {
                            this.DrawWater(bg, 7, 1f);
                        }
                    }
                    else
                    {
                        this.DrawWater(bg, 7, Game1.liquidAlpha[7]);
                    }
                }
                if (Game1.liquidAlpha[8] > 0f)
                {
                    if (bg)
                    {
                        if (Game1.waterStyle < 8)
                        {
                            this.DrawWater(bg, 8, Game1.liquidAlpha[8]);
                        }
                        else
                        {
                            this.DrawWater(bg, 8, 1f);
                        }
                    }
                    else
                    {
                        this.DrawWater(bg, 8, Game1.liquidAlpha[8]);
                    }
                }
                if (Game1.liquidAlpha[9] > 0f)
                {
                    if (bg)
                    {
                        if (Game1.waterStyle < 9)
                        {
                            this.DrawWater(bg, 9, Game1.liquidAlpha[9]);
                        }
                        else
                        {
                            this.DrawWater(bg, 9, 1f);
                        }
                    }
                    else
                    {
                        this.DrawWater(bg, 9, Game1.liquidAlpha[9]);
                    }
                }
                if (Game1.liquidAlpha[10] > 0f)
                {
                    if (bg)
                    {
                        if (Game1.waterStyle < 10)
                        {
                            this.DrawWater(bg, 10, Game1.liquidAlpha[10]);
                            return;
                        }
                        this.DrawWater(bg, 10, 1f);
                        return;
                    }
                    else
                    {
                        this.DrawWater(bg, 10, Game1.liquidAlpha[10]);
                    }
                }
                return;
            }
        }


        protected void DrawWater(bool bg = false, int Style = 0, float Alpha = 1f)
        {
            if (Game1.drawToScreen)
            {
                this.oldDrawWater(bg, Style, Alpha);
                return;
            }
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            Vector2 drawOffset = (Game1.drawToScreen ? Vector2.Zero : new Vector2((float)Game1.offScreenRange, (float)Game1.offScreenRange)) - Game1.screenPosition;
            LiquidRenderer.Instance.Draw(Game1.spriteBatch, drawOffset, Style, Alpha, bg);
            if (!bg)
            {
                TimeLogger.DrawTime(4, stopwatch.Elapsed.TotalMilliseconds);
            }
        }

        public void oldDrawWater(bool bg = false, int Style = 0, float Alpha = 1f)
        {
            float num = 0f;
            float num2 = 99999f;
            float num3 = 99999f;
            int num4 = -1;
            int num5 = -1;
            Vector2 zero = new Vector2((float)Game1.offScreenRange, (float)Game1.offScreenRange);
            if (Game1.drawToScreen)
            {
                zero = Vector2.Zero;
            }
            int num6 = (int)(255f * (1f - Game1.gfxQuality) + 40f * Game1.gfxQuality);
            float arg_5D_0 = Game1.gfxQuality;
            float arg_63_0 = Game1.gfxQuality;
            int num7 = (int)((Game1.screenPosition.X - zero.X) / 16f - 1f);
            int num8 = (int)((Game1.screenPosition.X + (float)Game1.screenWidth + zero.X) / 16f) + 2;
            int num9 = (int)((Game1.screenPosition.Y - zero.Y) / 16f - 1f);
            int num10 = (int)((Game1.screenPosition.Y + (float)Game1.screenHeight + zero.Y) / 16f) + 5;
            if (num7 < 5)
            {
                num7 = 5;
            }
            if (num8 > Game1.maxTilesX - 5)
            {
                num8 = Game1.maxTilesX - 5;
            }
            if (num9 < 5)
            {
                num9 = 5;
            }
            if (num10 > Game1.maxTilesY - 5)
            {
                num10 = Game1.maxTilesY - 5;
            }
            for (int i = num9; i < num10 + 4; i++)
            {
                for (int j = num7 - 2; j < num8 + 2; j++)
                {
                    if (Game1.tile[j, i] == null)
                    {
                        Game1.tile[j, i] = new Tile();
                    }
                    if (Game1.tile[j, i].liquid > 0 && (!Game1.tile[j, i].nactive() || !Game1.tileSolid[(int)Game1.tile[j, i].type] || Game1.tileSolidTop[(int)Game1.tile[j, i].type]) && (Lighting.Brightness(j, i) > 0f || bg))
                    {
                        Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
                        float num11 = (float)(256 - (int)Game1.tile[j, i].liquid);
                        num11 /= 32f;
                        int num12 = 0;
                        if (Game1.tile[j, i].lava())
                        {
                            if (Game1.drewLava)
                            {
                                goto IL_E80;
                            }
                            float num13 = Math.Abs((float)(j * 16 + 8) - (Game1.screenPosition.X + (float)(Game1.screenWidth / 2)));
                            float num14 = Math.Abs((float)(i * 16 + 8) - (Game1.screenPosition.Y + (float)(Game1.screenHeight / 2)));
                            if (num13 < (float)(Game1.screenWidth * 2) && num14 < (float)(Game1.screenHeight * 2))
                            {
                                float num15 = (float)Math.Sqrt((double)(num13 * num13 + num14 * num14));
                                float num16 = 1f - num15 / ((float)Game1.screenWidth * 0.75f);
                                if (num16 > 0f)
                                {
                                    num += num16;
                                }
                            }
                            if (num13 < num2)
                            {
                                num2 = num13;
                                num4 = j * 16 + 8;
                            }
                            if (num14 < num3)
                            {
                                num3 = num13;
                                num5 = i * 16 + 8;
                            }
                            num12 = 1;
                        }
                        else if (Game1.tile[j, i].honey())
                        {
                            num12 = 11;
                        }
                        if (num12 == 0)
                        {
                            num12 = Style;
                        }
                        if ((num12 != 1 && num12 != 11) || !Game1.drewLava)
                        {
                            float num17 = 0.5f;
                            if (bg)
                            {
                                num17 = 1f;
                            }
                            if (num12 != 1 && num12 != 11)
                            {
                                num17 *= Alpha;
                            }
                            Vector2 value = new Vector2((float)(j * 16), (float)(i * 16 + (int)num11 * 2));
                            Microsoft.Xna.Framework.Rectangle value2 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16 - (int)num11 * 2);
                            if (Game1.tile[j, i + 1].liquid < 245 && (!Game1.tile[j, i + 1].nactive() || !Game1.tileSolid[(int)Game1.tile[j, i + 1].type] || Game1.tileSolidTop[(int)Game1.tile[j, i + 1].type]))
                            {
                                float num18 = (float)(256 - (int)Game1.tile[j, i + 1].liquid);
                                num18 /= 32f;
                                num17 = 0.5f * (8f - num11) / 4f;
                                if ((double)num17 > 0.55)
                                {
                                    num17 = 0.55f;
                                }
                                if ((double)num17 < 0.35)
                                {
                                    num17 = 0.35f;
                                }
                                float num19 = num11 / 2f;
                                if (Game1.tile[j, i + 1].liquid < 200)
                                {
                                    if (bg)
                                    {
                                        goto IL_E80;
                                    }
                                    if (Game1.tile[j, i - 1].liquid > 0 && Game1.tile[j, i - 1].liquid > 0)
                                    {
                                        value2 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16);
                                        num17 = 0.5f;
                                    }
                                    else if (Game1.tile[j, i - 1].liquid > 0)
                                    {
                                        value = new Vector2((float)(j * 16), (float)(i * 16 + 4));
                                        value2 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 12);
                                        num17 = 0.5f;
                                    }
                                    else if (Game1.tile[j, i + 1].liquid > 0)
                                    {
                                        value = new Vector2((float)(j * 16), (float)(i * 16 + (int)num11 * 2 + (int)num18 * 2));
                                        value2 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16 - (int)num11 * 2);
                                    }
                                    else
                                    {
                                        value = new Vector2((float)(j * 16 + (int)num19), (float)(i * 16 + (int)num19 * 2 + (int)num18 * 2));
                                        value2 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16 - (int)num19 * 2, 16 - (int)num19 * 2);
                                    }
                                }
                                else
                                {
                                    num17 = 0.5f;
                                    value2 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16 - (int)num11 * 2 + (int)num18 * 2);
                                }
                            }
                            else if (Game1.tile[j, i - 1].liquid > 32)
                            {
                                value2 = new Microsoft.Xna.Framework.Rectangle(0, 4, value2.Width, value2.Height);
                            }
                            else if (num11 < 1f && Game1.tile[j, i - 1].nactive() && Game1.tileSolid[(int)Game1.tile[j, i - 1].type] && !Game1.tileSolidTop[(int)Game1.tile[j, i - 1].type])
                            {
                                value = new Vector2((float)(j * 16), (float)(i * 16));
                                value2 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16);
                            }
                            else
                            {
                                bool flag = true;
                                int num20 = i + 1;
                                while (num20 < i + 6 && (!Game1.tile[j, num20].nactive() || !Game1.tileSolid[(int)Game1.tile[j, num20].type] || Game1.tileSolidTop[(int)Game1.tile[j, num20].type]))
                                {
                                    if (Game1.tile[j, num20].liquid < 200)
                                    {
                                        flag = false;
                                        break;
                                    }
                                    num20++;
                                }
                                if (!flag)
                                {
                                    num17 = 0.5f;
                                    value2 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16);
                                }
                                else if (Game1.tile[j, i - 1].liquid > 0)
                                {
                                    value2 = new Microsoft.Xna.Framework.Rectangle(0, 2, value2.Width, value2.Height);
                                }
                            }
                            if ((color.R > 20 || color.B > 20 || color.G > 20) && value2.Y < 4)
                            {
                                int num21 = (int)color.R;
                                if ((int)color.G > num21)
                                {
                                    num21 = (int)color.G;
                                }
                                if ((int)color.B > num21)
                                {
                                    num21 = (int)color.B;
                                }
                                num21 /= 30;
                                if (Game1.rand.Next(20000) < num21)
                                {
                                    Microsoft.Xna.Framework.Color newColor = new Microsoft.Xna.Framework.Color(255, 255, 255);
                                    if (Game1.tile[j, i].honey())
                                    {
                                        newColor = new Microsoft.Xna.Framework.Color(255, 255, 50);
                                    }
                                    int num22 = Dust.NewDust(new Vector2((float)(j * 16), value.Y - 2f), 16, 8, 43, 0f, 0f, 254, newColor, 0.75f);
                                    Game1.dust[num22].velocity *= 0f;
                                }
                            }
                            if (Game1.tile[j, i].honey())
                            {
                                num17 *= 1.6f;
                                if (num17 > 1f)
                                {
                                    num17 = 1f;
                                }
                            }
                            if (Game1.tile[j, i].lava())
                            {
                                num17 *= 1.8f;
                                if (num17 > 1f)
                                {
                                    num17 = 1f;
                                }
                                if (base.IsActive && !Game1.gamePaused && Dust.lavaBubbles < 200)
                                {
                                    if (Game1.tile[j, i].liquid > 200 && Game1.rand.Next(700) == 0)
                                    {
                                        Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 35, 0f, 0f, 0, default(Microsoft.Xna.Framework.Color), 1f);
                                    }
                                    if (value2.Y == 0 && Game1.rand.Next(350) == 0)
                                    {
                                        int num23 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16) + num11 * 2f - 8f), 16, 8, 35, 0f, 0f, 50, default(Microsoft.Xna.Framework.Color), 1.5f);
                                        Game1.dust[num23].velocity *= 0.8f;
                                        Dust expr_9CA_cp_0 = Game1.dust[num23];
                                        expr_9CA_cp_0.velocity.X = expr_9CA_cp_0.velocity.X * 2f;
                                        Dust expr_9E8_cp_0 = Game1.dust[num23];
                                        expr_9E8_cp_0.velocity.Y = expr_9E8_cp_0.velocity.Y - (float)Game1.rand.Next(1, 7) * 0.1f;
                                        if (Game1.rand.Next(10) == 0)
                                        {
                                            Dust expr_A22_cp_0 = Game1.dust[num23];
                                            expr_A22_cp_0.velocity.Y = expr_A22_cp_0.velocity.Y * (float)Game1.rand.Next(2, 5);
                                        }
                                        Game1.dust[num23].noGravity = true;
                                    }
                                }
                            }
                            float num24 = (float)color.R * num17;
                            float num25 = (float)color.G * num17;
                            float num26 = (float)color.B * num17;
                            float num27 = (float)color.A * num17;
                            color = new Microsoft.Xna.Framework.Color((int)((byte)num24), (int)((byte)num25), (int)((byte)num26), (int)((byte)num27));
                            if (Lighting.lightMode < 2 && !bg)
                            {
                                Microsoft.Xna.Framework.Color color2 = color;
                                if (num12 != 1 && ((double)color2.R > (double)num6 * 0.6 || (double)color2.G > (double)num6 * 0.65 || (double)color2.B > (double)num6 * 0.7))
                                {
                                    for (int k = 0; k < 4; k++)
                                    {
                                        int num28 = 0;
                                        int num29 = 0;
                                        int width = 8;
                                        int height = 8;
                                        Microsoft.Xna.Framework.Color color3 = color2;
                                        Microsoft.Xna.Framework.Color color4 = Lighting.GetColor(j, i);
                                        if (k == 0)
                                        {
                                            color4 = Lighting.GetColor(j - 1, i - 1);
                                            if (value2.Height < 8)
                                            {
                                                height = value2.Height;
                                            }
                                        }
                                        if (k == 1)
                                        {
                                            color4 = Lighting.GetColor(j + 1, i - 1);
                                            num28 = 8;
                                            if (value2.Height < 8)
                                            {
                                                height = value2.Height;
                                            }
                                        }
                                        if (k == 2)
                                        {
                                            color4 = Lighting.GetColor(j - 1, i + 1);
                                            num29 = 8;
                                            height = 8 - (16 - value2.Height);
                                        }
                                        if (k == 3)
                                        {
                                            color4 = Lighting.GetColor(j + 1, i + 1);
                                            num28 = 8;
                                            num29 = 8;
                                            height = 8 - (16 - value2.Height);
                                        }
                                        num24 = (float)color4.R * num17;
                                        num25 = (float)color4.G * num17;
                                        num26 = (float)color4.B * num17;
                                        num27 = (float)color4.A * num17;
                                        color4 = new Microsoft.Xna.Framework.Color((int)((byte)num24), (int)((byte)num25), (int)((byte)num26), (int)((byte)num27));
                                        color3.R = (byte)((color2.R * 3 + color4.R * 2) / 5);
                                        color3.G = (byte)((color2.G * 3 + color4.G * 2) / 5);
                                        color3.B = (byte)((color2.B * 3 + color4.B * 2) / 5);
                                        color3.A = (byte)((color2.A * 3 + color4.A * 2) / 5);
                                        Game1.spriteBatch.Draw(Game1.liquidTexture[num12], value - Game1.screenPosition + new Vector2((float)num28, (float)num29) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(value2.X + num28, value2.Y + num29, width, height)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                    }
                                }
                                else
                                {
                                    Game1.spriteBatch.Draw(Game1.liquidTexture[num12], value - Game1.screenPosition + zero, new Microsoft.Xna.Framework.Rectangle?(value2), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                }
                            }
                            else
                            {
                                if (value2.Y < 4)
                                {
                                    value2.X += (int)(Game1.wFrame * 18f);
                                }
                                Game1.spriteBatch.Draw(Game1.liquidTexture[num12], value - Game1.screenPosition + zero, new Microsoft.Xna.Framework.Rectangle?(value2), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            }
                            if (Game1.tile[j, i + 1].halfBrick())
                            {
                                color = Lighting.GetColor(j, i + 1);
                                num24 = (float)color.R * num17;
                                num25 = (float)color.G * num17;
                                num26 = (float)color.B * num17;
                                num27 = (float)color.A * num17;
                                color = new Microsoft.Xna.Framework.Color((int)((byte)num24), (int)((byte)num25), (int)((byte)num26), (int)((byte)num27));
                                value = new Vector2((float)(j * 16), (float)(i * 16 + 16));
                                Game1.spriteBatch.Draw(Game1.liquidTexture[num12], value - Game1.screenPosition + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 8)), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            }
                        }
                    }
                IL_E80:;
                }
            }
            if (!Game1.drewLava)
            {
                Game1.ambientLavaX = (float)num4;
                Game1.ambientLavaY = (float)num5;
                Game1.ambientLavaStrength = num;
            }
            Game1.drewLava = true;
        }


        protected bool FullTile(int x, int y)
        {
            if (Game1.tile[x - 1, y] == null || Game1.tile[x - 1, y].blockType() != 0 || Game1.tile[x + 1, y] == null || Game1.tile[x + 1, y].blockType() != 0)
            {
                return false;
            }
            Tile tile = Game1.tile[x, y];
            if (tile == null)
            {
                return false;
            }
            if (tile.active())
            {
                ushort type = tile.type;
                if (type <= 138)
                {
                    if (type <= 48)
                    {
                        if (type != 10 && type != 48)
                        {
                            goto IL_E6;
                        }
                    }
                    else if (type != 54)
                    {
                        switch (type)
                        {
                            case 137:
                            case 138:
                                break;
                            default:
                                goto IL_E6;
                        }
                    }
                }
                else if (type <= 191)
                {
                    if (type != 162 && type != 191)
                    {
                        goto IL_E6;
                    }
                }
                else if (type != 232 && type != 328)
                {
                    switch (type)
                    {
                        case 387:
                        case 388:
                            break;
                        default:
                            goto IL_E6;
                    }
                }
                return false;
            IL_E6:
                if (Game1.tileSolid[(int)tile.type] && !Game1.tileSolidTop[(int)tile.type])
                {
                    int frameX = (int)tile.frameX;
                    int frameY = (int)tile.frameY;
                    if (Game1.tileLargeFrames[(int)tile.type] == 1)
                    {
                        if (frameY == 18 || frameY == 108)
                        {
                            if (frameX >= 18 && frameX <= 54)
                            {
                                return true;
                            }
                            if (frameX >= 108 && frameX <= 144)
                            {
                                return true;
                            }
                        }
                    }
                    else if (frameY == 18)
                    {
                        if (frameX >= 18 && frameX <= 54)
                        {
                            return true;
                        }
                        if (frameX >= 108 && frameX <= 144)
                        {
                            return true;
                        }
                    }
                    else if (frameY >= 90 && frameY <= 196)
                    {
                        if (frameX <= 70)
                        {
                            return true;
                        }
                        if (frameX >= 144 && frameX <= 232)
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        protected void DrawBlack(bool force = false)
        {
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            Vector2 value = Game1.drawToScreen ? Vector2.Zero : new Vector2((float)Game1.offScreenRange, (float)Game1.offScreenRange);
            int num = (int)((Game1.tileColor.R + Game1.tileColor.G + Game1.tileColor.B) / 3);
            float num2 = (float)((double)num * 0.4) / 255f;
            if (Lighting.lightMode == 2)
            {
                num2 = (float)(Game1.tileColor.R - 55) / 255f;
                if (num2 < 0f)
                {
                    num2 = 0f;
                }
            }
            else if (Lighting.lightMode == 3)
            {
                num2 = (float)(num - 55) / 255f;
                if (num2 < 0f)
                {
                    num2 = 0f;
                }
            }
            int num3 = Game1.offScreenRange / 16;
            int num4 = (int)((Game1.screenPosition.X - value.X) / 16f - 1f) - num3;
            int num5 = (int)((Game1.screenPosition.X + (float)Game1.screenWidth + value.X) / 16f) + 2 + num3;
            int num6 = (int)((Game1.screenPosition.Y - value.Y) / 16f - 1f) - num3;
            int num7 = (int)((Game1.screenPosition.Y + (float)Game1.screenHeight + value.Y) / 16f) + 5 + num3;
            if (num4 < 0)
            {
                num4 = num3;
            }
            if (num5 > Game1.maxTilesX)
            {
                num5 = Game1.maxTilesX - num3;
            }
            if (num6 < 0)
            {
                num6 = num3;
            }
            if (num7 > Game1.maxTilesY)
            {
                num7 = Game1.maxTilesY - num3;
            }
            if (!force)
            {
                if (num6 < Game1.maxTilesY / 2)
                {
                    num7 = Math.Min(num7, (int)Game1.worldSurface + 1);
                    num6 = Math.Min(num6, (int)Game1.worldSurface + 1);
                }
                else
                {
                    num7 = Math.Max(num7, Game1.maxTilesY - 200);
                    num6 = Math.Max(num6, Game1.maxTilesY - 200);
                }
            }
            for (int i = num6; i < num7; i++)
            {
                bool flag = i >= Game1.maxTilesY - 200;
                if (flag)
                {
                    num2 = 0.2f;
                }
                for (int j = num4; j < num5; j++)
                {
                    int num8 = j;
                    while (j < num5)
                    {
                        if (Game1.tile[j, i] == null)
                        {
                            Game1.tile[j, i] = new Tile();
                        }
                        Tile tile = Game1.tile[j, i];
                        Lighting.GetColor(j, i);
                        float num9 = Lighting.Brightness(j, i);
                        num9 = (float)Math.Floor((double)(num9 * 255f)) / 255f;
                        byte b = tile.liquid;
                        bool flag2 = num9 <= num2 && ((!flag && b < 250) || WorldGen.SolidTile(tile) || (b >= 250 && num9 == 0f));
                        flag2 = (flag2 && (!WallID.Sets.Transparent[(int)tile.wall] || (Game1.tile[j, i].active() && Game1.tileBlockLight[(int)tile.type])));
                        flag2 = (flag2 && (Game1.drawToScreen || !LiquidRenderer.Instance.HasFullWater(j, i) || tile.wall != 0 || tile.halfBrick()));
                        if (!flag2)
                        {
                            break;
                        }
                        j++;
                    }
                    if (j - num8 > 0)
                    {
                        Game1.spriteBatch.Draw(Game1.blackTileTexture, new Vector2((float)(num8 << 4), (float)(i << 4)) - Game1.screenPosition + value, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, j - num8 << 4, 16)), Microsoft.Xna.Framework.Color.Black);
                    }
                }
            }
            TimeLogger.DrawTime(5, stopwatch.Elapsed.TotalMilliseconds);
        }
        protected void RenderBlack()
        {
            if (Game1.drawToScreen)
            {
                return;
            }
            base.GraphicsDevice.SetRenderTarget(this.blackTarget);
            base.GraphicsDevice.DepthStencilState = new DepthStencilState
            {
                DepthBufferEnable = true
            };
            base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
            Game1.spriteBatch.Begin();
            this.DrawBlack(false);
            TimeLogger.DetailedDrawReset();
            Game1.spriteBatch.End();
            TimeLogger.DetailedDrawTime(30);
            base.GraphicsDevice.SetRenderTarget(null);
        }
        protected void DrawWalls()
        {
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            float arg_11_0 = Game1.gfxQuality;
            float arg_17_0 = Game1.gfxQuality;
            int num = (int)(120f * (1f - Game1.gfxQuality) + 40f * Game1.gfxQuality);
            Vector2 zero = new Vector2((float)Game1.offScreenRange, (float)Game1.offScreenRange);
            if (Game1.drawToScreen)
            {
                zero = Vector2.Zero;
            }
            int num2 = (int)((Game1.tileColor.R + Game1.tileColor.G + Game1.tileColor.B) / 3);
            float arg_8D_0 = (float)((double)num2 * 0.53) / 255f;
            if (Lighting.lightMode == 2)
            {
                float arg_A1_0 = (float)(num2 - 12) / 255f;
            }
            if (Lighting.lightMode == 3)
            {
                float arg_B5_0 = (float)(num2 - 12) / 255f;
            }
            int num3 = (int)((Game1.screenPosition.X - zero.X) / 16f - 1f);
            int num4 = (int)((Game1.screenPosition.X + (float)Game1.screenWidth + zero.X) / 16f) + 2;
            int num5 = (int)((Game1.screenPosition.Y - zero.Y) / 16f - 1f);
            int num6 = (int)((Game1.screenPosition.Y + (float)Game1.screenHeight + zero.Y) / 16f) + 5;
            int num7 = Game1.offScreenRange / 16;
            int num8 = Game1.offScreenRange / 16;
            if (num3 - num7 < 0)
            {
                num3 = num7;
            }
            if (num4 + num7 > Game1.maxTilesX)
            {
                num4 = Game1.maxTilesX - num7;
            }
            if (num5 - num8 < 0)
            {
                num5 = num8;
            }
            if (num6 + num8 > Game1.maxTilesY)
            {
                num6 = Game1.maxTilesY - num8;
            }
            for (int i = num5 - num8; i < num6 + num8; i++)
            {
                for (int j = num3 - num7; j < num4 + num7; j++)
                {
                    Tile tile = Game1.tile[j, i];
                    if (tile == null)
                    {
                        tile = new Tile();
                        Game1.tile[j, i] = tile;
                    }
                    byte wall = tile.wall;
                    if (tile.wall > 0 && !this.FullTile(j, i))
                    {
                        this.LoadWall((int)tile.wall);
                        Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
                        int num9 = (int)(Game1.wallFrame[(int)wall] * 180);
                        if (Lighting.lightMode < 2 && !Game1.wallLight[(int)tile.wall] && (tile.wall < 88 || tile.wall > 93) && !WorldGen.SolidTile(tile))
                        {
                            Texture2D texture;
                            if (Game1.canDrawColorWall(j, i))
                            {
                                texture = Game1.wallAltTexture[(int)tile.wall, (int)tile.wallColor()];
                            }
                            else
                            {
                                texture = Game1.wallTexture[(int)tile.wall];
                            }
                            VertexColors colors;
                            if (tile.wall == 44)
                            {
                                Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color((int)((byte)Game1.DiscoR), (int)((byte)Game1.DiscoG), (int)((byte)Game1.DiscoB));
                                colors.BottomLeftColor = color2;
                                colors.BottomRightColor = color2;
                                colors.TopLeftColor = color2;
                                colors.TopRightColor = color2;
                            }
                            else
                            {
                                Lighting.GetColor4Slice_New(j, i, out colors, 1f);
                            }
                            Game1.tileBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X - 8), (float)(i * 16 - (int)Game1.screenPosition.Y - 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(tile.wallFrameX(), tile.wallFrameY() + num9, 32, 32)), colors, Vector2.Zero, 1f, SpriteEffects.None);
                        }
                        else if (tile.wall == 44)
                        {
                            Microsoft.Xna.Framework.Color color3 = default(Microsoft.Xna.Framework.Color);
                            color3.R = (byte)Game1.DiscoR;
                            color3.G = (byte)Game1.DiscoG;
                            color3.B = (byte)Game1.DiscoB;
                            color3.A = 255;
                            Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(tile.wallFrameX(), tile.wallFrameY() + num9, 32, 32);
                            Game1.spriteBatch.Draw(Game1.wallTexture[(int)tile.wall], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X - 8), (float)(i * 16 - (int)Game1.screenPosition.Y - 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(value), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                        }
                        else
                        {
                            Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(tile.wallFrameX(), tile.wallFrameY() + num9, 32, 32);
                            if (Game1.canDrawColorWall(j, i))
                            {
                                Game1.spriteBatch.Draw(Game1.wallAltTexture[(int)tile.wall, (int)tile.wallColor()], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X - 8), (float)(i * 16 - (int)Game1.screenPosition.Y - 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(value), Lighting.GetColor(j, i), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            }
                            else
                            {
                                Game1.spriteBatch.Draw(Game1.wallTexture[(int)tile.wall], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X - 8), (float)(i * 16 - (int)Game1.screenPosition.Y - 8)) + zero, new Microsoft.Xna.Framework.Rectangle?(value), Lighting.GetColor(j, i), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            }
                        }
                        if ((double)color.R > (double)num * 0.4 || (double)color.G > (double)num * 0.35 || (double)color.B > (double)num * 0.3)
                        {
                            bool flag = false;
                            if (Game1.tile[j - 1, i].wall > 0 && Game1.wallBlend[(int)Game1.tile[j - 1, i].wall] != Game1.wallBlend[(int)tile.wall])
                            {
                                flag = true;
                            }
                            bool flag2 = false;
                            if (Game1.tile[j + 1, i].wall > 0 && Game1.wallBlend[(int)Game1.tile[j + 1, i].wall] != Game1.wallBlend[(int)tile.wall])
                            {
                                flag2 = true;
                            }
                            bool flag3 = false;
                            if (Game1.tile[j, i - 1].wall > 0 && Game1.wallBlend[(int)Game1.tile[j, i - 1].wall] != Game1.wallBlend[(int)tile.wall])
                            {
                                flag3 = true;
                            }
                            bool flag4 = false;
                            if (Game1.tile[j, i + 1].wall > 0 && Game1.wallBlend[(int)Game1.tile[j, i + 1].wall] != Game1.wallBlend[(int)tile.wall])
                            {
                                flag4 = true;
                            }
                            if (flag)
                            {
                                Game1.spriteBatch.Draw(Game1.wallOutlineTexture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X), (float)(i * 16 - (int)Game1.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 2, 16)), Lighting.GetColor(j, i), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            }
                            if (flag2)
                            {
                                Game1.spriteBatch.Draw(Game1.wallOutlineTexture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X + 14), (float)(i * 16 - (int)Game1.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(14, 0, 2, 16)), Lighting.GetColor(j, i), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            }
                            if (flag3)
                            {
                                Game1.spriteBatch.Draw(Game1.wallOutlineTexture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X), (float)(i * 16 - (int)Game1.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 2)), Lighting.GetColor(j, i), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            }
                            if (flag4)
                            {
                                Game1.spriteBatch.Draw(Game1.wallOutlineTexture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X), (float)(i * 16 - (int)Game1.screenPosition.Y + 14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 14, 16, 2)), Lighting.GetColor(j, i), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            }
                        }
                    }
                }
            }
            this.DrawTileCracks(2);
            TimeLogger.DrawTime(2, stopwatch.Elapsed.TotalMilliseconds);
        }
        protected void RenderWalls()
        {
            if (Game1.drawToScreen)
            {
                return;
            }
            base.GraphicsDevice.SetRenderTarget(this.wallTarget);
            base.GraphicsDevice.DepthStencilState = new DepthStencilState
            {
                DepthBufferEnable = true
            };
            base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
            Game1.spriteBatch.Begin();
            Game1.tileBatch.Begin();
            if (Game1.ignoreErrors)
            {
                try
                {
                    this.DrawWalls();
                    goto IL_74;
                }
                catch (Exception e)
                {
                    TimeLogger.DrawException(e);
                    goto IL_74;
                }
            }
            this.DrawWalls();
        IL_74:
            TimeLogger.DetailedDrawReset();
            Game1.tileBatch.End();
            Game1.spriteBatch.End();
            TimeLogger.DetailedDrawTime(32);
            base.GraphicsDevice.SetRenderTarget(null);
        }
        protected void ReleaseTargets()
        {
            try
            {
                if (!Game1.dedServ)
                {
                    Game1.offScreenRange = 0;
                    Game1.targetSet = false;
                    if (this.waterTarget != null)
                    {
                        this.waterTarget.Dispose();
                    }
                    if (this.backWaterTarget != null)
                    {
                        this.backWaterTarget.Dispose();
                    }
                    if (this.blackTarget != null)
                    {
                        this.blackTarget.Dispose();
                    }
                    if (this.tileTarget != null)
                    {
                        this.tileTarget.Dispose();
                    }
                    if (this.tile2Target != null)
                    {
                        this.tile2Target.Dispose();
                    }
                    if (this.wallTarget != null)
                    {
                        this.wallTarget.Dispose();
                    }
                    if (this.screenTarget != null)
                    {
                        this.screenTarget.Dispose();
                    }
                    if (this.backgroundTarget != null)
                    {
                        this.backgroundTarget.Dispose();
                    }
                }
            }
            catch
            {
            }
        }
        protected bool checkMap(int i, int j)
        {
            if (!Game1.initMap[i, j])
            {
                try
                {
                    int width = Game1.textureMaxWidth;
                    int height = Game1.textureMaxHeight;
                    if (i == Game1.mapTargetX - 1)
                    {
                        width = 400;
                    }
                    if (j == Game1.mapTargetY - 1)
                    {
                        height = 600;
                    }
                    this.mapTarget[i, j] = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth16, 0, RenderTargetUsage.PreserveContents);
                }
                catch
                {
                    Game1.mapEnabled = false;
                    for (int k = 0; k < Game1.mapTargetX; k++)
                    {
                        for (int l = 0; l < Game1.mapTargetY; l++)
                        {
                            try
                            {
                                Game1.initMap[k, l] = false;
                                this.mapTarget[k, l].Dispose();
                            }
                            catch
                            {
                            }
                        }
                    }
                    return false;
                }
                Game1.initMap[i, j] = true;
                return true;
            }
            return true;
        }
        protected void InitMap()
        {
            int num = Game1.mapTargetX;
            int num2 = Game1.mapTargetY;
            if (Game1.mapEnabled)
            {
                try
                {
                    for (int i = 0; i < num; i++)
                    {
                        for (int j = 0; j < num2; j++)
                        {
                            this.mapTarget[i, j] = new RenderTarget2D(base.GraphicsDevice, Game1.textureMaxWidth, Game1.textureMaxHeight, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
                        }
                    }
                    Game1.mapInit = true;
                }
                catch
                {
                    Game1.mapEnabled = false;
                    for (int k = 0; k < num; k++)
                    {
                        for (int l = 0; l < num2; l++)
                        {
                            try
                            {
                                if (this.mapTarget[k, l] != null)
                                {
                                    this.mapTarget[k, l].Dispose();
                                }
                            }
                            catch
                            {
                            }
                        }
                    }
                }
            }
        }
        protected void InitTargets()
        {
            this.UpdateDisplaySettings();
            this.InitTargets(base.GraphicsDevice.PresentationParameters.BackBufferWidth, base.GraphicsDevice.PresentationParameters.BackBufferHeight);
        }
        protected void EnsureRenderTargetContent()
        {
            if (this.waterTarget == null || this.waterTarget.IsContentLost || this.backWaterTarget == null || this.backWaterTarget.IsContentLost || this.blackTarget == null || this.blackTarget.IsContentLost || this.tileTarget == null || this.tileTarget.IsContentLost || this.tile2Target == null || this.tile2Target.IsContentLost || this.wallTarget == null || this.wallTarget.IsContentLost || this.backgroundTarget == null || this.backgroundTarget.IsContentLost || this.screenTarget == null || this.screenTarget.IsContentLost)
            {
                this.InitTargets();
            }
        }
        protected void InitTargets(int width, int height)
        {
            this.ReleaseTargets();
            Game1.offScreenRange = 192;
            if (width + Game1.offScreenRange * 2 > 2048)
            {
                Game1.offScreenRange = (2048 - width) / 2;
            }
            width += Game1.offScreenRange * 2;
            height += Game1.offScreenRange * 2;
            try
            {
                if (!Game1.dedServ)
                {
                    Game1.targetSet = true;
                    this.waterTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
                    this.backWaterTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
                    this.blackTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
                    this.tileTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
                    this.tile2Target = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
                    this.wallTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
                    this.backgroundTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
                    this.screenTarget = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth, base.GraphicsDevice.PresentationParameters.BackBufferHeight, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
                }
            }
            catch
            {
                Lighting.lightMode = 2;
                Game1.mapEnabled = false;
                Game1.SaveSettings();
                try
                {
                    this.ReleaseTargets();
                }
                catch
                {
                }
            }
        }
        protected void DrawWires()
        {
            float arg_05_0 = Game1.gfxQuality;
            float arg_0B_0 = Game1.gfxQuality;
            Vector2 zero = new Vector2((float)Game1.offScreenRange, (float)Game1.offScreenRange);
            if (Game1.drawToScreen)
            {
                zero = Vector2.Zero;
            }
            int num = (int)((Game1.screenPosition.X - zero.X) / 16f - 1f);
            int num2 = (int)((Game1.screenPosition.X + (float)Game1.screenWidth + zero.X) / 16f) + 2;
            int num3 = (int)((Game1.screenPosition.Y - zero.Y) / 16f - 1f);
            int num4 = (int)((Game1.screenPosition.Y + (float)Game1.screenHeight + zero.Y) / 16f) + 5;
            if (num < 0)
            {
                num = 0;
            }
            if (num2 > Game1.maxTilesX)
            {
                num2 = Game1.maxTilesX;
            }
            if (num3 < 0)
            {
                num3 = 0;
            }
            if (num4 > Game1.maxTilesY)
            {
                num4 = Game1.maxTilesY;
            }
            for (int i = num3; i < num4; i++)
            {
                for (int j = num; j < num2; j++)
                {
                    if (Lighting.Brightness(j, i) > 0f)
                    {
                        var tile = Game1.tile[j, i];
                        if (tile.k_HasWireFlagsAny(k_WireFlags.WIRE_RGB))
                        {
                            int[][] directions = new int[][] { new int[] { 0, -1 }, new int[] { 0, 1 }, new int[] { -1, 0 }, new int[] { 1, 0 } };
                            int[] connections = new int[3];

                            bool[] hasWire = new bool[3];
                            hasWire[0] = tile.k_HasWireFlags(k_WireFlags.WIRE_RED);
                            hasWire[1] = tile.k_HasWireFlags(k_WireFlags.WIRE_GREEN);
                            hasWire[2] = tile.k_HasWireFlags(k_WireFlags.WIRE_BLUE);

                            for (int k = 0; k < 4; ++k)
                            {
                                var ctile = Game1.tile[j + directions[k][0], i + directions[k][1]];
                                if (ctile.k_HasWireFlags(k_WireFlags.WIRE_RED))
                                    connections[0] += (1 << k);
                                if (ctile.k_HasWireFlags(k_WireFlags.WIRE_GREEN))
                                    connections[1] += (1 << k);
                                if (ctile.k_HasWireFlags(k_WireFlags.WIRE_BLUE))
                                    connections[2] += (1 << k);
                            }

                            var wireTex = new int[][] { new int[] { 0, 54 }, new int[] { 36, 36 }, new int[] { 18, 36 }, new int[] { 0, 0 }, new int[] { 54, 36 }, new int[] { 54, 18 }, new int[] { 72, 18 }, new int[] { 54, 0 }, new int[] { 72, 36 }, new int[] { 36, 18 }, new int[] { 0, 36 }, new int[] { 36, 0 }, new int[] { 18, 0 }, new int[] { 0, 18 }, new int[] { 72, 0 }, new int[] { 18, 18 } };
                            var wireTex2D = new Texture2D[] { Game1.wireTexture, Game1.wire2Texture, Game1.wire3Texture };

                            byte n = 0;
                            for (int k = 0; k < 3; ++k)
                            {
                                if (!hasWire[k])
                                    continue;
                                ++n;
                                int tex = connections[k];
                                var colour = Lighting.GetColor(j, i) * (1f / n);
                                var rect = new Microsoft.Xna.Framework.Rectangle(wireTex[tex][0], wireTex[tex][1], 16, 16);

                                Game1.spriteBatch.Draw(wireTex2D[k], new Vector2((float)(j * 16 - (int)Game1.screenPosition.X), (float)(i * 16 - (int)Game1.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(rect), colour, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                            }
                        }

                        if (tile.k_HasWireFlags(k_WireFlags.WIRE_ACTUATOR))
                        {
                            var colour = Lighting.GetColor(j, i);
                            Game1.spriteBatch.Draw(Game1.actuatorTexture, new Vector2((float)(j * 16 - (int)Game1.screenPosition.X), (float)(i * 16 - (int)Game1.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.actuatorTexture.Width, Game1.actuatorTexture.Height)), colour, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                        }
                    }
                }
            }
            TimeLogger.DetailedDrawTime(34);
        }
        public static int GetTreeStyle(int X)
        {
            int num;
            if (X <= Game1.treeX[0])
            {
                num = Game1.treeStyle[0];
            }
            else if (X <= Game1.treeX[1])
            {
                num = Game1.treeStyle[1];
            }
            else if (X <= Game1.treeX[2])
            {
                num = Game1.treeStyle[2];
            }
            else
            {
                num = Game1.treeStyle[3];
            }
            if (num == 0)
            {
                return 0;
            }
            if (num == 5)
            {
                return 10;
            }
            return 5 + num;
        }
        protected void lookForColorTiles()
        {
            int num = (int)(Game1.screenPosition.X / 16f - 2f);
            int num2 = (int)((Game1.screenPosition.X + (float)Game1.screenWidth) / 16f) + 3;
            int num3 = (int)(Game1.screenPosition.Y / 16f - 2f);
            int num4 = (int)((Game1.screenPosition.Y + (float)Game1.screenHeight) / 16f) + 3;
            if (num < 1)
            {
                num = 1;
            }
            if (num2 > Game1.maxTilesX - 2)
            {
                num2 = Game1.maxTilesX - 2;
            }
            if (num3 < 1)
            {
                num3 = 1;
            }
            if (num4 > Game1.maxTilesY - 2)
            {
                num4 = Game1.maxTilesY - 2;
            }
            for (int i = num; i < num2; i++)
            {
                if (i > 0)
                {
                    for (int j = num3; j < num4; j++)
                    {
                        if (Game1.tile[i, j] != null)
                        {
                            int treeVariant = Game1.GetTreeVariant(i, j);
                            if (treeVariant != -1)
                            {
                                this.woodColorCheck(treeVariant, (int)Game1.tile[i, j].color());
                            }
                            if (Game1.tile[i, j].active() && Game1.tile[i, j].color() > 0)
                            {
                                this.tileColorCheck((int)Game1.tile[i, j].type, (int)Game1.tile[i, j].color());
                            }
                            if (Game1.tile[i, j].wall > 0 && Game1.tile[i, j].wallColor() > 0)
                            {
                                this.wallColorCheck((int)Game1.tile[i, j].wall, (int)Game1.tile[i, j].wallColor());
                            }
                        }
                    }
                }
            }
            for (int k = 0; k < Game1.numTreeStyles; k++)
            {
                for (int l = 0; l < Game1.numTileColors; l++)
                {
                    if (Game1.checkTreeAlt[k, l])
                    {
                        this.treeColorCheck(k, l);
                        Game1.checkTreeAlt[k, l] = false;
                    }
                }
            }
        }
        protected static int GetTreeVariant(int x, int y)
        {
            if (Game1.tile[x, y] == null || !Game1.tile[x, y].active())
            {
                return -1;
            }
            int type = (int)Game1.tile[x, y].type;
            int num = type;
            if (num <= 70)
            {
                if (num == 23)
                {
                    return 0;
                }
                if (num != 60)
                {
                    if (num == 70)
                    {
                        return 6;
                    }
                }
                else
                {
                    if ((double)y <= Game1.worldSurface)
                    {
                        return 1;
                    }
                    return 5;
                }
            }
            else
            {
                if (num == 109)
                {
                    return 2;
                }
                if (num == 147)
                {
                    return 3;
                }
                if (num == 199)
                {
                    return 4;
                }
            }
            return -1;
        }
        protected void woodColorCheck(int t, int c)
        {
            this.LoadTiles(5);
            if (c >= Game1.numTileColors)
            {
                return;
            }
            bool flag = false;
            if (Game1.woodAltTexture[t, c] == null)
            {
                Game1.woodAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Game1.woodTexture[t].Width, Game1.woodTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
                flag = true;
            }
            if (Game1.woodAltTexture[t, c].IsContentLost)
            {
                flag = true;
            }
            if (flag)
            {
                base.GraphicsDevice.SetRenderTarget(Game1.woodAltTexture[t, c]);
                base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
                Game1.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
                if (c >= 28)
                {
                    int index = 40 + c - 28;
                    //Game1.tileShader.CurrentTechnique.Passes[index].Apply();
                }
                else if (c > 0 && c < 13)
                {
                    int index2 = c + 27;
                    //Game1.tileShader.CurrentTechnique.Passes[index2].Apply();
                }
                else
                {
                    //Game1.tileShader.CurrentTechnique.Passes[c].Apply();
                }
                Game1.spriteBatch.Draw(Game1.woodTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.woodTexture[t].Width, Game1.woodTexture[t].Height), Microsoft.Xna.Framework.Color.White);
                Game1.spriteBatch.End();
                base.GraphicsDevice.SetRenderTarget(null);
            }
        }
        protected void tileColorCheck(int t, int c)
        {
            this.LoadTiles(t);
            if (c >= Game1.numTileColors)
            {
                return;
            }
            if (!Game1.tileAltTextureInit[t, c])
            {
                Game1.tileAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Game1.tileTexture[t].Width, Game1.tileTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
                Game1.tileAltTextureInit[t, c] = true;
            }
            if (Game1.tileAltTexture[t, c].IsContentLost)
            {
                Game1.tileAltTextureDrawn[t, c] = false;
            }
            if (!Game1.tileAltTextureDrawn[t, c])
            {
                base.GraphicsDevice.SetRenderTarget(Game1.tileAltTexture[t, c]);
                base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
                Game1.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
                if (c >= 28)
                {
                    int index = 40 + c - 28;
                    //Game1.tileShader.CurrentTechnique.Passes[index].Apply();
                }
                else if (c > 0 && c < 13 && (t == 0 || t == 2 || t == 5 || t == 23 || t == 59 || t == 60 || t == 70 || t == 109 || t == 199))
                {
                    int index2 = c + 27;
                    //Game1.tileShader.CurrentTechnique.Passes[index2].Apply();
                }
                else
                {
                    //Game1.tileShader.CurrentTechnique.Passes[c].Apply();
                }
                Game1.spriteBatch.Draw(Game1.tileTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.tileTexture[t].Width, Game1.tileTexture[t].Height), Microsoft.Xna.Framework.Color.White);
                Game1.spriteBatch.End();
                base.GraphicsDevice.SetRenderTarget(null);
                Game1.tileAltTextureDrawn[t, c] = true;
            }
        }
        protected void treeColorCheck(int t, int c)
        {
            if (!Game1.treeAltTextureInit[t, c])
            {
                Game1.treeTopAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Game1.treeTopTexture[t].Width, Game1.treeTopTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
                Game1.treeBranchAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Game1.treeBranchTexture[t].Width, Game1.treeBranchTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
                Game1.treeAltTextureInit[t, c] = true;
            }
            if (Game1.treeTopAltTexture[t, c].IsContentLost || Game1.treeBranchAltTexture[t, c].IsContentLost)
            {
                Game1.treeAltTextureDrawn[t, c] = false;
            }
            if (!Game1.treeAltTextureDrawn[t, c])
            {
                base.GraphicsDevice.SetRenderTarget(Game1.treeTopAltTexture[t, c]);
                base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
                Game1.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
                if (c >= 28)
                {
                    int index = 40 + c - 28;
                    //Game1.tileShader.CurrentTechnique.Passes[index].Apply();
                }
                else if (c > 0 && c < 13)
                {
                    int index2 = c + 27;
                    //Game1.tileShader.CurrentTechnique.Passes[index2].Apply();
                }
                else
                {
                    //Game1.tileShader.CurrentTechnique.Passes[c].Apply();
                }
                Game1.spriteBatch.Draw(Game1.treeTopTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.treeTopTexture[t].Width, Game1.treeTopTexture[t].Height), Microsoft.Xna.Framework.Color.White);
                Game1.spriteBatch.End();
                base.GraphicsDevice.SetRenderTarget(null);
                base.GraphicsDevice.SetRenderTarget(Game1.treeBranchAltTexture[t, c]);
                base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
                Game1.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
                if (c >= 28)
                {
                    int index3 = 40 + c - 28;
                    //Game1.tileShader.CurrentTechnique.Passes[index3].Apply();
                }
                else if (c > 0 && c < 13)
                {
                    int index4 = c + 27;
                    //Game1.tileShader.CurrentTechnique.Passes[index4].Apply();
                }
                else
                {
                    //Game1.tileShader.CurrentTechnique.Passes[c].Apply();
                }
                Game1.spriteBatch.Draw(Game1.treeBranchTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.treeBranchTexture[t].Width, Game1.treeBranchTexture[t].Height), Microsoft.Xna.Framework.Color.White);
                Game1.spriteBatch.End();
                base.GraphicsDevice.SetRenderTarget(null);
                Game1.treeAltTextureDrawn[t, c] = true;
            }
        }
        protected void wallColorCheck(int t, int c)
        {
            this.LoadWall(t);
            if (!Game1.wallAltTextureInit[t, c])
            {
                Game1.wallAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Game1.wallTexture[t].Width, Game1.wallTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
                Game1.wallAltTextureInit[t, c] = true;
            }
            if (Game1.wallAltTexture[t, c].IsContentLost)
            {
                Game1.wallAltTextureDrawn[t, c] = false;
            }
            if (!Game1.wallAltTextureDrawn[t, c])
            {
                base.GraphicsDevice.SetRenderTarget(Game1.wallAltTexture[t, c]);
                base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
                Game1.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
                if (c == 30)
                {
                    //Game1.tileShader.CurrentTechnique.Passes[43].Apply();
                }
                else if (c >= 28)
                {
                    int index = 40 + c - 28;
                    //Game1.tileShader.CurrentTechnique.Passes[index].Apply();
                }
                else
                {
                    //Game1.tileShader.CurrentTechnique.Passes[c].Apply();
                }
                Game1.spriteBatch.Draw(Game1.wallTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.wallTexture[t].Width, Game1.wallTexture[t].Height), Microsoft.Xna.Framework.Color.White);
                Game1.spriteBatch.End();
                base.GraphicsDevice.SetRenderTarget(null);
                Game1.wallAltTextureDrawn[t, c] = true;
            }
        }
        public void UpdateWeather()
        {
            if (SkyManager.Instance != null)
            {
                SkyManager.Instance.Update();
            }
            Game1.cloudLimit = 200;
            if (Game1.windSpeed < Game1.windSpeedSet)
            {
                Game1.windSpeed += 0.001f * (float)Game1.dayRate;
                if (Game1.windSpeed > Game1.windSpeedSet)
                {
                    Game1.windSpeed = Game1.windSpeedSet;
                }
            }
            else if (Game1.windSpeed > Game1.windSpeedSet)
            {
                Game1.windSpeed -= 0.001f * (float)Game1.dayRate;
                if (Game1.windSpeed < Game1.windSpeedSet)
                {
                    Game1.windSpeed = Game1.windSpeedSet;
                }
            }
            if (Game1.netMode == 1)
            {
                return;
            }
            if (Game1.netMode != 2 && Game1.gameMenu)
            {
                return;
            }
            Game1.windSpeedSpeed += (float)Game1.rand.Next(-10, 11) * 0.0001f;
            if (!Game1.dayTime)
            {
                Game1.windSpeedSpeed += (float)Game1.rand.Next(-10, 11) * 0.0002f;
            }
            if ((double)Game1.windSpeedSpeed < -0.002)
            {
                Game1.windSpeedSpeed = -0.002f;
            }
            if ((double)Game1.windSpeedSpeed > 0.002)
            {
                Game1.windSpeedSpeed = 0.002f;
            }
            Game1.windSpeedTemp += Game1.windSpeedSpeed;
            if (Game1.raining)
            {
                Game1.windSpeedTemp += Game1.windSpeedSpeed * 2f;
            }
            float num = 0.3f + 0.5f * Game1.cloudAlpha;
            if (Game1.windSpeedTemp < -num)
            {
                Game1.windSpeedTemp = -num;
            }
            if (Game1.windSpeedTemp > num)
            {
                Game1.windSpeedTemp = num;
            }
            if (Game1.rand.Next(60) == 0)
            {
                Game1.numCloudsTemp += Game1.rand.Next(-1, 2);
            }
            if ((float)Game1.rand.Next(1000) < 50f * Game1.cloudBGAlpha)
            {
                Game1.numCloudsTemp++;
            }
            if ((float)Game1.rand.Next(1000) < 25f * (1f - Game1.cloudBGAlpha))
            {
                Game1.numCloudsTemp--;
            }
            if ((float)Game1.rand.Next(1000) < 200f * Game1.cloudAlpha && Game1.numCloudsTemp < Game1.cloudLimit / 2)
            {
                Game1.numCloudsTemp++;
            }
            if ((float)Game1.rand.Next(1000) < 50f * Game1.cloudAlpha)
            {
                Game1.numCloudsTemp++;
            }
            if (Game1.numCloudsTemp > Game1.cloudLimit / 4 && Game1.rand.Next(100) == 0)
            {
                Game1.numCloudsTemp -= Game1.rand.Next(1, 3);
            }
            if (Game1.numCloudsTemp < Game1.cloudLimit / 4 && Game1.rand.Next(100) == 0)
            {
                Game1.numCloudsTemp += Game1.rand.Next(1, 3);
            }
            if (Game1.cloudBGActive <= 0f && Game1.numCloudsTemp > Game1.cloudLimit / 2 && Game1.cloudAlpha == 0f)
            {
                Game1.numCloudsTemp = Game1.cloudLimit / 2;
            }
            if (Game1.numCloudsTemp < 0)
            {
                Game1.numCloudsTemp = 0;
            }
            if (Game1.numCloudsTemp > Game1.cloudLimit)
            {
                Game1.numCloudsTemp = Game1.cloudLimit;
            }
            Game1.weatherCounter -= Game1.dayRate;
            if (Game1.weatherCounter <= 0)
            {
                Game1.numClouds = Game1.numCloudsTemp;
                Game1.windSpeedSet = Game1.windSpeedTemp;
                Game1.weatherCounter = Game1.rand.Next(3600, 18000);
                if (Game1.netMode == 2)
                {
                    NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
                }
            }
        }
        public void LoadBackground(int i)
        {
            if (i >= 0 && !Game1.backgroundLoaded[i])
            {
                Game1.backgroundTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Background_",
                    i
                }));
                Game1.backgroundWidth[i] = Game1.backgroundTexture[i].Width;
                Game1.backgroundHeight[i] = Game1.backgroundTexture[i].Height;
                Game1.backgroundLoaded[i] = true;
            }
        }

        protected void LoadNPC(int i)
        {
            if (!Game1.NPCLoaded[i] || Game1.npcTexture[i] == null)
            {
                Game1.npcTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "NPC_",
                    i
                }));
                Game1.NPCLoaded[i] = true;
            }
        }

        protected void LoadProjectile(int i)
        {
            if (!Game1.projectileLoaded[i])
            {
                Game1.projectileTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Projectile_",
                    i
                }));
                Game1.projectileLoaded[i] = true;
            }
        }

        protected void LoadGore(int i)
        {
            if (!Game1.goreLoaded[i])
            {
                Game1.goreTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Gore_",
                    i
                }));
                Game1.goreLoaded[i] = true;
            }
        }
        protected void LoadWall(int i)
        {
            if (!Game1.wallLoaded[i])
            {
                Game1.wallTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Wall_",
                    i
                }));
                Game1.wallLoaded[i] = true;
            }
        }

        protected void LoadTiles(int i)
        {
            if (!Game1.tileSetsLoaded[i])
            {
                Game1.tileTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Tiles_",
                    i
                }));
                Game1.tileSetsLoaded[i] = true;
            }
        }

        protected void LoadItemFlames(int i)
        {
            if (!Game1.itemFlameLoaded[i])
            {
                try
                {
                    Game1.itemFlameTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
                    {
                        "Images",
                        Path.DirectorySeparatorChar,
                        "ItemFlame_",
                        i
                    }));
                }
                catch
                {
                }
                Game1.itemFlameLoaded[i] = true;
            }
        }

        protected void LoadWings(int i)
        {
            if (!Game1.wingsLoaded[i])
            {
                Game1.wingsTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Wings_",
                    i
                }));
                Game1.wingsLoaded[i] = true;
            }
        }

        protected void LoadHair(int i)
        {
            if (!Game1.hairLoaded[i])
            {
                Game1.playerHairTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Player_Hair_",
                    i + 1
                }));
                Game1.playerHairAltTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Player_HairAlt_",
                    i + 1
                }));
                Game1.hairLoaded[i] = true;
            }
        }

        protected void LoadArmorHead(int i)
        {
            if (!Game1.armorHeadLoaded[i])
            {
                Game1.armorHeadTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Armor_Head_",
                    i
                }));
                Game1.armorHeadLoaded[i] = true;
            }
        }

        protected void LoadArmorBody(int i)
        {
            if (!Game1.armorBodyLoaded[i])
            {
                Game1.femaleBodyTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Female_Body_",
                    i
                }));
                Game1.armorBodyTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Armor_Body_",
                    i
                }));
                Game1.armorArmTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Armor_Arm_",
                    i
                }));
                Game1.armorBodyLoaded[i] = true;
            }
        }

        protected void LoadArmorLegs(int i)
        {
            if (!Game1.armorLegsLoaded[i])
            {
                Game1.armorLegTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
                {
                    "Images",
                    Path.DirectorySeparatorChar,
                    "Armor_Legs_",
                    i
                }));
                Game1.armorLegsLoaded[i] = true;
            }
        }

        protected void LoadAccHandsOn(int i)
        {
            if (!Game1.accHandsOnLoaded[i])
            {
                Game1.accHandsOnTexture[i] = base.Content.Load<Texture2D>("Images/Acc_HandsOn_" + i);
                Game1.accHandsOnLoaded[i] = true;
            }
        }
        protected void LoadAccHandsOff(int i)
        {
            if (!Game1.accHandsOffLoaded[i])
            {
                Game1.accHandsOffTexture[i] = base.Content.Load<Texture2D>("Images/Acc_HandsOff_" + i);
                Game1.accHandsOffLoaded[i] = true;
            }
        }

        protected void LoadAccBack(int i)
        {
            if (!Game1.accBackLoaded[i])
            {
                Game1.accBackTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Back_" + i);
                Game1.accBackLoaded[i] = true;
            }
        }
        protected void LoadAccFront(int i)
        {
            if (!Game1.accFrontLoaded[i])
            {
                Game1.accFrontTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Front_" + i);
                Game1.accFrontLoaded[i] = true;
            }
        }

        protected void LoadAccShoes(int i)
        {
            if (!Game1.accShoesLoaded[i])
            {
                Game1.accShoesTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Shoes_" + i);
                Game1.accShoesLoaded[i] = true;
            }
        }
        protected void LoadAccWaist(int i)
        {
            if (!Game1.accWaistLoaded[i])
            {
                Game1.accWaistTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Waist_" + i);
                Game1.accWaistLoaded[i] = true;
            }
        }

        protected void LoadAccShield(int i)
        {
            if (!Game1.accShieldLoaded[i])
            {
                Game1.accShieldTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Shield_" + i);
                Game1.accShieldLoaded[i] = true;
            }
        }

        protected void LoadAccNeck(int i)
        {
            if (!Game1.accNeckLoaded[i])
            {
                Game1.accNeckTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Neck_" + i);
                Game1.accNeckLoaded[i] = true;
            }
        }

        protected void LoadAccFace(int i)
        {
            if (!Game1.accFaceLoaded[i])
            {
                Game1.accFaceTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Face_" + i);
                Game1.accFaceLoaded[i] = true;
            }
        }


        protected void LoadAccBalloon(int i)
        {
            if (!Game1.accballoonLoaded[i])
            {
                Game1.accBalloonTexture[i] = base.Content.Load<Texture2D>("Images/Acc_Balloon_" + i);
                Game1.accballoonLoaded[i] = true;
            }
        }


        protected void LoadFlameRing()
        {
            if (!Game1.flameRingLoaded)
            {
                this.flameRingTexture = base.Content.Load<Texture2D>("Images/FlameRing");
                Game1.flameRingLoaded = true;
            }
        }


        // DrawSurfaceBG
        protected void DrawSurfaceBG()
        {
            float scale = SkyManager.Instance.ProcessCloudAlpha();
            if (!Game1.mapFullscreen && (double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
            {
                for (int i = 0; i < 200; i++)
                {
                    if (Game1.cloud[i].active && Game1.cloud[i].scale < 1f)
                    {
                        Microsoft.Xna.Framework.Color value = Game1.cloud[i].cloudColor(Game1.bgColor);
                        float num = Game1.cloud[i].scale * 0.8f;
                        float num2 = (Game1.cloud[i].scale + 1f) / 2f * 0.9f;
                        value.R = (byte)((float)value.R * num);
                        value.G = (byte)((float)value.G * num2);
                        Game1.atmo = 1f;
                        float num3 = Game1.cloud[i].position.Y * ((float)Game1.screenHeight / 600f);
                        num3 = Game1.cloud[i].position.Y + (float)((int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 750.0 + 830.0)) + (float)((int)this.scAdj);
                        Game1.spriteBatch.Draw(Game1.cloudTexture[Game1.cloud[i].type], new Vector2(Game1.cloud[i].position.X + (float)Game1.cloudTexture[Game1.cloud[i].type].Width * 0.5f, num3 + (float)Game1.cloudTexture[Game1.cloud[i].type].Height * 0.5f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.cloudTexture[Game1.cloud[i].type].Width, Game1.cloudTexture[Game1.cloud[i].type].Height)), value * scale, Game1.cloud[i].rotation, new Vector2((float)Game1.cloudTexture[Game1.cloud[i].type].Width * 0.5f, (float)Game1.cloudTexture[Game1.cloud[i].type].Height * 0.5f), Game1.cloud[i].scale, Game1.cloud[i].spriteDir, 0f);
                    }
                }
            }
            if (Game1.invasionType == 4 && !SkyManager.Instance["Martian"].IsActive())
            {
                SkyManager.Instance.Activate("Martian", default(Vector2), new object[0]);
            }
            else if (Game1.invasionType != 4 && SkyManager.Instance["Martian"].IsActive())
            {
                SkyManager.Instance.Deactivate("Martian", new object[0]);
            }
            SkyManager.Instance.ResetDepthTracker();
            Game1.atmo = 1f;
            Game1.bgScale *= 2f;
            this.bgParallax = 0.15;
            if (Game1.atmo < 1f)
            {
                Game1.backColor.R = (byte)((float)Game1.backColor.R * Game1.atmo);
                Game1.backColor.G = (byte)((float)Game1.backColor.G * Game1.atmo);
                Game1.backColor.B = (byte)((float)Game1.backColor.B * Game1.atmo);
                Game1.backColor.A = (byte)((float)Game1.backColor.A * Game1.atmo);
            }
            if (!Game1.mapFullscreen && (double)(Game1.screenPosition.Y / 16f) <= Game1.worldSurface + 10.0)
            {
                if (Game1.owBack)
                {
                    if (Game1.cloudBGActive > 0f)
                    {
                        Game1.cloudBGAlpha += 0.0005f * (float)Game1.dayRate;
                        if (Game1.cloudBGAlpha > 1f)
                        {
                            Game1.cloudBGAlpha = 1f;
                        }
                    }
                    else
                    {
                        Game1.cloudBGAlpha -= 0.0005f * (float)Game1.dayRate;
                        if (Game1.cloudBGAlpha < 0f)
                        {
                            Game1.cloudBGAlpha = 0f;
                        }
                    }
                    if (Game1.cloudBGAlpha > 0f)
                    {
                        this.LoadBackground(Game1.cloudBG[0]);
                        this.LoadBackground(Game1.cloudBG[1]);
                        Game1.bgScale *= 2f;
                        this.bgParallax = 0.15;
                        float num4 = Game1.cloudBGAlpha;
                        if (num4 > 1f)
                        {
                            num4 = 1f;
                        }
                        Game1.bgScale = 1.65f;
                        this.bgParallax = 0.090000003576278687;
                        if (base.IsActive)
                        {
                            Game1.cloudBGX[0] += Game1.windSpeed * (float)this.bgParallax * 5f * (float)Game1.dayRate;
                        }
                        if (Game1.cloudBGX[0] > (float)Game1.backgroundWidth[Game1.cloudBG[0]] * Game1.bgScale)
                        {
                            Game1.cloudBGX[0] -= (float)Game1.backgroundWidth[Game1.cloudBG[0]] * Game1.bgScale;
                        }
                        if (Game1.cloudBGX[0] < (float)(-(float)Game1.backgroundWidth[Game1.cloudBG[0]]) * Game1.bgScale)
                        {
                            Game1.cloudBGX[0] += (float)Game1.backgroundWidth[Game1.cloudBG[0]] * Game1.bgScale;
                        }
                        Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.cloudBG[0]] * Game1.bgScale);
                        this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 900.0 + 600.0) + (int)this.scAdj;
                        if (Game1.gameMenu)
                        {
                            this.bgTop = -150;
                        }
                        this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2) - (double)Game1.bgW);
                        this.bgStart += (int)Game1.cloudBGX[0];
                        this.bgLoops = Game1.screenWidth / Game1.bgW + 2 + 2;
                        Game1.backColor = Game1.trueBackColor;
                        Game1.backColor.R = (byte)((float)Game1.backColor.R * num4);
                        Game1.backColor.G = (byte)((float)Game1.backColor.G * num4);
                        Game1.backColor.B = (byte)((float)Game1.backColor.B * num4);
                        Game1.backColor.A = (byte)((float)Game1.backColor.A * num4);
                        SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                        for (int j = 0; j < this.bgLoops; j++)
                        {
                            Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.cloudBG[0]], new Vector2((float)(this.bgStart + Game1.bgW * j), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.cloudBG[0]], Game1.backgroundHeight[Game1.cloudBG[0]])), Game1.backColor * scale, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                        }
                        num4 = Game1.cloudBGAlpha * 1.5f;
                        if (num4 > 1f)
                        {
                            num4 = 1f;
                        }
                        Game1.backColor = Game1.trueBackColor;
                        Game1.backColor.R = (byte)((float)Game1.backColor.R * num4);
                        Game1.backColor.G = (byte)((float)Game1.backColor.G * num4);
                        Game1.backColor.B = (byte)((float)Game1.backColor.B * num4);
                        Game1.backColor.A = (byte)((float)Game1.backColor.A * num4);
                        Game1.bgScale = 1.85f;
                        this.bgParallax = 0.12;
                        if (base.IsActive)
                        {
                            Game1.cloudBGX[1] += Game1.windSpeed * (float)this.bgParallax * 5f * (float)Game1.dayRate;
                        }
                        if (Game1.cloudBGX[1] > (float)Game1.backgroundWidth[Game1.cloudBG[1]] * Game1.bgScale)
                        {
                            Game1.cloudBGX[1] -= (float)Game1.backgroundWidth[Game1.cloudBG[1]] * Game1.bgScale;
                        }
                        if (Game1.cloudBGX[1] < (float)(-(float)Game1.backgroundWidth[Game1.cloudBG[1]]) * Game1.bgScale)
                        {
                            Game1.cloudBGX[1] += (float)Game1.backgroundWidth[Game1.cloudBG[1]] * Game1.bgScale;
                        }
                        Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.cloudBG[1]] * Game1.bgScale);
                        this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1100.0 + 750.0) + (int)this.scAdj;
                        if (Game1.gameMenu)
                        {
                            this.bgTop = -50;
                        }
                        this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2) - (double)Game1.bgW);
                        this.bgStart += (int)Game1.cloudBGX[1];
                        this.bgLoops = Game1.screenWidth / Game1.bgW + 2 + 2;
                        SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                        for (int k = 0; k < this.bgLoops; k++)
                        {
                            Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.cloudBG[1]], new Vector2((float)(this.bgStart + Game1.bgW * k), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.cloudBG[1]], Game1.backgroundHeight[Game1.cloudBG[1]])), Game1.backColor * scale, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                        }
                    }
                    this.LoadBackground(Game1.treeMntBG[0]);
                    this.LoadBackground(Game1.treeMntBG[1]);
                    Game1.bgScale = 1f;
                    this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1300.0 + 1090.0) + (int)this.scAdj;
                    Game1.bgScale *= 2f;
                    this.bgParallax = 0.15;
                    Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.treeMntBG[0]] * Game1.bgScale);
                    SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                    this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                    this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                    if (Game1.gameMenu)
                    {
                        this.bgTop = 100;
                    }
                    if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                    {
                        Game1.backColor = Game1.trueBackColor;
                        Game1.backColor.R = (byte)((float)Game1.backColor.R * Game1.bgAlpha2[0]);
                        Game1.backColor.G = (byte)((float)Game1.backColor.G * Game1.bgAlpha2[0]);
                        Game1.backColor.B = (byte)((float)Game1.backColor.B * Game1.bgAlpha2[0]);
                        Game1.backColor.A = (byte)((float)Game1.backColor.A * Game1.bgAlpha2[0]);
                        if (Game1.bgAlpha2[0] > 0f)
                        {
                            if (Game1.treeMntBG[0] == 93 || (Game1.treeMntBG[0] >= 168 && Game1.treeMntBG[0] <= 170))
                            {
                                this.bgTop -= 50;
                            }
                            if (Game1.treeMntBG[0] == 171)
                            {
                                this.bgTop -= 100;
                            }
                            if (Game1.treeMntBG[0] == 176)
                            {
                                this.bgTop += 250;
                            }
                            if (Game1.treeMntBG[0] == 179)
                            {
                                this.bgTop -= 100;
                            }
                            for (int l = 0; l < this.bgLoops; l++)
                            {
                                Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.treeMntBG[0]], new Vector2((float)(this.bgStart + Game1.bgW * l), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.treeMntBG[0]], Game1.backgroundHeight[Game1.treeMntBG[0]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                            }
                            if (Game1.treeMntBG[0] == 93 || (Game1.treeMntBG[0] >= 168 && Game1.treeMntBG[0] <= 170))
                            {
                                this.bgTop += 50;
                            }
                            if (Game1.treeMntBG[0] == 171)
                            {
                                this.bgTop += 100;
                            }
                            if (Game1.treeMntBG[0] == 176)
                            {
                                this.bgTop -= 250;
                            }
                            if (Game1.treeMntBG[0] == 179)
                            {
                                this.bgTop += 100;
                            }
                        }
                        Game1.backColor = Game1.trueBackColor;
                        Game1.backColor.R = (byte)((float)Game1.backColor.R * Game1.bgAlpha2[1]);
                        Game1.backColor.G = (byte)((float)Game1.backColor.G * Game1.bgAlpha2[1]);
                        Game1.backColor.B = (byte)((float)Game1.backColor.B * Game1.bgAlpha2[1]);
                        Game1.backColor.A = (byte)((float)Game1.backColor.A * Game1.bgAlpha2[1]);
                        if (Game1.bgAlpha2[1] > 0f)
                        {
                            this.LoadBackground(23);
                            for (int m = 0; m < this.bgLoops; m++)
                            {
                                Game1.spriteBatch.Draw(Game1.backgroundTexture[23], new Vector2((float)(this.bgStart + Game1.bgW * m), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[23], Game1.backgroundHeight[23])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                            }
                        }
                        Game1.backColor = Game1.trueBackColor;
                        Game1.backColor.R = (byte)((float)Game1.backColor.R * Game1.bgAlpha2[2]);
                        Game1.backColor.G = (byte)((float)Game1.backColor.G * Game1.bgAlpha2[2]);
                        Game1.backColor.B = (byte)((float)Game1.backColor.B * Game1.bgAlpha2[2]);
                        Game1.backColor.A = (byte)((float)Game1.backColor.A * Game1.bgAlpha2[2]);
                        if (Game1.bgAlpha2[2] > 0f)
                        {
                            this.LoadBackground(24);
                            for (int n = 0; n < this.bgLoops; n++)
                            {
                                Game1.spriteBatch.Draw(Game1.backgroundTexture[24], new Vector2((float)(this.bgStart + Game1.bgW * n), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[24], Game1.backgroundHeight[24])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                            }
                        }
                        Game1.backColor = Game1.trueBackColor;
                        Game1.backColor.R = (byte)((float)Game1.backColor.R * Game1.bgAlpha2[4]);
                        Game1.backColor.G = (byte)((float)Game1.backColor.G * Game1.bgAlpha2[4]);
                        Game1.backColor.B = (byte)((float)Game1.backColor.B * Game1.bgAlpha2[4]);
                        Game1.backColor.A = (byte)((float)Game1.backColor.A * Game1.bgAlpha2[4]);
                        if (Game1.bgAlpha2[4] > 0f)
                        {
                            this.LoadBackground(Game1.snowMntBG[0]);
                            for (int num5 = 0; num5 < this.bgLoops; num5++)
                            {
                                Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.snowMntBG[0]], new Vector2((float)(this.bgStart + Game1.bgW * num5), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.snowMntBG[0]], Game1.backgroundHeight[Game1.snowMntBG[0]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                            }
                        }
                        Game1.backColor = Game1.trueBackColor;
                        Game1.backColor.R = (byte)((float)Game1.backColor.R * Game1.bgAlpha2[5]);
                        Game1.backColor.G = (byte)((float)Game1.backColor.G * Game1.bgAlpha2[5]);
                        Game1.backColor.B = (byte)((float)Game1.backColor.B * Game1.bgAlpha2[5]);
                        Game1.backColor.A = (byte)((float)Game1.backColor.A * Game1.bgAlpha2[5]);
                        if (Game1.bgAlpha2[5] > 0f)
                        {
                            this.LoadBackground(24);
                            for (int num6 = 0; num6 < this.bgLoops; num6++)
                            {
                                Game1.spriteBatch.Draw(Game1.backgroundTexture[24], new Vector2((float)(this.bgStart + Game1.bgW * num6), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[24], Game1.backgroundHeight[24])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                            }
                        }
                        SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 5f);
                    }
                }
                this.cTop = (float)(this.bgTop - 50);
                if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                {
                    for (int num7 = 0; num7 < 200; num7++)
                    {
                        if (Game1.cloud[num7].active && (double)Game1.cloud[num7].scale < 1.15 && Game1.cloud[num7].scale >= 1f)
                        {
                            Microsoft.Xna.Framework.Color value2 = Game1.cloud[num7].cloudColor(Game1.bgColor);
                            if (Game1.atmo < 1f)
                            {
                                value2.R = (byte)((float)value2.R * Game1.atmo);
                                value2.G = (byte)((float)value2.G * Game1.atmo);
                                value2.B = (byte)((float)value2.B * Game1.atmo);
                                value2.A = (byte)((float)value2.A * Game1.atmo);
                            }
                            float num8 = Game1.cloud[num7].position.Y * ((float)Game1.screenHeight / 600f);
                            float num9 = (float)((double)(Game1.screenPosition.Y / 16f - 24f) / Game1.worldSurface);
                            if (num9 < 0f)
                            {
                                num9 = 0f;
                            }
                            if (num9 > 1f)
                            {
                            }
                            if (Game1.gameMenu)
                            {
                            }
                            Game1.spriteBatch.Draw(Game1.cloudTexture[Game1.cloud[num7].type], new Vector2(Game1.cloud[num7].position.X + (float)Game1.cloudTexture[Game1.cloud[num7].type].Width * 0.5f, num8 + (float)Game1.cloudTexture[Game1.cloud[num7].type].Height * 0.5f + this.cTop + 200f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.cloudTexture[Game1.cloud[num7].type].Width, Game1.cloudTexture[Game1.cloud[num7].type].Height)), value2 * scale, Game1.cloud[num7].rotation, new Vector2((float)Game1.cloudTexture[Game1.cloud[num7].type].Width * 0.5f, (float)Game1.cloudTexture[Game1.cloud[num7].type].Height * 0.5f), Game1.cloud[num7].scale, Game1.cloud[num7].spriteDir, 0f);
                        }
                    }
                }
                if (Game1.holyTiles > 0 && Game1.owBack)
                {
                    this.bgParallax = 0.17;
                    Game1.bgScale = 1.1f;
                    Game1.bgScale *= 2f;
                    Game1.bgW = (int)((double)(3500f * Game1.bgScale) * 1.05);
                    this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                    this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                    this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1400.0 + 900.0) + (int)this.scAdj;
                    if (Game1.gameMenu)
                    {
                        this.bgTop = 230;
                        this.bgStart -= 500;
                    }
                    SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                    Microsoft.Xna.Framework.Color color = Game1.trueBackColor;
                    float num10 = (float)Game1.holyTiles / 400f;
                    if (num10 > 0.5f)
                    {
                        num10 = 0.5f;
                    }
                    color.R = (byte)((float)color.R * num10);
                    color.G = (byte)((float)color.G * num10);
                    color.B = (byte)((float)color.B * num10);
                    color.A = (byte)((float)color.A * num10 * 0.8f);
                    if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                    {
                        this.LoadBackground(18);
                        this.LoadBackground(19);
                        for (int num11 = 0; num11 < this.bgLoops; num11++)
                        {
                            Game1.spriteBatch.Draw(Game1.backgroundTexture[18], new Vector2((float)(this.bgStart + Game1.bgW * num11), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[18], Game1.backgroundHeight[18])), color, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                            Game1.spriteBatch.Draw(Game1.backgroundTexture[19], new Vector2((float)(this.bgStart + Game1.bgW * num11 + 1700), (float)(this.bgTop + 100)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[19], Game1.backgroundHeight[19])), color, 0f, default(Vector2), Game1.bgScale * 0.9f, SpriteEffects.None, 0f);
                        }
                    }
                }
                if (Game1.treeMntBG[1] > -1)
                {
                    this.LoadBackground(Game1.treeMntBG[1]);
                    this.bgParallax = 0.2;
                    Game1.bgScale = 1.15f;
                    Game1.bgScale *= 2f;
                    Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.treeMntBG[1]] * Game1.bgScale);
                    this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                    this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                    this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1400.0 + 1260.0) + (int)this.scAdj;
                }
                if (Game1.owBack)
                {
                    if (Game1.gameMenu)
                    {
                        this.bgTop = 230;
                        this.bgStart -= 500;
                    }
                    SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                    if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                    {
                        Game1.backColor = Game1.trueBackColor;
                        Game1.backColor.R = (byte)((float)Game1.backColor.R * Game1.bgAlpha2[0]);
                        Game1.backColor.G = (byte)((float)Game1.backColor.G * Game1.bgAlpha2[0]);
                        Game1.backColor.B = (byte)((float)Game1.backColor.B * Game1.bgAlpha2[0]);
                        Game1.backColor.A = (byte)((float)Game1.backColor.A * Game1.bgAlpha2[0]);
                        if (Game1.bgAlpha2[0] > 0f && Game1.treeMntBG[1] > -1)
                        {
                            if (Game1.treeMntBG[1] == 172)
                            {
                                this.bgTop += 130;
                            }
                            if (Game1.treeMntBG[1] == 177)
                            {
                                this.bgTop += 200;
                            }
                            if (Game1.treeMntBG[1] >= 180 && Game1.treeMntBG[1] <= 183)
                            {
                                this.bgTop -= 350;
                            }
                            for (int num12 = 0; num12 < this.bgLoops; num12++)
                            {
                                Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.treeMntBG[1]], new Vector2((float)(this.bgStart + Game1.bgW * num12), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.treeMntBG[1]], Game1.backgroundHeight[Game1.treeMntBG[1]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                            }
                            if (Game1.treeMntBG[1] == 172)
                            {
                                this.bgTop -= 130;
                            }
                            if (Game1.treeMntBG[1] == 177)
                            {
                                this.bgTop -= 200;
                            }
                            if (Game1.treeMntBG[1] >= 180 && Game1.treeMntBG[1] <= 183)
                            {
                                this.bgTop += 350;
                            }
                        }
                        Game1.backColor = Game1.trueBackColor;
                        Game1.backColor.R = (byte)((float)Game1.backColor.R * Game1.bgAlpha2[1]);
                        Game1.backColor.G = (byte)((float)Game1.backColor.G * Game1.bgAlpha2[1]);
                        Game1.backColor.B = (byte)((float)Game1.backColor.B * Game1.bgAlpha2[1]);
                        Game1.backColor.A = (byte)((float)Game1.backColor.A * Game1.bgAlpha2[1]);
                        if (Game1.bgAlpha2[1] > 0f)
                        {
                            this.LoadBackground(22);
                            for (int num13 = 0; num13 < this.bgLoops; num13++)
                            {
                                Game1.spriteBatch.Draw(Game1.backgroundTexture[22], new Vector2((float)(this.bgStart + Game1.bgW * num13), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[22], Game1.backgroundHeight[22])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                            }
                        }
                        Game1.backColor = Game1.trueBackColor;
                        Game1.backColor.R = (byte)((float)Game1.backColor.R * Game1.bgAlpha2[2]);
                        Game1.backColor.G = (byte)((float)Game1.backColor.G * Game1.bgAlpha2[2]);
                        Game1.backColor.B = (byte)((float)Game1.backColor.B * Game1.bgAlpha2[2]);
                        Game1.backColor.A = (byte)((float)Game1.backColor.A * Game1.bgAlpha2[2]);
                        if (Game1.bgAlpha2[2] > 0f)
                        {
                            this.LoadBackground(25);
                            for (int num14 = 0; num14 < this.bgLoops; num14++)
                            {
                                Game1.spriteBatch.Draw(Game1.backgroundTexture[25], new Vector2((float)(this.bgStart + Game1.bgW * num14), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[25], Game1.backgroundHeight[25])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                            }
                        }
                        Game1.backColor = Game1.trueBackColor;
                        Game1.backColor.R = (byte)((float)Game1.backColor.R * Game1.bgAlpha2[3]);
                        Game1.backColor.G = (byte)((float)Game1.backColor.G * Game1.bgAlpha2[3]);
                        Game1.backColor.B = (byte)((float)Game1.backColor.B * Game1.bgAlpha2[3]);
                        Game1.backColor.A = (byte)((float)Game1.backColor.A * Game1.bgAlpha2[3]);
                        if (Game1.bgAlpha2[3] > 0f)
                        {
                            this.LoadBackground(Game1.oceanBG);
                            for (int num15 = 0; num15 < this.bgLoops; num15++)
                            {
                                Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.oceanBG], new Vector2((float)(this.bgStart + Game1.bgW * num15), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.oceanBG], Game1.backgroundHeight[Game1.oceanBG])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                            }
                        }
                        Game1.backColor = Game1.trueBackColor;
                        Game1.backColor.R = (byte)((float)Game1.backColor.R * Game1.bgAlpha2[4]);
                        Game1.backColor.G = (byte)((float)Game1.backColor.G * Game1.bgAlpha2[4]);
                        Game1.backColor.B = (byte)((float)Game1.backColor.B * Game1.bgAlpha2[4]);
                        Game1.backColor.A = (byte)((float)Game1.backColor.A * Game1.bgAlpha2[4]);
                        if (Game1.bgAlpha2[4] > 0f)
                        {
                            this.LoadBackground(Game1.snowMntBG[1]);
                            for (int num16 = 0; num16 < this.bgLoops; num16++)
                            {
                                Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.snowMntBG[1]], new Vector2((float)(this.bgStart + Game1.bgW * num16), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.snowMntBG[1]], Game1.backgroundHeight[Game1.snowMntBG[1]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                            }
                        }
                        Game1.backColor = Game1.trueBackColor;
                        Game1.backColor.R = (byte)((float)Game1.backColor.R * Game1.bgAlpha2[5]);
                        Game1.backColor.G = (byte)((float)Game1.backColor.G * Game1.bgAlpha2[5]);
                        Game1.backColor.B = (byte)((float)Game1.backColor.B * Game1.bgAlpha2[5]);
                        Game1.backColor.A = (byte)((float)Game1.backColor.A * Game1.bgAlpha2[5]);
                        if (Game1.bgAlpha2[5] > 0f)
                        {
                            this.LoadBackground(42);
                            for (int num17 = 0; num17 < this.bgLoops; num17++)
                            {
                                Game1.spriteBatch.Draw(Game1.backgroundTexture[42], new Vector2((float)(this.bgStart + Game1.bgW * num17), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[42], Game1.backgroundHeight[42])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                            }
                        }
                    }
                }
                this.cTop = (float)this.bgTop * 1.01f - 150f;
                if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                {
                    for (int num18 = 0; num18 < 200; num18++)
                    {
                        if (Game1.cloud[num18].active && Game1.cloud[num18].scale >= 1.15f)
                        {
                            Microsoft.Xna.Framework.Color value3 = Game1.cloud[num18].cloudColor(Game1.bgColor);
                            if (Game1.atmo < 1f)
                            {
                                value3.R = (byte)((float)value3.R * Game1.atmo);
                                value3.G = (byte)((float)value3.G * Game1.atmo);
                                value3.B = (byte)((float)value3.B * Game1.atmo);
                                value3.A = (byte)((float)value3.A * Game1.atmo);
                            }
                            float num19 = Game1.cloud[num18].position.Y * ((float)Game1.screenHeight / 600f) - 100f;
                            float num20 = (float)((double)(Game1.screenPosition.Y / 16f - 24f) / Game1.worldSurface);
                            if (num20 < 0f)
                            {
                                num20 = 0f;
                            }
                            if (num20 > 1f)
                            {
                            }
                            if (Game1.gameMenu)
                            {
                            }
                            Game1.spriteBatch.Draw(Game1.cloudTexture[Game1.cloud[num18].type], new Vector2(Game1.cloud[num18].position.X + (float)Game1.cloudTexture[Game1.cloud[num18].type].Width * 0.5f, num19 + (float)Game1.cloudTexture[Game1.cloud[num18].type].Height * 0.5f + this.cTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.cloudTexture[Game1.cloud[num18].type].Width, Game1.cloudTexture[Game1.cloud[num18].type].Height)), value3 * scale, Game1.cloud[num18].rotation, new Vector2((float)Game1.cloudTexture[Game1.cloud[num18].type].Width * 0.5f, (float)Game1.cloudTexture[Game1.cloud[num18].type].Height * 0.5f), Game1.cloud[num18].scale, Game1.cloud[num18].spriteDir, 0f);
                        }
                    }
                }
            }
            if (!Game1.mapFullscreen)
            {
                for (int num21 = 0; num21 < 10; num21++)
                {
                    if (Game1.bgStyle == num21)
                    {
                        Game1.bgAlpha[num21] += Game1.tranSpeed;
                        if (Game1.bgAlpha[num21] > 1f)
                        {
                            Game1.bgAlpha[num21] = 1f;
                        }
                    }
                    else
                    {
                        Game1.bgAlpha[num21] -= Game1.tranSpeed;
                        if (Game1.bgAlpha[num21] < 0f)
                        {
                            Game1.bgAlpha[num21] = 0f;
                        }
                    }
                    if (Game1.owBack)
                    {
                        Game1.backColor = Game1.trueBackColor;
                        Game1.backColor.R = (byte)((float)Game1.backColor.R * Game1.bgAlpha[num21]);
                        Game1.backColor.G = (byte)((float)Game1.backColor.G * Game1.bgAlpha[num21]);
                        Game1.backColor.B = (byte)((float)Game1.backColor.B * Game1.bgAlpha[num21]);
                        Game1.backColor.A = (byte)((float)Game1.backColor.A * Game1.bgAlpha[num21]);
                        if (Game1.bgAlpha[num21] > 0f && num21 == 3)
                        {
                            this.LoadBackground(Game1.jungleBG[0]);
                            Game1.bgScale = 1.25f;
                            Game1.bgScale *= 2f;
                            Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.jungleBG[0]] * Game1.bgScale);
                            this.bgParallax = 0.4;
                            SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                            this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                            this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1800.0 + 1660.0) + (int)this.scAdj;
                            if (Game1.gameMenu)
                            {
                                this.bgTop = 320;
                            }
                            if (Game1.jungleBG[0] == 59)
                            {
                                this.bgTop -= 200;
                            }
                            this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                            if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                            {
                                for (int num22 = 0; num22 < this.bgLoops; num22++)
                                {
                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.jungleBG[0]], new Vector2((float)(this.bgStart + Game1.bgW * num22), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.jungleBG[0]], Game1.backgroundHeight[Game1.jungleBG[0]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                                }
                            }
                            this.LoadBackground(Game1.jungleBG[1]);
                            Game1.bgScale = 1.31f;
                            Game1.bgScale *= 2f;
                            Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.jungleBG[1]] * Game1.bgScale);
                            this.bgParallax = 0.43;
                            SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                            this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                            this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1950.0 + 1840.0) + (int)this.scAdj;
                            if (Game1.gameMenu)
                            {
                                this.bgTop = 400;
                                this.bgStart -= 80;
                            }
                            if (Game1.jungleBG[1] == 60)
                            {
                                this.bgTop -= 175;
                            }
                            this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                            if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                            {
                                for (int num23 = 0; num23 < this.bgLoops; num23++)
                                {
                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.jungleBG[1]], new Vector2((float)(this.bgStart + Game1.bgW * num23), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.jungleBG[1]], Game1.backgroundHeight[Game1.jungleBG[1]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.FlipHorizontally, 0f);
                                }
                            }
                            Game1.bgScale = 1.34f;
                            Game1.bgScale *= 2f;
                            this.LoadBackground(Game1.jungleBG[2]);
                            Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.jungleBG[2]] * Game1.bgScale);
                            this.bgParallax = 0.49;
                            SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                            this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                            this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 2100.0 + 2060.0) + (int)this.scAdj;
                            if (Game1.gameMenu)
                            {
                                this.bgTop = 480;
                                this.bgStart -= 120;
                            }
                            if (Game1.jungleBG[2] == 61)
                            {
                                this.bgTop -= 150;
                            }
                            this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                            if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                            {
                                for (int num24 = 0; num24 < this.bgLoops; num24++)
                                {
                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.jungleBG[2]], new Vector2((float)(this.bgStart + Game1.bgW * num24), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.jungleBG[2]], Game1.backgroundHeight[Game1.jungleBG[2]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                                }
                            }
                        }
                        if (Game1.bgAlpha[num21] > 0f && num21 == 2)
                        {
                            this.LoadBackground(Game1.desertBG[0]);
                            Game1.bgScale = 1.25f;
                            Game1.bgScale *= 2f;
                            Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.desertBG[0]] * Game1.bgScale);
                            this.bgParallax = 0.37;
                            SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                            this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                            this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1800.0 + 1750.0) + (int)this.scAdj;
                            if (Game1.gameMenu)
                            {
                                this.bgTop = 320;
                            }
                            this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                            if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                            {
                                for (int num25 = 0; num25 < this.bgLoops; num25++)
                                {
                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.desertBG[0]], new Vector2((float)(this.bgStart + Game1.bgW * num25), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.desertBG[0]], Game1.backgroundHeight[Game1.desertBG[0]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                                }
                            }
                            Game1.bgScale = 1.34f;
                            Game1.bgScale *= 2f;
                            this.LoadBackground(Game1.desertBG[1]);
                            Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.desertBG[1]] * Game1.bgScale);
                            this.bgParallax = 0.49;
                            SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                            this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                            this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 2100.0 + 2150.0) + (int)this.scAdj;
                            if (Game1.gameMenu)
                            {
                                this.bgTop = 480;
                                this.bgStart -= 120;
                            }
                            this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                            if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                            {
                                for (int num26 = 0; num26 < this.bgLoops; num26++)
                                {
                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.desertBG[1]], new Vector2((float)(this.bgStart + Game1.bgW * num26), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.desertBG[1]], Game1.backgroundHeight[Game1.desertBG[1]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                                }
                            }
                        }
                        if (Game1.bgAlpha[num21] > 0f && num21 == 5)
                        {
                            this.LoadBackground(26);
                            Game1.bgScale = 1.25f;
                            Game1.bgScale *= 2f;
                            Game1.bgW = (int)((float)Game1.backgroundWidth[26] * Game1.bgScale);
                            this.bgParallax = 0.37;
                            SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                            this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                            this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1800.0 + 1750.0) + (int)this.scAdj;
                            if (Game1.gameMenu)
                            {
                                this.bgTop = 320;
                            }
                            this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                            if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                            {
                                for (int num27 = 0; num27 < this.bgLoops; num27++)
                                {
                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[26], new Vector2((float)(this.bgStart + Game1.bgW * num27), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[26], Game1.backgroundHeight[26])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                                }
                            }
                            Game1.bgScale = 1.34f;
                            Game1.bgScale *= 2f;
                            this.LoadBackground(27);
                            Game1.bgW = (int)((float)Game1.backgroundWidth[27] * Game1.bgScale);
                            this.bgParallax = 0.49;
                            SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                            this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                            this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 2100.0 + 2150.0) + (int)this.scAdj;
                            if (Game1.gameMenu)
                            {
                                this.bgTop = 480;
                                this.bgStart -= 120;
                            }
                            this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                            if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                            {
                                for (int num28 = 0; num28 < this.bgLoops; num28++)
                                {
                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[27], new Vector2((float)(this.bgStart + Game1.bgW * num28), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[27], Game1.backgroundHeight[27])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                                }
                            }
                        }
                        if (Game1.bgAlpha[num21] > 0f && num21 == 1)
                        {
                            Game1.bgScale = 1.25f;
                            Game1.bgScale *= 2f;
                            this.LoadBackground(Game1.corruptBG[0]);
                            Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.corruptBG[0]] * Game1.bgScale);
                            this.bgParallax = 0.4;
                            SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                            this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                            this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1800.0 + 1500.0) + (int)this.scAdj;
                            if (Game1.gameMenu)
                            {
                                this.bgTop = 320;
                            }
                            if (Game1.corruptBG[0] == 56)
                            {
                                this.bgTop -= 100;
                            }
                            this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                            if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                            {
                                for (int num29 = 0; num29 < this.bgLoops; num29++)
                                {
                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.corruptBG[0]], new Vector2((float)(this.bgStart + Game1.bgW * num29), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.corruptBG[0]], Game1.backgroundHeight[Game1.corruptBG[0]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                                }
                            }
                            Game1.bgScale = 1.31f;
                            Game1.bgScale *= 2f;
                            this.LoadBackground(Game1.corruptBG[1]);
                            Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.corruptBG[1]] * Game1.bgScale);
                            this.bgParallax = 0.43;
                            SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                            this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                            this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1950.0 + 1750.0) + (int)this.scAdj;
                            if (Game1.gameMenu)
                            {
                                this.bgTop = 400;
                                this.bgStart -= 80;
                            }
                            if (Game1.corruptBG[0] == 56)
                            {
                                this.bgTop -= 100;
                            }
                            this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                            if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                            {
                                try
                                {
                                    for (int num30 = 0; num30 < this.bgLoops; num30++)
                                    {
                                        Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.corruptBG[1]], new Vector2((float)(this.bgStart + Game1.bgW * num30), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.corruptBG[1]], Game1.backgroundHeight[Game1.corruptBG[1]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.FlipHorizontally, 0f);
                                    }
                                }
                                catch
                                {
                                    this.LoadBackground(Game1.corruptBG[1]);
                                }
                            }
                            Game1.bgScale = 1.34f;
                            Game1.bgScale *= 2f;
                            this.LoadBackground(Game1.corruptBG[2]);
                            Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.corruptBG[2]] * Game1.bgScale);
                            this.bgParallax = 0.49;
                            SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                            this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                            this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 2100.0 + 2000.0) + (int)this.scAdj;
                            if (Game1.gameMenu)
                            {
                                this.bgTop = 480;
                                this.bgStart -= 120;
                            }
                            if (Game1.corruptBG[0] == 56)
                            {
                                this.bgTop -= 100;
                            }
                            this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                            if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                            {
                                for (int num31 = 0; num31 < this.bgLoops; num31++)
                                {
                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.corruptBG[2]], new Vector2((float)(this.bgStart + Game1.bgW * num31), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.corruptBG[2]], Game1.backgroundHeight[Game1.corruptBG[2]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                                }
                            }
                        }
                        if (Game1.bgAlpha[num21] > 0f && num21 == 6)
                        {
                            Game1.bgScale = 1.25f;
                            Game1.bgScale *= 2f;
                            this.LoadBackground(Game1.hallowBG[0]);
                            Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.hallowBG[0]] * Game1.bgScale);
                            this.bgParallax = 0.4;
                            SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1.2f / (float)this.bgParallax);
                            this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                            this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1800.0 + 1500.0) + (int)this.scAdj;
                            if (Game1.gameMenu)
                            {
                                this.bgTop = 320;
                            }
                            this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                            if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                            {
                                for (int num32 = 0; num32 < this.bgLoops; num32++)
                                {
                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.hallowBG[0]], new Vector2((float)(this.bgStart + Game1.bgW * num32), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.hallowBG[0]], Game1.backgroundHeight[Game1.hallowBG[0]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                                }
                            }
                            Game1.bgScale = 1.31f;
                            Game1.bgScale *= 2f;
                            this.LoadBackground(Game1.hallowBG[1]);
                            Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.hallowBG[1]] * Game1.bgScale);
                            this.bgParallax = 0.43;
                            SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                            this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                            this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1950.0 + 1750.0) + (int)this.scAdj;
                            if (Game1.gameMenu)
                            {
                                this.bgTop = 400;
                                this.bgStart -= 80;
                            }
                            this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                            if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                            {
                                for (int num33 = 0; num33 < this.bgLoops; num33++)
                                {
                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.hallowBG[1]], new Vector2((float)(this.bgStart + Game1.bgW * num33), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.hallowBG[1]], Game1.backgroundHeight[Game1.hallowBG[1]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                                }
                            }
                            Game1.bgScale = 1.34f;
                            Game1.bgScale *= 2f;
                            this.LoadBackground(Game1.hallowBG[2]);
                            Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.hallowBG[2]] * Game1.bgScale);
                            this.bgParallax = 0.49;
                            SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                            this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                            this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 2100.0 + 2000.0) + (int)this.scAdj;
                            if (Game1.gameMenu)
                            {
                                this.bgTop = 480;
                                this.bgStart -= 120;
                            }
                            this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                            if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                            {
                                for (int num34 = 0; num34 < this.bgLoops; num34++)
                                {
                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.hallowBG[2]], new Vector2((float)(this.bgStart + Game1.bgW * num34), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.hallowBG[2]], Game1.backgroundHeight[Game1.hallowBG[2]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                                }
                            }
                        }
                        if (Game1.bgAlpha[num21] > 0f && num21 == 0)
                        {
                            Game1.bgScale = 1.25f;
                            Game1.bgScale *= 2f;
                            this.bgParallax = 0.4;
                            if (Game1.treeBG[0] == 91)
                            {
                                this.bgParallax = 0.27000001072883606;
                                Game1.bgScale = 1.2f;
                                Game1.bgScale *= 2f;
                            }
                            if (Game1.treeBG[0] == 173)
                            {
                                this.bgParallax = 0.25;
                                Game1.bgScale = 1.3f;
                                Game1.bgScale *= 2f;
                            }
                            if (Game1.treeBG[0] == 178)
                            {
                                this.bgParallax = 0.30000001192092896;
                                Game1.bgScale = 1.2f;
                                Game1.bgScale *= 2f;
                            }
                            if (Game1.treeBG[0] == 184)
                            {
                                this.bgParallax = 0.25;
                                Game1.bgScale = 1.2f;
                                Game1.bgScale *= 2f;
                            }
                            SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                            if (Game1.treeBG[0] >= 0)
                            {
                                this.LoadBackground(Game1.treeBG[0]);
                                Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.treeBG[0]] * Game1.bgScale);
                                this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                                this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1800.0 + 1500.0) + (int)this.scAdj;
                                if (Game1.treeBG[0] == 91)
                                {
                                    this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1600.0 + 1400.0) + (int)this.scAdj;
                                }
                                if (Game1.treeBG[0] == 173)
                                {
                                    this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1600.0 + 1400.0) + (int)this.scAdj;
                                }
                                if (Game1.treeBG[0] == 184)
                                {
                                    this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1600.0 + 1400.0) + (int)this.scAdj;
                                }
                                if (Game1.gameMenu)
                                {
                                    this.bgTop = 320;
                                }
                                if (Game1.treeBG[0] == 50)
                                {
                                    this.bgTop -= 50;
                                }
                                if (Game1.treeBG[0] == 53)
                                {
                                    this.bgTop -= 100;
                                }
                                if (Game1.treeBG[0] == 91)
                                {
                                    this.bgTop += 200;
                                }
                                if (Game1.treeBG[0] == 173)
                                {
                                    this.bgTop += 200;
                                }
                                if (Game1.treeBG[0] == 178)
                                {
                                    this.bgTop += 75;
                                }
                                this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                                if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                                {
                                    for (int num35 = 0; num35 < this.bgLoops; num35++)
                                    {
                                        Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.treeBG[0]], new Vector2((float)(this.bgStart + Game1.bgW * num35), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.treeBG[0]], Game1.backgroundHeight[Game1.treeBG[0]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                                    }
                                }
                            }
                            if (Game1.treeBG[1] >= 0)
                            {
                                this.LoadBackground(Game1.treeBG[1]);
                                Game1.bgScale = 1.31f;
                                Game1.bgScale *= 2f;
                                Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.treeBG[1]] * Game1.bgScale);
                                this.bgParallax = 0.43;
                                SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                                this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                                this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1950.0 + 1750.0) + (int)this.scAdj;
                                if (Game1.gameMenu)
                                {
                                    this.bgTop = 400;
                                    this.bgStart -= 80;
                                }
                                if (Game1.treeBG[1] == 51)
                                {
                                    this.bgTop -= 50;
                                }
                                if (Game1.treeBG[1] == 54)
                                {
                                    this.bgTop -= 100;
                                }
                                this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                                if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                                {
                                    for (int num36 = 0; num36 < this.bgLoops; num36++)
                                    {
                                        Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.treeBG[1]], new Vector2((float)(this.bgStart + Game1.bgW * num36), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.treeBG[1]], Game1.backgroundHeight[Game1.treeBG[1]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.FlipHorizontally, 0f);
                                    }
                                }
                            }
                            if (Game1.treeBG[2] >= 0)
                            {
                                this.LoadBackground(Game1.treeBG[2]);
                                Game1.bgScale = 1.34f;
                                Game1.bgScale *= 2f;
                                this.bgParallax = 0.49;
                                SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                                if (Game1.treeBG[0] == 91)
                                {
                                    Game1.bgScale = 1.3f;
                                    Game1.bgScale *= 2f;
                                    this.bgParallax = 0.42;
                                }
                                Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.treeBG[2]] * Game1.bgScale);
                                this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                                this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 2100.0 + 2000.0) + (int)this.scAdj;
                                if (Game1.gameMenu)
                                {
                                    this.bgTop = 480;
                                    this.bgStart -= 120;
                                }
                                if (Game1.treeBG[2] == 52)
                                {
                                    this.bgTop -= 50;
                                }
                                if (Game1.treeBG[2] == 55)
                                {
                                    this.bgTop -= 100;
                                }
                                if (Game1.treeBG[2] == 92)
                                {
                                    this.bgTop += 150;
                                }
                                this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                                if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                                {
                                    for (int num37 = 0; num37 < this.bgLoops; num37++)
                                    {
                                        Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.treeBG[2]], new Vector2((float)(this.bgStart + Game1.bgW * num37), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.treeBG[2]], Game1.backgroundHeight[Game1.treeBG[2]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                                    }
                                }
                            }
                        }
                        if (Game1.bgAlpha[num21] > 0f && num21 == 7)
                        {
                            if (Game1.snowBG[0] >= 0)
                            {
                                Game1.bgScale = 1.25f;
                                Game1.bgScale *= 2f;
                                this.LoadBackground(Game1.snowBG[0]);
                                Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.snowBG[0]] * Game1.bgScale);
                                this.bgParallax = 0.4;
                                SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                                this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                                this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1800.0 + 1500.0) + (int)this.scAdj;
                                if (Game1.gameMenu)
                                {
                                    this.bgTop = 320;
                                }
                                this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                                if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                                {
                                    for (int num38 = 0; num38 < this.bgLoops; num38++)
                                    {
                                        Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.snowBG[0]], new Vector2((float)(this.bgStart + Game1.bgW * num38), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.snowBG[0]], Game1.backgroundHeight[Game1.snowBG[0]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                                    }
                                }
                            }
                            if (Game1.snowBG[1] >= 0)
                            {
                                Game1.bgScale = 1.31f;
                                Game1.bgScale *= 2f;
                                this.LoadBackground(Game1.snowBG[1]);
                                Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.snowBG[1]] * Game1.bgScale);
                                this.bgParallax = 0.43;
                                SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                                this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                                this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1950.0 + 1750.0) + (int)this.scAdj;
                                if (Game1.gameMenu)
                                {
                                    this.bgTop = 400;
                                    this.bgStart -= 80;
                                }
                                this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                                if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                                {
                                    for (int num39 = 0; num39 < this.bgLoops; num39++)
                                    {
                                        Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.snowBG[1]], new Vector2((float)(this.bgStart + Game1.bgW * num39), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.snowBG[1]], Game1.backgroundHeight[Game1.snowBG[1]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                                    }
                                }
                            }
                            if (Game1.snowBG[2] >= 0)
                            {
                                Game1.bgScale = 1.34f;
                                Game1.bgScale *= 2f;
                                this.LoadBackground(Game1.snowBG[2]);
                                Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.snowBG[2]] * Game1.bgScale);
                                this.bgParallax = 0.49;
                                SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                                this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                                this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 2100.0 + 2000.0) + (int)this.scAdj;
                                if (Game1.gameMenu)
                                {
                                    this.bgTop = 480;
                                    this.bgStart -= 120;
                                }
                                this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                                if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                                {
                                    for (int num40 = 0; num40 < this.bgLoops; num40++)
                                    {
                                        Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.snowBG[2]], new Vector2((float)(this.bgStart + Game1.bgW * num40), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.snowBG[2]], Game1.backgroundHeight[Game1.snowBG[2]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                                    }
                                }
                            }
                        }
                        if (Game1.bgAlpha[num21] > 0f && num21 == 8)
                        {
                            Game1.bgScale = 1.25f;
                            Game1.bgScale *= 2f;
                            this.LoadBackground(Game1.crimsonBG[0]);
                            Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.crimsonBG[0]] * Game1.bgScale);
                            this.bgParallax = 0.4;
                            SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                            this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                            this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1800.0 + 1500.0) + (int)this.scAdj;
                            if (Game1.crimsonBG[0] == 105)
                            {
                                this.bgTop += 50;
                            }
                            if (Game1.crimsonBG[0] == 174)
                            {
                                this.bgTop -= 350;
                            }
                            if (Game1.gameMenu)
                            {
                                this.bgTop = 320;
                            }
                            this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                            if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                            {
                                for (int num41 = 0; num41 < this.bgLoops; num41++)
                                {
                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.crimsonBG[0]], new Vector2((float)(this.bgStart + Game1.bgW * num41), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.crimsonBG[0]], Game1.backgroundHeight[Game1.crimsonBG[0]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                                }
                            }
                            Game1.bgScale = 1.31f;
                            Game1.bgScale *= 2f;
                            if (Game1.crimsonBG[1] > -1)
                            {
                                this.LoadBackground(Game1.crimsonBG[1]);
                                Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.crimsonBG[1]] * Game1.bgScale);
                                this.bgParallax = 0.43;
                                SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                                this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                                this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1950.0 + 1750.0) + (int)this.scAdj;
                                if (Game1.gameMenu)
                                {
                                    this.bgTop = 400;
                                    this.bgStart -= 80;
                                }
                                this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                                if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                                {
                                    for (int num42 = 0; num42 < this.bgLoops; num42++)
                                    {
                                        Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.crimsonBG[1]], new Vector2((float)(this.bgStart + Game1.bgW * num42), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.crimsonBG[1]], Game1.backgroundHeight[Game1.crimsonBG[1]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                                    }
                                }
                            }
                            Game1.bgScale = 1.34f;
                            Game1.bgScale *= 2f;
                            this.LoadBackground(Game1.crimsonBG[2]);
                            Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.crimsonBG[2]] * Game1.bgScale);
                            this.bgParallax = 0.49;
                            SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                            this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                            this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 2100.0 + 2000.0) + (int)this.scAdj;
                            if (Game1.gameMenu)
                            {
                                this.bgTop = 480;
                                this.bgStart -= 120;
                            }
                            if (Game1.crimsonBG[2] == 175)
                            {
                                this.bgStart -= 1000;
                                this.bgTop -= 400;
                            }
                            this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                            if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                            {
                                for (int num43 = 0; num43 < this.bgLoops; num43++)
                                {
                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.crimsonBG[2]], new Vector2((float)(this.bgStart + Game1.bgW * num43), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[Game1.crimsonBG[2]], Game1.backgroundHeight[Game1.crimsonBG[2]])), Game1.backColor, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                                }
                            }
                        }
                        if (Game1.bgAlpha[num21] > 0f && num21 == 9)
                        {
                            float num44 = (float)Game1.backColor.A / 255f;
                            Microsoft.Xna.Framework.Color color2 = Game1.backColor;
                            float num45 = (float)Game1.rand.Next(28, 42) * 0.001f;
                            num45 += (float)(270 - (int)Game1.mouseTextColor) / 5000f;
                            float num46 = 0.1f;
                            float num47 = 0.15f + num45 / 2f;
                            float num48 = 0.3f + num45;
                            num46 *= 255f;
                            num47 *= 255f;
                            num48 *= 255f;
                            num46 *= 0.33f * num44;
                            num47 *= 0.33f * num44;
                            num48 *= 0.33f * num44;
                            if (num46 > 255f)
                            {
                                num46 = 255f;
                            }
                            if (num47 > 255f)
                            {
                                num47 = 255f;
                            }
                            if (num48 > 255f)
                            {
                                num48 = 255f;
                            }
                            if (num46 > (float)color2.R)
                            {
                                color2.R = (byte)num46;
                            }
                            if (num47 > (float)color2.G)
                            {
                                color2.G = (byte)num47;
                            }
                            if (num48 > (float)color2.B)
                            {
                                color2.B = (byte)num48;
                            }
                            Game1.bgScale = 1.25f;
                            Game1.bgScale *= 2f;
                            this.LoadBackground(46);
                            Game1.bgW = (int)((float)Game1.backgroundWidth[46] * Game1.bgScale);
                            this.bgParallax = 0.4;
                            SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                            this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                            this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1800.0 + 1400.0) + (int)this.scAdj;
                            if (Game1.gameMenu)
                            {
                                this.bgTop = 320;
                            }
                            this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                            if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                            {
                                for (int num49 = 0; num49 < this.bgLoops; num49++)
                                {
                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[46], new Vector2((float)(this.bgStart + Game1.bgW * num49), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[46], Game1.backgroundHeight[46])), color2, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                                }
                            }
                            color2 = Game1.backColor;
                            num45 = (float)Game1.rand.Next(28, 42) * 0.001f;
                            num45 += (float)(270 - (int)Game1.mouseTextColor) / 5000f;
                            num46 = 0.1f;
                            num47 = 0.175f + num45 / 2f;
                            num48 = 0.3f + num45;
                            num46 *= 255f;
                            num47 *= 255f;
                            num48 *= 255f;
                            num46 *= 0.5f * num44;
                            num47 *= 0.5f * num44;
                            num48 *= 0.5f * num44;
                            if (num46 > 255f)
                            {
                                num46 = 255f;
                            }
                            if (num47 > 255f)
                            {
                                num47 = 255f;
                            }
                            if (num48 > 255f)
                            {
                                num48 = 255f;
                            }
                            if (num46 > (float)color2.R)
                            {
                                color2.R = (byte)num46;
                            }
                            if (num47 > (float)color2.G)
                            {
                                color2.G = (byte)num47;
                            }
                            if (num48 > (float)color2.B)
                            {
                                color2.B = (byte)num48;
                            }
                            Game1.bgScale = 1.32f;
                            Game1.bgScale *= 2f;
                            this.LoadBackground(47);
                            Game1.bgW = (int)((float)Game1.backgroundWidth[47] * Game1.bgScale);
                            this.bgParallax = 0.43;
                            SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                            this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                            this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1950.0 + 1675.0) + (int)this.scAdj;
                            if (Game1.gameMenu)
                            {
                                this.bgTop = 400;
                                this.bgStart -= 80;
                            }
                            this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                            if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                            {
                                for (int num50 = 0; num50 < this.bgLoops; num50++)
                                {
                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[47], new Vector2((float)(this.bgStart + Game1.bgW * num50), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[47], Game1.backgroundHeight[47])), color2, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                                }
                            }
                            color2 = Game1.backColor;
                            num45 = (float)Game1.rand.Next(28, 42) * 0.001f;
                            num45 += (float)(270 - (int)Game1.mouseTextColor) / 3000f;
                            num46 = 0.125f;
                            num47 = 0.2f + num45 / 2f;
                            num48 = 0.3f + num45;
                            num46 *= 255f * num44 * 0.75f;
                            num47 *= 255f * num44 * 0.75f;
                            num48 *= 255f * num44 * 0.75f;
                            if (num46 > 255f)
                            {
                                num46 = 255f;
                            }
                            if (num47 > 255f)
                            {
                                num47 = 255f;
                            }
                            if (num48 > 255f)
                            {
                                num48 = 255f;
                            }
                            if (num46 > (float)color2.R)
                            {
                                color2.R = (byte)num46;
                            }
                            if (num47 > (float)color2.G)
                            {
                                color2.G = (byte)num47;
                            }
                            if (num48 > (float)color2.B)
                            {
                                color2.B = (byte)num48;
                            }
                            Game1.bgScale = 1.36f;
                            Game1.bgScale *= 2f;
                            this.LoadBackground(48);
                            Game1.bgW = (int)((float)Game1.backgroundWidth[48] * Game1.bgScale);
                            this.bgParallax = 0.49;
                            SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f / (float)this.bgParallax);
                            this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.bgW) - (double)(Game1.bgW / 2));
                            this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 2100.0 + 1950.0) + (int)this.scAdj;
                            if (Game1.gameMenu)
                            {
                                this.bgTop = 480;
                                this.bgStart -= 120;
                            }
                            this.bgLoops = Game1.screenWidth / Game1.bgW + 2;
                            if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                            {
                                for (int num51 = 0; num51 < this.bgLoops; num51++)
                                {
                                    Game1.spriteBatch.Draw(Game1.backgroundTexture[48], new Vector2((float)(this.bgStart + Game1.bgW * num51), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.backgroundWidth[48], Game1.backgroundHeight[48])), color2, 0f, default(Vector2), Game1.bgScale, SpriteEffects.None, 0f);
                                }
                            }
                            SkyManager.Instance.DrawToDepth(Game1.spriteBatch, 1f);
                        }
                    }
                }
            }
            if (!Game1.mapFullscreen && Game1.cloudAlpha > 0f && (double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
            {
                this.bgParallax = 0.1;
                this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.backgroundWidth[Game1.background]) - (double)(Game1.backgroundWidth[Game1.background] / 2));
                this.bgLoops = Game1.screenWidth / Game1.backgroundWidth[Game1.background] + 2;
                this.bgStartY = 0;
                this.bgLoopsY = 0;
                this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y) / (Game1.worldSurface * 16.0 - 600.0) * 200.0);
                for (int num52 = 0; num52 < this.bgLoops; num52++)
                {
                    Microsoft.Xna.Framework.Color color3 = Game1.bgColor;
                    this.bgStart = 0;
                    float num53 = Game1.cloudAlpha;
                    color3.R = (byte)((float)color3.R * num53);
                    color3.G = (byte)((float)color3.G * num53);
                    color3.B = (byte)((float)color3.B * num53);
                    color3.A = (byte)((float)color3.A * num53);
                    Game1.spriteBatch.Draw(Game1.backgroundTexture[49], new Microsoft.Xna.Framework.Rectangle(this.bgStart + Game1.backgroundWidth[49] * num52, this.bgTop, Game1.backgroundWidth[49], Game1.backgroundHeight[49]), color3);
                }
            }
            if (!Game1.mapFullscreen)
            {
                SkyManager.Instance.DrawRemainingDepth(Game1.spriteBatch);
            }
            float num54 = (float)(Game1.worldSurface + 2.0) * 16f - Game1.screenPosition.Y;
            float num55 = (float)Game1.maxTilesY * 16f - (Game1.screenPosition.Y + (float)Game1.screenHeight);
            num54 = MathHelper.Clamp(num54, 0f, (float)Game1.screenHeight);
            num55 = MathHelper.Clamp(num55, 0f, (float)Game1.screenHeight);
            if (num55 - num54 > 0f)
            {
                Game1.spriteBatch.Draw(Game1.blackTileTexture, new Microsoft.Xna.Framework.Rectangle(0, (int)num54, Game1.screenWidth, (int)(num55 - num54)), Microsoft.Xna.Framework.Color.Black);
            }
        }


        //  DrawTileCracks
        private void DrawTileCracks(int crackType)
        {
            Vector2 zero = new Vector2((float)Game1.offScreenRange, (float)Game1.offScreenRange);
            if (Game1.drawToScreen)
            {
                zero = Vector2.Zero;
            }
            for (int i = 0; i < Game1.player[Game1.myPlayer].hitTile.data.Length; i++)
            {
                if (Game1.player[Game1.myPlayer].hitTile.data[i].type == crackType)
                {
                    int damage = Game1.player[Game1.myPlayer].hitTile.data[i].damage;
                    if (damage >= 20)
                    {
                        int x = Game1.player[Game1.myPlayer].hitTile.data[i].X;
                        int y = Game1.player[Game1.myPlayer].hitTile.data[i].Y;
                        if (WorldGen.InWorld(x, y, 0))
                        {
                            bool flag = Game1.tile[x, y] != null;
                            if (flag && crackType == 1)
                            {
                                flag = (flag && Game1.tile[x, y].active());
                            }
                            if (flag && crackType == 2)
                            {
                                flag = (flag && Game1.tile[x, y].wall != 0);
                            }
                            if (flag)
                            {
                                bool flag2 = false;
                                bool flag3 = false;
                                if (Game1.tile[x, y].type == 10)
                                {
                                    flag2 = false;
                                }
                                else if (Game1.tileSolid[(int)Game1.tile[x, y].type] && !Game1.tileSolidTop[(int)Game1.tile[x, y].type])
                                {
                                    flag2 = true;
                                }
                                else if (Game1.tile[x, y].type == 5)
                                {
                                    flag3 = true;
                                    int num = (int)(Game1.tile[x, y].frameX / 22);
                                    int num2 = (int)(Game1.tile[x, y].frameY / 22);
                                    if (num2 < 9)
                                    {
                                        flag2 = (((num != 1 && num != 2) || num2 < 6 || num2 > 8) && (num != 3 || num2 > 2) && (num != 4 || num2 < 3 || num2 > 5) && (num != 5 || num2 < 6 || num2 > 8));
                                    }
                                }
                                else if (Game1.tile[x, y].type == 72)
                                {
                                    flag3 = true;
                                    if (Game1.tile[x, y].frameX <= 34)
                                    {
                                        flag2 = true;
                                    }
                                }
                                if (flag2 && Game1.tile[x, y].slope() == 0 && !Game1.tile[x, y].halfBrick())
                                {
                                    int num3 = 0;
                                    if (damage >= 80)
                                    {
                                        num3 = 3;
                                    }
                                    else if (damage >= 60)
                                    {
                                        num3 = 2;
                                    }
                                    else if (damage >= 40)
                                    {
                                        num3 = 1;
                                    }
                                    else if (damage >= 20)
                                    {
                                        num3 = 0;
                                    }
                                    Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(Game1.player[Game1.myPlayer].hitTile.data[i].crackStyle * 18, num3 * 18, 16, 16);
                                    if (flag3)
                                    {
                                        value.X = (4 + Game1.player[Game1.myPlayer].hitTile.data[i].crackStyle / 2) * 18;
                                    }
                                    Game1.spriteBatch.Draw(Game1.tileCrackTexture, new Vector2((float)(x * 16 - (int)Game1.screenPosition.X), (float)(y * 16 - (int)Game1.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(value), Lighting.GetColor(x, y), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                                }
                            }
                        }
                    }
                }
            }
        }


        // CheckMonoliths
        private static void CheckMonoliths()
        {
            bool flag = Game1.player[Game1.myPlayer].ZoneTowerVortex || Game1.player[Game1.myPlayer].ZoneTowerNebula || Game1.player[Game1.myPlayer].ZoneTowerStardust || Game1.player[Game1.myPlayer].ZoneTowerSolar;
            for (int i = 0; i < Game1.MonolithFilterNames.Length; i++)
            {
                if (!flag && i == Game1.monolithType)
                {
                    if (!Filters.Scene[Game1.MonolithFilterNames[Game1.monolithType]].IsActive())
                    {
                        Filters.Scene.Activate(Game1.MonolithFilterNames[Game1.monolithType], default(Vector2), new object[0]);
                    }
                    if (!SkyManager.Instance[Game1.MonolithFilterNames[i]].IsActive())
                    {
                        SkyManager.Instance.Activate(Game1.MonolithFilterNames[i], default(Vector2), new object[0]);
                    }
                }
                else
                {
                    if (Filters.Scene[Game1.MonolithFilterNames[i]].IsActive())
                    {
                        Filters.Scene.Deactivate(Game1.MonolithFilterNames[i], new object[0]);
                    }
                    if (SkyManager.Instance[Game1.MonolithFilterNames[i]].IsActive())
                    {
                        SkyManager.Instance.Deactivate(Game1.MonolithFilterNames[i], new object[0]);
                    }
                }
            }
        }//CheckMonoliths


        // Draw
        protected override void Draw(GameTime gameTime)
        {
            if (Game1._drawCycleCounter == 0uL)
            {
                Game1._tileFrameSeed = Utils.RandomNextSeed(Game1._tileFrameSeed);
            }
            Game1._drawCycleCounter = (Game1._drawCycleCounter + 1uL) % 5uL;
            Game1.MenuUI.IsVisible = (Game1.gameMenu && Game1.menuMode == 888);
            Game1.InGameUI.IsVisible = (!Game1.gameMenu && Game1.InGameUI.CurrentState != null);
            this.EnsureRenderTargetContent();
            CaptureManager.Instance.DrawTick();
            TimeLogger.NewDrawFrame();
            if (!Game1.gameMenu)
            {
                this.lookForColorTiles();
            }
            TimeLogger.DetailedDrawTime(0);
            if (Game1.loadMap)
            {
                Game1.refreshMap = false;
                this.DrawToMap();
                TimeLogger.DetailedDrawTime(1);
            }
            if (Lighting.lightMode >= 2)
            {
                Game1.drawToScreen = true;
            }
            else
            {
                Game1.drawToScreen = false;
            }
            if (Game1.drawToScreen && Game1.targetSet)
            {
                this.ReleaseTargets();
            }
            if (!Game1.drawToScreen && !Game1.targetSet)
            {
                this.InitTargets();
            }
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            Game1.fpsCount++;
            if (!base.IsActive)
            {
                Game1.maxQ = true;
            }
            this.UpdateDisplaySettings();
            Game1.drawTime++;
            Game1.screenLastPosition = Game1.screenPosition;
            if (Game1.stackSplit == 0)
            {
                Game1.stackCounter = 0;
                Game1.stackDelay = 7;
                Game1.superFastStack = 0;
            }
            else
            {
                Game1.stackCounter++;
                int num = 30;
                if (num == 7)
                {
                    num = 30;
                }
                else if (Game1.stackDelay == 6)
                {
                    num = 25;
                }
                else if (Game1.stackDelay == 5)
                {
                    num = 20;
                }
                else if (Game1.stackDelay == 4)
                {
                    num = 15;
                }
                else if (Game1.stackDelay == 3)
                {
                    num = 10;
                }
                else
                {
                    num = 5;
                }
                if (Game1.stackCounter >= num)
                {
                    Game1.stackDelay--;
                    if (Game1.stackDelay < 2)
                    {
                        Game1.stackDelay = 2;
                        Game1.superFastStack++;
                    }
                    Game1.stackCounter = 0;
                }
            }
            if (Game1.myPlayer >= 0)
            {
                Game1.player[Game1.myPlayer].lastMouseInterface = Game1.player[Game1.myPlayer].mouseInterface;
                Game1.player[Game1.myPlayer].mouseInterface = false;
            }
            if (Game1.mapTime > 0)
            {
                Game1.mapTime--;
            }
            if (Game1.gameMenu)
            {
                Game1.mapTime = Game1.mapTimeMax;
            }
            Game1.toolTip = new Item();
            if (!Game1.gameMenu && Game1.netMode != 2)
            {
                int num2 = 21;
                if (Game1.cameraX != 0f && !Game1.player[Game1.myPlayer].pulley)
                {
                    Game1.cameraX = 0f;
                }
                if (Game1.cameraX > 0f)
                {
                    Game1.cameraX -= 1f;
                    if (Game1.cameraX < 0f)
                    {
                        Game1.cameraX = 0f;
                    }
                }
                if (Game1.cameraX < 0f)
                {
                    Game1.cameraX += 1f;
                    if (Game1.cameraX > 0f)
                    {
                        Game1.cameraX = 0f;
                    }
                }
                Game1.screenPosition.X =
                    Game1.player[Game1.myPlayer].position.X +
                    (float)Game1.player[Game1.myPlayer].width * 0.5f -
                    (float)Game1.screenWidth * 0.5f + Game1.cameraX;
                Game1.screenPosition.Y =
                    Game1.player[Game1.myPlayer].position.Y +
                    (float)Game1.player[Game1.myPlayer].height -
                    (float)num2 - (float)Game1.screenHeight * 0.5f
                    + Game1.player[Game1.myPlayer].gfxOffY;
                float num3 = 0f;
                float num4 = 0f;

                if ((Game1.player[Game1.myPlayer].noThrow <= 0
                    && !Game1.player[Game1.myPlayer].lastMouseInterface)
                    || Game1.zoomX != 0f || Game1.zoomY != 0f)
                {
                    if (Game1.player[Game1.myPlayer].inventory[Game1.player[Game1.myPlayer].selectedItem].itemId == 1254
                        && Game1.player[Game1.myPlayer].scope && Game1.mouseRight)
                    {
                        int num5 = Game1.mouseX;
                        int num6 = Game1.mouseY;
                        if (num5 > Game1.screenWidth)
                        {
                            num5 = Game1.screenWidth;
                        }
                        if (num5 < 0)
                        {
                            num5 = 0;
                        }
                        if (num6 > Game1.screenHeight)
                        {
                            num6 = Game1.screenHeight;
                        }
                        if (num6 < 0)
                        {
                            num6 = 0;
                        }
                        num3 = (float)(num5 - Game1.screenWidth / 2) / 1.25f;
                        num4 += (float)(num6 - Game1.screenHeight / 2) / 1.25f;
                    }
                    else if (Game1.player[Game1.myPlayer].inventory[Game1.player[Game1.myPlayer].selectedItem].itemId == 1254
                        && Game1.mouseRight)
                    {
                        int num7 = Game1.mouseX;
                        int num8 = Game1.mouseY;
                        if (num7 > Game1.screenWidth)
                        {
                            num7 = Game1.screenWidth;
                        }
                        if (num7 < 0)
                        {
                            num7 = 0;
                        }
                        if (num8 > Game1.screenHeight)
                        {
                            num8 = Game1.screenHeight;
                        }
                        if (num8 < 0)
                        {
                            num8 = 0;
                        }
                        num3 = (float)(num7 - Game1.screenWidth / 2) / 1.5f;
                        num4 += (float)(num8 - Game1.screenHeight / 2) / 1.5f;
                    }
                    else if (Game1.player[Game1.myPlayer].inventory[Game1.player[Game1.myPlayer].selectedItem].itemId == 1299 && Game1.player[Game1.myPlayer].selectedItem != 58)
                    {
                        int num9 = Game1.mouseX;
                        int num10 = Game1.mouseY;
                        if (num9 > Game1.screenWidth)
                        {
                            num9 = Game1.screenWidth;
                        }
                        if (num9 < 0)
                        {
                            num9 = 0;
                        }
                        if (num10 > Game1.screenHeight)
                        {
                            num10 = Game1.screenHeight;
                        }
                        if (num10 < 0)
                        {
                            num10 = 0;
                        }
                        num3 = (float)(num9 - Game1.screenWidth / 2) / 1.5f;
                        num4 += (float)(num10 - Game1.screenHeight / 2) / 1.5f;
                    }
                    else if (Game1.player[Game1.myPlayer].scope && Game1.mouseRight)
                    {
                        int num11 = Game1.mouseX;
                        int num12 = Game1.mouseY;
                        if (num11 > Game1.screenWidth)
                        {
                            num11 = Game1.screenWidth;
                        }
                        if (num11 < 0)
                        {
                            num11 = 0;
                        }
                        if (num12 > Game1.screenHeight)
                        {
                            num12 = Game1.screenHeight;
                        }
                        if (num12 < 0)
                        {
                            num12 = 0;
                        }
                        num3 = (float)(num11 - Game1.screenWidth / 2) / 2f;
                        num4 += (float)(num12 - Game1.screenHeight / 2) / 2f;
                    }
                }
                float num13 = 24f;
                float num14 = num3 - Game1.zoomX;
                float num15 = num4 - Game1.zoomY;
                float num16 = (float)Math.Sqrt((double)(num14 * num14 + num15 * num15));
                num16 = (float)Math.Sqrt((double)(num14 * num14 + num15 * num15));
                if (num16 < num13)
                {
                    Game1.zoomX = num3;
                    Game1.zoomY = num4;
                }
                else
                {
                    num16 = num13 / num16;
                    num14 *= num16;
                    num15 *= num16;
                    Game1.zoomX += num14;
                    Game1.zoomY += num15;
                }
                Game1.screenPosition.X = Game1.screenPosition.X + Game1.zoomX;
                Game1.screenPosition.Y = Game1.screenPosition.Y + Game1.zoomY
                    * Game1.player[Game1.myPlayer].gravDir;

                Game1.screenPosition.X = (float)((int)Game1.screenPosition.X);
                Game1.screenPosition.Y = (float)((int)Game1.screenPosition.Y);
            }
            if (!Game1.gameMenu && Game1.netMode != 2)
            {
                if (Game1.screenPosition.X < Game1.leftWorld + 640f + 16f)
                {
                    Game1.screenPosition.X = Game1.leftWorld + 640f + 16f;
                }
                else if (Game1.screenPosition.X + (float)Game1.screenWidth > Game1.rightWorld - 640f - 32f)
                {
                    Game1.screenPosition.X = Game1.rightWorld - (float)Game1.screenWidth - 640f - 32f;
                }
                if (Game1.screenPosition.Y < Game1.topWorld + 640f + 16f)
                {
                    Game1.screenPosition.Y = Game1.topWorld + 640f + 16f;
                }
                else if (Game1.screenPosition.Y + (float)Game1.screenHeight > Game1.bottomWorld - 640f - 32f)
                {
                    Game1.screenPosition.Y = Game1.bottomWorld - (float)Game1.screenHeight - 640f - 32f;
                }
            }
            Game1.CheckMonoliths();
            if (Game1.showSplash)
            {
                this.DrawSplash(gameTime);
                TimeLogger.SplashDrawTime(stopwatch.Elapsed.TotalMilliseconds);
                TimeLogger.EndDrawFrame();
                return;
            }
            Game1.sunCircle += 0.01f;
            if ((double)Game1.sunCircle > 6.285)
            {
                Game1.sunCircle -= 6.285f;
            }
            TimeLogger.DetailedDrawReset();
            if (!Game1.gameMenu)
            {
                this.waterfallManager.FindWaterfalls(false);
                TimeLogger.DetailedDrawTime(2);
                if (Game1.renderNow)
                {
                    Game1.screenLastPosition = Game1.screenPosition;
                    Game1.renderNow = false;
                    Game1.renderCount = 99;
                    this.Draw(gameTime);
                    Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
                    Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
                    this.RenderTiles();
                    Game1.sceneTilePos.X = Game1.screenPosition.X - (float)Game1.offScreenRange;
                    Game1.sceneTilePos.Y = Game1.screenPosition.Y - (float)Game1.offScreenRange;
                    this.RenderBackground();
                    Game1.sceneBackgroundPos.X = Game1.screenPosition.X - (float)Game1.offScreenRange;
                    Game1.sceneBackgroundPos.Y = Game1.screenPosition.Y - (float)Game1.offScreenRange;
                    this.RenderWalls();
                    Game1.sceneWallPos.X = Game1.screenPosition.X - (float)Game1.offScreenRange;
                    Game1.sceneWallPos.Y = Game1.screenPosition.Y - (float)Game1.offScreenRange;
                    this.RenderTiles2();
                    Game1.sceneTile2Pos.X = Game1.screenPosition.X - (float)Game1.offScreenRange;
                    Game1.sceneTile2Pos.Y = Game1.screenPosition.Y - (float)Game1.offScreenRange;
                    this.RenderWater();
                    Game1.sceneWaterPos.X = Game1.screenPosition.X - (float)Game1.offScreenRange;
                    Game1.sceneWaterPos.Y = Game1.screenPosition.Y - (float)Game1.offScreenRange;
                    Game1.renderCount = 99;
                }
                else
                {
                    if (Game1.renderCount == 3)
                    {
                        this.RenderTiles();
                        Game1.sceneTilePos.X = Game1.screenPosition.X - (float)Game1.offScreenRange;
                        Game1.sceneTilePos.Y = Game1.screenPosition.Y - (float)Game1.offScreenRange;
                    }
                    if (Game1.renderCount == 2)
                    {
                        this.RenderBackground();
                        Game1.sceneBackgroundPos.X = Game1.screenPosition.X - (float)Game1.offScreenRange;
                        Game1.sceneBackgroundPos.Y = Game1.screenPosition.Y - (float)Game1.offScreenRange;
                    }
                    if (Game1.renderCount == 2)
                    {
                        this.RenderWalls();
                        Game1.sceneWallPos.X = Game1.screenPosition.X - (float)Game1.offScreenRange;
                        Game1.sceneWallPos.Y = Game1.screenPosition.Y - (float)Game1.offScreenRange;
                    }
                    if (Game1.renderCount == 3)
                    {
                        this.RenderTiles2();
                        Game1.sceneTile2Pos.X = Game1.screenPosition.X - (float)Game1.offScreenRange;
                        Game1.sceneTile2Pos.Y = Game1.screenPosition.Y - (float)Game1.offScreenRange;
                    }
                    if (Game1.renderCount == 1)
                    {
                        this.RenderWater();
                        Game1.sceneWaterPos.X = Game1.screenPosition.X - (float)Game1.offScreenRange;
                        Game1.sceneWaterPos.Y = Game1.screenPosition.Y - (float)Game1.offScreenRange;
                    }
                }
                if (Game1.render && !Game1.gameMenu)
                {
                    if (Math.Abs(Game1.sceneTilePos.X - (Game1.screenPosition.X - (float)Game1.offScreenRange)) > (float)Game1.offScreenRange || Math.Abs(Game1.sceneTilePos.Y - (Game1.screenPosition.Y - (float)Game1.offScreenRange)) > (float)Game1.offScreenRange)
                    {
                        this.RenderTiles();
                        Game1.sceneTilePos.X = Game1.screenPosition.X - (float)Game1.offScreenRange;
                        Game1.sceneTilePos.Y = Game1.screenPosition.Y - (float)Game1.offScreenRange;
                    }
                    if (Math.Abs(Game1.sceneTile2Pos.X - (Game1.screenPosition.X - (float)Game1.offScreenRange)) > (float)Game1.offScreenRange || Math.Abs(Game1.sceneTile2Pos.Y - (Game1.screenPosition.Y - (float)Game1.offScreenRange)) > (float)Game1.offScreenRange)
                    {
                        this.RenderTiles2();
                        Game1.sceneTile2Pos.X = Game1.screenPosition.X - (float)Game1.offScreenRange;
                        Game1.sceneTile2Pos.Y = Game1.screenPosition.Y - (float)Game1.offScreenRange;
                    }
                    if (Math.Abs(Game1.sceneBackgroundPos.X - (Game1.screenPosition.X - (float)Game1.offScreenRange)) > (float)Game1.offScreenRange || Math.Abs(Game1.sceneBackgroundPos.Y - (Game1.screenPosition.Y - (float)Game1.offScreenRange)) > (float)Game1.offScreenRange)
                    {
                        this.RenderBackground();
                        Game1.sceneBackgroundPos.X = Game1.screenPosition.X - (float)Game1.offScreenRange;
                        Game1.sceneBackgroundPos.Y = Game1.screenPosition.Y - (float)Game1.offScreenRange;
                    }
                    if (Math.Abs(Game1.sceneWallPos.X - (Game1.screenPosition.X - (float)Game1.offScreenRange)) > (float)Game1.offScreenRange || Math.Abs(Game1.sceneWallPos.Y - (Game1.screenPosition.Y - (float)Game1.offScreenRange)) > (float)Game1.offScreenRange)
                    {
                        this.RenderWalls();
                        Game1.sceneWallPos.X = Game1.screenPosition.X - (float)Game1.offScreenRange;
                        Game1.sceneWallPos.Y = Game1.screenPosition.Y - (float)Game1.offScreenRange;
                    }
                    if (Math.Abs(Game1.sceneWaterPos.X - (Game1.screenPosition.X - (float)Game1.offScreenRange)) > (float)Game1.offScreenRange || Math.Abs(Game1.sceneWaterPos.Y - (Game1.screenPosition.Y - (float)Game1.offScreenRange)) > (float)Game1.offScreenRange)
                    {
                        this.RenderWater();
                        Game1.sceneWaterPos.X = Game1.screenPosition.X - (float)Game1.offScreenRange;
                        Game1.sceneWaterPos.Y = Game1.screenPosition.Y - (float)Game1.offScreenRange;
                    }
                }
            }
            if (!Game1.loadMap)
            {
                if (!Game1.gameMenu)
                {
                    TimeLogger.DetailedDrawReset();
                    Stopwatch stopwatch2 = new Stopwatch();
                    stopwatch2.Start();
                    int num17 = 0;
                    int secX;
                    int secY;
                    while (stopwatch2.ElapsedMilliseconds < 5L && Game1.sectionManager.GetNextMapDraw(Game1.player[Game1.myPlayer].position, out secX, out secY))
                    {
                        this.DrawToMap_Section(secX, secY);
                        num17++;
                    }
                    TimeLogger.DetailedDrawTime(3);
                }
                if (Game1.updateMap)
                {
                    if (base.IsActive || Game1.netMode == 1)
                    {
                        if (Game1.refreshMap)
                        {
                            Game1.refreshMap = false;
                            Game1.sectionManager.ClearMapDraw();
                        }
                        this.DrawToMap();
                        Game1.updateMap = false;
                    }
                    else if (MapHelper.numUpdateTile > 0)
                    {
                        this.DrawToMap();
                    }
                    TimeLogger.DetailedDrawTime(4);
                }
            }
            this.bgParallax = 0.1;
            this.bgStart = (int)(-Math.IEEERemainder((double)Game1.screenPosition.X * this.bgParallax, (double)Game1.backgroundWidth[Game1.background]) - (double)(Game1.backgroundWidth[Game1.background] / 2));
            this.bgLoops = Game1.screenWidth / Game1.backgroundWidth[Game1.background] + 2;
            this.bgStartY = 0;
            this.bgLoopsY = 0;
            this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y) / (Game1.worldSurface * 16.0 - 600.0) * 200.0);
            Game1.bgColor = Microsoft.Xna.Framework.Color.White;
            if (Game1.gameMenu || Game1.netMode == 2)
            {
                this.bgTop = -200;
            }
            int num18 = (int)(Game1.time / 54000.0 * (double)(Game1.screenWidth + Game1.sunTexture.Width * 2)) - Game1.sunTexture.Width;
            int num19 = 0;
            Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
            float num20 = 1f;
            float rotation = (float)(Game1.time / 54000.0) * 2f - 7.3f;
            int num21 = (int)(Game1.time / 32400.0 * (double)(Game1.screenWidth + Game1.moonTexture[Game1.moonType].Width * 2)) - Game1.moonTexture[Game1.moonType].Width;
            int num22 = 0;
            Microsoft.Xna.Framework.Color white2 = Microsoft.Xna.Framework.Color.White;
            float num23 = 1f;
            float rotation2 = (float)(Game1.time / 32400.0) * 2f - 7.3f;
            if (Game1.dayTime)
            {
                double num24;
                if (Game1.time < 27000.0)
                {
                    num24 = Math.Pow(1.0 - Game1.time / 54000.0 * 2.0, 2.0);
                    num19 = (int)((double)this.bgTop + num24 * 250.0 + 180.0);
                }
                else
                {
                    num24 = Math.Pow((Game1.time / 54000.0 - 0.5) * 2.0, 2.0);
                    num19 = (int)((double)this.bgTop + num24 * 250.0 + 180.0);
                }
                num20 = (float)(1.2 - num24 * 0.4);
            }
            else
            {
                double num25;
                if (Game1.time < 16200.0)
                {
                    num25 = Math.Pow(1.0 - Game1.time / 32400.0 * 2.0, 2.0);
                    num22 = (int)((double)this.bgTop + num25 * 250.0 + 180.0);
                }
                else
                {
                    num25 = Math.Pow((Game1.time / 32400.0 - 0.5) * 2.0, 2.0);
                    num22 = (int)((double)this.bgTop + num25 * 250.0 + 180.0);
                }
                num23 = (float)(1.2 - num25 * 0.4);
            }
            if (Game1.dayTime)
            {
                if (Game1.time < 13500.0)
                {
                    float num26 = (float)(Game1.time / 13500.0);
                    white.R = (byte)(num26 * 200f + 55f);
                    white.G = (byte)(num26 * 180f + 75f);
                    white.B = (byte)(num26 * 250f + 5f);
                    Game1.bgColor.R = (byte)(num26 * 230f + 25f);
                    Game1.bgColor.G = (byte)(num26 * 220f + 35f);
                    Game1.bgColor.B = (byte)(num26 * 220f + 35f);
                }
                if (Game1.time > 45900.0)
                {
                    float num26 = (float)(1.0 - (Game1.time / 54000.0 - 0.85) * 6.666666666666667);
                    white.R = (byte)(num26 * 120f + 55f);
                    white.G = (byte)(num26 * 100f + 25f);
                    white.B = (byte)(num26 * 120f + 55f);
                    Game1.bgColor.R = (byte)(num26 * 200f + 35f);
                    Game1.bgColor.G = (byte)(num26 * 85f + 35f);
                    Game1.bgColor.B = (byte)(num26 * 135f + 35f);
                }
                else if (Game1.time > 37800.0)
                {
                    float num26 = (float)(1.0 - (Game1.time / 54000.0 - 0.7) * 6.666666666666667);
                    white.R = (byte)(num26 * 80f + 175f);
                    white.G = (byte)(num26 * 130f + 125f);
                    white.B = (byte)(num26 * 100f + 155f);
                    Game1.bgColor.R = (byte)(num26 * 20f + 235f);
                    Game1.bgColor.G = (byte)(num26 * 135f + 120f);
                    Game1.bgColor.B = (byte)(num26 * 85f + 170f);
                }
            }
            if (!Game1.dayTime)
            {
                if (Game1.bloodMoon)
                {
                    if (Game1.time < 16200.0)
                    {
                        float num26 = (float)(1.0 - Game1.time / 16200.0);
                        white2.R = (byte)(num26 * 10f + 205f);
                        white2.G = (byte)(num26 * 170f + 55f);
                        white2.B = (byte)(num26 * 200f + 55f);
                        Game1.bgColor.R = (byte)(40f - num26 * 40f + 35f);
                        Game1.bgColor.G = (byte)(num26 * 20f + 15f);
                        Game1.bgColor.B = (byte)(num26 * 20f + 15f);
                    }
                    else if (Game1.time >= 16200.0)
                    {
                        float num26 = (float)((Game1.time / 32400.0 - 0.5) * 2.0);
                        white2.R = (byte)(num26 * 50f + 205f);
                        white2.G = (byte)(num26 * 100f + 155f);
                        white2.B = (byte)(num26 * 100f + 155f);
                        white2.R = (byte)(num26 * 10f + 205f);
                        white2.G = (byte)(num26 * 170f + 55f);
                        white2.B = (byte)(num26 * 200f + 55f);
                        Game1.bgColor.R = (byte)(40f - num26 * 40f + 35f);
                        Game1.bgColor.G = (byte)(num26 * 20f + 15f);
                        Game1.bgColor.B = (byte)(num26 * 20f + 15f);
                    }
                }
                else if (Game1.time < 16200.0)
                {
                    float num26 = (float)(1.0 - Game1.time / 16200.0);
                    white2.R = (byte)(num26 * 10f + 205f);
                    white2.G = (byte)(num26 * 70f + 155f);
                    white2.B = (byte)(num26 * 100f + 155f);
                    Game1.bgColor.R = (byte)(num26 * 30f + 5f);
                    Game1.bgColor.G = (byte)(num26 * 30f + 5f);
                    Game1.bgColor.B = (byte)(num26 * 30f + 5f);
                }
                else if (Game1.time >= 16200.0)
                {
                    float num26 = (float)((Game1.time / 32400.0 - 0.5) * 2.0);
                    white2.R = (byte)(num26 * 50f + 205f);
                    white2.G = (byte)(num26 * 100f + 155f);
                    white2.B = (byte)(num26 * 100f + 155f);
                    Game1.bgColor.R = (byte)(num26 * 20f + 5f);
                    Game1.bgColor.G = (byte)(num26 * 30f + 5f);
                    Game1.bgColor.B = (byte)(num26 * 30f + 5f);
                }
            }
            float num27 = 0.0005f * (float)Game1.dayRate;
            if (Game1.gameMenu)
            {
                num27 *= 20f;
            }
            if (Game1.raining)
            {
                if (Game1.cloudAlpha > Game1.maxRaining)
                {
                    Game1.cloudAlpha -= num27;
                    if (Game1.cloudAlpha < Game1.maxRaining)
                    {
                        Game1.cloudAlpha = Game1.maxRaining;
                    }
                }
                else if (Game1.cloudAlpha < Game1.maxRaining)
                {
                    Game1.cloudAlpha += num27;
                    if (Game1.cloudAlpha > Game1.maxRaining)
                    {
                        Game1.cloudAlpha = Game1.maxRaining;
                    }
                }
            }
            else
            {
                Game1.cloudAlpha -= num27;
                if (Game1.cloudAlpha < 0f)
                {
                    Game1.cloudAlpha = 0f;
                }
            }
            if (Game1.cloudAlpha > 0f)
            {
                float num28 = 1f - Game1.cloudAlpha * 0.9f;
                Game1.bgColor.R = (byte)((float)Game1.bgColor.R * num28);
                Game1.bgColor.G = (byte)((float)Game1.bgColor.G * num28);
                Game1.bgColor.B = (byte)((float)Game1.bgColor.B * num28);
            }
            if (Game1.gameMenu || Game1.netMode == 2)
            {
                this.bgTop = 0;
                if (!Game1.dayTime)
                {
                    Game1.bgColor.R = 35;
                    Game1.bgColor.G = 35;
                    Game1.bgColor.B = 35;
                }
            }
            if (Game1.gameMenu)
            {
                Game1.bgDelay = 1000;
                Game1.evilTiles = (int)(Game1.bgAlpha[1] * 500f);
            }
            if (Game1.evilTiles > 0)
            {
                float num29 = (float)Game1.evilTiles / 500f;
                if (num29 > 1f)
                {
                    num29 = 1f;
                }
                int num30 = (int)Game1.bgColor.R;
                int num31 = (int)Game1.bgColor.G;
                int num32 = (int)Game1.bgColor.B;
                num30 -= (int)(100f * num29 * ((float)Game1.bgColor.R / 255f));
                num31 -= (int)(140f * num29 * ((float)Game1.bgColor.G / 255f));
                num32 -= (int)(80f * num29 * ((float)Game1.bgColor.B / 255f));
                if (num30 < 15)
                {
                    num30 = 15;
                }
                if (num31 < 15)
                {
                    num31 = 15;
                }
                if (num32 < 15)
                {
                    num32 = 15;
                }
                Game1.bgColor.R = (byte)num30;
                Game1.bgColor.G = (byte)num31;
                Game1.bgColor.B = (byte)num32;
                num30 = (int)white.R;
                num31 = (int)white.G;
                num32 = (int)white.B;
                num30 -= (int)(100f * num29 * ((float)white.R / 255f));
                num31 -= (int)(100f * num29 * ((float)white.G / 255f));
                num32 -= (int)(0f * num29 * ((float)white.B / 255f));
                if (num30 < 15)
                {
                    num30 = 15;
                }
                if (num31 < 15)
                {
                    num31 = 15;
                }
                if (num32 < 15)
                {
                    num32 = 15;
                }
                white.R = (byte)num30;
                white.G = (byte)num31;
                white.B = (byte)num32;
                num30 = (int)white2.R;
                num31 = (int)white2.G;
                num32 = (int)white2.B;
                num30 -= (int)(140f * num29 * ((float)white2.R / 255f));
                num31 -= (int)(190f * num29 * ((float)white2.G / 255f));
                num32 -= (int)(170f * num29 * ((float)white2.B / 255f));
                if (num30 < 15)
                {
                    num30 = 15;
                }
                if (num31 < 15)
                {
                    num31 = 15;
                }
                if (num32 < 15)
                {
                    num32 = 15;
                }
                white2.R = (byte)num30;
                white2.G = (byte)num31;
                white2.B = (byte)num32;
            }
            if (Game1.bloodTiles > 0)
            {
                float num33 = (float)Game1.bloodTiles / 400f;
                if (num33 > 1f)
                {
                    num33 = 1f;
                }
                int num34 = (int)Game1.bgColor.R;
                int num35 = (int)Game1.bgColor.G;
                int num36 = (int)Game1.bgColor.B;
                num34 -= (int)(70f * num33 * ((float)Game1.bgColor.G / 255f));
                num35 -= (int)(110f * num33 * ((float)Game1.bgColor.G / 255f));
                num36 -= (int)(150f * num33 * ((float)Game1.bgColor.B / 255f));
                if (num34 < 15)
                {
                    num34 = 15;
                }
                if (num35 < 15)
                {
                    num35 = 15;
                }
                if (num36 < 15)
                {
                    num36 = 15;
                }
                Game1.bgColor.R = (byte)num34;
                Game1.bgColor.G = (byte)num35;
                Game1.bgColor.B = (byte)num36;
                num34 = (int)white.R;
                num35 = (int)white.G;
                num36 = (int)white.B;
                num35 -= (int)(90f * num33 * ((float)white.G / 255f));
                num36 -= (int)(110f * num33 * ((float)white.B / 255f));
                if (num34 < 15)
                {
                    num34 = 15;
                }
                if (num35 < 15)
                {
                    num35 = 15;
                }
                if (num36 < 15)
                {
                    num36 = 15;
                }
                white.R = (byte)num34;
                white.G = (byte)num35;
                white.B = (byte)num36;
                num34 = (int)white2.R;
                num35 = (int)white2.G;
                num36 = (int)white2.B;
                num34 -= (int)(100f * num33 * ((float)white2.R / 255f));
                num35 -= (int)(120f * num33 * ((float)white2.G / 255f));
                num36 -= (int)(180f * num33 * ((float)white2.B / 255f));
                if (num34 < 15)
                {
                    num34 = 15;
                }
                if (num35 < 15)
                {
                    num35 = 15;
                }
                if (num36 < 15)
                {
                    num36 = 15;
                }
                white2.R = (byte)num34;
                white2.G = (byte)num35;
                white2.B = (byte)num36;
            }
            if (Game1.jungleTiles > 0)
            {
                float num37 = (float)Game1.jungleTiles / 200f;
                if (num37 > 1f)
                {
                    num37 = 1f;
                }
                int num38 = (int)Game1.bgColor.R;
                int num39 = (int)Game1.bgColor.G;
                int num40 = (int)Game1.bgColor.B;
                num38 -= (int)(40f * num37 * ((float)Game1.bgColor.R / 255f));
                num40 -= (int)(70f * num37 * ((float)Game1.bgColor.B / 255f));
                if (num39 > 255)
                {
                    num39 = 255;
                }
                if (num39 < 15)
                {
                    num39 = 15;
                }
                if (num38 > 255)
                {
                    num38 = 255;
                }
                if (num38 < 15)
                {
                    num38 = 15;
                }
                if (num40 < 15)
                {
                    num40 = 15;
                }
                Game1.bgColor.R = (byte)num38;
                Game1.bgColor.G = (byte)num39;
                Game1.bgColor.B = (byte)num40;
                num38 = (int)white.R;
                num39 = (int)white.G;
                num40 = (int)white.B;
                num38 -= (int)(30f * num37 * ((float)white.R / 255f));
                num40 -= (int)(10f * num37 * ((float)white.B / 255f));
                if (num38 < 15)
                {
                    num38 = 15;
                }
                if (num39 < 15)
                {
                    num39 = 15;
                }
                if (num40 < 15)
                {
                    num40 = 15;
                }
                white.R = (byte)num38;
                white.G = (byte)num39;
                white.B = (byte)num40;
                num38 = (int)white2.R;
                num39 = (int)white2.G;
                num40 = (int)white2.B;
                num39 -= (int)(140f * num37 * ((float)white2.R / 255f));
                num38 -= (int)(170f * num37 * ((float)white2.G / 255f));
                num40 -= (int)(190f * num37 * ((float)white2.B / 255f));
                if (num38 < 15)
                {
                    num38 = 15;
                }
                if (num39 < 15)
                {
                    num39 = 15;
                }
                if (num40 < 15)
                {
                    num40 = 15;
                }
                white2.R = (byte)num38;
                white2.G = (byte)num39;
                white2.B = (byte)num40;
            }
            if (Game1.shroomTiles > 0)
            {
                float num41 = (float)Game1.shroomTiles / 160f;
                if (num41 > Game1.shroomLight)
                {
                    Game1.shroomLight += 0.01f;
                }
                if (num41 < Game1.shroomLight)
                {
                    Game1.shroomLight -= 0.01f;
                }
            }
            else
            {
                Game1.shroomLight -= 0.02f;
            }
            if (Game1.shroomLight < 0f)
            {
                Game1.shroomLight = 0f;
            }
            if (Game1.shroomLight > 1f)
            {
                Game1.shroomLight = 1f;
            }
            if (Game1.shroomLight > 0f)
            {
                float num42 = Game1.shroomLight;
                int num43 = (int)Game1.bgColor.R;
                int num44 = (int)Game1.bgColor.G;
                int num45 = (int)Game1.bgColor.B;
                num44 -= (int)(250f * num42 * ((float)Game1.bgColor.G / 255f));
                num43 -= (int)(250f * num42 * ((float)Game1.bgColor.R / 255f));
                num45 -= (int)(250f * num42 * ((float)Game1.bgColor.B / 255f));
                if (num44 < 15)
                {
                    num44 = 15;
                }
                if (num43 < 15)
                {
                    num43 = 15;
                }
                if (num45 < 15)
                {
                    num45 = 15;
                }
                Game1.bgColor.R = (byte)num43;
                Game1.bgColor.G = (byte)num44;
                Game1.bgColor.B = (byte)num45;
                num43 = (int)white.R;
                num44 = (int)white.G;
                num45 = (int)white.B;
                num44 -= (int)(10f * num42 * ((float)white.G / 255f));
                num43 -= (int)(30f * num42 * ((float)white.R / 255f));
                num45 -= (int)(10f * num42 * ((float)white.B / 255f));
                if (num43 < 15)
                {
                    num43 = 15;
                }
                if (num44 < 15)
                {
                    num44 = 15;
                }
                if (num45 < 15)
                {
                    num45 = 15;
                }
                white.R = (byte)num43;
                white.G = (byte)num44;
                white.B = (byte)num45;
                num43 = (int)white2.R;
                num44 = (int)white2.G;
                num45 = (int)white2.B;
                num44 -= (int)(140f * num42 * ((float)white2.R / 255f));
                num43 -= (int)(170f * num42 * ((float)white2.G / 255f));
                num45 -= (int)(190f * num42 * ((float)white2.B / 255f));
                if (num43 < 15)
                {
                    num43 = 15;
                }
                if (num44 < 15)
                {
                    num44 = 15;
                }
                if (num45 < 15)
                {
                    num45 = 15;
                }
                white2.R = (byte)num43;
                white2.G = (byte)num44;
                white2.B = (byte)num45;
            }
            if (Lighting.lightMode < 2)
            {
                if (Game1.bgColor.R < 10)
                {
                    Game1.bgColor.R = 10;
                }
                if (Game1.bgColor.G < 10)
                {
                    Game1.bgColor.G = 10;
                }
                if (Game1.bgColor.B < 10)
                {
                    Game1.bgColor.B = 10;
                }
            }
            else
            {
                if (Game1.bgColor.R < 15)
                {
                    Game1.bgColor.R = 15;
                }
                if (Game1.bgColor.G < 15)
                {
                    Game1.bgColor.G = 15;
                }
                if (Game1.bgColor.B < 15)
                {
                    Game1.bgColor.B = 15;
                }
            }
            if (Game1.bloodMoon)
            {
                if (Game1.bgColor.R < 25)
                {
                    Game1.bgColor.R = 25;
                }
                if (Game1.bgColor.G < 25)
                {
                    Game1.bgColor.G = 25;
                }
                if (Game1.bgColor.B < 25)
                {
                    Game1.bgColor.B = 25;
                }
            }
            if (Game1.eclipse && Game1.dayTime)
            {
                float num46 = 1242f;
                Game1.eclipseLight = (float)(Game1.time / (double)num46);
                if (Game1.eclipseLight > 1f)
                {
                    Game1.eclipseLight = 1f;
                }
            }
            else if (Game1.eclipseLight > 0f)
            {
                Game1.eclipseLight -= 0.01f;
                if (Game1.eclipseLight < 0f)
                {
                    Game1.eclipseLight = 0f;
                }
            }
            if (Game1.eclipseLight > 0f)
            {
                float num47 = 1f - 0.925f * Game1.eclipseLight;
                float num48 = 1f - 0.96f * Game1.eclipseLight;
                float num49 = 1f - 1f * Game1.eclipseLight;
                int num50 = (int)((float)Game1.bgColor.R * num47);
                int num51 = (int)((float)Game1.bgColor.G * num48);
                int num52 = (int)((float)Game1.bgColor.B * num49);
                Game1.bgColor.R = (byte)num50;
                Game1.bgColor.G = (byte)num51;
                Game1.bgColor.B = (byte)num52;
                white.R = 255;
                white.G = 127;
                white.B = 67;
                if (Game1.bgColor.R < 20)
                {
                    Game1.bgColor.R = 20;
                }
                if (Game1.bgColor.G < 10)
                {
                    Game1.bgColor.G = 10;
                }
                if (Lighting.lightMode >= 2)
                {
                    if (Game1.bgColor.R < 20)
                    {
                        Game1.bgColor.R = 20;
                    }
                    if (Game1.bgColor.G < 14)
                    {
                        Game1.bgColor.G = 14;
                    }
                    if (Game1.bgColor.B < 6)
                    {
                        Game1.bgColor.B = 6;
                    }
                }
            }
            Game1.tileColor.A = 255;
            Game1.tileColor.R = (byte)((Game1.bgColor.R + Game1.bgColor.G + Game1.bgColor.B + Game1.bgColor.R * 7) / 10);
            Game1.tileColor.G = (byte)((Game1.bgColor.R + Game1.bgColor.G + Game1.bgColor.B + Game1.bgColor.G * 7) / 10);
            Game1.tileColor.B = (byte)((Game1.bgColor.R + Game1.bgColor.G + Game1.bgColor.B + Game1.bgColor.B * 7) / 10);
            Game1.tileColor = SkyManager.Instance.ProcessTileColor(Game1.tileColor);
            float num53 = (float)(Game1.maxTilesX / 4200);
            num53 *= num53;
            Game1.atmo = (float)((double)((Game1.screenPosition.Y + (float)(Game1.screenHeight / 2)) / 16f - (65f + 10f * num53)) / (Game1.worldSurface / 5.0));
            if (Game1.atmo < 0f)
            {
                Game1.atmo = 0f;
            }
            if (Game1.atmo > 1f)
            {
                Game1.atmo = 1f;
            }
            if (Game1.gameMenu)
            {
                Game1.atmo = 1f;
            }
            Game1.bgColor.R = (byte)((float)Game1.bgColor.R * Game1.atmo);
            Game1.bgColor.G = (byte)((float)Game1.bgColor.G * Game1.atmo);
            Game1.bgColor.B = (byte)((float)Game1.bgColor.B * Game1.atmo);
            if ((double)Game1.atmo <= 0.05)
            {
                Game1.bgColor.R = 0;
                Game1.bgColor.G = 0;
                Game1.bgColor.B = 0;
                Game1.bgColor.A = 0;
            }
            base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Black);
            base.Draw(gameTime);
            if (Game1.gameMenu || Game1.player[Game1.myPlayer].gravDir == 1f)
            {
                this.Transform = Matrix.CreateScale(1f, 1f, 1f) * Matrix.CreateRotationZ(0f) * Matrix.CreateTranslation(new Vector3(0f, 0f, 0f));
                this.Rasterizer = RasterizerState.CullCounterClockwise;
            }
            else
            {
                this.Transform = Matrix.CreateScale(1f, -1f, 1f) * Matrix.CreateRotationZ(0f) * Matrix.CreateTranslation(new Vector3(0f, (float)Game1.screenHeight, 0f));
                this.Rasterizer = RasterizerState.CullClockwise;
            }
            bool flag = !Game1.drawToScreen && Game1.netMode != 2 && !Game1.gameMenu && !Game1.mapFullscreen && Filters.Scene.HasActiveFilter();
            if (flag)
            {
                base.GraphicsDevice.SetRenderTarget(this.screenTarget);
                base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Black);
            }
            Game1.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
            TimeLogger.DetailedDrawReset();
            if (!Game1.mapFullscreen)
            {
                this.unityMouseOver = false;
                if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0)
                {
                    for (int i = 0; i < this.bgLoops; i++)
                    {
                        Game1.spriteBatch.Draw(Game1.backgroundTexture[Game1.background], new Microsoft.Xna.Framework.Rectangle(this.bgStart + Game1.backgroundWidth[Game1.background] * i, this.bgTop, Game1.backgroundWidth[Game1.background], Game1.backgroundHeight[Game1.background]), Game1.bgColor);
                    }
                    TimeLogger.DetailedDrawTime(6);
                }
                if ((double)Game1.screenPosition.Y < Game1.worldSurface * 16.0 + 16.0 && 255f * (1f - Game1.cloudAlpha) - (float)Game1.bgColor.R - 25f > 0f && Game1.netMode != 2)
                {
                    for (int j = 0; j < Game1.numStars; j++)
                    {
                        Microsoft.Xna.Framework.Color color = default(Microsoft.Xna.Framework.Color);
                        float num54 = (float)Game1.evilTiles / 500f;
                        if (num54 > 1f)
                        {
                            num54 = 1f;
                        }
                        num54 = 1f - num54 * 0.5f;
                        if (Game1.evilTiles <= 0)
                        {
                            num54 = 1f;
                        }
                        int num55 = (int)((float)(255 - Game1.bgColor.R - 100) * Game1.star[j].twinkle * num54);
                        int num56 = (int)((float)(255 - Game1.bgColor.G - 100) * Game1.star[j].twinkle * num54);
                        int num57 = (int)((float)(255 - Game1.bgColor.B - 100) * Game1.star[j].twinkle * num54);
                        if (num55 < 0)
                        {
                            num55 = 0;
                        }
                        if (num56 < 0)
                        {
                            num56 = 0;
                        }
                        if (num57 < 0)
                        {
                            num57 = 0;
                        }
                        color.R = (byte)num55;
                        color.G = (byte)((float)num56 * num54);
                        color.B = (byte)((float)num57 * num54);
                        float num58 = Game1.star[j].position.X * ((float)Game1.screenWidth / 800f);
                        float num59 = Game1.star[j].position.Y * ((float)Game1.screenHeight / 600f);
                        Game1.spriteBatch.Draw(Game1.starTexture[Game1.star[j].type], new Vector2(num58 + (float)Game1.starTexture[Game1.star[j].type].Width * 0.5f, num59 + (float)Game1.starTexture[Game1.star[j].type].Height * 0.5f + (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.starTexture[Game1.star[j].type].Width, Game1.starTexture[Game1.star[j].type].Height)), color, Game1.star[j].rotation, new Vector2((float)Game1.starTexture[Game1.star[j].type].Width * 0.5f, (float)Game1.starTexture[Game1.star[j].type].Height * 0.5f), Game1.star[j].scale * Game1.star[j].twinkle, SpriteEffects.None, 0f);
                    }
                }
                if ((double)(Game1.screenPosition.Y / 16f) < Game1.worldSurface + 2.0)
                {
                    if (Game1.dayTime)
                    {
                        num20 *= 1.1f;
                        if (Game1.eclipse)
                        {
                            float num60 = 1f - Game1.shroomLight;
                            num60 -= Game1.cloudAlpha * 1.5f;
                            if (num60 < 0f)
                            {
                                num60 = 0f;
                            }
                            Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num60)), (int)((byte)((float)white.G * num60)), (int)((byte)((float)white.B * num60)), (int)((byte)(255f * num60)));
                            Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color((int)((byte)((float)white.R * num60)), (int)((byte)((float)white.G * num60)), (int)((byte)((float)white.B * num60)), (int)((byte)((float)(white.B - 60) * num60)));
                            Game1.spriteBatch.Draw(Game1.sun3Texture, new Vector2((float)num18, (float)(num19 + (int)Game1.sunModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.sun3Texture.Width, Game1.sun3Texture.Height)), color2, rotation, new Vector2((float)(Game1.sun3Texture.Width / 2), (float)(Game1.sun3Texture.Height / 2)), num20, SpriteEffects.None, 0f);
                            Game1.spriteBatch.Draw(Game1.sun3Texture, new Vector2((float)num18, (float)(num19 + (int)Game1.sunModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.sun3Texture.Width, Game1.sun3Texture.Height)), color3, rotation, new Vector2((float)(Game1.sun3Texture.Width / 2), (float)(Game1.sun3Texture.Height / 2)), num20, SpriteEffects.None, 0f);
                        }
                        else if (!Game1.gameMenu && Game1.player[Game1.myPlayer].head == 12)
                        {
                            float num61 = 1f - Game1.shroomLight;
                            num61 -= Game1.cloudAlpha * 1.5f;
                            if (num61 < 0f)
                            {
                                num61 = 0f;
                            }
                            Microsoft.Xna.Framework.Color color4 = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num61)), (int)((byte)((float)white.G * num61)), (int)((byte)((float)white.B * num61)), (int)((byte)(255f * num61)));
                            Microsoft.Xna.Framework.Color color5 = new Microsoft.Xna.Framework.Color((int)((byte)((float)white.R * num61)), (int)((byte)((float)white.G * num61)), (int)((byte)((float)white.B * num61)), (int)((byte)((float)(white.B - 60) * num61)));
                            Game1.spriteBatch.Draw(Game1.sun2Texture, new Vector2((float)num18, (float)(num19 + (int)Game1.sunModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.sun2Texture.Width, Game1.sun2Texture.Height)), color4, rotation, new Vector2((float)(Game1.sun2Texture.Width / 2), (float)(Game1.sun2Texture.Height / 2)), num20, SpriteEffects.None, 0f);
                            Game1.spriteBatch.Draw(Game1.sun2Texture, new Vector2((float)num18, (float)(num19 + (int)Game1.sunModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.sun2Texture.Width, Game1.sun2Texture.Height)), color5, rotation, new Vector2((float)(Game1.sun2Texture.Width / 2), (float)(Game1.sun2Texture.Height / 2)), num20, SpriteEffects.None, 0f);
                        }
                        else
                        {
                            float num62 = 1f - Game1.shroomLight;
                            num62 -= Game1.cloudAlpha * 1.5f;
                            if (num62 < 0f)
                            {
                                num62 = 0f;
                            }
                            Microsoft.Xna.Framework.Color color6 = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num62)), (int)((byte)((float)white.G * num62)), (int)((byte)((float)white.B * num62)), (int)((byte)(255f * num62)));
                            Microsoft.Xna.Framework.Color color7 = new Microsoft.Xna.Framework.Color((int)((byte)((float)white.R * num62)), (int)((byte)((float)white.G * num62)), (int)((byte)((float)white.B * num62)), (int)((byte)((float)white.B * num62)));
                            Game1.spriteBatch.Draw(Game1.sunTexture, new Vector2((float)num18, (float)(num19 + (int)Game1.sunModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.sunTexture.Width, Game1.sunTexture.Height)), color6, rotation, new Vector2((float)(Game1.sunTexture.Width / 2), (float)(Game1.sunTexture.Height / 2)), num20, SpriteEffects.None, 0f);
                            Game1.spriteBatch.Draw(Game1.sunTexture, new Vector2((float)num18, (float)(num19 + (int)Game1.sunModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.sunTexture.Width, Game1.sunTexture.Height)), color7, rotation, new Vector2((float)(Game1.sunTexture.Width / 2), (float)(Game1.sunTexture.Height / 2)), num20, SpriteEffects.None, 0f);
                        }
                    }
                    if (!Game1.dayTime)
                    {
                        float num63 = 1f - Game1.cloudAlpha * 1.5f;
                        if (num63 < 0f)
                        {
                            num63 = 0f;
                        }
                        white2.R = (byte)((float)white2.R * num63);
                        white2.G = (byte)((float)white2.G * num63);
                        white2.B = (byte)((float)white2.B * num63);
                        white2.A = (byte)((float)white2.A * num63);
                        if (Game1.pumpkinMoon)
                        {
                            Game1.spriteBatch.Draw(Game1.pumpkinMoonTexture, new Vector2((float)num21, (float)(num22 + (int)Game1.moonModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.pumpkinMoonTexture.Width * Game1.moonPhase, Game1.pumpkinMoonTexture.Width, Game1.pumpkinMoonTexture.Width)), white2, rotation2, new Vector2((float)(Game1.pumpkinMoonTexture.Width / 2), (float)(Game1.pumpkinMoonTexture.Width / 2)), num23, SpriteEffects.None, 0f);
                        }
                        else if (Game1.snowMoon)
                        {
                            Game1.spriteBatch.Draw(Game1.snowMoonTexture, new Vector2((float)num21, (float)(num22 + (int)Game1.moonModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.snowMoonTexture.Width * Game1.moonPhase, Game1.snowMoonTexture.Width, Game1.snowMoonTexture.Width)), white2, rotation2, new Vector2((float)(Game1.snowMoonTexture.Width / 2), (float)(Game1.snowMoonTexture.Width / 2)), num23, SpriteEffects.None, 0f);
                        }
                        else
                        {
                            Game1.spriteBatch.Draw(Game1.moonTexture[Game1.moonType], new Vector2((float)num21, (float)(num22 + (int)Game1.moonModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Game1.moonTexture[Game1.moonType].Width * Game1.moonPhase, Game1.moonTexture[Game1.moonType].Width, Game1.moonTexture[Game1.moonType].Width)), white2, rotation2, new Vector2((float)(Game1.moonTexture[Game1.moonType].Width / 2), (float)(Game1.moonTexture[Game1.moonType].Width / 2)), num23, SpriteEffects.None, 0f);
                        }
                    }
                }
                Microsoft.Xna.Framework.Rectangle value;
                if (Game1.dayTime)
                {
                    value = new Microsoft.Xna.Framework.Rectangle((int)((double)num18 - (double)Game1.sunTexture.Width * 0.5 * (double)num20), (int)((double)num19 - (double)Game1.sunTexture.Height * 0.5 * (double)num20 + (double)Game1.sunModY), (int)((float)Game1.sunTexture.Width * num20), (int)((float)Game1.sunTexture.Width * num20));
                }
                else
                {
                    value = new Microsoft.Xna.Framework.Rectangle((int)((double)num21 - (double)Game1.moonTexture[Game1.moonType].Width * 0.5 * (double)num23), (int)((double)num22 - (double)Game1.moonTexture[Game1.moonType].Width * 0.5 * (double)num23 + (double)Game1.moonModY), (int)((float)Game1.moonTexture[Game1.moonType].Width * num23), (int)((float)Game1.moonTexture[Game1.moonType].Width * num23));
                }
                Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(Game1.mouseX, Game1.mouseY, 1, 1);
                Game1.sunModY = (short)((double)Game1.sunModY * 0.999);
                Game1.moonModY = (short)((double)Game1.moonModY * 0.999);
                if (Game1.gameMenu && Game1.netMode != 1)
                {
                    if (Game1.mouseLeft && Game1.hasFocus)
                    {
                        if (rectangle.Intersects(value) || Game1.grabSky)
                        {
                            if (Game1.dayTime)
                            {
                                Game1.time = 54000.0 * (double)((float)(Game1.mouseX + Game1.sunTexture.Width) / ((float)Game1.screenWidth + (float)(Game1.sunTexture.Width * 2)));
                                Game1.sunModY = (short)(Game1.mouseY - num19);
                                if (Game1.time > 53990.0)
                                {
                                    Game1.time = 53990.0;
                                }
                            }
                            else
                            {
                                Game1.time = 32400.0 * (double)((float)(Game1.mouseX + Game1.moonTexture[Game1.moonType].Width) / ((float)Game1.screenWidth + (float)(Game1.moonTexture[Game1.moonType].Width * 2)));
                                Game1.moonModY = (short)(Game1.mouseY - num22);
                                if (Game1.time > 32390.0)
                                {
                                    Game1.time = 32390.0;
                                }
                            }
                            if (Game1.time < 10.0)
                            {
                                Game1.time = 10.0;
                            }
                            if (Game1.netMode != 0)
                            {
                                NetMessage.SendData(18, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
                            }
                            Game1.grabSky = true;
                        }
                    }
                    else
                    {
                        Game1.grabSky = false;
                    }
                }
                TimeLogger.DetailedDrawTime(7);
            }
            this.scAdj = 1f - (float)((double)(Game1.screenPosition.Y + (float)Game1.screenHeight) / (Game1.worldSurface * 16.0));
            this.scAdj = (float)(Game1.worldSurface * 16.0) / (Game1.screenPosition.Y + (float)Game1.screenHeight);
            float num64 = (float)Game1.maxTilesY * 0.15f * 16f;
            num64 -= Game1.screenPosition.Y;
            if (num64 < 0f)
            {
                num64 = 0f;
            }
            num64 *= 0.00025f;
            float num65 = num64 * num64;
            this.scAdj *= 0.45f - num65;
            if ((double)Game1.maxTilesY <= 1200.0)
            {
                this.scAdj *= -500f;
            }
            else if ((double)Game1.maxTilesY <= 1800.0)
            {
                this.scAdj *= -300f;
            }
            else
            {
                this.scAdj *= -150f;
            }
            this.screenOff = (float)(Game1.screenHeight - 600);
            this.bgTop = (int)((double)(-(double)Game1.screenPosition.Y + this.screenOff / 2f) / (Game1.worldSurface * 16.0) * 1200.0 + 1190.0) + (int)this.scAdj;
            this.cTop = (float)(this.bgTop - 50);
            if (Game1.resetClouds)
            {
                Cloud.resetClouds();
                Game1.resetClouds = false;
            }
            Game1.bgScale = 1f;
            Game1.bgW = (int)((float)Game1.backgroundWidth[Game1.treeMntBG[0]] * Game1.bgScale);
            Game1.backColor = Game1.bgColor;
            Game1.trueBackColor = Game1.backColor;
            int num66 = Game1.bgStyle;
            int num67 = (int)((Game1.screenPosition.X + (float)(Game1.screenWidth / 2)) / 16f);
            if ((double)(Game1.screenPosition.Y / 16f) < Game1.worldSurface + 10.0 && (num67 < 380 || num67 > Game1.maxTilesX - 380))
            {
                num66 = 4;
            }
            else if (Game1.shroomTiles > 100)
            {
                num66 = 9;
            }
            else if (Game1.sandTiles > 1000)
            {
                if (Game1.player[Game1.myPlayer].ZoneCorrupt)
                {
                    num66 = 5;
                }
                else if (Game1.player[Game1.myPlayer].ZoneCrimson)
                {
                    num66 = 5;
                }
                else if (Game1.player[Game1.myPlayer].ZoneHoly)
                {
                    num66 = 5;
                }
                else
                {
                    num66 = 2;
                }
            }
            else if (Game1.player[Game1.myPlayer].ZoneHoly)
            {
                num66 = 6;
            }
            else if (Game1.player[Game1.myPlayer].ZoneCorrupt)
            {
                num66 = 1;
            }
            else if (Game1.player[Game1.myPlayer].ZoneCrimson)
            {
                num66 = 8;
            }
            else if (Game1.player[Game1.myPlayer].ZoneJungle)
            {
                num66 = 3;
            }
            else if (Game1.player[Game1.myPlayer].ZoneSnow)
            {
                num66 = 7;
            }
            else
            {
                num66 = 0;
            }
            int num68 = 30;
            Game1.tranSpeed = 0.05f;
            if (num66 == 0)
            {
                num68 = 60;
            }
            if (Game1.bgDelay < 0)
            {
                Game1.bgDelay++;
            }
            else if (num66 != Game1.bgStyle)
            {
                Game1.bgDelay++;
                if (Game1.bgDelay > num68)
                {
                    Game1.bgDelay = -60;
                    Game1.bgStyle = num66;
                    if (num66 == 0)
                    {
                        Game1.bgDelay = 0;
                    }
                }
            }
            else if (Game1.bgDelay > 0)
            {
                Game1.bgDelay--;
            }
            if (Game1.gameMenu)
            {
                Game1.tranSpeed = 0.02f;
                if (!Game1.dayTime)
                {
                    Game1.bgStyle = 1;
                }
                else
                {
                    Game1.bgStyle = 0;
                }
                num66 = Game1.bgStyle;
            }
            if (Game1.quickBG > 0)
            {
                Game1.quickBG--;
                Game1.bgStyle = num66;
                Game1.tranSpeed = 1f;
            }
            if (Game1.bgStyle == 2)
            {
                Game1.bgAlpha2[0] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[0] < 0f)
                {
                    Game1.bgAlpha2[0] = 0f;
                }
                Game1.bgAlpha2[1] += Game1.tranSpeed;
                if (Game1.bgAlpha2[1] > 1f)
                {
                    Game1.bgAlpha2[1] = 1f;
                }
                Game1.bgAlpha2[2] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[2] < 0f)
                {
                    Game1.bgAlpha2[2] = 0f;
                }
                Game1.bgAlpha2[3] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[3] < 0f)
                {
                    Game1.bgAlpha2[3] = 0f;
                }
                Game1.bgAlpha2[4] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[4] < 0f)
                {
                    Game1.bgAlpha2[4] = 0f;
                }
                Game1.bgAlpha2[5] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[5] < 0f)
                {
                    Game1.bgAlpha2[5] = 0f;
                }
                Game1.bgAlpha2[6] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[6] < 0f)
                {
                    Game1.bgAlpha2[6] = 0f;
                }
            }
            else if (Game1.bgStyle == 5 || Game1.bgStyle == 1 || Game1.bgStyle == 6)
            {
                Game1.bgAlpha2[0] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[0] < 0f)
                {
                    Game1.bgAlpha2[0] = 0f;
                }
                Game1.bgAlpha2[1] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[1] < 0f)
                {
                    Game1.bgAlpha2[1] = 0f;
                }
                Game1.bgAlpha2[2] += Game1.tranSpeed;
                if (Game1.bgAlpha2[2] > 1f)
                {
                    Game1.bgAlpha2[2] = 1f;
                }
                Game1.bgAlpha2[3] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[3] < 0f)
                {
                    Game1.bgAlpha2[3] = 0f;
                }
                Game1.bgAlpha2[4] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[4] < 0f)
                {
                    Game1.bgAlpha2[4] = 0f;
                }
                Game1.bgAlpha2[5] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[5] < 0f)
                {
                    Game1.bgAlpha2[5] = 0f;
                }
                Game1.bgAlpha2[6] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[6] < 0f)
                {
                    Game1.bgAlpha2[6] = 0f;
                }
            }
            else if (Game1.bgStyle == 4)
            {
                Game1.bgAlpha2[0] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[0] < 0f)
                {
                    Game1.bgAlpha2[0] = 0f;
                }
                Game1.bgAlpha2[1] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[1] < 0f)
                {
                    Game1.bgAlpha2[1] = 0f;
                }
                Game1.bgAlpha2[2] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[2] < 0f)
                {
                    Game1.bgAlpha2[2] = 0f;
                }
                Game1.bgAlpha2[3] += Game1.tranSpeed;
                if (Game1.bgAlpha2[3] > 1f)
                {
                    Game1.bgAlpha2[3] = 1f;
                }
                Game1.bgAlpha2[4] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[4] < 0f)
                {
                    Game1.bgAlpha2[4] = 0f;
                }
                Game1.bgAlpha2[5] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[5] < 0f)
                {
                    Game1.bgAlpha2[5] = 0f;
                }
                Game1.bgAlpha2[6] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[6] < 0f)
                {
                    Game1.bgAlpha2[6] = 0f;
                }
            }
            else if (Game1.bgStyle == 7)
            {
                Game1.bgAlpha2[0] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[0] < 0f)
                {
                    Game1.bgAlpha2[0] = 0f;
                }
                Game1.bgAlpha2[1] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[1] < 0f)
                {
                    Game1.bgAlpha2[1] = 0f;
                }
                Game1.bgAlpha2[2] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[2] < 0f)
                {
                    Game1.bgAlpha2[2] = 0f;
                }
                Game1.bgAlpha2[3] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[3] < 0f)
                {
                    Game1.bgAlpha2[3] = 0f;
                }
                Game1.bgAlpha2[4] += Game1.tranSpeed;
                if (Game1.bgAlpha2[4] > 1f)
                {
                    Game1.bgAlpha2[4] = 1f;
                }
                Game1.bgAlpha2[5] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[5] < 0f)
                {
                    Game1.bgAlpha2[5] = 0f;
                }
                Game1.bgAlpha2[6] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[6] < 0f)
                {
                    Game1.bgAlpha2[6] = 0f;
                }
            }
            else if (Game1.bgStyle == 8)
            {
                Game1.bgAlpha2[0] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[0] < 0f)
                {
                    Game1.bgAlpha2[0] = 0f;
                }
                Game1.bgAlpha2[1] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[1] < 0f)
                {
                    Game1.bgAlpha2[1] = 0f;
                }
                Game1.bgAlpha2[2] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[2] < 0f)
                {
                    Game1.bgAlpha2[2] = 0f;
                }
                Game1.bgAlpha2[3] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[3] < 0f)
                {
                    Game1.bgAlpha2[3] = 0f;
                }
                Game1.bgAlpha2[4] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[4] < 0f)
                {
                    Game1.bgAlpha2[4] = 0f;
                }
                Game1.bgAlpha2[5] += Game1.tranSpeed;
                if (Game1.bgAlpha2[5] > 1f)
                {
                    Game1.bgAlpha2[5] = 1f;
                }
                Game1.bgAlpha2[6] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[6] < 0f)
                {
                    Game1.bgAlpha2[6] = 0f;
                }
            }
            else if (Game1.bgStyle == 9)
            {
                Game1.bgAlpha2[0] += Game1.tranSpeed;
                if (Game1.bgAlpha2[0] > 1f)
                {
                    Game1.bgAlpha2[0] = 1f;
                }
                Game1.bgAlpha2[1] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[1] < 0f)
                {
                    Game1.bgAlpha2[1] = 0f;
                }
                Game1.bgAlpha2[2] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[2] < 0f)
                {
                    Game1.bgAlpha2[2] = 0f;
                }
                Game1.bgAlpha2[3] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[3] < 0f)
                {
                    Game1.bgAlpha2[3] = 0f;
                }
                Game1.bgAlpha2[4] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[4] < 0f)
                {
                    Game1.bgAlpha2[4] = 0f;
                }
                Game1.bgAlpha2[5] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[5] < 0f)
                {
                    Game1.bgAlpha2[5] = 0f;
                }
                Game1.bgAlpha2[6] += Game1.tranSpeed;
                if (Game1.bgAlpha2[6] > 1f)
                {
                    Game1.bgAlpha2[6] = 1f;
                }
            }
            else
            {
                Game1.bgAlpha2[0] += Game1.tranSpeed;
                if (Game1.bgAlpha2[0] > 1f)
                {
                    Game1.bgAlpha2[0] = 1f;
                }
                Game1.bgAlpha2[1] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[1] < 0f)
                {
                    Game1.bgAlpha2[1] = 0f;
                }
                Game1.bgAlpha2[2] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[2] < 0f)
                {
                    Game1.bgAlpha2[2] = 0f;
                }
                Game1.bgAlpha2[3] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[3] < 0f)
                {
                    Game1.bgAlpha2[3] = 0f;
                }
                Game1.bgAlpha2[4] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[4] < 0f)
                {
                    Game1.bgAlpha2[4] = 0f;
                }
                Game1.bgAlpha2[5] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[5] < 0f)
                {
                    Game1.bgAlpha2[5] = 0f;
                }
                Game1.bgAlpha2[6] -= Game1.tranSpeed;
                if (Game1.bgAlpha2[6] < 0f)
                {
                    Game1.bgAlpha2[6] = 0f;
                }
            }
            if (Game1.ignoreErrors)
            {
                try
                {
                    this.DrawSurfaceBG();
                    if (Game1.owBack)
                    {
                        this.DrawUnderworldBackground(false);
                    }
                    goto IL_4535;
                }
                catch (Exception e)
                {
                    TimeLogger.DrawException(e);
                    goto IL_4535;
                }
            }
            this.DrawSurfaceBG();
            if (Game1.owBack)
            {
                this.DrawUnderworldBackground(false);
            }
        IL_4535:
            TimeLogger.DetailedDrawTime(8);
            if (Game1.gameMenu || Game1.netMode == 2)
            {
                bool isActive = base.IsActive;
                Microsoft.Xna.Framework.Rectangle[] array = new Microsoft.Xna.Framework.Rectangle[6];
                for (int k = 0; k < array.Length; k++)
                {
                    array[k] = new Microsoft.Xna.Framework.Rectangle(k * 4, 0, 2, 40);
                }
                Microsoft.Xna.Framework.Color color8 = Game1.bgColor * 0.85f;
                for (int l = 0; l < Game1.maxRain; l++)
                {
                    if (Game1.rain[l].active)
                    {
                        Rain rain = Game1.rain[l];
                        Game1.spriteBatch.Draw(Game1.rainTexture, rain.position - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(array[(int)rain.type]), color8, rain.rotation, Vector2.Zero, rain.scale, SpriteEffects.None, 0f);
                        if (isActive)
                        {
                            rain.Update();
                        }
                    }
                }

                // draw menu, watch key press, etc.
                DrawMenu(gameTime);

                TimeLogger.MenuDrawTime(stopwatch.Elapsed.TotalMilliseconds);
                TimeLogger.EndDrawFrame();
                return;
            }

            this.firstTileX = (int)(Game1.screenPosition.X / 16f - 1f);
            this.lastTileX = (int)((Game1.screenPosition.X + (float)Game1.screenWidth) / 16f) + 2;
            this.firstTileY = (int)(Game1.screenPosition.Y / 16f - 1f);
            this.lastTileY = (int)((Game1.screenPosition.Y + (float)Game1.screenHeight) / 16f) + 2;
            if (this.firstTileX < 0)
            {
                this.firstTileX = 0;
            }
            if (this.lastTileX > Game1.maxTilesX)
            {
                this.lastTileX = Game1.maxTilesX;
            }
            if (this.firstTileY < 0)
            {
                this.firstTileY = 0;
            }
            if (this.lastTileY > Game1.maxTilesY)
            {
                this.lastTileY = Game1.maxTilesY;
            }
            if (!Game1.drawSkip)
            {
                Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
            }
            TimeLogger.DetailedDrawReset();
            if (!Game1.mapFullscreen)
            {
                Microsoft.Xna.Framework.Color arg_4805_0 = Microsoft.Xna.Framework.Color.White;
                if (Game1.drawToScreen)
                {
                    this.drawWaters(true, -1, true);
                }
                else
                {
                    Game1.spriteBatch.Draw(this.backWaterTarget, Game1.sceneBackgroundPos - Game1.screenPosition, Microsoft.Xna.Framework.Color.White);
                    TimeLogger.DetailedDrawTime(11);
                }
                float x = (Game1.sceneBackgroundPos.X - Game1.screenPosition.X + (float)Game1.offScreenRange) * Game1.caveParallax - (float)Game1.offScreenRange;
                if (Game1.drawToScreen)
                {
                    this.DrawBackground();
                }
                else
                {
                    Game1.spriteBatch.Draw(this.backgroundTarget, new Vector2(x, Game1.sceneBackgroundPos.Y - Game1.screenPosition.Y), Microsoft.Xna.Framework.Color.White);
                    TimeLogger.DetailedDrawTime(12);
                }
                ScreenDarkness.DrawBack(Game1.spriteBatch);
                Game1.magmaBGFrameCounter++;
                if (Game1.magmaBGFrameCounter >= 8)
                {
                    Game1.magmaBGFrameCounter = 0;
                    Game1.magmaBGFrame++;
                    if (Game1.magmaBGFrame >= 3)
                    {
                        Game1.magmaBGFrame = 0;
                    }
                }
                try
                {
                    this.CacheNPCDraws();
                    this.CacheProjDraws();
                    this.DrawCachedNPCs(this.DrawCacheNPCsMoonMoon, true);
                    if (Game1.drawToScreen)
                    {
                        this.DrawBlack(false);
                        this.DrawWalls();
                    }
                    else
                    {
                        Game1.spriteBatch.Draw(this.blackTarget, Game1.sceneTilePos - Game1.screenPosition, Microsoft.Xna.Framework.Color.White);
                        TimeLogger.DetailedDrawTime(13);
                        Game1.spriteBatch.Draw(this.wallTarget, Game1.sceneWallPos - Game1.screenPosition, Microsoft.Xna.Framework.Color.White);
                        TimeLogger.DetailedDrawTime(14);
                    }
                    this.DrawWoF();
                    if (Game1.drawBackGore)
                    {
                        Game1.drawBackGore = false;
                        if (Game1.ignoreErrors)
                        {
                            try
                            {
                                this.DrawGoreBehind();
                                goto IL_49AB;
                            }
                            catch (Exception e2)
                            {
                                TimeLogger.DrawException(e2);
                                goto IL_49AB;
                            }
                        }
                        this.DrawGoreBehind();
                    }
                IL_49AB:
                    MoonlordDeathDrama.DrawPieces(Game1.spriteBatch);
                    MoonlordDeathDrama.DrawExplosions(Game1.spriteBatch);
                    if (Game1.player[Game1.myPlayer].detectCreature)
                    {
                        if (Game1.drawToScreen)
                        {
                            this.DrawTiles(false, -1);
                            TimeLogger.DetailedDrawReset();
                            this.waterfallManager.Draw(Game1.spriteBatch);
                            TimeLogger.DetailedDrawTime(16);
                            this.DrawTiles(true, -1);
                        }
                        else
                        {
                            Game1.spriteBatch.Draw(this.tile2Target, Game1.sceneTile2Pos - Game1.screenPosition, Microsoft.Xna.Framework.Color.White);
                            TimeLogger.DetailedDrawTime(15);
                            this.waterfallManager.Draw(Game1.spriteBatch);
                            TimeLogger.DetailedDrawTime(16);
                            Game1.spriteBatch.Draw(this.tileTarget, Game1.sceneTilePos - Game1.screenPosition, Microsoft.Xna.Framework.Color.White);
                            TimeLogger.DetailedDrawTime(17);
                        }
                        TimeLogger.DetailedDrawReset();
                        Game1.spriteBatch.End();
                        this.DrawCachedProjs(this.DrawCacheProjsBackground);
                        Game1.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
                        this.DrawNPCs(true);
                        TimeLogger.DetailedDrawTime(18);
                        this.DrawNPCs(false);
                        this.DrawCachedNPCs(this.DrawCacheNPCProjectiles, false);
                        TimeLogger.DetailedDrawTime(19);
                    }
                    else
                    {
                        if (Game1.drawToScreen)
                        {
                            this.DrawTiles(false, -1);
                            TimeLogger.DetailedDrawReset();
                            this.waterfallManager.Draw(Game1.spriteBatch);
                            TimeLogger.DetailedDrawTime(16);
                            Game1.spriteBatch.End();
                            this.DrawCachedProjs(this.DrawCacheProjsBackground);
                            Game1.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
                            this.DrawNPCs(true);
                            TimeLogger.DetailedDrawTime(18);
                            this.DrawTiles(true, -1);
                        }
                        else
                        {
                            Game1.spriteBatch.Draw(this.tile2Target, Game1.sceneTile2Pos - Game1.screenPosition, Microsoft.Xna.Framework.Color.White);
                            TimeLogger.DetailedDrawTime(15);
                            this.waterfallManager.Draw(Game1.spriteBatch);
                            TimeLogger.DetailedDrawTime(16);
                            Game1.spriteBatch.End();
                            this.DrawCachedProjs(this.DrawCacheProjsBackground);
                            Game1.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
                            this.DrawNPCs(true);
                            TimeLogger.DetailedDrawTime(18);
                            Game1.spriteBatch.Draw(this.tileTarget, Game1.sceneTilePos - Game1.screenPosition, Microsoft.Xna.Framework.Color.White);
                            TimeLogger.DetailedDrawTime(17);
                        }
                        TimeLogger.DetailedDrawReset();
                        this.DrawNPCs(false);
                        this.DrawCachedNPCs(this.DrawCacheNPCProjectiles, false);
                        TimeLogger.DetailedDrawTime(19);
                    }
                }
                catch (Exception e3)
                {
                    TimeLogger.DrawException(e3);
                }
                if (!Game1.mapFullscreen && Game1.mapStyle == 2)
                {
                    if (Game1.ignoreErrors)
                    {
                        try
                        {
                            this.DrawMap();
                            goto IL_4C7D;
                        }
                        catch (Exception e4)
                        {
                            TimeLogger.DrawException(e4);
                            goto IL_4C7D;
                        }
                    }
                    this.DrawMap();
                }
            IL_4C7D:
                TimeLogger.DetailedDrawReset();
                Game1.spriteBatch.End();
                TimeLogger.DetailedDrawTime(35);
                this.SortDrawCacheWorms();
                this.DrawCachedProjs(this.DrawCacheProjsWorms);
                this.DrawProjectiles();
                this.DrawPlayers();
                Game1.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
                this.DrawCachedNPCs(this.DrawCacheNPCsOverPlayers, false);
                if (!Game1.gamePaused)
                {
                    Game1.essScale += (float)Game1.essDir * 0.01f;
                    if (Game1.essScale > 1f)
                    {
                        Game1.essDir = -1;
                        Game1.essScale = 1f;
                    }
                    if ((double)Game1.essScale < 0.7)
                    {
                        Game1.essDir = 1;
                        Game1.essScale = 0.7f;
                    }
                }
                this.DrawItems();
                TimeLogger.DetailedDrawTime(22);
                this.DrawRain();
                if (Game1.ignoreErrors)
                {
                    try
                    {
                        this.DrawGore();
                        goto IL_4D73;
                    }
                    catch (Exception e5)
                    {
                        TimeLogger.DrawException(e5);
                        goto IL_4D73;
                    }
                }
                this.DrawGore();
            IL_4D73:
                Game1.spriteBatch.End();
                this.DrawDust();
                Game1.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
                if (Game1.drawToScreen)
                {
                    this.drawWaters(false, -1, true);
                    if (Game1.player[Game1.myPlayer].inventory[Game1.player[Game1.myPlayer].selectedItem].mech)
                    {
                        this.DrawWires();
                    }
                }
                else
                {
                    Game1.spriteBatch.Draw(this.waterTarget, Game1.sceneWaterPos - Game1.screenPosition, Microsoft.Xna.Framework.Color.White);
                    TimeLogger.DetailedDrawTime(26);
                }
                this.DrawInfernoRings();
                ScreenDarkness.DrawFront(Game1.spriteBatch);
                MoonlordDeathDrama.DrawWhite(Game1.spriteBatch);
                ScreenObstruction.Draw(Game1.spriteBatch);
                TimeLogger.DetailedDrawReset();
                Game1.spriteBatch.End();
                Game1.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
                Overlays.Scene.Draw(Game1.spriteBatch);
                Game1.spriteBatch.End();
                if (flag)
                {
                    base.GraphicsDevice.SetRenderTarget(null);
                    base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Black);
                    Game1.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.Additive);
                    Filters.Scene.Apply();
                    Game1.spriteBatch.Draw(this.screenTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
                    Game1.spriteBatch.End();
                }
                TimeLogger.DetailedDrawTime(36);
                Game1.spriteBatch.Begin();
                if (!Game1.hideUI)
                {
                    TimeLogger.DetailedDrawReset();
                    for (int m = 0; m < 255; m++)
                    {
                        if (Game1.player[m].active && Game1.player[m].chatOverhead.timeLeft > 0 && !Game1.player[m].dead)
                        {
                            Vector2 messageSize = Game1.player[m].chatOverhead.messageSize;
                            Vector2 vector;
                            vector.X = Game1.player[m].position.X + (float)(Game1.player[m].width / 2) - messageSize.X / 2f;
                            vector.Y = Game1.player[m].position.Y - messageSize.Y - 2f;
                            vector.Y += Game1.player[m].gfxOffY;
                            vector = vector.Floor();
                            if (Game1.player[Game1.myPlayer].gravDir == -1f)
                            {
                                vector.Y -= Game1.screenPosition.Y;
                                vector.Y = Game1.screenPosition.Y + (float)Game1.screenHeight - vector.Y;
                            }
                            int num69 = 0;
                            ChatManager.DrawColorCodedStringWithShadow(Game1.spriteBatch, Game1.fontMouseText, Game1.player[m].chatOverhead.snippets, vector - Game1.screenPosition, 0f, Vector2.Zero, Vector2.One, out num69, -1f, 2f);
                        }
                    }
                    for (int n = 0; n < 100; n++)
                    {
                        if (Game1.combatText[n].active)
                        {
                            int num70 = 0;
                            if (Game1.combatText[n].crit)
                            {
                                num70 = 1;
                            }
                            Vector2 vector2 = Game1.fontCombatText[num70].MeasureString(Game1.combatText[n].text);
                            Vector2 origin = new Vector2(vector2.X * 0.5f, vector2.Y * 0.5f);
                            float arg_50F1_0 = Game1.combatText[n].scale;
                            float num71 = (float)Game1.combatText[n].color.R;
                            float num72 = (float)Game1.combatText[n].color.G;
                            float num73 = (float)Game1.combatText[n].color.B;
                            float num74 = (float)Game1.combatText[n].color.A;
                            num71 *= Game1.combatText[n].scale * Game1.combatText[n].alpha * 0.3f;
                            num73 *= Game1.combatText[n].scale * Game1.combatText[n].alpha * 0.3f;
                            num72 *= Game1.combatText[n].scale * Game1.combatText[n].alpha * 0.3f;
                            num74 *= Game1.combatText[n].scale * Game1.combatText[n].alpha;
                            Microsoft.Xna.Framework.Color color9 = new Microsoft.Xna.Framework.Color((int)num71, (int)num72, (int)num73, (int)num74);
                            for (int num75 = 0; num75 < 5; num75++)
                            {
                                int num76 = 0;
                                int num77 = 0;
                                if (num75 == 0)
                                {
                                    num76--;
                                }
                                else if (num75 == 1)
                                {
                                    num76++;
                                }
                                else if (num75 == 2)
                                {
                                    num77--;
                                }
                                else if (num75 == 3)
                                {
                                    num77++;
                                }
                                else
                                {
                                    num71 = (float)Game1.combatText[n].color.R * Game1.combatText[n].scale * Game1.combatText[n].alpha;
                                    num73 = (float)Game1.combatText[n].color.B * Game1.combatText[n].scale * Game1.combatText[n].alpha;
                                    num72 = (float)Game1.combatText[n].color.G * Game1.combatText[n].scale * Game1.combatText[n].alpha;
                                    num74 = (float)Game1.combatText[n].color.A * Game1.combatText[n].scale * Game1.combatText[n].alpha;
                                    color9 = new Microsoft.Xna.Framework.Color((int)num71, (int)num72, (int)num73, (int)num74);
                                }
                                if (Game1.player[Game1.myPlayer].gravDir == -1f)
                                {
                                    float num78 = Game1.combatText[n].position.Y - Game1.screenPosition.Y;
                                    num78 = (float)Game1.screenHeight - num78;
                                    Game1.spriteBatch.DrawString(Game1.fontCombatText[num70], Game1.combatText[n].text, new Vector2(Game1.combatText[n].position.X - Game1.screenPosition.X + (float)num76 + origin.X, num78 + (float)num77 + origin.Y), color9, Game1.combatText[n].rotation, origin, Game1.combatText[n].scale, SpriteEffects.None, 0f);
                                }
                                else
                                {
                                    Game1.spriteBatch.DrawString(Game1.fontCombatText[num70], Game1.combatText[n].text, new Vector2(Game1.combatText[n].position.X - Game1.screenPosition.X + (float)num76 + origin.X, Game1.combatText[n].position.Y - Game1.screenPosition.Y + (float)num77 + origin.Y), color9, Game1.combatText[n].rotation, origin, Game1.combatText[n].scale, SpriteEffects.None, 0f);
                                }
                            }
                        }
                    }
                    for (int num79 = 0; num79 < 20; num79++)
                    {
                        if (Game1.itemText[num79].active)
                        {
                            string text = Game1.itemText[num79].name;
                            if (Game1.itemText[num79].stack > 1)
                            {
                                text = string.Concat(new object[]
                                {
                                    text,
                                    " (",
                                    Game1.itemText[num79].stack,
                                    ")"
                                });
                            }
                            Vector2 vector3 = Game1.fontMouseText.MeasureString(text);
                            Vector2 origin2 = new Vector2(vector3.X * 0.5f, vector3.Y * 0.5f);
                            float arg_5542_0 = Game1.itemText[num79].scale;
                            float num80 = (float)Game1.itemText[num79].color.R;
                            float num81 = (float)Game1.itemText[num79].color.G;
                            float num82 = (float)Game1.itemText[num79].color.B;
                            float num83 = (float)Game1.itemText[num79].color.A;
                            num80 *= Game1.itemText[num79].scale * Game1.itemText[num79].alpha * 0.3f;
                            num82 *= Game1.itemText[num79].scale * Game1.itemText[num79].alpha * 0.3f;
                            num81 *= Game1.itemText[num79].scale * Game1.itemText[num79].alpha * 0.3f;
                            num83 *= Game1.itemText[num79].scale * Game1.itemText[num79].alpha;
                            Microsoft.Xna.Framework.Color color10 = new Microsoft.Xna.Framework.Color((int)num80, (int)num81, (int)num82, (int)num83);
                            for (int num84 = 0; num84 < 5; num84++)
                            {
                                int num85 = 0;
                                int num86 = 0;
                                if (num84 == 0)
                                {
                                    num85 -= 2;
                                }
                                else if (num84 == 1)
                                {
                                    num85 += 2;
                                }
                                else if (num84 == 2)
                                {
                                    num86 -= 2;
                                }
                                else if (num84 == 3)
                                {
                                    num86 += 2;
                                }
                                else
                                {
                                    num80 = (float)Game1.itemText[num79].color.R * Game1.itemText[num79].scale * Game1.itemText[num79].alpha;
                                    num82 = (float)Game1.itemText[num79].color.B * Game1.itemText[num79].scale * Game1.itemText[num79].alpha;
                                    num81 = (float)Game1.itemText[num79].color.G * Game1.itemText[num79].scale * Game1.itemText[num79].alpha;
                                    num83 = (float)Game1.itemText[num79].color.A * Game1.itemText[num79].scale * Game1.itemText[num79].alpha;
                                    color10 = new Microsoft.Xna.Framework.Color((int)num80, (int)num81, (int)num82, (int)num83);
                                }
                                if (num84 < 4)
                                {
                                    num83 = (float)Game1.itemText[num79].color.A * Game1.itemText[num79].scale * Game1.itemText[num79].alpha;
                                    color10 = new Microsoft.Xna.Framework.Color(0, 0, 0, (int)num83);
                                }
                                float num87 = Game1.itemText[num79].position.Y - Game1.screenPosition.Y + (float)num86;
                                if (Game1.player[Game1.myPlayer].gravDir == -1f)
                                {
                                    num87 = (float)Game1.screenHeight - num87;
                                }
                                Game1.spriteBatch.DrawString(Game1.fontMouseText, text, new Vector2(Game1.itemText[num79].position.X - Game1.screenPosition.X + (float)num85 + origin2.X, num87 + origin2.Y), color10, Game1.itemText[num79].rotation, origin2, Game1.itemText[num79].scale, SpriteEffects.None, 0f);
                            }
                        }
                    }
                    if (Game1.netMode == 1 && Netplay.Connection.StatusText != "" && Netplay.Connection.StatusText != null)
                    {
                        string text2 = string.Concat(new object[]
                        {
                            Netplay.Connection.StatusText,
                            ": ",
                            (int)((float)Netplay.Connection.StatusCount / (float)Netplay.Connection.StatusMax * 100f),
                            "%"
                        });
                        Game1.spriteBatch.DrawString(Game1.fontMouseText, text2, new Vector2(628f - Game1.fontMouseText.MeasureString(text2).X * 0.5f + (float)(Game1.screenWidth - 800), 84f), new Microsoft.Xna.Framework.Color((int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor, (int)Game1.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
                    }
                    if (Game1.BlackFadeIn > 0)
                    {
                        if (Game1.BlackFadeIn < 0)
                        {
                            Game1.BlackFadeIn = 0;
                        }
                        int num88 = Game1.BlackFadeIn;
                        if (num88 > 255)
                        {
                            num88 = 255;
                        }
                        Game1.BlackFadeIn -= 25;
                        Game1.spriteBatch.Draw(Game1.loTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, Game1.screenWidth, Game1.screenHeight), new Microsoft.Xna.Framework.Color(0, 0, 0, num88));
                    }
                    this.DrawFPS();
                    if (!Game1.mapFullscreen)
                    {
                        if (Game1.ignoreErrors)
                        {
                            try
                            {
                                this.DrawInterface(gameTime);
                                goto IL_5A08;
                            }
                            catch (Exception e6)
                            {
                                TimeLogger.DrawException(e6);
                                goto IL_5A08;
                            }
                        }
                        this.DrawInterface(gameTime);
                    }
                IL_5A08:
                    TimeLogger.DetailedDrawTime(27);
                }
                else
                {
                    Game1.maxQ = true;
                }
                Game1.spriteBatch.End();
                TimeLogger.DetailedDrawTime(37);
                if (Game1.mouseLeft)
                {
                    Game1.mouseLeftRelease = false;
                }
                else
                {
                    Game1.mouseLeftRelease = true;
                }
                if (Game1.mouseRight)
                {
                    Game1.mouseRightRelease = false;
                }
                else
                {
                    Game1.mouseRightRelease = true;
                }
                if (Game1.mouseState.RightButton != Microsoft.Xna.Framework.Input.ButtonState.Pressed)
                {
                    Game1.stackSplit = 0;
                }
                if (Game1.stackSplit > 0)
                {
                    Game1.stackSplit--;
                }
                TimeLogger.RenderTime(Game1.renderCount, stopwatch.Elapsed.TotalMilliseconds);
                TimeLogger.EndDrawFrame();
                return;
            }
            if (Game1.player[Game1.myPlayer].talkNPC >= 0 || Game1.player[Game1.myPlayer].sign >= 0 || (Game1.playerInventory && !CaptureManager.Instance.Active))
            {
                Game1.player[Game1.myPlayer].ToggleInv();
            }
            this.DrawMap();
            this.DrawFPS();
            this.DrawPlayerChat();
            TimeLogger.MapDrawTime(stopwatch.Elapsed.TotalMilliseconds);
            TimeLogger.EndDrawFrame();
            CaptureManager.Instance.Update();
            if (CaptureManager.Instance.Active)
            {
                CaptureManager.Instance.Draw(Game1.spriteBatch);
            }
            Game1.spriteBatch.End();
            if (Game1.mouseLeft)
            {
                Game1.mouseLeftRelease = false;
                return;
            }
            Game1.mouseLeftRelease = true;
        }
        public void DrawInfernoRings()
        {
            for (int i = 0; i < 255; i++)
            {
                if (Game1.player[i].active && !Game1.player[i].outOfRange && Game1.player[i].inferno && !Game1.player[i].dead)
                {
                    this.LoadFlameRing();
                    float num = 0.1f;
                    float num2 = 0.9f;
                    if (!Game1.gamePaused && base.IsActive)
                    {
                        Game1.player[i].flameRingScale += 0.004f;
                    }
                    float flameRingScale;
                    if (Game1.player[i].flameRingScale < 1f)
                    {
                        flameRingScale = Game1.player[i].flameRingScale;
                    }
                    else
                    {
                        Game1.player[i].flameRingScale = 0.8f;
                        flameRingScale = Game1.player[i].flameRingScale;
                    }
                    if (!Game1.gamePaused && base.IsActive)
                    {
                        Game1.player[i].flameRingRot += 0.05f;
                    }
                    if (Game1.player[i].flameRingRot > 6.28318548f)
                    {
                        Game1.player[i].flameRingRot -= 6.28318548f;
                    }
                    if (Game1.player[i].flameRingRot < -6.28318548f)
                    {
                        Game1.player[i].flameRingRot += 6.28318548f;
                    }
                    for (int j = 0; j < 3; j++)
                    {
                        float num3 = flameRingScale + num * (float)j;
                        if (num3 > 1f)
                        {
                            num3 -= num * 2f;
                        }
                        float num4 = MathHelper.Lerp(0.8f, 0f, Math.Abs(num3 - num2) * 10f);
                        Game1.spriteBatch.Draw(this.flameRingTexture, Game1.player[i].Center - Game1.screenPosition, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 400 * j, 400, 400)), new Microsoft.Xna.Framework.Color(num4, num4, num4, num4 / 2f), Game1.player[i].flameRingRot + 1.04719758f * (float)j, new Vector2(200f, 200f), num3, SpriteEffects.None, 0f);
                    }
                }
            }
        }
        private static void UpdateInvasion()
        {
            if (Game1.invasionType > 0)
            {
                if (Game1.invasionSize <= 0)
                {
                    if (Game1.invasionType == 1)
                    {
                        NPC.downedGoblins = true;
                        if (Game1.netMode == 2)
                        {
                            NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
                        }
                        AchievementsHelper.NotifyProgressionEvent(10);
                    }
                    else if (Game1.invasionType == 2)
                    {
                        NPC.downedFrost = true;
                        AchievementsHelper.NotifyProgressionEvent(12);
                    }
                    else if (Game1.invasionType == 3)
                    {
                        NPC.downedPirates = true;
                        AchievementsHelper.NotifyProgressionEvent(11);
                    }
                    else if (Game1.invasionType == 4)
                    {
                        NPC.downedMartians = true;
                        AchievementsHelper.NotifyProgressionEvent(13);
                    }
                    Game1.InvasionWarning();
                    Game1.invasionType = 0;
                    Game1.invasionDelay = 0;
                }
                if (Game1.invasionX == (double)Game1.spawnTileX)
                {
                    return;
                }
                float num = (float)Game1.dayRate;
                if (Game1.invasionX > (double)Game1.spawnTileX)
                {
                    Game1.invasionX -= (double)num;
                    if (Game1.invasionX <= (double)Game1.spawnTileX)
                    {
                        Game1.invasionX = (double)Game1.spawnTileX;
                        Game1.InvasionWarning();
                    }
                    else
                    {
                        Game1.invasionWarn--;
                    }
                }
                else if (Game1.invasionX < (double)Game1.spawnTileX)
                {
                    Game1.invasionX += (double)num;
                    if (Game1.invasionX >= (double)Game1.spawnTileX)
                    {
                        Game1.invasionX = (double)Game1.spawnTileX;
                        Game1.InvasionWarning();
                    }
                    else
                    {
                        Game1.invasionWarn--;
                    }
                }
                if (Game1.invasionWarn <= 0)
                {
                    Game1.invasionWarn = 3600;
                    Game1.InvasionWarning();
                }
            }
        }
        private static void InvasionWarning()
        {
            string text;
            if (Game1.invasionSize <= 0)
            {
                if (Game1.invasionType == 2)
                {
                    text = Lang.misc[4];
                }
                else if (Game1.invasionType == 3)
                {
                    text = Lang.misc[24];
                }
                else if (Game1.invasionType == 4)
                {
                    text = Lang.misc[42];
                }
                else
                {
                    text = Lang.misc[0];
                }
            }
            else if (Game1.invasionX < (double)Game1.spawnTileX)
            {
                if (Game1.invasionType == 2)
                {
                    text = Lang.misc[5];
                }
                else if (Game1.invasionType == 3)
                {
                    text = Lang.misc[25];
                }
                else if (Game1.invasionType == 4)
                {
                    text = "";
                }
                else
                {
                    text = Lang.misc[1];
                }
            }
            else if (Game1.invasionX > (double)Game1.spawnTileX)
            {
                if (Game1.invasionType == 2)
                {
                    text = Lang.misc[6];
                }
                else if (Game1.invasionType == 3)
                {
                    text = Lang.misc[26];
                }
                else if (Game1.invasionType == 4)
                {
                    text = "";
                }
                else
                {
                    text = Lang.misc[2];
                }
            }
            else if (Game1.invasionType == 2)
            {
                text = Lang.misc[7];
            }
            else if (Game1.invasionType == 3)
            {
                text = Lang.misc[27];
            }
            else if (Game1.invasionType == 4)
            {
                text = Lang.misc[41];
            }
            else
            {
                text = Lang.misc[3];
            }
            if (Game1.netMode == 0)
            {
                Game1.NewText(text, 175, 75, 255, false);
                return;
            }
            if (Game1.netMode == 2)
            {
                NetMessage.SendData(25, -1, -1, text, 255, 175f, 75f, 255f, 0, 0, 0);
            }
        }
        public static bool CanStartInvasion(int type = 1, bool ignoreDelay = false)
        {
            if (Game1.invasionType != 0)
            {
                return false;
            }
            if (Game1.invasionDelay != 0 && !ignoreDelay)
            {
                return false;
            }
            int num = 0;
            for (int i = 0; i < 255; i++)
            {
                if (Game1.player[i].active && Game1.player[i].statLifeMax >= 200)
                {
                    num++;
                }
            }
            return num > 0;
        }

        public static void StartInvasion(int type = 1)
        {
            if (Game1.invasionType == 0 && Game1.invasionDelay == 0)
            {
                int num = 0;
                for (int i = 0; i < 255; i++)
                {
                    if (Game1.player[i].active && Game1.player[i].statLifeMax >= 200)
                    {
                        num++;
                    }
                }
                if (num > 0)
                {
                    Game1.invasionType = type;
                    Game1.invasionSize = 80 + 40 * num;
                    if (type == 3)
                    {
                        Game1.invasionSize += 40 + 20 * num;
                    }
                    if (type == 4)
                    {
                        Game1.invasionSize = 160 + 40 * num;
                    }
                    Game1.invasionSizeStart = Game1.invasionSize;
                    Game1.invasionProgress = 0;
                    Game1.invasionProgressIcon = type + 2;
                    Game1.invasionProgressWave = 0;
                    Game1.invasionProgressMax = Game1.invasionSizeStart;
                    Game1.invasionWarn = 0;
                    if (type == 4)
                    {
                        Game1.invasionX = (double)(Game1.spawnTileX - 1);
                        Game1.invasionWarn = 2;
                        return;
                    }
                    if (Game1.rand.Next(2) == 0)
                    {
                        Game1.invasionX = 0.0;
                        return;
                    }
                    Game1.invasionX = (double)Game1.maxTilesX;
                }
            }
        }

        public static void FakeLoadInvasionStart()
        {
            int num = 0;
            int num2 = 0;
            switch (Game1.invasionType)
            {
                case 1:
                case 2:
                    num = 80;
                    num2 = 40;
                    break;
                case 3:
                    num = 120;
                    num2 = 60;
                    break;
                case 4:
                    num = 160;
                    num2 = 40;
                    break;
            }
            int num3 = (int)Math.Ceiling((double)((float)(Game1.invasionSize - num) / (float)num2));
            Game1.invasionSizeStart = num;
            if (num3 > 0)
            {
                Game1.invasionSizeStart += num3 * num2;
            }
        }
        private static void UpdateClient()
        {
            if (Game1.myPlayer == 255)
            {
                Netplay.disconnect = true;
            }
            Game1.netPlayCounter++;
            if (Game1.netPlayCounter > 3600)
            {
                Game1.netPlayCounter = 0;
            }
            if (Game1.netPlayCounter % 420 == 0)
            {
                NetMessage.SendData(13, -1, -1, "", Game1.myPlayer, 0f, 0f, 0f, 0, 0, 0);
            }
            if (Game1.netPlayCounter % 900 == 0)
            {
                NetMessage.SendData(36, -1, -1, "", Game1.myPlayer, 0f, 0f, 0f, 0, 0, 0);
                NetMessage.SendData(16, -1, -1, "", Game1.myPlayer, 0f, 0f, 0f, 0, 0, 0);
                NetMessage.SendData(40, -1, -1, "", Game1.myPlayer, 0f, 0f, 0f, 0, 0, 0);
            }
            if (Netplay.Connection.IsActive)
            {
                Netplay.Connection.TimeOutTimer++;
                if (!Game1.stopTimeOuts && Netplay.Connection.TimeOutTimer > 7200)
                {
                    Game1.statusText = Lang.inter[43];
                    Netplay.disconnect = true;
                }
            }
            for (int i = 0; i < 400; i++)
            {
                if (Game1.item[i].active && Game1.item[i].owner == Game1.myPlayer)
                {
                    Game1.item[i].FindOwner(i);
                }
            }
        }
        private static void UpdateServer()
        {
            Game1.netPlayCounter++;
            if (Game1.netPlayCounter % 3600 == 0)
            {
                NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
            }
            if (Game1.netPlayCounter >= 10800)
            {
                NetMessage.syncPlayers();
                Game1.netPlayCounter = 0;
            }
            for (int i = 0; i < Game1.maxNetPlayers; i++)
            {
                if (Game1.player[i].active && Netplay.Clients[i].IsActive)
                {
                    Netplay.Clients[i].SpamUpdate();
                }
            }
            if (Math.IEEERemainder((double)Game1.netPlayCounter, 900.0) == 0.0)
            {
                bool flag = true;
                int num = Game1.lastItemUpdate;
                int num2 = 0;
                while (flag)
                {
                    num++;
                    if (num >= 400)
                    {
                        num = 0;
                    }
                    num2++;
                    if (!Game1.item[num].active || Game1.item[num].owner == 255)
                    {
                        NetMessage.SendData(21, -1, -1, "", num, 0f, 0f, 0f, 0, 0, 0);
                    }
                    if (num2 >= Game1.maxItemUpdates || num == Game1.lastItemUpdate)
                    {
                        flag = false;
                    }
                }
                Game1.lastItemUpdate = num;
            }
            for (int j = 0; j < 400; j++)
            {
                if (Game1.item[j].active && (Game1.item[j].owner == 255 || !Game1.player[Game1.item[j].owner].active))
                {
                    Game1.item[j].FindOwner(j);
                }
            }
            for (int k = 0; k < 255; k++)
            {
                if (Netplay.Clients[k].IsActive)
                {
                    Netplay.Clients[k].TimeOutTimer++;
                    if (!Game1.stopTimeOuts && Netplay.Clients[k].TimeOutTimer > 7200)
                    {
                        Netplay.Clients[k].PendingTermination = true;
                    }
                }
                if (Game1.player[k].active)
                {
                    RemoteClient.CheckSection(k, Game1.player[k].position, 1);
                }
            }
        }

        public static void NewText(string newText, byte R = 255, byte G = 255, byte B = 255, bool force = false)
        {
            int num = 80;
            if (!force && newText.Length > num)
            {
                string text = newText;
                while (text.Length > num)
                {
                    int num2 = num;
                    int num3 = num2;
                    while (text.Substring(num3, 1) != " ")
                    {
                        num3--;
                        if (num3 < 1)
                        {
                            break;
                        }
                    }
                    if (num3 == 0)
                    {
                        while (text.Substring(num2, 1) != " ")
                        {
                            num2++;
                            if (num2 >= text.Length - 1)
                            {
                                break;
                            }
                        }
                    }
                    else
                    {
                        num2 = num3;
                    }
                    if (num2 >= text.Length - 1)
                    {
                        num2 = text.Length;
                    }
                    string newText2 = text.Substring(0, num2);
                    Game1.NewText(newText2, R, G, B, true);
                    text = text.Substring(num2);
                    if (text.Length > 0)
                    {
                        while (text.Substring(0, 1) == " ")
                        {
                            text = text.Substring(1);
                        }
                    }
                }
                if (text.Length > 0)
                {
                    Game1.NewText(text, R, G, B, true);
                }
                return;
            }
            for (int i = Game1.numChatLines - 1; i > 0; i--)
            {
                Game1.chatLine[i].text = Game1.chatLine[i - 1].text;
                Game1.chatLine[i].parsedText = Game1.chatLine[i - 1].parsedText;
                Game1.chatLine[i].showTime = Game1.chatLine[i - 1].showTime;
                Game1.chatLine[i].color = Game1.chatLine[i - 1].color;
            }
            if (R == 0 && G == 0 && B == 0)
            {
                Game1.chatLine[0].color = Microsoft.Xna.Framework.Color.White;
            }
            else
            {
                Game1.chatLine[0].color = new Microsoft.Xna.Framework.Color((int)R, (int)G, (int)B);
            }
            Game1.chatLine[0].text = newText;
            Game1.chatLine[0].parsedText = ChatManager.ParseMessage(Game1.chatLine[0].text, Game1.chatLine[0].color);
            Game1.chatLine[0].showTime = Game1.chatLength;
            Game1.PlaySound(12, -1, -1, 1);
        }

        private static void StopRain()
        {
            Game1.rainTime = 0;
            Game1.raining = false;
            Game1.maxRaining = 0f;
        }
        private static void StartRain()
        {
            int num = 86400;
            int num2 = num / 24;
            Game1.rainTime = Game1.rand.Next(num2 * 8, num);
            if (Game1.rand.Next(3) == 0)
            {
                Game1.rainTime += Game1.rand.Next(0, num2);
            }
            if (Game1.rand.Next(4) == 0)
            {
                Game1.rainTime += Game1.rand.Next(0, num2 * 2);
            }
            if (Game1.rand.Next(5) == 0)
            {
                Game1.rainTime += Game1.rand.Next(0, num2 * 2);
            }
            if (Game1.rand.Next(6) == 0)
            {
                Game1.rainTime += Game1.rand.Next(0, num2 * 3);
            }
            if (Game1.rand.Next(7) == 0)
            {
                Game1.rainTime += Game1.rand.Next(0, num2 * 4);
            }
            if (Game1.rand.Next(8) == 0)
            {
                Game1.rainTime += Game1.rand.Next(0, num2 * 5);
            }
            float num3 = 1f;
            if (Game1.rand.Next(2) == 0)
            {
                num3 += 0.05f;
            }
            if (Game1.rand.Next(3) == 0)
            {
                num3 += 0.1f;
            }
            if (Game1.rand.Next(4) == 0)
            {
                num3 += 0.15f;
            }
            if (Game1.rand.Next(5) == 0)
            {
                num3 += 0.2f;
            }
            Game1.rainTime = (int)((float)Game1.rainTime * num3);
            Game1.ChangeRain();
            Game1.raining = true;
        }
        private static void ChangeRain()
        {
            if (Game1.cloudBGActive >= 1f || (double)Game1.numClouds > 150.0)
            {
                if (Game1.rand.Next(3) == 0)
                {
                    Game1.maxRaining = (float)Game1.rand.Next(20, 90) * 0.01f;
                    return;
                }
                Game1.maxRaining = (float)Game1.rand.Next(40, 90) * 0.01f;
                return;
            }
            else if ((double)Game1.numClouds > 100.0)
            {
                if (Game1.rand.Next(3) == 0)
                {
                    Game1.maxRaining = (float)Game1.rand.Next(10, 70) * 0.01f;
                    return;
                }
                Game1.maxRaining = (float)Game1.rand.Next(20, 60) * 0.01f;
                return;
            }
            else
            {
                if (Game1.rand.Next(3) == 0)
                {
                    Game1.maxRaining = (float)Game1.rand.Next(5, 40) * 0.01f;
                    return;
                }
                Game1.maxRaining = (float)Game1.rand.Next(5, 30) * 0.01f;
                return;
            }
        }
        public static void StartSlimeRain(bool announce = true)
        {
            if (Game1.slimeRain)
            {
                return;
            }
            if (Game1.netMode == 1)
            {
                Game1.slimeRainTime = 54000.0;
                Game1.slimeRain = true;
                SkyManager.Instance.Activate("Slime", default(Vector2), new object[0]);
                return;
            }
            if (Game1.raining)
            {
                return;
            }
            Game1.slimeRainTime = (double)Game1.rand.Next(32400, 54000);
            Game1.slimeRain = true;
            Game1.slimeRainKillCount = 0;
            if (Game1.netMode == 0)
            {
                SkyManager.Instance.Activate("Slime", default(Vector2), new object[0]);
                if (announce)
                {
                    Game1.slimeWarningTime = Game1.slimeWarningDelay;
                    return;
                }
            }
            else if (announce)
            {
                Game1.slimeWarningTime = Game1.slimeWarningDelay;
                NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
            }
        }
        public static void StopSlimeRain(bool announce = true)
        {
            if (!Game1.slimeRain)
            {
                return;
            }
            if (Game1.netMode == 1)
            {
                Game1.slimeRainTime = 0.0;
                Game1.slimeRain = false;
                SkyManager.Instance.Deactivate("Slime", new object[0]);
                return;
            }
            int num = 86400;
            int num2 = num * 7;
            if (Game1.hardMode)
            {
                num2 *= 2;
            }
            Game1.slimeRainTime = (double)(-(double)Game1.rand.Next(3024, 6048) * 100);
            Game1.slimeRain = false;
            if (Game1.netMode == 0)
            {
                if (announce)
                {
                    Game1.slimeWarningTime = Game1.slimeWarningDelay;
                }
                SkyManager.Instance.Deactivate("Slime", new object[0]);
                return;
            }
            if (announce)
            {
                Game1.slimeWarningTime = Game1.slimeWarningDelay;
                NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
            }
        }
        private static void UpdateTime()
        {
            if (Game1.pumpkinMoon)
            {
                Game1.bloodMoon = false;
                Game1.snowMoon = false;
            }
            if (Game1.snowMoon)
            {
                Game1.bloodMoon = false;
            }
            if ((Game1.netMode != 1 && !Game1.gameMenu) || Game1.netMode == 2)
            {
                if (Game1.slimeRainTime > 0.0)
                {
                    Game1.slimeRainTime -= (double)Game1.dayRate;
                    if (Game1.slimeRainTime <= 0.0)
                    {
                        Game1.StopSlimeRain(true);
                    }
                }
                else if (Game1.slimeRainTime < 0.0)
                {
                    Game1.slimeRainTime += (double)Game1.dayRate;
                    if (Game1.slimeRainTime > 0.0)
                    {
                        Game1.slimeRainTime = 0.0;
                    }
                }
                if (Game1.raining)
                {
                    Game1.rainTime -= Game1.dayRate;
                    if (Game1.dayRate > 0)
                    {
                        int num = 86400;
                        num /= Game1.dayRate;
                        int num2 = num / 24;
                        if (Game1.rainTime <= 0)
                        {
                            Game1.StopRain();
                        }
                        else if (Game1.rand.Next(num2 * 2) == 0)
                        {
                            Game1.ChangeRain();
                        }
                    }
                }
                else if (!Game1.slimeRain)
                {
                    int num3 = 86400;
                    num3 /= ((Game1.dayRate != 0) ? Game1.dayRate : 1);
                    if (Game1.rand.Next((int)((double)num3 * 5.5)) == 0)
                    {
                        Game1.StartRain();
                    }
                    else if (Game1.cloudBGActive >= 1f && Game1.rand.Next(num3 * 4) == 0)
                    {
                        Game1.StartRain();
                    }
                    if (!Game1.raining && Game1.slimeRainTime == 0.0 && !Game1.bloodMoon && !Game1.eclipse && !Game1.snowMoon && !Game1.pumpkinMoon && Game1.invasionType == 0)
                    {
                        int num4 = (int)(1728000.0 / (double)Game1.dayRate);
                        if (!NPC.downedSlimeKing)
                        {
                            num4 /= 2;
                        }
                        if (Game1.hardMode)
                        {
                            num4 = (int)((double)num4 * 1.5);
                        }
                        bool flag = false;
                        for (int i = 0; i < 255; i++)
                        {
                            if (Game1.player[i].active && Game1.player[i].statLifeMax > 140 && Game1.player[i].statDefense > 8)
                            {
                                flag = true;
                            }
                        }
                        if (!flag)
                        {
                            num4 *= 5;
                        }
                        if (Game1.dayRate > 0 && num4 > 0 && (flag || Game1.expertMode) && Game1.rand.Next(num4) == 0)
                        {
                            Game1.StartSlimeRain(true);
                        }
                    }
                }
            }
            if (Game1.maxRaining != Game1.oldMaxRaining)
            {
                if (Game1.netMode == 2)
                {
                    NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
                }
                Game1.oldMaxRaining = Game1.maxRaining;
            }
            Game1.UpdateSundial();
            Game1.time += (double)Game1.dayRate;
            CultistRitual.UpdateTime();
            if (NPC.MoonLordCountdown > 0)
            {
                float num5 = MathHelper.Clamp((float)Math.Sin((double)((float)NPC.MoonLordCountdown / 60f * 0.5f)) * 2f, 0f, 1f);
                num5 *= 0.75f - 0.5f * ((float)NPC.MoonLordCountdown / 3600f);
                if (!Filters.Scene["MoonLordShake"].IsActive())
                {
                    Filters.Scene.Activate("MoonLordShake", Game1.player[Game1.myPlayer].position, new object[0]);
                }
                Filters.Scene["MoonLordShake"].GetShader().UseIntensity(num5);
            }
            else if (Filters.Scene["MoonLordShake"].IsActive())
            {
                Filters.Scene.Deactivate("MoonLordShake", new object[0]);
            }
            if (NPC.MoonLordCountdown > 0)
            {
                NPC.MoonLordCountdown--;
                if (NPC.MoonLordCountdown <= 0 && Game1.netMode != 1)
                {
                    NPC.SpawnOnPlayer((int)Player.FindClosest(new Vector2((float)(Game1.maxTilesX / 2), (float)Game1.worldSurface / 2f) * 16f, 0, 0), 398);
                }
            }
            if (NPC.taxCollector && Game1.netMode != 2 && !Game1.gameMenu)
            {
                Game1.player[Game1.myPlayer].taxTimer += Game1.dayRate;
                if (Game1.player[Game1.myPlayer].taxTimer >= Player.taxRate)
                {
                    Game1.player[Game1.myPlayer].taxTimer -= Player.taxRate;
                    Game1.player[Game1.myPlayer].CollectTaxes();
                }
            }
            if (Game1.netMode != 1 && Game1.slimeWarningTime > 0)
            {
                Game1.slimeWarningTime--;
                if (Game1.slimeWarningTime <= 0)
                {
                    if (Game1.netMode == 0)
                    {
                        if (Game1.slimeRainTime > 0.0)
                        {
                            Game1.NewText(Lang.gen[74], 50, 255, 130, false);
                        }
                        else
                        {
                            Game1.NewText(Lang.gen[75], 50, 255, 130, false);
                        }
                    }
                    else if (Game1.slimeRainTime > 0.0)
                    {
                        NetMessage.SendData(25, -1, -1, Lang.gen[74], 255, 50f, 255f, 130f, 0, 0, 0);
                    }
                    else
                    {
                        NetMessage.SendData(25, -1, -1, Lang.gen[75], 255, 50f, 255f, 130f, 0, 0, 0);
                    }
                }
            }
            if (Game1.netMode != 1)
            {
                if (NPC.travelNPC)
                {
                    if (!Game1.dayTime || Game1.time > 48600.0)
                    {
                        WorldGen.UnspawnTravelNPC();
                    }
                }
                else if (!Game1.fastForwardTime && Game1.dayTime && Game1.time < 27000.0)
                {
                    int num6 = (int)(27000.0 / (double)Game1.dayRate);
                    num6 *= 4;
                    if (Game1.rand.Next(num6) == 0)
                    {
                        int num7 = 0;
                        for (int j = 0; j < 200; j++)
                        {
                            if (Game1.npc[j].active && Game1.npc[j].townNPC && Game1.npc[j].type != 37 && Game1.npc[j].type != 453)
                            {
                                num7++;
                            }
                        }
                        if (num7 >= 2)
                        {
                            WorldGen.SpawnTravelNPC();
                        }
                    }
                }
                NPC.travelNPC = false;
            }
            if (!Game1.dayTime)
            {
                Game1.eclipse = false;
                if (!Game1.fastForwardTime)
                {
                    if (WorldGen.spawnEye && Game1.netMode != 1 && Game1.time > 4860.0)
                    {
                        for (int k = 0; k < 255; k++)
                        {
                            if (Game1.player[k].active && !Game1.player[k].dead && (double)Game1.player[k].position.Y < Game1.worldSurface * 16.0)
                            {
                                NPC.SpawnOnPlayer(k, 4);
                                WorldGen.spawnEye = false;
                                break;
                            }
                        }
                    }
                    if (WorldGen.spawnHardBoss > 0 && Game1.netMode != 1 && Game1.time > 4860.0)
                    {
                        bool flag2 = false;
                        for (int l = 0; l < 200; l++)
                        {
                            if (Game1.npc[l].active && Game1.npc[l].boss)
                            {
                                flag2 = true;
                            }
                        }
                        if (!flag2)
                        {
                            int m = 0;
                            while (m < 255)
                            {
                                if (Game1.player[m].active && !Game1.player[m].dead && (double)Game1.player[m].position.Y < Game1.worldSurface * 16.0)
                                {
                                    if (WorldGen.spawnHardBoss == 1)
                                    {
                                        NPC.SpawnOnPlayer(m, 134);
                                        break;
                                    }
                                    if (WorldGen.spawnHardBoss == 2)
                                    {
                                        NPC.SpawnOnPlayer(m, 125);
                                        NPC.SpawnOnPlayer(m, 126);
                                        break;
                                    }
                                    if (WorldGen.spawnHardBoss == 3)
                                    {
                                        NPC.SpawnOnPlayer(m, 127);
                                        break;
                                    }
                                    break;
                                }
                                else
                                {
                                    m++;
                                }
                            }
                        }
                        WorldGen.spawnHardBoss = 0;
                    }
                }
                if (Game1.time > 32400.0)
                {
                    if (Game1.fastForwardTime)
                    {
                        Game1.fastForwardTime = false;
                        Game1.UpdateSundial();
                    }
                    Game1.checkXMas();
                    Game1.checkHalloween();
                    Game1.AnglerQuestSwap();
                    if (Game1.invasionDelay > 0)
                    {
                        Game1.invasionDelay--;
                    }
                    WorldGen.spawnNPC = 0;
                    Game1.checkForSpawns = 0;
                    Game1.time = 0.0;
                    if (Game1.bloodMoon && Game1.netMode != 1)
                    {
                        AchievementsHelper.NotifyProgressionEvent(5);
                    }
                    Game1.bloodMoon = false;
                    Game1.stopMoonEvent();
                    Game1.dayTime = true;
                    if (Game1.sundialCooldown > 0)
                    {
                        Game1.sundialCooldown--;
                    }
                    Game1.moonPhase++;
                    if (Game1.moonPhase >= 8)
                    {
                        Game1.moonPhase = 0;
                    }
                    if (Game1.netMode == 2)
                    {
                        NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
                        WorldGen.saveAndPlay();
                    }
                    if (Game1.netMode != 1)
                    {
                        AchievementsHelper.NotifyProgressionEvent(1);
                        if (Game1.hardMode && NPC.downedMechBossAny && Game1.rand.Next(14) == 0)
                        {
                            Game1.eclipse = true;
                            AchievementsHelper.NotifyProgressionEvent(2);
                            if (Game1.eclipse)
                            {
                                if (Game1.netMode == 0)
                                {
                                    Game1.NewText(Lang.misc[20], 50, 255, 130, false);
                                }
                                else if (Game1.netMode == 2)
                                {
                                    NetMessage.SendData(25, -1, -1, Lang.misc[20], 255, 50f, 255f, 130f, 0, 0, 0);
                                }
                            }
                            if (Game1.netMode == 2)
                            {
                                NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
                            }
                        }
                        else if (!Game1.snowMoon && !Game1.pumpkinMoon)
                        {
                            if (WorldGen.shadowOrbSmashed)
                            {
                                if (!NPC.downedGoblins)
                                {
                                    if (Game1.rand.Next(3) == 0)
                                    {
                                        Game1.StartInvasion(1);
                                    }
                                }
                                else if ((Game1.hardMode && Game1.rand.Next(60) == 0) || (!Game1.hardMode && Game1.rand.Next(30) == 0))
                                {
                                    Game1.StartInvasion(1);
                                }
                            }
                            if (Game1.invasionType == 0 && Game1.hardMode && WorldGen.altarCount > 0 && ((NPC.downedPirates && Game1.rand.Next(50) == 0) || (!NPC.downedPirates && Game1.rand.Next(30) == 0)))
                            {
                                Game1.StartInvasion(3);
                            }
                        }
                    }
                }
                if (Game1.time > 16200.0 && WorldGen.spawnMeteor)
                {
                    WorldGen.spawnMeteor = false;
                    WorldGen.dropMeteor();
                    return;
                }
            }
            else
            {
                Game1.bloodMoon = false;
                Game1.stopMoonEvent();
                if (Game1.time > 54000.0)
                {
                    NPC.setFireFlyChance();
                    WorldGen.spawnNPC = 0;
                    Game1.checkForSpawns = 0;
                    if (Game1.rand.Next(50) == 0 && Game1.netMode != 1 && WorldGen.shadowOrbSmashed)
                    {
                        WorldGen.spawnMeteor = true;
                    }
                    if (Game1.eclipse && Game1.netMode != 1)
                    {
                        AchievementsHelper.NotifyProgressionEvent(3);
                    }
                    Game1.eclipse = false;
                    if (Game1.netMode != 1)
                    {
                        AchievementsHelper.NotifyProgressionEvent(0);
                    }
                    if (!Game1.fastForwardTime)
                    {
                        if (!NPC.downedBoss1 && Game1.netMode != 1)
                        {
                            bool flag3 = false;
                            for (int n = 0; n < 255; n++)
                            {
                                if (Game1.player[n].active && Game1.player[n].statLifeMax >= 200 && Game1.player[n].statDefense > 10)
                                {
                                    flag3 = true;
                                    break;
                                }
                            }
                            if (flag3 && Game1.rand.Next(3) == 0)
                            {
                                int num8 = 0;
                                for (int num9 = 0; num9 < 200; num9++)
                                {
                                    if (Game1.npc[num9].active && Game1.npc[num9].townNPC)
                                    {
                                        num8++;
                                    }
                                }
                                if (num8 >= 4)
                                {
                                    WorldGen.spawnEye = true;
                                    if (Game1.netMode == 0)
                                    {
                                        Game1.NewText(Lang.misc[9], 50, 255, 130, false);
                                    }
                                    else if (Game1.netMode == 2)
                                    {
                                        NetMessage.SendData(25, -1, -1, Lang.misc[9], 255, 50f, 255f, 130f, 0, 0, 0);
                                    }
                                }
                            }
                        }
                        if (Game1.netMode != 1 && !Game1.pumpkinMoon && !Game1.snowMoon && WorldGen.altarCount > 0 && Game1.hardMode && !WorldGen.spawnEye && Game1.rand.Next(10) == 0)
                        {
                            bool flag4 = false;
                            for (int num10 = 0; num10 < 200; num10++)
                            {
                                if (Game1.npc[num10].active && Game1.npc[num10].boss)
                                {
                                    flag4 = true;
                                }
                            }
                            if (!flag4 && (!NPC.downedMechBoss1 || !NPC.downedMechBoss2 || !NPC.downedMechBoss3))
                            {
                                int num11 = 0;
                                while (num11 < 1000)
                                {
                                    int num12 = Game1.rand.Next(3) + 1;
                                    if (num12 == 1 && !NPC.downedMechBoss1)
                                    {
                                        WorldGen.spawnHardBoss = num12;
                                        if (Game1.netMode == 0)
                                        {
                                            Game1.NewText(Lang.misc[28], 50, 255, 130, false);
                                            break;
                                        }
                                        if (Game1.netMode == 2)
                                        {
                                            NetMessage.SendData(25, -1, -1, Lang.misc[28], 255, 50f, 255f, 130f, 0, 0, 0);
                                            break;
                                        }
                                        break;
                                    }
                                    else if (num12 == 2 && !NPC.downedMechBoss2)
                                    {
                                        WorldGen.spawnHardBoss = num12;
                                        if (Game1.netMode == 0)
                                        {
                                            Game1.NewText(Lang.misc[29], 50, 255, 130, false);
                                            break;
                                        }
                                        if (Game1.netMode == 2)
                                        {
                                            NetMessage.SendData(25, -1, -1, Lang.misc[29], 255, 50f, 255f, 130f, 0, 0, 0);
                                            break;
                                        }
                                        break;
                                    }
                                    else if (num12 == 3 && !NPC.downedMechBoss3)
                                    {
                                        WorldGen.spawnHardBoss = num12;
                                        if (Game1.netMode == 0)
                                        {
                                            Game1.NewText(Lang.misc[30], 50, 255, 130, false);
                                            break;
                                        }
                                        if (Game1.netMode == 2)
                                        {
                                            NetMessage.SendData(25, -1, -1, Lang.misc[30], 255, 50f, 255f, 130f, 0, 0, 0);
                                            break;
                                        }
                                        break;
                                    }
                                    else
                                    {
                                        num11++;
                                    }
                                }
                            }
                        }
                        if (!WorldGen.spawnEye && Game1.moonPhase != 4 && Game1.rand.Next(9) == 0 && Game1.netMode != 1)
                        {
                            for (int num13 = 0; num13 < 255; num13++)
                            {
                                if (Game1.player[num13].active && Game1.player[num13].statLifeMax > 120)
                                {
                                    Game1.bloodMoon = true;
                                    break;
                                }
                            }
                            if (Game1.bloodMoon)
                            {
                                AchievementsHelper.NotifyProgressionEvent(4);
                                if (Game1.netMode == 0)
                                {
                                    Game1.NewText(Lang.misc[8], 50, 255, 130, false);
                                }
                                else if (Game1.netMode == 2)
                                {
                                    NetMessage.SendData(25, -1, -1, Lang.misc[8], 255, 50f, 255f, 130f, 0, 0, 0);
                                }
                            }
                        }
                    }
                    Game1.time = 0.0;
                    Game1.dayTime = false;
                    if (Game1.netMode == 2)
                    {
                        NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
                    }
                }
                if (Game1.netMode != 1 && Game1.worldRate > 0)
                {
                    Game1.checkForSpawns++;
                    if (Game1.checkForSpawns >= 7200 / Game1.worldRate)
                    {
                        int num14 = 0;
                        for (int num15 = 0; num15 < 255; num15++)
                        {
                            if (Game1.player[num15].active)
                            {
                                num14++;
                            }
                        }
                        for (int num16 = 0; num16 < 540; num16++)
                        {
                            Game1.nextNPC[num16] = false;
                        }
                        Game1.checkForSpawns = 0;
                        WorldGen.spawnNPC = 0;
                        int num17 = 0;
                        int num18 = 0;
                        int num19 = 0;
                        int num20 = 0;
                        int num21 = 0;
                        int num22 = 0;
                        int num23 = 0;
                        int num24 = 0;
                        int num25 = 0;
                        int num26 = 0;
                        int num27 = 0;
                        int num28 = 0;
                        int num29 = 0;
                        int num30 = 0;
                        int num31 = 0;
                        int num32 = 0;
                        int num33 = 0;
                        int num34 = 0;
                        int num35 = 0;
                        int num36 = 0;
                        int num37 = 0;
                        int num38 = 0;
                        int num39 = 0;
                        int num40 = 0;
                        for (int num41 = 0; num41 < 200; num41++)
                        {
                            if (Game1.npc[num41].active && Game1.npc[num41].townNPC)
                            {
                                if (Game1.npc[num41].type != 368 && Game1.npc[num41].type != 37 && Game1.npc[num41].type != 453 && !Game1.npc[num41].homeless)
                                {
                                    WorldGen.QuickFindHome(num41);
                                }
                                if (Game1.npc[num41].type == 37)
                                {
                                    num22++;
                                }
                                if (Game1.npc[num41].type == 17)
                                {
                                    num17++;
                                }
                                if (Game1.npc[num41].type == 18)
                                {
                                    num18++;
                                }
                                if (Game1.npc[num41].type == 19)
                                {
                                    num20++;
                                }
                                if (Game1.npc[num41].type == 20)
                                {
                                    num19++;
                                }
                                if (Game1.npc[num41].type == 22)
                                {
                                    num21++;
                                }
                                if (Game1.npc[num41].type == 38)
                                {
                                    num23++;
                                }
                                if (Game1.npc[num41].type == 54)
                                {
                                    num24++;
                                }
                                if (Game1.npc[num41].type == 107)
                                {
                                    num26++;
                                }
                                if (Game1.npc[num41].type == 108)
                                {
                                    num25++;
                                }
                                if (Game1.npc[num41].type == 124)
                                {
                                    num27++;
                                }
                                if (Game1.npc[num41].type == 142)
                                {
                                    num28++;
                                }
                                if (Game1.npc[num41].type == 160)
                                {
                                    num29++;
                                }
                                if (Game1.npc[num41].type == 178)
                                {
                                    num30++;
                                }
                                if (Game1.npc[num41].type == 207)
                                {
                                    num31++;
                                }
                                if (Game1.npc[num41].type == 208)
                                {
                                    num32++;
                                }
                                if (Game1.npc[num41].type == 209)
                                {
                                    num33++;
                                }
                                if (Game1.npc[num41].type == 227)
                                {
                                    num34++;
                                }
                                if (Game1.npc[num41].type == 228)
                                {
                                    num35++;
                                }
                                if (Game1.npc[num41].type == 229)
                                {
                                    num36++;
                                }
                                if (Game1.npc[num41].type == 353)
                                {
                                    num37++;
                                }
                                if (Game1.npc[num41].type == 369)
                                {
                                    num38++;
                                }
                                if (Game1.npc[num41].type == 441)
                                {
                                    num39++;
                                }
                                num40++;
                            }
                        }
                        if (WorldGen.spawnNPC == 0)
                        {
                            int num42 = 0;
                            bool flag5 = false;
                            int num43 = 0;
                            bool flag6 = false;
                            bool flag7 = false;
                            bool flag8 = false;
                            bool flag9 = false;
                            for (int num44 = 0; num44 < 255; num44++)
                            {
                                if (Game1.player[num44].active)
                                {
                                    for (int num45 = 0; num45 < 58; num45++)
                                    {
                                        if (Game1.player[num44].inventory[num45] != null & Game1.player[num44].inventory[num45].stack > 0)
                                        {
                                            if (num42 < 2000000000)
                                            {
                                                if (Game1.player[num44].inventory[num45].itemId == 71)
                                                {
                                                    num42 += Game1.player[num44].inventory[num45].stack;
                                                }
                                                if (Game1.player[num44].inventory[num45].itemId == 72)
                                                {
                                                    num42 += Game1.player[num44].inventory[num45].stack * 100;
                                                }
                                                if (Game1.player[num44].inventory[num45].itemId == 73)
                                                {
                                                    num42 += Game1.player[num44].inventory[num45].stack * 10000;
                                                }
                                                if (Game1.player[num44].inventory[num45].itemId == 74)
                                                {
                                                    num42 += Game1.player[num44].inventory[num45].stack * 1000000;
                                                }
                                            }
                                            if (Game1.player[num44].inventory[num45].ammo == 14 || Game1.player[num44].inventory[num45].useAmmo == 14)
                                            {
                                                flag6 = true;
                                            }
                                            if (Game1.player[num44].inventory[num45].itemId == 166 || Game1.player[num44].inventory[num45].itemId == 167 || Game1.player[num44].inventory[num45].itemId == 168 || Game1.player[num44].inventory[num45].itemId == 235 || Game1.player[num44].inventory[num45].itemId == 2896 || Game1.player[num44].inventory[num45].itemId == 3547)
                                            {
                                                flag7 = true;
                                            }
                                            if (Game1.player[num44].inventory[num45].dye > 0 || (Game1.player[num44].inventory[num45].itemId >= 1107 && Game1.player[num44].inventory[num45].itemId <= 1120) || (Game1.player[num44].inventory[num45].itemId >= 3385 && Game1.player[num44].inventory[num45].itemId <= 3388))
                                            {
                                                if (Game1.player[num44].inventory[num45].itemId >= 3385 && Game1.player[num44].inventory[num45].itemId <= 3388)
                                                {
                                                    flag9 = true;
                                                }
                                                flag8 = true;
                                            }
                                        }
                                    }
                                    int num46 = Game1.player[num44].statLifeMax / 20;
                                    if (num46 > 5)
                                    {
                                        flag5 = true;
                                    }
                                    num43 += num46;
                                    if (!flag8)
                                    {
                                        for (int num47 = 0; num47 < 3; num47++)
                                        {
                                            if (Game1.player[num44].dye[num47] != null && Game1.player[num44].dye[num47].stack > 0 && Game1.player[num44].dye[num47].dye > 0)
                                            {
                                                flag8 = true;
                                            }
                                        }
                                    }
                                }
                            }
                            if (!NPC.downedBoss3 && num22 == 0)
                            {
                                int num48 = NPC.NewNPC(Game1.dungeonX * 16 + 8, Game1.dungeonY * 16, 37, 0, 0f, 0f, 0f, 0f, 255);
                                Game1.npc[num48].homeless = false;
                                Game1.npc[num48].homeTileX = Game1.dungeonX;
                                Game1.npc[num48].homeTileY = Game1.dungeonY;
                            }
                            bool flag10 = false;
                            if (Game1.rand.Next(50) == 0)
                            {
                                flag10 = true;
                            }
                            if (num21 < 1)
                            {
                                Game1.nextNPC[22] = true;
                            }
                            if ((double)num42 > 5000.0 && num17 < 1)
                            {
                                Game1.nextNPC[17] = true;
                            }
                            if (flag5 && num18 < 1 && num17 > 0)
                            {
                                Game1.nextNPC[18] = true;
                            }
                            if (flag6 && num20 < 1)
                            {
                                Game1.nextNPC[19] = true;
                            }
                            if ((NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3) && num19 < 1)
                            {
                                Game1.nextNPC[20] = true;
                            }
                            if (flag7 && num17 > 0 && num23 < 1)
                            {
                                Game1.nextNPC[38] = true;
                            }
                            if (NPC.savedStylist && num37 < 1)
                            {
                                Game1.nextNPC[353] = true;
                            }
                            if (NPC.savedAngler && num38 < 1)
                            {
                                Game1.nextNPC[369] = true;
                            }
                            if (NPC.downedBoss3 && num24 < 1)
                            {
                                Game1.nextNPC[54] = true;
                            }
                            if (NPC.savedGoblin && num26 < 1)
                            {
                                Game1.nextNPC[107] = true;
                            }
                            if (NPC.savedTaxCollector && num39 < 1)
                            {
                                Game1.nextNPC[441] = true;
                            }
                            if (NPC.savedWizard && num25 < 1)
                            {
                                Game1.nextNPC[108] = true;
                            }
                            if (NPC.savedMech && num27 < 1)
                            {
                                Game1.nextNPC[124] = true;
                            }
                            if (NPC.downedFrost && num28 < 1 && Game1.xMas)
                            {
                                Game1.nextNPC[142] = true;
                            }
                            if (NPC.downedMechBossAny && num30 < 1)
                            {
                                Game1.nextNPC[178] = true;
                            }
                            if (flag8 && num31 < 1 && (NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3 || flag9))
                            {
                                Game1.nextNPC[207] = true;
                            }
                            if (NPC.downedQueenBee && num35 < 1)
                            {
                                Game1.nextNPC[228] = true;
                            }
                            if (NPC.downedPirates && num36 < 1)
                            {
                                Game1.nextNPC[229] = true;
                            }
                            if (num29 < 1 && Game1.hardMode)
                            {
                                Game1.nextNPC[160] = true;
                            }
                            if (Game1.hardMode && NPC.downedPlantBoss && num33 < 1)
                            {
                                Game1.nextNPC[209] = true;
                            }
                            if (num40 >= 8 && num34 < 1)
                            {
                                Game1.nextNPC[227] = true;
                            }
                            if (flag10 && num32 < 1 && num40 >= 14)
                            {
                                Game1.nextNPC[208] = true;
                            }
                            if (WorldGen.spawnNPC == 0 && num21 < 1)
                            {
                                WorldGen.spawnNPC = 22;
                            }
                            if (WorldGen.spawnNPC == 0 && (double)num42 > 5000.0 && num17 < 1)
                            {
                                WorldGen.spawnNPC = 17;
                            }
                            if (WorldGen.spawnNPC == 0 && flag5 && num18 < 1 && num17 > 0)
                            {
                                WorldGen.spawnNPC = 18;
                            }
                            if (WorldGen.spawnNPC == 0 && flag6 && num20 < 1)
                            {
                                WorldGen.spawnNPC = 19;
                            }
                            if (WorldGen.spawnNPC == 0 && NPC.savedGoblin && num26 < 1)
                            {
                                WorldGen.spawnNPC = 107;
                            }
                            if (WorldGen.spawnNPC == 0 && NPC.savedTaxCollector && num39 < 1)
                            {
                                WorldGen.spawnNPC = 441;
                            }
                            if (WorldGen.spawnNPC == 0 && NPC.savedWizard && num25 < 1)
                            {
                                WorldGen.spawnNPC = 108;
                            }
                            if (WorldGen.spawnNPC == 0 && Game1.hardMode && num29 < 1)
                            {
                                WorldGen.spawnNPC = 160;
                            }
                            if (WorldGen.spawnNPC == 0 && (NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3) && num19 < 1)
                            {
                                WorldGen.spawnNPC = 20;
                            }
                            if (WorldGen.spawnNPC == 0 && flag7 && num17 > 0 && num23 < 1)
                            {
                                WorldGen.spawnNPC = 38;
                            }
                            if (WorldGen.spawnNPC == 0 && NPC.downedQueenBee && num35 < 1)
                            {
                                WorldGen.spawnNPC = 228;
                            }
                            if (WorldGen.spawnNPC == 0 && NPC.downedMechBossAny && num30 < 1)
                            {
                                WorldGen.spawnNPC = 178;
                            }
                            if (WorldGen.spawnNPC == 0 && NPC.savedMech && num27 < 1)
                            {
                                WorldGen.spawnNPC = 124;
                            }
                            if (WorldGen.spawnNPC == 0 && NPC.savedAngler && num38 < 1)
                            {
                                WorldGen.spawnNPC = 369;
                            }
                            if (WorldGen.spawnNPC == 0 && Game1.hardMode && NPC.downedPlantBoss && num33 < 1)
                            {
                                WorldGen.spawnNPC = 209;
                            }
                            if (WorldGen.spawnNPC == 0 && NPC.downedPirates && num36 < 1)
                            {
                                WorldGen.spawnNPC = 229;
                            }
                            if (WorldGen.spawnNPC == 0 && NPC.downedBoss3 && num24 < 1)
                            {
                                WorldGen.spawnNPC = 54;
                            }
                            if (WorldGen.spawnNPC == 0 && NPC.savedStylist && num37 < 1)
                            {
                                WorldGen.spawnNPC = 353;
                            }
                            if (WorldGen.spawnNPC == 0 && flag8 && num31 < 1)
                            {
                                WorldGen.spawnNPC = 207;
                            }
                            if (WorldGen.spawnNPC == 0 && num40 >= 8 && num34 < 1)
                            {
                                WorldGen.spawnNPC = 227;
                            }
                            if (WorldGen.spawnNPC == 0 && flag10 && num40 >= 14 && num32 < 1)
                            {
                                WorldGen.spawnNPC = 208;
                            }
                            if (WorldGen.spawnNPC == 0 && NPC.downedFrost && num28 < 1 && Game1.xMas)
                            {
                                WorldGen.spawnNPC = 142;
                            }
                        }
                    }
                }
            }
        }
        public static int DamageVar(float dmg)
        {
            float num = dmg * (1f + (float)Game1.rand.Next(-15, 16) * 0.01f);
            return (int)Math.Round((double)num);
        }
        public static double CalculateDamage(int Damage, int Defense)
        {
            double num = (double)Damage - (double)Defense * 0.5;
            if (num < 1.0)
            {
                num = 1.0;
            }
            return num;
        }
        public static double CalculatePlayerDamage(int Damage, int Defense)
        {
            double num = (double)Damage - (double)Defense * 0.5;
            if (Game1.expertMode)
            {
                num = (double)Damage - (double)Defense * 0.75;
            }
            if (num < 1.0)
            {
                num = 1.0;
            }
            return num;
        }

        public static void PlaySound(int type, Vector2 position, int Style = 1)
        {
            Game1.PlaySound(type, (int)position.X, (int)position.Y, Style);
        }
        public static void PlaySound(int type, int x = -1, int y = -1, int Style = 1)
        {
            int num = Style;
            try
            {
                if (!Game1.dedServ)
                {
                    if (Game1.soundVolume != 0f || (type >= 30 && type <= 35 && type != 39))
                    {
                        bool flag = false;
                        float num2 = 1f;
                        float num3 = 0f;
                        if (x == -1 || y == -1)
                        {
                            flag = true;
                        }
                        else
                        {
                            if (WorldGen.gen)
                            {
                                return;
                            }
                            if (Game1.netMode == 2)
                            {
                                return;
                            }
                            Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(Game1.screenPosition.X - (float)(Game1.screenWidth * 2)), (int)(Game1.screenPosition.Y - (float)(Game1.screenHeight * 2)), Game1.screenWidth * 5, Game1.screenHeight * 5);
                            Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(x, y, 1, 1);
                            Vector2 vector = new Vector2(Game1.screenPosition.X + (float)Game1.screenWidth * 0.5f, Game1.screenPosition.Y + (float)Game1.screenHeight * 0.5f);
                            if (rectangle.Intersects(value))
                            {
                                flag = true;
                            }
                            if (flag)
                            {
                                num3 = ((float)x - vector.X) / ((float)Game1.screenWidth * 0.5f);
                                float num4 = Math.Abs((float)x - vector.X);
                                float num5 = Math.Abs((float)y - vector.Y);
                                float num6 = (float)Math.Sqrt((double)(num4 * num4 + num5 * num5));
                                num2 = 1f - num6 / ((float)Game1.screenWidth * 1.5f);
                            }
                        }
                        if (num3 < -1f)
                        {
                            num3 = -1f;
                        }
                        if (num3 > 1f)
                        {
                            num3 = 1f;
                        }
                        if (num2 > 1f)
                        {
                            num2 = 1f;
                        }
                        if (num2 > 0f || (type >= 34 && type <= 35 && type <= 39))
                        {
                            if (flag)
                            {
                                if ((type >= 30 && type <= 35) || type == 39)
                                {
                                    num2 *= Game1.ambientVolume * (float)(Game1.gameInactive ? 0 : 1);
                                }
                                else
                                {
                                    num2 *= Game1.soundVolume;
                                }
                                if (num2 > 1f)
                                {
                                    num2 = 1f;
                                }
                                if (num2 > 0f || (type >= 30 && type <= 35) || type == 39)
                                {
                                    if (type == 0)
                                    {
                                        int num7 = Game1.rand.Next(3);
                                        Game1.soundInstanceDig[num7].Stop();
                                        Game1.soundInstanceDig[num7] = Game1.soundDig[num7].CreateInstance();
                                        Game1.soundInstanceDig[num7].Volume = num2;
                                        Game1.soundInstanceDig[num7].Pan = num3;
                                        Game1.soundInstanceDig[num7].Pitch = (float)Game1.rand.Next(-10, 11) * 0.01f;
                                        Game1.soundInstanceDig[num7].Play();
                                    }
                                    else if (type == 1)
                                    {
                                        int num8 = Game1.rand.Next(3);
                                        Game1.soundInstancePlayerHit[num8].Stop();
                                        Game1.soundInstancePlayerHit[num8] = Game1.soundPlayerHit[num8].CreateInstance();
                                        Game1.soundInstancePlayerHit[num8].Volume = num2;
                                        Game1.soundInstancePlayerHit[num8].Pan = num3;
                                        Game1.soundInstancePlayerHit[num8].Play();
                                    }
                                    else if (type == 2)
                                    {
                                        if (num == 123)
                                        {
                                            num2 *= 0.5f;
                                        }
                                        if (num == 124 || num == 125)
                                        {
                                            num2 *= 0.65f;
                                        }
                                        if (num == 1)
                                        {
                                            int num9 = Game1.rand.Next(3);
                                            if (num9 == 1)
                                            {
                                                num = 18;
                                            }
                                            if (num9 == 2)
                                            {
                                                num = 19;
                                            }
                                        }
                                        else if (num == 55 || num == 53)
                                        {
                                            num2 *= 0.75f;
                                            if (num == 55)
                                            {
                                                num2 *= 0.75f;
                                            }
                                            if (Game1.soundInstanceItem[num].State == SoundState.Playing)
                                            {
                                                return;
                                            }
                                        }
                                        else if (num == 37)
                                        {
                                            num2 *= 0.5f;
                                        }
                                        if (num != 9 && num != 10 && num != 24 && num != 26 && num != 34 && num != 43 && num != 103)
                                        {
                                            Game1.soundInstanceItem[num].Stop();
                                        }
                                        Game1.soundInstanceItem[num] = Game1.soundItem[num].CreateInstance();
                                        Game1.soundInstanceItem[num].Volume = num2;
                                        Game1.soundInstanceItem[num].Pan = num3;
                                        if (num == 47)
                                        {
                                            Game1.soundInstanceItem[num].Pitch = (float)Game1.rand.Next(-5, 6) * 0.19f;
                                        }
                                        else if (num == 53)
                                        {
                                            Game1.soundInstanceItem[num].Pitch = (float)Game1.rand.Next(-20, -11) * 0.02f;
                                        }
                                        else if (num == 55)
                                        {
                                            Game1.soundInstanceItem[num].Pitch = (float)(-(float)Game1.rand.Next(-20, -11)) * 0.02f;
                                        }
                                        else
                                        {
                                            Game1.soundInstanceItem[num].Pitch = (float)Game1.rand.Next(-6, 7) * 0.01f;
                                        }
                                        if (num == 26 || num == 35)
                                        {
                                            Game1.soundInstanceItem[num].Volume = num2 * 0.75f;
                                            Game1.soundInstanceItem[num].Pitch = Game1.harpNote;
                                        }
                                        Game1.soundInstanceItem[num].Play();
                                    }
                                    else if (type == 3)
                                    {
                                        if (num >= 20 && num <= 54)
                                        {
                                            num2 *= 0.5f;
                                        }
                                        if (num != 57 || Game1.soundInstanceNPCHit[num].State != SoundState.Playing)
                                        {
                                            if (num == 57)
                                            {
                                                num2 *= 0.6f;
                                            }
                                            if (num == 55 || num == 56)
                                            {
                                                num2 *= 0.5f;
                                            }
                                            Game1.soundInstanceNPCHit[num].Stop();
                                            Game1.soundInstanceNPCHit[num] = Game1.soundNPCHit[num].CreateInstance();
                                            Game1.soundInstanceNPCHit[num].Volume = num2;
                                            Game1.soundInstanceNPCHit[num].Pan = num3;
                                            Game1.soundInstanceNPCHit[num].Pitch = (float)Game1.rand.Next(-10, 11) * 0.01f;
                                            Game1.soundInstanceNPCHit[num].Play();
                                        }
                                    }
                                    else if (type == 4)
                                    {
                                        if (num >= 23 && num <= 57)
                                        {
                                            num2 *= 0.5f;
                                        }
                                        if (num == 61)
                                        {
                                            num2 *= 0.6f;
                                        }
                                        if (num == 62)
                                        {
                                            num2 *= 0.6f;
                                        }
                                        if (num != 10 || Game1.soundInstanceNPCKilled[num].State != SoundState.Playing)
                                        {
                                            Game1.soundInstanceNPCKilled[num] = Game1.soundNPCKilled[num].CreateInstance();
                                            Game1.soundInstanceNPCKilled[num].Volume = num2;
                                            Game1.soundInstanceNPCKilled[num].Pan = num3;
                                            Game1.soundInstanceNPCKilled[num].Pitch = (float)Game1.rand.Next(-10, 11) * 0.01f;
                                            Game1.soundInstanceNPCKilled[num].Play();
                                        }
                                    }
                                    else if (type == 5)
                                    {
                                        Game1.soundInstancePlayerKilled.Stop();
                                        Game1.soundInstancePlayerKilled = Game1.soundPlayerKilled.CreateInstance();
                                        Game1.soundInstancePlayerKilled.Volume = num2;
                                        Game1.soundInstancePlayerKilled.Pan = num3;
                                        Game1.soundInstancePlayerKilled.Play();
                                    }
                                    else if (type == 6)
                                    {
                                        Game1.soundInstanceGrass.Stop();
                                        Game1.soundInstanceGrass = Game1.soundGrass.CreateInstance();
                                        Game1.soundInstanceGrass.Volume = num2;
                                        Game1.soundInstanceGrass.Pan = num3;
                                        Game1.soundInstanceGrass.Pitch = (float)Game1.rand.Next(-30, 31) * 0.01f;
                                        Game1.soundInstanceGrass.Play();
                                    }
                                    else if (type == 7)
                                    {
                                        Game1.soundInstanceGrab.Stop();
                                        Game1.soundInstanceGrab = Game1.soundGrab.CreateInstance();
                                        Game1.soundInstanceGrab.Volume = num2;
                                        Game1.soundInstanceGrab.Pan = num3;
                                        Game1.soundInstanceGrab.Pitch = (float)Game1.rand.Next(-10, 11) * 0.01f;
                                        Game1.soundInstanceGrab.Play();
                                    }
                                    else if (type == 8)
                                    {
                                        Game1.soundInstanceDoorOpen.Stop();
                                        Game1.soundInstanceDoorOpen = Game1.soundDoorOpen.CreateInstance();
                                        Game1.soundInstanceDoorOpen.Volume = num2;
                                        Game1.soundInstanceDoorOpen.Pan = num3;
                                        Game1.soundInstanceDoorOpen.Pitch = (float)Game1.rand.Next(-20, 21) * 0.01f;
                                        Game1.soundInstanceDoorOpen.Play();
                                    }
                                    else if (type == 9)
                                    {
                                        Game1.soundInstanceDoorClosed.Stop();
                                        Game1.soundInstanceDoorClosed = Game1.soundDoorClosed.CreateInstance();
                                        Game1.soundInstanceDoorClosed.Volume = num2;
                                        Game1.soundInstanceDoorClosed.Pan = num3;
                                        Game1.soundInstanceDoorOpen.Pitch = (float)Game1.rand.Next(-20, 21) * 0.01f;
                                        Game1.soundInstanceDoorClosed.Play();
                                    }
                                    else if (type == 10)
                                    {
                                        Game1.soundInstanceMenuOpen.Stop();
                                        Game1.soundInstanceMenuOpen = Game1.soundMenuOpen.CreateInstance();
                                        Game1.soundInstanceMenuOpen.Volume = num2;
                                        Game1.soundInstanceMenuOpen.Pan = num3;
                                        Game1.soundInstanceMenuOpen.Play();
                                    }
                                    else if (type == 11)
                                    {
                                        Game1.soundInstanceMenuClose.Stop();
                                        Game1.soundInstanceMenuClose = Game1.soundMenuClose.CreateInstance();
                                        Game1.soundInstanceMenuClose.Volume = num2;
                                        Game1.soundInstanceMenuClose.Pan = num3;
                                        Game1.soundInstanceMenuClose.Play();
                                    }
                                    else if (type == 12)
                                    {
                                        Game1.soundInstanceMenuTick.Stop();
                                        Game1.soundInstanceMenuTick = Game1.soundMenuTick.CreateInstance();
                                        Game1.soundInstanceMenuTick.Volume = num2;
                                        Game1.soundInstanceMenuTick.Pan = num3;
                                        Game1.soundInstanceMenuTick.Play();
                                    }
                                    else if (type == 13)
                                    {
                                        Game1.soundInstanceShatter.Stop();
                                        Game1.soundInstanceShatter = Game1.soundShatter.CreateInstance();
                                        Game1.soundInstanceShatter.Volume = num2;
                                        Game1.soundInstanceShatter.Pan = num3;
                                        Game1.soundInstanceShatter.Play();
                                    }
                                    else if (type == 14)
                                    {
                                        if (Style == 489)
                                        {
                                            int num10 = Game1.rand.Next(21, 24);
                                            Game1.soundInstanceZombie[num10] = Game1.soundZombie[num10].CreateInstance();
                                            Game1.soundInstanceZombie[num10].Volume = num2 * 0.4f;
                                            Game1.soundInstanceZombie[num10].Pan = num3;
                                            Game1.soundInstanceZombie[num10].Play();
                                        }
                                        else
                                        {
                                            int num11 = Game1.rand.Next(3);
                                            Game1.soundInstanceZombie[num11] = Game1.soundZombie[num11].CreateInstance();
                                            Game1.soundInstanceZombie[num11].Volume = num2 * 0.4f;
                                            Game1.soundInstanceZombie[num11].Pan = num3;
                                            Game1.soundInstanceZombie[num11].Play();
                                        }
                                    }
                                    else if (type == 15)
                                    {
                                        if (Game1.soundInstanceRoar[num].State == SoundState.Stopped)
                                        {
                                            Game1.soundInstanceRoar[num] = Game1.soundRoar[num].CreateInstance();
                                            Game1.soundInstanceRoar[num].Volume = num2;
                                            Game1.soundInstanceRoar[num].Pan = num3;
                                            Game1.soundInstanceRoar[num].Play();
                                        }
                                    }
                                    else if (type == 16)
                                    {
                                        Game1.soundInstanceDoubleJump.Stop();
                                        Game1.soundInstanceDoubleJump = Game1.soundDoubleJump.CreateInstance();
                                        Game1.soundInstanceDoubleJump.Volume = num2;
                                        Game1.soundInstanceDoubleJump.Pan = num3;
                                        Game1.soundInstanceDoubleJump.Pitch = (float)Game1.rand.Next(-10, 11) * 0.01f;
                                        Game1.soundInstanceDoubleJump.Play();
                                    }
                                    else if (type == 17)
                                    {
                                        Game1.soundInstanceRun.Stop();
                                        Game1.soundInstanceRun = Game1.soundRun.CreateInstance();
                                        Game1.soundInstanceRun.Volume = num2;
                                        Game1.soundInstanceRun.Pan = num3;
                                        Game1.soundInstanceRun.Pitch = (float)Game1.rand.Next(-10, 11) * 0.01f;
                                        Game1.soundInstanceRun.Play();
                                    }
                                    else if (type == 18)
                                    {
                                        Game1.soundInstanceCoins = Game1.soundCoins.CreateInstance();
                                        Game1.soundInstanceCoins.Volume = num2;
                                        Game1.soundInstanceCoins.Pan = num3;
                                        Game1.soundInstanceCoins.Play();
                                    }
                                    else if (type == 19)
                                    {
                                        if (Game1.soundInstanceSplash[num].State == SoundState.Stopped)
                                        {
                                            Game1.soundInstanceSplash[num] = Game1.soundSplash[num].CreateInstance();
                                            Game1.soundInstanceSplash[num].Volume = num2;
                                            Game1.soundInstanceSplash[num].Pan = num3;
                                            Game1.soundInstanceSplash[num].Pitch = (float)Game1.rand.Next(-10, 11) * 0.01f;
                                            Game1.soundInstanceSplash[num].Play();
                                        }
                                    }
                                    else if (type == 20)
                                    {
                                        int num12 = Game1.rand.Next(3);
                                        Game1.soundInstanceFemaleHit[num12].Stop();
                                        Game1.soundInstanceFemaleHit[num12] = Game1.soundFemaleHit[num12].CreateInstance();
                                        Game1.soundInstanceFemaleHit[num12].Volume = num2;
                                        Game1.soundInstanceFemaleHit[num12].Pan = num3;
                                        Game1.soundInstanceFemaleHit[num12].Play();
                                    }
                                    else if (type == 21)
                                    {
                                        int num13 = Game1.rand.Next(3);
                                        Game1.soundInstanceTink[num13].Stop();
                                        Game1.soundInstanceTink[num13] = Game1.soundTink[num13].CreateInstance();
                                        Game1.soundInstanceTink[num13].Volume = num2;
                                        Game1.soundInstanceTink[num13].Pan = num3;
                                        Game1.soundInstanceTink[num13].Play();
                                    }
                                    else if (type == 22)
                                    {
                                        Game1.soundInstanceUnlock.Stop();
                                        Game1.soundInstanceUnlock = Game1.soundUnlock.CreateInstance();
                                        Game1.soundInstanceUnlock.Volume = num2;
                                        Game1.soundInstanceUnlock.Pan = num3;
                                        Game1.soundInstanceUnlock.Play();
                                    }
                                    else if (type == 23)
                                    {
                                        Game1.soundInstanceDrown.Stop();
                                        Game1.soundInstanceDrown = Game1.soundDrown.CreateInstance();
                                        Game1.soundInstanceDrown.Volume = num2;
                                        Game1.soundInstanceDrown.Pan = num3;
                                        Game1.soundInstanceDrown.Play();
                                    }
                                    else if (type == 24)
                                    {
                                        Game1.soundInstanceChat = Game1.soundChat.CreateInstance();
                                        Game1.soundInstanceChat.Volume = num2;
                                        Game1.soundInstanceChat.Pan = num3;
                                        Game1.soundInstanceChat.Play();
                                    }
                                    else if (type == 25)
                                    {
                                        Game1.soundInstanceMaxMana = Game1.soundMaxMana.CreateInstance();
                                        Game1.soundInstanceMaxMana.Volume = num2;
                                        Game1.soundInstanceMaxMana.Pan = num3;
                                        Game1.soundInstanceMaxMana.Play();
                                    }
                                    else if (type == 26)
                                    {
                                        int num14 = Game1.rand.Next(3, 5);
                                        Game1.soundInstanceZombie[num14] = Game1.soundZombie[num14].CreateInstance();
                                        Game1.soundInstanceZombie[num14].Volume = num2 * 0.9f;
                                        Game1.soundInstanceZombie[num14].Pan = num3;
                                        Game1.soundInstanceZombie[num14].Pitch = (float)Game1.rand.Next(-10, 11) * 0.01f;
                                        Game1.soundInstanceZombie[num14].Play();
                                    }
                                    else if (type == 27)
                                    {
                                        if (Game1.soundInstancePixie.State == SoundState.Playing)
                                        {
                                            Game1.soundInstancePixie.Volume = num2;
                                            Game1.soundInstancePixie.Pan = num3;
                                            Game1.soundInstancePixie.Pitch = (float)Game1.rand.Next(-10, 11) * 0.01f;
                                        }
                                        else
                                        {
                                            Game1.soundInstancePixie.Stop();
                                            Game1.soundInstancePixie = Game1.soundPixie.CreateInstance();
                                            Game1.soundInstancePixie.Volume = num2;
                                            Game1.soundInstancePixie.Pan = num3;
                                            Game1.soundInstancePixie.Pitch = (float)Game1.rand.Next(-10, 11) * 0.01f;
                                            Game1.soundInstancePixie.Play();
                                        }
                                    }
                                    else if (type == 28)
                                    {
                                        if (Game1.soundInstanceMech[num].State != SoundState.Playing)
                                        {
                                            Game1.soundInstanceMech[num] = Game1.soundMech[num].CreateInstance();
                                            Game1.soundInstanceMech[num].Volume = num2;
                                            Game1.soundInstanceMech[num].Pan = num3;
                                            Game1.soundInstanceMech[num].Pitch = (float)Game1.rand.Next(-10, 11) * 0.01f;
                                            Game1.soundInstanceMech[num].Play();
                                        }
                                    }
                                    else if (type == 29)
                                    {
                                        if (num >= 24 && num <= 87)
                                        {
                                            num2 *= 0.5f;
                                        }
                                        if (num >= 88 && num <= 91)
                                        {
                                            num2 *= 0.7f;
                                        }
                                        if (num >= 93 && num <= 99)
                                        {
                                            num2 *= 0.4f;
                                        }
                                        if (num == 92)
                                        {
                                            num2 *= 0.5f;
                                        }
                                        if (num == 103)
                                        {
                                            num2 *= 0.4f;
                                        }
                                        if (num == 104)
                                        {
                                            num2 *= 0.55f;
                                        }
                                        if (num == 100 || num == 101)
                                        {
                                            num2 *= 0.25f;
                                        }
                                        if (num == 102)
                                        {
                                            num2 *= 0.4f;
                                        }
                                        if (Game1.soundInstanceZombie[num].State != SoundState.Playing)
                                        {
                                            Game1.soundInstanceZombie[num] = Game1.soundZombie[num].CreateInstance();
                                            Game1.soundInstanceZombie[num].Volume = num2;
                                            Game1.soundInstanceZombie[num].Pan = num3;
                                            Game1.soundInstanceZombie[num].Pitch = (float)Game1.rand.Next(-10, 11) * 0.01f;
                                            Game1.soundInstanceZombie[num].Play();
                                        }
                                    }
                                    else if (type == 30)
                                    {
                                        num = Game1.rand.Next(10, 12);
                                        if (Game1.rand.Next(300) == 0)
                                        {
                                            num = 12;
                                            if (Game1.soundInstanceZombie[num].State == SoundState.Playing)
                                            {
                                                return;
                                            }
                                        }
                                        Game1.soundInstanceZombie[num] = Game1.soundZombie[num].CreateInstance();
                                        Game1.soundInstanceZombie[num].Volume = num2 * 0.75f;
                                        Game1.soundInstanceZombie[num].Pan = num3;
                                        if (num != 12)
                                        {
                                            Game1.soundInstanceZombie[num].Pitch = (float)Game1.rand.Next(-70, 1) * 0.01f;
                                        }
                                        else
                                        {
                                            Game1.soundInstanceZombie[num].Pitch = (float)Game1.rand.Next(-40, 21) * 0.01f;
                                        }
                                        Game1.soundInstanceZombie[num].Play();
                                    }
                                    else if (type == 31)
                                    {
                                        num = 13;
                                        Game1.soundInstanceZombie[num] = Game1.soundZombie[num].CreateInstance();
                                        Game1.soundInstanceZombie[num].Volume = num2 * 0.35f;
                                        Game1.soundInstanceZombie[num].Pan = num3;
                                        Game1.soundInstanceZombie[num].Pitch = (float)Game1.rand.Next(-40, 21) * 0.01f;
                                        Game1.soundInstanceZombie[num].Play();
                                    }
                                    else if (type == 32)
                                    {
                                        if (Game1.soundInstanceZombie[num].State != SoundState.Playing)
                                        {
                                            Game1.soundInstanceZombie[num] = Game1.soundZombie[num].CreateInstance();
                                            Game1.soundInstanceZombie[num].Volume = num2 * 0.15f;
                                            Game1.soundInstanceZombie[num].Pan = num3;
                                            Game1.soundInstanceZombie[num].Pitch = (float)Game1.rand.Next(-70, 26) * 0.01f;
                                            Game1.soundInstanceZombie[num].Play();
                                        }
                                    }
                                    else if (type == 33)
                                    {
                                        num = 15;
                                        if (Game1.soundInstanceZombie[num].State != SoundState.Playing)
                                        {
                                            Game1.soundInstanceZombie[num] = Game1.soundZombie[num].CreateInstance();
                                            Game1.soundInstanceZombie[num].Volume = num2 * 0.2f;
                                            Game1.soundInstanceZombie[num].Pan = num3;
                                            Game1.soundInstanceZombie[num].Pitch = (float)Game1.rand.Next(-10, 31) * 0.01f;
                                            Game1.soundInstanceZombie[num].Play();
                                        }
                                    }
                                    else if (type == 34)
                                    {
                                        float num15 = (float)num / 50f;
                                        if (num15 > 1f)
                                        {
                                            num15 = 1f;
                                        }
                                        num2 *= num15;
                                        num2 *= 0.2f;
                                        if (num2 <= 0f || x == -1 || y == -1)
                                        {
                                            if (Game1.soundInstanceLiquid[0] != null)
                                            {
                                                if (Game1.soundInstanceLiquid[0].State == SoundState.Playing)
                                                {
                                                    Game1.soundInstanceLiquid[0].Stop();
                                                }
                                            }
                                        }
                                        else if (Game1.soundInstanceLiquid[0] != null) //(Game1.soundInstanceLiquid[0].State == SoundState.Playing)
                                        {
                                            if (Game1.soundInstanceLiquid[0].State == SoundState.Playing)
                                            {
                                               Game1.soundInstanceLiquid[0].Volume = num2;
                                                Game1.soundInstanceLiquid[0].Pan = num3;
                                                Game1.soundInstanceLiquid[0].Pitch = -0.2f;
                                            }
                                        }
                                        else
                                        {
                                            Game1.soundInstanceLiquid[0] = Game1.soundLiquid[0].CreateInstance();
                                            Game1.soundInstanceLiquid[0].Volume = num2;
                                            Game1.soundInstanceLiquid[0].Pan = num3;
                                            Game1.soundInstanceLiquid[0].Play();
                                        }
                                    }
                                    else if (type == 35)
                                    {
                                        float num16 = (float)num / 50f;
                                        if (num16 > 1f)
                                        {
                                            num16 = 1f;
                                        }
                                        num2 *= num16;
                                        num2 *= 0.65f;
                                        if (num2 <= 0f || x == -1 || y == -1)
                                        {
                                            if (Game1.soundInstanceLiquid[1] != null)
                                            {
                                                if (Game1.soundInstanceLiquid[1].State == SoundState.Playing)
                                                {
                                                    Game1.soundInstanceLiquid[1].Stop();
                                                }
                                            }
                                        }
                                        else if (Game1.soundInstanceLiquid[1] != null)
                                        {
                                            if (Game1.soundInstanceLiquid[1].State == SoundState.Playing)
                                            {
                                                Game1.soundInstanceLiquid[1].Volume = num2;
                                                Game1.soundInstanceLiquid[1].Pan = num3;
                                                Game1.soundInstanceLiquid[1].Pitch = -0f;
                                            }
                                        }
                                        else
                                        {
                                            Game1.soundInstanceLiquid[1] = Game1.soundLiquid[1].CreateInstance();
                                            Game1.soundInstanceLiquid[1].Volume = num2;
                                            Game1.soundInstanceLiquid[1].Pan = num3;
                                            Game1.soundInstanceLiquid[1].Play();
                                        }
                                    }
                                    else if (type == 36)
                                    {
                                        int num17 = Style;
                                        if (Style == -1)
                                        {
                                            num17 = 0;
                                        }
                                        Game1.soundInstanceRoar[num17] = Game1.soundRoar[num17].CreateInstance();
                                        Game1.soundInstanceRoar[num17].Volume = num2;
                                        Game1.soundInstanceRoar[num17].Pan = num3;
                                        if (Style == -1)
                                        {
                                            Game1.soundInstanceRoar[num17].Pitch += 0.6f;
                                        }
                                        Game1.soundInstanceRoar[num17].Play();
                                    }
                                    else if (type == 37)
                                    {
                                        int num18 = Game1.rand.Next(57, 59);
                                        num2 *= (float)Style * 0.05f;
                                        Game1.soundInstanceItem[num18] = Game1.soundItem[num18].CreateInstance();
                                        Game1.soundInstanceItem[num18].Volume = num2;
                                        Game1.soundInstanceItem[num18].Pan = num3;
                                        Game1.soundInstanceItem[num18].Pitch = (float)Game1.rand.Next(-40, 41) * 0.01f;
                                        Game1.soundInstanceItem[num18].Play();
                                    }
                                    else if (type == 38)
                                    {
                                        int num19 = Game1.rand.Next(5);
                                        Game1.soundInstanceCoin[num19] = Game1.soundCoin[num19].CreateInstance();
                                        Game1.soundInstanceCoin[num19].Volume = num2;
                                        Game1.soundInstanceCoin[num19].Pan = num3;
                                        Game1.soundInstanceCoin[num19].Pitch = (float)Game1.rand.Next(-40, 41) * 0.002f;
                                        Game1.soundInstanceCoin[num19].Play();
                                    }
                                    else if (type == 39)
                                    {
                                        Game1.soundInstanceDrip[Style] = Game1.soundDrip[Style].CreateInstance();
                                        Game1.soundInstanceDrip[Style].Volume = num2 * 0.5f;
                                        Game1.soundInstanceDrip[Style].Pan = num3;
                                        Game1.soundInstanceDrip[Style].Pitch = (float)Game1.rand.Next(-30, 31) * 0.01f;
                                        Game1.soundInstanceDrip[Style].Play();
                                    }
                                    else if (type == 40)
                                    {
                                        Game1.soundInstanceCamera.Stop();
                                        Game1.soundInstanceCamera = Game1.soundCamera.CreateInstance();
                                        Game1.soundInstanceCamera.Volume = num2;
                                        Game1.soundInstanceCamera.Pan = num3;
                                        Game1.soundInstanceCamera.Play();
                                    }
                                    else if (type == 41)
                                    {
                                        Game1.soundInstanceMoonlordCry = Game1.soundNPCKilled[10].CreateInstance();
                                        Game1.soundInstanceMoonlordCry.Volume = 1f / (1f + (new Vector2((float)x, (float)y) - Game1.player[Game1.myPlayer].position).Length());
                                        Game1.soundInstanceMoonlordCry.Pan = num3;
                                        Game1.soundInstanceMoonlordCry.Pitch = (float)Game1.rand.Next(-10, 11) * 0.01f;
                                        Game1.soundInstanceMoonlordCry.Play();
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine("[ex] (PlaySound) : " + ex.Message);
            }
        }//PlaySound


        // SelectPlayer
        public static void SelectPlayer(PlayerFileData data)
        {
            if (Game1._pendingCharacterSelect != null)
            {
                Game1._pendingCharacterSelect(data);
                Game1._pendingCharacterSelect = null;
                return;
            }
            if (!Game1.menuMultiplayer)
            {
                Game1.ServerSideCharacter = false;
                Game1.myPlayer = 0;
                data.SetAsActive();
                Game1.player[Game1.myPlayer].position = Vector2.Zero;
                Game1.LoadWorlds();
                Game1.PlaySound(10, -1, -1, 1);
                Game1.menuMode = 6;
                return;
            }
            Game1.ServerSideCharacter = false;
            data.SetAsActive();
            Game1.PlaySound(10, -1, -1, 1);
            if (Game1.autoJoin)
            {
                if (Netplay.SetRemoteIP(Game1.getIP))
                {
                    Game1.menuMode = 10;
                    Netplay.StartTcpClient();
                }
                Game1.autoJoin = false;
                return;
            }
            if (Game1.menuServer)
            {
                Game1.LoadWorlds();
                Game1.menuMode = 6;
                return;
            }
            Game1.menuMode = 13;
            Game1.clrInput();
        }


        //RnD
        public static void ToggleFullScreen()
        {
            Game1.SetFullScreen(!Game1.graphics.IsFullScreen);
        }

        //RnD
        public static void SetFullScreen(bool fullscreen)
        {
            Game1.SetDisplayMode(Game1.PendingResolutionWidth, Game1.PendingResolutionHeight, fullscreen);
        }

        //RnD
        public static void SetResolution(int width, int height)
        {
            Game1.SetDisplayMode(width, height, Game1.graphics.IsFullScreen);
        }

        //RnD
        public static void SetDisplayMode(int width, int height, bool fullscreen)
        {

            if (Game1.graphics.IsFullScreen != fullscreen)
            {
                Game1.graphics.ToggleFullScreen();
            }
            //Game1.screenMaximized = (((Form)Control.FromHandle(Main.instance.Window.Handle)).WindowState == FormWindowState.Maximized);
            //Form form = (Form)Control.FromHandle(Main.instance.Window.Handle);
            if (!Game1.instance.IsActive && (Game1.screenMaximized || Game1.graphics.IsFullScreen))
            {
                return;
            }
            bool flag = false;
            int num3;
            int num4;
            if (Game1.screenMaximized || Game1.graphics.IsFullScreen)
            {
                //form.MinimumSize = new Size(0, 0);
                if (width > Game1.maxScreenW)
                {
                    float num = (float)height / (float)width;
                    width = Game1.maxScreenW;
                    height = (int)(num * (float)width);
                }
                if (height > Game1.maxScreenH)
                {
                    float num2 = (float)width / (float)height;
                    height = Game1.maxScreenH;
                    width = (int)(num2 * (float)height);
                }
                num3 = Game1.graphics.PreferredBackBufferWidth;
                num4 = Game1.graphics.PreferredBackBufferHeight;
            }
            else
            {
                //form.MinimumSize = new Size(Game1.minScreenW, Game1.minScreenH);
                width = Math.Min(width, Game1.maxScreenW);
                height = Math.Min(height, Game1.maxScreenH);
                num3 = Game1.graphics.GraphicsDevice.Viewport.Width;
                num4 = Game1.graphics.GraphicsDevice.Viewport.Height;
                flag = (Game1.graphics.PreferredBackBufferWidth
                    != Game1.graphics.GraphicsDevice.Viewport.Width
                    || Game1.graphics.PreferredBackBufferHeight
                    != Game1.graphics.GraphicsDevice.Viewport.Height);
            }
            if (!fullscreen && !flag)
            {
                //if (form.ClientSize.Width < Game1.graphics.PreferredBackBufferWidth)
                //{
                //    width = form.ClientSize.Width;
                //    flag = true;
                //}
                //if (form.ClientSize.Height < Game1.graphics.PreferredBackBufferHeight)
                //{
                //    height = form.ClientSize.Height;
                //    flag = true;
                //}
            }
            width &= 2147483646;
            height &= 2147483646;
            width = Math.Max(width, Game1.minScreenW);
            height = Math.Max(height, Game1.minScreenH);
            if (width != num3 || height != num4 || flag)
            {
                Game1.mapTime = 0;
                if (Game1.gamePaused)
                {
                    Game1.renderNow = true;
                }
                Game1.screenWidth = width;
                Game1.screenHeight = height;
                Game1.graphics.PreferredBackBufferWidth = Game1.screenWidth;
                Game1.graphics.PreferredBackBufferHeight = Game1.screenHeight;
                Game1.graphics.ApplyChanges();
                Game1.PendingResolutionWidth = Game1.screenWidth;
                Game1.PendingResolutionHeight = Game1.screenHeight;
                if (!fullscreen)
                {
                    //form.SendToBack();
                    //form.BringToFront();
                }
                Lighting.Initialize(true);
                if (!Game1.drawToScreen)
                {
                    Game1.instance.InitTargets();
                }
                UserInterface.ActiveInstance.Recalculate();
                Debug.WriteLine(string.Concat(new object[]
                {
                    "Resolution changed to: ",
                    width,
                    "x",
                    height,
                    "."
                }));
            }
            if (!Game1.graphics.SynchronizeWithVerticalRetrace)
            {
                Game1.graphics.SynchronizeWithVerticalRetrace = true;
                Game1.graphics.ApplyChanges();
            }

        }//


        // UpdateDisplaySettings
        public void UpdateDisplaySettings()
        {
            Game1.SetResolution(base.GraphicsDevice.Viewport.Width, base.GraphicsDevice.Viewport.Height);
        }//UpdateDisplaySettings


        // OpenPlayerSelect
        public static void OpenPlayerSelect(Game1.OnPlayerSelected method)
        {
            if (Game1.gameMenu && (Game1.menuMode == 10 || Game1.menuMode == 14))
            {
                return;
            }
            Game1._pendingCharacterSelect = method;
            if (!Game1.gameMenu)
            {
                WorldGen.SaveAndQuit(delegate
                {
                    Game1.LoadPlayers();
                    Game1.menuMode = 1;
                });
                return;
            }
            Game1.LoadPlayers();
            Game1.menuMode = 1;
        }//OpenPlayerSelect


        // SwitchNetMode
        public static void SwitchNetMode(int mode)
        {
            if (mode >= 0 && mode <= 2)
            {
                Game1._targetNetMode = mode;
                Game1._hasPendingNetmodeChange = true;
            }
        }//SwitchNetMode
    }//Game1 class end
}//GameManager namespace end
